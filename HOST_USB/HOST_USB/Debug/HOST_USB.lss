
HOST_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d624  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040d624  0040d624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c4  20000000  0040d62c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0001ba08  20000a00  0040e100  00018a00  2**8
                  ALLOC
  4 .stack        00003000  2001c408  00429b08  00018a00  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000189c4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000189f2  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019341  00000000  00000000  00018a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000046b2  00000000  00000000  00031d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000c7bc  00000000  00000000  00036440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001750  00000000  00000000  00042bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001508  00000000  00000000  0004434c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d45e  00000000  00000000  00045854  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b16e  00000000  00000000  00062cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005e296  00000000  00000000  0007de20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006bcc  00000000  00000000  000dc0b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2001f408 	.word	0x2001f408
  400004:	00408bcd 	.word	0x00408bcd
  400008:	00408c9d 	.word	0x00408c9d
  40000c:	00408c9d 	.word	0x00408c9d
  400010:	00408c9d 	.word	0x00408c9d
  400014:	00408c9d 	.word	0x00408c9d
  400018:	00408c9d 	.word	0x00408c9d
	...
  40002c:	004016dd 	.word	0x004016dd
  400030:	00408c9d 	.word	0x00408c9d
  400034:	00000000 	.word	0x00000000
  400038:	004017dd 	.word	0x004017dd
  40003c:	004095a1 	.word	0x004095a1
  400040:	00408c9d 	.word	0x00408c9d
  400044:	00408c9d 	.word	0x00408c9d
  400048:	00408c9d 	.word	0x00408c9d
  40004c:	00408c9d 	.word	0x00408c9d
  400050:	00408c9d 	.word	0x00408c9d
  400054:	00408c9d 	.word	0x00408c9d
  400058:	00408c9d 	.word	0x00408c9d
  40005c:	00409881 	.word	0x00409881
  400060:	00400855 	.word	0x00400855
  400064:	00408c9d 	.word	0x00408c9d
  400068:	00000000 	.word	0x00000000
  40006c:	00406531 	.word	0x00406531
  400070:	00406549 	.word	0x00406549
  400074:	00408c9d 	.word	0x00408c9d
  400078:	00408c9d 	.word	0x00408c9d
  40007c:	00408c9d 	.word	0x00408c9d
  400080:	00408c9d 	.word	0x00408c9d
  400084:	00408c9d 	.word	0x00408c9d
  400088:	00408c9d 	.word	0x00408c9d
  40008c:	00408c9d 	.word	0x00408c9d
  400090:	00408c9d 	.word	0x00408c9d
  400094:	00408c9d 	.word	0x00408c9d
  400098:	00408c9d 	.word	0x00408c9d
  40009c:	00408c9d 	.word	0x00408c9d
  4000a0:	00408c9d 	.word	0x00408c9d
  4000a4:	00408c9d 	.word	0x00408c9d
  4000a8:	00408c9d 	.word	0x00408c9d
  4000ac:	00408c9d 	.word	0x00408c9d
  4000b0:	00408c9d 	.word	0x00408c9d
  4000b4:	00408c9d 	.word	0x00408c9d
  4000b8:	00408c9d 	.word	0x00408c9d
	...
  4000fc:	00407b75 	.word	0x00407b75
  400100:	00408c9d 	.word	0x00408c9d
  400104:	00408c9d 	.word	0x00408c9d
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20000a00 	.word	0x20000a00
  400164:	00000000 	.word	0x00000000
  400168:	0040d62c 	.word	0x0040d62c

0040016c <frame_dummy>:
  40016c:	4b08      	ldr	r3, [pc, #32]	; (400190 <frame_dummy+0x24>)
  40016e:	b510      	push	{r4, lr}
  400170:	b11b      	cbz	r3, 40017a <frame_dummy+0xe>
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x28>)
  400174:	4908      	ldr	r1, [pc, #32]	; (400198 <frame_dummy+0x2c>)
  400176:	f3af 8000 	nop.w
  40017a:	4808      	ldr	r0, [pc, #32]	; (40019c <frame_dummy+0x30>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b903      	cbnz	r3, 400182 <frame_dummy+0x16>
  400180:	bd10      	pop	{r4, pc}
  400182:	4b07      	ldr	r3, [pc, #28]	; (4001a0 <frame_dummy+0x34>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0fb      	beq.n	400180 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	bf00      	nop
  400190:	00000000 	.word	0x00000000
  400194:	0040d62c 	.word	0x0040d62c
  400198:	20000a04 	.word	0x20000a04
  40019c:	0040d62c 	.word	0x0040d62c
  4001a0:	00000000 	.word	0x00000000

004001a4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4001a4:	b480      	push	{r7}
  4001a6:	b083      	sub	sp, #12
  4001a8:	af00      	add	r7, sp, #0
  4001aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001ac:	687b      	ldr	r3, [r7, #4]
  4001ae:	2b07      	cmp	r3, #7
  4001b0:	d825      	bhi.n	4001fe <osc_get_rate+0x5a>
  4001b2:	a201      	add	r2, pc, #4	; (adr r2, 4001b8 <osc_get_rate+0x14>)
  4001b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001df 	.word	0x004001df
  4001c0:	004001e5 	.word	0x004001e5
  4001c4:	004001eb 	.word	0x004001eb
  4001c8:	004001ef 	.word	0x004001ef
  4001cc:	004001f3 	.word	0x004001f3
  4001d0:	004001f7 	.word	0x004001f7
  4001d4:	004001fb 	.word	0x004001fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4001d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4001dc:	e010      	b.n	400200 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4001de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001e2:	e00d      	b.n	400200 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4001e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001e8:	e00a      	b.n	400200 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4001ea:	4b08      	ldr	r3, [pc, #32]	; (40020c <osc_get_rate+0x68>)
  4001ec:	e008      	b.n	400200 <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  4001ee:	4b08      	ldr	r3, [pc, #32]	; (400210 <osc_get_rate+0x6c>)
  4001f0:	e006      	b.n	400200 <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  4001f2:	4b08      	ldr	r3, [pc, #32]	; (400214 <osc_get_rate+0x70>)
  4001f4:	e004      	b.n	400200 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4001f6:	2300      	movs	r3, #0
  4001f8:	e002      	b.n	400200 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4001fa:	2300      	movs	r3, #0
  4001fc:	e000      	b.n	400200 <osc_get_rate+0x5c>
#endif
	}

	return 0;
  4001fe:	2300      	movs	r3, #0
}
  400200:	4618      	mov	r0, r3
  400202:	370c      	adds	r7, #12
  400204:	46bd      	mov	sp, r7
  400206:	f85d 7b04 	ldr.w	r7, [sp], #4
  40020a:	4770      	bx	lr
  40020c:	007a1200 	.word	0x007a1200
  400210:	00f42400 	.word	0x00f42400
  400214:	016e3600 	.word	0x016e3600

00400218 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400218:	b580      	push	{r7, lr}
  40021a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40021c:	2001      	movs	r0, #1
  40021e:	4b04      	ldr	r3, [pc, #16]	; (400230 <sysclk_get_main_hz+0x18>)
  400220:	4798      	blx	r3
  400222:	4602      	mov	r2, r0
  400224:	f640 3372 	movw	r3, #2930	; 0xb72
  400228:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40022c:	4618      	mov	r0, r3
  40022e:	bd80      	pop	{r7, pc}
  400230:	004001a5 	.word	0x004001a5

00400234 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400234:	b580      	push	{r7, lr}
  400236:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400238:	4b02      	ldr	r3, [pc, #8]	; (400244 <sysclk_get_cpu_hz+0x10>)
  40023a:	4798      	blx	r3
  40023c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40023e:	4618      	mov	r0, r3
  400240:	bd80      	pop	{r7, pc}
  400242:	bf00      	nop
  400244:	00400219 	.word	0x00400219

00400248 <configure_timer_for_run_time_stats>:
static uint32_t clocks_per_10th_ms = 0UL;

/*-----------------------------------------------------------*/

void configure_timer_for_run_time_stats(void)
{
  400248:	b580      	push	{r7, lr}
  40024a:	af00      	add	r7, sp, #0
	/* How many clocks are there per tenth of a millisecond? */
	clocks_per_10th_ms = configCPU_CLOCK_HZ / 10000UL;
  40024c:	4b04      	ldr	r3, [pc, #16]	; (400260 <configure_timer_for_run_time_stats+0x18>)
  40024e:	4798      	blx	r3
  400250:	4602      	mov	r2, r0
  400252:	4b04      	ldr	r3, [pc, #16]	; (400264 <configure_timer_for_run_time_stats+0x1c>)
  400254:	fba3 2302 	umull	r2, r3, r3, r2
  400258:	0b5b      	lsrs	r3, r3, #13
  40025a:	4a03      	ldr	r2, [pc, #12]	; (400268 <configure_timer_for_run_time_stats+0x20>)
  40025c:	6013      	str	r3, [r2, #0]
}
  40025e:	bd80      	pop	{r7, pc}
  400260:	00400235 	.word	0x00400235
  400264:	d1b71759 	.word	0xd1b71759
  400268:	20000a1c 	.word	0x20000a1c

0040026c <get_run_time_counter_value>:

/*-----------------------------------------------------------*/

uint32_t get_run_time_counter_value(void)
{
  40026c:	b580      	push	{r7, lr}
  40026e:	b088      	sub	sp, #32
  400270:	af00      	add	r7, sp, #0
	uint32_t sys_tick_counts, tick_count, ulReturn;
	const uint32_t sys_tick_reload_value
		= (configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  400272:	4b1e      	ldr	r3, [pc, #120]	; (4002ec <get_run_time_counter_value+0x80>)
  400274:	4798      	blx	r3
  400276:	4602      	mov	r2, r0
  400278:	4b1d      	ldr	r3, [pc, #116]	; (4002f0 <get_run_time_counter_value+0x84>)
  40027a:	fba3 2302 	umull	r2, r3, r3, r2
  40027e:	099b      	lsrs	r3, r3, #6
/*-----------------------------------------------------------*/

uint32_t get_run_time_counter_value(void)
{
	uint32_t sys_tick_counts, tick_count, ulReturn;
	const uint32_t sys_tick_reload_value
  400280:	3b01      	subs	r3, #1
  400282:	617b      	str	r3, [r7, #20]
		= (configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
	volatile uint32_t *const current_sys_tick_count
  400284:	4b1b      	ldr	r3, [pc, #108]	; (4002f4 <get_run_time_counter_value+0x88>)
  400286:	613b      	str	r3, [r7, #16]
		= ((volatile uint32_t *) 0xe000e018);
	volatile uint32_t *const interrupt_ctrl_statee
  400288:	4b1b      	ldr	r3, [pc, #108]	; (4002f8 <get_run_time_counter_value+0x8c>)
  40028a:	60fb      	str	r3, [r7, #12]
		= ((volatile uint32_t *) 0xe000ed04);
	const uint32_t sys_tick_pending_bit = 0x04000000UL;
  40028c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400290:	60bb      	str	r3, [r7, #8]
	used anyway to keep the examples simple, and to avoid reliance on a
	separate timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it
	was last reloaded? */
	sys_tick_counts = sys_tick_reload_value - *current_sys_tick_count;
  400292:	693b      	ldr	r3, [r7, #16]
  400294:	681b      	ldr	r3, [r3, #0]
  400296:	697a      	ldr	r2, [r7, #20]
  400298:	1ad3      	subs	r3, r2, r3
  40029a:	61fb      	str	r3, [r7, #28]

	/* How many times has it overflowed? */
	tick_count = xTaskGetTickCountFromISR();
  40029c:	4b17      	ldr	r3, [pc, #92]	; (4002fc <get_run_time_counter_value+0x90>)
  40029e:	4798      	blx	r3
  4002a0:	61b8      	str	r0, [r7, #24]

	/* This is called from the context switch, so will be called from a
	critical section.  xTaskGetTickCountFromISR() contains its own critical
	section, and the ISR safe critical sections are not designed to nest,
	so reset the critical section. */
	ulReturn = portSET_INTERRUPT_MASK_FROM_ISR();
  4002a2:	4b17      	ldr	r3, [pc, #92]	; (400300 <get_run_time_counter_value+0x94>)
  4002a4:	4798      	blx	r3
  4002a6:	6078      	str	r0, [r7, #4]
	(void) ulReturn;

	/* Is there a SysTick interrupt pending? */
	if ((*interrupt_ctrl_statee & sys_tick_pending_bit) != 0UL) {
  4002a8:	68fb      	ldr	r3, [r7, #12]
  4002aa:	681a      	ldr	r2, [r3, #0]
  4002ac:	68bb      	ldr	r3, [r7, #8]
  4002ae:	4013      	ands	r3, r2
  4002b0:	2b00      	cmp	r3, #0
  4002b2:	d007      	beq.n	4002c4 <get_run_time_counter_value+0x58>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		tick_count++;
  4002b4:	69bb      	ldr	r3, [r7, #24]
  4002b6:	3301      	adds	r3, #1
  4002b8:	61bb      	str	r3, [r7, #24]

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		sys_tick_counts = sys_tick_reload_value -
				*current_sys_tick_count;
  4002ba:	693b      	ldr	r3, [r7, #16]
  4002bc:	681b      	ldr	r3, [r3, #0]
		but the tick count not yet incremented. */
		tick_count++;

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		sys_tick_counts = sys_tick_reload_value -
  4002be:	697a      	ldr	r2, [r7, #20]
  4002c0:	1ad3      	subs	r3, r2, r3
  4002c2:	61fb      	str	r3, [r7, #28]
				*current_sys_tick_count;
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = (tick_count * 10UL);
  4002c4:	69ba      	ldr	r2, [r7, #24]
  4002c6:	4613      	mov	r3, r2
  4002c8:	009b      	lsls	r3, r3, #2
  4002ca:	4413      	add	r3, r2
  4002cc:	005b      	lsls	r3, r3, #1
  4002ce:	607b      	str	r3, [r7, #4]

	/* Add on the number of tenths of a millisecond that have passed since
	the tick count last got updated. */
	ulReturn += (sys_tick_counts / clocks_per_10th_ms);
  4002d0:	4b0c      	ldr	r3, [pc, #48]	; (400304 <get_run_time_counter_value+0x98>)
  4002d2:	681b      	ldr	r3, [r3, #0]
  4002d4:	69fa      	ldr	r2, [r7, #28]
  4002d6:	fbb2 f3f3 	udiv	r3, r2, r3
  4002da:	687a      	ldr	r2, [r7, #4]
  4002dc:	4413      	add	r3, r2
  4002de:	607b      	str	r3, [r7, #4]

	return ulReturn;
  4002e0:	687b      	ldr	r3, [r7, #4]
}
  4002e2:	4618      	mov	r0, r3
  4002e4:	3720      	adds	r7, #32
  4002e6:	46bd      	mov	sp, r7
  4002e8:	bd80      	pop	{r7, pc}
  4002ea:	bf00      	nop
  4002ec:	00400235 	.word	0x00400235
  4002f0:	10624dd3 	.word	0x10624dd3
  4002f4:	e000e018 	.word	0xe000e018
  4002f8:	e000ed04 	.word	0xe000ed04
  4002fc:	00402709 	.word	0x00402709
  400300:	004017c1 	.word	0x004017c1
  400304:	20000a1c 	.word	0x20000a1c

00400308 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400308:	b480      	push	{r7}
  40030a:	b083      	sub	sp, #12
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400312:	4908      	ldr	r1, [pc, #32]	; (400334 <NVIC_EnableIRQ+0x2c>)
  400314:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400318:	095b      	lsrs	r3, r3, #5
  40031a:	79fa      	ldrb	r2, [r7, #7]
  40031c:	f002 021f 	and.w	r2, r2, #31
  400320:	2001      	movs	r0, #1
  400322:	fa00 f202 	lsl.w	r2, r0, r2
  400326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40032a:	370c      	adds	r7, #12
  40032c:	46bd      	mov	sp, r7
  40032e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400332:	4770      	bx	lr
  400334:	e000e100 	.word	0xe000e100

00400338 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400338:	b480      	push	{r7}
  40033a:	b083      	sub	sp, #12
  40033c:	af00      	add	r7, sp, #0
  40033e:	4603      	mov	r3, r0
  400340:	6039      	str	r1, [r7, #0]
  400342:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400344:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400348:	2b00      	cmp	r3, #0
  40034a:	da0b      	bge.n	400364 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40034c:	490d      	ldr	r1, [pc, #52]	; (400384 <NVIC_SetPriority+0x4c>)
  40034e:	79fb      	ldrb	r3, [r7, #7]
  400350:	f003 030f 	and.w	r3, r3, #15
  400354:	3b04      	subs	r3, #4
  400356:	683a      	ldr	r2, [r7, #0]
  400358:	b2d2      	uxtb	r2, r2
  40035a:	0112      	lsls	r2, r2, #4
  40035c:	b2d2      	uxtb	r2, r2
  40035e:	440b      	add	r3, r1
  400360:	761a      	strb	r2, [r3, #24]
  400362:	e009      	b.n	400378 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400364:	4908      	ldr	r1, [pc, #32]	; (400388 <NVIC_SetPriority+0x50>)
  400366:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40036a:	683a      	ldr	r2, [r7, #0]
  40036c:	b2d2      	uxtb	r2, r2
  40036e:	0112      	lsls	r2, r2, #4
  400370:	b2d2      	uxtb	r2, r2
  400372:	440b      	add	r3, r1
  400374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400378:	370c      	adds	r7, #12
  40037a:	46bd      	mov	sp, r7
  40037c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400380:	4770      	bx	lr
  400382:	bf00      	nop
  400384:	e000ed00 	.word	0xe000ed00
  400388:	e000e100 	.word	0xe000e100

0040038c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40038c:	b480      	push	{r7}
  40038e:	b083      	sub	sp, #12
  400390:	af00      	add	r7, sp, #0
  400392:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400394:	687b      	ldr	r3, [r7, #4]
  400396:	2b07      	cmp	r3, #7
  400398:	d825      	bhi.n	4003e6 <osc_get_rate+0x5a>
  40039a:	a201      	add	r2, pc, #4	; (adr r2, 4003a0 <osc_get_rate+0x14>)
  40039c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4003a0:	004003c1 	.word	0x004003c1
  4003a4:	004003c7 	.word	0x004003c7
  4003a8:	004003cd 	.word	0x004003cd
  4003ac:	004003d3 	.word	0x004003d3
  4003b0:	004003d7 	.word	0x004003d7
  4003b4:	004003db 	.word	0x004003db
  4003b8:	004003df 	.word	0x004003df
  4003bc:	004003e3 	.word	0x004003e3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4003c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4003c4:	e010      	b.n	4003e8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4003c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003ca:	e00d      	b.n	4003e8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4003cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003d0:	e00a      	b.n	4003e8 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4003d2:	4b08      	ldr	r3, [pc, #32]	; (4003f4 <osc_get_rate+0x68>)
  4003d4:	e008      	b.n	4003e8 <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  4003d6:	4b08      	ldr	r3, [pc, #32]	; (4003f8 <osc_get_rate+0x6c>)
  4003d8:	e006      	b.n	4003e8 <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  4003da:	4b08      	ldr	r3, [pc, #32]	; (4003fc <osc_get_rate+0x70>)
  4003dc:	e004      	b.n	4003e8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4003de:	2300      	movs	r3, #0
  4003e0:	e002      	b.n	4003e8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4003e2:	2300      	movs	r3, #0
  4003e4:	e000      	b.n	4003e8 <osc_get_rate+0x5c>
#endif
	}

	return 0;
  4003e6:	2300      	movs	r3, #0
}
  4003e8:	4618      	mov	r0, r3
  4003ea:	370c      	adds	r7, #12
  4003ec:	46bd      	mov	sp, r7
  4003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003f2:	4770      	bx	lr
  4003f4:	007a1200 	.word	0x007a1200
  4003f8:	00f42400 	.word	0x00f42400
  4003fc:	016e3600 	.word	0x016e3600

00400400 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400400:	b580      	push	{r7, lr}
  400402:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400404:	2001      	movs	r0, #1
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <sysclk_get_main_hz+0x18>)
  400408:	4798      	blx	r3
  40040a:	4602      	mov	r2, r0
  40040c:	f640 3372 	movw	r3, #2930	; 0xb72
  400410:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400414:	4618      	mov	r0, r3
  400416:	bd80      	pop	{r7, pc}
  400418:	0040038d 	.word	0x0040038d

0040041c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400420:	4b02      	ldr	r3, [pc, #8]	; (40042c <sysclk_get_cpu_hz+0x10>)
  400422:	4798      	blx	r3
  400424:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400426:	4618      	mov	r0, r3
  400428:	bd80      	pop	{r7, pc}
  40042a:	bf00      	nop
  40042c:	00400401 	.word	0x00400401

00400430 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400430:	b580      	push	{r7, lr}
  400432:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400434:	4b02      	ldr	r3, [pc, #8]	; (400440 <sysclk_get_peripheral_hz+0x10>)
  400436:	4798      	blx	r3
  400438:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40043a:	4618      	mov	r0, r3
  40043c:	bd80      	pop	{r7, pc}
  40043e:	bf00      	nop
  400440:	00400401 	.word	0x00400401

00400444 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400444:	b480      	push	{r7}
  400446:	b08b      	sub	sp, #44	; 0x2c
  400448:	af00      	add	r7, sp, #0
  40044a:	6078      	str	r0, [r7, #4]
  40044c:	460b      	mov	r3, r1
  40044e:	70fb      	strb	r3, [r7, #3]
  400450:	687b      	ldr	r3, [r7, #4]
  400452:	627b      	str	r3, [r7, #36]	; 0x24
  400454:	78fb      	ldrb	r3, [r7, #3]
  400456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40045a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40045c:	61fb      	str	r3, [r7, #28]
  40045e:	69fb      	ldr	r3, [r7, #28]
  400460:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400462:	69bb      	ldr	r3, [r7, #24]
  400464:	095b      	lsrs	r3, r3, #5
  400466:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400468:	697b      	ldr	r3, [r7, #20]
  40046a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40046e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400472:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400474:	613b      	str	r3, [r7, #16]

	if (level) {
  400476:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40047a:	2b00      	cmp	r3, #0
  40047c:	d009      	beq.n	400492 <ioport_set_pin_level+0x4e>
  40047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400480:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400482:	68fb      	ldr	r3, [r7, #12]
  400484:	f003 031f 	and.w	r3, r3, #31
  400488:	2201      	movs	r2, #1
  40048a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40048c:	693b      	ldr	r3, [r7, #16]
  40048e:	631a      	str	r2, [r3, #48]	; 0x30
  400490:	e008      	b.n	4004a4 <ioport_set_pin_level+0x60>
  400492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400494:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400496:	68bb      	ldr	r3, [r7, #8]
  400498:	f003 031f 	and.w	r3, r3, #31
  40049c:	2201      	movs	r2, #1
  40049e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4004a0:	693b      	ldr	r3, [r7, #16]
  4004a2:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  4004a4:	372c      	adds	r7, #44	; 0x2c
  4004a6:	46bd      	mov	sp, r7
  4004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004ac:	4770      	bx	lr
  4004ae:	bf00      	nop

004004b0 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  4004b0:	b480      	push	{r7}
  4004b2:	b089      	sub	sp, #36	; 0x24
  4004b4:	af00      	add	r7, sp, #0
  4004b6:	6078      	str	r0, [r7, #4]
  4004b8:	687b      	ldr	r3, [r7, #4]
  4004ba:	61fb      	str	r3, [r7, #28]
  4004bc:	69fb      	ldr	r3, [r7, #28]
  4004be:	61bb      	str	r3, [r7, #24]
  4004c0:	69bb      	ldr	r3, [r7, #24]
  4004c2:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4004c4:	697b      	ldr	r3, [r7, #20]
  4004c6:	095b      	lsrs	r3, r3, #5
  4004c8:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4004ca:	693b      	ldr	r3, [r7, #16]
  4004cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004d0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004d4:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4004d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4004d8:	69fb      	ldr	r3, [r7, #28]
  4004da:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4004dc:	68fb      	ldr	r3, [r7, #12]
  4004de:	f003 031f 	and.w	r3, r3, #31
  4004e2:	2101      	movs	r1, #1
  4004e4:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4004e8:	4013      	ands	r3, r2
  4004ea:	2b00      	cmp	r3, #0
  4004ec:	bf14      	ite	ne
  4004ee:	2301      	movne	r3, #1
  4004f0:	2300      	moveq	r3, #0
  4004f2:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4004f4:	4618      	mov	r0, r3
  4004f6:	3724      	adds	r7, #36	; 0x24
  4004f8:	46bd      	mov	sp, r7
  4004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004fe:	4770      	bx	lr

00400500 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  400500:	b480      	push	{r7}
  400502:	b08b      	sub	sp, #44	; 0x2c
  400504:	af00      	add	r7, sp, #0
  400506:	6078      	str	r0, [r7, #4]
  400508:	687b      	ldr	r3, [r7, #4]
  40050a:	627b      	str	r3, [r7, #36]	; 0x24
  40050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40050e:	623b      	str	r3, [r7, #32]
  400510:	6a3b      	ldr	r3, [r7, #32]
  400512:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400514:	69fb      	ldr	r3, [r7, #28]
  400516:	095b      	lsrs	r3, r3, #5
  400518:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40051a:	69bb      	ldr	r3, [r7, #24]
  40051c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400520:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400524:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  400526:	617b      	str	r3, [r7, #20]
  400528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40052a:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40052c:	693b      	ldr	r3, [r7, #16]
  40052e:	f003 031f 	and.w	r3, r3, #31
  400532:	2201      	movs	r2, #1
  400534:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  400538:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40053a:	697b      	ldr	r3, [r7, #20]
  40053c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40053e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400540:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400542:	68bb      	ldr	r3, [r7, #8]
  400544:	f003 031f 	and.w	r3, r3, #31
  400548:	2101      	movs	r1, #1
  40054a:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40054e:	4013      	ands	r3, r2
  400550:	2b00      	cmp	r3, #0
  400552:	d003      	beq.n	40055c <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  400554:	697b      	ldr	r3, [r7, #20]
  400556:	68fa      	ldr	r2, [r7, #12]
  400558:	635a      	str	r2, [r3, #52]	; 0x34
  40055a:	e002      	b.n	400562 <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  40055c:	697b      	ldr	r3, [r7, #20]
  40055e:	68fa      	ldr	r2, [r7, #12]
  400560:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  400562:	372c      	adds	r7, #44	; 0x2c
  400564:	46bd      	mov	sp, r7
  400566:	f85d 7b04 	ldr.w	r7, [sp], #4
  40056a:	4770      	bx	lr

0040056c <wifi_module_reset>:
volatile int uart_beatheart = 0;
extern uint8_t thermoIndex;
extern uint8_t thermimage[96*46 + 6];

void wifi_module_reset(void)
{
  40056c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400570:	af00      	add	r7, sp, #0
	//ioport_set_pin_level(WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(ESP_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
  400572:	2021      	movs	r0, #33	; 0x21
  400574:	2100      	movs	r1, #0
  400576:	4b4a      	ldr	r3, [pc, #296]	; (4006a0 <wifi_module_reset+0x134>)
  400578:	4798      	blx	r3
	delay_ms(100);
  40057a:	4b4a      	ldr	r3, [pc, #296]	; (4006a4 <wifi_module_reset+0x138>)
  40057c:	4798      	blx	r3
  40057e:	4603      	mov	r3, r0
  400580:	4618      	mov	r0, r3
  400582:	f04f 0100 	mov.w	r1, #0
  400586:	4602      	mov	r2, r0
  400588:	460b      	mov	r3, r1
  40058a:	1892      	adds	r2, r2, r2
  40058c:	eb43 0303 	adc.w	r3, r3, r3
  400590:	1812      	adds	r2, r2, r0
  400592:	eb43 0301 	adc.w	r3, r3, r1
  400596:	ea4f 1b43 	mov.w	fp, r3, lsl #5
  40059a:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
  40059e:	ea4f 1a42 	mov.w	sl, r2, lsl #5
  4005a2:	eb12 020a 	adds.w	r2, r2, sl
  4005a6:	eb43 030b 	adc.w	r3, r3, fp
  4005aa:	1812      	adds	r2, r2, r0
  4005ac:	eb43 0301 	adc.w	r3, r3, r1
  4005b0:	f243 60af 	movw	r0, #13999	; 0x36af
  4005b4:	f04f 0100 	mov.w	r1, #0
  4005b8:	1812      	adds	r2, r2, r0
  4005ba:	eb43 0301 	adc.w	r3, r3, r1
  4005be:	4e3a      	ldr	r6, [pc, #232]	; (4006a8 <wifi_module_reset+0x13c>)
  4005c0:	4610      	mov	r0, r2
  4005c2:	4619      	mov	r1, r3
  4005c4:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4005c8:	f04f 0300 	mov.w	r3, #0
  4005cc:	47b0      	blx	r6
  4005ce:	4602      	mov	r2, r0
  4005d0:	460b      	mov	r3, r1
  4005d2:	4613      	mov	r3, r2
  4005d4:	4618      	mov	r0, r3
  4005d6:	4b35      	ldr	r3, [pc, #212]	; (4006ac <wifi_module_reset+0x140>)
  4005d8:	4798      	blx	r3
	//ioport_set_pin_level(WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	delay_ms(100);
  4005da:	4b32      	ldr	r3, [pc, #200]	; (4006a4 <wifi_module_reset+0x138>)
  4005dc:	4798      	blx	r3
  4005de:	4603      	mov	r3, r0
  4005e0:	4618      	mov	r0, r3
  4005e2:	f04f 0100 	mov.w	r1, #0
  4005e6:	4602      	mov	r2, r0
  4005e8:	460b      	mov	r3, r1
  4005ea:	1892      	adds	r2, r2, r2
  4005ec:	eb43 0303 	adc.w	r3, r3, r3
  4005f0:	1812      	adds	r2, r2, r0
  4005f2:	eb43 0301 	adc.w	r3, r3, r1
  4005f6:	ea4f 1943 	mov.w	r9, r3, lsl #5
  4005fa:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
  4005fe:	ea4f 1842 	mov.w	r8, r2, lsl #5
  400602:	eb12 0208 	adds.w	r2, r2, r8
  400606:	eb43 0309 	adc.w	r3, r3, r9
  40060a:	1812      	adds	r2, r2, r0
  40060c:	eb43 0301 	adc.w	r3, r3, r1
  400610:	f243 60af 	movw	r0, #13999	; 0x36af
  400614:	f04f 0100 	mov.w	r1, #0
  400618:	1812      	adds	r2, r2, r0
  40061a:	eb43 0301 	adc.w	r3, r3, r1
  40061e:	4e22      	ldr	r6, [pc, #136]	; (4006a8 <wifi_module_reset+0x13c>)
  400620:	4610      	mov	r0, r2
  400622:	4619      	mov	r1, r3
  400624:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400628:	f04f 0300 	mov.w	r3, #0
  40062c:	47b0      	blx	r6
  40062e:	4602      	mov	r2, r0
  400630:	460b      	mov	r3, r1
  400632:	4613      	mov	r3, r2
  400634:	4618      	mov	r0, r3
  400636:	4b1d      	ldr	r3, [pc, #116]	; (4006ac <wifi_module_reset+0x140>)
  400638:	4798      	blx	r3
	ioport_set_pin_level(ESP_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
  40063a:	2021      	movs	r0, #33	; 0x21
  40063c:	2101      	movs	r1, #1
  40063e:	4b18      	ldr	r3, [pc, #96]	; (4006a0 <wifi_module_reset+0x134>)
  400640:	4798      	blx	r3
	delay_ms(100);
  400642:	4b18      	ldr	r3, [pc, #96]	; (4006a4 <wifi_module_reset+0x138>)
  400644:	4798      	blx	r3
  400646:	4603      	mov	r3, r0
  400648:	4618      	mov	r0, r3
  40064a:	f04f 0100 	mov.w	r1, #0
  40064e:	4602      	mov	r2, r0
  400650:	460b      	mov	r3, r1
  400652:	1892      	adds	r2, r2, r2
  400654:	eb43 0303 	adc.w	r3, r3, r3
  400658:	1812      	adds	r2, r2, r0
  40065a:	eb43 0301 	adc.w	r3, r3, r1
  40065e:	015d      	lsls	r5, r3, #5
  400660:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  400664:	0154      	lsls	r4, r2, #5
  400666:	1912      	adds	r2, r2, r4
  400668:	eb43 0305 	adc.w	r3, r3, r5
  40066c:	1812      	adds	r2, r2, r0
  40066e:	eb43 0301 	adc.w	r3, r3, r1
  400672:	f243 60af 	movw	r0, #13999	; 0x36af
  400676:	f04f 0100 	mov.w	r1, #0
  40067a:	1812      	adds	r2, r2, r0
  40067c:	eb43 0301 	adc.w	r3, r3, r1
  400680:	4c09      	ldr	r4, [pc, #36]	; (4006a8 <wifi_module_reset+0x13c>)
  400682:	4610      	mov	r0, r2
  400684:	4619      	mov	r1, r3
  400686:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40068a:	f04f 0300 	mov.w	r3, #0
  40068e:	47a0      	blx	r4
  400690:	4602      	mov	r2, r0
  400692:	460b      	mov	r3, r1
  400694:	4613      	mov	r3, r2
  400696:	4618      	mov	r0, r3
  400698:	4b04      	ldr	r3, [pc, #16]	; (4006ac <wifi_module_reset+0x140>)
  40069a:	4798      	blx	r3
}
  40069c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4006a0:	00400445 	.word	0x00400445
  4006a4:	0040041d 	.word	0x0040041d
  4006a8:	00409b25 	.word	0x00409b25
  4006ac:	20000001 	.word	0x20000001

004006b0 <byte2hexstrstr>:

static int byte2hexstrstr(const uint8_t *pBytes, uint32_t srcLen, uint8_t *pDstStr, uint32_t dstLen)
{
  4006b0:	b5b0      	push	{r4, r5, r7, lr}
  4006b2:	b08a      	sub	sp, #40	; 0x28
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	60f8      	str	r0, [r7, #12]
  4006b8:	60b9      	str	r1, [r7, #8]
  4006ba:	607a      	str	r2, [r7, #4]
  4006bc:	603b      	str	r3, [r7, #0]
	const char tab[] = "0123456789abcdef";
  4006be:	4b25      	ldr	r3, [pc, #148]	; (400754 <byte2hexstrstr+0xa4>)
  4006c0:	f107 0410 	add.w	r4, r7, #16
  4006c4:	461d      	mov	r5, r3
  4006c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4006c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4006ca:	682b      	ldr	r3, [r5, #0]
  4006cc:	7023      	strb	r3, [r4, #0]
	uint32_t i = 0;
  4006ce:	2300      	movs	r3, #0
  4006d0:	627b      	str	r3, [r7, #36]	; 0x24

	memset(pDstStr, 0, dstLen);
  4006d2:	6878      	ldr	r0, [r7, #4]
  4006d4:	2100      	movs	r1, #0
  4006d6:	683a      	ldr	r2, [r7, #0]
  4006d8:	4b1f      	ldr	r3, [pc, #124]	; (400758 <byte2hexstrstr+0xa8>)
  4006da:	4798      	blx	r3

	if (dstLen < srcLen * 2)
  4006dc:	68bb      	ldr	r3, [r7, #8]
  4006de:	005a      	lsls	r2, r3, #1
  4006e0:	683b      	ldr	r3, [r7, #0]
  4006e2:	429a      	cmp	r2, r3
  4006e4:	d903      	bls.n	4006ee <byte2hexstrstr+0x3e>
	srcLen = (dstLen - 1) / 2;
  4006e6:	683b      	ldr	r3, [r7, #0]
  4006e8:	3b01      	subs	r3, #1
  4006ea:	085b      	lsrs	r3, r3, #1
  4006ec:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < srcLen; i++)
  4006ee:	2300      	movs	r3, #0
  4006f0:	627b      	str	r3, [r7, #36]	; 0x24
  4006f2:	e01f      	b.n	400734 <byte2hexstrstr+0x84>
	{
		*pDstStr++ = tab[*pBytes >> 4];
  4006f4:	687b      	ldr	r3, [r7, #4]
  4006f6:	1c5a      	adds	r2, r3, #1
  4006f8:	607a      	str	r2, [r7, #4]
  4006fa:	68fa      	ldr	r2, [r7, #12]
  4006fc:	7812      	ldrb	r2, [r2, #0]
  4006fe:	0912      	lsrs	r2, r2, #4
  400700:	b2d2      	uxtb	r2, r2
  400702:	f107 0128 	add.w	r1, r7, #40	; 0x28
  400706:	440a      	add	r2, r1
  400708:	f812 2c18 	ldrb.w	r2, [r2, #-24]
  40070c:	701a      	strb	r2, [r3, #0]
		*pDstStr++ = tab[*pBytes & 0x0f];
  40070e:	687b      	ldr	r3, [r7, #4]
  400710:	1c5a      	adds	r2, r3, #1
  400712:	607a      	str	r2, [r7, #4]
  400714:	68fa      	ldr	r2, [r7, #12]
  400716:	7812      	ldrb	r2, [r2, #0]
  400718:	f002 020f 	and.w	r2, r2, #15
  40071c:	f107 0128 	add.w	r1, r7, #40	; 0x28
  400720:	440a      	add	r2, r1
  400722:	f812 2c18 	ldrb.w	r2, [r2, #-24]
  400726:	701a      	strb	r2, [r3, #0]
		pBytes++;
  400728:	68fb      	ldr	r3, [r7, #12]
  40072a:	3301      	adds	r3, #1
  40072c:	60fb      	str	r3, [r7, #12]
	memset(pDstStr, 0, dstLen);

	if (dstLen < srcLen * 2)
	srcLen = (dstLen - 1) / 2;

	for (i = 0; i < srcLen; i++)
  40072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400730:	3301      	adds	r3, #1
  400732:	627b      	str	r3, [r7, #36]	; 0x24
  400734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400736:	68bb      	ldr	r3, [r7, #8]
  400738:	429a      	cmp	r2, r3
  40073a:	d3db      	bcc.n	4006f4 <byte2hexstrstr+0x44>
	{
		*pDstStr++ = tab[*pBytes >> 4];
		*pDstStr++ = tab[*pBytes & 0x0f];
		pBytes++;
	}
	*pDstStr++ = 0;
  40073c:	687b      	ldr	r3, [r7, #4]
  40073e:	1c5a      	adds	r2, r3, #1
  400740:	607a      	str	r2, [r7, #4]
  400742:	2200      	movs	r2, #0
  400744:	701a      	strb	r2, [r3, #0]
	return srcLen * 2;
  400746:	68bb      	ldr	r3, [r7, #8]
  400748:	005b      	lsls	r3, r3, #1
}
  40074a:	4618      	mov	r0, r3
  40074c:	3728      	adds	r7, #40	; 0x28
  40074e:	46bd      	mov	sp, r7
  400750:	bdb0      	pop	{r4, r5, r7, pc}
  400752:	bf00      	nop
  400754:	0040cc28 	.word	0x0040cc28
  400758:	0040a815 	.word	0x0040a815

0040075c <wifi_serial_init>:

void wifi_serial_init(uint32_t baudspeed)
{
  40075c:	b580      	push	{r7, lr}
  40075e:	b08a      	sub	sp, #40	; 0x28
  400760:	af00      	add	r7, sp, #0
  400762:	6078      	str	r0, [r7, #4]
	//uint32_t rx_timeout = (SERIAL_FRAME_INTERVAL * baudspeed) / 1000;
	uint32_t rx_timeout = (2 * baudspeed) / 1000;
  400764:	687b      	ldr	r3, [r7, #4]
  400766:	005b      	lsls	r3, r3, #1
  400768:	4a28      	ldr	r2, [pc, #160]	; (40080c <wifi_serial_init+0xb0>)
  40076a:	fba2 2303 	umull	r2, r3, r2, r3
  40076e:	099b      	lsrs	r3, r3, #6
  400770:	627b      	str	r3, [r7, #36]	; 0x24
	sam_usart_opt_t usart_settings = {
  400772:	f107 030c 	add.w	r3, r7, #12
  400776:	2200      	movs	r2, #0
  400778:	601a      	str	r2, [r3, #0]
  40077a:	3304      	adds	r3, #4
  40077c:	2200      	movs	r2, #0
  40077e:	601a      	str	r2, [r3, #0]
  400780:	3304      	adds	r3, #4
  400782:	2200      	movs	r2, #0
  400784:	601a      	str	r2, [r3, #0]
  400786:	3304      	adds	r3, #4
  400788:	2200      	movs	r2, #0
  40078a:	601a      	str	r2, [r3, #0]
  40078c:	3304      	adds	r3, #4
  40078e:	2200      	movs	r2, #0
  400790:	601a      	str	r2, [r3, #0]
  400792:	3304      	adds	r3, #4
  400794:	2200      	movs	r2, #0
  400796:	601a      	str	r2, [r3, #0]
  400798:	3304      	adds	r3, #4
  40079a:	687b      	ldr	r3, [r7, #4]
  40079c:	60fb      	str	r3, [r7, #12]
  40079e:	23c0      	movs	r3, #192	; 0xc0
  4007a0:	613b      	str	r3, [r7, #16]
  4007a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007a6:	617b      	str	r3, [r7, #20]
		.char_length = USART_CHRL,
		.parity_type = USART_PARITY,
		.stop_bits = USART_NBSTOP,
		.channel_mode = US_MR_CHMODE_NORMAL
	};
	flexcom_enable(WIFI_SERIAL_PORT_FLEXCOM);
  4007a8:	4819      	ldr	r0, [pc, #100]	; (400810 <wifi_serial_init+0xb4>)
  4007aa:	4b1a      	ldr	r3, [pc, #104]	; (400814 <wifi_serial_init+0xb8>)
  4007ac:	4798      	blx	r3
	flexcom_set_opmode(WIFI_SERIAL_PORT_FLEXCOM, FLEXCOM_USART);
  4007ae:	4818      	ldr	r0, [pc, #96]	; (400810 <wifi_serial_init+0xb4>)
  4007b0:	2101      	movs	r1, #1
  4007b2:	4b19      	ldr	r3, [pc, #100]	; (400818 <wifi_serial_init+0xbc>)
  4007b4:	4798      	blx	r3
	
	/* Configure USART */
	//usart_init_rs232(WIFI_SERIAL_PORT, &usart_settings,sysclk_get_peripheral_hz());
	usart_init_hw_handshaking(WIFI_SERIAL_PORT, &usart_settings,sysclk_get_peripheral_hz());
  4007b6:	4b19      	ldr	r3, [pc, #100]	; (40081c <wifi_serial_init+0xc0>)
  4007b8:	4798      	blx	r3
  4007ba:	4602      	mov	r2, r0
  4007bc:	f107 030c 	add.w	r3, r7, #12
  4007c0:	4817      	ldr	r0, [pc, #92]	; (400820 <wifi_serial_init+0xc4>)
  4007c2:	4619      	mov	r1, r3
  4007c4:	4b17      	ldr	r3, [pc, #92]	; (400824 <wifi_serial_init+0xc8>)
  4007c6:	4798      	blx	r3
	
	usart_set_rx_timeout(WIFI_SERIAL_PORT, rx_timeout);
  4007c8:	4815      	ldr	r0, [pc, #84]	; (400820 <wifi_serial_init+0xc4>)
  4007ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
  4007cc:	4b16      	ldr	r3, [pc, #88]	; (400828 <wifi_serial_init+0xcc>)
  4007ce:	4798      	blx	r3
	
	/* Enable USART1 RX interrupt. */
	NVIC_SetPriority(WIFI_SERIAL_PORT_IRQn, SERIAL_PORT_INT_PRIO);
  4007d0:	2008      	movs	r0, #8
  4007d2:	210e      	movs	r1, #14
  4007d4:	4b15      	ldr	r3, [pc, #84]	; (40082c <wifi_serial_init+0xd0>)
  4007d6:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)WIFI_SERIAL_PORT_FLEXCOM_ID);
  4007d8:	2008      	movs	r0, #8
  4007da:	4b15      	ldr	r3, [pc, #84]	; (400830 <wifi_serial_init+0xd4>)
  4007dc:	4798      	blx	r3
	usart_enable_interrupt(WIFI_SERIAL_PORT, (US_IER_TIMEOUT | US_IER_RXRDY));
  4007de:	4810      	ldr	r0, [pc, #64]	; (400820 <wifi_serial_init+0xc4>)
  4007e0:	f240 1101 	movw	r1, #257	; 0x101
  4007e4:	4b13      	ldr	r3, [pc, #76]	; (400834 <wifi_serial_init+0xd8>)
  4007e6:	4798      	blx	r3
	
	serial_recving = &serial_pk0;
  4007e8:	4b13      	ldr	r3, [pc, #76]	; (400838 <wifi_serial_init+0xdc>)
  4007ea:	4a14      	ldr	r2, [pc, #80]	; (40083c <wifi_serial_init+0xe0>)
  4007ec:	601a      	str	r2, [r3, #0]
	serial_recved = &serial_pk1;
  4007ee:	4b14      	ldr	r3, [pc, #80]	; (400840 <wifi_serial_init+0xe4>)
  4007f0:	4a14      	ldr	r2, [pc, #80]	; (400844 <wifi_serial_init+0xe8>)
  4007f2:	601a      	str	r2, [r3, #0]
	
	/* Enable the receiver and transmitter. */
	usart_start_rx_timeout(WIFI_SERIAL_PORT);
  4007f4:	480a      	ldr	r0, [pc, #40]	; (400820 <wifi_serial_init+0xc4>)
  4007f6:	4b14      	ldr	r3, [pc, #80]	; (400848 <wifi_serial_init+0xec>)
  4007f8:	4798      	blx	r3
	usart_enable_tx(WIFI_SERIAL_PORT);
  4007fa:	4809      	ldr	r0, [pc, #36]	; (400820 <wifi_serial_init+0xc4>)
  4007fc:	4b13      	ldr	r3, [pc, #76]	; (40084c <wifi_serial_init+0xf0>)
  4007fe:	4798      	blx	r3
	usart_enable_rx(WIFI_SERIAL_PORT);
  400800:	4807      	ldr	r0, [pc, #28]	; (400820 <wifi_serial_init+0xc4>)
  400802:	4b13      	ldr	r3, [pc, #76]	; (400850 <wifi_serial_init+0xf4>)
  400804:	4798      	blx	r3

}
  400806:	3728      	adds	r7, #40	; 0x28
  400808:	46bd      	mov	sp, r7
  40080a:	bd80      	pop	{r7, pc}
  40080c:	10624dd3 	.word	0x10624dd3
  400810:	4000c000 	.word	0x4000c000
  400814:	00406065 	.word	0x00406065
  400818:	004061cd 	.word	0x004061cd
  40081c:	00400431 	.word	0x00400431
  400820:	4000c200 	.word	0x4000c200
  400824:	00408851 	.word	0x00408851
  400828:	00408909 	.word	0x00408909
  40082c:	00400339 	.word	0x00400339
  400830:	00400309 	.word	0x00400309
  400834:	00408925 	.word	0x00408925
  400838:	20001238 	.word	0x20001238
  40083c:	20000a30 	.word	0x20000a30
  400840:	2000123c 	.word	0x2000123c
  400844:	20000e34 	.word	0x20000e34
  400848:	004089a9 	.word	0x004089a9
  40084c:	00408891 	.word	0x00408891
  400850:	004088d9 	.word	0x004088d9

00400854 <FLEXCOM0_Handler>:

void WIFI_SERIAL_PORT_HANDLER(void)
{
  400854:	b590      	push	{r4, r7, lr}
  400856:	b087      	sub	sp, #28
  400858:	af00      	add	r7, sp, #0
	uint32_t status;
	uint32_t symbol;
	Pdc *p_pdc = NULL;
  40085a:	2300      	movs	r3, #0
  40085c:	617b      	str	r3, [r7, #20]
	serial_in_pk_t *ptemp = NULL;
  40085e:	2300      	movs	r3, #0
  400860:	613b      	str	r3, [r7, #16]
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
  400862:	2300      	movs	r3, #0
  400864:	607b      	str	r3, [r7, #4]

	status = usart_get_status(WIFI_SERIAL_PORT);
  400866:	4836      	ldr	r0, [pc, #216]	; (400940 <FLEXCOM0_Handler+0xec>)
  400868:	4b36      	ldr	r3, [pc, #216]	; (400944 <FLEXCOM0_Handler+0xf0>)
  40086a:	4798      	blx	r3
  40086c:	60f8      	str	r0, [r7, #12]
	//printf("USART6_Handler\r\n");
	if(status & US_CSR_RXRDY) {
  40086e:	68fb      	ldr	r3, [r7, #12]
  400870:	f003 0301 	and.w	r3, r3, #1
  400874:	2b00      	cmp	r3, #0
  400876:	d01a      	beq.n	4008ae <FLEXCOM0_Handler+0x5a>
		if(usart_read(WIFI_SERIAL_PORT, &symbol) == 0) {
  400878:	f107 0308 	add.w	r3, r7, #8
  40087c:	4830      	ldr	r0, [pc, #192]	; (400940 <FLEXCOM0_Handler+0xec>)
  40087e:	4619      	mov	r1, r3
  400880:	4b31      	ldr	r3, [pc, #196]	; (400948 <FLEXCOM0_Handler+0xf4>)
  400882:	4798      	blx	r3
  400884:	4603      	mov	r3, r0
  400886:	2b00      	cmp	r3, #0
  400888:	d156      	bne.n	400938 <FLEXCOM0_Handler+0xe4>
			if(recv_idx < MAXIMUM_DATA_LENGTH) {
  40088a:	4b30      	ldr	r3, [pc, #192]	; (40094c <FLEXCOM0_Handler+0xf8>)
  40088c:	681b      	ldr	r3, [r3, #0]
  40088e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  400892:	d251      	bcs.n	400938 <FLEXCOM0_Handler+0xe4>
				serial_recving->buf[recv_idx] = (uint8_t)symbol;
  400894:	4b2e      	ldr	r3, [pc, #184]	; (400950 <FLEXCOM0_Handler+0xfc>)
  400896:	681a      	ldr	r2, [r3, #0]
  400898:	4b2c      	ldr	r3, [pc, #176]	; (40094c <FLEXCOM0_Handler+0xf8>)
  40089a:	681b      	ldr	r3, [r3, #0]
  40089c:	68b9      	ldr	r1, [r7, #8]
  40089e:	b2c9      	uxtb	r1, r1
  4008a0:	54d1      	strb	r1, [r2, r3]
				recv_idx++;
  4008a2:	4b2a      	ldr	r3, [pc, #168]	; (40094c <FLEXCOM0_Handler+0xf8>)
  4008a4:	681b      	ldr	r3, [r3, #0]
  4008a6:	3301      	adds	r3, #1
  4008a8:	4a28      	ldr	r2, [pc, #160]	; (40094c <FLEXCOM0_Handler+0xf8>)
  4008aa:	6013      	str	r3, [r2, #0]
  4008ac:	e044      	b.n	400938 <FLEXCOM0_Handler+0xe4>
			}
		}
	}
	else if(status & US_CSR_TIMEOUT) {
  4008ae:	68fb      	ldr	r3, [r7, #12]
  4008b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4008b4:	2b00      	cmp	r3, #0
  4008b6:	d024      	beq.n	400902 <FLEXCOM0_Handler+0xae>
		IoT_xTimerStartFromISR(serial_tmr, &xHigherPriorityTaskWoken);
		if(xHigherPriorityTaskWoken != pdFALSE) {
			IoT_vPortYieldFromISR();
		}
		*/
		ptemp = serial_recving;
  4008b8:	4b25      	ldr	r3, [pc, #148]	; (400950 <FLEXCOM0_Handler+0xfc>)
  4008ba:	681b      	ldr	r3, [r3, #0]
  4008bc:	613b      	str	r3, [r7, #16]
		serial_recving = serial_recved;
  4008be:	4b25      	ldr	r3, [pc, #148]	; (400954 <FLEXCOM0_Handler+0x100>)
  4008c0:	681b      	ldr	r3, [r3, #0]
  4008c2:	4a23      	ldr	r2, [pc, #140]	; (400950 <FLEXCOM0_Handler+0xfc>)
  4008c4:	6013      	str	r3, [r2, #0]
		serial_recved = ptemp;
  4008c6:	4a23      	ldr	r2, [pc, #140]	; (400954 <FLEXCOM0_Handler+0x100>)
  4008c8:	693b      	ldr	r3, [r7, #16]
  4008ca:	6013      	str	r3, [r2, #0]
		serial_recved->len = recv_idx;
  4008cc:	4b21      	ldr	r3, [pc, #132]	; (400954 <FLEXCOM0_Handler+0x100>)
  4008ce:	681b      	ldr	r3, [r3, #0]
  4008d0:	4a1e      	ldr	r2, [pc, #120]	; (40094c <FLEXCOM0_Handler+0xf8>)
  4008d2:	6812      	ldr	r2, [r2, #0]
  4008d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

		recv_idx = 0;
  4008d8:	4b1c      	ldr	r3, [pc, #112]	; (40094c <FLEXCOM0_Handler+0xf8>)
  4008da:	2200      	movs	r2, #0
  4008dc:	601a      	str	r2, [r3, #0]
		usart_start_rx_timeout(WIFI_SERIAL_PORT);
  4008de:	4818      	ldr	r0, [pc, #96]	; (400940 <FLEXCOM0_Handler+0xec>)
  4008e0:	4b1d      	ldr	r3, [pc, #116]	; (400958 <FLEXCOM0_Handler+0x104>)
  4008e2:	4798      	blx	r3
		//IoT_DEBUG(IoT_DBG_ON | IoT_DBG_INFO, ("Wifi receive data timeout............\r\n"));
		xQueueSendFromISR(serial_in_queue, &serial_recved, &xHigherPriorityTaskWoken);
  4008e4:	4b1d      	ldr	r3, [pc, #116]	; (40095c <FLEXCOM0_Handler+0x108>)
  4008e6:	681a      	ldr	r2, [r3, #0]
  4008e8:	1d3b      	adds	r3, r7, #4
  4008ea:	4610      	mov	r0, r2
  4008ec:	4919      	ldr	r1, [pc, #100]	; (400954 <FLEXCOM0_Handler+0x100>)
  4008ee:	461a      	mov	r2, r3
  4008f0:	2300      	movs	r3, #0
  4008f2:	4c1b      	ldr	r4, [pc, #108]	; (400960 <FLEXCOM0_Handler+0x10c>)
  4008f4:	47a0      	blx	r4
		if(xHigherPriorityTaskWoken != pdFALSE) {
  4008f6:	687b      	ldr	r3, [r7, #4]
  4008f8:	2b00      	cmp	r3, #0
  4008fa:	d01d      	beq.n	400938 <FLEXCOM0_Handler+0xe4>
			vPortYieldFromISR();
  4008fc:	4b19      	ldr	r3, [pc, #100]	; (400964 <FLEXCOM0_Handler+0x110>)
  4008fe:	4798      	blx	r3
  400900:	e01a      	b.n	400938 <FLEXCOM0_Handler+0xe4>
		}
	}
	else if(status & US_CSR_ENDTX) {
  400902:	68fb      	ldr	r3, [r7, #12]
  400904:	f003 0310 	and.w	r3, r3, #16
  400908:	2b00      	cmp	r3, #0
  40090a:	d00d      	beq.n	400928 <FLEXCOM0_Handler+0xd4>
		p_pdc = usart_get_pdc_base(WIFI_SERIAL_PORT);
  40090c:	480c      	ldr	r0, [pc, #48]	; (400940 <FLEXCOM0_Handler+0xec>)
  40090e:	4b16      	ldr	r3, [pc, #88]	; (400968 <FLEXCOM0_Handler+0x114>)
  400910:	4798      	blx	r3
  400912:	6178      	str	r0, [r7, #20]
		pdc_disable_transfer(p_pdc, PERIPH_PTCR_TXTDIS);
  400914:	6978      	ldr	r0, [r7, #20]
  400916:	f44f 7100 	mov.w	r1, #512	; 0x200
  40091a:	4b14      	ldr	r3, [pc, #80]	; (40096c <FLEXCOM0_Handler+0x118>)
  40091c:	4798      	blx	r3
		usart_disable_interrupt(WIFI_SERIAL_PORT, US_IDR_ENDTX);
  40091e:	4808      	ldr	r0, [pc, #32]	; (400940 <FLEXCOM0_Handler+0xec>)
  400920:	2110      	movs	r1, #16
  400922:	4b13      	ldr	r3, [pc, #76]	; (400970 <FLEXCOM0_Handler+0x11c>)
  400924:	4798      	blx	r3
  400926:	e007      	b.n	400938 <FLEXCOM0_Handler+0xe4>
	}
	else if(status &US_CSR_ENDRX){
  400928:	68fb      	ldr	r3, [r7, #12]
  40092a:	f003 0308 	and.w	r3, r3, #8
  40092e:	2b00      	cmp	r3, #0
  400930:	d002      	beq.n	400938 <FLEXCOM0_Handler+0xe4>
		printf("........endrx\r\n");
  400932:	4810      	ldr	r0, [pc, #64]	; (400974 <FLEXCOM0_Handler+0x120>)
  400934:	4b10      	ldr	r3, [pc, #64]	; (400978 <FLEXCOM0_Handler+0x124>)
  400936:	4798      	blx	r3
		/* Do nothing */
	}
}
  400938:	371c      	adds	r7, #28
  40093a:	46bd      	mov	sp, r7
  40093c:	bd90      	pop	{r4, r7, pc}
  40093e:	bf00      	nop
  400940:	4000c200 	.word	0x4000c200
  400944:	00408975 	.word	0x00408975
  400948:	00408a15 	.word	0x00408a15
  40094c:	20001240 	.word	0x20001240
  400950:	20001238 	.word	0x20001238
  400954:	2000123c 	.word	0x2000123c
  400958:	004089a9 	.word	0x004089a9
  40095c:	20000a20 	.word	0x20000a20
  400960:	00401e21 	.word	0x00401e21
  400964:	00401765 	.word	0x00401765
  400968:	00408a49 	.word	0x00408a49
  40096c:	0040144d 	.word	0x0040144d
  400970:	00408941 	.word	0x00408941
  400974:	0040cc3c 	.word	0x0040cc3c
  400978:	0040a111 	.word	0x0040a111

0040097c <sum8>:

unsigned char sum8(unsigned char *A, unsigned char n)
{
  40097c:	b480      	push	{r7}
  40097e:	b085      	sub	sp, #20
  400980:	af00      	add	r7, sp, #0
  400982:	6078      	str	r0, [r7, #4]
  400984:	460b      	mov	r3, r1
  400986:	70fb      	strb	r3, [r7, #3]
	unsigned char i;
	unsigned char checksum = 0;
  400988:	2300      	movs	r3, #0
  40098a:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i < n; i++)
  40098c:	2300      	movs	r3, #0
  40098e:	73fb      	strb	r3, [r7, #15]
  400990:	e009      	b.n	4009a6 <sum8+0x2a>
	{
		checksum += A[i];
  400992:	7bfb      	ldrb	r3, [r7, #15]
  400994:	687a      	ldr	r2, [r7, #4]
  400996:	4413      	add	r3, r2
  400998:	781a      	ldrb	r2, [r3, #0]
  40099a:	7bbb      	ldrb	r3, [r7, #14]
  40099c:	4413      	add	r3, r2
  40099e:	73bb      	strb	r3, [r7, #14]

unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
  4009a0:	7bfb      	ldrb	r3, [r7, #15]
  4009a2:	3301      	adds	r3, #1
  4009a4:	73fb      	strb	r3, [r7, #15]
  4009a6:	7bfa      	ldrb	r2, [r7, #15]
  4009a8:	78fb      	ldrb	r3, [r7, #3]
  4009aa:	429a      	cmp	r2, r3
  4009ac:	d3f1      	bcc.n	400992 <sum8+0x16>
	{
		checksum += A[i];
	}
	return(checksum);
  4009ae:	7bbb      	ldrb	r3, [r7, #14]
}
  4009b0:	4618      	mov	r0, r3
  4009b2:	3714      	adds	r7, #20
  4009b4:	46bd      	mov	sp, r7
  4009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009ba:	4770      	bx	lr

004009bc <form_serial_packet>:
	}
	return(checksum);
}

static uint16_t form_serial_packet(uint8_t cmdid, uint8_t *data, uint8_t datalen, uint8_t *buf)
{
  4009bc:	b580      	push	{r7, lr}
  4009be:	b086      	sub	sp, #24
  4009c0:	af00      	add	r7, sp, #0
  4009c2:	60b9      	str	r1, [r7, #8]
  4009c4:	607b      	str	r3, [r7, #4]
  4009c6:	4603      	mov	r3, r0
  4009c8:	73fb      	strb	r3, [r7, #15]
  4009ca:	4613      	mov	r3, r2
  4009cc:	73bb      	strb	r3, [r7, #14]
	uint8_t *p = buf;
  4009ce:	687b      	ldr	r3, [r7, #4]
  4009d0:	617b      	str	r3, [r7, #20]

	*p++ = SERIAL_SOF;
  4009d2:	697b      	ldr	r3, [r7, #20]
  4009d4:	1c5a      	adds	r2, r3, #1
  4009d6:	617a      	str	r2, [r7, #20]
  4009d8:	227e      	movs	r2, #126	; 0x7e
  4009da:	701a      	strb	r2, [r3, #0]
	*p++ = ENCRYPT_MODE;
  4009dc:	697b      	ldr	r3, [r7, #20]
  4009de:	1c5a      	adds	r2, r3, #1
  4009e0:	617a      	str	r2, [r7, #20]
  4009e2:	2200      	movs	r2, #0
  4009e4:	701a      	strb	r2, [r3, #0]
	*p++ = datalen + 1;
  4009e6:	697b      	ldr	r3, [r7, #20]
  4009e8:	1c5a      	adds	r2, r3, #1
  4009ea:	617a      	str	r2, [r7, #20]
  4009ec:	7bba      	ldrb	r2, [r7, #14]
  4009ee:	3201      	adds	r2, #1
  4009f0:	b2d2      	uxtb	r2, r2
  4009f2:	701a      	strb	r2, [r3, #0]
	*p++ = cmdid;
  4009f4:	697b      	ldr	r3, [r7, #20]
  4009f6:	1c5a      	adds	r2, r3, #1
  4009f8:	617a      	str	r2, [r7, #20]
  4009fa:	7bfa      	ldrb	r2, [r7, #15]
  4009fc:	701a      	strb	r2, [r3, #0]
	if((data != NULL) && (datalen > 0)) {
  4009fe:	68bb      	ldr	r3, [r7, #8]
  400a00:	2b00      	cmp	r3, #0
  400a02:	d00c      	beq.n	400a1e <form_serial_packet+0x62>
  400a04:	7bbb      	ldrb	r3, [r7, #14]
  400a06:	2b00      	cmp	r3, #0
  400a08:	d009      	beq.n	400a1e <form_serial_packet+0x62>
		memcpy(p, data, datalen);
  400a0a:	7bbb      	ldrb	r3, [r7, #14]
  400a0c:	6978      	ldr	r0, [r7, #20]
  400a0e:	68b9      	ldr	r1, [r7, #8]
  400a10:	461a      	mov	r2, r3
  400a12:	4b0e      	ldr	r3, [pc, #56]	; (400a4c <form_serial_packet+0x90>)
  400a14:	4798      	blx	r3
		p = p + datalen;
  400a16:	7bbb      	ldrb	r3, [r7, #14]
  400a18:	697a      	ldr	r2, [r7, #20]
  400a1a:	4413      	add	r3, r2
  400a1c:	617b      	str	r3, [r7, #20]
	}
	*p = sum8(buf, (p - buf));
  400a1e:	697a      	ldr	r2, [r7, #20]
  400a20:	687b      	ldr	r3, [r7, #4]
  400a22:	1ad3      	subs	r3, r2, r3
  400a24:	b2db      	uxtb	r3, r3
  400a26:	6878      	ldr	r0, [r7, #4]
  400a28:	4619      	mov	r1, r3
  400a2a:	4b09      	ldr	r3, [pc, #36]	; (400a50 <form_serial_packet+0x94>)
  400a2c:	4798      	blx	r3
  400a2e:	4603      	mov	r3, r0
  400a30:	461a      	mov	r2, r3
  400a32:	697b      	ldr	r3, [r7, #20]
  400a34:	701a      	strb	r2, [r3, #0]
	p++;
  400a36:	697b      	ldr	r3, [r7, #20]
  400a38:	3301      	adds	r3, #1
  400a3a:	617b      	str	r3, [r7, #20]

	return (p - buf);
  400a3c:	697a      	ldr	r2, [r7, #20]
  400a3e:	687b      	ldr	r3, [r7, #4]
  400a40:	1ad3      	subs	r3, r2, r3
  400a42:	b29b      	uxth	r3, r3
}
  400a44:	4618      	mov	r0, r3
  400a46:	3718      	adds	r7, #24
  400a48:	46bd      	mov	sp, r7
  400a4a:	bd80      	pop	{r7, pc}
  400a4c:	0040a6e1 	.word	0x0040a6e1
  400a50:	0040097d 	.word	0x0040097d

00400a54 <serial_resp_out>:

static void serial_resp_out(uint8_t resp_id, uint8_t status)
{
  400a54:	b590      	push	{r4, r7, lr}
  400a56:	b085      	sub	sp, #20
  400a58:	af00      	add	r7, sp, #0
  400a5a:	4603      	mov	r3, r0
  400a5c:	460a      	mov	r2, r1
  400a5e:	71fb      	strb	r3, [r7, #7]
  400a60:	4613      	mov	r3, r2
  400a62:	71bb      	strb	r3, [r7, #6]
	static uint8_t resp_buf[8];
	uint8_t *p = &resp_buf[0];
  400a64:	4b1d      	ldr	r3, [pc, #116]	; (400adc <serial_resp_out+0x88>)
  400a66:	60fb      	str	r3, [r7, #12]
	static serial_out_pk_t resp_send_packet;
	static serial_out_pk_t *resp_out_data = &resp_send_packet;

	*p++ = SERIAL_SOF;
  400a68:	68fb      	ldr	r3, [r7, #12]
  400a6a:	1c5a      	adds	r2, r3, #1
  400a6c:	60fa      	str	r2, [r7, #12]
  400a6e:	227e      	movs	r2, #126	; 0x7e
  400a70:	701a      	strb	r2, [r3, #0]
	//*p++ = ENCRYPT_MODE;
	*p++ = 2;
  400a72:	68fb      	ldr	r3, [r7, #12]
  400a74:	1c5a      	adds	r2, r3, #1
  400a76:	60fa      	str	r2, [r7, #12]
  400a78:	2202      	movs	r2, #2
  400a7a:	701a      	strb	r2, [r3, #0]
	*p++ = resp_id;
  400a7c:	68fb      	ldr	r3, [r7, #12]
  400a7e:	1c5a      	adds	r2, r3, #1
  400a80:	60fa      	str	r2, [r7, #12]
  400a82:	79fa      	ldrb	r2, [r7, #7]
  400a84:	701a      	strb	r2, [r3, #0]
	*p++ = status;
  400a86:	68fb      	ldr	r3, [r7, #12]
  400a88:	1c5a      	adds	r2, r3, #1
  400a8a:	60fa      	str	r2, [r7, #12]
  400a8c:	79ba      	ldrb	r2, [r7, #6]
  400a8e:	701a      	strb	r2, [r3, #0]
	*p = sum8(&resp_buf[0], p - &resp_buf[0]);
  400a90:	68fb      	ldr	r3, [r7, #12]
  400a92:	4a12      	ldr	r2, [pc, #72]	; (400adc <serial_resp_out+0x88>)
  400a94:	1a9b      	subs	r3, r3, r2
  400a96:	b2db      	uxtb	r3, r3
  400a98:	4810      	ldr	r0, [pc, #64]	; (400adc <serial_resp_out+0x88>)
  400a9a:	4619      	mov	r1, r3
  400a9c:	4b10      	ldr	r3, [pc, #64]	; (400ae0 <serial_resp_out+0x8c>)
  400a9e:	4798      	blx	r3
  400aa0:	4603      	mov	r3, r0
  400aa2:	461a      	mov	r2, r3
  400aa4:	68fb      	ldr	r3, [r7, #12]
  400aa6:	701a      	strb	r2, [r3, #0]
	p++;
  400aa8:	68fb      	ldr	r3, [r7, #12]
  400aaa:	3301      	adds	r3, #1
  400aac:	60fb      	str	r3, [r7, #12]
	resp_out_data->buf = resp_buf;
  400aae:	4b0d      	ldr	r3, [pc, #52]	; (400ae4 <serial_resp_out+0x90>)
  400ab0:	681b      	ldr	r3, [r3, #0]
  400ab2:	4a0a      	ldr	r2, [pc, #40]	; (400adc <serial_resp_out+0x88>)
  400ab4:	601a      	str	r2, [r3, #0]
	resp_out_data->len = p - resp_buf;
  400ab6:	4b0b      	ldr	r3, [pc, #44]	; (400ae4 <serial_resp_out+0x90>)
  400ab8:	681b      	ldr	r3, [r3, #0]
  400aba:	68fa      	ldr	r2, [r7, #12]
  400abc:	4907      	ldr	r1, [pc, #28]	; (400adc <serial_resp_out+0x88>)
  400abe:	1a52      	subs	r2, r2, r1
  400ac0:	605a      	str	r2, [r3, #4]
	xQueueSend(serial_out_queue, &resp_out_data, 1000);
  400ac2:	4b09      	ldr	r3, [pc, #36]	; (400ae8 <serial_resp_out+0x94>)
  400ac4:	681b      	ldr	r3, [r3, #0]
  400ac6:	4618      	mov	r0, r3
  400ac8:	4906      	ldr	r1, [pc, #24]	; (400ae4 <serial_resp_out+0x90>)
  400aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400ace:	2300      	movs	r3, #0
  400ad0:	4c06      	ldr	r4, [pc, #24]	; (400aec <serial_resp_out+0x98>)
  400ad2:	47a0      	blx	r4
	//nm_uart_send(UART1, &buf[0], p - &buf[0]);
}
  400ad4:	3714      	adds	r7, #20
  400ad6:	46bd      	mov	sp, r7
  400ad8:	bd90      	pop	{r4, r7, pc}
  400ada:	bf00      	nop
  400adc:	20001250 	.word	0x20001250
  400ae0:	0040097d 	.word	0x0040097d
  400ae4:	20000114 	.word	0x20000114
  400ae8:	20000a24 	.word	0x20000a24
  400aec:	00401ca9 	.word	0x00401ca9

00400af0 <startTemperature>:
	resp_out_data->len = 400;
	xQueueSend(serial_out_queue, &resp_out_data, 1000);
	//nm_uart_send(UART1, &buf[0], p - &buf[0]);*/
}
static void startTemperature(void)
{
  400af0:	b480      	push	{r7}
  400af2:	af00      	add	r7, sp, #0
	delay_ms(500);
	Temp_Measure_Command_Send(SENSATION_MEASUREMENT_START);
	delay_ms(500);
	Temp_Measure_Get_Air_Condition_Info(0x00, 50);
	#endif
}
  400af4:	46bd      	mov	sp, r7
  400af6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400afa:	4770      	bx	lr

00400afc <startPicture>:
static void startPicture(void)
{
  400afc:	b580      	push	{r7, lr}
  400afe:	af00      	add	r7, sp, #0
	printf("Receive get snapshot command.\r\n");
  400b00:	4803      	ldr	r0, [pc, #12]	; (400b10 <startPicture+0x14>)
  400b02:	4b04      	ldr	r3, [pc, #16]	; (400b14 <startPicture+0x18>)
  400b04:	4798      	blx	r3
	CameraPictureSnapshotReq(0xff);
  400b06:	20ff      	movs	r0, #255	; 0xff
  400b08:	4b03      	ldr	r3, [pc, #12]	; (400b18 <startPicture+0x1c>)
  400b0a:	4798      	blx	r3
}
  400b0c:	bd80      	pop	{r7, pc}
  400b0e:	bf00      	nop
  400b10:	0040cc54 	.word	0x0040cc54
  400b14:	0040a111 	.word	0x0040a111
  400b18:	00403785 	.word	0x00403785

00400b1c <execute_serial_cmd>:



static void execute_serial_cmd(uint8_t cmdid, uint8_t *data, uint8_t datalen)
{
  400b1c:	b580      	push	{r7, lr}
  400b1e:	b084      	sub	sp, #16
  400b20:	af00      	add	r7, sp, #0
  400b22:	4603      	mov	r3, r0
  400b24:	6039      	str	r1, [r7, #0]
  400b26:	71fb      	strb	r3, [r7, #7]
  400b28:	4613      	mov	r3, r2
  400b2a:	71bb      	strb	r3, [r7, #6]
	uint16_t len;
	uint8_t *p = NULL;
  400b2c:	2300      	movs	r3, #0
  400b2e:	60fb      	str	r3, [r7, #12]
	{
		.cmd_index = 0,
		.value = 0
	};
	
	switch(cmdid)
  400b30:	79fb      	ldrb	r3, [r7, #7]
  400b32:	2ba1      	cmp	r3, #161	; 0xa1
  400b34:	f000 8087 	beq.w	400c46 <execute_serial_cmd+0x12a>
  400b38:	2ba1      	cmp	r3, #161	; 0xa1
  400b3a:	dc1d      	bgt.n	400b78 <execute_serial_cmd+0x5c>
  400b3c:	2b81      	cmp	r3, #129	; 0x81
  400b3e:	f000 80d6 	beq.w	400cee <execute_serial_cmd+0x1d2>
  400b42:	2b81      	cmp	r3, #129	; 0x81
  400b44:	dc0b      	bgt.n	400b5e <execute_serial_cmd+0x42>
  400b46:	2b0a      	cmp	r3, #10
  400b48:	d043      	beq.n	400bd2 <execute_serial_cmd+0xb6>
  400b4a:	2b0a      	cmp	r3, #10
  400b4c:	dc02      	bgt.n	400b54 <execute_serial_cmd+0x38>
  400b4e:	2b03      	cmp	r3, #3
  400b50:	d059      	beq.n	400c06 <execute_serial_cmd+0xea>
  400b52:	e0f1      	b.n	400d38 <execute_serial_cmd+0x21c>
  400b54:	2b0b      	cmp	r3, #11
  400b56:	d04c      	beq.n	400bf2 <execute_serial_cmd+0xd6>
  400b58:	2b0c      	cmp	r3, #12
  400b5a:	d03d      	beq.n	400bd8 <execute_serial_cmd+0xbc>
  400b5c:	e0ec      	b.n	400d38 <execute_serial_cmd+0x21c>
  400b5e:	2b84      	cmp	r3, #132	; 0x84
  400b60:	f000 80da 	beq.w	400d18 <execute_serial_cmd+0x1fc>
  400b64:	2b84      	cmp	r3, #132	; 0x84
  400b66:	dc02      	bgt.n	400b6e <execute_serial_cmd+0x52>
  400b68:	2b82      	cmp	r3, #130	; 0x82
  400b6a:	d07d      	beq.n	400c68 <execute_serial_cmd+0x14c>
  400b6c:	e0e4      	b.n	400d38 <execute_serial_cmd+0x21c>
  400b6e:	2b89      	cmp	r3, #137	; 0x89
  400b70:	d076      	beq.n	400c60 <execute_serial_cmd+0x144>
  400b72:	2ba0      	cmp	r3, #160	; 0xa0
  400b74:	d040      	beq.n	400bf8 <execute_serial_cmd+0xdc>
  400b76:	e0df      	b.n	400d38 <execute_serial_cmd+0x21c>
  400b78:	2bf8      	cmp	r3, #248	; 0xf8
  400b7a:	f000 80b4 	beq.w	400ce6 <execute_serial_cmd+0x1ca>
  400b7e:	2bf8      	cmp	r3, #248	; 0xf8
  400b80:	dc0e      	bgt.n	400ba0 <execute_serial_cmd+0x84>
  400b82:	2bcb      	cmp	r3, #203	; 0xcb
  400b84:	f000 80c0 	beq.w	400d08 <execute_serial_cmd+0x1ec>
  400b88:	2bcb      	cmp	r3, #203	; 0xcb
  400b8a:	dc02      	bgt.n	400b92 <execute_serial_cmd+0x76>
  400b8c:	2ba6      	cmp	r3, #166	; 0xa6
  400b8e:	d076      	beq.n	400c7e <execute_serial_cmd+0x162>
  400b90:	e0d2      	b.n	400d38 <execute_serial_cmd+0x21c>
  400b92:	2bcc      	cmp	r3, #204	; 0xcc
  400b94:	f000 80bc 	beq.w	400d10 <execute_serial_cmd+0x1f4>
  400b98:	2bcd      	cmp	r3, #205	; 0xcd
  400b9a:	f000 80c9 	beq.w	400d30 <execute_serial_cmd+0x214>
  400b9e:	e0cb      	b.n	400d38 <execute_serial_cmd+0x21c>
  400ba0:	2bfc      	cmp	r3, #252	; 0xfc
  400ba2:	f000 808e 	beq.w	400cc2 <execute_serial_cmd+0x1a6>
  400ba6:	2bfc      	cmp	r3, #252	; 0xfc
  400ba8:	dc04      	bgt.n	400bb4 <execute_serial_cmd+0x98>
  400baa:	2bf9      	cmp	r3, #249	; 0xf9
  400bac:	d007      	beq.n	400bbe <execute_serial_cmd+0xa2>
  400bae:	2bfa      	cmp	r3, #250	; 0xfa
  400bb0:	d04d      	beq.n	400c4e <execute_serial_cmd+0x132>
  400bb2:	e0c1      	b.n	400d38 <execute_serial_cmd+0x21c>
  400bb4:	2bfd      	cmp	r3, #253	; 0xfd
  400bb6:	d072      	beq.n	400c9e <execute_serial_cmd+0x182>
  400bb8:	2bfe      	cmp	r3, #254	; 0xfe
  400bba:	d06c      	beq.n	400c96 <execute_serial_cmd+0x17a>
  400bbc:	e0bc      	b.n	400d38 <execute_serial_cmd+0x21c>
	{
		case CMD_WIFI_MODULE_READY:
		{
			printf("Wi-Fi Module Ready!\r\n");
  400bbe:	4863      	ldr	r0, [pc, #396]	; (400d4c <execute_serial_cmd+0x230>)
  400bc0:	4b63      	ldr	r3, [pc, #396]	; (400d50 <execute_serial_cmd+0x234>)
  400bc2:	4798      	blx	r3
			uart_ready = 1;
  400bc4:	4b63      	ldr	r3, [pc, #396]	; (400d54 <execute_serial_cmd+0x238>)
  400bc6:	2201      	movs	r2, #1
  400bc8:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_ON;
  400bca:	4b63      	ldr	r3, [pc, #396]	; (400d58 <execute_serial_cmd+0x23c>)
  400bcc:	2203      	movs	r2, #3
  400bce:	701a      	strb	r2, [r3, #0]
			break;
  400bd0:	e0b8      	b.n	400d44 <execute_serial_cmd+0x228>
		}
		case CUSTOMIZE_CMD_DEV_CTRL_GET_TEMP:
			startTemperature();
  400bd2:	4b62      	ldr	r3, [pc, #392]	; (400d5c <execute_serial_cmd+0x240>)
  400bd4:	4798      	blx	r3

		break;
  400bd6:	e0b5      	b.n	400d44 <execute_serial_cmd+0x228>
		case CUSTOMIZE_CMD_DEV_GET_BLOCK:
			printf("Get camera specific block---%d\r\n", data[0]);
  400bd8:	683b      	ldr	r3, [r7, #0]
  400bda:	781b      	ldrb	r3, [r3, #0]
  400bdc:	4860      	ldr	r0, [pc, #384]	; (400d60 <execute_serial_cmd+0x244>)
  400bde:	4619      	mov	r1, r3
  400be0:	4b5b      	ldr	r3, [pc, #364]	; (400d50 <execute_serial_cmd+0x234>)
  400be2:	4798      	blx	r3
			CameraPictureBlockReq(data[0]);
  400be4:	683b      	ldr	r3, [r7, #0]
  400be6:	781b      	ldrb	r3, [r3, #0]
  400be8:	b29b      	uxth	r3, r3
  400bea:	4618      	mov	r0, r3
  400bec:	4b5d      	ldr	r3, [pc, #372]	; (400d64 <execute_serial_cmd+0x248>)
  400bee:	4798      	blx	r3
		break;
  400bf0:	e0a8      	b.n	400d44 <execute_serial_cmd+0x228>
		
		case CUSTOMIZE_CMD_DEV_CTRL_GET_PIC:
			startPicture();
  400bf2:	4b5d      	ldr	r3, [pc, #372]	; (400d68 <execute_serial_cmd+0x24c>)
  400bf4:	4798      	blx	r3
		break;
  400bf6:	e0a5      	b.n	400d44 <execute_serial_cmd+0x228>
				signal_to_wifi(thermimage, thermoIndex++);
		break;
#endif
		
		case CMD_PACKET_ERROR_RESP:
			printf("Receive packet error response, err(%d).\r\n", *data);
  400bf8:	683b      	ldr	r3, [r7, #0]
  400bfa:	781b      	ldrb	r3, [r3, #0]
  400bfc:	485b      	ldr	r0, [pc, #364]	; (400d6c <execute_serial_cmd+0x250>)
  400bfe:	4619      	mov	r1, r3
  400c00:	4b53      	ldr	r3, [pc, #332]	; (400d50 <execute_serial_cmd+0x234>)
  400c02:	4798      	blx	r3
		break;
  400c04:	e09e      	b.n	400d44 <execute_serial_cmd+0x228>
		
		case CUSTOMIZE_CMD_STATUS_REPORT:
		{
			uint8_t states = *data;
  400c06:	683b      	ldr	r3, [r7, #0]
  400c08:	781b      	ldrb	r3, [r3, #0]
  400c0a:	72fb      	strb	r3, [r7, #11]
			if(states == 0) {
  400c0c:	7afb      	ldrb	r3, [r7, #11]
  400c0e:	2b00      	cmp	r3, #0
  400c10:	d103      	bne.n	400c1a <execute_serial_cmd+0xfe>
				printf("Wifi disconnect.\r\n");
  400c12:	4857      	ldr	r0, [pc, #348]	; (400d70 <execute_serial_cmd+0x254>)
  400c14:	4b4e      	ldr	r3, [pc, #312]	; (400d50 <execute_serial_cmd+0x234>)
  400c16:	4798      	blx	r3
  400c18:	e014      	b.n	400c44 <execute_serial_cmd+0x128>
			}
			else if(states == 1) {
  400c1a:	7afb      	ldrb	r3, [r7, #11]
  400c1c:	2b01      	cmp	r3, #1
  400c1e:	d103      	bne.n	400c28 <execute_serial_cmd+0x10c>
				printf("Wifi module in sniffer mode.\r\n");
  400c20:	4854      	ldr	r0, [pc, #336]	; (400d74 <execute_serial_cmd+0x258>)
  400c22:	4b4b      	ldr	r3, [pc, #300]	; (400d50 <execute_serial_cmd+0x234>)
  400c24:	4798      	blx	r3
  400c26:	e00d      	b.n	400c44 <execute_serial_cmd+0x128>
			}
			else if (states == 2) {
  400c28:	7afb      	ldrb	r3, [r7, #11]
  400c2a:	2b02      	cmp	r3, #2
  400c2c:	d103      	bne.n	400c36 <execute_serial_cmd+0x11a>
				printf("Wifi module connect to wifi router.\r\n");
  400c2e:	4852      	ldr	r0, [pc, #328]	; (400d78 <execute_serial_cmd+0x25c>)
  400c30:	4b47      	ldr	r3, [pc, #284]	; (400d50 <execute_serial_cmd+0x234>)
  400c32:	4798      	blx	r3
  400c34:	e006      	b.n	400c44 <execute_serial_cmd+0x128>
			}
			else if(states == 3) {
  400c36:	7afb      	ldrb	r3, [r7, #11]
  400c38:	2b03      	cmp	r3, #3
  400c3a:	d103      	bne.n	400c44 <execute_serial_cmd+0x128>
				printf("Wifi module connect to JD server.\r\n");
  400c3c:	484f      	ldr	r0, [pc, #316]	; (400d7c <execute_serial_cmd+0x260>)
  400c3e:	4b44      	ldr	r3, [pc, #272]	; (400d50 <execute_serial_cmd+0x234>)
  400c40:	4798      	blx	r3
			}
			//states = 0;
			//signal_to_wifi(CUSTOMIZE_CMD_STATUS_REPORT_RESP, &states, 1);
		}
		break;
  400c42:	e07f      	b.n	400d44 <execute_serial_cmd+0x228>
  400c44:	e07e      	b.n	400d44 <execute_serial_cmd+0x228>
		
		case CMD_CONNECT_RESP:
			printf("Connect to Remote Server OK.\r\n");
  400c46:	484e      	ldr	r0, [pc, #312]	; (400d80 <execute_serial_cmd+0x264>)
  400c48:	4b41      	ldr	r3, [pc, #260]	; (400d50 <execute_serial_cmd+0x234>)
  400c4a:	4798      	blx	r3
		break;
  400c4c:	e07a      	b.n	400d44 <execute_serial_cmd+0x228>
		
		case CMD_CONNECTION_BEATHEART:
			uart_beatheart++;
  400c4e:	4b4d      	ldr	r3, [pc, #308]	; (400d84 <execute_serial_cmd+0x268>)
  400c50:	681b      	ldr	r3, [r3, #0]
  400c52:	3301      	adds	r3, #1
  400c54:	4a4b      	ldr	r2, [pc, #300]	; (400d84 <execute_serial_cmd+0x268>)
  400c56:	6013      	str	r3, [r2, #0]
			printf("Connection beatheart.\r\n");
  400c58:	484b      	ldr	r0, [pc, #300]	; (400d88 <execute_serial_cmd+0x26c>)
  400c5a:	4b3d      	ldr	r3, [pc, #244]	; (400d50 <execute_serial_cmd+0x234>)
  400c5c:	4798      	blx	r3
		break;
  400c5e:	e071      	b.n	400d44 <execute_serial_cmd+0x228>
		
		case CUSTOMIZE_CMD_DATA_UPLOAD_RESP:
			printf("Update Data OK.\r\n");
  400c60:	484a      	ldr	r0, [pc, #296]	; (400d8c <execute_serial_cmd+0x270>)
  400c62:	4b3b      	ldr	r3, [pc, #236]	; (400d50 <execute_serial_cmd+0x234>)
  400c64:	4798      	blx	r3
		break;
  400c66:	e06d      	b.n	400d44 <execute_serial_cmd+0x228>
		
		case CUSTOMIZE_CMD_FACTORY_RESET_RESP:
		{
			LED_On(LED0);
  400c68:	201e      	movs	r0, #30
  400c6a:	2101      	movs	r1, #1
  400c6c:	4b48      	ldr	r3, [pc, #288]	; (400d90 <execute_serial_cmd+0x274>)
  400c6e:	4798      	blx	r3
			led_state = ON;
  400c70:	4b48      	ldr	r3, [pc, #288]	; (400d94 <execute_serial_cmd+0x278>)
  400c72:	2201      	movs	r2, #1
  400c74:	701a      	strb	r2, [r3, #0]
			printf("Reset to FactoryNew OK.\r\n");
  400c76:	4848      	ldr	r0, [pc, #288]	; (400d98 <execute_serial_cmd+0x27c>)
  400c78:	4b35      	ldr	r3, [pc, #212]	; (400d50 <execute_serial_cmd+0x234>)
  400c7a:	4798      	blx	r3
			
		}
		break;
  400c7c:	e062      	b.n	400d44 <execute_serial_cmd+0x228>
		
		case CMD_DEVICE_UUID_RESP:
			if(*data == CMD_SUCCESS) {
  400c7e:	683b      	ldr	r3, [r7, #0]
  400c80:	781b      	ldrb	r3, [r3, #0]
  400c82:	2b00      	cmp	r3, #0
  400c84:	d103      	bne.n	400c8e <execute_serial_cmd+0x172>
				//Wi-Fi module will connect the remote server automatically after it gets the UUID.
				//start_wifi_connect();
				//config_wifi_app_otau_url();
				printf("UUID RESP OK.\r\n");
  400c86:	4845      	ldr	r0, [pc, #276]	; (400d9c <execute_serial_cmd+0x280>)
  400c88:	4b31      	ldr	r3, [pc, #196]	; (400d50 <execute_serial_cmd+0x234>)
  400c8a:	4798      	blx	r3
			}
			else {
				printf("UUID RESP Error.\r\n");
			}
		break;
  400c8c:	e05a      	b.n	400d44 <execute_serial_cmd+0x228>
				//start_wifi_connect();
				//config_wifi_app_otau_url();
				printf("UUID RESP OK.\r\n");
			}
			else {
				printf("UUID RESP Error.\r\n");
  400c8e:	4844      	ldr	r0, [pc, #272]	; (400da0 <execute_serial_cmd+0x284>)
  400c90:	4b2f      	ldr	r3, [pc, #188]	; (400d50 <execute_serial_cmd+0x234>)
  400c92:	4798      	blx	r3
			}
		break;
  400c94:	e056      	b.n	400d44 <execute_serial_cmd+0x228>
		
		case CMD_START_SNIFFER_RESP:
		{
			printf("Start sniffer mode...\r\n");
  400c96:	4843      	ldr	r0, [pc, #268]	; (400da4 <execute_serial_cmd+0x288>)
  400c98:	4b2d      	ldr	r3, [pc, #180]	; (400d50 <execute_serial_cmd+0x234>)
  400c9a:	4798      	blx	r3
			break;
  400c9c:	e052      	b.n	400d44 <execute_serial_cmd+0x228>
		}
		
		case CMD_GOT_SSID_PSK_RESP:
		{
			p = data + 1;
  400c9e:	683b      	ldr	r3, [r7, #0]
  400ca0:	3301      	adds	r3, #1
  400ca2:	60fb      	str	r3, [r7, #12]
			len = strlen(p);
  400ca4:	68f8      	ldr	r0, [r7, #12]
  400ca6:	4b40      	ldr	r3, [pc, #256]	; (400da8 <execute_serial_cmd+0x28c>)
  400ca8:	4798      	blx	r3
  400caa:	4603      	mov	r3, r0
  400cac:	813b      	strh	r3, [r7, #8]
			printf("Got wifi ssid: %s, psk: %s\r\n", p, p + len + 1);
  400cae:	893b      	ldrh	r3, [r7, #8]
  400cb0:	3301      	adds	r3, #1
  400cb2:	68fa      	ldr	r2, [r7, #12]
  400cb4:	4413      	add	r3, r2
  400cb6:	483d      	ldr	r0, [pc, #244]	; (400dac <execute_serial_cmd+0x290>)
  400cb8:	68f9      	ldr	r1, [r7, #12]
  400cba:	461a      	mov	r2, r3
  400cbc:	4b24      	ldr	r3, [pc, #144]	; (400d50 <execute_serial_cmd+0x234>)
  400cbe:	4798      	blx	r3
			break;
  400cc0:	e040      	b.n	400d44 <execute_serial_cmd+0x228>
		}
		
		case CMD_START_WIFI_CONNECT_RESP:
		{
			p = data + 1;
  400cc2:	683b      	ldr	r3, [r7, #0]
  400cc4:	3301      	adds	r3, #1
  400cc6:	60fb      	str	r3, [r7, #12]
			len = strlen(p);
  400cc8:	68f8      	ldr	r0, [r7, #12]
  400cca:	4b37      	ldr	r3, [pc, #220]	; (400da8 <execute_serial_cmd+0x28c>)
  400ccc:	4798      	blx	r3
  400cce:	4603      	mov	r3, r0
  400cd0:	813b      	strh	r3, [r7, #8]
			printf("Start wifi connect ssid(%s), psk(%s).\r\n", p, p + len + 1);
  400cd2:	893b      	ldrh	r3, [r7, #8]
  400cd4:	3301      	adds	r3, #1
  400cd6:	68fa      	ldr	r2, [r7, #12]
  400cd8:	4413      	add	r3, r2
  400cda:	4835      	ldr	r0, [pc, #212]	; (400db0 <execute_serial_cmd+0x294>)
  400cdc:	68f9      	ldr	r1, [r7, #12]
  400cde:	461a      	mov	r2, r3
  400ce0:	4b1b      	ldr	r3, [pc, #108]	; (400d50 <execute_serial_cmd+0x234>)
  400ce2:	4798      	blx	r3
			break;
  400ce4:	e02e      	b.n	400d44 <execute_serial_cmd+0x228>
		}
		
		case CMD_WIFI_CLOUD_READY:
		{
			printf("Wi-Fi connect to Cloud OK\r\n");
  400ce6:	4833      	ldr	r0, [pc, #204]	; (400db4 <execute_serial_cmd+0x298>)
  400ce8:	4b19      	ldr	r3, [pc, #100]	; (400d50 <execute_serial_cmd+0x234>)
  400cea:	4798      	blx	r3
			break;
  400cec:	e02a      	b.n	400d44 <execute_serial_cmd+0x228>
		}
		case CUSTOMIZE_CMD_CHANGE_UART_CFG_RESP:
		{
			printf("Wi-Fi return get uart cfg OK\r\n");
  400cee:	4832      	ldr	r0, [pc, #200]	; (400db8 <execute_serial_cmd+0x29c>)
  400cf0:	4b17      	ldr	r3, [pc, #92]	; (400d50 <execute_serial_cmd+0x234>)
  400cf2:	4798      	blx	r3
			if(uart_cfg_cmd.baud_index == 1)
  400cf4:	4b31      	ldr	r3, [pc, #196]	; (400dbc <execute_serial_cmd+0x2a0>)
  400cf6:	781b      	ldrb	r3, [r3, #0]
  400cf8:	2b01      	cmp	r3, #1
  400cfa:	d104      	bne.n	400d06 <execute_serial_cmd+0x1ea>
			{
				wifi_serial_init(BIT_RATE_19200);
  400cfc:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
  400d00:	4b2f      	ldr	r3, [pc, #188]	; (400dc0 <execute_serial_cmd+0x2a4>)
  400d02:	4798      	blx	r3
			}
			break;
  400d04:	e01e      	b.n	400d44 <execute_serial_cmd+0x228>
  400d06:	e01d      	b.n	400d44 <execute_serial_cmd+0x228>
		}

		
		case CMD_UDP_PACKET_UNKNOWN_PACKET:
			printf("UDP packet unknown packet.\r\n");
  400d08:	482e      	ldr	r0, [pc, #184]	; (400dc4 <execute_serial_cmd+0x2a8>)
  400d0a:	4b11      	ldr	r3, [pc, #68]	; (400d50 <execute_serial_cmd+0x234>)
  400d0c:	4798      	blx	r3
		break;
  400d0e:	e019      	b.n	400d44 <execute_serial_cmd+0x228>
		
		case CMD_OUT_OF_MEMORY:
			printf("Error: out of memory.\r\n");
  400d10:	482d      	ldr	r0, [pc, #180]	; (400dc8 <execute_serial_cmd+0x2ac>)
  400d12:	4b0f      	ldr	r3, [pc, #60]	; (400d50 <execute_serial_cmd+0x234>)
  400d14:	4798      	blx	r3
		break;
  400d16:	e015      	b.n	400d44 <execute_serial_cmd+0x228>
		
		case CUSTOMIZE_CMD_FACTORY_TEST_RESP:
			if(*data == 0x0) {
  400d18:	683b      	ldr	r3, [r7, #0]
  400d1a:	781b      	ldrb	r3, [r3, #0]
  400d1c:	2b00      	cmp	r3, #0
  400d1e:	d103      	bne.n	400d28 <execute_serial_cmd+0x20c>
				printf("AP can Found.\r\n");
  400d20:	482a      	ldr	r0, [pc, #168]	; (400dcc <execute_serial_cmd+0x2b0>)
  400d22:	4b0b      	ldr	r3, [pc, #44]	; (400d50 <execute_serial_cmd+0x234>)
  400d24:	4798      	blx	r3
			}
			else {
				printf ("AP not Found.\r\n");
			}
		break;
  400d26:	e00d      	b.n	400d44 <execute_serial_cmd+0x228>
		case CUSTOMIZE_CMD_FACTORY_TEST_RESP:
			if(*data == 0x0) {
				printf("AP can Found.\r\n");
			}
			else {
				printf ("AP not Found.\r\n");
  400d28:	4829      	ldr	r0, [pc, #164]	; (400dd0 <execute_serial_cmd+0x2b4>)
  400d2a:	4b09      	ldr	r3, [pc, #36]	; (400d50 <execute_serial_cmd+0x234>)
  400d2c:	4798      	blx	r3
			}
		break;
  400d2e:	e009      	b.n	400d44 <execute_serial_cmd+0x228>
		
		case CMD_UART_TIMEOUT:
			printf("Error: UART timeout.\r\n");
  400d30:	4828      	ldr	r0, [pc, #160]	; (400dd4 <execute_serial_cmd+0x2b8>)
  400d32:	4b07      	ldr	r3, [pc, #28]	; (400d50 <execute_serial_cmd+0x234>)
  400d34:	4798      	blx	r3
		break;
  400d36:	e005      	b.n	400d44 <execute_serial_cmd+0x228>
		
		default:
			printf("Unsupported command(%d).\r\n", cmdid);
  400d38:	79fb      	ldrb	r3, [r7, #7]
  400d3a:	4827      	ldr	r0, [pc, #156]	; (400dd8 <execute_serial_cmd+0x2bc>)
  400d3c:	4619      	mov	r1, r3
  400d3e:	4b04      	ldr	r3, [pc, #16]	; (400d50 <execute_serial_cmd+0x234>)
  400d40:	4798      	blx	r3
		break;
  400d42:	bf00      	nop

	}
}
  400d44:	3710      	adds	r7, #16
  400d46:	46bd      	mov	sp, r7
  400d48:	bd80      	pop	{r7, pc}
  400d4a:	bf00      	nop
  400d4c:	0040cc74 	.word	0x0040cc74
  400d50:	0040a111 	.word	0x0040a111
  400d54:	2000124a 	.word	0x2000124a
  400d58:	20000110 	.word	0x20000110
  400d5c:	00400af1 	.word	0x00400af1
  400d60:	0040cc8c 	.word	0x0040cc8c
  400d64:	00403855 	.word	0x00403855
  400d68:	00400afd 	.word	0x00400afd
  400d6c:	0040ccb0 	.word	0x0040ccb0
  400d70:	0040ccdc 	.word	0x0040ccdc
  400d74:	0040ccf0 	.word	0x0040ccf0
  400d78:	0040cd10 	.word	0x0040cd10
  400d7c:	0040cd38 	.word	0x0040cd38
  400d80:	0040cd5c 	.word	0x0040cd5c
  400d84:	2000124c 	.word	0x2000124c
  400d88:	0040cd7c 	.word	0x0040cd7c
  400d8c:	0040cd94 	.word	0x0040cd94
  400d90:	00400445 	.word	0x00400445
  400d94:	20001244 	.word	0x20001244
  400d98:	0040cda8 	.word	0x0040cda8
  400d9c:	0040cdc4 	.word	0x0040cdc4
  400da0:	0040cdd4 	.word	0x0040cdd4
  400da4:	0040cde8 	.word	0x0040cde8
  400da8:	0040aa51 	.word	0x0040aa51
  400dac:	0040ce00 	.word	0x0040ce00
  400db0:	0040ce20 	.word	0x0040ce20
  400db4:	0040ce48 	.word	0x0040ce48
  400db8:	0040ce64 	.word	0x0040ce64
  400dbc:	20001248 	.word	0x20001248
  400dc0:	0040075d 	.word	0x0040075d
  400dc4:	0040ce84 	.word	0x0040ce84
  400dc8:	0040cea4 	.word	0x0040cea4
  400dcc:	0040cebc 	.word	0x0040cebc
  400dd0:	0040cecc 	.word	0x0040cecc
  400dd4:	0040cedc 	.word	0x0040cedc
  400dd8:	0040cef4 	.word	0x0040cef4

00400ddc <parse_serial_packet>:

void parse_serial_packet(uint8_t *buf, uint8_t buflen)
{
  400ddc:	b590      	push	{r4, r7, lr}
  400dde:	b087      	sub	sp, #28
  400de0:	af00      	add	r7, sp, #0
  400de2:	6078      	str	r0, [r7, #4]
  400de4:	460b      	mov	r3, r1
  400de6:	70fb      	strb	r3, [r7, #3]
	uint8_t *p = buf;
  400de8:	687b      	ldr	r3, [r7, #4]
  400dea:	617b      	str	r3, [r7, #20]
	uint8_t *data = NULL;
  400dec:	2300      	movs	r3, #0
  400dee:	613b      	str	r3, [r7, #16]
	uint8_t resp = CMD_SUCCESS;
  400df0:	2300      	movs	r3, #0
  400df2:	73fb      	strb	r3, [r7, #15]
	uint8_t len, crc, cmdid;
	
	byte2hexstrstr(buf, buflen, serial_buf_test, 256);
  400df4:	78fb      	ldrb	r3, [r7, #3]
  400df6:	6878      	ldr	r0, [r7, #4]
  400df8:	4619      	mov	r1, r3
  400dfa:	4a35      	ldr	r2, [pc, #212]	; (400ed0 <parse_serial_packet+0xf4>)
  400dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
  400e00:	4c34      	ldr	r4, [pc, #208]	; (400ed4 <parse_serial_packet+0xf8>)
  400e02:	47a0      	blx	r4
	printf ("Serial IN(%d): %s\r\n", buflen, serial_buf_test);
  400e04:	78fb      	ldrb	r3, [r7, #3]
  400e06:	4834      	ldr	r0, [pc, #208]	; (400ed8 <parse_serial_packet+0xfc>)
  400e08:	4619      	mov	r1, r3
  400e0a:	4a31      	ldr	r2, [pc, #196]	; (400ed0 <parse_serial_packet+0xf4>)
  400e0c:	4b33      	ldr	r3, [pc, #204]	; (400edc <parse_serial_packet+0x100>)
  400e0e:	4798      	blx	r3
	
	while(buflen > 3) {
  400e10:	e056      	b.n	400ec0 <parse_serial_packet+0xe4>
		if(*p != SERIAL_SOF) {
  400e12:	697b      	ldr	r3, [r7, #20]
  400e14:	781b      	ldrb	r3, [r3, #0]
  400e16:	2b7e      	cmp	r3, #126	; 0x7e
  400e18:	d012      	beq.n	400e40 <parse_serial_packet+0x64>
			if (uart_ready == 0)
  400e1a:	4b31      	ldr	r3, [pc, #196]	; (400ee0 <parse_serial_packet+0x104>)
  400e1c:	781b      	ldrb	r3, [r3, #0]
  400e1e:	2b00      	cmp	r3, #0
  400e20:	d100      	bne.n	400e24 <parse_serial_packet+0x48>
				return;
  400e22:	e051      	b.n	400ec8 <parse_serial_packet+0xec>
			resp = CMD_INVALID_HEAD;
  400e24:	2301      	movs	r3, #1
  400e26:	73fb      	strb	r3, [r7, #15]
			printf("Invalid header received (0x%x).\r\n", *p);
  400e28:	697b      	ldr	r3, [r7, #20]
  400e2a:	781b      	ldrb	r3, [r3, #0]
  400e2c:	482d      	ldr	r0, [pc, #180]	; (400ee4 <parse_serial_packet+0x108>)
  400e2e:	4619      	mov	r1, r3
  400e30:	4b2a      	ldr	r3, [pc, #168]	; (400edc <parse_serial_packet+0x100>)
  400e32:	4798      	blx	r3
			serial_resp_out(CMD_PACKET_ERROR_RESP, resp);
  400e34:	7bfb      	ldrb	r3, [r7, #15]
  400e36:	20a0      	movs	r0, #160	; 0xa0
  400e38:	4619      	mov	r1, r3
  400e3a:	4b2b      	ldr	r3, [pc, #172]	; (400ee8 <parse_serial_packet+0x10c>)
  400e3c:	4798      	blx	r3
			return;
  400e3e:	e043      	b.n	400ec8 <parse_serial_packet+0xec>
		}
	
		len = *(p + 1 + 1) + 3;
  400e40:	697b      	ldr	r3, [r7, #20]
  400e42:	3302      	adds	r3, #2
  400e44:	781b      	ldrb	r3, [r3, #0]
  400e46:	3303      	adds	r3, #3
  400e48:	73bb      	strb	r3, [r7, #14]

		crc = sum8(p, len);
  400e4a:	7bbb      	ldrb	r3, [r7, #14]
  400e4c:	6978      	ldr	r0, [r7, #20]
  400e4e:	4619      	mov	r1, r3
  400e50:	4b26      	ldr	r3, [pc, #152]	; (400eec <parse_serial_packet+0x110>)
  400e52:	4798      	blx	r3
  400e54:	4603      	mov	r3, r0
  400e56:	737b      	strb	r3, [r7, #13]

		if(*(p + len) != crc) {
  400e58:	7bbb      	ldrb	r3, [r7, #14]
  400e5a:	697a      	ldr	r2, [r7, #20]
  400e5c:	4413      	add	r3, r2
  400e5e:	781b      	ldrb	r3, [r3, #0]
  400e60:	7b7a      	ldrb	r2, [r7, #13]
  400e62:	429a      	cmp	r2, r3
  400e64:	d00d      	beq.n	400e82 <parse_serial_packet+0xa6>
			resp = CMD_CRC_ERROR;
  400e66:	2302      	movs	r3, #2
  400e68:	73fb      	strb	r3, [r7, #15]
			printf("Invalid CRC, Received CRC(0x%x), Calculated CRC(0x%x).\r\n", *(p + len), crc);
  400e6a:	7bbb      	ldrb	r3, [r7, #14]
  400e6c:	697a      	ldr	r2, [r7, #20]
  400e6e:	4413      	add	r3, r2
  400e70:	781b      	ldrb	r3, [r3, #0]
  400e72:	461a      	mov	r2, r3
  400e74:	7b7b      	ldrb	r3, [r7, #13]
  400e76:	481e      	ldr	r0, [pc, #120]	; (400ef0 <parse_serial_packet+0x114>)
  400e78:	4611      	mov	r1, r2
  400e7a:	461a      	mov	r2, r3
  400e7c:	4b17      	ldr	r3, [pc, #92]	; (400edc <parse_serial_packet+0x100>)
  400e7e:	4798      	blx	r3
			//serial_resp_out(CMD_PACKET_ERROR_RESP, CMD_CRC_ERROR);
			return;
  400e80:	e022      	b.n	400ec8 <parse_serial_packet+0xec>
		}
		cmdid = *(p + 3);
  400e82:	697b      	ldr	r3, [r7, #20]
  400e84:	78db      	ldrb	r3, [r3, #3]
  400e86:	733b      	strb	r3, [r7, #12]
		data = p + 4;
  400e88:	697b      	ldr	r3, [r7, #20]
  400e8a:	3304      	adds	r3, #4
  400e8c:	613b      	str	r3, [r7, #16]
		len = *(p + 1 + 1) - 1;
  400e8e:	697b      	ldr	r3, [r7, #20]
  400e90:	3302      	adds	r3, #2
  400e92:	781b      	ldrb	r3, [r3, #0]
  400e94:	3b01      	subs	r3, #1
  400e96:	73bb      	strb	r3, [r7, #14]
		execute_serial_cmd(cmdid, data, len);
  400e98:	7b3a      	ldrb	r2, [r7, #12]
  400e9a:	7bbb      	ldrb	r3, [r7, #14]
  400e9c:	4610      	mov	r0, r2
  400e9e:	6939      	ldr	r1, [r7, #16]
  400ea0:	461a      	mov	r2, r3
  400ea2:	4b14      	ldr	r3, [pc, #80]	; (400ef4 <parse_serial_packet+0x118>)
  400ea4:	4798      	blx	r3
		//in case two packet coming together
		len = *(p + 1 + 1) + 4;
  400ea6:	697b      	ldr	r3, [r7, #20]
  400ea8:	3302      	adds	r3, #2
  400eaa:	781b      	ldrb	r3, [r3, #0]
  400eac:	3304      	adds	r3, #4
  400eae:	73bb      	strb	r3, [r7, #14]
		p = p + len;
  400eb0:	7bbb      	ldrb	r3, [r7, #14]
  400eb2:	697a      	ldr	r2, [r7, #20]
  400eb4:	4413      	add	r3, r2
  400eb6:	617b      	str	r3, [r7, #20]
		buflen = buflen - len;
  400eb8:	78fa      	ldrb	r2, [r7, #3]
  400eba:	7bbb      	ldrb	r3, [r7, #14]
  400ebc:	1ad3      	subs	r3, r2, r3
  400ebe:	70fb      	strb	r3, [r7, #3]
	uint8_t len, crc, cmdid;
	
	byte2hexstrstr(buf, buflen, serial_buf_test, 256);
	printf ("Serial IN(%d): %s\r\n", buflen, serial_buf_test);
	
	while(buflen > 3) {
  400ec0:	78fb      	ldrb	r3, [r7, #3]
  400ec2:	2b03      	cmp	r3, #3
  400ec4:	d8a5      	bhi.n	400e12 <parse_serial_packet+0x36>
		//in case two packet coming together
		len = *(p + 1 + 1) + 4;
		p = p + len;
		buflen = buflen - len;
	}
	return;
  400ec6:	bf00      	nop
}
  400ec8:	371c      	adds	r7, #28
  400eca:	46bd      	mov	sp, r7
  400ecc:	bd90      	pop	{r4, r7, pc}
  400ece:	bf00      	nop
  400ed0:	20019e7c 	.word	0x20019e7c
  400ed4:	004006b1 	.word	0x004006b1
  400ed8:	0040cf10 	.word	0x0040cf10
  400edc:	0040a111 	.word	0x0040a111
  400ee0:	2000124a 	.word	0x2000124a
  400ee4:	0040cf24 	.word	0x0040cf24
  400ee8:	00400a55 	.word	0x00400a55
  400eec:	0040097d 	.word	0x0040097d
  400ef0:	0040cf48 	.word	0x0040cf48
  400ef4:	00400b1d 	.word	0x00400b1d

00400ef8 <wifi_in>:

void wifi_in(void *parameter)
{
  400ef8:	b590      	push	{r4, r7, lr}
  400efa:	b085      	sub	sp, #20
  400efc:	af00      	add	r7, sp, #0
  400efe:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc = NULL;
  400f00:	2300      	movs	r3, #0
  400f02:	60fb      	str	r3, [r7, #12]
	serial_in_pk_t *in_data = NULL;
  400f04:	2300      	movs	r3, #0
  400f06:	60bb      	str	r3, [r7, #8]
	wifi_module_reset();
  400f08:	4b0d      	ldr	r3, [pc, #52]	; (400f40 <wifi_in+0x48>)
  400f0a:	4798      	blx	r3
	printf("wifi_in task started\r\n");
  400f0c:	480d      	ldr	r0, [pc, #52]	; (400f44 <wifi_in+0x4c>)
  400f0e:	4b0e      	ldr	r3, [pc, #56]	; (400f48 <wifi_in+0x50>)
  400f10:	4798      	blx	r3

	for(;;) {
		xQueueReceive(serial_in_queue, &in_data, portMAX_DELAY);
  400f12:	4b0e      	ldr	r3, [pc, #56]	; (400f4c <wifi_in+0x54>)
  400f14:	681a      	ldr	r2, [r3, #0]
  400f16:	f107 0308 	add.w	r3, r7, #8
  400f1a:	4610      	mov	r0, r2
  400f1c:	4619      	mov	r1, r3
  400f1e:	f04f 32ff 	mov.w	r2, #4294967295
  400f22:	2300      	movs	r3, #0
  400f24:	4c0a      	ldr	r4, [pc, #40]	; (400f50 <wifi_in+0x58>)
  400f26:	47a0      	blx	r4
		parse_serial_packet(in_data->buf, in_data->len);
  400f28:	68bb      	ldr	r3, [r7, #8]
  400f2a:	461a      	mov	r2, r3
  400f2c:	68bb      	ldr	r3, [r7, #8]
  400f2e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
  400f32:	b2db      	uxtb	r3, r3
  400f34:	4610      	mov	r0, r2
  400f36:	4619      	mov	r1, r3
  400f38:	4b06      	ldr	r3, [pc, #24]	; (400f54 <wifi_in+0x5c>)
  400f3a:	4798      	blx	r3
	}
  400f3c:	e7e9      	b.n	400f12 <wifi_in+0x1a>
  400f3e:	bf00      	nop
  400f40:	0040056d 	.word	0x0040056d
  400f44:	0040cf84 	.word	0x0040cf84
  400f48:	0040a111 	.word	0x0040a111
  400f4c:	20000a20 	.word	0x20000a20
  400f50:	00401ee9 	.word	0x00401ee9
  400f54:	00400ddd 	.word	0x00400ddd

00400f58 <vLedModeCallback>:
}

static void vLedModeCallback( xTimerHandle pxTimer )
{
  400f58:	b580      	push	{r7, lr}
  400f5a:	b082      	sub	sp, #8
  400f5c:	af00      	add	r7, sp, #0
  400f5e:	6078      	str	r0, [r7, #4]
	switch(led_blinking_mode){
  400f60:	4b1f      	ldr	r3, [pc, #124]	; (400fe0 <vLedModeCallback+0x88>)
  400f62:	781b      	ldrb	r3, [r3, #0]
  400f64:	3b01      	subs	r3, #1
  400f66:	2b03      	cmp	r3, #3
  400f68:	d836      	bhi.n	400fd8 <vLedModeCallback+0x80>
  400f6a:	a201      	add	r2, pc, #4	; (adr r2, 400f70 <vLedModeCallback+0x18>)
  400f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f70:	00400f81 	.word	0x00400f81
  400f74:	00400fad 	.word	0x00400fad
  400f78:	00400fc3 	.word	0x00400fc3
  400f7c:	00400f97 	.word	0x00400f97
		case LED_MODE_CONNECT:
		{
			LED_Toggle(LED1);
  400f80:	2010      	movs	r0, #16
  400f82:	4b18      	ldr	r3, [pc, #96]	; (400fe4 <vLedModeCallback+0x8c>)
  400f84:	4798      	blx	r3
			led_state = led_state^1;
  400f86:	4b18      	ldr	r3, [pc, #96]	; (400fe8 <vLedModeCallback+0x90>)
  400f88:	781b      	ldrb	r3, [r3, #0]
  400f8a:	f083 0301 	eor.w	r3, r3, #1
  400f8e:	b2da      	uxtb	r2, r3
  400f90:	4b15      	ldr	r3, [pc, #84]	; (400fe8 <vLedModeCallback+0x90>)
  400f92:	701a      	strb	r2, [r3, #0]
			break;
  400f94:	e021      	b.n	400fda <vLedModeCallback+0x82>
		}
		case LED_MODE_OTAU:
		{
			LED_Toggle(LED1);
  400f96:	2010      	movs	r0, #16
  400f98:	4b12      	ldr	r3, [pc, #72]	; (400fe4 <vLedModeCallback+0x8c>)
  400f9a:	4798      	blx	r3
			led_state = led_state^1;
  400f9c:	4b12      	ldr	r3, [pc, #72]	; (400fe8 <vLedModeCallback+0x90>)
  400f9e:	781b      	ldrb	r3, [r3, #0]
  400fa0:	f083 0301 	eor.w	r3, r3, #1
  400fa4:	b2da      	uxtb	r2, r3
  400fa6:	4b10      	ldr	r3, [pc, #64]	; (400fe8 <vLedModeCallback+0x90>)
  400fa8:	701a      	strb	r2, [r3, #0]
			break;
  400faa:	e016      	b.n	400fda <vLedModeCallback+0x82>
		}
		case LED_MODE_OFF:
		{
			LED_Off(LED1);
  400fac:	2010      	movs	r0, #16
  400fae:	2100      	movs	r1, #0
  400fb0:	4b0e      	ldr	r3, [pc, #56]	; (400fec <vLedModeCallback+0x94>)
  400fb2:	4798      	blx	r3
			led_state = 0;
  400fb4:	4b0c      	ldr	r3, [pc, #48]	; (400fe8 <vLedModeCallback+0x90>)
  400fb6:	2200      	movs	r2, #0
  400fb8:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_NONE;
  400fba:	4b09      	ldr	r3, [pc, #36]	; (400fe0 <vLedModeCallback+0x88>)
  400fbc:	2200      	movs	r2, #0
  400fbe:	701a      	strb	r2, [r3, #0]
			break;
  400fc0:	e00b      	b.n	400fda <vLedModeCallback+0x82>
		}
		case LED_MODE_ON:
		{
			LED_On(LED1);
  400fc2:	2010      	movs	r0, #16
  400fc4:	2101      	movs	r1, #1
  400fc6:	4b09      	ldr	r3, [pc, #36]	; (400fec <vLedModeCallback+0x94>)
  400fc8:	4798      	blx	r3
			led_state = 1;
  400fca:	4b07      	ldr	r3, [pc, #28]	; (400fe8 <vLedModeCallback+0x90>)
  400fcc:	2201      	movs	r2, #1
  400fce:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_NONE;
  400fd0:	4b03      	ldr	r3, [pc, #12]	; (400fe0 <vLedModeCallback+0x88>)
  400fd2:	2200      	movs	r2, #0
  400fd4:	701a      	strb	r2, [r3, #0]
			break;
  400fd6:	e000      	b.n	400fda <vLedModeCallback+0x82>
		}
		default:
		break;
  400fd8:	bf00      	nop
	}
	//sendback_temperature ();
}
  400fda:	3708      	adds	r7, #8
  400fdc:	46bd      	mov	sp, r7
  400fde:	bd80      	pop	{r7, pc}
  400fe0:	20000110 	.word	0x20000110
  400fe4:	00400501 	.word	0x00400501
  400fe8:	20001244 	.word	0x20001244
  400fec:	00400445 	.word	0x00400445

00400ff0 <vConfigModeCallback>:

static void vConfigModeCallback( xTimerHandle pxTimer )
{
  400ff0:	b590      	push	{r4, r7, lr}
  400ff2:	b087      	sub	sp, #28
  400ff4:	af02      	add	r7, sp, #8
  400ff6:	6078      	str	r0, [r7, #4]
	
	static uint8_t pkt_buf[16];
	static uint16_t pkt_len;

	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  400ff8:	4b37      	ldr	r3, [pc, #220]	; (4010d8 <vConfigModeCallback+0xe8>)
  400ffa:	60fb      	str	r3, [r7, #12]
	
	
	vPortEnterCritical();
  400ffc:	4b37      	ldr	r3, [pc, #220]	; (4010dc <vConfigModeCallback+0xec>)
  400ffe:	4798      	blx	r3
	count++;
  401000:	4b37      	ldr	r3, [pc, #220]	; (4010e0 <vConfigModeCallback+0xf0>)
  401002:	781b      	ldrb	r3, [r3, #0]
  401004:	3301      	adds	r3, #1
  401006:	b2da      	uxtb	r2, r3
  401008:	4b35      	ldr	r3, [pc, #212]	; (4010e0 <vConfigModeCallback+0xf0>)
  40100a:	701a      	strb	r2, [r3, #0]
	vPortExitCritical();
  40100c:	4b35      	ldr	r3, [pc, #212]	; (4010e4 <vConfigModeCallback+0xf4>)
  40100e:	4798      	blx	r3
	
	if(!ioport_get_pin_level(BUTTON_0_PIN)){
  401010:	2020      	movs	r0, #32
  401012:	4b35      	ldr	r3, [pc, #212]	; (4010e8 <vConfigModeCallback+0xf8>)
  401014:	4798      	blx	r3
  401016:	4603      	mov	r3, r0
  401018:	f083 0301 	eor.w	r3, r3, #1
  40101c:	b2db      	uxtb	r3, r3
  40101e:	2b00      	cmp	r3, #0
  401020:	d014      	beq.n	40104c <vConfigModeCallback+0x5c>
		if(count >= 5){
  401022:	4b2f      	ldr	r3, [pc, #188]	; (4010e0 <vConfigModeCallback+0xf0>)
  401024:	781b      	ldrb	r3, [r3, #0]
  401026:	2b04      	cmp	r3, #4
  401028:	d909      	bls.n	40103e <vConfigModeCallback+0x4e>
			printf("enter config mode\r\n");
  40102a:	4830      	ldr	r0, [pc, #192]	; (4010ec <vConfigModeCallback+0xfc>)
  40102c:	4b30      	ldr	r3, [pc, #192]	; (4010f0 <vConfigModeCallback+0x100>)
  40102e:	4798      	blx	r3
			button_mode = ENTER_CONFIG_MODE;
  401030:	4b30      	ldr	r3, [pc, #192]	; (4010f4 <vConfigModeCallback+0x104>)
  401032:	2200      	movs	r2, #0
  401034:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_ON;
  401036:	4b30      	ldr	r3, [pc, #192]	; (4010f8 <vConfigModeCallback+0x108>)
  401038:	2203      	movs	r2, #3
  40103a:	701a      	strb	r2, [r3, #0]
  40103c:	e049      	b.n	4010d2 <vConfigModeCallback+0xe2>
		}
		else {
			printf("enter test command mode\r\n");
  40103e:	482f      	ldr	r0, [pc, #188]	; (4010fc <vConfigModeCallback+0x10c>)
  401040:	4b2b      	ldr	r3, [pc, #172]	; (4010f0 <vConfigModeCallback+0x100>)
  401042:	4798      	blx	r3
			button_mode = ENTER_GENERAL_MODE;
  401044:	4b2b      	ldr	r3, [pc, #172]	; (4010f4 <vConfigModeCallback+0x104>)
  401046:	2201      	movs	r2, #1
  401048:	701a      	strb	r2, [r3, #0]
  40104a:	e042      	b.n	4010d2 <vConfigModeCallback+0xe2>
		}
	}
	else{
		//button released, exit FN mode
		if(button_mode == ENTER_CONFIG_MODE){
  40104c:	4b29      	ldr	r3, [pc, #164]	; (4010f4 <vConfigModeCallback+0x104>)
  40104e:	781b      	ldrb	r3, [r3, #0]
  401050:	2b00      	cmp	r3, #0
  401052:	d121      	bne.n	401098 <vConfigModeCallback+0xa8>
			printf("perform config mode\r\n");
  401054:	482a      	ldr	r0, [pc, #168]	; (401100 <vConfigModeCallback+0x110>)
  401056:	4b26      	ldr	r3, [pc, #152]	; (4010f0 <vConfigModeCallback+0x100>)
  401058:	4798      	blx	r3
			led_blinking_mode = LED_MODE_CONNECT;
  40105a:	4b27      	ldr	r3, [pc, #156]	; (4010f8 <vConfigModeCallback+0x108>)
  40105c:	2201      	movs	r2, #1
  40105e:	701a      	strb	r2, [r3, #0]
			pkt_len = form_serial_packet(CUSTOMIZE_CMD_FACTORY_RESET, NULL, 0, pkt_buf);
  401060:	2002      	movs	r0, #2
  401062:	2100      	movs	r1, #0
  401064:	2200      	movs	r2, #0
  401066:	4b27      	ldr	r3, [pc, #156]	; (401104 <vConfigModeCallback+0x114>)
  401068:	4c27      	ldr	r4, [pc, #156]	; (401108 <vConfigModeCallback+0x118>)
  40106a:	47a0      	blx	r4
  40106c:	4603      	mov	r3, r0
  40106e:	461a      	mov	r2, r3
  401070:	4b26      	ldr	r3, [pc, #152]	; (40110c <vConfigModeCallback+0x11c>)
  401072:	801a      	strh	r2, [r3, #0]
			out_data->buf = pkt_buf;
  401074:	68fb      	ldr	r3, [r7, #12]
  401076:	4a23      	ldr	r2, [pc, #140]	; (401104 <vConfigModeCallback+0x114>)
  401078:	601a      	str	r2, [r3, #0]
			out_data->len = pkt_len;
  40107a:	68fb      	ldr	r3, [r7, #12]
  40107c:	4a23      	ldr	r2, [pc, #140]	; (40110c <vConfigModeCallback+0x11c>)
  40107e:	8812      	ldrh	r2, [r2, #0]
  401080:	605a      	str	r2, [r3, #4]
			xQueueSend(serial_out_queue, &out_data, 0);
  401082:	4b23      	ldr	r3, [pc, #140]	; (401110 <vConfigModeCallback+0x120>)
  401084:	681a      	ldr	r2, [r3, #0]
  401086:	f107 030c 	add.w	r3, r7, #12
  40108a:	4610      	mov	r0, r2
  40108c:	4619      	mov	r1, r3
  40108e:	2200      	movs	r2, #0
  401090:	2300      	movs	r3, #0
  401092:	4c20      	ldr	r4, [pc, #128]	; (401114 <vConfigModeCallback+0x124>)
  401094:	47a0      	blx	r4
  401096:	e008      	b.n	4010aa <vConfigModeCallback+0xba>
		}
		else if (button_mode == ENTER_GENERAL_MODE){
  401098:	4b16      	ldr	r3, [pc, #88]	; (4010f4 <vConfigModeCallback+0x104>)
  40109a:	781b      	ldrb	r3, [r3, #0]
  40109c:	2b01      	cmp	r3, #1
  40109e:	d104      	bne.n	4010aa <vConfigModeCallback+0xba>
			printf("perform test command mode\r\n");
  4010a0:	481d      	ldr	r0, [pc, #116]	; (401118 <vConfigModeCallback+0x128>)
  4010a2:	4b13      	ldr	r3, [pc, #76]	; (4010f0 <vConfigModeCallback+0x100>)
  4010a4:	4798      	blx	r3
			//startTemperature();	
			//CameraPictureSnapshotReq(0xff);
			//sendback_temperature ();		
			startPicture();
  4010a6:	4b1d      	ldr	r3, [pc, #116]	; (40111c <vConfigModeCallback+0x12c>)
  4010a8:	4798      	blx	r3
		}
		vPortEnterCritical();
  4010aa:	4b0c      	ldr	r3, [pc, #48]	; (4010dc <vConfigModeCallback+0xec>)
  4010ac:	4798      	blx	r3
		count = 0;
  4010ae:	4b0c      	ldr	r3, [pc, #48]	; (4010e0 <vConfigModeCallback+0xf0>)
  4010b0:	2200      	movs	r2, #0
  4010b2:	701a      	strb	r2, [r3, #0]
		vPortExitCritical();
  4010b4:	4b0b      	ldr	r3, [pc, #44]	; (4010e4 <vConfigModeCallback+0xf4>)
  4010b6:	4798      	blx	r3
		button_mode = ENTER_GENERAL_MODE;
  4010b8:	4b0e      	ldr	r3, [pc, #56]	; (4010f4 <vConfigModeCallback+0x104>)
  4010ba:	2201      	movs	r2, #1
  4010bc:	701a      	strb	r2, [r3, #0]
		xTimerStop(xConfigTimer, 0);
  4010be:	4b18      	ldr	r3, [pc, #96]	; (401120 <vConfigModeCallback+0x130>)
  4010c0:	681a      	ldr	r2, [r3, #0]
  4010c2:	2300      	movs	r3, #0
  4010c4:	9300      	str	r3, [sp, #0]
  4010c6:	4610      	mov	r0, r2
  4010c8:	2101      	movs	r1, #1
  4010ca:	2200      	movs	r2, #0
  4010cc:	2300      	movs	r3, #0
  4010ce:	4c15      	ldr	r4, [pc, #84]	; (401124 <vConfigModeCallback+0x134>)
  4010d0:	47a0      	blx	r4
	}
}
  4010d2:	3714      	adds	r7, #20
  4010d4:	46bd      	mov	sp, r7
  4010d6:	bd90      	pop	{r4, r7, pc}
  4010d8:	20001264 	.word	0x20001264
  4010dc:	0040177d 	.word	0x0040177d
  4010e0:	20001270 	.word	0x20001270
  4010e4:	00401799 	.word	0x00401799
  4010e8:	004004b1 	.word	0x004004b1
  4010ec:	0040cf9c 	.word	0x0040cf9c
  4010f0:	0040a111 	.word	0x0040a111
  4010f4:	20000118 	.word	0x20000118
  4010f8:	20000110 	.word	0x20000110
  4010fc:	0040cfb0 	.word	0x0040cfb0
  401100:	0040cfcc 	.word	0x0040cfcc
  401104:	20001274 	.word	0x20001274
  401108:	004009bd 	.word	0x004009bd
  40110c:	20001284 	.word	0x20001284
  401110:	20000a24 	.word	0x20000a24
  401114:	00401ca9 	.word	0x00401ca9
  401118:	0040cfe4 	.word	0x0040cfe4
  40111c:	00400afd 	.word	0x00400afd
  401120:	20000a28 	.word	0x20000a28
  401124:	00403249 	.word	0x00403249

00401128 <wifi_task>:

void wifi_task(void *parameter)
{
  401128:	b590      	push	{r4, r7, lr}
  40112a:	b0ab      	sub	sp, #172	; 0xac
  40112c:	af04      	add	r7, sp, #16
  40112e:	6078      	str	r0, [r7, #4]
	(void) parameter;
	Pdc *p_pdc = NULL;
  401130:	2300      	movs	r3, #0
  401132:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	pdc_packet_t packet;
	serial_out_pk_t *out_data = NULL;
  401136:	2300      	movs	r3, #0
  401138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	
	xConfigTimer = xTimerCreate("xConfigTimer", 1000 , pdTRUE, ( void * ) 0, vConfigModeCallback);
  40113c:	4b4b      	ldr	r3, [pc, #300]	; (40126c <wifi_task+0x144>)
  40113e:	9300      	str	r3, [sp, #0]
  401140:	484b      	ldr	r0, [pc, #300]	; (401270 <wifi_task+0x148>)
  401142:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  401146:	2201      	movs	r2, #1
  401148:	2300      	movs	r3, #0
  40114a:	4c4a      	ldr	r4, [pc, #296]	; (401274 <wifi_task+0x14c>)
  40114c:	47a0      	blx	r4
  40114e:	4602      	mov	r2, r0
  401150:	4b49      	ldr	r3, [pc, #292]	; (401278 <wifi_task+0x150>)
  401152:	601a      	str	r2, [r3, #0]
	if(xConfigTimer == NULL ){
  401154:	4b48      	ldr	r3, [pc, #288]	; (401278 <wifi_task+0x150>)
  401156:	681b      	ldr	r3, [r3, #0]
  401158:	2b00      	cmp	r3, #0
  40115a:	d102      	bne.n	401162 <wifi_task+0x3a>
		printf("xConfigTimer create failed.\r\n");
  40115c:	4847      	ldr	r0, [pc, #284]	; (40127c <wifi_task+0x154>)
  40115e:	4b48      	ldr	r3, [pc, #288]	; (401280 <wifi_task+0x158>)
  401160:	4798      	blx	r3
	}
	
	xLedModeTimer = xTimerCreate("xLedTimer", 2500 , pdTRUE, ( void * ) 0, vLedModeCallback);
  401162:	4b48      	ldr	r3, [pc, #288]	; (401284 <wifi_task+0x15c>)
  401164:	9300      	str	r3, [sp, #0]
  401166:	4848      	ldr	r0, [pc, #288]	; (401288 <wifi_task+0x160>)
  401168:	f640 11c4 	movw	r1, #2500	; 0x9c4
  40116c:	2201      	movs	r2, #1
  40116e:	2300      	movs	r3, #0
  401170:	4c40      	ldr	r4, [pc, #256]	; (401274 <wifi_task+0x14c>)
  401172:	47a0      	blx	r4
  401174:	4602      	mov	r2, r0
  401176:	4b45      	ldr	r3, [pc, #276]	; (40128c <wifi_task+0x164>)
  401178:	601a      	str	r2, [r3, #0]
	if(xLedModeTimer != NULL ){
  40117a:	4b44      	ldr	r3, [pc, #272]	; (40128c <wifi_task+0x164>)
  40117c:	681b      	ldr	r3, [r3, #0]
  40117e:	2b00      	cmp	r3, #0
  401180:	d00c      	beq.n	40119c <wifi_task+0x74>
		xTimerStart(xLedModeTimer, 0 );
  401182:	4b42      	ldr	r3, [pc, #264]	; (40128c <wifi_task+0x164>)
  401184:	681c      	ldr	r4, [r3, #0]
  401186:	4b42      	ldr	r3, [pc, #264]	; (401290 <wifi_task+0x168>)
  401188:	4798      	blx	r3
  40118a:	4602      	mov	r2, r0
  40118c:	2300      	movs	r3, #0
  40118e:	9300      	str	r3, [sp, #0]
  401190:	4620      	mov	r0, r4
  401192:	2100      	movs	r1, #0
  401194:	2300      	movs	r3, #0
  401196:	4c3f      	ldr	r4, [pc, #252]	; (401294 <wifi_task+0x16c>)
  401198:	47a0      	blx	r4
  40119a:	e002      	b.n	4011a2 <wifi_task+0x7a>
	}
	else{
		printf("xLedModeTimer create failed.\r\n");
  40119c:	483e      	ldr	r0, [pc, #248]	; (401298 <wifi_task+0x170>)
  40119e:	4b38      	ldr	r3, [pc, #224]	; (401280 <wifi_task+0x158>)
  4011a0:	4798      	blx	r3
	}

	printf("serial_out task started\r\n");
  4011a2:	483e      	ldr	r0, [pc, #248]	; (40129c <wifi_task+0x174>)
  4011a4:	4b36      	ldr	r3, [pc, #216]	; (401280 <wifi_task+0x158>)
  4011a6:	4798      	blx	r3
	

	serial_in_queue = xQueueCreate(SERIAL_IN_QUEUE_LEN, sizeof(void *));
  4011a8:	2001      	movs	r0, #1
  4011aa:	2104      	movs	r1, #4
  4011ac:	2200      	movs	r2, #0
  4011ae:	4b3c      	ldr	r3, [pc, #240]	; (4012a0 <wifi_task+0x178>)
  4011b0:	4798      	blx	r3
  4011b2:	4602      	mov	r2, r0
  4011b4:	4b3b      	ldr	r3, [pc, #236]	; (4012a4 <wifi_task+0x17c>)
  4011b6:	601a      	str	r2, [r3, #0]
	if(serial_in_queue == NULL) {
  4011b8:	4b3a      	ldr	r3, [pc, #232]	; (4012a4 <wifi_task+0x17c>)
  4011ba:	681b      	ldr	r3, [r3, #0]
  4011bc:	2b00      	cmp	r3, #0
  4011be:	d102      	bne.n	4011c6 <wifi_task+0x9e>
		printf("Serial Queue In create failed\r\n");
  4011c0:	4839      	ldr	r0, [pc, #228]	; (4012a8 <wifi_task+0x180>)
  4011c2:	4b2f      	ldr	r3, [pc, #188]	; (401280 <wifi_task+0x158>)
  4011c4:	4798      	blx	r3
		//while(true);
	}
	serial_out_queue = xQueueCreate(SERIAL_OUT_QUEUE_LEN, sizeof(void *));
  4011c6:	2001      	movs	r0, #1
  4011c8:	2104      	movs	r1, #4
  4011ca:	2200      	movs	r2, #0
  4011cc:	4b34      	ldr	r3, [pc, #208]	; (4012a0 <wifi_task+0x178>)
  4011ce:	4798      	blx	r3
  4011d0:	4602      	mov	r2, r0
  4011d2:	4b36      	ldr	r3, [pc, #216]	; (4012ac <wifi_task+0x184>)
  4011d4:	601a      	str	r2, [r3, #0]
	if(serial_out_queue == NULL) {
  4011d6:	4b35      	ldr	r3, [pc, #212]	; (4012ac <wifi_task+0x184>)
  4011d8:	681b      	ldr	r3, [r3, #0]
  4011da:	2b00      	cmp	r3, #0
  4011dc:	d102      	bne.n	4011e4 <wifi_task+0xbc>
		printf("Serial Queue Out create failed\r\n");
  4011de:	4834      	ldr	r0, [pc, #208]	; (4012b0 <wifi_task+0x188>)
  4011e0:	4b27      	ldr	r3, [pc, #156]	; (401280 <wifi_task+0x158>)
  4011e2:	4798      	blx	r3
		//while(true);
	}
	
	xTaskCreate(wifi_in, "wifi_in", WIFI_RECV_TASK_STACK_SIZE, NULL, WIFI_RECV_TASK_PRIORITY, NULL);
  4011e4:	2305      	movs	r3, #5
  4011e6:	9300      	str	r3, [sp, #0]
  4011e8:	2300      	movs	r3, #0
  4011ea:	9301      	str	r3, [sp, #4]
  4011ec:	2300      	movs	r3, #0
  4011ee:	9302      	str	r3, [sp, #8]
  4011f0:	2300      	movs	r3, #0
  4011f2:	9303      	str	r3, [sp, #12]
  4011f4:	482f      	ldr	r0, [pc, #188]	; (4012b4 <wifi_task+0x18c>)
  4011f6:	4930      	ldr	r1, [pc, #192]	; (4012b8 <wifi_task+0x190>)
  4011f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4011fc:	2300      	movs	r3, #0
  4011fe:	4c2f      	ldr	r4, [pc, #188]	; (4012bc <wifi_task+0x194>)
  401200:	47a0      	blx	r4

	for(;;) {

		p_pdc = usart_get_pdc_base(WIFI_SERIAL_PORT);
  401202:	482f      	ldr	r0, [pc, #188]	; (4012c0 <wifi_task+0x198>)
  401204:	4b2f      	ldr	r3, [pc, #188]	; (4012c4 <wifi_task+0x19c>)
  401206:	4798      	blx	r3
  401208:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		
		/* Pended here if no message received */
		xQueueReceive(serial_out_queue, &out_data, portMAX_DELAY);
  40120c:	4b27      	ldr	r3, [pc, #156]	; (4012ac <wifi_task+0x184>)
  40120e:	681a      	ldr	r2, [r3, #0]
  401210:	f107 0388 	add.w	r3, r7, #136	; 0x88
  401214:	4610      	mov	r0, r2
  401216:	4619      	mov	r1, r3
  401218:	f04f 32ff 	mov.w	r2, #4294967295
  40121c:	2300      	movs	r3, #0
  40121e:	4c2a      	ldr	r4, [pc, #168]	; (4012c8 <wifi_task+0x1a0>)
  401220:	47a0      	blx	r4
		
		uint8_t rbuf[128];
		//byte2hexstrstr(out_data->buf, out_data->len, rbuf, 128);
		printf("Serial OUT(%d)\r\n", out_data->len);
  401222:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  401226:	685b      	ldr	r3, [r3, #4]
  401228:	4828      	ldr	r0, [pc, #160]	; (4012cc <wifi_task+0x1a4>)
  40122a:	4619      	mov	r1, r3
  40122c:	4b14      	ldr	r3, [pc, #80]	; (401280 <wifi_task+0x158>)
  40122e:	4798      	blx	r3

		packet.ul_addr = (uint32_t)out_data->buf;
  401230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  401234:	681b      	ldr	r3, [r3, #0]
  401236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		packet.ul_size = out_data->len;
  40123a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  40123e:	685b      	ldr	r3, [r3, #4]
  401240:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		
		pdc_tx_init(p_pdc, &packet, NULL);
  401244:	f107 038c 	add.w	r3, r7, #140	; 0x8c
  401248:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
  40124c:	4619      	mov	r1, r3
  40124e:	2200      	movs	r2, #0
  401250:	4b1f      	ldr	r3, [pc, #124]	; (4012d0 <wifi_task+0x1a8>)
  401252:	4798      	blx	r3
		pdc_enable_transfer(p_pdc, PERIPH_PTCR_TXTEN);
  401254:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
  401258:	f44f 7180 	mov.w	r1, #256	; 0x100
  40125c:	4b1d      	ldr	r3, [pc, #116]	; (4012d4 <wifi_task+0x1ac>)
  40125e:	4798      	blx	r3
		usart_enable_interrupt(WIFI_SERIAL_PORT, US_IER_ENDTX);
  401260:	4817      	ldr	r0, [pc, #92]	; (4012c0 <wifi_task+0x198>)
  401262:	2110      	movs	r1, #16
  401264:	4b1c      	ldr	r3, [pc, #112]	; (4012d8 <wifi_task+0x1b0>)
  401266:	4798      	blx	r3

	}
  401268:	e7cb      	b.n	401202 <wifi_task+0xda>
  40126a:	bf00      	nop
  40126c:	00400ff1 	.word	0x00400ff1
  401270:	0040d000 	.word	0x0040d000
  401274:	004031c9 	.word	0x004031c9
  401278:	20000a28 	.word	0x20000a28
  40127c:	0040d010 	.word	0x0040d010
  401280:	0040a111 	.word	0x0040a111
  401284:	00400f59 	.word	0x00400f59
  401288:	0040d030 	.word	0x0040d030
  40128c:	20000a2c 	.word	0x20000a2c
  401290:	004026dd 	.word	0x004026dd
  401294:	00403249 	.word	0x00403249
  401298:	0040d03c 	.word	0x0040d03c
  40129c:	0040d05c 	.word	0x0040d05c
  4012a0:	00401c0d 	.word	0x00401c0d
  4012a4:	20000a20 	.word	0x20000a20
  4012a8:	0040d078 	.word	0x0040d078
  4012ac:	20000a24 	.word	0x20000a24
  4012b0:	0040d098 	.word	0x0040d098
  4012b4:	00400ef9 	.word	0x00400ef9
  4012b8:	0040d0bc 	.word	0x0040d0bc
  4012bc:	00402351 	.word	0x00402351
  4012c0:	4000c200 	.word	0x4000c200
  4012c4:	00408a49 	.word	0x00408a49
  4012c8:	00401ee9 	.word	0x00401ee9
  4012cc:	0040d0c4 	.word	0x0040d0c4
  4012d0:	004013e9 	.word	0x004013e9
  4012d4:	0040142d 	.word	0x0040142d
  4012d8:	00408925 	.word	0x00408925

004012dc <vFNBtton_Click_Hook>:
}

void vFNBtton_Click_Hook( void )
{
  4012dc:	b5b0      	push	{r4, r5, r7, lr}
  4012de:	b084      	sub	sp, #16
  4012e0:	af02      	add	r7, sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
  4012e2:	2300      	movs	r3, #0
  4012e4:	607b      	str	r3, [r7, #4]
	
	xTimerStartFromISR(xConfigTimer, &xHigherPriorityTaskWoken );
  4012e6:	4b0a      	ldr	r3, [pc, #40]	; (401310 <vFNBtton_Click_Hook+0x34>)
  4012e8:	681d      	ldr	r5, [r3, #0]
  4012ea:	4b0a      	ldr	r3, [pc, #40]	; (401314 <vFNBtton_Click_Hook+0x38>)
  4012ec:	4798      	blx	r3
  4012ee:	4602      	mov	r2, r0
  4012f0:	1d3c      	adds	r4, r7, #4
  4012f2:	2300      	movs	r3, #0
  4012f4:	9300      	str	r3, [sp, #0]
  4012f6:	4628      	mov	r0, r5
  4012f8:	2100      	movs	r1, #0
  4012fa:	4623      	mov	r3, r4
  4012fc:	4c06      	ldr	r4, [pc, #24]	; (401318 <vFNBtton_Click_Hook+0x3c>)
  4012fe:	47a0      	blx	r4
	if(xHigherPriorityTaskWoken != pdFALSE) {
  401300:	687b      	ldr	r3, [r7, #4]
  401302:	2b00      	cmp	r3, #0
  401304:	d001      	beq.n	40130a <vFNBtton_Click_Hook+0x2e>
		vPortYieldFromISR();
  401306:	4b05      	ldr	r3, [pc, #20]	; (40131c <vFNBtton_Click_Hook+0x40>)
  401308:	4798      	blx	r3
	}
	
  40130a:	3708      	adds	r7, #8
  40130c:	46bd      	mov	sp, r7
  40130e:	bdb0      	pop	{r4, r5, r7, pc}
  401310:	20000a28 	.word	0x20000a28
  401314:	00402709 	.word	0x00402709
  401318:	00403249 	.word	0x00403249
  40131c:	00401765 	.word	0x00401765

00401320 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401320:	b580      	push	{r7, lr}
  401322:	b086      	sub	sp, #24
  401324:	af00      	add	r7, sp, #0
  401326:	60f8      	str	r0, [r7, #12]
  401328:	60b9      	str	r1, [r7, #8]
  40132a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40132c:	2300      	movs	r3, #0
  40132e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  401330:	68fb      	ldr	r3, [r7, #12]
  401332:	2b00      	cmp	r3, #0
  401334:	d002      	beq.n	40133c <_read+0x1c>
		return -1;
  401336:	f04f 33ff 	mov.w	r3, #4294967295
  40133a:	e014      	b.n	401366 <_read+0x46>
	}

	for (; len > 0; --len) {
  40133c:	e00f      	b.n	40135e <_read+0x3e>
		ptr_get(stdio_base, ptr);
  40133e:	4b0c      	ldr	r3, [pc, #48]	; (401370 <_read+0x50>)
  401340:	681b      	ldr	r3, [r3, #0]
  401342:	4a0c      	ldr	r2, [pc, #48]	; (401374 <_read+0x54>)
  401344:	6812      	ldr	r2, [r2, #0]
  401346:	4610      	mov	r0, r2
  401348:	68b9      	ldr	r1, [r7, #8]
  40134a:	4798      	blx	r3
		ptr++;
  40134c:	68bb      	ldr	r3, [r7, #8]
  40134e:	3301      	adds	r3, #1
  401350:	60bb      	str	r3, [r7, #8]
		nChars++;
  401352:	697b      	ldr	r3, [r7, #20]
  401354:	3301      	adds	r3, #1
  401356:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  401358:	687b      	ldr	r3, [r7, #4]
  40135a:	3b01      	subs	r3, #1
  40135c:	607b      	str	r3, [r7, #4]
  40135e:	687b      	ldr	r3, [r7, #4]
  401360:	2b00      	cmp	r3, #0
  401362:	dcec      	bgt.n	40133e <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  401364:	697b      	ldr	r3, [r7, #20]
}
  401366:	4618      	mov	r0, r3
  401368:	3718      	adds	r7, #24
  40136a:	46bd      	mov	sp, r7
  40136c:	bd80      	pop	{r7, pc}
  40136e:	bf00      	nop
  401370:	20019f84 	.word	0x20019f84
  401374:	20019f8c 	.word	0x20019f8c

00401378 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  401378:	b580      	push	{r7, lr}
  40137a:	b086      	sub	sp, #24
  40137c:	af00      	add	r7, sp, #0
  40137e:	60f8      	str	r0, [r7, #12]
  401380:	60b9      	str	r1, [r7, #8]
  401382:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  401384:	2300      	movs	r3, #0
  401386:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  401388:	68fb      	ldr	r3, [r7, #12]
  40138a:	2b01      	cmp	r3, #1
  40138c:	d008      	beq.n	4013a0 <_write+0x28>
  40138e:	68fb      	ldr	r3, [r7, #12]
  401390:	2b02      	cmp	r3, #2
  401392:	d005      	beq.n	4013a0 <_write+0x28>
  401394:	68fb      	ldr	r3, [r7, #12]
  401396:	2b03      	cmp	r3, #3
  401398:	d002      	beq.n	4013a0 <_write+0x28>
		return -1;
  40139a:	f04f 33ff 	mov.w	r3, #4294967295
  40139e:	e01a      	b.n	4013d6 <_write+0x5e>
	}

	for (; len != 0; --len) {
  4013a0:	e015      	b.n	4013ce <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4013a2:	4b0f      	ldr	r3, [pc, #60]	; (4013e0 <_write+0x68>)
  4013a4:	681a      	ldr	r2, [r3, #0]
  4013a6:	4b0f      	ldr	r3, [pc, #60]	; (4013e4 <_write+0x6c>)
  4013a8:	6818      	ldr	r0, [r3, #0]
  4013aa:	68bb      	ldr	r3, [r7, #8]
  4013ac:	1c59      	adds	r1, r3, #1
  4013ae:	60b9      	str	r1, [r7, #8]
  4013b0:	781b      	ldrb	r3, [r3, #0]
  4013b2:	4619      	mov	r1, r3
  4013b4:	4790      	blx	r2
  4013b6:	4603      	mov	r3, r0
  4013b8:	2b00      	cmp	r3, #0
  4013ba:	da02      	bge.n	4013c2 <_write+0x4a>
			return -1;
  4013bc:	f04f 33ff 	mov.w	r3, #4294967295
  4013c0:	e009      	b.n	4013d6 <_write+0x5e>
		}
		++nChars;
  4013c2:	697b      	ldr	r3, [r7, #20]
  4013c4:	3301      	adds	r3, #1
  4013c6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4013c8:	687b      	ldr	r3, [r7, #4]
  4013ca:	3b01      	subs	r3, #1
  4013cc:	607b      	str	r3, [r7, #4]
  4013ce:	687b      	ldr	r3, [r7, #4]
  4013d0:	2b00      	cmp	r3, #0
  4013d2:	d1e6      	bne.n	4013a2 <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4013d4:	697b      	ldr	r3, [r7, #20]
}
  4013d6:	4618      	mov	r0, r3
  4013d8:	3718      	adds	r7, #24
  4013da:	46bd      	mov	sp, r7
  4013dc:	bd80      	pop	{r7, pc}
  4013de:	bf00      	nop
  4013e0:	20019f88 	.word	0x20019f88
  4013e4:	20019f8c 	.word	0x20019f8c

004013e8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4013e8:	b480      	push	{r7}
  4013ea:	b085      	sub	sp, #20
  4013ec:	af00      	add	r7, sp, #0
  4013ee:	60f8      	str	r0, [r7, #12]
  4013f0:	60b9      	str	r1, [r7, #8]
  4013f2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4013f4:	68bb      	ldr	r3, [r7, #8]
  4013f6:	2b00      	cmp	r3, #0
  4013f8:	d007      	beq.n	40140a <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  4013fa:	68bb      	ldr	r3, [r7, #8]
  4013fc:	681a      	ldr	r2, [r3, #0]
  4013fe:	68fb      	ldr	r3, [r7, #12]
  401400:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  401402:	68bb      	ldr	r3, [r7, #8]
  401404:	685a      	ldr	r2, [r3, #4]
  401406:	68fb      	ldr	r3, [r7, #12]
  401408:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  40140a:	687b      	ldr	r3, [r7, #4]
  40140c:	2b00      	cmp	r3, #0
  40140e:	d007      	beq.n	401420 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  401410:	687b      	ldr	r3, [r7, #4]
  401412:	681a      	ldr	r2, [r3, #0]
  401414:	68fb      	ldr	r3, [r7, #12]
  401416:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  401418:	687b      	ldr	r3, [r7, #4]
  40141a:	685a      	ldr	r2, [r3, #4]
  40141c:	68fb      	ldr	r3, [r7, #12]
  40141e:	61da      	str	r2, [r3, #28]
	}
}
  401420:	3714      	adds	r7, #20
  401422:	46bd      	mov	sp, r7
  401424:	f85d 7b04 	ldr.w	r7, [sp], #4
  401428:	4770      	bx	lr
  40142a:	bf00      	nop

0040142c <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  40142c:	b480      	push	{r7}
  40142e:	b083      	sub	sp, #12
  401430:	af00      	add	r7, sp, #0
  401432:	6078      	str	r0, [r7, #4]
  401434:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  401436:	683a      	ldr	r2, [r7, #0]
  401438:	f240 1301 	movw	r3, #257	; 0x101
  40143c:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  40143e:	687a      	ldr	r2, [r7, #4]
  401440:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  401442:	370c      	adds	r7, #12
  401444:	46bd      	mov	sp, r7
  401446:	f85d 7b04 	ldr.w	r7, [sp], #4
  40144a:	4770      	bx	lr

0040144c <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  40144c:	b480      	push	{r7}
  40144e:	b083      	sub	sp, #12
  401450:	af00      	add	r7, sp, #0
  401452:	6078      	str	r0, [r7, #4]
  401454:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  401456:	683a      	ldr	r2, [r7, #0]
  401458:	f240 2302 	movw	r3, #514	; 0x202
  40145c:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  40145e:	687a      	ldr	r2, [r7, #4]
  401460:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  401462:	370c      	adds	r7, #12
  401464:	46bd      	mov	sp, r7
  401466:	f85d 7b04 	ldr.w	r7, [sp], #4
  40146a:	4770      	bx	lr

0040146c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  40146c:	b480      	push	{r7}
  40146e:	b083      	sub	sp, #12
  401470:	af00      	add	r7, sp, #0
  401472:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  401474:	687b      	ldr	r3, [r7, #4]
  401476:	f103 0208 	add.w	r2, r3, #8
  40147a:	687b      	ldr	r3, [r7, #4]
  40147c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40147e:	687b      	ldr	r3, [r7, #4]
  401480:	f04f 32ff 	mov.w	r2, #4294967295
  401484:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  401486:	687b      	ldr	r3, [r7, #4]
  401488:	f103 0208 	add.w	r2, r3, #8
  40148c:	687b      	ldr	r3, [r7, #4]
  40148e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  401490:	687b      	ldr	r3, [r7, #4]
  401492:	f103 0208 	add.w	r2, r3, #8
  401496:	687b      	ldr	r3, [r7, #4]
  401498:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  40149a:	687b      	ldr	r3, [r7, #4]
  40149c:	2200      	movs	r2, #0
  40149e:	601a      	str	r2, [r3, #0]
}
  4014a0:	370c      	adds	r7, #12
  4014a2:	46bd      	mov	sp, r7
  4014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014a8:	4770      	bx	lr
  4014aa:	bf00      	nop

004014ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  4014ac:	b480      	push	{r7}
  4014ae:	b083      	sub	sp, #12
  4014b0:	af00      	add	r7, sp, #0
  4014b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4014b4:	687b      	ldr	r3, [r7, #4]
  4014b6:	2200      	movs	r2, #0
  4014b8:	611a      	str	r2, [r3, #16]
}
  4014ba:	370c      	adds	r7, #12
  4014bc:	46bd      	mov	sp, r7
  4014be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014c2:	4770      	bx	lr

004014c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  4014c4:	b480      	push	{r7}
  4014c6:	b085      	sub	sp, #20
  4014c8:	af00      	add	r7, sp, #0
  4014ca:	6078      	str	r0, [r7, #4]
  4014cc:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  4014ce:	687b      	ldr	r3, [r7, #4]
  4014d0:	685b      	ldr	r3, [r3, #4]
  4014d2:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  4014d4:	68fb      	ldr	r3, [r7, #12]
  4014d6:	685a      	ldr	r2, [r3, #4]
  4014d8:	683b      	ldr	r3, [r7, #0]
  4014da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  4014dc:	687b      	ldr	r3, [r7, #4]
  4014de:	685a      	ldr	r2, [r3, #4]
  4014e0:	683b      	ldr	r3, [r7, #0]
  4014e2:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4014e4:	68fb      	ldr	r3, [r7, #12]
  4014e6:	685b      	ldr	r3, [r3, #4]
  4014e8:	683a      	ldr	r2, [r7, #0]
  4014ea:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  4014ec:	68fb      	ldr	r3, [r7, #12]
  4014ee:	683a      	ldr	r2, [r7, #0]
  4014f0:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4014f2:	687b      	ldr	r3, [r7, #4]
  4014f4:	683a      	ldr	r2, [r7, #0]
  4014f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4014f8:	683b      	ldr	r3, [r7, #0]
  4014fa:	687a      	ldr	r2, [r7, #4]
  4014fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4014fe:	687b      	ldr	r3, [r7, #4]
  401500:	681b      	ldr	r3, [r3, #0]
  401502:	1c5a      	adds	r2, r3, #1
  401504:	687b      	ldr	r3, [r7, #4]
  401506:	601a      	str	r2, [r3, #0]
}
  401508:	3714      	adds	r7, #20
  40150a:	46bd      	mov	sp, r7
  40150c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401510:	4770      	bx	lr
  401512:	bf00      	nop

00401514 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  401514:	b480      	push	{r7}
  401516:	b085      	sub	sp, #20
  401518:	af00      	add	r7, sp, #0
  40151a:	6078      	str	r0, [r7, #4]
  40151c:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  40151e:	683b      	ldr	r3, [r7, #0]
  401520:	681b      	ldr	r3, [r3, #0]
  401522:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401524:	68bb      	ldr	r3, [r7, #8]
  401526:	f1b3 3fff 	cmp.w	r3, #4294967295
  40152a:	d103      	bne.n	401534 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  40152c:	687b      	ldr	r3, [r7, #4]
  40152e:	691b      	ldr	r3, [r3, #16]
  401530:	60fb      	str	r3, [r7, #12]
  401532:	e00c      	b.n	40154e <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  401534:	687b      	ldr	r3, [r7, #4]
  401536:	3308      	adds	r3, #8
  401538:	60fb      	str	r3, [r7, #12]
  40153a:	e002      	b.n	401542 <vListInsert+0x2e>
  40153c:	68fb      	ldr	r3, [r7, #12]
  40153e:	685b      	ldr	r3, [r3, #4]
  401540:	60fb      	str	r3, [r7, #12]
  401542:	68fb      	ldr	r3, [r7, #12]
  401544:	685b      	ldr	r3, [r3, #4]
  401546:	681a      	ldr	r2, [r3, #0]
  401548:	68bb      	ldr	r3, [r7, #8]
  40154a:	429a      	cmp	r2, r3
  40154c:	d9f6      	bls.n	40153c <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40154e:	68fb      	ldr	r3, [r7, #12]
  401550:	685a      	ldr	r2, [r3, #4]
  401552:	683b      	ldr	r3, [r7, #0]
  401554:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  401556:	683b      	ldr	r3, [r7, #0]
  401558:	685b      	ldr	r3, [r3, #4]
  40155a:	683a      	ldr	r2, [r7, #0]
  40155c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40155e:	683b      	ldr	r3, [r7, #0]
  401560:	68fa      	ldr	r2, [r7, #12]
  401562:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  401564:	68fb      	ldr	r3, [r7, #12]
  401566:	683a      	ldr	r2, [r7, #0]
  401568:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40156a:	683b      	ldr	r3, [r7, #0]
  40156c:	687a      	ldr	r2, [r7, #4]
  40156e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  401570:	687b      	ldr	r3, [r7, #4]
  401572:	681b      	ldr	r3, [r3, #0]
  401574:	1c5a      	adds	r2, r3, #1
  401576:	687b      	ldr	r3, [r7, #4]
  401578:	601a      	str	r2, [r3, #0]
}
  40157a:	3714      	adds	r7, #20
  40157c:	46bd      	mov	sp, r7
  40157e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401582:	4770      	bx	lr

00401584 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  401584:	b480      	push	{r7}
  401586:	b085      	sub	sp, #20
  401588:	af00      	add	r7, sp, #0
  40158a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40158c:	687b      	ldr	r3, [r7, #4]
  40158e:	685b      	ldr	r3, [r3, #4]
  401590:	687a      	ldr	r2, [r7, #4]
  401592:	6892      	ldr	r2, [r2, #8]
  401594:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401596:	687b      	ldr	r3, [r7, #4]
  401598:	689b      	ldr	r3, [r3, #8]
  40159a:	687a      	ldr	r2, [r7, #4]
  40159c:	6852      	ldr	r2, [r2, #4]
  40159e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  4015a0:	687b      	ldr	r3, [r7, #4]
  4015a2:	691b      	ldr	r3, [r3, #16]
  4015a4:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4015a6:	68fb      	ldr	r3, [r7, #12]
  4015a8:	685a      	ldr	r2, [r3, #4]
  4015aa:	687b      	ldr	r3, [r7, #4]
  4015ac:	429a      	cmp	r2, r3
  4015ae:	d103      	bne.n	4015b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4015b0:	687b      	ldr	r3, [r7, #4]
  4015b2:	689a      	ldr	r2, [r3, #8]
  4015b4:	68fb      	ldr	r3, [r7, #12]
  4015b6:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  4015b8:	687b      	ldr	r3, [r7, #4]
  4015ba:	2200      	movs	r2, #0
  4015bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  4015be:	68fb      	ldr	r3, [r7, #12]
  4015c0:	681b      	ldr	r3, [r3, #0]
  4015c2:	1e5a      	subs	r2, r3, #1
  4015c4:	68fb      	ldr	r3, [r7, #12]
  4015c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4015c8:	68fb      	ldr	r3, [r7, #12]
  4015ca:	681b      	ldr	r3, [r3, #0]
}
  4015cc:	4618      	mov	r0, r3
  4015ce:	3714      	adds	r7, #20
  4015d0:	46bd      	mov	sp, r7
  4015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015d6:	4770      	bx	lr

004015d8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4015d8:	b480      	push	{r7}
  4015da:	b083      	sub	sp, #12
  4015dc:	af00      	add	r7, sp, #0
  4015de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4015e0:	687b      	ldr	r3, [r7, #4]
  4015e2:	2b07      	cmp	r3, #7
  4015e4:	d825      	bhi.n	401632 <osc_get_rate+0x5a>
  4015e6:	a201      	add	r2, pc, #4	; (adr r2, 4015ec <osc_get_rate+0x14>)
  4015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4015ec:	0040160d 	.word	0x0040160d
  4015f0:	00401613 	.word	0x00401613
  4015f4:	00401619 	.word	0x00401619
  4015f8:	0040161f 	.word	0x0040161f
  4015fc:	00401623 	.word	0x00401623
  401600:	00401627 	.word	0x00401627
  401604:	0040162b 	.word	0x0040162b
  401608:	0040162f 	.word	0x0040162f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40160c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401610:	e010      	b.n	401634 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401616:	e00d      	b.n	401634 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40161c:	e00a      	b.n	401634 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40161e:	4b08      	ldr	r3, [pc, #32]	; (401640 <osc_get_rate+0x68>)
  401620:	e008      	b.n	401634 <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  401622:	4b08      	ldr	r3, [pc, #32]	; (401644 <osc_get_rate+0x6c>)
  401624:	e006      	b.n	401634 <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  401626:	4b08      	ldr	r3, [pc, #32]	; (401648 <osc_get_rate+0x70>)
  401628:	e004      	b.n	401634 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40162a:	2300      	movs	r3, #0
  40162c:	e002      	b.n	401634 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40162e:	2300      	movs	r3, #0
  401630:	e000      	b.n	401634 <osc_get_rate+0x5c>
#endif
	}

	return 0;
  401632:	2300      	movs	r3, #0
}
  401634:	4618      	mov	r0, r3
  401636:	370c      	adds	r7, #12
  401638:	46bd      	mov	sp, r7
  40163a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40163e:	4770      	bx	lr
  401640:	007a1200 	.word	0x007a1200
  401644:	00f42400 	.word	0x00f42400
  401648:	016e3600 	.word	0x016e3600

0040164c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40164c:	b580      	push	{r7, lr}
  40164e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401650:	2001      	movs	r0, #1
  401652:	4b04      	ldr	r3, [pc, #16]	; (401664 <sysclk_get_main_hz+0x18>)
  401654:	4798      	blx	r3
  401656:	4602      	mov	r2, r0
  401658:	f640 3372 	movw	r3, #2930	; 0xb72
  40165c:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401660:	4618      	mov	r0, r3
  401662:	bd80      	pop	{r7, pc}
  401664:	004015d9 	.word	0x004015d9

00401668 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401668:	b580      	push	{r7, lr}
  40166a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40166c:	4b02      	ldr	r3, [pc, #8]	; (401678 <sysclk_get_cpu_hz+0x10>)
  40166e:	4798      	blx	r3
  401670:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401672:	4618      	mov	r0, r3
  401674:	bd80      	pop	{r7, pc}
  401676:	bf00      	nop
  401678:	0040164d 	.word	0x0040164d

0040167c <pxPortInitialiseStack>:
/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters )
{
  40167c:	b480      	push	{r7}
  40167e:	b085      	sub	sp, #20
  401680:	af00      	add	r7, sp, #0
  401682:	60f8      	str	r0, [r7, #12]
  401684:	60b9      	str	r1, [r7, #8]
  401686:	607a      	str	r2, [r7, #4]
	* interrupt. */

	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;
  401688:	68fb      	ldr	r3, [r7, #12]
  40168a:	3b04      	subs	r3, #4
  40168c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  40168e:	68fb      	ldr	r3, [r7, #12]
  401690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  401694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  401696:	68fb      	ldr	r3, [r7, #12]
  401698:	3b04      	subs	r3, #4
  40169a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  40169c:	68ba      	ldr	r2, [r7, #8]
  40169e:	68fb      	ldr	r3, [r7, #12]
  4016a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  4016a2:	68fb      	ldr	r3, [r7, #12]
  4016a4:	3b04      	subs	r3, #4
  4016a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;    /* LR */
  4016a8:	68fb      	ldr	r3, [r7, #12]
  4016aa:	2200      	movs	r2, #0
  4016ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
  4016ae:	68fb      	ldr	r3, [r7, #12]
  4016b0:	3b14      	subs	r3, #20
  4016b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  4016b4:	687a      	ldr	r2, [r7, #4]
  4016b6:	68fb      	ldr	r3, [r7, #12]
  4016b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
  4016ba:	68fb      	ldr	r3, [r7, #12]
  4016bc:	3b04      	subs	r3, #4
  4016be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4016c0:	68fb      	ldr	r3, [r7, #12]
  4016c2:	f06f 0202 	mvn.w	r2, #2
  4016c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  4016c8:	68fb      	ldr	r3, [r7, #12]
  4016ca:	3b20      	subs	r3, #32
  4016cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  4016ce:	68fb      	ldr	r3, [r7, #12]
}
  4016d0:	4618      	mov	r0, r3
  4016d2:	3714      	adds	r7, #20
  4016d4:	46bd      	mov	sp, r7
  4016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016da:	4770      	bx	lr

004016dc <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  4016dc:	4b05      	ldr	r3, [pc, #20]	; (4016f4 <pxCurrentTCBConst2>)
  4016de:	6819      	ldr	r1, [r3, #0]
  4016e0:	6808      	ldr	r0, [r1, #0]
  4016e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016e6:	f380 8809 	msr	PSP, r0
  4016ea:	f04f 0000 	mov.w	r0, #0
  4016ee:	f380 8811 	msr	BASEPRI, r0
  4016f2:	4770      	bx	lr

004016f4 <pxCurrentTCBConst2>:
  4016f4:	20019294 	.word	0x20019294

004016f8 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  4016f8:	4803      	ldr	r0, [pc, #12]	; (401708 <prvPortStartFirstTask+0x10>)
  4016fa:	6800      	ldr	r0, [r0, #0]
  4016fc:	6800      	ldr	r0, [r0, #0]
  4016fe:	f380 8808 	msr	MSP, r0
  401702:	b662      	cpsie	i
  401704:	df00      	svc	0
  401706:	bf00      	nop
  401708:	e000ed08 	.word	0xe000ed08

0040170c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  40170c:	b580      	push	{r7, lr}
  40170e:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401710:	4a0e      	ldr	r2, [pc, #56]	; (40174c <xPortStartScheduler+0x40>)
  401712:	4b0e      	ldr	r3, [pc, #56]	; (40174c <xPortStartScheduler+0x40>)
  401714:	681b      	ldr	r3, [r3, #0]
  401716:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40171a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40171c:	4a0b      	ldr	r2, [pc, #44]	; (40174c <xPortStartScheduler+0x40>)
  40171e:	4b0b      	ldr	r3, [pc, #44]	; (40174c <xPortStartScheduler+0x40>)
  401720:	681b      	ldr	r3, [r3, #0]
  401722:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  401726:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  401728:	4b09      	ldr	r3, [pc, #36]	; (401750 <xPortStartScheduler+0x44>)
  40172a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  40172c:	4b09      	ldr	r3, [pc, #36]	; (401754 <xPortStartScheduler+0x48>)
  40172e:	2200      	movs	r2, #0
  401730:	601a      	str	r2, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  401732:	4b09      	ldr	r3, [pc, #36]	; (401758 <xPortStartScheduler+0x4c>)
  401734:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  401736:	4a09      	ldr	r2, [pc, #36]	; (40175c <xPortStartScheduler+0x50>)
  401738:	4b08      	ldr	r3, [pc, #32]	; (40175c <xPortStartScheduler+0x50>)
  40173a:	681b      	ldr	r3, [r3, #0]
  40173c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401740:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  401742:	4b07      	ldr	r3, [pc, #28]	; (401760 <xPortStartScheduler+0x54>)
  401744:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  401746:	2300      	movs	r3, #0
}
  401748:	4618      	mov	r0, r3
  40174a:	bd80      	pop	{r7, pc}
  40174c:	e000ed20 	.word	0xe000ed20
  401750:	00401859 	.word	0x00401859
  401754:	2000011c 	.word	0x2000011c
  401758:	00401889 	.word	0x00401889
  40175c:	e000ef34 	.word	0xe000ef34
  401760:	004016f9 	.word	0x004016f9

00401764 <vPortYieldFromISR>:
}

/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  401764:	b480      	push	{r7}
  401766:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401768:	4b03      	ldr	r3, [pc, #12]	; (401778 <vPortYieldFromISR+0x14>)
  40176a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40176e:	601a      	str	r2, [r3, #0]
}
  401770:	46bd      	mov	sp, r7
  401772:	f85d 7b04 	ldr.w	r7, [sp], #4
  401776:	4770      	bx	lr
  401778:	e000ed04 	.word	0xe000ed04

0040177c <vPortEnterCritical>:

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  40177c:	b580      	push	{r7, lr}
  40177e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  401780:	4b03      	ldr	r3, [pc, #12]	; (401790 <vPortEnterCritical+0x14>)
  401782:	4798      	blx	r3
	uxCriticalNesting++;
  401784:	4b03      	ldr	r3, [pc, #12]	; (401794 <vPortEnterCritical+0x18>)
  401786:	681b      	ldr	r3, [r3, #0]
  401788:	3301      	adds	r3, #1
  40178a:	4a02      	ldr	r2, [pc, #8]	; (401794 <vPortEnterCritical+0x18>)
  40178c:	6013      	str	r3, [r2, #0]
}
  40178e:	bd80      	pop	{r7, pc}
  401790:	004017c1 	.word	0x004017c1
  401794:	2000011c 	.word	0x2000011c

00401798 <vPortExitCritical>:

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  401798:	b580      	push	{r7, lr}
  40179a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  40179c:	4b06      	ldr	r3, [pc, #24]	; (4017b8 <vPortExitCritical+0x20>)
  40179e:	681b      	ldr	r3, [r3, #0]
  4017a0:	3b01      	subs	r3, #1
  4017a2:	4a05      	ldr	r2, [pc, #20]	; (4017b8 <vPortExitCritical+0x20>)
  4017a4:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  4017a6:	4b04      	ldr	r3, [pc, #16]	; (4017b8 <vPortExitCritical+0x20>)
  4017a8:	681b      	ldr	r3, [r3, #0]
  4017aa:	2b00      	cmp	r3, #0
  4017ac:	d102      	bne.n	4017b4 <vPortExitCritical+0x1c>
		portENABLE_INTERRUPTS();
  4017ae:	2000      	movs	r0, #0
  4017b0:	4b02      	ldr	r3, [pc, #8]	; (4017bc <vPortExitCritical+0x24>)
  4017b2:	4798      	blx	r3
	}
}
  4017b4:	bd80      	pop	{r7, pc}
  4017b6:	bf00      	nop
  4017b8:	2000011c 	.word	0x2000011c
  4017bc:	004017d5 	.word	0x004017d5

004017c0 <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  4017c0:	f3ef 8011 	mrs	r0, BASEPRI
  4017c4:	f04f 0150 	mov.w	r1, #80	; 0x50
  4017c8:	f381 8811 	msr	BASEPRI, r1
  4017cc:	4770      	bx	lr
		:: "i" (configMAX_SYSCALL_INTERRUPT_PRIORITY) : "r0", "r1" \
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
  4017ce:	2300      	movs	r3, #0
}
  4017d0:	4618      	mov	r0, r3
  4017d2:	bf00      	nop

004017d4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  4017d4:	f380 8811 	msr	BASEPRI, r0
  4017d8:	4770      	bx	lr
  4017da:	bf00      	nop

004017dc <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  4017dc:	f3ef 8009 	mrs	r0, PSP
  4017e0:	4b11      	ldr	r3, [pc, #68]	; (401828 <pxCurrentTCBConst>)
  4017e2:	681a      	ldr	r2, [r3, #0]
  4017e4:	f01e 0f10 	tst.w	lr, #16
  4017e8:	bf08      	it	eq
  4017ea:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4017ee:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4017f2:	6010      	str	r0, [r2, #0]
  4017f4:	e92d 4008 	stmdb	sp!, {r3, lr}
  4017f8:	f04f 0050 	mov.w	r0, #80	; 0x50
  4017fc:	f380 8811 	msr	BASEPRI, r0
  401800:	f001 f842 	bl	402888 <vTaskSwitchContext>
  401804:	f04f 0000 	mov.w	r0, #0
  401808:	f380 8811 	msr	BASEPRI, r0
  40180c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  401810:	6819      	ldr	r1, [r3, #0]
  401812:	6808      	ldr	r0, [r1, #0]
  401814:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401818:	f01e 0f10 	tst.w	lr, #16
  40181c:	bf08      	it	eq
  40181e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401822:	f380 8809 	msr	PSP, r0
  401826:	4770      	bx	lr

00401828 <pxCurrentTCBConst>:
  401828:	20019294 	.word	0x20019294

0040182c <xPortSysTickHandler>:

void xPortSysTickHandler( void ); /* ATMEL */
/*-----------------------------------------------------------*/
//void SysTick_Handler( void ) /* ATMEL */
void xPortSysTickHandler( void ) /* ATMEL */
{
  40182c:	b580      	push	{r7, lr}
  40182e:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401830:	4b05      	ldr	r3, [pc, #20]	; (401848 <xPortSysTickHandler+0x1c>)
  401832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401836:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  401838:	4b04      	ldr	r3, [pc, #16]	; (40184c <xPortSysTickHandler+0x20>)
  40183a:	4798      	blx	r3
	{
		vTaskIncrementTick();
  40183c:	4b04      	ldr	r3, [pc, #16]	; (401850 <xPortSysTickHandler+0x24>)
  40183e:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  401840:	2000      	movs	r0, #0
  401842:	4b04      	ldr	r3, [pc, #16]	; (401854 <xPortSysTickHandler+0x28>)
  401844:	4798      	blx	r3
}
  401846:	bd80      	pop	{r7, pc}
  401848:	e000ed04 	.word	0xe000ed04
  40184c:	004017c1 	.word	0x004017c1
  401850:	00402739 	.word	0x00402739
  401854:	004017d5 	.word	0x004017d5

00401858 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
  401858:	b598      	push	{r3, r4, r7, lr}
  40185a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
  40185c:	4c06      	ldr	r4, [pc, #24]	; (401878 <vPortSetupTimerInterrupt+0x20>)
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  40185e:	4b07      	ldr	r3, [pc, #28]	; (40187c <vPortSetupTimerInterrupt+0x24>)
  401860:	4798      	blx	r3
  401862:	4602      	mov	r2, r0
  401864:	4b06      	ldr	r3, [pc, #24]	; (401880 <vPortSetupTimerInterrupt+0x28>)
  401866:	fba3 2302 	umull	r2, r3, r3, r2
  40186a:	099b      	lsrs	r3, r3, #6
  40186c:	3b01      	subs	r3, #1
  40186e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  401870:	4b04      	ldr	r3, [pc, #16]	; (401884 <vPortSetupTimerInterrupt+0x2c>)
  401872:	2207      	movs	r2, #7
  401874:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
}
  401876:	bd98      	pop	{r3, r4, r7, pc}
  401878:	e000e014 	.word	0xe000e014
  40187c:	00401669 	.word	0x00401669
  401880:	10624dd3 	.word	0x10624dd3
  401884:	e000e010 	.word	0xe000e010

00401888 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401888:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401898 <vPortEnableVFP+0x10>
  40188c:	6801      	ldr	r1, [r0, #0]
  40188e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401892:	6001      	str	r1, [r0, #0]
  401894:	4770      	bx	lr
  401896:	0000      	.short	0x0000
  401898:	e000ed88 	.word	0xe000ed88

0040189c <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  40189c:	b580      	push	{r7, lr}
  40189e:	b086      	sub	sp, #24
  4018a0:	af00      	add	r7, sp, #0
  4018a2:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  4018a4:	2300      	movs	r3, #0
  4018a6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  4018a8:	4b37      	ldr	r3, [pc, #220]	; (401988 <pvPortMalloc+0xec>)
  4018aa:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  4018ac:	4b37      	ldr	r3, [pc, #220]	; (40198c <pvPortMalloc+0xf0>)
  4018ae:	681b      	ldr	r3, [r3, #0]
  4018b0:	2b00      	cmp	r3, #0
  4018b2:	d101      	bne.n	4018b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  4018b4:	4b36      	ldr	r3, [pc, #216]	; (401990 <pvPortMalloc+0xf4>)
  4018b6:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  4018b8:	687b      	ldr	r3, [r7, #4]
  4018ba:	2b00      	cmp	r3, #0
  4018bc:	d00e      	beq.n	4018dc <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4018be:	2310      	movs	r3, #16
  4018c0:	461a      	mov	r2, r3
  4018c2:	687b      	ldr	r3, [r7, #4]
  4018c4:	4413      	add	r3, r2
  4018c6:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4018c8:	687b      	ldr	r3, [r7, #4]
  4018ca:	f003 0307 	and.w	r3, r3, #7
  4018ce:	2b00      	cmp	r3, #0
  4018d0:	d004      	beq.n	4018dc <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4018d2:	687b      	ldr	r3, [r7, #4]
  4018d4:	f023 0307 	bic.w	r3, r3, #7
  4018d8:	3308      	adds	r3, #8
  4018da:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4018dc:	687b      	ldr	r3, [r7, #4]
  4018de:	2b00      	cmp	r3, #0
  4018e0:	d045      	beq.n	40196e <pvPortMalloc+0xd2>
  4018e2:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  4018e6:	687b      	ldr	r3, [r7, #4]
  4018e8:	4293      	cmp	r3, r2
  4018ea:	d240      	bcs.n	40196e <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  4018ec:	4b29      	ldr	r3, [pc, #164]	; (401994 <pvPortMalloc+0xf8>)
  4018ee:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  4018f0:	4b28      	ldr	r3, [pc, #160]	; (401994 <pvPortMalloc+0xf8>)
  4018f2:	681b      	ldr	r3, [r3, #0]
  4018f4:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4018f6:	e004      	b.n	401902 <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  4018f8:	697b      	ldr	r3, [r7, #20]
  4018fa:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  4018fc:	697b      	ldr	r3, [r7, #20]
  4018fe:	681b      	ldr	r3, [r3, #0]
  401900:	617b      	str	r3, [r7, #20]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  401902:	697b      	ldr	r3, [r7, #20]
  401904:	685a      	ldr	r2, [r3, #4]
  401906:	687b      	ldr	r3, [r7, #4]
  401908:	429a      	cmp	r2, r3
  40190a:	d203      	bcs.n	401914 <pvPortMalloc+0x78>
  40190c:	697b      	ldr	r3, [r7, #20]
  40190e:	681b      	ldr	r3, [r3, #0]
  401910:	2b00      	cmp	r3, #0
  401912:	d1f1      	bne.n	4018f8 <pvPortMalloc+0x5c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  401914:	4b1d      	ldr	r3, [pc, #116]	; (40198c <pvPortMalloc+0xf0>)
  401916:	681b      	ldr	r3, [r3, #0]
  401918:	697a      	ldr	r2, [r7, #20]
  40191a:	429a      	cmp	r2, r3
  40191c:	d027      	beq.n	40196e <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  40191e:	693b      	ldr	r3, [r7, #16]
  401920:	681b      	ldr	r3, [r3, #0]
  401922:	2210      	movs	r2, #16
  401924:	4413      	add	r3, r2
  401926:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  401928:	697b      	ldr	r3, [r7, #20]
  40192a:	681a      	ldr	r2, [r3, #0]
  40192c:	693b      	ldr	r3, [r7, #16]
  40192e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  401930:	697b      	ldr	r3, [r7, #20]
  401932:	685a      	ldr	r2, [r3, #4]
  401934:	687b      	ldr	r3, [r7, #4]
  401936:	1ad3      	subs	r3, r2, r3
  401938:	2210      	movs	r2, #16
  40193a:	0052      	lsls	r2, r2, #1
  40193c:	4293      	cmp	r3, r2
  40193e:	d90f      	bls.n	401960 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  401940:	697a      	ldr	r2, [r7, #20]
  401942:	687b      	ldr	r3, [r7, #4]
  401944:	4413      	add	r3, r2
  401946:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  401948:	697b      	ldr	r3, [r7, #20]
  40194a:	685a      	ldr	r2, [r3, #4]
  40194c:	687b      	ldr	r3, [r7, #4]
  40194e:	1ad2      	subs	r2, r2, r3
  401950:	68bb      	ldr	r3, [r7, #8]
  401952:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  401954:	697b      	ldr	r3, [r7, #20]
  401956:	687a      	ldr	r2, [r7, #4]
  401958:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  40195a:	68b8      	ldr	r0, [r7, #8]
  40195c:	4b0e      	ldr	r3, [pc, #56]	; (401998 <pvPortMalloc+0xfc>)
  40195e:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  401960:	4b0e      	ldr	r3, [pc, #56]	; (40199c <pvPortMalloc+0x100>)
  401962:	681a      	ldr	r2, [r3, #0]
  401964:	697b      	ldr	r3, [r7, #20]
  401966:	685b      	ldr	r3, [r3, #4]
  401968:	1ad3      	subs	r3, r2, r3
  40196a:	4a0c      	ldr	r2, [pc, #48]	; (40199c <pvPortMalloc+0x100>)
  40196c:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  40196e:	4b0c      	ldr	r3, [pc, #48]	; (4019a0 <pvPortMalloc+0x104>)
  401970:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401972:	68fb      	ldr	r3, [r7, #12]
  401974:	2b00      	cmp	r3, #0
  401976:	d101      	bne.n	40197c <pvPortMalloc+0xe0>
		{
			vApplicationMallocFailedHook();
  401978:	4b0a      	ldr	r3, [pc, #40]	; (4019a4 <pvPortMalloc+0x108>)
  40197a:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  40197c:	68fb      	ldr	r3, [r7, #12]
}
  40197e:	4618      	mov	r0, r3
  401980:	3718      	adds	r7, #24
  401982:	46bd      	mov	sp, r7
  401984:	bd80      	pop	{r7, pc}
  401986:	bf00      	nop
  401988:	00402595 	.word	0x00402595
  40198c:	20019290 	.word	0x20019290
  401990:	004019fd 	.word	0x004019fd
  401994:	20019288 	.word	0x20019288
  401998:	00401a91 	.word	0x00401a91
  40199c:	20000120 	.word	0x20000120
  4019a0:	004025b1 	.word	0x004025b1
  4019a4:	004095cd 	.word	0x004095cd

004019a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  4019a8:	b580      	push	{r7, lr}
  4019aa:	b084      	sub	sp, #16
  4019ac:	af00      	add	r7, sp, #0
  4019ae:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  4019b0:	687b      	ldr	r3, [r7, #4]
  4019b2:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  4019b4:	687b      	ldr	r3, [r7, #4]
  4019b6:	2b00      	cmp	r3, #0
  4019b8:	d014      	beq.n	4019e4 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  4019ba:	2310      	movs	r3, #16
  4019bc:	425b      	negs	r3, r3
  4019be:	68fa      	ldr	r2, [r7, #12]
  4019c0:	4413      	add	r3, r2
  4019c2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  4019c4:	68fb      	ldr	r3, [r7, #12]
  4019c6:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  4019c8:	4b08      	ldr	r3, [pc, #32]	; (4019ec <vPortFree+0x44>)
  4019ca:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4019cc:	68bb      	ldr	r3, [r7, #8]
  4019ce:	685a      	ldr	r2, [r3, #4]
  4019d0:	4b07      	ldr	r3, [pc, #28]	; (4019f0 <vPortFree+0x48>)
  4019d2:	681b      	ldr	r3, [r3, #0]
  4019d4:	4413      	add	r3, r2
  4019d6:	4a06      	ldr	r2, [pc, #24]	; (4019f0 <vPortFree+0x48>)
  4019d8:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  4019da:	68b8      	ldr	r0, [r7, #8]
  4019dc:	4b05      	ldr	r3, [pc, #20]	; (4019f4 <vPortFree+0x4c>)
  4019de:	4798      	blx	r3
		}
		xTaskResumeAll();
  4019e0:	4b05      	ldr	r3, [pc, #20]	; (4019f8 <vPortFree+0x50>)
  4019e2:	4798      	blx	r3
	}
}
  4019e4:	3710      	adds	r7, #16
  4019e6:	46bd      	mov	sp, r7
  4019e8:	bd80      	pop	{r7, pc}
  4019ea:	bf00      	nop
  4019ec:	00402595 	.word	0x00402595
  4019f0:	20000120 	.word	0x20000120
  4019f4:	00401a91 	.word	0x00401a91
  4019f8:	004025b1 	.word	0x004025b1

004019fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  4019fc:	b580      	push	{r7, lr}
  4019fe:	b082      	sub	sp, #8
  401a00:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  401a02:	4b1d      	ldr	r3, [pc, #116]	; (401a78 <prvHeapInit+0x7c>)
  401a04:	4a1d      	ldr	r2, [pc, #116]	; (401a7c <prvHeapInit+0x80>)
  401a06:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  401a08:	4b1b      	ldr	r3, [pc, #108]	; (401a78 <prvHeapInit+0x7c>)
  401a0a:	2200      	movs	r2, #0
  401a0c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  401a0e:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  401a12:	4b1a      	ldr	r3, [pc, #104]	; (401a7c <prvHeapInit+0x80>)
  401a14:	4413      	add	r3, r2
  401a16:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  401a18:	2310      	movs	r3, #16
  401a1a:	425b      	negs	r3, r3
  401a1c:	687a      	ldr	r2, [r7, #4]
  401a1e:	4413      	add	r3, r2
  401a20:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  401a22:	4a17      	ldr	r2, [pc, #92]	; (401a80 <prvHeapInit+0x84>)
  401a24:	687b      	ldr	r3, [r7, #4]
  401a26:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  401a28:	4b15      	ldr	r3, [pc, #84]	; (401a80 <prvHeapInit+0x84>)
  401a2a:	681b      	ldr	r3, [r3, #0]
  401a2c:	f003 0307 	and.w	r3, r3, #7
  401a30:	2b00      	cmp	r3, #0
  401a32:	d004      	beq.n	401a3e <prvHeapInit+0x42>
  401a34:	4813      	ldr	r0, [pc, #76]	; (401a84 <prvHeapInit+0x88>)
  401a36:	f44f 7192 	mov.w	r1, #292	; 0x124
  401a3a:	4b13      	ldr	r3, [pc, #76]	; (401a88 <prvHeapInit+0x8c>)
  401a3c:	4798      	blx	r3
	pxEnd->xBlockSize = 0;
  401a3e:	4b10      	ldr	r3, [pc, #64]	; (401a80 <prvHeapInit+0x84>)
  401a40:	681b      	ldr	r3, [r3, #0]
  401a42:	2200      	movs	r2, #0
  401a44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  401a46:	4b0e      	ldr	r3, [pc, #56]	; (401a80 <prvHeapInit+0x84>)
  401a48:	681b      	ldr	r3, [r3, #0]
  401a4a:	2200      	movs	r2, #0
  401a4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  401a4e:	4b0b      	ldr	r3, [pc, #44]	; (401a7c <prvHeapInit+0x80>)
  401a50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  401a52:	f44f 33c0 	mov.w	r3, #98304	; 0x18000
  401a56:	2210      	movs	r2, #16
  401a58:	1a9a      	subs	r2, r3, r2
  401a5a:	683b      	ldr	r3, [r7, #0]
  401a5c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  401a5e:	4b08      	ldr	r3, [pc, #32]	; (401a80 <prvHeapInit+0x84>)
  401a60:	681a      	ldr	r2, [r3, #0]
  401a62:	683b      	ldr	r3, [r7, #0]
  401a64:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  401a66:	4b09      	ldr	r3, [pc, #36]	; (401a8c <prvHeapInit+0x90>)
  401a68:	681b      	ldr	r3, [r3, #0]
  401a6a:	2210      	movs	r2, #16
  401a6c:	1a9b      	subs	r3, r3, r2
  401a6e:	4a07      	ldr	r2, [pc, #28]	; (401a8c <prvHeapInit+0x90>)
  401a70:	6013      	str	r3, [r2, #0]
}
  401a72:	3708      	adds	r7, #8
  401a74:	46bd      	mov	sp, r7
  401a76:	bd80      	pop	{r7, pc}
  401a78:	20019288 	.word	0x20019288
  401a7c:	20001288 	.word	0x20001288
  401a80:	20019290 	.word	0x20019290
  401a84:	0040d0d8 	.word	0x0040d0d8
  401a88:	00409705 	.word	0x00409705
  401a8c:	20000120 	.word	0x20000120

00401a90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  401a90:	b480      	push	{r7}
  401a92:	b085      	sub	sp, #20
  401a94:	af00      	add	r7, sp, #0
  401a96:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  401a98:	4b27      	ldr	r3, [pc, #156]	; (401b38 <prvInsertBlockIntoFreeList+0xa8>)
  401a9a:	60fb      	str	r3, [r7, #12]
  401a9c:	e002      	b.n	401aa4 <prvInsertBlockIntoFreeList+0x14>
  401a9e:	68fb      	ldr	r3, [r7, #12]
  401aa0:	681b      	ldr	r3, [r3, #0]
  401aa2:	60fb      	str	r3, [r7, #12]
  401aa4:	68fb      	ldr	r3, [r7, #12]
  401aa6:	681a      	ldr	r2, [r3, #0]
  401aa8:	687b      	ldr	r3, [r7, #4]
  401aaa:	429a      	cmp	r2, r3
  401aac:	d3f7      	bcc.n	401a9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  401aae:	68fb      	ldr	r3, [r7, #12]
  401ab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  401ab2:	68fb      	ldr	r3, [r7, #12]
  401ab4:	685b      	ldr	r3, [r3, #4]
  401ab6:	68ba      	ldr	r2, [r7, #8]
  401ab8:	441a      	add	r2, r3
  401aba:	687b      	ldr	r3, [r7, #4]
  401abc:	429a      	cmp	r2, r3
  401abe:	d108      	bne.n	401ad2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  401ac0:	68fb      	ldr	r3, [r7, #12]
  401ac2:	685a      	ldr	r2, [r3, #4]
  401ac4:	687b      	ldr	r3, [r7, #4]
  401ac6:	685b      	ldr	r3, [r3, #4]
  401ac8:	441a      	add	r2, r3
  401aca:	68fb      	ldr	r3, [r7, #12]
  401acc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  401ace:	68fb      	ldr	r3, [r7, #12]
  401ad0:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  401ad2:	687b      	ldr	r3, [r7, #4]
  401ad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  401ad6:	687b      	ldr	r3, [r7, #4]
  401ad8:	685b      	ldr	r3, [r3, #4]
  401ada:	68ba      	ldr	r2, [r7, #8]
  401adc:	441a      	add	r2, r3
  401ade:	68fb      	ldr	r3, [r7, #12]
  401ae0:	681b      	ldr	r3, [r3, #0]
  401ae2:	429a      	cmp	r2, r3
  401ae4:	d118      	bne.n	401b18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  401ae6:	68fb      	ldr	r3, [r7, #12]
  401ae8:	681a      	ldr	r2, [r3, #0]
  401aea:	4b14      	ldr	r3, [pc, #80]	; (401b3c <prvInsertBlockIntoFreeList+0xac>)
  401aec:	681b      	ldr	r3, [r3, #0]
  401aee:	429a      	cmp	r2, r3
  401af0:	d00d      	beq.n	401b0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  401af2:	687b      	ldr	r3, [r7, #4]
  401af4:	685a      	ldr	r2, [r3, #4]
  401af6:	68fb      	ldr	r3, [r7, #12]
  401af8:	681b      	ldr	r3, [r3, #0]
  401afa:	685b      	ldr	r3, [r3, #4]
  401afc:	441a      	add	r2, r3
  401afe:	687b      	ldr	r3, [r7, #4]
  401b00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  401b02:	68fb      	ldr	r3, [r7, #12]
  401b04:	681b      	ldr	r3, [r3, #0]
  401b06:	681a      	ldr	r2, [r3, #0]
  401b08:	687b      	ldr	r3, [r7, #4]
  401b0a:	601a      	str	r2, [r3, #0]
  401b0c:	e008      	b.n	401b20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  401b0e:	4b0b      	ldr	r3, [pc, #44]	; (401b3c <prvInsertBlockIntoFreeList+0xac>)
  401b10:	681a      	ldr	r2, [r3, #0]
  401b12:	687b      	ldr	r3, [r7, #4]
  401b14:	601a      	str	r2, [r3, #0]
  401b16:	e003      	b.n	401b20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  401b18:	68fb      	ldr	r3, [r7, #12]
  401b1a:	681a      	ldr	r2, [r3, #0]
  401b1c:	687b      	ldr	r3, [r7, #4]
  401b1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  401b20:	68fa      	ldr	r2, [r7, #12]
  401b22:	687b      	ldr	r3, [r7, #4]
  401b24:	429a      	cmp	r2, r3
  401b26:	d002      	beq.n	401b2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  401b28:	68fb      	ldr	r3, [r7, #12]
  401b2a:	687a      	ldr	r2, [r7, #4]
  401b2c:	601a      	str	r2, [r3, #0]
	}
}
  401b2e:	3714      	adds	r7, #20
  401b30:	46bd      	mov	sp, r7
  401b32:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b36:	4770      	bx	lr
  401b38:	20019288 	.word	0x20019288
  401b3c:	20019290 	.word	0x20019290

00401b40 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  401b40:	b580      	push	{r7, lr}
  401b42:	b082      	sub	sp, #8
  401b44:	af00      	add	r7, sp, #0
  401b46:	6078      	str	r0, [r7, #4]
  401b48:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  401b4a:	687b      	ldr	r3, [r7, #4]
  401b4c:	2b00      	cmp	r3, #0
  401b4e:	d104      	bne.n	401b5a <xQueueGenericReset+0x1a>
  401b50:	4827      	ldr	r0, [pc, #156]	; (401bf0 <xQueueGenericReset+0xb0>)
  401b52:	f240 111b 	movw	r1, #283	; 0x11b
  401b56:	4b27      	ldr	r3, [pc, #156]	; (401bf4 <xQueueGenericReset+0xb4>)
  401b58:	4798      	blx	r3

	taskENTER_CRITICAL();
  401b5a:	4b27      	ldr	r3, [pc, #156]	; (401bf8 <xQueueGenericReset+0xb8>)
  401b5c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401b5e:	687b      	ldr	r3, [r7, #4]
  401b60:	681a      	ldr	r2, [r3, #0]
  401b62:	687b      	ldr	r3, [r7, #4]
  401b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401b66:	6879      	ldr	r1, [r7, #4]
  401b68:	6c09      	ldr	r1, [r1, #64]	; 0x40
  401b6a:	fb01 f303 	mul.w	r3, r1, r3
  401b6e:	441a      	add	r2, r3
  401b70:	687b      	ldr	r3, [r7, #4]
  401b72:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  401b74:	687b      	ldr	r3, [r7, #4]
  401b76:	2200      	movs	r2, #0
  401b78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401b7a:	687b      	ldr	r3, [r7, #4]
  401b7c:	681a      	ldr	r2, [r3, #0]
  401b7e:	687b      	ldr	r3, [r7, #4]
  401b80:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  401b82:	687b      	ldr	r3, [r7, #4]
  401b84:	681a      	ldr	r2, [r3, #0]
  401b86:	687b      	ldr	r3, [r7, #4]
  401b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401b8a:	3b01      	subs	r3, #1
  401b8c:	6879      	ldr	r1, [r7, #4]
  401b8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
  401b90:	fb01 f303 	mul.w	r3, r1, r3
  401b94:	441a      	add	r2, r3
  401b96:	687b      	ldr	r3, [r7, #4]
  401b98:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401b9a:	687b      	ldr	r3, [r7, #4]
  401b9c:	f04f 32ff 	mov.w	r2, #4294967295
  401ba0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401ba2:	687b      	ldr	r3, [r7, #4]
  401ba4:	f04f 32ff 	mov.w	r2, #4294967295
  401ba8:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  401baa:	683b      	ldr	r3, [r7, #0]
  401bac:	2b00      	cmp	r3, #0
  401bae:	d10e      	bne.n	401bce <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401bb0:	687b      	ldr	r3, [r7, #4]
  401bb2:	691b      	ldr	r3, [r3, #16]
  401bb4:	2b00      	cmp	r3, #0
  401bb6:	d014      	beq.n	401be2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401bb8:	687b      	ldr	r3, [r7, #4]
  401bba:	3310      	adds	r3, #16
  401bbc:	4618      	mov	r0, r3
  401bbe:	4b0f      	ldr	r3, [pc, #60]	; (401bfc <xQueueGenericReset+0xbc>)
  401bc0:	4798      	blx	r3
  401bc2:	4603      	mov	r3, r0
  401bc4:	2b01      	cmp	r3, #1
  401bc6:	d10c      	bne.n	401be2 <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
  401bc8:	4b0d      	ldr	r3, [pc, #52]	; (401c00 <xQueueGenericReset+0xc0>)
  401bca:	4798      	blx	r3
  401bcc:	e009      	b.n	401be2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401bce:	687b      	ldr	r3, [r7, #4]
  401bd0:	3310      	adds	r3, #16
  401bd2:	4618      	mov	r0, r3
  401bd4:	4b0b      	ldr	r3, [pc, #44]	; (401c04 <xQueueGenericReset+0xc4>)
  401bd6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401bd8:	687b      	ldr	r3, [r7, #4]
  401bda:	3324      	adds	r3, #36	; 0x24
  401bdc:	4618      	mov	r0, r3
  401bde:	4b09      	ldr	r3, [pc, #36]	; (401c04 <xQueueGenericReset+0xc4>)
  401be0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  401be2:	4b09      	ldr	r3, [pc, #36]	; (401c08 <xQueueGenericReset+0xc8>)
  401be4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  401be6:	2301      	movs	r3, #1
}
  401be8:	4618      	mov	r0, r3
  401bea:	3708      	adds	r7, #8
  401bec:	46bd      	mov	sp, r7
  401bee:	bd80      	pop	{r7, pc}
  401bf0:	0040d128 	.word	0x0040d128
  401bf4:	00409705 	.word	0x00409705
  401bf8:	0040177d 	.word	0x0040177d
  401bfc:	00402add 	.word	0x00402add
  401c00:	00401765 	.word	0x00401765
  401c04:	0040146d 	.word	0x0040146d
  401c08:	00401799 	.word	0x00401799

00401c0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  401c0c:	b580      	push	{r7, lr}
  401c0e:	b088      	sub	sp, #32
  401c10:	af00      	add	r7, sp, #0
  401c12:	60f8      	str	r0, [r7, #12]
  401c14:	60b9      	str	r1, [r7, #8]
  401c16:	4613      	mov	r3, r2
  401c18:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  401c1a:	2300      	movs	r3, #0
  401c1c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  401c1e:	68fb      	ldr	r3, [r7, #12]
  401c20:	2b00      	cmp	r3, #0
  401c22:	d02a      	beq.n	401c7a <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  401c24:	2050      	movs	r0, #80	; 0x50
  401c26:	4b1b      	ldr	r3, [pc, #108]	; (401c94 <xQueueGenericCreate+0x88>)
  401c28:	4798      	blx	r3
  401c2a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  401c2c:	69bb      	ldr	r3, [r7, #24]
  401c2e:	2b00      	cmp	r3, #0
  401c30:	d023      	beq.n	401c7a <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  401c32:	68fb      	ldr	r3, [r7, #12]
  401c34:	68ba      	ldr	r2, [r7, #8]
  401c36:	fb02 f303 	mul.w	r3, r2, r3
  401c3a:	3301      	adds	r3, #1
  401c3c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  401c3e:	6978      	ldr	r0, [r7, #20]
  401c40:	4b14      	ldr	r3, [pc, #80]	; (401c94 <xQueueGenericCreate+0x88>)
  401c42:	4798      	blx	r3
  401c44:	4602      	mov	r2, r0
  401c46:	69bb      	ldr	r3, [r7, #24]
  401c48:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  401c4a:	69bb      	ldr	r3, [r7, #24]
  401c4c:	681b      	ldr	r3, [r3, #0]
  401c4e:	2b00      	cmp	r3, #0
  401c50:	d010      	beq.n	401c74 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  401c52:	69bb      	ldr	r3, [r7, #24]
  401c54:	68fa      	ldr	r2, [r7, #12]
  401c56:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  401c58:	69bb      	ldr	r3, [r7, #24]
  401c5a:	68ba      	ldr	r2, [r7, #8]
  401c5c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  401c5e:	69b8      	ldr	r0, [r7, #24]
  401c60:	2101      	movs	r1, #1
  401c62:	4b0d      	ldr	r3, [pc, #52]	; (401c98 <xQueueGenericCreate+0x8c>)
  401c64:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  401c66:	69bb      	ldr	r3, [r7, #24]
  401c68:	79fa      	ldrb	r2, [r7, #7]
  401c6a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  401c6e:	69bb      	ldr	r3, [r7, #24]
  401c70:	61fb      	str	r3, [r7, #28]
  401c72:	e002      	b.n	401c7a <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  401c74:	69b8      	ldr	r0, [r7, #24]
  401c76:	4b09      	ldr	r3, [pc, #36]	; (401c9c <xQueueGenericCreate+0x90>)
  401c78:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  401c7a:	69fb      	ldr	r3, [r7, #28]
  401c7c:	2b00      	cmp	r3, #0
  401c7e:	d104      	bne.n	401c8a <xQueueGenericCreate+0x7e>
  401c80:	4807      	ldr	r0, [pc, #28]	; (401ca0 <xQueueGenericCreate+0x94>)
  401c82:	f240 1171 	movw	r1, #369	; 0x171
  401c86:	4b07      	ldr	r3, [pc, #28]	; (401ca4 <xQueueGenericCreate+0x98>)
  401c88:	4798      	blx	r3

	return xReturn;
  401c8a:	69fb      	ldr	r3, [r7, #28]
}
  401c8c:	4618      	mov	r0, r3
  401c8e:	3720      	adds	r7, #32
  401c90:	46bd      	mov	sp, r7
  401c92:	bd80      	pop	{r7, pc}
  401c94:	0040189d 	.word	0x0040189d
  401c98:	00401b41 	.word	0x00401b41
  401c9c:	004019a9 	.word	0x004019a9
  401ca0:	0040d128 	.word	0x0040d128
  401ca4:	00409705 	.word	0x00409705

00401ca8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  401ca8:	b580      	push	{r7, lr}
  401caa:	b088      	sub	sp, #32
  401cac:	af00      	add	r7, sp, #0
  401cae:	60f8      	str	r0, [r7, #12]
  401cb0:	60b9      	str	r1, [r7, #8]
  401cb2:	607a      	str	r2, [r7, #4]
  401cb4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  401cb6:	2300      	movs	r3, #0
  401cb8:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  401cba:	68fb      	ldr	r3, [r7, #12]
  401cbc:	2b00      	cmp	r3, #0
  401cbe:	d104      	bne.n	401cca <xQueueGenericSend+0x22>
  401cc0:	4849      	ldr	r0, [pc, #292]	; (401de8 <xQueueGenericSend+0x140>)
  401cc2:	f44f 7112 	mov.w	r1, #584	; 0x248
  401cc6:	4b49      	ldr	r3, [pc, #292]	; (401dec <xQueueGenericSend+0x144>)
  401cc8:	4798      	blx	r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401cca:	68bb      	ldr	r3, [r7, #8]
  401ccc:	2b00      	cmp	r3, #0
  401cce:	d103      	bne.n	401cd8 <xQueueGenericSend+0x30>
  401cd0:	68fb      	ldr	r3, [r7, #12]
  401cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401cd4:	2b00      	cmp	r3, #0
  401cd6:	d101      	bne.n	401cdc <xQueueGenericSend+0x34>
  401cd8:	2301      	movs	r3, #1
  401cda:	e000      	b.n	401cde <xQueueGenericSend+0x36>
  401cdc:	2300      	movs	r3, #0
  401cde:	2b00      	cmp	r3, #0
  401ce0:	d104      	bne.n	401cec <xQueueGenericSend+0x44>
  401ce2:	4841      	ldr	r0, [pc, #260]	; (401de8 <xQueueGenericSend+0x140>)
  401ce4:	f240 2149 	movw	r1, #585	; 0x249
  401ce8:	4b40      	ldr	r3, [pc, #256]	; (401dec <xQueueGenericSend+0x144>)
  401cea:	4798      	blx	r3
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401cec:	4b40      	ldr	r3, [pc, #256]	; (401df0 <xQueueGenericSend+0x148>)
  401cee:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401cf0:	68fb      	ldr	r3, [r7, #12]
  401cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401cf4:	68fb      	ldr	r3, [r7, #12]
  401cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401cf8:	429a      	cmp	r2, r3
  401cfa:	d216      	bcs.n	401d2a <xQueueGenericSend+0x82>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401cfc:	68f8      	ldr	r0, [r7, #12]
  401cfe:	68b9      	ldr	r1, [r7, #8]
  401d00:	683a      	ldr	r2, [r7, #0]
  401d02:	4b3c      	ldr	r3, [pc, #240]	; (401df4 <xQueueGenericSend+0x14c>)
  401d04:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401d06:	68fb      	ldr	r3, [r7, #12]
  401d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401d0a:	2b00      	cmp	r3, #0
  401d0c:	d009      	beq.n	401d22 <xQueueGenericSend+0x7a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401d0e:	68fb      	ldr	r3, [r7, #12]
  401d10:	3324      	adds	r3, #36	; 0x24
  401d12:	4618      	mov	r0, r3
  401d14:	4b38      	ldr	r3, [pc, #224]	; (401df8 <xQueueGenericSend+0x150>)
  401d16:	4798      	blx	r3
  401d18:	4603      	mov	r3, r0
  401d1a:	2b01      	cmp	r3, #1
  401d1c:	d101      	bne.n	401d22 <xQueueGenericSend+0x7a>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  401d1e:	4b37      	ldr	r3, [pc, #220]	; (401dfc <xQueueGenericSend+0x154>)
  401d20:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  401d22:	4b37      	ldr	r3, [pc, #220]	; (401e00 <xQueueGenericSend+0x158>)
  401d24:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  401d26:	2301      	movs	r3, #1
  401d28:	e059      	b.n	401dde <xQueueGenericSend+0x136>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  401d2a:	687b      	ldr	r3, [r7, #4]
  401d2c:	2b00      	cmp	r3, #0
  401d2e:	d103      	bne.n	401d38 <xQueueGenericSend+0x90>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401d30:	4b33      	ldr	r3, [pc, #204]	; (401e00 <xQueueGenericSend+0x158>)
  401d32:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  401d34:	2300      	movs	r3, #0
  401d36:	e052      	b.n	401dde <xQueueGenericSend+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
  401d38:	69fb      	ldr	r3, [r7, #28]
  401d3a:	2b00      	cmp	r3, #0
  401d3c:	d106      	bne.n	401d4c <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401d3e:	f107 0314 	add.w	r3, r7, #20
  401d42:	4618      	mov	r0, r3
  401d44:	4b2f      	ldr	r3, [pc, #188]	; (401e04 <xQueueGenericSend+0x15c>)
  401d46:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  401d48:	2301      	movs	r3, #1
  401d4a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  401d4c:	4b2c      	ldr	r3, [pc, #176]	; (401e00 <xQueueGenericSend+0x158>)
  401d4e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401d50:	4b2d      	ldr	r3, [pc, #180]	; (401e08 <xQueueGenericSend+0x160>)
  401d52:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401d54:	4b26      	ldr	r3, [pc, #152]	; (401df0 <xQueueGenericSend+0x148>)
  401d56:	4798      	blx	r3
  401d58:	68fb      	ldr	r3, [r7, #12]
  401d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  401d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d60:	d102      	bne.n	401d68 <xQueueGenericSend+0xc0>
  401d62:	68fb      	ldr	r3, [r7, #12]
  401d64:	2200      	movs	r2, #0
  401d66:	645a      	str	r2, [r3, #68]	; 0x44
  401d68:	68fb      	ldr	r3, [r7, #12]
  401d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d70:	d102      	bne.n	401d78 <xQueueGenericSend+0xd0>
  401d72:	68fb      	ldr	r3, [r7, #12]
  401d74:	2200      	movs	r2, #0
  401d76:	649a      	str	r2, [r3, #72]	; 0x48
  401d78:	4b21      	ldr	r3, [pc, #132]	; (401e00 <xQueueGenericSend+0x158>)
  401d7a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401d7c:	f107 0214 	add.w	r2, r7, #20
  401d80:	1d3b      	adds	r3, r7, #4
  401d82:	4610      	mov	r0, r2
  401d84:	4619      	mov	r1, r3
  401d86:	4b21      	ldr	r3, [pc, #132]	; (401e0c <xQueueGenericSend+0x164>)
  401d88:	4798      	blx	r3
  401d8a:	4603      	mov	r3, r0
  401d8c:	2b00      	cmp	r3, #0
  401d8e:	d11e      	bne.n	401dce <xQueueGenericSend+0x126>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401d90:	68f8      	ldr	r0, [r7, #12]
  401d92:	4b1f      	ldr	r3, [pc, #124]	; (401e10 <xQueueGenericSend+0x168>)
  401d94:	4798      	blx	r3
  401d96:	4603      	mov	r3, r0
  401d98:	2b00      	cmp	r3, #0
  401d9a:	d012      	beq.n	401dc2 <xQueueGenericSend+0x11a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401d9c:	68fb      	ldr	r3, [r7, #12]
  401d9e:	f103 0210 	add.w	r2, r3, #16
  401da2:	687b      	ldr	r3, [r7, #4]
  401da4:	4610      	mov	r0, r2
  401da6:	4619      	mov	r1, r3
  401da8:	4b1a      	ldr	r3, [pc, #104]	; (401e14 <xQueueGenericSend+0x16c>)
  401daa:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401dac:	68f8      	ldr	r0, [r7, #12]
  401dae:	4b1a      	ldr	r3, [pc, #104]	; (401e18 <xQueueGenericSend+0x170>)
  401db0:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  401db2:	4b1a      	ldr	r3, [pc, #104]	; (401e1c <xQueueGenericSend+0x174>)
  401db4:	4798      	blx	r3
  401db6:	4603      	mov	r3, r0
  401db8:	2b00      	cmp	r3, #0
  401dba:	d10f      	bne.n	401ddc <xQueueGenericSend+0x134>
				{
					portYIELD_WITHIN_API();
  401dbc:	4b0f      	ldr	r3, [pc, #60]	; (401dfc <xQueueGenericSend+0x154>)
  401dbe:	4798      	blx	r3
  401dc0:	e00c      	b.n	401ddc <xQueueGenericSend+0x134>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401dc2:	68f8      	ldr	r0, [r7, #12]
  401dc4:	4b14      	ldr	r3, [pc, #80]	; (401e18 <xQueueGenericSend+0x170>)
  401dc6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401dc8:	4b14      	ldr	r3, [pc, #80]	; (401e1c <xQueueGenericSend+0x174>)
  401dca:	4798      	blx	r3
  401dcc:	e78e      	b.n	401cec <xQueueGenericSend+0x44>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  401dce:	68f8      	ldr	r0, [r7, #12]
  401dd0:	4b11      	ldr	r3, [pc, #68]	; (401e18 <xQueueGenericSend+0x170>)
  401dd2:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401dd4:	4b11      	ldr	r3, [pc, #68]	; (401e1c <xQueueGenericSend+0x174>)
  401dd6:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  401dd8:	2300      	movs	r3, #0
  401dda:	e000      	b.n	401dde <xQueueGenericSend+0x136>
		}
	}
  401ddc:	e786      	b.n	401cec <xQueueGenericSend+0x44>
}
  401dde:	4618      	mov	r0, r3
  401de0:	3720      	adds	r7, #32
  401de2:	46bd      	mov	sp, r7
  401de4:	bd80      	pop	{r7, pc}
  401de6:	bf00      	nop
  401de8:	0040d128 	.word	0x0040d128
  401dec:	00409705 	.word	0x00409705
  401df0:	0040177d 	.word	0x0040177d
  401df4:	004020c9 	.word	0x004020c9
  401df8:	00402add 	.word	0x00402add
  401dfc:	00401765 	.word	0x00401765
  401e00:	00401799 	.word	0x00401799
  401e04:	00402ba1 	.word	0x00402ba1
  401e08:	00402595 	.word	0x00402595
  401e0c:	00402be1 	.word	0x00402be1
  401e10:	004022b5 	.word	0x004022b5
  401e14:	004029ad 	.word	0x004029ad
  401e18:	004021d9 	.word	0x004021d9
  401e1c:	004025b1 	.word	0x004025b1

00401e20 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  401e20:	b580      	push	{r7, lr}
  401e22:	b086      	sub	sp, #24
  401e24:	af00      	add	r7, sp, #0
  401e26:	60f8      	str	r0, [r7, #12]
  401e28:	60b9      	str	r1, [r7, #8]
  401e2a:	607a      	str	r2, [r7, #4]
  401e2c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  401e2e:	68fb      	ldr	r3, [r7, #12]
  401e30:	2b00      	cmp	r3, #0
  401e32:	d104      	bne.n	401e3e <xQueueGenericSendFromISR+0x1e>
  401e34:	4826      	ldr	r0, [pc, #152]	; (401ed0 <xQueueGenericSendFromISR+0xb0>)
  401e36:	f240 318f 	movw	r1, #911	; 0x38f
  401e3a:	4b26      	ldr	r3, [pc, #152]	; (401ed4 <xQueueGenericSendFromISR+0xb4>)
  401e3c:	4798      	blx	r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401e3e:	68bb      	ldr	r3, [r7, #8]
  401e40:	2b00      	cmp	r3, #0
  401e42:	d103      	bne.n	401e4c <xQueueGenericSendFromISR+0x2c>
  401e44:	68fb      	ldr	r3, [r7, #12]
  401e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401e48:	2b00      	cmp	r3, #0
  401e4a:	d101      	bne.n	401e50 <xQueueGenericSendFromISR+0x30>
  401e4c:	2301      	movs	r3, #1
  401e4e:	e000      	b.n	401e52 <xQueueGenericSendFromISR+0x32>
  401e50:	2300      	movs	r3, #0
  401e52:	2b00      	cmp	r3, #0
  401e54:	d104      	bne.n	401e60 <xQueueGenericSendFromISR+0x40>
  401e56:	481e      	ldr	r0, [pc, #120]	; (401ed0 <xQueueGenericSendFromISR+0xb0>)
  401e58:	f44f 7164 	mov.w	r1, #912	; 0x390
  401e5c:	4b1d      	ldr	r3, [pc, #116]	; (401ed4 <xQueueGenericSendFromISR+0xb4>)
  401e5e:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  401e60:	4b1d      	ldr	r3, [pc, #116]	; (401ed8 <xQueueGenericSendFromISR+0xb8>)
  401e62:	4798      	blx	r3
  401e64:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401e66:	68fb      	ldr	r3, [r7, #12]
  401e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401e6a:	68fb      	ldr	r3, [r7, #12]
  401e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401e6e:	429a      	cmp	r2, r3
  401e70:	d224      	bcs.n	401ebc <xQueueGenericSendFromISR+0x9c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401e72:	68f8      	ldr	r0, [r7, #12]
  401e74:	68b9      	ldr	r1, [r7, #8]
  401e76:	683a      	ldr	r2, [r7, #0]
  401e78:	4b18      	ldr	r3, [pc, #96]	; (401edc <xQueueGenericSendFromISR+0xbc>)
  401e7a:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  401e7c:	68fb      	ldr	r3, [r7, #12]
  401e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401e80:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e84:	d112      	bne.n	401eac <xQueueGenericSendFromISR+0x8c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401e86:	68fb      	ldr	r3, [r7, #12]
  401e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401e8a:	2b00      	cmp	r3, #0
  401e8c:	d013      	beq.n	401eb6 <xQueueGenericSendFromISR+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401e8e:	68fb      	ldr	r3, [r7, #12]
  401e90:	3324      	adds	r3, #36	; 0x24
  401e92:	4618      	mov	r0, r3
  401e94:	4b12      	ldr	r3, [pc, #72]	; (401ee0 <xQueueGenericSendFromISR+0xc0>)
  401e96:	4798      	blx	r3
  401e98:	4603      	mov	r3, r0
  401e9a:	2b00      	cmp	r3, #0
  401e9c:	d00b      	beq.n	401eb6 <xQueueGenericSendFromISR+0x96>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  401e9e:	687b      	ldr	r3, [r7, #4]
  401ea0:	2b00      	cmp	r3, #0
  401ea2:	d008      	beq.n	401eb6 <xQueueGenericSendFromISR+0x96>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  401ea4:	687b      	ldr	r3, [r7, #4]
  401ea6:	2201      	movs	r2, #1
  401ea8:	601a      	str	r2, [r3, #0]
  401eaa:	e004      	b.n	401eb6 <xQueueGenericSendFromISR+0x96>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  401eac:	68fb      	ldr	r3, [r7, #12]
  401eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401eb0:	1c5a      	adds	r2, r3, #1
  401eb2:	68fb      	ldr	r3, [r7, #12]
  401eb4:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  401eb6:	2301      	movs	r3, #1
  401eb8:	617b      	str	r3, [r7, #20]
  401eba:	e001      	b.n	401ec0 <xQueueGenericSendFromISR+0xa0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401ebc:	2300      	movs	r3, #0
  401ebe:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  401ec0:	6938      	ldr	r0, [r7, #16]
  401ec2:	4b08      	ldr	r3, [pc, #32]	; (401ee4 <xQueueGenericSendFromISR+0xc4>)
  401ec4:	4798      	blx	r3

	return xReturn;
  401ec6:	697b      	ldr	r3, [r7, #20]
}
  401ec8:	4618      	mov	r0, r3
  401eca:	3718      	adds	r7, #24
  401ecc:	46bd      	mov	sp, r7
  401ece:	bd80      	pop	{r7, pc}
  401ed0:	0040d128 	.word	0x0040d128
  401ed4:	00409705 	.word	0x00409705
  401ed8:	004017c1 	.word	0x004017c1
  401edc:	004020c9 	.word	0x004020c9
  401ee0:	00402add 	.word	0x00402add
  401ee4:	004017d5 	.word	0x004017d5

00401ee8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  401ee8:	b580      	push	{r7, lr}
  401eea:	b088      	sub	sp, #32
  401eec:	af00      	add	r7, sp, #0
  401eee:	60f8      	str	r0, [r7, #12]
  401ef0:	60b9      	str	r1, [r7, #8]
  401ef2:	607a      	str	r2, [r7, #4]
  401ef4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  401ef6:	2300      	movs	r3, #0
  401ef8:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  401efa:	68fb      	ldr	r3, [r7, #12]
  401efc:	2b00      	cmp	r3, #0
  401efe:	d104      	bne.n	401f0a <xQueueGenericReceive+0x22>
  401f00:	4861      	ldr	r0, [pc, #388]	; (402088 <xQueueGenericReceive+0x1a0>)
  401f02:	f240 31cb 	movw	r1, #971	; 0x3cb
  401f06:	4b61      	ldr	r3, [pc, #388]	; (40208c <xQueueGenericReceive+0x1a4>)
  401f08:	4798      	blx	r3
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401f0a:	68bb      	ldr	r3, [r7, #8]
  401f0c:	2b00      	cmp	r3, #0
  401f0e:	d103      	bne.n	401f18 <xQueueGenericReceive+0x30>
  401f10:	68fb      	ldr	r3, [r7, #12]
  401f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401f14:	2b00      	cmp	r3, #0
  401f16:	d101      	bne.n	401f1c <xQueueGenericReceive+0x34>
  401f18:	2301      	movs	r3, #1
  401f1a:	e000      	b.n	401f1e <xQueueGenericReceive+0x36>
  401f1c:	2300      	movs	r3, #0
  401f1e:	2b00      	cmp	r3, #0
  401f20:	d104      	bne.n	401f2c <xQueueGenericReceive+0x44>
  401f22:	4859      	ldr	r0, [pc, #356]	; (402088 <xQueueGenericReceive+0x1a0>)
  401f24:	f44f 7173 	mov.w	r1, #972	; 0x3cc
  401f28:	4b58      	ldr	r3, [pc, #352]	; (40208c <xQueueGenericReceive+0x1a4>)
  401f2a:	4798      	blx	r3
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401f2c:	4b58      	ldr	r3, [pc, #352]	; (402090 <xQueueGenericReceive+0x1a8>)
  401f2e:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  401f30:	68fb      	ldr	r3, [r7, #12]
  401f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401f34:	2b00      	cmp	r3, #0
  401f36:	d03b      	beq.n	401fb0 <xQueueGenericReceive+0xc8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  401f38:	68fb      	ldr	r3, [r7, #12]
  401f3a:	68db      	ldr	r3, [r3, #12]
  401f3c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401f3e:	68f8      	ldr	r0, [r7, #12]
  401f40:	68b9      	ldr	r1, [r7, #8]
  401f42:	4b54      	ldr	r3, [pc, #336]	; (402094 <xQueueGenericReceive+0x1ac>)
  401f44:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  401f46:	683b      	ldr	r3, [r7, #0]
  401f48:	2b00      	cmp	r3, #0
  401f4a:	d11c      	bne.n	401f86 <xQueueGenericReceive+0x9e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  401f4c:	68fb      	ldr	r3, [r7, #12]
  401f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401f50:	1e5a      	subs	r2, r3, #1
  401f52:	68fb      	ldr	r3, [r7, #12]
  401f54:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401f56:	68fb      	ldr	r3, [r7, #12]
  401f58:	681b      	ldr	r3, [r3, #0]
  401f5a:	2b00      	cmp	r3, #0
  401f5c:	d104      	bne.n	401f68 <xQueueGenericReceive+0x80>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  401f5e:	4b4e      	ldr	r3, [pc, #312]	; (402098 <xQueueGenericReceive+0x1b0>)
  401f60:	4798      	blx	r3
  401f62:	4602      	mov	r2, r0
  401f64:	68fb      	ldr	r3, [r7, #12]
  401f66:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401f68:	68fb      	ldr	r3, [r7, #12]
  401f6a:	691b      	ldr	r3, [r3, #16]
  401f6c:	2b00      	cmp	r3, #0
  401f6e:	d01b      	beq.n	401fa8 <xQueueGenericReceive+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401f70:	68fb      	ldr	r3, [r7, #12]
  401f72:	3310      	adds	r3, #16
  401f74:	4618      	mov	r0, r3
  401f76:	4b49      	ldr	r3, [pc, #292]	; (40209c <xQueueGenericReceive+0x1b4>)
  401f78:	4798      	blx	r3
  401f7a:	4603      	mov	r3, r0
  401f7c:	2b01      	cmp	r3, #1
  401f7e:	d113      	bne.n	401fa8 <xQueueGenericReceive+0xc0>
						{
							portYIELD_WITHIN_API();
  401f80:	4b47      	ldr	r3, [pc, #284]	; (4020a0 <xQueueGenericReceive+0x1b8>)
  401f82:	4798      	blx	r3
  401f84:	e010      	b.n	401fa8 <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  401f86:	68fb      	ldr	r3, [r7, #12]
  401f88:	69ba      	ldr	r2, [r7, #24]
  401f8a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401f8c:	68fb      	ldr	r3, [r7, #12]
  401f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401f90:	2b00      	cmp	r3, #0
  401f92:	d009      	beq.n	401fa8 <xQueueGenericReceive+0xc0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401f94:	68fb      	ldr	r3, [r7, #12]
  401f96:	3324      	adds	r3, #36	; 0x24
  401f98:	4618      	mov	r0, r3
  401f9a:	4b40      	ldr	r3, [pc, #256]	; (40209c <xQueueGenericReceive+0x1b4>)
  401f9c:	4798      	blx	r3
  401f9e:	4603      	mov	r3, r0
  401fa0:	2b00      	cmp	r3, #0
  401fa2:	d001      	beq.n	401fa8 <xQueueGenericReceive+0xc0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  401fa4:	4b3e      	ldr	r3, [pc, #248]	; (4020a0 <xQueueGenericReceive+0x1b8>)
  401fa6:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  401fa8:	4b3e      	ldr	r3, [pc, #248]	; (4020a4 <xQueueGenericReceive+0x1bc>)
  401faa:	4798      	blx	r3
				return pdPASS;
  401fac:	2301      	movs	r3, #1
  401fae:	e066      	b.n	40207e <xQueueGenericReceive+0x196>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  401fb0:	687b      	ldr	r3, [r7, #4]
  401fb2:	2b00      	cmp	r3, #0
  401fb4:	d103      	bne.n	401fbe <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401fb6:	4b3b      	ldr	r3, [pc, #236]	; (4020a4 <xQueueGenericReceive+0x1bc>)
  401fb8:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401fba:	2300      	movs	r3, #0
  401fbc:	e05f      	b.n	40207e <xQueueGenericReceive+0x196>
				}
				else if( xEntryTimeSet == pdFALSE )
  401fbe:	69fb      	ldr	r3, [r7, #28]
  401fc0:	2b00      	cmp	r3, #0
  401fc2:	d106      	bne.n	401fd2 <xQueueGenericReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401fc4:	f107 0310 	add.w	r3, r7, #16
  401fc8:	4618      	mov	r0, r3
  401fca:	4b37      	ldr	r3, [pc, #220]	; (4020a8 <xQueueGenericReceive+0x1c0>)
  401fcc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  401fce:	2301      	movs	r3, #1
  401fd0:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  401fd2:	4b34      	ldr	r3, [pc, #208]	; (4020a4 <xQueueGenericReceive+0x1bc>)
  401fd4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401fd6:	4b35      	ldr	r3, [pc, #212]	; (4020ac <xQueueGenericReceive+0x1c4>)
  401fd8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401fda:	4b2d      	ldr	r3, [pc, #180]	; (402090 <xQueueGenericReceive+0x1a8>)
  401fdc:	4798      	blx	r3
  401fde:	68fb      	ldr	r3, [r7, #12]
  401fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  401fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401fe6:	d102      	bne.n	401fee <xQueueGenericReceive+0x106>
  401fe8:	68fb      	ldr	r3, [r7, #12]
  401fea:	2200      	movs	r2, #0
  401fec:	645a      	str	r2, [r3, #68]	; 0x44
  401fee:	68fb      	ldr	r3, [r7, #12]
  401ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ff6:	d102      	bne.n	401ffe <xQueueGenericReceive+0x116>
  401ff8:	68fb      	ldr	r3, [r7, #12]
  401ffa:	2200      	movs	r2, #0
  401ffc:	649a      	str	r2, [r3, #72]	; 0x48
  401ffe:	4b29      	ldr	r3, [pc, #164]	; (4020a4 <xQueueGenericReceive+0x1bc>)
  402000:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402002:	f107 0210 	add.w	r2, r7, #16
  402006:	1d3b      	adds	r3, r7, #4
  402008:	4610      	mov	r0, r2
  40200a:	4619      	mov	r1, r3
  40200c:	4b28      	ldr	r3, [pc, #160]	; (4020b0 <xQueueGenericReceive+0x1c8>)
  40200e:	4798      	blx	r3
  402010:	4603      	mov	r3, r0
  402012:	2b00      	cmp	r3, #0
  402014:	d12b      	bne.n	40206e <xQueueGenericReceive+0x186>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402016:	68f8      	ldr	r0, [r7, #12]
  402018:	4b26      	ldr	r3, [pc, #152]	; (4020b4 <xQueueGenericReceive+0x1cc>)
  40201a:	4798      	blx	r3
  40201c:	4603      	mov	r3, r0
  40201e:	2b00      	cmp	r3, #0
  402020:	d01f      	beq.n	402062 <xQueueGenericReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402022:	68fb      	ldr	r3, [r7, #12]
  402024:	681b      	ldr	r3, [r3, #0]
  402026:	2b00      	cmp	r3, #0
  402028:	d108      	bne.n	40203c <xQueueGenericReceive+0x154>
					{
						portENTER_CRITICAL();
  40202a:	4b19      	ldr	r3, [pc, #100]	; (402090 <xQueueGenericReceive+0x1a8>)
  40202c:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40202e:	68fb      	ldr	r3, [r7, #12]
  402030:	685b      	ldr	r3, [r3, #4]
  402032:	4618      	mov	r0, r3
  402034:	4b20      	ldr	r3, [pc, #128]	; (4020b8 <xQueueGenericReceive+0x1d0>)
  402036:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  402038:	4b1a      	ldr	r3, [pc, #104]	; (4020a4 <xQueueGenericReceive+0x1bc>)
  40203a:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40203c:	68fb      	ldr	r3, [r7, #12]
  40203e:	f103 0224 	add.w	r2, r3, #36	; 0x24
  402042:	687b      	ldr	r3, [r7, #4]
  402044:	4610      	mov	r0, r2
  402046:	4619      	mov	r1, r3
  402048:	4b1c      	ldr	r3, [pc, #112]	; (4020bc <xQueueGenericReceive+0x1d4>)
  40204a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40204c:	68f8      	ldr	r0, [r7, #12]
  40204e:	4b1c      	ldr	r3, [pc, #112]	; (4020c0 <xQueueGenericReceive+0x1d8>)
  402050:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402052:	4b1c      	ldr	r3, [pc, #112]	; (4020c4 <xQueueGenericReceive+0x1dc>)
  402054:	4798      	blx	r3
  402056:	4603      	mov	r3, r0
  402058:	2b00      	cmp	r3, #0
  40205a:	d10f      	bne.n	40207c <xQueueGenericReceive+0x194>
				{
					portYIELD_WITHIN_API();
  40205c:	4b10      	ldr	r3, [pc, #64]	; (4020a0 <xQueueGenericReceive+0x1b8>)
  40205e:	4798      	blx	r3
  402060:	e00c      	b.n	40207c <xQueueGenericReceive+0x194>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  402062:	68f8      	ldr	r0, [r7, #12]
  402064:	4b16      	ldr	r3, [pc, #88]	; (4020c0 <xQueueGenericReceive+0x1d8>)
  402066:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402068:	4b16      	ldr	r3, [pc, #88]	; (4020c4 <xQueueGenericReceive+0x1dc>)
  40206a:	4798      	blx	r3
  40206c:	e75e      	b.n	401f2c <xQueueGenericReceive+0x44>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  40206e:	68f8      	ldr	r0, [r7, #12]
  402070:	4b13      	ldr	r3, [pc, #76]	; (4020c0 <xQueueGenericReceive+0x1d8>)
  402072:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402074:	4b13      	ldr	r3, [pc, #76]	; (4020c4 <xQueueGenericReceive+0x1dc>)
  402076:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  402078:	2300      	movs	r3, #0
  40207a:	e000      	b.n	40207e <xQueueGenericReceive+0x196>
		}
	}
  40207c:	e756      	b.n	401f2c <xQueueGenericReceive+0x44>
}
  40207e:	4618      	mov	r0, r3
  402080:	3720      	adds	r7, #32
  402082:	46bd      	mov	sp, r7
  402084:	bd80      	pop	{r7, pc}
  402086:	bf00      	nop
  402088:	0040d128 	.word	0x0040d128
  40208c:	00409705 	.word	0x00409705
  402090:	0040177d 	.word	0x0040177d
  402094:	00402189 	.word	0x00402189
  402098:	00402f65 	.word	0x00402f65
  40209c:	00402add 	.word	0x00402add
  4020a0:	00401765 	.word	0x00401765
  4020a4:	00401799 	.word	0x00401799
  4020a8:	00402ba1 	.word	0x00402ba1
  4020ac:	00402595 	.word	0x00402595
  4020b0:	00402be1 	.word	0x00402be1
  4020b4:	00402281 	.word	0x00402281
  4020b8:	00402fc1 	.word	0x00402fc1
  4020bc:	004029ad 	.word	0x004029ad
  4020c0:	004021d9 	.word	0x004021d9
  4020c4:	004025b1 	.word	0x004025b1

004020c8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  4020c8:	b580      	push	{r7, lr}
  4020ca:	b084      	sub	sp, #16
  4020cc:	af00      	add	r7, sp, #0
  4020ce:	60f8      	str	r0, [r7, #12]
  4020d0:	60b9      	str	r1, [r7, #8]
  4020d2:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  4020d4:	68fb      	ldr	r3, [r7, #12]
  4020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4020d8:	2b00      	cmp	r3, #0
  4020da:	d10c      	bne.n	4020f6 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4020dc:	68fb      	ldr	r3, [r7, #12]
  4020de:	681b      	ldr	r3, [r3, #0]
  4020e0:	2b00      	cmp	r3, #0
  4020e2:	d145      	bne.n	402170 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4020e4:	68fb      	ldr	r3, [r7, #12]
  4020e6:	685b      	ldr	r3, [r3, #4]
  4020e8:	4618      	mov	r0, r3
  4020ea:	4b25      	ldr	r3, [pc, #148]	; (402180 <prvCopyDataToQueue+0xb8>)
  4020ec:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4020ee:	68fb      	ldr	r3, [r7, #12]
  4020f0:	2200      	movs	r2, #0
  4020f2:	605a      	str	r2, [r3, #4]
  4020f4:	e03c      	b.n	402170 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  4020f6:	687b      	ldr	r3, [r7, #4]
  4020f8:	2b00      	cmp	r3, #0
  4020fa:	d11a      	bne.n	402132 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  4020fc:	68fb      	ldr	r3, [r7, #12]
  4020fe:	689a      	ldr	r2, [r3, #8]
  402100:	68fb      	ldr	r3, [r7, #12]
  402102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  402104:	4610      	mov	r0, r2
  402106:	68b9      	ldr	r1, [r7, #8]
  402108:	461a      	mov	r2, r3
  40210a:	4b1e      	ldr	r3, [pc, #120]	; (402184 <prvCopyDataToQueue+0xbc>)
  40210c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40210e:	68fb      	ldr	r3, [r7, #12]
  402110:	689a      	ldr	r2, [r3, #8]
  402112:	68fb      	ldr	r3, [r7, #12]
  402114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  402116:	441a      	add	r2, r3
  402118:	68fb      	ldr	r3, [r7, #12]
  40211a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  40211c:	68fb      	ldr	r3, [r7, #12]
  40211e:	689a      	ldr	r2, [r3, #8]
  402120:	68fb      	ldr	r3, [r7, #12]
  402122:	685b      	ldr	r3, [r3, #4]
  402124:	429a      	cmp	r2, r3
  402126:	d323      	bcc.n	402170 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  402128:	68fb      	ldr	r3, [r7, #12]
  40212a:	681a      	ldr	r2, [r3, #0]
  40212c:	68fb      	ldr	r3, [r7, #12]
  40212e:	609a      	str	r2, [r3, #8]
  402130:	e01e      	b.n	402170 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  402132:	68fb      	ldr	r3, [r7, #12]
  402134:	68da      	ldr	r2, [r3, #12]
  402136:	68fb      	ldr	r3, [r7, #12]
  402138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40213a:	4610      	mov	r0, r2
  40213c:	68b9      	ldr	r1, [r7, #8]
  40213e:	461a      	mov	r2, r3
  402140:	4b10      	ldr	r3, [pc, #64]	; (402184 <prvCopyDataToQueue+0xbc>)
  402142:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  402144:	68fb      	ldr	r3, [r7, #12]
  402146:	68da      	ldr	r2, [r3, #12]
  402148:	68fb      	ldr	r3, [r7, #12]
  40214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40214c:	425b      	negs	r3, r3
  40214e:	441a      	add	r2, r3
  402150:	68fb      	ldr	r3, [r7, #12]
  402152:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  402154:	68fb      	ldr	r3, [r7, #12]
  402156:	68da      	ldr	r2, [r3, #12]
  402158:	68fb      	ldr	r3, [r7, #12]
  40215a:	681b      	ldr	r3, [r3, #0]
  40215c:	429a      	cmp	r2, r3
  40215e:	d207      	bcs.n	402170 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  402160:	68fb      	ldr	r3, [r7, #12]
  402162:	685a      	ldr	r2, [r3, #4]
  402164:	68fb      	ldr	r3, [r7, #12]
  402166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  402168:	425b      	negs	r3, r3
  40216a:	441a      	add	r2, r3
  40216c:	68fb      	ldr	r3, [r7, #12]
  40216e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  402170:	68fb      	ldr	r3, [r7, #12]
  402172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  402174:	1c5a      	adds	r2, r3, #1
  402176:	68fb      	ldr	r3, [r7, #12]
  402178:	639a      	str	r2, [r3, #56]	; 0x38
}
  40217a:	3710      	adds	r7, #16
  40217c:	46bd      	mov	sp, r7
  40217e:	bd80      	pop	{r7, pc}
  402180:	004030a5 	.word	0x004030a5
  402184:	0040a6e1 	.word	0x0040a6e1

00402188 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  402188:	b580      	push	{r7, lr}
  40218a:	b082      	sub	sp, #8
  40218c:	af00      	add	r7, sp, #0
  40218e:	6078      	str	r0, [r7, #4]
  402190:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  402192:	687b      	ldr	r3, [r7, #4]
  402194:	681b      	ldr	r3, [r3, #0]
  402196:	2b00      	cmp	r3, #0
  402198:	d019      	beq.n	4021ce <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  40219a:	687b      	ldr	r3, [r7, #4]
  40219c:	68da      	ldr	r2, [r3, #12]
  40219e:	687b      	ldr	r3, [r7, #4]
  4021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4021a2:	441a      	add	r2, r3
  4021a4:	687b      	ldr	r3, [r7, #4]
  4021a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	68da      	ldr	r2, [r3, #12]
  4021ac:	687b      	ldr	r3, [r7, #4]
  4021ae:	685b      	ldr	r3, [r3, #4]
  4021b0:	429a      	cmp	r2, r3
  4021b2:	d303      	bcc.n	4021bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  4021b4:	687b      	ldr	r3, [r7, #4]
  4021b6:	681a      	ldr	r2, [r3, #0]
  4021b8:	687b      	ldr	r3, [r7, #4]
  4021ba:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  4021bc:	687b      	ldr	r3, [r7, #4]
  4021be:	68da      	ldr	r2, [r3, #12]
  4021c0:	687b      	ldr	r3, [r7, #4]
  4021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4021c4:	6838      	ldr	r0, [r7, #0]
  4021c6:	4611      	mov	r1, r2
  4021c8:	461a      	mov	r2, r3
  4021ca:	4b02      	ldr	r3, [pc, #8]	; (4021d4 <prvCopyDataFromQueue+0x4c>)
  4021cc:	4798      	blx	r3
	}
}
  4021ce:	3708      	adds	r7, #8
  4021d0:	46bd      	mov	sp, r7
  4021d2:	bd80      	pop	{r7, pc}
  4021d4:	0040a6e1 	.word	0x0040a6e1

004021d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  4021d8:	b580      	push	{r7, lr}
  4021da:	b082      	sub	sp, #8
  4021dc:	af00      	add	r7, sp, #0
  4021de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  4021e0:	4b23      	ldr	r3, [pc, #140]	; (402270 <prvUnlockQueue+0x98>)
  4021e2:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4021e4:	e014      	b.n	402210 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4021e6:	687b      	ldr	r3, [r7, #4]
  4021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4021ea:	2b00      	cmp	r3, #0
  4021ec:	d00f      	beq.n	40220e <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4021ee:	687b      	ldr	r3, [r7, #4]
  4021f0:	3324      	adds	r3, #36	; 0x24
  4021f2:	4618      	mov	r0, r3
  4021f4:	4b1f      	ldr	r3, [pc, #124]	; (402274 <prvUnlockQueue+0x9c>)
  4021f6:	4798      	blx	r3
  4021f8:	4603      	mov	r3, r0
  4021fa:	2b00      	cmp	r3, #0
  4021fc:	d001      	beq.n	402202 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  4021fe:	4b1e      	ldr	r3, [pc, #120]	; (402278 <prvUnlockQueue+0xa0>)
  402200:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  402202:	687b      	ldr	r3, [r7, #4]
  402204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  402206:	1e5a      	subs	r2, r3, #1
  402208:	687b      	ldr	r3, [r7, #4]
  40220a:	649a      	str	r2, [r3, #72]	; 0x48
  40220c:	e000      	b.n	402210 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
  40220e:	e003      	b.n	402218 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402210:	687b      	ldr	r3, [r7, #4]
  402212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  402214:	2b00      	cmp	r3, #0
  402216:	dce6      	bgt.n	4021e6 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  402218:	687b      	ldr	r3, [r7, #4]
  40221a:	f04f 32ff 	mov.w	r2, #4294967295
  40221e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  402220:	4b16      	ldr	r3, [pc, #88]	; (40227c <prvUnlockQueue+0xa4>)
  402222:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  402224:	4b12      	ldr	r3, [pc, #72]	; (402270 <prvUnlockQueue+0x98>)
  402226:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402228:	e014      	b.n	402254 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40222a:	687b      	ldr	r3, [r7, #4]
  40222c:	691b      	ldr	r3, [r3, #16]
  40222e:	2b00      	cmp	r3, #0
  402230:	d00f      	beq.n	402252 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402232:	687b      	ldr	r3, [r7, #4]
  402234:	3310      	adds	r3, #16
  402236:	4618      	mov	r0, r3
  402238:	4b0e      	ldr	r3, [pc, #56]	; (402274 <prvUnlockQueue+0x9c>)
  40223a:	4798      	blx	r3
  40223c:	4603      	mov	r3, r0
  40223e:	2b00      	cmp	r3, #0
  402240:	d001      	beq.n	402246 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  402242:	4b0d      	ldr	r3, [pc, #52]	; (402278 <prvUnlockQueue+0xa0>)
  402244:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  402246:	687b      	ldr	r3, [r7, #4]
  402248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40224a:	1e5a      	subs	r2, r3, #1
  40224c:	687b      	ldr	r3, [r7, #4]
  40224e:	645a      	str	r2, [r3, #68]	; 0x44
  402250:	e000      	b.n	402254 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
  402252:	e003      	b.n	40225c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402254:	687b      	ldr	r3, [r7, #4]
  402256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  402258:	2b00      	cmp	r3, #0
  40225a:	dce6      	bgt.n	40222a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  40225c:	687b      	ldr	r3, [r7, #4]
  40225e:	f04f 32ff 	mov.w	r2, #4294967295
  402262:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  402264:	4b05      	ldr	r3, [pc, #20]	; (40227c <prvUnlockQueue+0xa4>)
  402266:	4798      	blx	r3
}
  402268:	3708      	adds	r7, #8
  40226a:	46bd      	mov	sp, r7
  40226c:	bd80      	pop	{r7, pc}
  40226e:	bf00      	nop
  402270:	0040177d 	.word	0x0040177d
  402274:	00402add 	.word	0x00402add
  402278:	00402c9d 	.word	0x00402c9d
  40227c:	00401799 	.word	0x00401799

00402280 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  402280:	b580      	push	{r7, lr}
  402282:	b084      	sub	sp, #16
  402284:	af00      	add	r7, sp, #0
  402286:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  402288:	4b08      	ldr	r3, [pc, #32]	; (4022ac <prvIsQueueEmpty+0x2c>)
  40228a:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  40228c:	687b      	ldr	r3, [r7, #4]
  40228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  402290:	2b00      	cmp	r3, #0
  402292:	bf0c      	ite	eq
  402294:	2301      	moveq	r3, #1
  402296:	2300      	movne	r3, #0
  402298:	b2db      	uxtb	r3, r3
  40229a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  40229c:	4b04      	ldr	r3, [pc, #16]	; (4022b0 <prvIsQueueEmpty+0x30>)
  40229e:	4798      	blx	r3

	return xReturn;
  4022a0:	68fb      	ldr	r3, [r7, #12]
}
  4022a2:	4618      	mov	r0, r3
  4022a4:	3710      	adds	r7, #16
  4022a6:	46bd      	mov	sp, r7
  4022a8:	bd80      	pop	{r7, pc}
  4022aa:	bf00      	nop
  4022ac:	0040177d 	.word	0x0040177d
  4022b0:	00401799 	.word	0x00401799

004022b4 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  4022b4:	b580      	push	{r7, lr}
  4022b6:	b084      	sub	sp, #16
  4022b8:	af00      	add	r7, sp, #0
  4022ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4022bc:	4b09      	ldr	r3, [pc, #36]	; (4022e4 <prvIsQueueFull+0x30>)
  4022be:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  4022c0:	687b      	ldr	r3, [r7, #4]
  4022c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4022c4:	687b      	ldr	r3, [r7, #4]
  4022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4022c8:	429a      	cmp	r2, r3
  4022ca:	bf0c      	ite	eq
  4022cc:	2301      	moveq	r3, #1
  4022ce:	2300      	movne	r3, #0
  4022d0:	b2db      	uxtb	r3, r3
  4022d2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  4022d4:	4b04      	ldr	r3, [pc, #16]	; (4022e8 <prvIsQueueFull+0x34>)
  4022d6:	4798      	blx	r3

	return xReturn;
  4022d8:	68fb      	ldr	r3, [r7, #12]
}
  4022da:	4618      	mov	r0, r3
  4022dc:	3710      	adds	r7, #16
  4022de:	46bd      	mov	sp, r7
  4022e0:	bd80      	pop	{r7, pc}
  4022e2:	bf00      	nop
  4022e4:	0040177d 	.word	0x0040177d
  4022e8:	00401799 	.word	0x00401799

004022ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  4022ec:	b580      	push	{r7, lr}
  4022ee:	b082      	sub	sp, #8
  4022f0:	af00      	add	r7, sp, #0
  4022f2:	6078      	str	r0, [r7, #4]
  4022f4:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  4022f6:	4b12      	ldr	r3, [pc, #72]	; (402340 <vQueueWaitForMessageRestricted+0x54>)
  4022f8:	4798      	blx	r3
  4022fa:	687b      	ldr	r3, [r7, #4]
  4022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  402302:	d102      	bne.n	40230a <vQueueWaitForMessageRestricted+0x1e>
  402304:	687b      	ldr	r3, [r7, #4]
  402306:	2200      	movs	r2, #0
  402308:	645a      	str	r2, [r3, #68]	; 0x44
  40230a:	687b      	ldr	r3, [r7, #4]
  40230c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40230e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402312:	d102      	bne.n	40231a <vQueueWaitForMessageRestricted+0x2e>
  402314:	687b      	ldr	r3, [r7, #4]
  402316:	2200      	movs	r2, #0
  402318:	649a      	str	r2, [r3, #72]	; 0x48
  40231a:	4b0a      	ldr	r3, [pc, #40]	; (402344 <vQueueWaitForMessageRestricted+0x58>)
  40231c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  40231e:	687b      	ldr	r3, [r7, #4]
  402320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  402322:	2b00      	cmp	r3, #0
  402324:	d105      	bne.n	402332 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402326:	687b      	ldr	r3, [r7, #4]
  402328:	3324      	adds	r3, #36	; 0x24
  40232a:	4618      	mov	r0, r3
  40232c:	6839      	ldr	r1, [r7, #0]
  40232e:	4b06      	ldr	r3, [pc, #24]	; (402348 <vQueueWaitForMessageRestricted+0x5c>)
  402330:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  402332:	6878      	ldr	r0, [r7, #4]
  402334:	4b05      	ldr	r3, [pc, #20]	; (40234c <vQueueWaitForMessageRestricted+0x60>)
  402336:	4798      	blx	r3
	}
  402338:	3708      	adds	r7, #8
  40233a:	46bd      	mov	sp, r7
  40233c:	bd80      	pop	{r7, pc}
  40233e:	bf00      	nop
  402340:	0040177d 	.word	0x0040177d
  402344:	00401799 	.word	0x00401799
  402348:	00402a55 	.word	0x00402a55
  40234c:	004021d9 	.word	0x004021d9

00402350 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  402350:	b590      	push	{r4, r7, lr}
  402352:	b08b      	sub	sp, #44	; 0x2c
  402354:	af02      	add	r7, sp, #8
  402356:	60f8      	str	r0, [r7, #12]
  402358:	60b9      	str	r1, [r7, #8]
  40235a:	603b      	str	r3, [r7, #0]
  40235c:	4613      	mov	r3, r2
  40235e:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  402360:	68fb      	ldr	r3, [r7, #12]
  402362:	2b00      	cmp	r3, #0
  402364:	d104      	bne.n	402370 <xTaskGenericCreate+0x20>
  402366:	4856      	ldr	r0, [pc, #344]	; (4024c0 <xTaskGenericCreate+0x170>)
  402368:	f240 11eb 	movw	r1, #491	; 0x1eb
  40236c:	4b55      	ldr	r3, [pc, #340]	; (4024c4 <xTaskGenericCreate+0x174>)
  40236e:	4798      	blx	r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  402370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402372:	2b0e      	cmp	r3, #14
  402374:	d904      	bls.n	402380 <xTaskGenericCreate+0x30>
  402376:	4852      	ldr	r0, [pc, #328]	; (4024c0 <xTaskGenericCreate+0x170>)
  402378:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
  40237c:	4b51      	ldr	r3, [pc, #324]	; (4024c4 <xTaskGenericCreate+0x174>)
  40237e:	4798      	blx	r3

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  402380:	88fb      	ldrh	r3, [r7, #6]
  402382:	4618      	mov	r0, r3
  402384:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  402386:	4b50      	ldr	r3, [pc, #320]	; (4024c8 <xTaskGenericCreate+0x178>)
  402388:	4798      	blx	r3
  40238a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  40238c:	69bb      	ldr	r3, [r7, #24]
  40238e:	2b00      	cmp	r3, #0
  402390:	d07f      	beq.n	402492 <xTaskGenericCreate+0x142>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  402392:	69bb      	ldr	r3, [r7, #24]
  402394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402396:	88fb      	ldrh	r3, [r7, #6]
  402398:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  40239c:	3b01      	subs	r3, #1
  40239e:	009b      	lsls	r3, r3, #2
  4023a0:	4413      	add	r3, r2
  4023a2:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  4023a4:	697b      	ldr	r3, [r7, #20]
  4023a6:	f023 0307 	bic.w	r3, r3, #7
  4023aa:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  4023ac:	697b      	ldr	r3, [r7, #20]
  4023ae:	f003 0307 	and.w	r3, r3, #7
  4023b2:	2b00      	cmp	r3, #0
  4023b4:	d004      	beq.n	4023c0 <xTaskGenericCreate+0x70>
  4023b6:	4842      	ldr	r0, [pc, #264]	; (4024c0 <xTaskGenericCreate+0x170>)
  4023b8:	f240 210e 	movw	r1, #526	; 0x20e
  4023bc:	4b41      	ldr	r3, [pc, #260]	; (4024c4 <xTaskGenericCreate+0x174>)
  4023be:	4798      	blx	r3
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  4023c0:	88fb      	ldrh	r3, [r7, #6]
  4023c2:	9300      	str	r3, [sp, #0]
  4023c4:	69b8      	ldr	r0, [r7, #24]
  4023c6:	68b9      	ldr	r1, [r7, #8]
  4023c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4023ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4023cc:	4c3f      	ldr	r4, [pc, #252]	; (4024cc <xTaskGenericCreate+0x17c>)
  4023ce:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4023d0:	6978      	ldr	r0, [r7, #20]
  4023d2:	68f9      	ldr	r1, [r7, #12]
  4023d4:	683a      	ldr	r2, [r7, #0]
  4023d6:	4b3e      	ldr	r3, [pc, #248]	; (4024d0 <xTaskGenericCreate+0x180>)
  4023d8:	4798      	blx	r3
  4023da:	4602      	mov	r2, r0
  4023dc:	69bb      	ldr	r3, [r7, #24]
  4023de:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  4023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4023e2:	2b00      	cmp	r3, #0
  4023e4:	d002      	beq.n	4023ec <xTaskGenericCreate+0x9c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  4023e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4023e8:	69ba      	ldr	r2, [r7, #24]
  4023ea:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  4023ec:	4b39      	ldr	r3, [pc, #228]	; (4024d4 <xTaskGenericCreate+0x184>)
  4023ee:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4023f0:	4b39      	ldr	r3, [pc, #228]	; (4024d8 <xTaskGenericCreate+0x188>)
  4023f2:	681b      	ldr	r3, [r3, #0]
  4023f4:	3301      	adds	r3, #1
  4023f6:	4a38      	ldr	r2, [pc, #224]	; (4024d8 <xTaskGenericCreate+0x188>)
  4023f8:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4023fa:	4b38      	ldr	r3, [pc, #224]	; (4024dc <xTaskGenericCreate+0x18c>)
  4023fc:	681b      	ldr	r3, [r3, #0]
  4023fe:	2b00      	cmp	r3, #0
  402400:	d109      	bne.n	402416 <xTaskGenericCreate+0xc6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  402402:	4a36      	ldr	r2, [pc, #216]	; (4024dc <xTaskGenericCreate+0x18c>)
  402404:	69bb      	ldr	r3, [r7, #24]
  402406:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  402408:	4b33      	ldr	r3, [pc, #204]	; (4024d8 <xTaskGenericCreate+0x188>)
  40240a:	681b      	ldr	r3, [r3, #0]
  40240c:	2b01      	cmp	r3, #1
  40240e:	d10f      	bne.n	402430 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  402410:	4b33      	ldr	r3, [pc, #204]	; (4024e0 <xTaskGenericCreate+0x190>)
  402412:	4798      	blx	r3
  402414:	e00c      	b.n	402430 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  402416:	4b33      	ldr	r3, [pc, #204]	; (4024e4 <xTaskGenericCreate+0x194>)
  402418:	681b      	ldr	r3, [r3, #0]
  40241a:	2b00      	cmp	r3, #0
  40241c:	d108      	bne.n	402430 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40241e:	4b2f      	ldr	r3, [pc, #188]	; (4024dc <xTaskGenericCreate+0x18c>)
  402420:	681b      	ldr	r3, [r3, #0]
  402422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402426:	429a      	cmp	r2, r3
  402428:	d802      	bhi.n	402430 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
  40242a:	4a2c      	ldr	r2, [pc, #176]	; (4024dc <xTaskGenericCreate+0x18c>)
  40242c:	69bb      	ldr	r3, [r7, #24]
  40242e:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  402430:	69bb      	ldr	r3, [r7, #24]
  402432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402434:	4b2c      	ldr	r3, [pc, #176]	; (4024e8 <xTaskGenericCreate+0x198>)
  402436:	681b      	ldr	r3, [r3, #0]
  402438:	429a      	cmp	r2, r3
  40243a:	d903      	bls.n	402444 <xTaskGenericCreate+0xf4>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  40243c:	69bb      	ldr	r3, [r7, #24]
  40243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402440:	4a29      	ldr	r2, [pc, #164]	; (4024e8 <xTaskGenericCreate+0x198>)
  402442:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402444:	4b29      	ldr	r3, [pc, #164]	; (4024ec <xTaskGenericCreate+0x19c>)
  402446:	681a      	ldr	r2, [r3, #0]
  402448:	69bb      	ldr	r3, [r7, #24]
  40244a:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  40244c:	4b27      	ldr	r3, [pc, #156]	; (4024ec <xTaskGenericCreate+0x19c>)
  40244e:	681b      	ldr	r3, [r3, #0]
  402450:	3301      	adds	r3, #1
  402452:	4a26      	ldr	r2, [pc, #152]	; (4024ec <xTaskGenericCreate+0x19c>)
  402454:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  402456:	69bb      	ldr	r3, [r7, #24]
  402458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40245a:	461a      	mov	r2, r3
  40245c:	2301      	movs	r3, #1
  40245e:	fa03 f202 	lsl.w	r2, r3, r2
  402462:	4b23      	ldr	r3, [pc, #140]	; (4024f0 <xTaskGenericCreate+0x1a0>)
  402464:	681b      	ldr	r3, [r3, #0]
  402466:	4313      	orrs	r3, r2
  402468:	4a21      	ldr	r2, [pc, #132]	; (4024f0 <xTaskGenericCreate+0x1a0>)
  40246a:	6013      	str	r3, [r2, #0]
  40246c:	69bb      	ldr	r3, [r7, #24]
  40246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402470:	4613      	mov	r3, r2
  402472:	009b      	lsls	r3, r3, #2
  402474:	4413      	add	r3, r2
  402476:	009b      	lsls	r3, r3, #2
  402478:	4a1e      	ldr	r2, [pc, #120]	; (4024f4 <xTaskGenericCreate+0x1a4>)
  40247a:	441a      	add	r2, r3
  40247c:	69bb      	ldr	r3, [r7, #24]
  40247e:	3304      	adds	r3, #4
  402480:	4610      	mov	r0, r2
  402482:	4619      	mov	r1, r3
  402484:	4b1c      	ldr	r3, [pc, #112]	; (4024f8 <xTaskGenericCreate+0x1a8>)
  402486:	4798      	blx	r3

			xReturn = pdPASS;
  402488:	2301      	movs	r3, #1
  40248a:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  40248c:	4b1b      	ldr	r3, [pc, #108]	; (4024fc <xTaskGenericCreate+0x1ac>)
  40248e:	4798      	blx	r3
  402490:	e002      	b.n	402498 <xTaskGenericCreate+0x148>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402492:	f04f 33ff 	mov.w	r3, #4294967295
  402496:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  402498:	69fb      	ldr	r3, [r7, #28]
  40249a:	2b01      	cmp	r3, #1
  40249c:	d10b      	bne.n	4024b6 <xTaskGenericCreate+0x166>
	{
		if( xSchedulerRunning != pdFALSE )
  40249e:	4b11      	ldr	r3, [pc, #68]	; (4024e4 <xTaskGenericCreate+0x194>)
  4024a0:	681b      	ldr	r3, [r3, #0]
  4024a2:	2b00      	cmp	r3, #0
  4024a4:	d007      	beq.n	4024b6 <xTaskGenericCreate+0x166>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4024a6:	4b0d      	ldr	r3, [pc, #52]	; (4024dc <xTaskGenericCreate+0x18c>)
  4024a8:	681b      	ldr	r3, [r3, #0]
  4024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4024ae:	429a      	cmp	r2, r3
  4024b0:	d201      	bcs.n	4024b6 <xTaskGenericCreate+0x166>
			{
				portYIELD_WITHIN_API();
  4024b2:	4b13      	ldr	r3, [pc, #76]	; (402500 <xTaskGenericCreate+0x1b0>)
  4024b4:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  4024b6:	69fb      	ldr	r3, [r7, #28]
}
  4024b8:	4618      	mov	r0, r3
  4024ba:	3724      	adds	r7, #36	; 0x24
  4024bc:	46bd      	mov	sp, r7
  4024be:	bd90      	pop	{r4, r7, pc}
  4024c0:	0040d168 	.word	0x0040d168
  4024c4:	00409705 	.word	0x00409705
  4024c8:	00402ed1 	.word	0x00402ed1
  4024cc:	00402cdd 	.word	0x00402cdd
  4024d0:	0040167d 	.word	0x0040167d
  4024d4:	0040177d 	.word	0x0040177d
  4024d8:	20019434 	.word	0x20019434
  4024dc:	20019294 	.word	0x20019294
  4024e0:	00402d55 	.word	0x00402d55
  4024e4:	20019444 	.word	0x20019444
  4024e8:	2001943c 	.word	0x2001943c
  4024ec:	20019458 	.word	0x20019458
  4024f0:	20019440 	.word	0x20019440
  4024f4:	20019298 	.word	0x20019298
  4024f8:	004014c5 	.word	0x004014c5
  4024fc:	00401799 	.word	0x00401799
  402500:	00401765 	.word	0x00401765

00402504 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  402504:	b590      	push	{r4, r7, lr}
  402506:	b087      	sub	sp, #28
  402508:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  40250a:	2300      	movs	r3, #0
  40250c:	9300      	str	r3, [sp, #0]
  40250e:	2300      	movs	r3, #0
  402510:	9301      	str	r3, [sp, #4]
  402512:	2300      	movs	r3, #0
  402514:	9302      	str	r3, [sp, #8]
  402516:	2300      	movs	r3, #0
  402518:	9303      	str	r3, [sp, #12]
  40251a:	4813      	ldr	r0, [pc, #76]	; (402568 <vTaskStartScheduler+0x64>)
  40251c:	4913      	ldr	r1, [pc, #76]	; (40256c <vTaskStartScheduler+0x68>)
  40251e:	2282      	movs	r2, #130	; 0x82
  402520:	2300      	movs	r3, #0
  402522:	4c13      	ldr	r4, [pc, #76]	; (402570 <vTaskStartScheduler+0x6c>)
  402524:	47a0      	blx	r4
  402526:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  402528:	687b      	ldr	r3, [r7, #4]
  40252a:	2b01      	cmp	r3, #1
  40252c:	d102      	bne.n	402534 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  40252e:	4b11      	ldr	r3, [pc, #68]	; (402574 <vTaskStartScheduler+0x70>)
  402530:	4798      	blx	r3
  402532:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  402534:	687b      	ldr	r3, [r7, #4]
  402536:	2b01      	cmp	r3, #1
  402538:	d10b      	bne.n	402552 <vTaskStartScheduler+0x4e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  40253a:	4b0f      	ldr	r3, [pc, #60]	; (402578 <vTaskStartScheduler+0x74>)
  40253c:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  40253e:	4b0f      	ldr	r3, [pc, #60]	; (40257c <vTaskStartScheduler+0x78>)
  402540:	2201      	movs	r2, #1
  402542:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  402544:	4b0e      	ldr	r3, [pc, #56]	; (402580 <vTaskStartScheduler+0x7c>)
  402546:	2200      	movs	r2, #0
  402548:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
  40254a:	4b0e      	ldr	r3, [pc, #56]	; (402584 <vTaskStartScheduler+0x80>)
  40254c:	4798      	blx	r3

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  40254e:	4b0e      	ldr	r3, [pc, #56]	; (402588 <vTaskStartScheduler+0x84>)
  402550:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  402552:	687b      	ldr	r3, [r7, #4]
  402554:	2b00      	cmp	r3, #0
  402556:	d104      	bne.n	402562 <vTaskStartScheduler+0x5e>
  402558:	480c      	ldr	r0, [pc, #48]	; (40258c <vTaskStartScheduler+0x88>)
  40255a:	f240 5113 	movw	r1, #1299	; 0x513
  40255e:	4b0c      	ldr	r3, [pc, #48]	; (402590 <vTaskStartScheduler+0x8c>)
  402560:	4798      	blx	r3
}
  402562:	370c      	adds	r7, #12
  402564:	46bd      	mov	sp, r7
  402566:	bd90      	pop	{r4, r7, pc}
  402568:	00402cb5 	.word	0x00402cb5
  40256c:	0040d1a8 	.word	0x0040d1a8
  402570:	00402351 	.word	0x00402351
  402574:	0040315d 	.word	0x0040315d
  402578:	004017c1 	.word	0x004017c1
  40257c:	20019444 	.word	0x20019444
  402580:	20019438 	.word	0x20019438
  402584:	00400249 	.word	0x00400249
  402588:	0040170d 	.word	0x0040170d
  40258c:	0040d168 	.word	0x0040d168
  402590:	00409705 	.word	0x00409705

00402594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  402594:	b480      	push	{r7}
  402596:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  402598:	4b04      	ldr	r3, [pc, #16]	; (4025ac <vTaskSuspendAll+0x18>)
  40259a:	681b      	ldr	r3, [r3, #0]
  40259c:	3301      	adds	r3, #1
  40259e:	4a03      	ldr	r2, [pc, #12]	; (4025ac <vTaskSuspendAll+0x18>)
  4025a0:	6013      	str	r3, [r2, #0]
}
  4025a2:	46bd      	mov	sp, r7
  4025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025a8:	4770      	bx	lr
  4025aa:	bf00      	nop
  4025ac:	20019448 	.word	0x20019448

004025b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  4025b0:	b590      	push	{r4, r7, lr}
  4025b2:	b083      	sub	sp, #12
  4025b4:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4025b6:	2300      	movs	r3, #0
  4025b8:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  4025ba:	4b38      	ldr	r3, [pc, #224]	; (40269c <xTaskResumeAll+0xec>)
  4025bc:	681b      	ldr	r3, [r3, #0]
  4025be:	2b00      	cmp	r3, #0
  4025c0:	d104      	bne.n	4025cc <xTaskResumeAll+0x1c>
  4025c2:	4837      	ldr	r0, [pc, #220]	; (4026a0 <xTaskResumeAll+0xf0>)
  4025c4:	f240 514d 	movw	r1, #1357	; 0x54d
  4025c8:	4b36      	ldr	r3, [pc, #216]	; (4026a4 <xTaskResumeAll+0xf4>)
  4025ca:	4798      	blx	r3
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  4025cc:	4b36      	ldr	r3, [pc, #216]	; (4026a8 <xTaskResumeAll+0xf8>)
  4025ce:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  4025d0:	4b32      	ldr	r3, [pc, #200]	; (40269c <xTaskResumeAll+0xec>)
  4025d2:	681b      	ldr	r3, [r3, #0]
  4025d4:	3b01      	subs	r3, #1
  4025d6:	4a31      	ldr	r2, [pc, #196]	; (40269c <xTaskResumeAll+0xec>)
  4025d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4025da:	4b30      	ldr	r3, [pc, #192]	; (40269c <xTaskResumeAll+0xec>)
  4025dc:	681b      	ldr	r3, [r3, #0]
  4025de:	2b00      	cmp	r3, #0
  4025e0:	d154      	bne.n	40268c <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  4025e2:	4b32      	ldr	r3, [pc, #200]	; (4026ac <xTaskResumeAll+0xfc>)
  4025e4:	681b      	ldr	r3, [r3, #0]
  4025e6:	2b00      	cmp	r3, #0
  4025e8:	d050      	beq.n	40268c <xTaskResumeAll+0xdc>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  4025ea:	2300      	movs	r3, #0
  4025ec:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4025ee:	e029      	b.n	402644 <xTaskResumeAll+0x94>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  4025f0:	4b2f      	ldr	r3, [pc, #188]	; (4026b0 <xTaskResumeAll+0x100>)
  4025f2:	68db      	ldr	r3, [r3, #12]
  4025f4:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  4025f6:	f104 0318 	add.w	r3, r4, #24
  4025fa:	4618      	mov	r0, r3
  4025fc:	4b2d      	ldr	r3, [pc, #180]	; (4026b4 <xTaskResumeAll+0x104>)
  4025fe:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  402600:	1d23      	adds	r3, r4, #4
  402602:	4618      	mov	r0, r3
  402604:	4b2b      	ldr	r3, [pc, #172]	; (4026b4 <xTaskResumeAll+0x104>)
  402606:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  402608:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40260a:	461a      	mov	r2, r3
  40260c:	2301      	movs	r3, #1
  40260e:	fa03 f202 	lsl.w	r2, r3, r2
  402612:	4b29      	ldr	r3, [pc, #164]	; (4026b8 <xTaskResumeAll+0x108>)
  402614:	681b      	ldr	r3, [r3, #0]
  402616:	4313      	orrs	r3, r2
  402618:	4a27      	ldr	r2, [pc, #156]	; (4026b8 <xTaskResumeAll+0x108>)
  40261a:	6013      	str	r3, [r2, #0]
  40261c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40261e:	4613      	mov	r3, r2
  402620:	009b      	lsls	r3, r3, #2
  402622:	4413      	add	r3, r2
  402624:	009b      	lsls	r3, r3, #2
  402626:	4a25      	ldr	r2, [pc, #148]	; (4026bc <xTaskResumeAll+0x10c>)
  402628:	441a      	add	r2, r3
  40262a:	1d23      	adds	r3, r4, #4
  40262c:	4610      	mov	r0, r2
  40262e:	4619      	mov	r1, r3
  402630:	4b23      	ldr	r3, [pc, #140]	; (4026c0 <xTaskResumeAll+0x110>)
  402632:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402634:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402636:	4b23      	ldr	r3, [pc, #140]	; (4026c4 <xTaskResumeAll+0x114>)
  402638:	681b      	ldr	r3, [r3, #0]
  40263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40263c:	429a      	cmp	r2, r3
  40263e:	d301      	bcc.n	402644 <xTaskResumeAll+0x94>
					{
						xYieldRequired = pdTRUE;
  402640:	2301      	movs	r3, #1
  402642:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  402644:	4b1a      	ldr	r3, [pc, #104]	; (4026b0 <xTaskResumeAll+0x100>)
  402646:	681b      	ldr	r3, [r3, #0]
  402648:	2b00      	cmp	r3, #0
  40264a:	d1d1      	bne.n	4025f0 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40264c:	4b1e      	ldr	r3, [pc, #120]	; (4026c8 <xTaskResumeAll+0x118>)
  40264e:	681b      	ldr	r3, [r3, #0]
  402650:	2b00      	cmp	r3, #0
  402652:	d00d      	beq.n	402670 <xTaskResumeAll+0xc0>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  402654:	e006      	b.n	402664 <xTaskResumeAll+0xb4>
					{
						vTaskIncrementTick();
  402656:	4b1d      	ldr	r3, [pc, #116]	; (4026cc <xTaskResumeAll+0x11c>)
  402658:	4798      	blx	r3
						--uxMissedTicks;
  40265a:	4b1b      	ldr	r3, [pc, #108]	; (4026c8 <xTaskResumeAll+0x118>)
  40265c:	681b      	ldr	r3, [r3, #0]
  40265e:	3b01      	subs	r3, #1
  402660:	4a19      	ldr	r2, [pc, #100]	; (4026c8 <xTaskResumeAll+0x118>)
  402662:	6013      	str	r3, [r2, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  402664:	4b18      	ldr	r3, [pc, #96]	; (4026c8 <xTaskResumeAll+0x118>)
  402666:	681b      	ldr	r3, [r3, #0]
  402668:	2b00      	cmp	r3, #0
  40266a:	d1f4      	bne.n	402656 <xTaskResumeAll+0xa6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  40266c:	2301      	movs	r3, #1
  40266e:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  402670:	683b      	ldr	r3, [r7, #0]
  402672:	2b01      	cmp	r3, #1
  402674:	d003      	beq.n	40267e <xTaskResumeAll+0xce>
  402676:	4b16      	ldr	r3, [pc, #88]	; (4026d0 <xTaskResumeAll+0x120>)
  402678:	681b      	ldr	r3, [r3, #0]
  40267a:	2b01      	cmp	r3, #1
  40267c:	d106      	bne.n	40268c <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
  40267e:	2301      	movs	r3, #1
  402680:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  402682:	4b13      	ldr	r3, [pc, #76]	; (4026d0 <xTaskResumeAll+0x120>)
  402684:	2200      	movs	r2, #0
  402686:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  402688:	4b12      	ldr	r3, [pc, #72]	; (4026d4 <xTaskResumeAll+0x124>)
  40268a:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  40268c:	4b12      	ldr	r3, [pc, #72]	; (4026d8 <xTaskResumeAll+0x128>)
  40268e:	4798      	blx	r3

	return xAlreadyYielded;
  402690:	687b      	ldr	r3, [r7, #4]
}
  402692:	4618      	mov	r0, r3
  402694:	370c      	adds	r7, #12
  402696:	46bd      	mov	sp, r7
  402698:	bd90      	pop	{r4, r7, pc}
  40269a:	bf00      	nop
  40269c:	20019448 	.word	0x20019448
  4026a0:	0040d168 	.word	0x0040d168
  4026a4:	00409705 	.word	0x00409705
  4026a8:	0040177d 	.word	0x0040177d
  4026ac:	20019434 	.word	0x20019434
  4026b0:	200193f4 	.word	0x200193f4
  4026b4:	00401585 	.word	0x00401585
  4026b8:	20019440 	.word	0x20019440
  4026bc:	20019298 	.word	0x20019298
  4026c0:	004014c5 	.word	0x004014c5
  4026c4:	20019294 	.word	0x20019294
  4026c8:	2001944c 	.word	0x2001944c
  4026cc:	00402739 	.word	0x00402739
  4026d0:	20019450 	.word	0x20019450
  4026d4:	00401765 	.word	0x00401765
  4026d8:	00401799 	.word	0x00401799

004026dc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  4026dc:	b580      	push	{r7, lr}
  4026de:	b082      	sub	sp, #8
  4026e0:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  4026e2:	4b06      	ldr	r3, [pc, #24]	; (4026fc <xTaskGetTickCount+0x20>)
  4026e4:	4798      	blx	r3
	{
		xTicks = xTickCount;
  4026e6:	4b06      	ldr	r3, [pc, #24]	; (402700 <xTaskGetTickCount+0x24>)
  4026e8:	681b      	ldr	r3, [r3, #0]
  4026ea:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  4026ec:	4b05      	ldr	r3, [pc, #20]	; (402704 <xTaskGetTickCount+0x28>)
  4026ee:	4798      	blx	r3

	return xTicks;
  4026f0:	687b      	ldr	r3, [r7, #4]
}
  4026f2:	4618      	mov	r0, r3
  4026f4:	3708      	adds	r7, #8
  4026f6:	46bd      	mov	sp, r7
  4026f8:	bd80      	pop	{r7, pc}
  4026fa:	bf00      	nop
  4026fc:	0040177d 	.word	0x0040177d
  402700:	20019438 	.word	0x20019438
  402704:	00401799 	.word	0x00401799

00402708 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
  402708:	b580      	push	{r7, lr}
  40270a:	b082      	sub	sp, #8
  40270c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  40270e:	4b07      	ldr	r3, [pc, #28]	; (40272c <xTaskGetTickCountFromISR+0x24>)
  402710:	4798      	blx	r3
  402712:	6078      	str	r0, [r7, #4]
	xReturn = xTickCount;
  402714:	4b06      	ldr	r3, [pc, #24]	; (402730 <xTaskGetTickCountFromISR+0x28>)
  402716:	681b      	ldr	r3, [r3, #0]
  402718:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  40271a:	6878      	ldr	r0, [r7, #4]
  40271c:	4b05      	ldr	r3, [pc, #20]	; (402734 <xTaskGetTickCountFromISR+0x2c>)
  40271e:	4798      	blx	r3

	return xReturn;
  402720:	683b      	ldr	r3, [r7, #0]
}
  402722:	4618      	mov	r0, r3
  402724:	3708      	adds	r7, #8
  402726:	46bd      	mov	sp, r7
  402728:	bd80      	pop	{r7, pc}
  40272a:	bf00      	nop
  40272c:	004017c1 	.word	0x004017c1
  402730:	20019438 	.word	0x20019438
  402734:	004017d5 	.word	0x004017d5

00402738 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  402738:	b580      	push	{r7, lr}
  40273a:	b084      	sub	sp, #16
  40273c:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40273e:	4b45      	ldr	r3, [pc, #276]	; (402854 <vTaskIncrementTick+0x11c>)
  402740:	681b      	ldr	r3, [r3, #0]
  402742:	2b00      	cmp	r3, #0
  402744:	d17e      	bne.n	402844 <vTaskIncrementTick+0x10c>
	{
		++xTickCount;
  402746:	4b44      	ldr	r3, [pc, #272]	; (402858 <vTaskIncrementTick+0x120>)
  402748:	681b      	ldr	r3, [r3, #0]
  40274a:	3301      	adds	r3, #1
  40274c:	4a42      	ldr	r2, [pc, #264]	; (402858 <vTaskIncrementTick+0x120>)
  40274e:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  402750:	4b41      	ldr	r3, [pc, #260]	; (402858 <vTaskIncrementTick+0x120>)
  402752:	681b      	ldr	r3, [r3, #0]
  402754:	2b00      	cmp	r3, #0
  402756:	d12b      	bne.n	4027b0 <vTaskIncrementTick+0x78>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  402758:	4b40      	ldr	r3, [pc, #256]	; (40285c <vTaskIncrementTick+0x124>)
  40275a:	681b      	ldr	r3, [r3, #0]
  40275c:	681b      	ldr	r3, [r3, #0]
  40275e:	2b00      	cmp	r3, #0
  402760:	d004      	beq.n	40276c <vTaskIncrementTick+0x34>
  402762:	483f      	ldr	r0, [pc, #252]	; (402860 <vTaskIncrementTick+0x128>)
  402764:	f240 618c 	movw	r1, #1676	; 0x68c
  402768:	4b3e      	ldr	r3, [pc, #248]	; (402864 <vTaskIncrementTick+0x12c>)
  40276a:	4798      	blx	r3

			pxTemp = pxDelayedTaskList;
  40276c:	4b3b      	ldr	r3, [pc, #236]	; (40285c <vTaskIncrementTick+0x124>)
  40276e:	681b      	ldr	r3, [r3, #0]
  402770:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  402772:	4b3d      	ldr	r3, [pc, #244]	; (402868 <vTaskIncrementTick+0x130>)
  402774:	681b      	ldr	r3, [r3, #0]
  402776:	4a39      	ldr	r2, [pc, #228]	; (40285c <vTaskIncrementTick+0x124>)
  402778:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  40277a:	4a3b      	ldr	r2, [pc, #236]	; (402868 <vTaskIncrementTick+0x130>)
  40277c:	68fb      	ldr	r3, [r7, #12]
  40277e:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  402780:	4b3a      	ldr	r3, [pc, #232]	; (40286c <vTaskIncrementTick+0x134>)
  402782:	681b      	ldr	r3, [r3, #0]
  402784:	3301      	adds	r3, #1
  402786:	4a39      	ldr	r2, [pc, #228]	; (40286c <vTaskIncrementTick+0x134>)
  402788:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40278a:	4b34      	ldr	r3, [pc, #208]	; (40285c <vTaskIncrementTick+0x124>)
  40278c:	681b      	ldr	r3, [r3, #0]
  40278e:	681b      	ldr	r3, [r3, #0]
  402790:	2b00      	cmp	r3, #0
  402792:	d104      	bne.n	40279e <vTaskIncrementTick+0x66>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  402794:	4b36      	ldr	r3, [pc, #216]	; (402870 <vTaskIncrementTick+0x138>)
  402796:	f04f 32ff 	mov.w	r2, #4294967295
  40279a:	601a      	str	r2, [r3, #0]
  40279c:	e008      	b.n	4027b0 <vTaskIncrementTick+0x78>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40279e:	4b2f      	ldr	r3, [pc, #188]	; (40285c <vTaskIncrementTick+0x124>)
  4027a0:	681b      	ldr	r3, [r3, #0]
  4027a2:	68db      	ldr	r3, [r3, #12]
  4027a4:	68db      	ldr	r3, [r3, #12]
  4027a6:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4027a8:	68bb      	ldr	r3, [r7, #8]
  4027aa:	685b      	ldr	r3, [r3, #4]
  4027ac:	4a30      	ldr	r2, [pc, #192]	; (402870 <vTaskIncrementTick+0x138>)
  4027ae:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  4027b0:	4b29      	ldr	r3, [pc, #164]	; (402858 <vTaskIncrementTick+0x120>)
  4027b2:	681a      	ldr	r2, [r3, #0]
  4027b4:	4b2e      	ldr	r3, [pc, #184]	; (402870 <vTaskIncrementTick+0x138>)
  4027b6:	681b      	ldr	r3, [r3, #0]
  4027b8:	429a      	cmp	r2, r3
  4027ba:	d342      	bcc.n	402842 <vTaskIncrementTick+0x10a>
  4027bc:	4b27      	ldr	r3, [pc, #156]	; (40285c <vTaskIncrementTick+0x124>)
  4027be:	681b      	ldr	r3, [r3, #0]
  4027c0:	681b      	ldr	r3, [r3, #0]
  4027c2:	2b00      	cmp	r3, #0
  4027c4:	d104      	bne.n	4027d0 <vTaskIncrementTick+0x98>
  4027c6:	4b2a      	ldr	r3, [pc, #168]	; (402870 <vTaskIncrementTick+0x138>)
  4027c8:	f04f 32ff 	mov.w	r2, #4294967295
  4027cc:	601a      	str	r2, [r3, #0]
  4027ce:	e038      	b.n	402842 <vTaskIncrementTick+0x10a>
  4027d0:	4b22      	ldr	r3, [pc, #136]	; (40285c <vTaskIncrementTick+0x124>)
  4027d2:	681b      	ldr	r3, [r3, #0]
  4027d4:	68db      	ldr	r3, [r3, #12]
  4027d6:	68db      	ldr	r3, [r3, #12]
  4027d8:	60bb      	str	r3, [r7, #8]
  4027da:	68bb      	ldr	r3, [r7, #8]
  4027dc:	685b      	ldr	r3, [r3, #4]
  4027de:	607b      	str	r3, [r7, #4]
  4027e0:	4b1d      	ldr	r3, [pc, #116]	; (402858 <vTaskIncrementTick+0x120>)
  4027e2:	681a      	ldr	r2, [r3, #0]
  4027e4:	687b      	ldr	r3, [r7, #4]
  4027e6:	429a      	cmp	r2, r3
  4027e8:	d203      	bcs.n	4027f2 <vTaskIncrementTick+0xba>
  4027ea:	4a21      	ldr	r2, [pc, #132]	; (402870 <vTaskIncrementTick+0x138>)
  4027ec:	687b      	ldr	r3, [r7, #4]
  4027ee:	6013      	str	r3, [r2, #0]
  4027f0:	e027      	b.n	402842 <vTaskIncrementTick+0x10a>
  4027f2:	68bb      	ldr	r3, [r7, #8]
  4027f4:	3304      	adds	r3, #4
  4027f6:	4618      	mov	r0, r3
  4027f8:	4b1e      	ldr	r3, [pc, #120]	; (402874 <vTaskIncrementTick+0x13c>)
  4027fa:	4798      	blx	r3
  4027fc:	68bb      	ldr	r3, [r7, #8]
  4027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402800:	2b00      	cmp	r3, #0
  402802:	d004      	beq.n	40280e <vTaskIncrementTick+0xd6>
  402804:	68bb      	ldr	r3, [r7, #8]
  402806:	3318      	adds	r3, #24
  402808:	4618      	mov	r0, r3
  40280a:	4b1a      	ldr	r3, [pc, #104]	; (402874 <vTaskIncrementTick+0x13c>)
  40280c:	4798      	blx	r3
  40280e:	68bb      	ldr	r3, [r7, #8]
  402810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402812:	461a      	mov	r2, r3
  402814:	2301      	movs	r3, #1
  402816:	fa03 f202 	lsl.w	r2, r3, r2
  40281a:	4b17      	ldr	r3, [pc, #92]	; (402878 <vTaskIncrementTick+0x140>)
  40281c:	681b      	ldr	r3, [r3, #0]
  40281e:	4313      	orrs	r3, r2
  402820:	4a15      	ldr	r2, [pc, #84]	; (402878 <vTaskIncrementTick+0x140>)
  402822:	6013      	str	r3, [r2, #0]
  402824:	68bb      	ldr	r3, [r7, #8]
  402826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402828:	4613      	mov	r3, r2
  40282a:	009b      	lsls	r3, r3, #2
  40282c:	4413      	add	r3, r2
  40282e:	009b      	lsls	r3, r3, #2
  402830:	4a12      	ldr	r2, [pc, #72]	; (40287c <vTaskIncrementTick+0x144>)
  402832:	441a      	add	r2, r3
  402834:	68bb      	ldr	r3, [r7, #8]
  402836:	3304      	adds	r3, #4
  402838:	4610      	mov	r0, r2
  40283a:	4619      	mov	r1, r3
  40283c:	4b10      	ldr	r3, [pc, #64]	; (402880 <vTaskIncrementTick+0x148>)
  40283e:	4798      	blx	r3
  402840:	e7bc      	b.n	4027bc <vTaskIncrementTick+0x84>
  402842:	e004      	b.n	40284e <vTaskIncrementTick+0x116>
	}
	else
	{
		++uxMissedTicks;
  402844:	4b0f      	ldr	r3, [pc, #60]	; (402884 <vTaskIncrementTick+0x14c>)
  402846:	681b      	ldr	r3, [r3, #0]
  402848:	3301      	adds	r3, #1
  40284a:	4a0e      	ldr	r2, [pc, #56]	; (402884 <vTaskIncrementTick+0x14c>)
  40284c:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  40284e:	3710      	adds	r7, #16
  402850:	46bd      	mov	sp, r7
  402852:	bd80      	pop	{r7, pc}
  402854:	20019448 	.word	0x20019448
  402858:	20019438 	.word	0x20019438
  40285c:	200193ec 	.word	0x200193ec
  402860:	0040d168 	.word	0x0040d168
  402864:	00409705 	.word	0x00409705
  402868:	200193f0 	.word	0x200193f0
  40286c:	20019454 	.word	0x20019454
  402870:	20000124 	.word	0x20000124
  402874:	00401585 	.word	0x00401585
  402878:	20019440 	.word	0x20019440
  40287c:	20019298 	.word	0x20019298
  402880:	004014c5 	.word	0x004014c5
  402884:	2001944c 	.word	0x2001944c

00402888 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  402888:	b580      	push	{r7, lr}
  40288a:	b086      	sub	sp, #24
  40288c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  40288e:	4b3b      	ldr	r3, [pc, #236]	; (40297c <vTaskSwitchContext+0xf4>)
  402890:	681b      	ldr	r3, [r3, #0]
  402892:	2b00      	cmp	r3, #0
  402894:	d003      	beq.n	40289e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  402896:	4b3a      	ldr	r3, [pc, #232]	; (402980 <vTaskSwitchContext+0xf8>)
  402898:	2201      	movs	r2, #1
  40289a:	601a      	str	r2, [r3, #0]
  40289c:	e06a      	b.n	402974 <vTaskSwitchContext+0xec>
			unsigned long ulTempCounter;

				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
  40289e:	4b39      	ldr	r3, [pc, #228]	; (402984 <vTaskSwitchContext+0xfc>)
  4028a0:	4798      	blx	r3
  4028a2:	6178      	str	r0, [r7, #20]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
  4028a4:	4b38      	ldr	r3, [pc, #224]	; (402988 <vTaskSwitchContext+0x100>)
  4028a6:	681b      	ldr	r3, [r3, #0]
  4028a8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
  4028aa:	4a38      	ldr	r2, [pc, #224]	; (40298c <vTaskSwitchContext+0x104>)
  4028ac:	6812      	ldr	r2, [r2, #0]
  4028ae:	6978      	ldr	r0, [r7, #20]
  4028b0:	1a82      	subs	r2, r0, r2
  4028b2:	440a      	add	r2, r1
  4028b4:	64da      	str	r2, [r3, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
  4028b6:	4a35      	ldr	r2, [pc, #212]	; (40298c <vTaskSwitchContext+0x104>)
  4028b8:	697b      	ldr	r3, [r7, #20]
  4028ba:	6013      	str	r3, [r2, #0]
		}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
  4028bc:	4b32      	ldr	r3, [pc, #200]	; (402988 <vTaskSwitchContext+0x100>)
  4028be:	681b      	ldr	r3, [r3, #0]
  4028c0:	681a      	ldr	r2, [r3, #0]
  4028c2:	4b31      	ldr	r3, [pc, #196]	; (402988 <vTaskSwitchContext+0x100>)
  4028c4:	681b      	ldr	r3, [r3, #0]
  4028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028c8:	429a      	cmp	r2, r3
  4028ca:	d808      	bhi.n	4028de <vTaskSwitchContext+0x56>
  4028cc:	4b2e      	ldr	r3, [pc, #184]	; (402988 <vTaskSwitchContext+0x100>)
  4028ce:	681a      	ldr	r2, [r3, #0]
  4028d0:	4b2d      	ldr	r3, [pc, #180]	; (402988 <vTaskSwitchContext+0x100>)
  4028d2:	681b      	ldr	r3, [r3, #0]
  4028d4:	3334      	adds	r3, #52	; 0x34
  4028d6:	4610      	mov	r0, r2
  4028d8:	4619      	mov	r1, r3
  4028da:	4b2d      	ldr	r3, [pc, #180]	; (402990 <vTaskSwitchContext+0x108>)
  4028dc:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
  4028de:	4b2a      	ldr	r3, [pc, #168]	; (402988 <vTaskSwitchContext+0x100>)
  4028e0:	681b      	ldr	r3, [r3, #0]
  4028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028e4:	4618      	mov	r0, r3
  4028e6:	492b      	ldr	r1, [pc, #172]	; (402994 <vTaskSwitchContext+0x10c>)
  4028e8:	2214      	movs	r2, #20
  4028ea:	4b2b      	ldr	r3, [pc, #172]	; (402998 <vTaskSwitchContext+0x110>)
  4028ec:	4798      	blx	r3
  4028ee:	4603      	mov	r3, r0
  4028f0:	2b00      	cmp	r3, #0
  4028f2:	d008      	beq.n	402906 <vTaskSwitchContext+0x7e>
  4028f4:	4b24      	ldr	r3, [pc, #144]	; (402988 <vTaskSwitchContext+0x100>)
  4028f6:	681a      	ldr	r2, [r3, #0]
  4028f8:	4b23      	ldr	r3, [pc, #140]	; (402988 <vTaskSwitchContext+0x100>)
  4028fa:	681b      	ldr	r3, [r3, #0]
  4028fc:	3334      	adds	r3, #52	; 0x34
  4028fe:	4610      	mov	r0, r2
  402900:	4619      	mov	r1, r3
  402902:	4b23      	ldr	r3, [pc, #140]	; (402990 <vTaskSwitchContext+0x108>)
  402904:	4798      	blx	r3

		taskSELECT_HIGHEST_PRIORITY_TASK();
  402906:	4b25      	ldr	r3, [pc, #148]	; (40299c <vTaskSwitchContext+0x114>)
  402908:	681b      	ldr	r3, [r3, #0]
  40290a:	60bb      	str	r3, [r7, #8]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline unsigned char ucPortCountLeadingZeros( unsigned long ulBitmap )
	{
	unsigned char ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40290c:	68bb      	ldr	r3, [r7, #8]
  40290e:	fab3 f383 	clz	r3, r3
  402912:	71fb      	strb	r3, [r7, #7]
		return ucReturn;
  402914:	79fb      	ldrb	r3, [r7, #7]
  402916:	f1c3 031f 	rsb	r3, r3, #31
  40291a:	613b      	str	r3, [r7, #16]
  40291c:	4920      	ldr	r1, [pc, #128]	; (4029a0 <vTaskSwitchContext+0x118>)
  40291e:	693a      	ldr	r2, [r7, #16]
  402920:	4613      	mov	r3, r2
  402922:	009b      	lsls	r3, r3, #2
  402924:	4413      	add	r3, r2
  402926:	009b      	lsls	r3, r3, #2
  402928:	440b      	add	r3, r1
  40292a:	681b      	ldr	r3, [r3, #0]
  40292c:	2b00      	cmp	r3, #0
  40292e:	d104      	bne.n	40293a <vTaskSwitchContext+0xb2>
  402930:	481c      	ldr	r0, [pc, #112]	; (4029a4 <vTaskSwitchContext+0x11c>)
  402932:	f240 713e 	movw	r1, #1854	; 0x73e
  402936:	4b1c      	ldr	r3, [pc, #112]	; (4029a8 <vTaskSwitchContext+0x120>)
  402938:	4798      	blx	r3
  40293a:	693a      	ldr	r2, [r7, #16]
  40293c:	4613      	mov	r3, r2
  40293e:	009b      	lsls	r3, r3, #2
  402940:	4413      	add	r3, r2
  402942:	009b      	lsls	r3, r3, #2
  402944:	4a16      	ldr	r2, [pc, #88]	; (4029a0 <vTaskSwitchContext+0x118>)
  402946:	4413      	add	r3, r2
  402948:	60fb      	str	r3, [r7, #12]
  40294a:	68fb      	ldr	r3, [r7, #12]
  40294c:	685b      	ldr	r3, [r3, #4]
  40294e:	685a      	ldr	r2, [r3, #4]
  402950:	68fb      	ldr	r3, [r7, #12]
  402952:	605a      	str	r2, [r3, #4]
  402954:	68fb      	ldr	r3, [r7, #12]
  402956:	685a      	ldr	r2, [r3, #4]
  402958:	68fb      	ldr	r3, [r7, #12]
  40295a:	3308      	adds	r3, #8
  40295c:	429a      	cmp	r2, r3
  40295e:	d104      	bne.n	40296a <vTaskSwitchContext+0xe2>
  402960:	68fb      	ldr	r3, [r7, #12]
  402962:	685b      	ldr	r3, [r3, #4]
  402964:	685a      	ldr	r2, [r3, #4]
  402966:	68fb      	ldr	r3, [r7, #12]
  402968:	605a      	str	r2, [r3, #4]
  40296a:	68fb      	ldr	r3, [r7, #12]
  40296c:	685b      	ldr	r3, [r3, #4]
  40296e:	68db      	ldr	r3, [r3, #12]
  402970:	4a05      	ldr	r2, [pc, #20]	; (402988 <vTaskSwitchContext+0x100>)
  402972:	6013      	str	r3, [r2, #0]

		traceTASK_SWITCHED_IN();
	}
}
  402974:	3718      	adds	r7, #24
  402976:	46bd      	mov	sp, r7
  402978:	bd80      	pop	{r7, pc}
  40297a:	bf00      	nop
  40297c:	20019448 	.word	0x20019448
  402980:	20019450 	.word	0x20019450
  402984:	0040026d 	.word	0x0040026d
  402988:	20019294 	.word	0x20019294
  40298c:	2001945c 	.word	0x2001945c
  402990:	004095b1 	.word	0x004095b1
  402994:	0040d1f8 	.word	0x0040d1f8
  402998:	0040a67d 	.word	0x0040a67d
  40299c:	20019440 	.word	0x20019440
  4029a0:	20019298 	.word	0x20019298
  4029a4:	0040d168 	.word	0x0040d168
  4029a8:	00409705 	.word	0x00409705

004029ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4029ac:	b580      	push	{r7, lr}
  4029ae:	b084      	sub	sp, #16
  4029b0:	af00      	add	r7, sp, #0
  4029b2:	6078      	str	r0, [r7, #4]
  4029b4:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  4029b6:	687b      	ldr	r3, [r7, #4]
  4029b8:	2b00      	cmp	r3, #0
  4029ba:	d104      	bne.n	4029c6 <vTaskPlaceOnEventList+0x1a>
  4029bc:	481b      	ldr	r0, [pc, #108]	; (402a2c <vTaskPlaceOnEventList+0x80>)
  4029be:	f240 7149 	movw	r1, #1865	; 0x749
  4029c2:	4b1b      	ldr	r3, [pc, #108]	; (402a30 <vTaskPlaceOnEventList+0x84>)
  4029c4:	4798      	blx	r3
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4029c6:	4b1b      	ldr	r3, [pc, #108]	; (402a34 <vTaskPlaceOnEventList+0x88>)
  4029c8:	681b      	ldr	r3, [r3, #0]
  4029ca:	3318      	adds	r3, #24
  4029cc:	6878      	ldr	r0, [r7, #4]
  4029ce:	4619      	mov	r1, r3
  4029d0:	4b19      	ldr	r3, [pc, #100]	; (402a38 <vTaskPlaceOnEventList+0x8c>)
  4029d2:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4029d4:	4b17      	ldr	r3, [pc, #92]	; (402a34 <vTaskPlaceOnEventList+0x88>)
  4029d6:	681b      	ldr	r3, [r3, #0]
  4029d8:	3304      	adds	r3, #4
  4029da:	4618      	mov	r0, r3
  4029dc:	4b17      	ldr	r3, [pc, #92]	; (402a3c <vTaskPlaceOnEventList+0x90>)
  4029de:	4798      	blx	r3
  4029e0:	4603      	mov	r3, r0
  4029e2:	2b00      	cmp	r3, #0
  4029e4:	d10b      	bne.n	4029fe <vTaskPlaceOnEventList+0x52>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4029e6:	4b13      	ldr	r3, [pc, #76]	; (402a34 <vTaskPlaceOnEventList+0x88>)
  4029e8:	681b      	ldr	r3, [r3, #0]
  4029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4029ec:	461a      	mov	r2, r3
  4029ee:	2301      	movs	r3, #1
  4029f0:	4093      	lsls	r3, r2
  4029f2:	43da      	mvns	r2, r3
  4029f4:	4b12      	ldr	r3, [pc, #72]	; (402a40 <vTaskPlaceOnEventList+0x94>)
  4029f6:	681b      	ldr	r3, [r3, #0]
  4029f8:	4013      	ands	r3, r2
  4029fa:	4a11      	ldr	r2, [pc, #68]	; (402a40 <vTaskPlaceOnEventList+0x94>)
  4029fc:	6013      	str	r3, [r2, #0]
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  4029fe:	683b      	ldr	r3, [r7, #0]
  402a00:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a04:	d107      	bne.n	402a16 <vTaskPlaceOnEventList+0x6a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  402a06:	4b0b      	ldr	r3, [pc, #44]	; (402a34 <vTaskPlaceOnEventList+0x88>)
  402a08:	681b      	ldr	r3, [r3, #0]
  402a0a:	3304      	adds	r3, #4
  402a0c:	480d      	ldr	r0, [pc, #52]	; (402a44 <vTaskPlaceOnEventList+0x98>)
  402a0e:	4619      	mov	r1, r3
  402a10:	4b0d      	ldr	r3, [pc, #52]	; (402a48 <vTaskPlaceOnEventList+0x9c>)
  402a12:	4798      	blx	r3
  402a14:	e007      	b.n	402a26 <vTaskPlaceOnEventList+0x7a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  402a16:	4b0d      	ldr	r3, [pc, #52]	; (402a4c <vTaskPlaceOnEventList+0xa0>)
  402a18:	681a      	ldr	r2, [r3, #0]
  402a1a:	683b      	ldr	r3, [r7, #0]
  402a1c:	4413      	add	r3, r2
  402a1e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402a20:	68f8      	ldr	r0, [r7, #12]
  402a22:	4b0b      	ldr	r3, [pc, #44]	; (402a50 <vTaskPlaceOnEventList+0xa4>)
  402a24:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  402a26:	3710      	adds	r7, #16
  402a28:	46bd      	mov	sp, r7
  402a2a:	bd80      	pop	{r7, pc}
  402a2c:	0040d168 	.word	0x0040d168
  402a30:	00409705 	.word	0x00409705
  402a34:	20019294 	.word	0x20019294
  402a38:	00401515 	.word	0x00401515
  402a3c:	00401585 	.word	0x00401585
  402a40:	20019440 	.word	0x20019440
  402a44:	20019420 	.word	0x20019420
  402a48:	004014c5 	.word	0x004014c5
  402a4c:	20019438 	.word	0x20019438
  402a50:	00402e61 	.word	0x00402e61

00402a54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  402a54:	b580      	push	{r7, lr}
  402a56:	b084      	sub	sp, #16
  402a58:	af00      	add	r7, sp, #0
  402a5a:	6078      	str	r0, [r7, #4]
  402a5c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  402a5e:	687b      	ldr	r3, [r7, #4]
  402a60:	2b00      	cmp	r3, #0
  402a62:	d104      	bne.n	402a6e <vTaskPlaceOnEventListRestricted+0x1a>
  402a64:	4815      	ldr	r0, [pc, #84]	; (402abc <vTaskPlaceOnEventListRestricted+0x68>)
  402a66:	f240 717f 	movw	r1, #1919	; 0x77f
  402a6a:	4b15      	ldr	r3, [pc, #84]	; (402ac0 <vTaskPlaceOnEventListRestricted+0x6c>)
  402a6c:	4798      	blx	r3

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  402a6e:	4b15      	ldr	r3, [pc, #84]	; (402ac4 <vTaskPlaceOnEventListRestricted+0x70>)
  402a70:	681b      	ldr	r3, [r3, #0]
  402a72:	3318      	adds	r3, #24
  402a74:	6878      	ldr	r0, [r7, #4]
  402a76:	4619      	mov	r1, r3
  402a78:	4b13      	ldr	r3, [pc, #76]	; (402ac8 <vTaskPlaceOnEventListRestricted+0x74>)
  402a7a:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  402a7c:	4b11      	ldr	r3, [pc, #68]	; (402ac4 <vTaskPlaceOnEventListRestricted+0x70>)
  402a7e:	681b      	ldr	r3, [r3, #0]
  402a80:	3304      	adds	r3, #4
  402a82:	4618      	mov	r0, r3
  402a84:	4b11      	ldr	r3, [pc, #68]	; (402acc <vTaskPlaceOnEventListRestricted+0x78>)
  402a86:	4798      	blx	r3
  402a88:	4603      	mov	r3, r0
  402a8a:	2b00      	cmp	r3, #0
  402a8c:	d10b      	bne.n	402aa6 <vTaskPlaceOnEventListRestricted+0x52>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402a8e:	4b0d      	ldr	r3, [pc, #52]	; (402ac4 <vTaskPlaceOnEventListRestricted+0x70>)
  402a90:	681b      	ldr	r3, [r3, #0]
  402a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a94:	461a      	mov	r2, r3
  402a96:	2301      	movs	r3, #1
  402a98:	4093      	lsls	r3, r2
  402a9a:	43da      	mvns	r2, r3
  402a9c:	4b0c      	ldr	r3, [pc, #48]	; (402ad0 <vTaskPlaceOnEventListRestricted+0x7c>)
  402a9e:	681b      	ldr	r3, [r3, #0]
  402aa0:	4013      	ands	r3, r2
  402aa2:	4a0b      	ldr	r2, [pc, #44]	; (402ad0 <vTaskPlaceOnEventListRestricted+0x7c>)
  402aa4:	6013      	str	r3, [r2, #0]
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  402aa6:	4b0b      	ldr	r3, [pc, #44]	; (402ad4 <vTaskPlaceOnEventListRestricted+0x80>)
  402aa8:	681a      	ldr	r2, [r3, #0]
  402aaa:	683b      	ldr	r3, [r7, #0]
  402aac:	4413      	add	r3, r2
  402aae:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  402ab0:	68f8      	ldr	r0, [r7, #12]
  402ab2:	4b09      	ldr	r3, [pc, #36]	; (402ad8 <vTaskPlaceOnEventListRestricted+0x84>)
  402ab4:	4798      	blx	r3
	}
  402ab6:	3710      	adds	r7, #16
  402ab8:	46bd      	mov	sp, r7
  402aba:	bd80      	pop	{r7, pc}
  402abc:	0040d168 	.word	0x0040d168
  402ac0:	00409705 	.word	0x00409705
  402ac4:	20019294 	.word	0x20019294
  402ac8:	004014c5 	.word	0x004014c5
  402acc:	00401585 	.word	0x00401585
  402ad0:	20019440 	.word	0x20019440
  402ad4:	20019438 	.word	0x20019438
  402ad8:	00402e61 	.word	0x00402e61

00402adc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  402adc:	b580      	push	{r7, lr}
  402ade:	b084      	sub	sp, #16
  402ae0:	af00      	add	r7, sp, #0
  402ae2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402ae4:	687b      	ldr	r3, [r7, #4]
  402ae6:	68db      	ldr	r3, [r3, #12]
  402ae8:	68db      	ldr	r3, [r3, #12]
  402aea:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  402aec:	68bb      	ldr	r3, [r7, #8]
  402aee:	2b00      	cmp	r3, #0
  402af0:	d104      	bne.n	402afc <xTaskRemoveFromEventList+0x20>
  402af2:	4822      	ldr	r0, [pc, #136]	; (402b7c <xTaskRemoveFromEventList+0xa0>)
  402af4:	f240 71b5 	movw	r1, #1973	; 0x7b5
  402af8:	4b21      	ldr	r3, [pc, #132]	; (402b80 <xTaskRemoveFromEventList+0xa4>)
  402afa:	4798      	blx	r3
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402afc:	68bb      	ldr	r3, [r7, #8]
  402afe:	3318      	adds	r3, #24
  402b00:	4618      	mov	r0, r3
  402b02:	4b20      	ldr	r3, [pc, #128]	; (402b84 <xTaskRemoveFromEventList+0xa8>)
  402b04:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  402b06:	4b20      	ldr	r3, [pc, #128]	; (402b88 <xTaskRemoveFromEventList+0xac>)
  402b08:	681b      	ldr	r3, [r3, #0]
  402b0a:	2b00      	cmp	r3, #0
  402b0c:	d11e      	bne.n	402b4c <xTaskRemoveFromEventList+0x70>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402b0e:	68bb      	ldr	r3, [r7, #8]
  402b10:	3304      	adds	r3, #4
  402b12:	4618      	mov	r0, r3
  402b14:	4b1b      	ldr	r3, [pc, #108]	; (402b84 <xTaskRemoveFromEventList+0xa8>)
  402b16:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  402b18:	68bb      	ldr	r3, [r7, #8]
  402b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402b1c:	461a      	mov	r2, r3
  402b1e:	2301      	movs	r3, #1
  402b20:	fa03 f202 	lsl.w	r2, r3, r2
  402b24:	4b19      	ldr	r3, [pc, #100]	; (402b8c <xTaskRemoveFromEventList+0xb0>)
  402b26:	681b      	ldr	r3, [r3, #0]
  402b28:	4313      	orrs	r3, r2
  402b2a:	4a18      	ldr	r2, [pc, #96]	; (402b8c <xTaskRemoveFromEventList+0xb0>)
  402b2c:	6013      	str	r3, [r2, #0]
  402b2e:	68bb      	ldr	r3, [r7, #8]
  402b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402b32:	4613      	mov	r3, r2
  402b34:	009b      	lsls	r3, r3, #2
  402b36:	4413      	add	r3, r2
  402b38:	009b      	lsls	r3, r3, #2
  402b3a:	4a15      	ldr	r2, [pc, #84]	; (402b90 <xTaskRemoveFromEventList+0xb4>)
  402b3c:	441a      	add	r2, r3
  402b3e:	68bb      	ldr	r3, [r7, #8]
  402b40:	3304      	adds	r3, #4
  402b42:	4610      	mov	r0, r2
  402b44:	4619      	mov	r1, r3
  402b46:	4b13      	ldr	r3, [pc, #76]	; (402b94 <xTaskRemoveFromEventList+0xb8>)
  402b48:	4798      	blx	r3
  402b4a:	e005      	b.n	402b58 <xTaskRemoveFromEventList+0x7c>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402b4c:	68bb      	ldr	r3, [r7, #8]
  402b4e:	3318      	adds	r3, #24
  402b50:	4811      	ldr	r0, [pc, #68]	; (402b98 <xTaskRemoveFromEventList+0xbc>)
  402b52:	4619      	mov	r1, r3
  402b54:	4b0f      	ldr	r3, [pc, #60]	; (402b94 <xTaskRemoveFromEventList+0xb8>)
  402b56:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402b58:	68bb      	ldr	r3, [r7, #8]
  402b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402b5c:	4b0f      	ldr	r3, [pc, #60]	; (402b9c <xTaskRemoveFromEventList+0xc0>)
  402b5e:	681b      	ldr	r3, [r3, #0]
  402b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402b62:	429a      	cmp	r2, r3
  402b64:	d302      	bcc.n	402b6c <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  402b66:	2301      	movs	r3, #1
  402b68:	60fb      	str	r3, [r7, #12]
  402b6a:	e001      	b.n	402b70 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
  402b6c:	2300      	movs	r3, #0
  402b6e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  402b70:	68fb      	ldr	r3, [r7, #12]
}
  402b72:	4618      	mov	r0, r3
  402b74:	3710      	adds	r7, #16
  402b76:	46bd      	mov	sp, r7
  402b78:	bd80      	pop	{r7, pc}
  402b7a:	bf00      	nop
  402b7c:	0040d168 	.word	0x0040d168
  402b80:	00409705 	.word	0x00409705
  402b84:	00401585 	.word	0x00401585
  402b88:	20019448 	.word	0x20019448
  402b8c:	20019440 	.word	0x20019440
  402b90:	20019298 	.word	0x20019298
  402b94:	004014c5 	.word	0x004014c5
  402b98:	200193f4 	.word	0x200193f4
  402b9c:	20019294 	.word	0x20019294

00402ba0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  402ba0:	b580      	push	{r7, lr}
  402ba2:	b082      	sub	sp, #8
  402ba4:	af00      	add	r7, sp, #0
  402ba6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  402ba8:	687b      	ldr	r3, [r7, #4]
  402baa:	2b00      	cmp	r3, #0
  402bac:	d104      	bne.n	402bb8 <vTaskSetTimeOutState+0x18>
  402bae:	4808      	ldr	r0, [pc, #32]	; (402bd0 <vTaskSetTimeOutState+0x30>)
  402bb0:	f240 71d7 	movw	r1, #2007	; 0x7d7
  402bb4:	4b07      	ldr	r3, [pc, #28]	; (402bd4 <vTaskSetTimeOutState+0x34>)
  402bb6:	4798      	blx	r3
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402bb8:	4b07      	ldr	r3, [pc, #28]	; (402bd8 <vTaskSetTimeOutState+0x38>)
  402bba:	681a      	ldr	r2, [r3, #0]
  402bbc:	687b      	ldr	r3, [r7, #4]
  402bbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402bc0:	4b06      	ldr	r3, [pc, #24]	; (402bdc <vTaskSetTimeOutState+0x3c>)
  402bc2:	681a      	ldr	r2, [r3, #0]
  402bc4:	687b      	ldr	r3, [r7, #4]
  402bc6:	605a      	str	r2, [r3, #4]
}
  402bc8:	3708      	adds	r7, #8
  402bca:	46bd      	mov	sp, r7
  402bcc:	bd80      	pop	{r7, pc}
  402bce:	bf00      	nop
  402bd0:	0040d168 	.word	0x0040d168
  402bd4:	00409705 	.word	0x00409705
  402bd8:	20019454 	.word	0x20019454
  402bdc:	20019438 	.word	0x20019438

00402be0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  402be0:	b580      	push	{r7, lr}
  402be2:	b084      	sub	sp, #16
  402be4:	af00      	add	r7, sp, #0
  402be6:	6078      	str	r0, [r7, #4]
  402be8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  402bea:	687b      	ldr	r3, [r7, #4]
  402bec:	2b00      	cmp	r3, #0
  402bee:	d104      	bne.n	402bfa <xTaskCheckForTimeOut+0x1a>
  402bf0:	4823      	ldr	r0, [pc, #140]	; (402c80 <xTaskCheckForTimeOut+0xa0>)
  402bf2:	f240 71e1 	movw	r1, #2017	; 0x7e1
  402bf6:	4b23      	ldr	r3, [pc, #140]	; (402c84 <xTaskCheckForTimeOut+0xa4>)
  402bf8:	4798      	blx	r3
	configASSERT( pxTicksToWait );
  402bfa:	683b      	ldr	r3, [r7, #0]
  402bfc:	2b00      	cmp	r3, #0
  402bfe:	d104      	bne.n	402c0a <xTaskCheckForTimeOut+0x2a>
  402c00:	481f      	ldr	r0, [pc, #124]	; (402c80 <xTaskCheckForTimeOut+0xa0>)
  402c02:	f240 71e2 	movw	r1, #2018	; 0x7e2
  402c06:	4b1f      	ldr	r3, [pc, #124]	; (402c84 <xTaskCheckForTimeOut+0xa4>)
  402c08:	4798      	blx	r3

	taskENTER_CRITICAL();
  402c0a:	4b1f      	ldr	r3, [pc, #124]	; (402c88 <xTaskCheckForTimeOut+0xa8>)
  402c0c:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  402c0e:	683b      	ldr	r3, [r7, #0]
  402c10:	681b      	ldr	r3, [r3, #0]
  402c12:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c16:	d102      	bne.n	402c1e <xTaskCheckForTimeOut+0x3e>
			{
				xReturn = pdFALSE;
  402c18:	2300      	movs	r3, #0
  402c1a:	60fb      	str	r3, [r7, #12]
  402c1c:	e029      	b.n	402c72 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  402c1e:	687b      	ldr	r3, [r7, #4]
  402c20:	681a      	ldr	r2, [r3, #0]
  402c22:	4b1a      	ldr	r3, [pc, #104]	; (402c8c <xTaskCheckForTimeOut+0xac>)
  402c24:	681b      	ldr	r3, [r3, #0]
  402c26:	429a      	cmp	r2, r3
  402c28:	d008      	beq.n	402c3c <xTaskCheckForTimeOut+0x5c>
  402c2a:	687b      	ldr	r3, [r7, #4]
  402c2c:	685a      	ldr	r2, [r3, #4]
  402c2e:	4b18      	ldr	r3, [pc, #96]	; (402c90 <xTaskCheckForTimeOut+0xb0>)
  402c30:	681b      	ldr	r3, [r3, #0]
  402c32:	429a      	cmp	r2, r3
  402c34:	d802      	bhi.n	402c3c <xTaskCheckForTimeOut+0x5c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  402c36:	2301      	movs	r3, #1
  402c38:	60fb      	str	r3, [r7, #12]
  402c3a:	e01a      	b.n	402c72 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  402c3c:	4b14      	ldr	r3, [pc, #80]	; (402c90 <xTaskCheckForTimeOut+0xb0>)
  402c3e:	681a      	ldr	r2, [r3, #0]
  402c40:	687b      	ldr	r3, [r7, #4]
  402c42:	685b      	ldr	r3, [r3, #4]
  402c44:	1ad2      	subs	r2, r2, r3
  402c46:	683b      	ldr	r3, [r7, #0]
  402c48:	681b      	ldr	r3, [r3, #0]
  402c4a:	429a      	cmp	r2, r3
  402c4c:	d20f      	bcs.n	402c6e <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  402c4e:	4b10      	ldr	r3, [pc, #64]	; (402c90 <xTaskCheckForTimeOut+0xb0>)
  402c50:	681a      	ldr	r2, [r3, #0]
  402c52:	687b      	ldr	r3, [r7, #4]
  402c54:	685b      	ldr	r3, [r3, #4]
  402c56:	1ad3      	subs	r3, r2, r3
  402c58:	683a      	ldr	r2, [r7, #0]
  402c5a:	6812      	ldr	r2, [r2, #0]
  402c5c:	1ad2      	subs	r2, r2, r3
  402c5e:	683b      	ldr	r3, [r7, #0]
  402c60:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402c62:	6878      	ldr	r0, [r7, #4]
  402c64:	4b0b      	ldr	r3, [pc, #44]	; (402c94 <xTaskCheckForTimeOut+0xb4>)
  402c66:	4798      	blx	r3
			xReturn = pdFALSE;
  402c68:	2300      	movs	r3, #0
  402c6a:	60fb      	str	r3, [r7, #12]
  402c6c:	e001      	b.n	402c72 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
  402c6e:	2301      	movs	r3, #1
  402c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  402c72:	4b09      	ldr	r3, [pc, #36]	; (402c98 <xTaskCheckForTimeOut+0xb8>)
  402c74:	4798      	blx	r3

	return xReturn;
  402c76:	68fb      	ldr	r3, [r7, #12]
}
  402c78:	4618      	mov	r0, r3
  402c7a:	3710      	adds	r7, #16
  402c7c:	46bd      	mov	sp, r7
  402c7e:	bd80      	pop	{r7, pc}
  402c80:	0040d168 	.word	0x0040d168
  402c84:	00409705 	.word	0x00409705
  402c88:	0040177d 	.word	0x0040177d
  402c8c:	20019454 	.word	0x20019454
  402c90:	20019438 	.word	0x20019438
  402c94:	00402ba1 	.word	0x00402ba1
  402c98:	00401799 	.word	0x00401799

00402c9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  402c9c:	b480      	push	{r7}
  402c9e:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  402ca0:	4b03      	ldr	r3, [pc, #12]	; (402cb0 <vTaskMissedYield+0x14>)
  402ca2:	2201      	movs	r2, #1
  402ca4:	601a      	str	r2, [r3, #0]
}
  402ca6:	46bd      	mov	sp, r7
  402ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cac:	4770      	bx	lr
  402cae:	bf00      	nop
  402cb0:	20019450 	.word	0x20019450

00402cb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  402cb4:	b580      	push	{r7, lr}
  402cb6:	b082      	sub	sp, #8
  402cb8:	af00      	add	r7, sp, #0
  402cba:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  402cbc:	4b04      	ldr	r3, [pc, #16]	; (402cd0 <prvIdleTask+0x1c>)
  402cbe:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  402cc0:	4b04      	ldr	r3, [pc, #16]	; (402cd4 <prvIdleTask+0x20>)
  402cc2:	681b      	ldr	r3, [r3, #0]
  402cc4:	2b01      	cmp	r3, #1
  402cc6:	d901      	bls.n	402ccc <prvIdleTask+0x18>
			{
				taskYIELD();
  402cc8:	4b03      	ldr	r3, [pc, #12]	; (402cd8 <prvIdleTask+0x24>)
  402cca:	4798      	blx	r3
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
  402ccc:	e7f6      	b.n	402cbc <prvIdleTask+0x8>
  402cce:	bf00      	nop
  402cd0:	00402dd5 	.word	0x00402dd5
  402cd4:	20019298 	.word	0x20019298
  402cd8:	00401765 	.word	0x00401765

00402cdc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  402cdc:	b580      	push	{r7, lr}
  402cde:	b084      	sub	sp, #16
  402ce0:	af00      	add	r7, sp, #0
  402ce2:	60f8      	str	r0, [r7, #12]
  402ce4:	60b9      	str	r1, [r7, #8]
  402ce6:	607a      	str	r2, [r7, #4]
  402ce8:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  402cea:	68fb      	ldr	r3, [r7, #12]
  402cec:	3334      	adds	r3, #52	; 0x34
  402cee:	4618      	mov	r0, r3
  402cf0:	68b9      	ldr	r1, [r7, #8]
  402cf2:	220a      	movs	r2, #10
  402cf4:	4b15      	ldr	r3, [pc, #84]	; (402d4c <prvInitialiseTCBVariables+0x70>)
  402cf6:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  402cf8:	68fb      	ldr	r3, [r7, #12]
  402cfa:	2200      	movs	r2, #0
  402cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  402d00:	687b      	ldr	r3, [r7, #4]
  402d02:	2b0e      	cmp	r3, #14
  402d04:	d901      	bls.n	402d0a <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  402d06:	230e      	movs	r3, #14
  402d08:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  402d0a:	68fb      	ldr	r3, [r7, #12]
  402d0c:	687a      	ldr	r2, [r7, #4]
  402d0e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  402d10:	68fb      	ldr	r3, [r7, #12]
  402d12:	687a      	ldr	r2, [r7, #4]
  402d14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402d16:	68fb      	ldr	r3, [r7, #12]
  402d18:	3304      	adds	r3, #4
  402d1a:	4618      	mov	r0, r3
  402d1c:	4b0c      	ldr	r3, [pc, #48]	; (402d50 <prvInitialiseTCBVariables+0x74>)
  402d1e:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402d20:	68fb      	ldr	r3, [r7, #12]
  402d22:	3318      	adds	r3, #24
  402d24:	4618      	mov	r0, r3
  402d26:	4b0a      	ldr	r3, [pc, #40]	; (402d50 <prvInitialiseTCBVariables+0x74>)
  402d28:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402d2a:	68fb      	ldr	r3, [r7, #12]
  402d2c:	68fa      	ldr	r2, [r7, #12]
  402d2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  402d30:	687b      	ldr	r3, [r7, #4]
  402d32:	f1c3 020f 	rsb	r2, r3, #15
  402d36:	68fb      	ldr	r3, [r7, #12]
  402d38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402d3a:	68fb      	ldr	r3, [r7, #12]
  402d3c:	68fa      	ldr	r2, [r7, #12]
  402d3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
  402d40:	68fb      	ldr	r3, [r7, #12]
  402d42:	2200      	movs	r2, #0
  402d44:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  402d46:	3710      	adds	r7, #16
  402d48:	46bd      	mov	sp, r7
  402d4a:	bd80      	pop	{r7, pc}
  402d4c:	0040aaad 	.word	0x0040aaad
  402d50:	004014ad 	.word	0x004014ad

00402d54 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  402d54:	b580      	push	{r7, lr}
  402d56:	b082      	sub	sp, #8
  402d58:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  402d5a:	2300      	movs	r3, #0
  402d5c:	607b      	str	r3, [r7, #4]
  402d5e:	e00c      	b.n	402d7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  402d60:	687a      	ldr	r2, [r7, #4]
  402d62:	4613      	mov	r3, r2
  402d64:	009b      	lsls	r3, r3, #2
  402d66:	4413      	add	r3, r2
  402d68:	009b      	lsls	r3, r3, #2
  402d6a:	4a11      	ldr	r2, [pc, #68]	; (402db0 <prvInitialiseTaskLists+0x5c>)
  402d6c:	4413      	add	r3, r2
  402d6e:	4618      	mov	r0, r3
  402d70:	4b10      	ldr	r3, [pc, #64]	; (402db4 <prvInitialiseTaskLists+0x60>)
  402d72:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  402d74:	687b      	ldr	r3, [r7, #4]
  402d76:	3301      	adds	r3, #1
  402d78:	607b      	str	r3, [r7, #4]
  402d7a:	687b      	ldr	r3, [r7, #4]
  402d7c:	2b0e      	cmp	r3, #14
  402d7e:	d9ef      	bls.n	402d60 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  402d80:	480d      	ldr	r0, [pc, #52]	; (402db8 <prvInitialiseTaskLists+0x64>)
  402d82:	4b0c      	ldr	r3, [pc, #48]	; (402db4 <prvInitialiseTaskLists+0x60>)
  402d84:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  402d86:	480d      	ldr	r0, [pc, #52]	; (402dbc <prvInitialiseTaskLists+0x68>)
  402d88:	4b0a      	ldr	r3, [pc, #40]	; (402db4 <prvInitialiseTaskLists+0x60>)
  402d8a:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  402d8c:	480c      	ldr	r0, [pc, #48]	; (402dc0 <prvInitialiseTaskLists+0x6c>)
  402d8e:	4b09      	ldr	r3, [pc, #36]	; (402db4 <prvInitialiseTaskLists+0x60>)
  402d90:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  402d92:	480c      	ldr	r0, [pc, #48]	; (402dc4 <prvInitialiseTaskLists+0x70>)
  402d94:	4b07      	ldr	r3, [pc, #28]	; (402db4 <prvInitialiseTaskLists+0x60>)
  402d96:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  402d98:	480b      	ldr	r0, [pc, #44]	; (402dc8 <prvInitialiseTaskLists+0x74>)
  402d9a:	4b06      	ldr	r3, [pc, #24]	; (402db4 <prvInitialiseTaskLists+0x60>)
  402d9c:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  402d9e:	4b0b      	ldr	r3, [pc, #44]	; (402dcc <prvInitialiseTaskLists+0x78>)
  402da0:	4a05      	ldr	r2, [pc, #20]	; (402db8 <prvInitialiseTaskLists+0x64>)
  402da2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402da4:	4b0a      	ldr	r3, [pc, #40]	; (402dd0 <prvInitialiseTaskLists+0x7c>)
  402da6:	4a05      	ldr	r2, [pc, #20]	; (402dbc <prvInitialiseTaskLists+0x68>)
  402da8:	601a      	str	r2, [r3, #0]
}
  402daa:	3708      	adds	r7, #8
  402dac:	46bd      	mov	sp, r7
  402dae:	bd80      	pop	{r7, pc}
  402db0:	20019298 	.word	0x20019298
  402db4:	0040146d 	.word	0x0040146d
  402db8:	200193c4 	.word	0x200193c4
  402dbc:	200193d8 	.word	0x200193d8
  402dc0:	200193f4 	.word	0x200193f4
  402dc4:	20019408 	.word	0x20019408
  402dc8:	20019420 	.word	0x20019420
  402dcc:	200193ec 	.word	0x200193ec
  402dd0:	200193f0 	.word	0x200193f0

00402dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  402dd4:	b580      	push	{r7, lr}
  402dd6:	b082      	sub	sp, #8
  402dd8:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  402dda:	e028      	b.n	402e2e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  402ddc:	4b17      	ldr	r3, [pc, #92]	; (402e3c <prvCheckTasksWaitingTermination+0x68>)
  402dde:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402de0:	4b17      	ldr	r3, [pc, #92]	; (402e40 <prvCheckTasksWaitingTermination+0x6c>)
  402de2:	681b      	ldr	r3, [r3, #0]
  402de4:	2b00      	cmp	r3, #0
  402de6:	bf0c      	ite	eq
  402de8:	2301      	moveq	r3, #1
  402dea:	2300      	movne	r3, #0
  402dec:	b2db      	uxtb	r3, r3
  402dee:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  402df0:	4b14      	ldr	r3, [pc, #80]	; (402e44 <prvCheckTasksWaitingTermination+0x70>)
  402df2:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  402df4:	687b      	ldr	r3, [r7, #4]
  402df6:	2b00      	cmp	r3, #0
  402df8:	d119      	bne.n	402e2e <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  402dfa:	4b13      	ldr	r3, [pc, #76]	; (402e48 <prvCheckTasksWaitingTermination+0x74>)
  402dfc:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  402dfe:	4b10      	ldr	r3, [pc, #64]	; (402e40 <prvCheckTasksWaitingTermination+0x6c>)
  402e00:	68db      	ldr	r3, [r3, #12]
  402e02:	68db      	ldr	r3, [r3, #12]
  402e04:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  402e06:	683b      	ldr	r3, [r7, #0]
  402e08:	3304      	adds	r3, #4
  402e0a:	4618      	mov	r0, r3
  402e0c:	4b0f      	ldr	r3, [pc, #60]	; (402e4c <prvCheckTasksWaitingTermination+0x78>)
  402e0e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402e10:	4b0f      	ldr	r3, [pc, #60]	; (402e50 <prvCheckTasksWaitingTermination+0x7c>)
  402e12:	681b      	ldr	r3, [r3, #0]
  402e14:	3b01      	subs	r3, #1
  402e16:	4a0e      	ldr	r2, [pc, #56]	; (402e50 <prvCheckTasksWaitingTermination+0x7c>)
  402e18:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402e1a:	4b0e      	ldr	r3, [pc, #56]	; (402e54 <prvCheckTasksWaitingTermination+0x80>)
  402e1c:	681b      	ldr	r3, [r3, #0]
  402e1e:	3b01      	subs	r3, #1
  402e20:	4a0c      	ldr	r2, [pc, #48]	; (402e54 <prvCheckTasksWaitingTermination+0x80>)
  402e22:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  402e24:	4b0c      	ldr	r3, [pc, #48]	; (402e58 <prvCheckTasksWaitingTermination+0x84>)
  402e26:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  402e28:	6838      	ldr	r0, [r7, #0]
  402e2a:	4b0c      	ldr	r3, [pc, #48]	; (402e5c <prvCheckTasksWaitingTermination+0x88>)
  402e2c:	4798      	blx	r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  402e2e:	4b09      	ldr	r3, [pc, #36]	; (402e54 <prvCheckTasksWaitingTermination+0x80>)
  402e30:	681b      	ldr	r3, [r3, #0]
  402e32:	2b00      	cmp	r3, #0
  402e34:	d1d2      	bne.n	402ddc <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
  402e36:	3708      	adds	r7, #8
  402e38:	46bd      	mov	sp, r7
  402e3a:	bd80      	pop	{r7, pc}
  402e3c:	00402595 	.word	0x00402595
  402e40:	20019408 	.word	0x20019408
  402e44:	004025b1 	.word	0x004025b1
  402e48:	0040177d 	.word	0x0040177d
  402e4c:	00401585 	.word	0x00401585
  402e50:	20019434 	.word	0x20019434
  402e54:	2001941c 	.word	0x2001941c
  402e58:	00401799 	.word	0x00401799
  402e5c:	00402f41 	.word	0x00402f41

00402e60 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  402e60:	b580      	push	{r7, lr}
  402e62:	b082      	sub	sp, #8
  402e64:	af00      	add	r7, sp, #0
  402e66:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402e68:	4b13      	ldr	r3, [pc, #76]	; (402eb8 <prvAddCurrentTaskToDelayedList+0x58>)
  402e6a:	681b      	ldr	r3, [r3, #0]
  402e6c:	687a      	ldr	r2, [r7, #4]
  402e6e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  402e70:	4b12      	ldr	r3, [pc, #72]	; (402ebc <prvAddCurrentTaskToDelayedList+0x5c>)
  402e72:	681b      	ldr	r3, [r3, #0]
  402e74:	687a      	ldr	r2, [r7, #4]
  402e76:	429a      	cmp	r2, r3
  402e78:	d209      	bcs.n	402e8e <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  402e7a:	4b11      	ldr	r3, [pc, #68]	; (402ec0 <prvAddCurrentTaskToDelayedList+0x60>)
  402e7c:	681a      	ldr	r2, [r3, #0]
  402e7e:	4b0e      	ldr	r3, [pc, #56]	; (402eb8 <prvAddCurrentTaskToDelayedList+0x58>)
  402e80:	681b      	ldr	r3, [r3, #0]
  402e82:	3304      	adds	r3, #4
  402e84:	4610      	mov	r0, r2
  402e86:	4619      	mov	r1, r3
  402e88:	4b0e      	ldr	r3, [pc, #56]	; (402ec4 <prvAddCurrentTaskToDelayedList+0x64>)
  402e8a:	4798      	blx	r3
  402e8c:	e010      	b.n	402eb0 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  402e8e:	4b0e      	ldr	r3, [pc, #56]	; (402ec8 <prvAddCurrentTaskToDelayedList+0x68>)
  402e90:	681a      	ldr	r2, [r3, #0]
  402e92:	4b09      	ldr	r3, [pc, #36]	; (402eb8 <prvAddCurrentTaskToDelayedList+0x58>)
  402e94:	681b      	ldr	r3, [r3, #0]
  402e96:	3304      	adds	r3, #4
  402e98:	4610      	mov	r0, r2
  402e9a:	4619      	mov	r1, r3
  402e9c:	4b09      	ldr	r3, [pc, #36]	; (402ec4 <prvAddCurrentTaskToDelayedList+0x64>)
  402e9e:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  402ea0:	4b0a      	ldr	r3, [pc, #40]	; (402ecc <prvAddCurrentTaskToDelayedList+0x6c>)
  402ea2:	681b      	ldr	r3, [r3, #0]
  402ea4:	687a      	ldr	r2, [r7, #4]
  402ea6:	429a      	cmp	r2, r3
  402ea8:	d202      	bcs.n	402eb0 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  402eaa:	4a08      	ldr	r2, [pc, #32]	; (402ecc <prvAddCurrentTaskToDelayedList+0x6c>)
  402eac:	687b      	ldr	r3, [r7, #4]
  402eae:	6013      	str	r3, [r2, #0]
		}
	}
}
  402eb0:	3708      	adds	r7, #8
  402eb2:	46bd      	mov	sp, r7
  402eb4:	bd80      	pop	{r7, pc}
  402eb6:	bf00      	nop
  402eb8:	20019294 	.word	0x20019294
  402ebc:	20019438 	.word	0x20019438
  402ec0:	200193f0 	.word	0x200193f0
  402ec4:	00401515 	.word	0x00401515
  402ec8:	200193ec 	.word	0x200193ec
  402ecc:	20000124 	.word	0x20000124

00402ed0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  402ed0:	b580      	push	{r7, lr}
  402ed2:	b084      	sub	sp, #16
  402ed4:	af00      	add	r7, sp, #0
  402ed6:	4603      	mov	r3, r0
  402ed8:	6039      	str	r1, [r7, #0]
  402eda:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  402edc:	2050      	movs	r0, #80	; 0x50
  402ede:	4b15      	ldr	r3, [pc, #84]	; (402f34 <prvAllocateTCBAndStack+0x64>)
  402ee0:	4798      	blx	r3
  402ee2:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  402ee4:	68fb      	ldr	r3, [r7, #12]
  402ee6:	2b00      	cmp	r3, #0
  402ee8:	d01f      	beq.n	402f2a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  402eea:	683b      	ldr	r3, [r7, #0]
  402eec:	2b00      	cmp	r3, #0
  402eee:	d106      	bne.n	402efe <prvAllocateTCBAndStack+0x2e>
  402ef0:	88fb      	ldrh	r3, [r7, #6]
  402ef2:	009b      	lsls	r3, r3, #2
  402ef4:	4618      	mov	r0, r3
  402ef6:	4b0f      	ldr	r3, [pc, #60]	; (402f34 <prvAllocateTCBAndStack+0x64>)
  402ef8:	4798      	blx	r3
  402efa:	4603      	mov	r3, r0
  402efc:	e000      	b.n	402f00 <prvAllocateTCBAndStack+0x30>
  402efe:	683b      	ldr	r3, [r7, #0]
  402f00:	68fa      	ldr	r2, [r7, #12]
  402f02:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  402f04:	68fb      	ldr	r3, [r7, #12]
  402f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f08:	2b00      	cmp	r3, #0
  402f0a:	d105      	bne.n	402f18 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  402f0c:	68f8      	ldr	r0, [r7, #12]
  402f0e:	4b0a      	ldr	r3, [pc, #40]	; (402f38 <prvAllocateTCBAndStack+0x68>)
  402f10:	4798      	blx	r3
			pxNewTCB = NULL;
  402f12:	2300      	movs	r3, #0
  402f14:	60fb      	str	r3, [r7, #12]
  402f16:	e008      	b.n	402f2a <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  402f18:	68fb      	ldr	r3, [r7, #12]
  402f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402f1c:	88fb      	ldrh	r3, [r7, #6]
  402f1e:	009b      	lsls	r3, r3, #2
  402f20:	4610      	mov	r0, r2
  402f22:	21a5      	movs	r1, #165	; 0xa5
  402f24:	461a      	mov	r2, r3
  402f26:	4b05      	ldr	r3, [pc, #20]	; (402f3c <prvAllocateTCBAndStack+0x6c>)
  402f28:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  402f2a:	68fb      	ldr	r3, [r7, #12]
}
  402f2c:	4618      	mov	r0, r3
  402f2e:	3710      	adds	r7, #16
  402f30:	46bd      	mov	sp, r7
  402f32:	bd80      	pop	{r7, pc}
  402f34:	0040189d 	.word	0x0040189d
  402f38:	004019a9 	.word	0x004019a9
  402f3c:	0040a815 	.word	0x0040a815

00402f40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  402f40:	b580      	push	{r7, lr}
  402f42:	b082      	sub	sp, #8
  402f44:	af00      	add	r7, sp, #0
  402f46:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  402f48:	687b      	ldr	r3, [r7, #4]
  402f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f4c:	4618      	mov	r0, r3
  402f4e:	4b04      	ldr	r3, [pc, #16]	; (402f60 <prvDeleteTCB+0x20>)
  402f50:	4798      	blx	r3
		vPortFree( pxTCB );
  402f52:	6878      	ldr	r0, [r7, #4]
  402f54:	4b02      	ldr	r3, [pc, #8]	; (402f60 <prvDeleteTCB+0x20>)
  402f56:	4798      	blx	r3
	}
  402f58:	3708      	adds	r7, #8
  402f5a:	46bd      	mov	sp, r7
  402f5c:	bd80      	pop	{r7, pc}
  402f5e:	bf00      	nop
  402f60:	004019a9 	.word	0x004019a9

00402f64 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  402f64:	b480      	push	{r7}
  402f66:	b083      	sub	sp, #12
  402f68:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  402f6a:	4b05      	ldr	r3, [pc, #20]	; (402f80 <xTaskGetCurrentTaskHandle+0x1c>)
  402f6c:	681b      	ldr	r3, [r3, #0]
  402f6e:	607b      	str	r3, [r7, #4]

		return xReturn;
  402f70:	687b      	ldr	r3, [r7, #4]
	}
  402f72:	4618      	mov	r0, r3
  402f74:	370c      	adds	r7, #12
  402f76:	46bd      	mov	sp, r7
  402f78:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f7c:	4770      	bx	lr
  402f7e:	bf00      	nop
  402f80:	20019294 	.word	0x20019294

00402f84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  402f84:	b480      	push	{r7}
  402f86:	b083      	sub	sp, #12
  402f88:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  402f8a:	4b0b      	ldr	r3, [pc, #44]	; (402fb8 <xTaskGetSchedulerState+0x34>)
  402f8c:	681b      	ldr	r3, [r3, #0]
  402f8e:	2b00      	cmp	r3, #0
  402f90:	d102      	bne.n	402f98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402f92:	2300      	movs	r3, #0
  402f94:	607b      	str	r3, [r7, #4]
  402f96:	e008      	b.n	402faa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  402f98:	4b08      	ldr	r3, [pc, #32]	; (402fbc <xTaskGetSchedulerState+0x38>)
  402f9a:	681b      	ldr	r3, [r3, #0]
  402f9c:	2b00      	cmp	r3, #0
  402f9e:	d102      	bne.n	402fa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  402fa0:	2301      	movs	r3, #1
  402fa2:	607b      	str	r3, [r7, #4]
  402fa4:	e001      	b.n	402faa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402fa6:	2302      	movs	r3, #2
  402fa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  402faa:	687b      	ldr	r3, [r7, #4]
	}
  402fac:	4618      	mov	r0, r3
  402fae:	370c      	adds	r7, #12
  402fb0:	46bd      	mov	sp, r7
  402fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fb6:	4770      	bx	lr
  402fb8:	20019444 	.word	0x20019444
  402fbc:	20019448 	.word	0x20019448

00402fc0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  402fc0:	b580      	push	{r7, lr}
  402fc2:	b084      	sub	sp, #16
  402fc4:	af00      	add	r7, sp, #0
  402fc6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  402fc8:	687b      	ldr	r3, [r7, #4]
  402fca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402fcc:	687b      	ldr	r3, [r7, #4]
  402fce:	2b00      	cmp	r3, #0
  402fd0:	d05b      	beq.n	40308a <vTaskPriorityInherit+0xca>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402fd2:	68fb      	ldr	r3, [r7, #12]
  402fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402fd6:	4b2e      	ldr	r3, [pc, #184]	; (403090 <vTaskPriorityInherit+0xd0>)
  402fd8:	681b      	ldr	r3, [r3, #0]
  402fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402fdc:	429a      	cmp	r2, r3
  402fde:	d254      	bcs.n	40308a <vTaskPriorityInherit+0xca>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  402fe0:	4b2b      	ldr	r3, [pc, #172]	; (403090 <vTaskPriorityInherit+0xd0>)
  402fe2:	681b      	ldr	r3, [r3, #0]
  402fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402fe6:	f1c3 020f 	rsb	r2, r3, #15
  402fea:	68fb      	ldr	r3, [r7, #12]
  402fec:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402fee:	68fb      	ldr	r3, [r7, #12]
  402ff0:	6959      	ldr	r1, [r3, #20]
  402ff2:	68fb      	ldr	r3, [r7, #12]
  402ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402ff6:	4613      	mov	r3, r2
  402ff8:	009b      	lsls	r3, r3, #2
  402ffa:	4413      	add	r3, r2
  402ffc:	009b      	lsls	r3, r3, #2
  402ffe:	4a25      	ldr	r2, [pc, #148]	; (403094 <vTaskPriorityInherit+0xd4>)
  403000:	4413      	add	r3, r2
  403002:	4299      	cmp	r1, r3
  403004:	d13c      	bne.n	403080 <vTaskPriorityInherit+0xc0>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  403006:	68fb      	ldr	r3, [r7, #12]
  403008:	3304      	adds	r3, #4
  40300a:	4618      	mov	r0, r3
  40300c:	4b22      	ldr	r3, [pc, #136]	; (403098 <vTaskPriorityInherit+0xd8>)
  40300e:	4798      	blx	r3
  403010:	4603      	mov	r3, r0
  403012:	2b00      	cmp	r3, #0
  403014:	d115      	bne.n	403042 <vTaskPriorityInherit+0x82>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403016:	68fb      	ldr	r3, [r7, #12]
  403018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40301a:	491e      	ldr	r1, [pc, #120]	; (403094 <vTaskPriorityInherit+0xd4>)
  40301c:	4613      	mov	r3, r2
  40301e:	009b      	lsls	r3, r3, #2
  403020:	4413      	add	r3, r2
  403022:	009b      	lsls	r3, r3, #2
  403024:	440b      	add	r3, r1
  403026:	681b      	ldr	r3, [r3, #0]
  403028:	2b00      	cmp	r3, #0
  40302a:	d10a      	bne.n	403042 <vTaskPriorityInherit+0x82>
  40302c:	68fb      	ldr	r3, [r7, #12]
  40302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403030:	461a      	mov	r2, r3
  403032:	2301      	movs	r3, #1
  403034:	4093      	lsls	r3, r2
  403036:	43da      	mvns	r2, r3
  403038:	4b18      	ldr	r3, [pc, #96]	; (40309c <vTaskPriorityInherit+0xdc>)
  40303a:	681b      	ldr	r3, [r3, #0]
  40303c:	4013      	ands	r3, r2
  40303e:	4a17      	ldr	r2, [pc, #92]	; (40309c <vTaskPriorityInherit+0xdc>)
  403040:	6013      	str	r3, [r2, #0]
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403042:	4b13      	ldr	r3, [pc, #76]	; (403090 <vTaskPriorityInherit+0xd0>)
  403044:	681b      	ldr	r3, [r3, #0]
  403046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  403048:	68fb      	ldr	r3, [r7, #12]
  40304a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  40304c:	68fb      	ldr	r3, [r7, #12]
  40304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403050:	461a      	mov	r2, r3
  403052:	2301      	movs	r3, #1
  403054:	fa03 f202 	lsl.w	r2, r3, r2
  403058:	4b10      	ldr	r3, [pc, #64]	; (40309c <vTaskPriorityInherit+0xdc>)
  40305a:	681b      	ldr	r3, [r3, #0]
  40305c:	4313      	orrs	r3, r2
  40305e:	4a0f      	ldr	r2, [pc, #60]	; (40309c <vTaskPriorityInherit+0xdc>)
  403060:	6013      	str	r3, [r2, #0]
  403062:	68fb      	ldr	r3, [r7, #12]
  403064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  403066:	4613      	mov	r3, r2
  403068:	009b      	lsls	r3, r3, #2
  40306a:	4413      	add	r3, r2
  40306c:	009b      	lsls	r3, r3, #2
  40306e:	4a09      	ldr	r2, [pc, #36]	; (403094 <vTaskPriorityInherit+0xd4>)
  403070:	441a      	add	r2, r3
  403072:	68fb      	ldr	r3, [r7, #12]
  403074:	3304      	adds	r3, #4
  403076:	4610      	mov	r0, r2
  403078:	4619      	mov	r1, r3
  40307a:	4b09      	ldr	r3, [pc, #36]	; (4030a0 <vTaskPriorityInherit+0xe0>)
  40307c:	4798      	blx	r3
  40307e:	e004      	b.n	40308a <vTaskPriorityInherit+0xca>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403080:	4b03      	ldr	r3, [pc, #12]	; (403090 <vTaskPriorityInherit+0xd0>)
  403082:	681b      	ldr	r3, [r3, #0]
  403084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  403086:	68fb      	ldr	r3, [r7, #12]
  403088:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  40308a:	3710      	adds	r7, #16
  40308c:	46bd      	mov	sp, r7
  40308e:	bd80      	pop	{r7, pc}
  403090:	20019294 	.word	0x20019294
  403094:	20019298 	.word	0x20019298
  403098:	00401585 	.word	0x00401585
  40309c:	20019440 	.word	0x20019440
  4030a0:	004014c5 	.word	0x004014c5

004030a4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  4030a4:	b580      	push	{r7, lr}
  4030a6:	b084      	sub	sp, #16
  4030a8:	af00      	add	r7, sp, #0
  4030aa:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  4030ac:	687b      	ldr	r3, [r7, #4]
  4030ae:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  4030b0:	687b      	ldr	r3, [r7, #4]
  4030b2:	2b00      	cmp	r3, #0
  4030b4:	d046      	beq.n	403144 <vTaskPriorityDisinherit+0xa0>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4030b6:	68fb      	ldr	r3, [r7, #12]
  4030b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4030ba:	68fb      	ldr	r3, [r7, #12]
  4030bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4030be:	429a      	cmp	r2, r3
  4030c0:	d040      	beq.n	403144 <vTaskPriorityDisinherit+0xa0>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4030c2:	68fb      	ldr	r3, [r7, #12]
  4030c4:	3304      	adds	r3, #4
  4030c6:	4618      	mov	r0, r3
  4030c8:	4b20      	ldr	r3, [pc, #128]	; (40314c <vTaskPriorityDisinherit+0xa8>)
  4030ca:	4798      	blx	r3
  4030cc:	4603      	mov	r3, r0
  4030ce:	2b00      	cmp	r3, #0
  4030d0:	d115      	bne.n	4030fe <vTaskPriorityDisinherit+0x5a>
				{
					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4030d2:	68fb      	ldr	r3, [r7, #12]
  4030d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4030d6:	491e      	ldr	r1, [pc, #120]	; (403150 <vTaskPriorityDisinherit+0xac>)
  4030d8:	4613      	mov	r3, r2
  4030da:	009b      	lsls	r3, r3, #2
  4030dc:	4413      	add	r3, r2
  4030de:	009b      	lsls	r3, r3, #2
  4030e0:	440b      	add	r3, r1
  4030e2:	681b      	ldr	r3, [r3, #0]
  4030e4:	2b00      	cmp	r3, #0
  4030e6:	d10a      	bne.n	4030fe <vTaskPriorityDisinherit+0x5a>
  4030e8:	68fb      	ldr	r3, [r7, #12]
  4030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4030ec:	461a      	mov	r2, r3
  4030ee:	2301      	movs	r3, #1
  4030f0:	4093      	lsls	r3, r2
  4030f2:	43da      	mvns	r2, r3
  4030f4:	4b17      	ldr	r3, [pc, #92]	; (403154 <vTaskPriorityDisinherit+0xb0>)
  4030f6:	681b      	ldr	r3, [r3, #0]
  4030f8:	4013      	ands	r3, r2
  4030fa:	4a16      	ldr	r2, [pc, #88]	; (403154 <vTaskPriorityDisinherit+0xb0>)
  4030fc:	6013      	str	r3, [r2, #0]
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  4030fe:	68fb      	ldr	r3, [r7, #12]
  403100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  403102:	68fb      	ldr	r3, [r7, #12]
  403104:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  403106:	68fb      	ldr	r3, [r7, #12]
  403108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40310a:	f1c3 020f 	rsb	r2, r3, #15
  40310e:	68fb      	ldr	r3, [r7, #12]
  403110:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  403112:	68fb      	ldr	r3, [r7, #12]
  403114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403116:	461a      	mov	r2, r3
  403118:	2301      	movs	r3, #1
  40311a:	fa03 f202 	lsl.w	r2, r3, r2
  40311e:	4b0d      	ldr	r3, [pc, #52]	; (403154 <vTaskPriorityDisinherit+0xb0>)
  403120:	681b      	ldr	r3, [r3, #0]
  403122:	4313      	orrs	r3, r2
  403124:	4a0b      	ldr	r2, [pc, #44]	; (403154 <vTaskPriorityDisinherit+0xb0>)
  403126:	6013      	str	r3, [r2, #0]
  403128:	68fb      	ldr	r3, [r7, #12]
  40312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40312c:	4613      	mov	r3, r2
  40312e:	009b      	lsls	r3, r3, #2
  403130:	4413      	add	r3, r2
  403132:	009b      	lsls	r3, r3, #2
  403134:	4a06      	ldr	r2, [pc, #24]	; (403150 <vTaskPriorityDisinherit+0xac>)
  403136:	441a      	add	r2, r3
  403138:	68fb      	ldr	r3, [r7, #12]
  40313a:	3304      	adds	r3, #4
  40313c:	4610      	mov	r0, r2
  40313e:	4619      	mov	r1, r3
  403140:	4b05      	ldr	r3, [pc, #20]	; (403158 <vTaskPriorityDisinherit+0xb4>)
  403142:	4798      	blx	r3
			}
		}
	}
  403144:	3710      	adds	r7, #16
  403146:	46bd      	mov	sp, r7
  403148:	bd80      	pop	{r7, pc}
  40314a:	bf00      	nop
  40314c:	00401585 	.word	0x00401585
  403150:	20019298 	.word	0x20019298
  403154:	20019440 	.word	0x20019440
  403158:	004014c5 	.word	0x004014c5

0040315c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  40315c:	b590      	push	{r4, r7, lr}
  40315e:	b087      	sub	sp, #28
  403160:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  403162:	2300      	movs	r3, #0
  403164:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  403166:	4b11      	ldr	r3, [pc, #68]	; (4031ac <xTimerCreateTimerTask+0x50>)
  403168:	4798      	blx	r3

	if( xTimerQueue != NULL )
  40316a:	4b11      	ldr	r3, [pc, #68]	; (4031b0 <xTimerCreateTimerTask+0x54>)
  40316c:	681b      	ldr	r3, [r3, #0]
  40316e:	2b00      	cmp	r3, #0
  403170:	d00f      	beq.n	403192 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  403172:	230e      	movs	r3, #14
  403174:	9300      	str	r3, [sp, #0]
  403176:	2300      	movs	r3, #0
  403178:	9301      	str	r3, [sp, #4]
  40317a:	2300      	movs	r3, #0
  40317c:	9302      	str	r3, [sp, #8]
  40317e:	2300      	movs	r3, #0
  403180:	9303      	str	r3, [sp, #12]
  403182:	480c      	ldr	r0, [pc, #48]	; (4031b4 <xTimerCreateTimerTask+0x58>)
  403184:	490c      	ldr	r1, [pc, #48]	; (4031b8 <xTimerCreateTimerTask+0x5c>)
  403186:	f44f 7243 	mov.w	r2, #780	; 0x30c
  40318a:	2300      	movs	r3, #0
  40318c:	4c0b      	ldr	r4, [pc, #44]	; (4031bc <xTimerCreateTimerTask+0x60>)
  40318e:	47a0      	blx	r4
  403190:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  403192:	687b      	ldr	r3, [r7, #4]
  403194:	2b00      	cmp	r3, #0
  403196:	d103      	bne.n	4031a0 <xTimerCreateTimerTask+0x44>
  403198:	4809      	ldr	r0, [pc, #36]	; (4031c0 <xTimerCreateTimerTask+0x64>)
  40319a:	21d7      	movs	r1, #215	; 0xd7
  40319c:	4b09      	ldr	r3, [pc, #36]	; (4031c4 <xTimerCreateTimerTask+0x68>)
  40319e:	4798      	blx	r3
	return xReturn;
  4031a0:	687b      	ldr	r3, [r7, #4]
}
  4031a2:	4618      	mov	r0, r3
  4031a4:	370c      	adds	r7, #12
  4031a6:	46bd      	mov	sp, r7
  4031a8:	bd90      	pop	{r4, r7, pc}
  4031aa:	bf00      	nop
  4031ac:	00403721 	.word	0x00403721
  4031b0:	20019490 	.word	0x20019490
  4031b4:	00403369 	.word	0x00403369
  4031b8:	0040d20c 	.word	0x0040d20c
  4031bc:	00402351 	.word	0x00402351
  4031c0:	0040d214 	.word	0x0040d214
  4031c4:	00409705 	.word	0x00409705

004031c8 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
  4031c8:	b580      	push	{r7, lr}
  4031ca:	b086      	sub	sp, #24
  4031cc:	af00      	add	r7, sp, #0
  4031ce:	60f8      	str	r0, [r7, #12]
  4031d0:	60b9      	str	r1, [r7, #8]
  4031d2:	607a      	str	r2, [r7, #4]
  4031d4:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
  4031d6:	68bb      	ldr	r3, [r7, #8]
  4031d8:	2b00      	cmp	r3, #0
  4031da:	d109      	bne.n	4031f0 <xTimerCreate+0x28>
	{
		pxNewTimer = NULL;
  4031dc:	2300      	movs	r3, #0
  4031de:	617b      	str	r3, [r7, #20]
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
  4031e0:	68bb      	ldr	r3, [r7, #8]
  4031e2:	2b00      	cmp	r3, #0
  4031e4:	d121      	bne.n	40322a <xTimerCreate+0x62>
  4031e6:	4813      	ldr	r0, [pc, #76]	; (403234 <xTimerCreate+0x6c>)
  4031e8:	21e4      	movs	r1, #228	; 0xe4
  4031ea:	4b13      	ldr	r3, [pc, #76]	; (403238 <xTimerCreate+0x70>)
  4031ec:	4798      	blx	r3
  4031ee:	e01c      	b.n	40322a <xTimerCreate+0x62>
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
  4031f0:	2028      	movs	r0, #40	; 0x28
  4031f2:	4b12      	ldr	r3, [pc, #72]	; (40323c <xTimerCreate+0x74>)
  4031f4:	4798      	blx	r3
  4031f6:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
  4031f8:	697b      	ldr	r3, [r7, #20]
  4031fa:	2b00      	cmp	r3, #0
  4031fc:	d015      	beq.n	40322a <xTimerCreate+0x62>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  4031fe:	4b10      	ldr	r3, [pc, #64]	; (403240 <xTimerCreate+0x78>)
  403200:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  403202:	697b      	ldr	r3, [r7, #20]
  403204:	68fa      	ldr	r2, [r7, #12]
  403206:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  403208:	697b      	ldr	r3, [r7, #20]
  40320a:	68ba      	ldr	r2, [r7, #8]
  40320c:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  40320e:	697b      	ldr	r3, [r7, #20]
  403210:	687a      	ldr	r2, [r7, #4]
  403212:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  403214:	697b      	ldr	r3, [r7, #20]
  403216:	683a      	ldr	r2, [r7, #0]
  403218:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  40321a:	697b      	ldr	r3, [r7, #20]
  40321c:	6a3a      	ldr	r2, [r7, #32]
  40321e:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  403220:	697b      	ldr	r3, [r7, #20]
  403222:	3304      	adds	r3, #4
  403224:	4618      	mov	r0, r3
  403226:	4b07      	ldr	r3, [pc, #28]	; (403244 <xTimerCreate+0x7c>)
  403228:	4798      	blx	r3
		{
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
  40322a:	697b      	ldr	r3, [r7, #20]
}
  40322c:	4618      	mov	r0, r3
  40322e:	3718      	adds	r7, #24
  403230:	46bd      	mov	sp, r7
  403232:	bd80      	pop	{r7, pc}
  403234:	0040d214 	.word	0x0040d214
  403238:	00409705 	.word	0x00409705
  40323c:	0040189d 	.word	0x0040189d
  403240:	00403721 	.word	0x00403721
  403244:	004014ad 	.word	0x004014ad

00403248 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  403248:	b590      	push	{r4, r7, lr}
  40324a:	b089      	sub	sp, #36	; 0x24
  40324c:	af00      	add	r7, sp, #0
  40324e:	60f8      	str	r0, [r7, #12]
  403250:	60b9      	str	r1, [r7, #8]
  403252:	607a      	str	r2, [r7, #4]
  403254:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  403256:	2300      	movs	r3, #0
  403258:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  40325a:	4b1d      	ldr	r3, [pc, #116]	; (4032d0 <xTimerGenericCommand+0x88>)
  40325c:	681b      	ldr	r3, [r3, #0]
  40325e:	2b00      	cmp	r3, #0
  403260:	d030      	beq.n	4032c4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  403262:	68bb      	ldr	r3, [r7, #8]
  403264:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  403266:	687b      	ldr	r3, [r7, #4]
  403268:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  40326a:	68fb      	ldr	r3, [r7, #12]
  40326c:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  40326e:	683b      	ldr	r3, [r7, #0]
  403270:	2b00      	cmp	r3, #0
  403272:	d11c      	bne.n	4032ae <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  403274:	4b17      	ldr	r3, [pc, #92]	; (4032d4 <xTimerGenericCommand+0x8c>)
  403276:	4798      	blx	r3
  403278:	4603      	mov	r3, r0
  40327a:	2b01      	cmp	r3, #1
  40327c:	d10b      	bne.n	403296 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  40327e:	4b14      	ldr	r3, [pc, #80]	; (4032d0 <xTimerGenericCommand+0x88>)
  403280:	681a      	ldr	r2, [r3, #0]
  403282:	f107 0310 	add.w	r3, r7, #16
  403286:	4610      	mov	r0, r2
  403288:	4619      	mov	r1, r3
  40328a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40328c:	2300      	movs	r3, #0
  40328e:	4c12      	ldr	r4, [pc, #72]	; (4032d8 <xTimerGenericCommand+0x90>)
  403290:	47a0      	blx	r4
  403292:	61f8      	str	r0, [r7, #28]
  403294:	e016      	b.n	4032c4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  403296:	4b0e      	ldr	r3, [pc, #56]	; (4032d0 <xTimerGenericCommand+0x88>)
  403298:	681a      	ldr	r2, [r3, #0]
  40329a:	f107 0310 	add.w	r3, r7, #16
  40329e:	4610      	mov	r0, r2
  4032a0:	4619      	mov	r1, r3
  4032a2:	2200      	movs	r2, #0
  4032a4:	2300      	movs	r3, #0
  4032a6:	4c0c      	ldr	r4, [pc, #48]	; (4032d8 <xTimerGenericCommand+0x90>)
  4032a8:	47a0      	blx	r4
  4032aa:	61f8      	str	r0, [r7, #28]
  4032ac:	e00a      	b.n	4032c4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4032ae:	4b08      	ldr	r3, [pc, #32]	; (4032d0 <xTimerGenericCommand+0x88>)
  4032b0:	681a      	ldr	r2, [r3, #0]
  4032b2:	f107 0310 	add.w	r3, r7, #16
  4032b6:	4610      	mov	r0, r2
  4032b8:	4619      	mov	r1, r3
  4032ba:	683a      	ldr	r2, [r7, #0]
  4032bc:	2300      	movs	r3, #0
  4032be:	4c07      	ldr	r4, [pc, #28]	; (4032dc <xTimerGenericCommand+0x94>)
  4032c0:	47a0      	blx	r4
  4032c2:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  4032c4:	69fb      	ldr	r3, [r7, #28]
}
  4032c6:	4618      	mov	r0, r3
  4032c8:	3724      	adds	r7, #36	; 0x24
  4032ca:	46bd      	mov	sp, r7
  4032cc:	bd90      	pop	{r4, r7, pc}
  4032ce:	bf00      	nop
  4032d0:	20019490 	.word	0x20019490
  4032d4:	00402f85 	.word	0x00402f85
  4032d8:	00401ca9 	.word	0x00401ca9
  4032dc:	00401e21 	.word	0x00401e21

004032e0 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  4032e0:	b590      	push	{r4, r7, lr}
  4032e2:	b087      	sub	sp, #28
  4032e4:	af02      	add	r7, sp, #8
  4032e6:	6078      	str	r0, [r7, #4]
  4032e8:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4032ea:	4b19      	ldr	r3, [pc, #100]	; (403350 <prvProcessExpiredTimer+0x70>)
  4032ec:	681b      	ldr	r3, [r3, #0]
  4032ee:	68db      	ldr	r3, [r3, #12]
  4032f0:	68db      	ldr	r3, [r3, #12]
  4032f2:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  4032f4:	68fb      	ldr	r3, [r7, #12]
  4032f6:	3304      	adds	r3, #4
  4032f8:	4618      	mov	r0, r3
  4032fa:	4b16      	ldr	r3, [pc, #88]	; (403354 <prvProcessExpiredTimer+0x74>)
  4032fc:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4032fe:	68fb      	ldr	r3, [r7, #12]
  403300:	69db      	ldr	r3, [r3, #28]
  403302:	2b01      	cmp	r3, #1
  403304:	d11d      	bne.n	403342 <prvProcessExpiredTimer+0x62>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  403306:	68fb      	ldr	r3, [r7, #12]
  403308:	699a      	ldr	r2, [r3, #24]
  40330a:	687b      	ldr	r3, [r7, #4]
  40330c:	4413      	add	r3, r2
  40330e:	68f8      	ldr	r0, [r7, #12]
  403310:	4619      	mov	r1, r3
  403312:	683a      	ldr	r2, [r7, #0]
  403314:	687b      	ldr	r3, [r7, #4]
  403316:	4c10      	ldr	r4, [pc, #64]	; (403358 <prvProcessExpiredTimer+0x78>)
  403318:	47a0      	blx	r4
  40331a:	4603      	mov	r3, r0
  40331c:	2b01      	cmp	r3, #1
  40331e:	d110      	bne.n	403342 <prvProcessExpiredTimer+0x62>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  403320:	2300      	movs	r3, #0
  403322:	9300      	str	r3, [sp, #0]
  403324:	68f8      	ldr	r0, [r7, #12]
  403326:	2100      	movs	r1, #0
  403328:	687a      	ldr	r2, [r7, #4]
  40332a:	2300      	movs	r3, #0
  40332c:	4c0b      	ldr	r4, [pc, #44]	; (40335c <prvProcessExpiredTimer+0x7c>)
  40332e:	47a0      	blx	r4
  403330:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  403332:	68bb      	ldr	r3, [r7, #8]
  403334:	2b00      	cmp	r3, #0
  403336:	d104      	bne.n	403342 <prvProcessExpiredTimer+0x62>
  403338:	4809      	ldr	r0, [pc, #36]	; (403360 <prvProcessExpiredTimer+0x80>)
  40333a:	f240 114f 	movw	r1, #335	; 0x14f
  40333e:	4b09      	ldr	r3, [pc, #36]	; (403364 <prvProcessExpiredTimer+0x84>)
  403340:	4798      	blx	r3
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  403342:	68fb      	ldr	r3, [r7, #12]
  403344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  403346:	68f8      	ldr	r0, [r7, #12]
  403348:	4798      	blx	r3
}
  40334a:	3714      	adds	r7, #20
  40334c:	46bd      	mov	sp, r7
  40334e:	bd90      	pop	{r4, r7, pc}
  403350:	20019488 	.word	0x20019488
  403354:	00401585 	.word	0x00401585
  403358:	004034b1 	.word	0x004034b1
  40335c:	00403249 	.word	0x00403249
  403360:	0040d214 	.word	0x0040d214
  403364:	00409705 	.word	0x00409705

00403368 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  403368:	b580      	push	{r7, lr}
  40336a:	b084      	sub	sp, #16
  40336c:	af00      	add	r7, sp, #0
  40336e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  403370:	f107 0308 	add.w	r3, r7, #8
  403374:	4618      	mov	r0, r3
  403376:	4b05      	ldr	r3, [pc, #20]	; (40338c <prvTimerTask+0x24>)
  403378:	4798      	blx	r3
  40337a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  40337c:	68bb      	ldr	r3, [r7, #8]
  40337e:	68f8      	ldr	r0, [r7, #12]
  403380:	4619      	mov	r1, r3
  403382:	4b03      	ldr	r3, [pc, #12]	; (403390 <prvTimerTask+0x28>)
  403384:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  403386:	4b03      	ldr	r3, [pc, #12]	; (403394 <prvTimerTask+0x2c>)
  403388:	4798      	blx	r3
	}
  40338a:	e7f1      	b.n	403370 <prvTimerTask+0x8>
  40338c:	0040341d 	.word	0x0040341d
  403390:	00403399 	.word	0x00403399
  403394:	00403539 	.word	0x00403539

00403398 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  403398:	b580      	push	{r7, lr}
  40339a:	b084      	sub	sp, #16
  40339c:	af00      	add	r7, sp, #0
  40339e:	6078      	str	r0, [r7, #4]
  4033a0:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  4033a2:	4b17      	ldr	r3, [pc, #92]	; (403400 <prvProcessTimerOrBlockTask+0x68>)
  4033a4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4033a6:	f107 0308 	add.w	r3, r7, #8
  4033aa:	4618      	mov	r0, r3
  4033ac:	4b15      	ldr	r3, [pc, #84]	; (403404 <prvProcessTimerOrBlockTask+0x6c>)
  4033ae:	4798      	blx	r3
  4033b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  4033b2:	68bb      	ldr	r3, [r7, #8]
  4033b4:	2b00      	cmp	r3, #0
  4033b6:	d11e      	bne.n	4033f6 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4033b8:	683b      	ldr	r3, [r7, #0]
  4033ba:	2b00      	cmp	r3, #0
  4033bc:	d10a      	bne.n	4033d4 <prvProcessTimerOrBlockTask+0x3c>
  4033be:	687a      	ldr	r2, [r7, #4]
  4033c0:	68fb      	ldr	r3, [r7, #12]
  4033c2:	429a      	cmp	r2, r3
  4033c4:	d806      	bhi.n	4033d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  4033c6:	4b10      	ldr	r3, [pc, #64]	; (403408 <prvProcessTimerOrBlockTask+0x70>)
  4033c8:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  4033ca:	6878      	ldr	r0, [r7, #4]
  4033cc:	68f9      	ldr	r1, [r7, #12]
  4033ce:	4b0f      	ldr	r3, [pc, #60]	; (40340c <prvProcessTimerOrBlockTask+0x74>)
  4033d0:	4798      	blx	r3
  4033d2:	e012      	b.n	4033fa <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  4033d4:	4b0e      	ldr	r3, [pc, #56]	; (403410 <prvProcessTimerOrBlockTask+0x78>)
  4033d6:	6819      	ldr	r1, [r3, #0]
  4033d8:	687a      	ldr	r2, [r7, #4]
  4033da:	68fb      	ldr	r3, [r7, #12]
  4033dc:	1ad3      	subs	r3, r2, r3
  4033de:	4608      	mov	r0, r1
  4033e0:	4619      	mov	r1, r3
  4033e2:	4b0c      	ldr	r3, [pc, #48]	; (403414 <prvProcessTimerOrBlockTask+0x7c>)
  4033e4:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  4033e6:	4b08      	ldr	r3, [pc, #32]	; (403408 <prvProcessTimerOrBlockTask+0x70>)
  4033e8:	4798      	blx	r3
  4033ea:	4603      	mov	r3, r0
  4033ec:	2b00      	cmp	r3, #0
  4033ee:	d104      	bne.n	4033fa <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  4033f0:	4b09      	ldr	r3, [pc, #36]	; (403418 <prvProcessTimerOrBlockTask+0x80>)
  4033f2:	4798      	blx	r3
  4033f4:	e001      	b.n	4033fa <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  4033f6:	4b04      	ldr	r3, [pc, #16]	; (403408 <prvProcessTimerOrBlockTask+0x70>)
  4033f8:	4798      	blx	r3
		}
	}
}
  4033fa:	3710      	adds	r7, #16
  4033fc:	46bd      	mov	sp, r7
  4033fe:	bd80      	pop	{r7, pc}
  403400:	00402595 	.word	0x00402595
  403404:	00403465 	.word	0x00403465
  403408:	004025b1 	.word	0x004025b1
  40340c:	004032e1 	.word	0x004032e1
  403410:	20019490 	.word	0x20019490
  403414:	004022ed 	.word	0x004022ed
  403418:	00401765 	.word	0x00401765

0040341c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  40341c:	b480      	push	{r7}
  40341e:	b085      	sub	sp, #20
  403420:	af00      	add	r7, sp, #0
  403422:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403424:	4b0e      	ldr	r3, [pc, #56]	; (403460 <prvGetNextExpireTime+0x44>)
  403426:	681b      	ldr	r3, [r3, #0]
  403428:	681b      	ldr	r3, [r3, #0]
  40342a:	2b00      	cmp	r3, #0
  40342c:	bf0c      	ite	eq
  40342e:	2301      	moveq	r3, #1
  403430:	2300      	movne	r3, #0
  403432:	b2db      	uxtb	r3, r3
  403434:	461a      	mov	r2, r3
  403436:	687b      	ldr	r3, [r7, #4]
  403438:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40343a:	687b      	ldr	r3, [r7, #4]
  40343c:	681b      	ldr	r3, [r3, #0]
  40343e:	2b00      	cmp	r3, #0
  403440:	d105      	bne.n	40344e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403442:	4b07      	ldr	r3, [pc, #28]	; (403460 <prvGetNextExpireTime+0x44>)
  403444:	681b      	ldr	r3, [r3, #0]
  403446:	68db      	ldr	r3, [r3, #12]
  403448:	681b      	ldr	r3, [r3, #0]
  40344a:	60fb      	str	r3, [r7, #12]
  40344c:	e001      	b.n	403452 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  40344e:	2300      	movs	r3, #0
  403450:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  403452:	68fb      	ldr	r3, [r7, #12]
}
  403454:	4618      	mov	r0, r3
  403456:	3714      	adds	r7, #20
  403458:	46bd      	mov	sp, r7
  40345a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40345e:	4770      	bx	lr
  403460:	20019488 	.word	0x20019488

00403464 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  403464:	b580      	push	{r7, lr}
  403466:	b084      	sub	sp, #16
  403468:	af00      	add	r7, sp, #0
  40346a:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  40346c:	4b0d      	ldr	r3, [pc, #52]	; (4034a4 <prvSampleTimeNow+0x40>)
  40346e:	4798      	blx	r3
  403470:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  403472:	4b0d      	ldr	r3, [pc, #52]	; (4034a8 <prvSampleTimeNow+0x44>)
  403474:	681b      	ldr	r3, [r3, #0]
  403476:	68fa      	ldr	r2, [r7, #12]
  403478:	429a      	cmp	r2, r3
  40347a:	d208      	bcs.n	40348e <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  40347c:	4b0a      	ldr	r3, [pc, #40]	; (4034a8 <prvSampleTimeNow+0x44>)
  40347e:	681b      	ldr	r3, [r3, #0]
  403480:	4618      	mov	r0, r3
  403482:	4b0a      	ldr	r3, [pc, #40]	; (4034ac <prvSampleTimeNow+0x48>)
  403484:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  403486:	687b      	ldr	r3, [r7, #4]
  403488:	2201      	movs	r2, #1
  40348a:	601a      	str	r2, [r3, #0]
  40348c:	e002      	b.n	403494 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  40348e:	687b      	ldr	r3, [r7, #4]
  403490:	2200      	movs	r2, #0
  403492:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  403494:	4a04      	ldr	r2, [pc, #16]	; (4034a8 <prvSampleTimeNow+0x44>)
  403496:	68fb      	ldr	r3, [r7, #12]
  403498:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  40349a:	68fb      	ldr	r3, [r7, #12]
}
  40349c:	4618      	mov	r0, r3
  40349e:	3710      	adds	r7, #16
  4034a0:	46bd      	mov	sp, r7
  4034a2:	bd80      	pop	{r7, pc}
  4034a4:	004026dd 	.word	0x004026dd
  4034a8:	20019494 	.word	0x20019494
  4034ac:	00403655 	.word	0x00403655

004034b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  4034b0:	b580      	push	{r7, lr}
  4034b2:	b086      	sub	sp, #24
  4034b4:	af00      	add	r7, sp, #0
  4034b6:	60f8      	str	r0, [r7, #12]
  4034b8:	60b9      	str	r1, [r7, #8]
  4034ba:	607a      	str	r2, [r7, #4]
  4034bc:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  4034be:	2300      	movs	r3, #0
  4034c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4034c2:	68fb      	ldr	r3, [r7, #12]
  4034c4:	68ba      	ldr	r2, [r7, #8]
  4034c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4034c8:	68fb      	ldr	r3, [r7, #12]
  4034ca:	68fa      	ldr	r2, [r7, #12]
  4034cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  4034ce:	68ba      	ldr	r2, [r7, #8]
  4034d0:	687b      	ldr	r3, [r7, #4]
  4034d2:	429a      	cmp	r2, r3
  4034d4:	d812      	bhi.n	4034fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  4034d6:	687a      	ldr	r2, [r7, #4]
  4034d8:	683b      	ldr	r3, [r7, #0]
  4034da:	1ad2      	subs	r2, r2, r3
  4034dc:	68fb      	ldr	r3, [r7, #12]
  4034de:	699b      	ldr	r3, [r3, #24]
  4034e0:	429a      	cmp	r2, r3
  4034e2:	d302      	bcc.n	4034ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4034e4:	2301      	movs	r3, #1
  4034e6:	617b      	str	r3, [r7, #20]
  4034e8:	e01b      	b.n	403522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4034ea:	4b10      	ldr	r3, [pc, #64]	; (40352c <prvInsertTimerInActiveList+0x7c>)
  4034ec:	681a      	ldr	r2, [r3, #0]
  4034ee:	68fb      	ldr	r3, [r7, #12]
  4034f0:	3304      	adds	r3, #4
  4034f2:	4610      	mov	r0, r2
  4034f4:	4619      	mov	r1, r3
  4034f6:	4b0e      	ldr	r3, [pc, #56]	; (403530 <prvInsertTimerInActiveList+0x80>)
  4034f8:	4798      	blx	r3
  4034fa:	e012      	b.n	403522 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4034fc:	687a      	ldr	r2, [r7, #4]
  4034fe:	683b      	ldr	r3, [r7, #0]
  403500:	429a      	cmp	r2, r3
  403502:	d206      	bcs.n	403512 <prvInsertTimerInActiveList+0x62>
  403504:	68ba      	ldr	r2, [r7, #8]
  403506:	683b      	ldr	r3, [r7, #0]
  403508:	429a      	cmp	r2, r3
  40350a:	d302      	bcc.n	403512 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40350c:	2301      	movs	r3, #1
  40350e:	617b      	str	r3, [r7, #20]
  403510:	e007      	b.n	403522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403512:	4b08      	ldr	r3, [pc, #32]	; (403534 <prvInsertTimerInActiveList+0x84>)
  403514:	681a      	ldr	r2, [r3, #0]
  403516:	68fb      	ldr	r3, [r7, #12]
  403518:	3304      	adds	r3, #4
  40351a:	4610      	mov	r0, r2
  40351c:	4619      	mov	r1, r3
  40351e:	4b04      	ldr	r3, [pc, #16]	; (403530 <prvInsertTimerInActiveList+0x80>)
  403520:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  403522:	697b      	ldr	r3, [r7, #20]
}
  403524:	4618      	mov	r0, r3
  403526:	3718      	adds	r7, #24
  403528:	46bd      	mov	sp, r7
  40352a:	bd80      	pop	{r7, pc}
  40352c:	2001948c 	.word	0x2001948c
  403530:	00401515 	.word	0x00401515
  403534:	20019488 	.word	0x20019488

00403538 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  403538:	b590      	push	{r4, r7, lr}
  40353a:	b08b      	sub	sp, #44	; 0x2c
  40353c:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40353e:	1d3b      	adds	r3, r7, #4
  403540:	4618      	mov	r0, r3
  403542:	4b3b      	ldr	r3, [pc, #236]	; (403630 <prvProcessReceivedCommands+0xf8>)
  403544:	4798      	blx	r3
  403546:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  403548:	e062      	b.n	403610 <prvProcessReceivedCommands+0xd8>
	{
		pxTimer = xMessage.pxTimer;
  40354a:	693b      	ldr	r3, [r7, #16]
  40354c:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  40354e:	69bb      	ldr	r3, [r7, #24]
  403550:	2b00      	cmp	r3, #0
  403552:	d008      	beq.n	403566 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403554:	69bb      	ldr	r3, [r7, #24]
  403556:	695b      	ldr	r3, [r3, #20]
  403558:	2b00      	cmp	r3, #0
  40355a:	d004      	beq.n	403566 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  40355c:	69bb      	ldr	r3, [r7, #24]
  40355e:	3304      	adds	r3, #4
  403560:	4618      	mov	r0, r3
  403562:	4b34      	ldr	r3, [pc, #208]	; (403634 <prvProcessReceivedCommands+0xfc>)
  403564:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  403566:	68bb      	ldr	r3, [r7, #8]
  403568:	2b03      	cmp	r3, #3
  40356a:	d850      	bhi.n	40360e <prvProcessReceivedCommands+0xd6>
  40356c:	a201      	add	r2, pc, #4	; (adr r2, 403574 <prvProcessReceivedCommands+0x3c>)
  40356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403572:	bf00      	nop
  403574:	00403585 	.word	0x00403585
  403578:	00403611 	.word	0x00403611
  40357c:	004035d9 	.word	0x004035d9
  403580:	00403607 	.word	0x00403607
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  403584:	68fa      	ldr	r2, [r7, #12]
  403586:	69bb      	ldr	r3, [r7, #24]
  403588:	699b      	ldr	r3, [r3, #24]
  40358a:	441a      	add	r2, r3
  40358c:	68fb      	ldr	r3, [r7, #12]
  40358e:	69b8      	ldr	r0, [r7, #24]
  403590:	4611      	mov	r1, r2
  403592:	69fa      	ldr	r2, [r7, #28]
  403594:	4c28      	ldr	r4, [pc, #160]	; (403638 <prvProcessReceivedCommands+0x100>)
  403596:	47a0      	blx	r4
  403598:	4603      	mov	r3, r0
  40359a:	2b01      	cmp	r3, #1
  40359c:	d11b      	bne.n	4035d6 <prvProcessReceivedCommands+0x9e>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40359e:	69bb      	ldr	r3, [r7, #24]
  4035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4035a2:	69b8      	ldr	r0, [r7, #24]
  4035a4:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4035a6:	69bb      	ldr	r3, [r7, #24]
  4035a8:	69db      	ldr	r3, [r3, #28]
  4035aa:	2b01      	cmp	r3, #1
  4035ac:	d113      	bne.n	4035d6 <prvProcessReceivedCommands+0x9e>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4035ae:	68fa      	ldr	r2, [r7, #12]
  4035b0:	69bb      	ldr	r3, [r7, #24]
  4035b2:	699b      	ldr	r3, [r3, #24]
  4035b4:	441a      	add	r2, r3
  4035b6:	2300      	movs	r3, #0
  4035b8:	9300      	str	r3, [sp, #0]
  4035ba:	69b8      	ldr	r0, [r7, #24]
  4035bc:	2100      	movs	r1, #0
  4035be:	2300      	movs	r3, #0
  4035c0:	4c1e      	ldr	r4, [pc, #120]	; (40363c <prvProcessReceivedCommands+0x104>)
  4035c2:	47a0      	blx	r4
  4035c4:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  4035c6:	697b      	ldr	r3, [r7, #20]
  4035c8:	2b00      	cmp	r3, #0
  4035ca:	d104      	bne.n	4035d6 <prvProcessReceivedCommands+0x9e>
  4035cc:	481c      	ldr	r0, [pc, #112]	; (403640 <prvProcessReceivedCommands+0x108>)
  4035ce:	f240 2126 	movw	r1, #550	; 0x226
  4035d2:	4b1c      	ldr	r3, [pc, #112]	; (403644 <prvProcessReceivedCommands+0x10c>)
  4035d4:	4798      	blx	r3
						( void ) xResult;
					}
				}
				break;
  4035d6:	e01b      	b.n	403610 <prvProcessReceivedCommands+0xd8>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  4035d8:	68fa      	ldr	r2, [r7, #12]
  4035da:	69bb      	ldr	r3, [r7, #24]
  4035dc:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4035de:	69bb      	ldr	r3, [r7, #24]
  4035e0:	699b      	ldr	r3, [r3, #24]
  4035e2:	2b00      	cmp	r3, #0
  4035e4:	d104      	bne.n	4035f0 <prvProcessReceivedCommands+0xb8>
  4035e6:	4816      	ldr	r0, [pc, #88]	; (403640 <prvProcessReceivedCommands+0x108>)
  4035e8:	f240 2133 	movw	r1, #563	; 0x233
  4035ec:	4b15      	ldr	r3, [pc, #84]	; (403644 <prvProcessReceivedCommands+0x10c>)
  4035ee:	4798      	blx	r3
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4035f0:	69bb      	ldr	r3, [r7, #24]
  4035f2:	699a      	ldr	r2, [r3, #24]
  4035f4:	69fb      	ldr	r3, [r7, #28]
  4035f6:	4413      	add	r3, r2
  4035f8:	69b8      	ldr	r0, [r7, #24]
  4035fa:	4619      	mov	r1, r3
  4035fc:	69fa      	ldr	r2, [r7, #28]
  4035fe:	69fb      	ldr	r3, [r7, #28]
  403600:	4c0d      	ldr	r4, [pc, #52]	; (403638 <prvProcessReceivedCommands+0x100>)
  403602:	47a0      	blx	r4
				break;
  403604:	e004      	b.n	403610 <prvProcessReceivedCommands+0xd8>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  403606:	69b8      	ldr	r0, [r7, #24]
  403608:	4b0f      	ldr	r3, [pc, #60]	; (403648 <prvProcessReceivedCommands+0x110>)
  40360a:	4798      	blx	r3
				break;
  40360c:	e000      	b.n	403610 <prvProcessReceivedCommands+0xd8>

			default	:
				/* Don't expect to get here. */
				break;
  40360e:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  403610:	4b0e      	ldr	r3, [pc, #56]	; (40364c <prvProcessReceivedCommands+0x114>)
  403612:	681a      	ldr	r2, [r3, #0]
  403614:	f107 0308 	add.w	r3, r7, #8
  403618:	4610      	mov	r0, r2
  40361a:	4619      	mov	r1, r3
  40361c:	2200      	movs	r2, #0
  40361e:	2300      	movs	r3, #0
  403620:	4c0b      	ldr	r4, [pc, #44]	; (403650 <prvProcessReceivedCommands+0x118>)
  403622:	47a0      	blx	r4
  403624:	4603      	mov	r3, r0
  403626:	2b00      	cmp	r3, #0
  403628:	d18f      	bne.n	40354a <prvProcessReceivedCommands+0x12>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
  40362a:	3724      	adds	r7, #36	; 0x24
  40362c:	46bd      	mov	sp, r7
  40362e:	bd90      	pop	{r4, r7, pc}
  403630:	00403465 	.word	0x00403465
  403634:	00401585 	.word	0x00401585
  403638:	004034b1 	.word	0x004034b1
  40363c:	00403249 	.word	0x00403249
  403640:	0040d214 	.word	0x0040d214
  403644:	00409705 	.word	0x00409705
  403648:	004019a9 	.word	0x004019a9
  40364c:	20019490 	.word	0x20019490
  403650:	00401ee9 	.word	0x00401ee9

00403654 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  403654:	b590      	push	{r4, r7, lr}
  403656:	b08b      	sub	sp, #44	; 0x2c
  403658:	af02      	add	r7, sp, #8
  40365a:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40365c:	e03f      	b.n	4036de <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40365e:	4b29      	ldr	r3, [pc, #164]	; (403704 <prvSwitchTimerLists+0xb0>)
  403660:	681b      	ldr	r3, [r3, #0]
  403662:	68db      	ldr	r3, [r3, #12]
  403664:	681b      	ldr	r3, [r3, #0]
  403666:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403668:	4b26      	ldr	r3, [pc, #152]	; (403704 <prvSwitchTimerLists+0xb0>)
  40366a:	681b      	ldr	r3, [r3, #0]
  40366c:	68db      	ldr	r3, [r3, #12]
  40366e:	68db      	ldr	r3, [r3, #12]
  403670:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  403672:	69bb      	ldr	r3, [r7, #24]
  403674:	3304      	adds	r3, #4
  403676:	4618      	mov	r0, r3
  403678:	4b23      	ldr	r3, [pc, #140]	; (403708 <prvSwitchTimerLists+0xb4>)
  40367a:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40367c:	69bb      	ldr	r3, [r7, #24]
  40367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  403680:	69b8      	ldr	r0, [r7, #24]
  403682:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  403684:	69bb      	ldr	r3, [r7, #24]
  403686:	69db      	ldr	r3, [r3, #28]
  403688:	2b01      	cmp	r3, #1
  40368a:	d128      	bne.n	4036de <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  40368c:	69bb      	ldr	r3, [r7, #24]
  40368e:	699a      	ldr	r2, [r3, #24]
  403690:	69fb      	ldr	r3, [r7, #28]
  403692:	4413      	add	r3, r2
  403694:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  403696:	697a      	ldr	r2, [r7, #20]
  403698:	69fb      	ldr	r3, [r7, #28]
  40369a:	429a      	cmp	r2, r3
  40369c:	d90e      	bls.n	4036bc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40369e:	69bb      	ldr	r3, [r7, #24]
  4036a0:	697a      	ldr	r2, [r7, #20]
  4036a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4036a4:	69bb      	ldr	r3, [r7, #24]
  4036a6:	69ba      	ldr	r2, [r7, #24]
  4036a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4036aa:	4b16      	ldr	r3, [pc, #88]	; (403704 <prvSwitchTimerLists+0xb0>)
  4036ac:	681a      	ldr	r2, [r3, #0]
  4036ae:	69bb      	ldr	r3, [r7, #24]
  4036b0:	3304      	adds	r3, #4
  4036b2:	4610      	mov	r0, r2
  4036b4:	4619      	mov	r1, r3
  4036b6:	4b15      	ldr	r3, [pc, #84]	; (40370c <prvSwitchTimerLists+0xb8>)
  4036b8:	4798      	blx	r3
  4036ba:	e010      	b.n	4036de <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4036bc:	2300      	movs	r3, #0
  4036be:	9300      	str	r3, [sp, #0]
  4036c0:	69b8      	ldr	r0, [r7, #24]
  4036c2:	2100      	movs	r1, #0
  4036c4:	69fa      	ldr	r2, [r7, #28]
  4036c6:	2300      	movs	r3, #0
  4036c8:	4c11      	ldr	r4, [pc, #68]	; (403710 <prvSwitchTimerLists+0xbc>)
  4036ca:	47a0      	blx	r4
  4036cc:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  4036ce:	693b      	ldr	r3, [r7, #16]
  4036d0:	2b00      	cmp	r3, #0
  4036d2:	d104      	bne.n	4036de <prvSwitchTimerLists+0x8a>
  4036d4:	480f      	ldr	r0, [pc, #60]	; (403714 <prvSwitchTimerLists+0xc0>)
  4036d6:	f240 2172 	movw	r1, #626	; 0x272
  4036da:	4b0f      	ldr	r3, [pc, #60]	; (403718 <prvSwitchTimerLists+0xc4>)
  4036dc:	4798      	blx	r3

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4036de:	4b09      	ldr	r3, [pc, #36]	; (403704 <prvSwitchTimerLists+0xb0>)
  4036e0:	681b      	ldr	r3, [r3, #0]
  4036e2:	681b      	ldr	r3, [r3, #0]
  4036e4:	2b00      	cmp	r3, #0
  4036e6:	d1ba      	bne.n	40365e <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  4036e8:	4b06      	ldr	r3, [pc, #24]	; (403704 <prvSwitchTimerLists+0xb0>)
  4036ea:	681b      	ldr	r3, [r3, #0]
  4036ec:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  4036ee:	4b0b      	ldr	r3, [pc, #44]	; (40371c <prvSwitchTimerLists+0xc8>)
  4036f0:	681b      	ldr	r3, [r3, #0]
  4036f2:	4a04      	ldr	r2, [pc, #16]	; (403704 <prvSwitchTimerLists+0xb0>)
  4036f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  4036f6:	4a09      	ldr	r2, [pc, #36]	; (40371c <prvSwitchTimerLists+0xc8>)
  4036f8:	68fb      	ldr	r3, [r7, #12]
  4036fa:	6013      	str	r3, [r2, #0]
}
  4036fc:	3724      	adds	r7, #36	; 0x24
  4036fe:	46bd      	mov	sp, r7
  403700:	bd90      	pop	{r4, r7, pc}
  403702:	bf00      	nop
  403704:	20019488 	.word	0x20019488
  403708:	00401585 	.word	0x00401585
  40370c:	00401515 	.word	0x00401515
  403710:	00403249 	.word	0x00403249
  403714:	0040d214 	.word	0x0040d214
  403718:	00409705 	.word	0x00409705
  40371c:	2001948c 	.word	0x2001948c

00403720 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  403720:	b580      	push	{r7, lr}
  403722:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  403724:	4b0e      	ldr	r3, [pc, #56]	; (403760 <prvCheckForValidListAndQueue+0x40>)
  403726:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  403728:	4b0e      	ldr	r3, [pc, #56]	; (403764 <prvCheckForValidListAndQueue+0x44>)
  40372a:	681b      	ldr	r3, [r3, #0]
  40372c:	2b00      	cmp	r3, #0
  40372e:	d113      	bne.n	403758 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  403730:	480d      	ldr	r0, [pc, #52]	; (403768 <prvCheckForValidListAndQueue+0x48>)
  403732:	4b0e      	ldr	r3, [pc, #56]	; (40376c <prvCheckForValidListAndQueue+0x4c>)
  403734:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  403736:	480e      	ldr	r0, [pc, #56]	; (403770 <prvCheckForValidListAndQueue+0x50>)
  403738:	4b0c      	ldr	r3, [pc, #48]	; (40376c <prvCheckForValidListAndQueue+0x4c>)
  40373a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  40373c:	4b0d      	ldr	r3, [pc, #52]	; (403774 <prvCheckForValidListAndQueue+0x54>)
  40373e:	4a0a      	ldr	r2, [pc, #40]	; (403768 <prvCheckForValidListAndQueue+0x48>)
  403740:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  403742:	4b0d      	ldr	r3, [pc, #52]	; (403778 <prvCheckForValidListAndQueue+0x58>)
  403744:	4a0a      	ldr	r2, [pc, #40]	; (403770 <prvCheckForValidListAndQueue+0x50>)
  403746:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  403748:	2005      	movs	r0, #5
  40374a:	210c      	movs	r1, #12
  40374c:	2200      	movs	r2, #0
  40374e:	4b0b      	ldr	r3, [pc, #44]	; (40377c <prvCheckForValidListAndQueue+0x5c>)
  403750:	4798      	blx	r3
  403752:	4602      	mov	r2, r0
  403754:	4b03      	ldr	r3, [pc, #12]	; (403764 <prvCheckForValidListAndQueue+0x44>)
  403756:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  403758:	4b09      	ldr	r3, [pc, #36]	; (403780 <prvCheckForValidListAndQueue+0x60>)
  40375a:	4798      	blx	r3
}
  40375c:	bd80      	pop	{r7, pc}
  40375e:	bf00      	nop
  403760:	0040177d 	.word	0x0040177d
  403764:	20019490 	.word	0x20019490
  403768:	20019460 	.word	0x20019460
  40376c:	0040146d 	.word	0x0040146d
  403770:	20019474 	.word	0x20019474
  403774:	20019488 	.word	0x20019488
  403778:	2001948c 	.word	0x2001948c
  40377c:	00401c0d 	.word	0x00401c0d
  403780:	00401799 	.word	0x00401799

00403784 <CameraPictureSnapshotReq>:

CommStateMachine_t commStateMachine = COMM_STATE_MACHINE_SOF;
uint8_t checksum = 0;
uint16_t count = 0;
bool CameraPictureSnapshotReq(uint8_t command)
{
  403784:	b580      	push	{r7, lr}
  403786:	b084      	sub	sp, #16
  403788:	af00      	add	r7, sp, #0
  40378a:	4603      	mov	r3, r0
  40378c:	71fb      	strb	r3, [r7, #7]
	uint8_t checksum = 0;
  40378e:	2300      	movs	r3, #0
  403790:	73fb      	strb	r3, [r7, #15]
	/* Transfer UART RX fifo to CDC TX */
	if (!uhi_cdc_is_tx_ready(0)) {
  403792:	2000      	movs	r0, #0
  403794:	4b27      	ldr	r3, [pc, #156]	; (403834 <CameraPictureSnapshotReq+0xb0>)
  403796:	4798      	blx	r3
  403798:	4603      	mov	r3, r0
  40379a:	f083 0301 	eor.w	r3, r3, #1
  40379e:	b2db      	uxtb	r3, r3
  4037a0:	2b00      	cmp	r3, #0
  4037a2:	d001      	beq.n	4037a8 <CameraPictureSnapshotReq+0x24>
		return false;
  4037a4:	2300      	movs	r3, #0
  4037a6:	e040      	b.n	40382a <CameraPictureSnapshotReq+0xa6>
	} else {
		getblockcommand.req.head = COM_HEAD;
  4037a8:	4b23      	ldr	r3, [pc, #140]	; (403838 <CameraPictureSnapshotReq+0xb4>)
  4037aa:	228e      	movs	r2, #142	; 0x8e
  4037ac:	701a      	strb	r2, [r3, #0]
		getblockcommand.req.type = COM_CMD_TYPE_CMD;
  4037ae:	4b22      	ldr	r3, [pc, #136]	; (403838 <CameraPictureSnapshotReq+0xb4>)
  4037b0:	2200      	movs	r2, #0
  4037b2:	705a      	strb	r2, [r3, #1]
		getblockcommand.req.command = command;//;
  4037b4:	4a20      	ldr	r2, [pc, #128]	; (403838 <CameraPictureSnapshotReq+0xb4>)
  4037b6:	79fb      	ldrb	r3, [r7, #7]
  4037b8:	7093      	strb	r3, [r2, #2]
		if (command  == 0xff)
  4037ba:	79fb      	ldrb	r3, [r7, #7]
  4037bc:	2bff      	cmp	r3, #255	; 0xff
  4037be:	d103      	bne.n	4037c8 <CameraPictureSnapshotReq+0x44>
		{
			cameraSendState = CAMERA_STATE_INIT;
  4037c0:	4b1e      	ldr	r3, [pc, #120]	; (40383c <CameraPictureSnapshotReq+0xb8>)
  4037c2:	2200      	movs	r2, #0
  4037c4:	701a      	strb	r2, [r3, #0]
  4037c6:	e005      	b.n	4037d4 <CameraPictureSnapshotReq+0x50>
		} else if(command == 0x00)
  4037c8:	79fb      	ldrb	r3, [r7, #7]
  4037ca:	2b00      	cmp	r3, #0
  4037cc:	d102      	bne.n	4037d4 <CameraPictureSnapshotReq+0x50>
		{
			cameraSendState = CAMERA_STATE_GET_SNAPSHOT;
  4037ce:	4b1b      	ldr	r3, [pc, #108]	; (40383c <CameraPictureSnapshotReq+0xb8>)
  4037d0:	2201      	movs	r2, #1
  4037d2:	701a      	strb	r2, [r3, #0]
		}
		
		uint8_t i = 0;
  4037d4:	2300      	movs	r3, #0
  4037d6:	73bb      	strb	r3, [r7, #14]
		for(i = 0; i < 3; i++ ){
  4037d8:	2300      	movs	r3, #0
  4037da:	73bb      	strb	r3, [r7, #14]
  4037dc:	e013      	b.n	403806 <CameraPictureSnapshotReq+0x82>
			printf("%02x ",getblockcommand.payload[i]);
  4037de:	7bbb      	ldrb	r3, [r7, #14]
  4037e0:	4a15      	ldr	r2, [pc, #84]	; (403838 <CameraPictureSnapshotReq+0xb4>)
  4037e2:	5cd3      	ldrb	r3, [r2, r3]
  4037e4:	4816      	ldr	r0, [pc, #88]	; (403840 <CameraPictureSnapshotReq+0xbc>)
  4037e6:	4619      	mov	r1, r3
  4037e8:	4b16      	ldr	r3, [pc, #88]	; (403844 <CameraPictureSnapshotReq+0xc0>)
  4037ea:	4798      	blx	r3
			checksum = FastCRC(checksum, getblockcommand.payload[i]);
  4037ec:	7bbb      	ldrb	r3, [r7, #14]
  4037ee:	4a12      	ldr	r2, [pc, #72]	; (403838 <CameraPictureSnapshotReq+0xb4>)
  4037f0:	5cd3      	ldrb	r3, [r2, r3]
  4037f2:	7bfa      	ldrb	r2, [r7, #15]
  4037f4:	4610      	mov	r0, r2
  4037f6:	4619      	mov	r1, r3
  4037f8:	4b13      	ldr	r3, [pc, #76]	; (403848 <CameraPictureSnapshotReq+0xc4>)
  4037fa:	4798      	blx	r3
  4037fc:	4603      	mov	r3, r0
  4037fe:	73fb      	strb	r3, [r7, #15]
		{
			cameraSendState = CAMERA_STATE_GET_SNAPSHOT;
		}
		
		uint8_t i = 0;
		for(i = 0; i < 3; i++ ){
  403800:	7bbb      	ldrb	r3, [r7, #14]
  403802:	3301      	adds	r3, #1
  403804:	73bb      	strb	r3, [r7, #14]
  403806:	7bbb      	ldrb	r3, [r7, #14]
  403808:	2b02      	cmp	r3, #2
  40380a:	d9e8      	bls.n	4037de <CameraPictureSnapshotReq+0x5a>
			printf("%02x ",getblockcommand.payload[i]);
			checksum = FastCRC(checksum, getblockcommand.payload[i]);
		}
		getblockcommand.payload[i] = checksum;
  40380c:	7bbb      	ldrb	r3, [r7, #14]
  40380e:	490a      	ldr	r1, [pc, #40]	; (403838 <CameraPictureSnapshotReq+0xb4>)
  403810:	7bfa      	ldrb	r2, [r7, #15]
  403812:	54ca      	strb	r2, [r1, r3]
		printf("%02x\r\n",checksum);
  403814:	7bfb      	ldrb	r3, [r7, #15]
  403816:	480d      	ldr	r0, [pc, #52]	; (40384c <CameraPictureSnapshotReq+0xc8>)
  403818:	4619      	mov	r1, r3
  40381a:	4b0a      	ldr	r3, [pc, #40]	; (403844 <CameraPictureSnapshotReq+0xc0>)
  40381c:	4798      	blx	r3
		uhi_cdc_write_buf(0, getblockcommand.payload, 3+1);
  40381e:	2000      	movs	r0, #0
  403820:	4905      	ldr	r1, [pc, #20]	; (403838 <CameraPictureSnapshotReq+0xb4>)
  403822:	2204      	movs	r2, #4
  403824:	4b0a      	ldr	r3, [pc, #40]	; (403850 <CameraPictureSnapshotReq+0xcc>)
  403826:	4798      	blx	r3
		//printf("SnapshotReq...\r\n");
	}
	return true;
  403828:	2301      	movs	r3, #1
}
  40382a:	4618      	mov	r0, r3
  40382c:	3710      	adds	r7, #16
  40382e:	46bd      	mov	sp, r7
  403830:	bd80      	pop	{r7, pc}
  403832:	bf00      	nop
  403834:	0040505d 	.word	0x0040505d
  403838:	2001c394 	.word	0x2001c394
  40383c:	2001949c 	.word	0x2001949c
  403840:	0040d254 	.word	0x0040d254
  403844:	0040a111 	.word	0x0040a111
  403848:	00408f25 	.word	0x00408f25
  40384c:	0040d25c 	.word	0x0040d25c
  403850:	00405171 	.word	0x00405171

00403854 <CameraPictureBlockReq>:

// 2016/11 PA 
bool CameraPictureBlockReq(uint16_t blockSeq)
{
  403854:	b580      	push	{r7, lr}
  403856:	b084      	sub	sp, #16
  403858:	af00      	add	r7, sp, #0
  40385a:	4603      	mov	r3, r0
  40385c:	80fb      	strh	r3, [r7, #6]
	uint8_t checksum = 0;
  40385e:	2300      	movs	r3, #0
  403860:	73fb      	strb	r3, [r7, #15]
	if (!uhi_cdc_is_tx_ready(0)) {
  403862:	2000      	movs	r0, #0
  403864:	4b29      	ldr	r3, [pc, #164]	; (40390c <CameraPictureBlockReq+0xb8>)
  403866:	4798      	blx	r3
  403868:	4603      	mov	r3, r0
  40386a:	f083 0301 	eor.w	r3, r3, #1
  40386e:	b2db      	uxtb	r3, r3
  403870:	2b00      	cmp	r3, #0
  403872:	d001      	beq.n	403878 <CameraPictureBlockReq+0x24>
		return false;
  403874:	2300      	movs	r3, #0
  403876:	e045      	b.n	403904 <CameraPictureBlockReq+0xb0>
	} else {
		getblockcommand.req.head = COM_HEAD;
  403878:	4b25      	ldr	r3, [pc, #148]	; (403910 <CameraPictureBlockReq+0xbc>)
  40387a:	228e      	movs	r2, #142	; 0x8e
  40387c:	701a      	strb	r2, [r3, #0]
		getblockcommand.req.type = COM_CMD_TYPE_CMD;
  40387e:	4b24      	ldr	r3, [pc, #144]	; (403910 <CameraPictureBlockReq+0xbc>)
  403880:	2200      	movs	r2, #0
  403882:	705a      	strb	r2, [r3, #1]
		getblockcommand.req.command = CMD_GET_BLOCK_DATA;
  403884:	4b22      	ldr	r3, [pc, #136]	; (403910 <CameraPictureBlockReq+0xbc>)
  403886:	2201      	movs	r2, #1
  403888:	709a      	strb	r2, [r3, #2]
		// 2016/11 PA 
		getblockcommand.req.sequenceNo = ((blockSeq%256)<<8) + (blockSeq / 256);//MSB
  40388a:	88fb      	ldrh	r3, [r7, #6]
  40388c:	021b      	lsls	r3, r3, #8
  40388e:	b29a      	uxth	r2, r3
  403890:	88fb      	ldrh	r3, [r7, #6]
  403892:	0a1b      	lsrs	r3, r3, #8
  403894:	b29b      	uxth	r3, r3
  403896:	4413      	add	r3, r2
  403898:	b29a      	uxth	r2, r3
  40389a:	4b1d      	ldr	r3, [pc, #116]	; (403910 <CameraPictureBlockReq+0xbc>)
  40389c:	f8a3 2003 	strh.w	r2, [r3, #3]
		getblockcommand.req.blockSize = ((DATA_BLOCK%256)<<8) + (DATA_BLOCK/256);//MSB
  4038a0:	4b1b      	ldr	r3, [pc, #108]	; (403910 <CameraPictureBlockReq+0xbc>)
  4038a2:	2200      	movs	r2, #0
  4038a4:	f042 0210 	orr.w	r2, r2, #16
  4038a8:	715a      	strb	r2, [r3, #5]
  4038aa:	2200      	movs	r2, #0
  4038ac:	719a      	strb	r2, [r3, #6]
		uint8_t i = 0;
  4038ae:	2300      	movs	r3, #0
  4038b0:	73bb      	strb	r3, [r7, #14]
		for(i = 0; i < sizeof(getblockcommand.req); i++ ){
  4038b2:	2300      	movs	r3, #0
  4038b4:	73bb      	strb	r3, [r7, #14]
  4038b6:	e013      	b.n	4038e0 <CameraPictureBlockReq+0x8c>
			printf("%02x ",getblockcommand.payload[i]);
  4038b8:	7bbb      	ldrb	r3, [r7, #14]
  4038ba:	4a15      	ldr	r2, [pc, #84]	; (403910 <CameraPictureBlockReq+0xbc>)
  4038bc:	5cd3      	ldrb	r3, [r2, r3]
  4038be:	4815      	ldr	r0, [pc, #84]	; (403914 <CameraPictureBlockReq+0xc0>)
  4038c0:	4619      	mov	r1, r3
  4038c2:	4b15      	ldr	r3, [pc, #84]	; (403918 <CameraPictureBlockReq+0xc4>)
  4038c4:	4798      	blx	r3
			checksum = FastCRC(checksum, getblockcommand.payload[i]);
  4038c6:	7bbb      	ldrb	r3, [r7, #14]
  4038c8:	4a11      	ldr	r2, [pc, #68]	; (403910 <CameraPictureBlockReq+0xbc>)
  4038ca:	5cd3      	ldrb	r3, [r2, r3]
  4038cc:	7bfa      	ldrb	r2, [r7, #15]
  4038ce:	4610      	mov	r0, r2
  4038d0:	4619      	mov	r1, r3
  4038d2:	4b12      	ldr	r3, [pc, #72]	; (40391c <CameraPictureBlockReq+0xc8>)
  4038d4:	4798      	blx	r3
  4038d6:	4603      	mov	r3, r0
  4038d8:	73fb      	strb	r3, [r7, #15]
		getblockcommand.req.command = CMD_GET_BLOCK_DATA;
		// 2016/11 PA 
		getblockcommand.req.sequenceNo = ((blockSeq%256)<<8) + (blockSeq / 256);//MSB
		getblockcommand.req.blockSize = ((DATA_BLOCK%256)<<8) + (DATA_BLOCK/256);//MSB
		uint8_t i = 0;
		for(i = 0; i < sizeof(getblockcommand.req); i++ ){
  4038da:	7bbb      	ldrb	r3, [r7, #14]
  4038dc:	3301      	adds	r3, #1
  4038de:	73bb      	strb	r3, [r7, #14]
  4038e0:	7bbb      	ldrb	r3, [r7, #14]
  4038e2:	2b06      	cmp	r3, #6
  4038e4:	d9e8      	bls.n	4038b8 <CameraPictureBlockReq+0x64>
			printf("%02x ",getblockcommand.payload[i]);
			checksum = FastCRC(checksum, getblockcommand.payload[i]);
		}
		getblockcommand.payload[i] = checksum;
  4038e6:	7bbb      	ldrb	r3, [r7, #14]
  4038e8:	4909      	ldr	r1, [pc, #36]	; (403910 <CameraPictureBlockReq+0xbc>)
  4038ea:	7bfa      	ldrb	r2, [r7, #15]
  4038ec:	54ca      	strb	r2, [r1, r3]
		printf("%02x\r\n",checksum);
  4038ee:	7bfb      	ldrb	r3, [r7, #15]
  4038f0:	480b      	ldr	r0, [pc, #44]	; (403920 <CameraPictureBlockReq+0xcc>)
  4038f2:	4619      	mov	r1, r3
  4038f4:	4b08      	ldr	r3, [pc, #32]	; (403918 <CameraPictureBlockReq+0xc4>)
  4038f6:	4798      	blx	r3
		uhi_cdc_write_buf(0, getblockcommand.payload, sizeof(getblockcommand.req)+1);
  4038f8:	2000      	movs	r0, #0
  4038fa:	4905      	ldr	r1, [pc, #20]	; (403910 <CameraPictureBlockReq+0xbc>)
  4038fc:	2208      	movs	r2, #8
  4038fe:	4b09      	ldr	r3, [pc, #36]	; (403924 <CameraPictureBlockReq+0xd0>)
  403900:	4798      	blx	r3
	}
	return true;
  403902:	2301      	movs	r3, #1
}
  403904:	4618      	mov	r0, r3
  403906:	3710      	adds	r7, #16
  403908:	46bd      	mov	sp, r7
  40390a:	bd80      	pop	{r7, pc}
  40390c:	0040505d 	.word	0x0040505d
  403910:	2001c394 	.word	0x2001c394
  403914:	0040d254 	.word	0x0040d254
  403918:	0040a111 	.word	0x0040a111
  40391c:	00408f25 	.word	0x00408f25
  403920:	0040d25c 	.word	0x0040d25c
  403924:	00405171 	.word	0x00405171

00403928 <CameraPictureRxNotify>:

void CameraPictureRxNotify(void)
{
  403928:	b590      	push	{r4, r7, lr}
  40392a:	b083      	sub	sp, #12
  40392c:	af00      	add	r7, sp, #0
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  40392e:	2300      	movs	r3, #0
  403930:	607b      	str	r3, [r7, #4]
	if (uhi_cdc_is_rx_ready(0)) {
  403932:	2000      	movs	r0, #0
  403934:	4b08      	ldr	r3, [pc, #32]	; (403958 <CameraPictureRxNotify+0x30>)
  403936:	4798      	blx	r3
  403938:	4603      	mov	r3, r0
  40393a:	2b00      	cmp	r3, #0
  40393c:	d008      	beq.n	403950 <CameraPictureRxNotify+0x28>
		xSemaphoreGiveFromISR(startCameraProcessing, &higher_priority_task_woken);
  40393e:	4b07      	ldr	r3, [pc, #28]	; (40395c <CameraPictureRxNotify+0x34>)
  403940:	681a      	ldr	r2, [r3, #0]
  403942:	1d3b      	adds	r3, r7, #4
  403944:	4610      	mov	r0, r2
  403946:	2100      	movs	r1, #0
  403948:	461a      	mov	r2, r3
  40394a:	2300      	movs	r3, #0
  40394c:	4c04      	ldr	r4, [pc, #16]	; (403960 <CameraPictureRxNotify+0x38>)
  40394e:	47a0      	blx	r4
	}
}
  403950:	370c      	adds	r7, #12
  403952:	46bd      	mov	sp, r7
  403954:	bd90      	pop	{r4, r7, pc}
  403956:	bf00      	nop
  403958:	00404e5d 	.word	0x00404e5d
  40395c:	20019498 	.word	0x20019498
  403960:	00401e21 	.word	0x00401e21

00403964 <send_camera_block>:
}



void send_camera_block()
{
  403964:	b590      	push	{r4, r7, lr}
  403966:	b083      	sub	sp, #12
  403968:	af00      	add	r7, sp, #0
	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  40396a:	4b0a      	ldr	r3, [pc, #40]	; (403994 <send_camera_block+0x30>)
  40396c:	607b      	str	r3, [r7, #4]
	out_data->buf = &pictureData.picture_buff[0];
  40396e:	687b      	ldr	r3, [r7, #4]
  403970:	4a09      	ldr	r2, [pc, #36]	; (403998 <send_camera_block+0x34>)
  403972:	601a      	str	r2, [r3, #0]
	out_data->len = pictureData.dataLength;
  403974:	687b      	ldr	r3, [r7, #4]
  403976:	4a09      	ldr	r2, [pc, #36]	; (40399c <send_camera_block+0x38>)
  403978:	8812      	ldrh	r2, [r2, #0]
  40397a:	605a      	str	r2, [r3, #4]
	xQueueSend(serial_out_queue, &out_data, 0);
  40397c:	4b08      	ldr	r3, [pc, #32]	; (4039a0 <send_camera_block+0x3c>)
  40397e:	681a      	ldr	r2, [r3, #0]
  403980:	1d3b      	adds	r3, r7, #4
  403982:	4610      	mov	r0, r2
  403984:	4619      	mov	r1, r3
  403986:	2200      	movs	r2, #0
  403988:	2300      	movs	r3, #0
  40398a:	4c06      	ldr	r4, [pc, #24]	; (4039a4 <send_camera_block+0x40>)
  40398c:	47a0      	blx	r4
}
  40398e:	370c      	adds	r7, #12
  403990:	46bd      	mov	sp, r7
  403992:	bd90      	pop	{r4, r7, pc}
  403994:	200194a0 	.word	0x200194a0
  403998:	20019f92 	.word	0x20019f92
  40399c:	20019f90 	.word	0x20019f90
  4039a0:	20000a24 	.word	0x20000a24
  4039a4:	00401ca9 	.word	0x00401ca9

004039a8 <taskCamera>:

void taskCamera( void *pvParameters)
{
  4039a8:	b590      	push	{r4, r7, lr}
  4039aa:	b085      	sub	sp, #20
  4039ac:	af00      	add	r7, sp, #0
  4039ae:	6078      	str	r0, [r7, #4]
	iram_size_t size = 0;
  4039b0:	2300      	movs	r3, #0
  4039b2:	60bb      	str	r3, [r7, #8]
	/* Initialize the user interface */
	ui_init();
  4039b4:	4b5a      	ldr	r3, [pc, #360]	; (403b20 <taskCamera+0x178>)
  4039b6:	4798      	blx	r3

	/* Start USB host stack */
	uhc_start();
  4039b8:	4b5a      	ldr	r3, [pc, #360]	; (403b24 <taskCamera+0x17c>)
  4039ba:	4798      	blx	r3
	vSemaphoreCreateBinary(startCameraProcessing);
  4039bc:	2001      	movs	r0, #1
  4039be:	2100      	movs	r1, #0
  4039c0:	2203      	movs	r2, #3
  4039c2:	4b59      	ldr	r3, [pc, #356]	; (403b28 <taskCamera+0x180>)
  4039c4:	4798      	blx	r3
  4039c6:	4602      	mov	r2, r0
  4039c8:	4b58      	ldr	r3, [pc, #352]	; (403b2c <taskCamera+0x184>)
  4039ca:	601a      	str	r2, [r3, #0]
  4039cc:	4b57      	ldr	r3, [pc, #348]	; (403b2c <taskCamera+0x184>)
  4039ce:	681b      	ldr	r3, [r3, #0]
  4039d0:	2b00      	cmp	r3, #0
  4039d2:	d007      	beq.n	4039e4 <taskCamera+0x3c>
  4039d4:	4b55      	ldr	r3, [pc, #340]	; (403b2c <taskCamera+0x184>)
  4039d6:	681b      	ldr	r3, [r3, #0]
  4039d8:	4618      	mov	r0, r3
  4039da:	2100      	movs	r1, #0
  4039dc:	2200      	movs	r2, #0
  4039de:	2300      	movs	r3, #0
  4039e0:	4c53      	ldr	r4, [pc, #332]	; (403b30 <taskCamera+0x188>)
  4039e2:	47a0      	blx	r4
	if (startCameraProcessing == NULL){
  4039e4:	4b51      	ldr	r3, [pc, #324]	; (403b2c <taskCamera+0x184>)
  4039e6:	681b      	ldr	r3, [r3, #0]
  4039e8:	2b00      	cmp	r3, #0
  4039ea:	d102      	bne.n	4039f2 <taskCamera+0x4a>
		printf("Failed to create Semaphore: startCameraProcessing \r\n");
  4039ec:	4851      	ldr	r0, [pc, #324]	; (403b34 <taskCamera+0x18c>)
  4039ee:	4b52      	ldr	r3, [pc, #328]	; (403b38 <taskCamera+0x190>)
  4039f0:	4798      	blx	r3
	}
	for(;;) {
		xSemaphoreTake(startCameraProcessing, portMAX_DELAY);
  4039f2:	4b4e      	ldr	r3, [pc, #312]	; (403b2c <taskCamera+0x184>)
  4039f4:	681b      	ldr	r3, [r3, #0]
  4039f6:	4618      	mov	r0, r3
  4039f8:	2100      	movs	r1, #0
  4039fa:	f04f 32ff 	mov.w	r2, #4294967295
  4039fe:	2300      	movs	r3, #0
  403a00:	4c4e      	ldr	r4, [pc, #312]	; (403b3c <taskCamera+0x194>)
  403a02:	47a0      	blx	r4
		// reset recv buffer
		memset(recvBuf, 0, sizeof(recvBuf));
  403a04:	484e      	ldr	r0, [pc, #312]	; (403b40 <taskCamera+0x198>)
  403a06:	2100      	movs	r1, #0
  403a08:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  403a0c:	4b4d      	ldr	r3, [pc, #308]	; (403b44 <taskCamera+0x19c>)
  403a0e:	4798      	blx	r3
		size = 0;
  403a10:	2300      	movs	r3, #0
  403a12:	60bb      	str	r3, [r7, #8]
		
		vPortEnterCritical();
  403a14:	4b4c      	ldr	r3, [pc, #304]	; (403b48 <taskCamera+0x1a0>)
  403a16:	4798      	blx	r3
		size = uhi_cdc_get_nb_received(0);
  403a18:	2000      	movs	r0, #0
  403a1a:	4b4c      	ldr	r3, [pc, #304]	; (403b4c <taskCamera+0x1a4>)
  403a1c:	4798      	blx	r3
  403a1e:	60b8      	str	r0, [r7, #8]
		uhi_cdc_read_buf(0, recvBuf, size);
  403a20:	2000      	movs	r0, #0
  403a22:	4947      	ldr	r1, [pc, #284]	; (403b40 <taskCamera+0x198>)
  403a24:	68ba      	ldr	r2, [r7, #8]
  403a26:	4b4a      	ldr	r3, [pc, #296]	; (403b50 <taskCamera+0x1a8>)
  403a28:	4798      	blx	r3
		vPortExitCritical();
  403a2a:	4b4a      	ldr	r3, [pc, #296]	; (403b54 <taskCamera+0x1ac>)
  403a2c:	4798      	blx	r3
		printf("Receive data len=%d\r\n",size);
  403a2e:	484a      	ldr	r0, [pc, #296]	; (403b58 <taskCamera+0x1b0>)
  403a30:	68b9      	ldr	r1, [r7, #8]
  403a32:	4b41      	ldr	r3, [pc, #260]	; (403b38 <taskCamera+0x190>)
  403a34:	4798      	blx	r3

		if (cameraSendState < CAMERA_STATE_READ_DATA)
  403a36:	4b49      	ldr	r3, [pc, #292]	; (403b5c <taskCamera+0x1b4>)
  403a38:	781b      	ldrb	r3, [r3, #0]
  403a3a:	2b01      	cmp	r3, #1
  403a3c:	d852      	bhi.n	403ae4 <taskCamera+0x13c>
		{
			for (uint16_t i = 0; i< size; i++){
  403a3e:	2300      	movs	r3, #0
  403a40:	81fb      	strh	r3, [r7, #14]
  403a42:	e009      	b.n	403a58 <taskCamera+0xb0>
				printf("%02x ",recvBuf[i]);
  403a44:	89fb      	ldrh	r3, [r7, #14]
  403a46:	4a3e      	ldr	r2, [pc, #248]	; (403b40 <taskCamera+0x198>)
  403a48:	5cd3      	ldrb	r3, [r2, r3]
  403a4a:	4845      	ldr	r0, [pc, #276]	; (403b60 <taskCamera+0x1b8>)
  403a4c:	4619      	mov	r1, r3
  403a4e:	4b3a      	ldr	r3, [pc, #232]	; (403b38 <taskCamera+0x190>)
  403a50:	4798      	blx	r3
		vPortExitCritical();
		printf("Receive data len=%d\r\n",size);

		if (cameraSendState < CAMERA_STATE_READ_DATA)
		{
			for (uint16_t i = 0; i< size; i++){
  403a52:	89fb      	ldrh	r3, [r7, #14]
  403a54:	3301      	adds	r3, #1
  403a56:	81fb      	strh	r3, [r7, #14]
  403a58:	89fa      	ldrh	r2, [r7, #14]
  403a5a:	68bb      	ldr	r3, [r7, #8]
  403a5c:	429a      	cmp	r2, r3
  403a5e:	d3f1      	bcc.n	403a44 <taskCamera+0x9c>
				printf("%02x ",recvBuf[i]);
			}
			printf("\r\n");
  403a60:	4840      	ldr	r0, [pc, #256]	; (403b64 <taskCamera+0x1bc>)
  403a62:	4b35      	ldr	r3, [pc, #212]	; (403b38 <taskCamera+0x190>)
  403a64:	4798      	blx	r3
			if (recvBuf[0] == 0x8e)
  403a66:	4b36      	ldr	r3, [pc, #216]	; (403b40 <taskCamera+0x198>)
  403a68:	781b      	ldrb	r3, [r3, #0]
  403a6a:	2b8e      	cmp	r3, #142	; 0x8e
  403a6c:	d156      	bne.n	403b1c <taskCamera+0x174>
			{
				if (recvBuf[1] == 0x01)// ACK frame
  403a6e:	4b34      	ldr	r3, [pc, #208]	; (403b40 <taskCamera+0x198>)
  403a70:	785b      	ldrb	r3, [r3, #1]
  403a72:	2b01      	cmp	r3, #1
  403a74:	d119      	bne.n	403aaa <taskCamera+0x102>
				{
					if (recvBuf[2] == 0x00)
  403a76:	4b32      	ldr	r3, [pc, #200]	; (403b40 <taskCamera+0x198>)
  403a78:	789b      	ldrb	r3, [r3, #2]
  403a7a:	2b00      	cmp	r3, #0
  403a7c:	d14e      	bne.n	403b1c <taskCamera+0x174>
					{
						if (cameraSendState == CAMERA_STATE_INIT)
  403a7e:	4b37      	ldr	r3, [pc, #220]	; (403b5c <taskCamera+0x1b4>)
  403a80:	781b      	ldrb	r3, [r3, #0]
  403a82:	2b00      	cmp	r3, #0
  403a84:	d106      	bne.n	403a94 <taskCamera+0xec>
						{
							printf("ACK frame init OK\r\n");
  403a86:	4838      	ldr	r0, [pc, #224]	; (403b68 <taskCamera+0x1c0>)
  403a88:	4b2b      	ldr	r3, [pc, #172]	; (403b38 <taskCamera+0x190>)
  403a8a:	4798      	blx	r3
							CameraPictureSnapshotReq(0x00);
  403a8c:	2000      	movs	r0, #0
  403a8e:	4b37      	ldr	r3, [pc, #220]	; (403b6c <taskCamera+0x1c4>)
  403a90:	4798      	blx	r3
  403a92:	e043      	b.n	403b1c <taskCamera+0x174>
						} else if (cameraSendState == CAMERA_STATE_GET_SNAPSHOT) {
  403a94:	4b31      	ldr	r3, [pc, #196]	; (403b5c <taskCamera+0x1b4>)
  403a96:	781b      	ldrb	r3, [r3, #0]
  403a98:	2b01      	cmp	r3, #1
  403a9a:	d13f      	bne.n	403b1c <taskCamera+0x174>
							printf("ACK frame get snapshot OK\r\n");
  403a9c:	4834      	ldr	r0, [pc, #208]	; (403b70 <taskCamera+0x1c8>)
  403a9e:	4b26      	ldr	r3, [pc, #152]	; (403b38 <taskCamera+0x190>)
  403aa0:	4798      	blx	r3
							CameraPictureBlockReq(0);
  403aa2:	2000      	movs	r0, #0
  403aa4:	4b33      	ldr	r3, [pc, #204]	; (403b74 <taskCamera+0x1cc>)
  403aa6:	4798      	blx	r3
  403aa8:	e038      	b.n	403b1c <taskCamera+0x174>
						}
					}
				}
				else if (recvBuf[1] == 0x02) { // Data frame
  403aaa:	4b25      	ldr	r3, [pc, #148]	; (403b40 <taskCamera+0x198>)
  403aac:	785b      	ldrb	r3, [r3, #1]
  403aae:	2b02      	cmp	r3, #2
  403ab0:	d134      	bne.n	403b1c <taskCamera+0x174>
					if (size == 6) {
  403ab2:	68bb      	ldr	r3, [r7, #8]
  403ab4:	2b06      	cmp	r3, #6
  403ab6:	d131      	bne.n	403b1c <taskCamera+0x174>
						pictureData.dataLength = (((char)recvBuf[ 4 ]) << 8) | (char)recvBuf[ 5 ];
  403ab8:	4b21      	ldr	r3, [pc, #132]	; (403b40 <taskCamera+0x198>)
  403aba:	791b      	ldrb	r3, [r3, #4]
  403abc:	021b      	lsls	r3, r3, #8
  403abe:	b29a      	uxth	r2, r3
  403ac0:	4b1f      	ldr	r3, [pc, #124]	; (403b40 <taskCamera+0x198>)
  403ac2:	795b      	ldrb	r3, [r3, #5]
  403ac4:	b29b      	uxth	r3, r3
  403ac6:	4313      	orrs	r3, r2
  403ac8:	b29b      	uxth	r3, r3
  403aca:	b29a      	uxth	r2, r3
  403acc:	4b2a      	ldr	r3, [pc, #168]	; (403b78 <taskCamera+0x1d0>)
  403ace:	801a      	strh	r2, [r3, #0]
						printf("Get data block is OK size=%d\r\n", pictureData.dataLength);
  403ad0:	4b29      	ldr	r3, [pc, #164]	; (403b78 <taskCamera+0x1d0>)
  403ad2:	881b      	ldrh	r3, [r3, #0]
  403ad4:	4829      	ldr	r0, [pc, #164]	; (403b7c <taskCamera+0x1d4>)
  403ad6:	4619      	mov	r1, r3
  403ad8:	4b17      	ldr	r3, [pc, #92]	; (403b38 <taskCamera+0x190>)
  403ada:	4798      	blx	r3
						cameraSendState = CAMERA_STATE_READ_DATA;
  403adc:	4b1f      	ldr	r3, [pc, #124]	; (403b5c <taskCamera+0x1b4>)
  403ade:	2202      	movs	r2, #2
  403ae0:	701a      	strb	r2, [r3, #0]
  403ae2:	e786      	b.n	4039f2 <taskCamera+0x4a>
					}
				}// end Data frame
			}// if ==8e
		} else { // if <CAMERA_STATE_READ_DATA
			if (size < pictureData.dataLength) {
  403ae4:	4b24      	ldr	r3, [pc, #144]	; (403b78 <taskCamera+0x1d0>)
  403ae6:	881b      	ldrh	r3, [r3, #0]
  403ae8:	461a      	mov	r2, r3
  403aea:	68bb      	ldr	r3, [r7, #8]
  403aec:	429a      	cmp	r2, r3
  403aee:	d903      	bls.n	403af8 <taskCamera+0x150>
				printf("This block data is not full\r\n");
  403af0:	4823      	ldr	r0, [pc, #140]	; (403b80 <taskCamera+0x1d8>)
  403af2:	4b11      	ldr	r3, [pc, #68]	; (403b38 <taskCamera+0x190>)
  403af4:	4798      	blx	r3
  403af6:	e011      	b.n	403b1c <taskCamera+0x174>
			} else {
				memset(pictureData.picture_buff, 0, sizeof(pictureData.picture_buff));
  403af8:	4822      	ldr	r0, [pc, #136]	; (403b84 <taskCamera+0x1dc>)
  403afa:	2100      	movs	r1, #0
  403afc:	f241 0201 	movw	r2, #4097	; 0x1001
  403b00:	4b10      	ldr	r3, [pc, #64]	; (403b44 <taskCamera+0x19c>)
  403b02:	4798      	blx	r3
				memcpy(pictureData.picture_buff, recvBuf, pictureData.dataLength);
  403b04:	4b1c      	ldr	r3, [pc, #112]	; (403b78 <taskCamera+0x1d0>)
  403b06:	881b      	ldrh	r3, [r3, #0]
  403b08:	481e      	ldr	r0, [pc, #120]	; (403b84 <taskCamera+0x1dc>)
  403b0a:	490d      	ldr	r1, [pc, #52]	; (403b40 <taskCamera+0x198>)
  403b0c:	461a      	mov	r2, r3
  403b0e:	4b1e      	ldr	r3, [pc, #120]	; (403b88 <taskCamera+0x1e0>)
  403b10:	4798      	blx	r3
				printf("send data block out\r\n");
  403b12:	481e      	ldr	r0, [pc, #120]	; (403b8c <taskCamera+0x1e4>)
  403b14:	4b08      	ldr	r3, [pc, #32]	; (403b38 <taskCamera+0x190>)
  403b16:	4798      	blx	r3
				send_camera_block();
  403b18:	4b1d      	ldr	r3, [pc, #116]	; (403b90 <taskCamera+0x1e8>)
  403b1a:	4798      	blx	r3
			}
		}
	}// for loop
  403b1c:	e769      	b.n	4039f2 <taskCamera+0x4a>
  403b1e:	bf00      	nop
  403b20:	00403c6d 	.word	0x00403c6d
  403b24:	00405bc5 	.word	0x00405bc5
  403b28:	00401c0d 	.word	0x00401c0d
  403b2c:	20019498 	.word	0x20019498
  403b30:	00401ca9 	.word	0x00401ca9
  403b34:	0040d264 	.word	0x0040d264
  403b38:	0040a111 	.word	0x0040a111
  403b3c:	00401ee9 	.word	0x00401ee9
  403b40:	2001af94 	.word	0x2001af94
  403b44:	0040a815 	.word	0x0040a815
  403b48:	0040177d 	.word	0x0040177d
  403b4c:	00404e89 	.word	0x00404e89
  403b50:	00404f89 	.word	0x00404f89
  403b54:	00401799 	.word	0x00401799
  403b58:	0040d29c 	.word	0x0040d29c
  403b5c:	2001949c 	.word	0x2001949c
  403b60:	0040d254 	.word	0x0040d254
  403b64:	0040d2b4 	.word	0x0040d2b4
  403b68:	0040d2b8 	.word	0x0040d2b8
  403b6c:	00403785 	.word	0x00403785
  403b70:	0040d2cc 	.word	0x0040d2cc
  403b74:	00403855 	.word	0x00403855
  403b78:	20019f90 	.word	0x20019f90
  403b7c:	0040d2e8 	.word	0x0040d2e8
  403b80:	0040d308 	.word	0x0040d308
  403b84:	20019f92 	.word	0x20019f92
  403b88:	0040a6e1 	.word	0x0040a6e1
  403b8c:	0040d328 	.word	0x0040d328
  403b90:	00403965 	.word	0x00403965

00403b94 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  403b94:	b480      	push	{r7}
  403b96:	b08b      	sub	sp, #44	; 0x2c
  403b98:	af00      	add	r7, sp, #0
  403b9a:	6078      	str	r0, [r7, #4]
  403b9c:	460b      	mov	r3, r1
  403b9e:	70fb      	strb	r3, [r7, #3]
  403ba0:	687b      	ldr	r3, [r7, #4]
  403ba2:	627b      	str	r3, [r7, #36]	; 0x24
  403ba4:	78fb      	ldrb	r3, [r7, #3]
  403ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  403baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403bac:	61fb      	str	r3, [r7, #28]
  403bae:	69fb      	ldr	r3, [r7, #28]
  403bb0:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403bb2:	69bb      	ldr	r3, [r7, #24]
  403bb4:	095b      	lsrs	r3, r3, #5
  403bb6:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403bb8:	697b      	ldr	r3, [r7, #20]
  403bba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403bbe:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403bc2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403bc4:	613b      	str	r3, [r7, #16]

	if (level) {
  403bc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403bca:	2b00      	cmp	r3, #0
  403bcc:	d009      	beq.n	403be2 <ioport_set_pin_level+0x4e>
  403bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403bd0:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403bd2:	68fb      	ldr	r3, [r7, #12]
  403bd4:	f003 031f 	and.w	r3, r3, #31
  403bd8:	2201      	movs	r2, #1
  403bda:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403bdc:	693b      	ldr	r3, [r7, #16]
  403bde:	631a      	str	r2, [r3, #48]	; 0x30
  403be0:	e008      	b.n	403bf4 <ioport_set_pin_level+0x60>
  403be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403be4:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403be6:	68bb      	ldr	r3, [r7, #8]
  403be8:	f003 031f 	and.w	r3, r3, #31
  403bec:	2201      	movs	r2, #1
  403bee:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403bf0:	693b      	ldr	r3, [r7, #16]
  403bf2:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  403bf4:	372c      	adds	r7, #44	; 0x2c
  403bf6:	46bd      	mov	sp, r7
  403bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bfc:	4770      	bx	lr
  403bfe:	bf00      	nop

00403c00 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  403c00:	b480      	push	{r7}
  403c02:	b08b      	sub	sp, #44	; 0x2c
  403c04:	af00      	add	r7, sp, #0
  403c06:	6078      	str	r0, [r7, #4]
  403c08:	687b      	ldr	r3, [r7, #4]
  403c0a:	627b      	str	r3, [r7, #36]	; 0x24
  403c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403c0e:	623b      	str	r3, [r7, #32]
  403c10:	6a3b      	ldr	r3, [r7, #32]
  403c12:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403c14:	69fb      	ldr	r3, [r7, #28]
  403c16:	095b      	lsrs	r3, r3, #5
  403c18:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403c1a:	69bb      	ldr	r3, [r7, #24]
  403c1c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403c20:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403c24:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  403c26:	617b      	str	r3, [r7, #20]
  403c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403c2a:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403c2c:	693b      	ldr	r3, [r7, #16]
  403c2e:	f003 031f 	and.w	r3, r3, #31
  403c32:	2201      	movs	r2, #1
  403c34:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  403c38:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  403c3a:	697b      	ldr	r3, [r7, #20]
  403c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  403c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403c40:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403c42:	68bb      	ldr	r3, [r7, #8]
  403c44:	f003 031f 	and.w	r3, r3, #31
  403c48:	2101      	movs	r1, #1
  403c4a:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  403c4e:	4013      	ands	r3, r2
  403c50:	2b00      	cmp	r3, #0
  403c52:	d003      	beq.n	403c5c <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  403c54:	697b      	ldr	r3, [r7, #20]
  403c56:	68fa      	ldr	r2, [r7, #12]
  403c58:	635a      	str	r2, [r3, #52]	; 0x34
  403c5a:	e002      	b.n	403c62 <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  403c5c:	697b      	ldr	r3, [r7, #20]
  403c5e:	68fa      	ldr	r2, [r7, #12]
  403c60:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  403c62:	372c      	adds	r7, #44	; 0x2c
  403c64:	46bd      	mov	sp, r7
  403c66:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c6a:	4770      	bx	lr

00403c6c <ui_init>:
/**
 * \name Main user interface functions
 * @{
 */
void ui_init(void)
{
  403c6c:	b480      	push	{r7}
  403c6e:	af00      	add	r7, sp, #0
	/* Initialize LEDs */
	//LED_Off(LED0);
	//LED_On(LED0);
}
  403c70:	46bd      	mov	sp, r7
  403c72:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c76:	4770      	bx	lr

00403c78 <ui_usb_connection_event>:
void ui_usb_vbus_error(void)
{
}

void ui_usb_connection_event(uhc_device_t *dev, bool b_present)
{
  403c78:	b580      	push	{r7, lr}
  403c7a:	b082      	sub	sp, #8
  403c7c:	af00      	add	r7, sp, #0
  403c7e:	6078      	str	r0, [r7, #4]
  403c80:	460b      	mov	r3, r1
  403c82:	70fb      	strb	r3, [r7, #3]
	UNUSED(dev);
	if (!b_present) {
  403c84:	78fb      	ldrb	r3, [r7, #3]
  403c86:	f083 0301 	eor.w	r3, r3, #1
  403c8a:	b2db      	uxtb	r3, r3
  403c8c:	2b00      	cmp	r3, #0
  403c8e:	d006      	beq.n	403c9e <ui_usb_connection_event+0x26>
		LED_On(LED0);
  403c90:	201e      	movs	r0, #30
  403c92:	2101      	movs	r1, #1
  403c94:	4b03      	ldr	r3, [pc, #12]	; (403ca4 <ui_usb_connection_event+0x2c>)
  403c96:	4798      	blx	r3
		ui_enum_status = UHC_ENUM_DISCONNECT;
  403c98:	4b03      	ldr	r3, [pc, #12]	; (403ca8 <ui_usb_connection_event+0x30>)
  403c9a:	2207      	movs	r2, #7
  403c9c:	701a      	strb	r2, [r3, #0]
	}
}
  403c9e:	3708      	adds	r7, #8
  403ca0:	46bd      	mov	sp, r7
  403ca2:	bd80      	pop	{r7, pc}
  403ca4:	00403b95 	.word	0x00403b95
  403ca8:	20000128 	.word	0x20000128

00403cac <ui_usb_enum_event>:

void ui_usb_enum_event(uhc_device_t *dev, uhc_enum_status_t status)
{
  403cac:	b580      	push	{r7, lr}
  403cae:	b084      	sub	sp, #16
  403cb0:	af00      	add	r7, sp, #0
  403cb2:	6078      	str	r0, [r7, #4]
  403cb4:	460b      	mov	r3, r1
  403cb6:	70fb      	strb	r3, [r7, #3]
	ui_enum_status = status;
  403cb8:	4a1e      	ldr	r2, [pc, #120]	; (403d34 <ui_usb_enum_event+0x88>)
  403cba:	78fb      	ldrb	r3, [r7, #3]
  403cbc:	7013      	strb	r3, [r2, #0]
	switch (dev->speed) {
  403cbe:	687b      	ldr	r3, [r7, #4]
  403cc0:	7cdb      	ldrb	r3, [r3, #19]
  403cc2:	2b01      	cmp	r3, #1
  403cc4:	d008      	beq.n	403cd8 <ui_usb_enum_event+0x2c>
  403cc6:	2b02      	cmp	r3, #2
  403cc8:	d10e      	bne.n	403ce8 <ui_usb_enum_event+0x3c>
	case UHD_SPEED_HIGH:
		ui_device_speed_blink = 50;//250;
  403cca:	4b1b      	ldr	r3, [pc, #108]	; (403d38 <ui_usb_enum_event+0x8c>)
  403ccc:	2232      	movs	r2, #50	; 0x32
  403cce:	801a      	strh	r2, [r3, #0]
		printf("it is a high speed device\r\n");
  403cd0:	481a      	ldr	r0, [pc, #104]	; (403d3c <ui_usb_enum_event+0x90>)
  403cd2:	4b1b      	ldr	r3, [pc, #108]	; (403d40 <ui_usb_enum_event+0x94>)
  403cd4:	4798      	blx	r3
		break;
  403cd6:	e00f      	b.n	403cf8 <ui_usb_enum_event+0x4c>
	case UHD_SPEED_FULL:
		ui_device_speed_blink = 1000;
  403cd8:	4b17      	ldr	r3, [pc, #92]	; (403d38 <ui_usb_enum_event+0x8c>)
  403cda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403cde:	801a      	strh	r2, [r3, #0]
		printf("it is a full speed device\r\n");
  403ce0:	4818      	ldr	r0, [pc, #96]	; (403d44 <ui_usb_enum_event+0x98>)
  403ce2:	4b17      	ldr	r3, [pc, #92]	; (403d40 <ui_usb_enum_event+0x94>)
  403ce4:	4798      	blx	r3
		break;
  403ce6:	e007      	b.n	403cf8 <ui_usb_enum_event+0x4c>
	case UHD_SPEED_LOW:
	default:
		ui_device_speed_blink = 2000;//1000;
  403ce8:	4b13      	ldr	r3, [pc, #76]	; (403d38 <ui_usb_enum_event+0x8c>)
  403cea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  403cee:	801a      	strh	r2, [r3, #0]
		printf("it is a low speed device\r\n");
  403cf0:	4815      	ldr	r0, [pc, #84]	; (403d48 <ui_usb_enum_event+0x9c>)
  403cf2:	4b13      	ldr	r3, [pc, #76]	; (403d40 <ui_usb_enum_event+0x94>)
  403cf4:	4798      	blx	r3
		break;
  403cf6:	bf00      	nop
	}
	if (ui_enum_status == UHC_ENUM_SUCCESS) {
  403cf8:	4b0e      	ldr	r3, [pc, #56]	; (403d34 <ui_usb_enum_event+0x88>)
  403cfa:	781b      	ldrb	r3, [r3, #0]
  403cfc:	2b00      	cmp	r3, #0
  403cfe:	d115      	bne.n	403d2c <ui_usb_enum_event+0x80>
		/* USB Device CDC connected
		   Open and configure UART and USB CDC ports */
		usb_cdc_line_coding_t cfg = {
  403d00:	4a12      	ldr	r2, [pc, #72]	; (403d4c <ui_usb_enum_event+0xa0>)
  403d02:	f107 0308 	add.w	r3, r7, #8
  403d06:	6810      	ldr	r0, [r2, #0]
  403d08:	6018      	str	r0, [r3, #0]
  403d0a:	8891      	ldrh	r1, [r2, #4]
  403d0c:	7992      	ldrb	r2, [r2, #6]
  403d0e:	8099      	strh	r1, [r3, #4]
  403d10:	719a      	strb	r2, [r3, #6]
			.dwDTERate   = CPU_TO_LE32(115200),
			.bCharFormat = CDC_STOP_BITS_1,
			.bParityType = CDC_PAR_NONE,
			.bDataBits   = 8,
		};
		uart_open();
  403d12:	4b0f      	ldr	r3, [pc, #60]	; (403d50 <ui_usb_enum_event+0xa4>)
  403d14:	4798      	blx	r3
		uart_config(&cfg);
  403d16:	f107 0308 	add.w	r3, r7, #8
  403d1a:	4618      	mov	r0, r3
  403d1c:	4b0d      	ldr	r3, [pc, #52]	; (403d54 <ui_usb_enum_event+0xa8>)
  403d1e:	4798      	blx	r3
		uhi_cdc_open(0, &cfg);
  403d20:	f107 0308 	add.w	r3, r7, #8
  403d24:	2000      	movs	r0, #0
  403d26:	4619      	mov	r1, r3
  403d28:	4b0b      	ldr	r3, [pc, #44]	; (403d58 <ui_usb_enum_event+0xac>)
  403d2a:	4798      	blx	r3
	}
}
  403d2c:	3710      	adds	r7, #16
  403d2e:	46bd      	mov	sp, r7
  403d30:	bd80      	pop	{r7, pc}
  403d32:	bf00      	nop
  403d34:	20000128 	.word	0x20000128
  403d38:	200194ac 	.word	0x200194ac
  403d3c:	0040d340 	.word	0x0040d340
  403d40:	0040a111 	.word	0x0040a111
  403d44:	0040d35c 	.word	0x0040d35c
  403d48:	0040d378 	.word	0x0040d378
  403d4c:	0040d394 	.word	0x0040d394
  403d50:	00409aa5 	.word	0x00409aa5
  403d54:	00409995 	.word	0x00409995
  403d58:	00404e09 	.word	0x00404e09

00403d5c <ui_usb_wakeup_event>:

void ui_usb_wakeup_event(void)
{
  403d5c:	b480      	push	{r7}
  403d5e:	af00      	add	r7, sp, #0
}
  403d60:	46bd      	mov	sp, r7
  403d62:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d66:	4770      	bx	lr

00403d68 <ui_usb_sof_event>:

void ui_usb_sof_event(void)
{
  403d68:	b580      	push	{r7, lr}
  403d6a:	af00      	add	r7, sp, #0
	static uint16_t counter_sof = 0;

	if (ui_enum_status == UHC_ENUM_SUCCESS) {
  403d6c:	4b0e      	ldr	r3, [pc, #56]	; (403da8 <ui_usb_sof_event+0x40>)
  403d6e:	781b      	ldrb	r3, [r3, #0]
  403d70:	2b00      	cmp	r3, #0
  403d72:	d118      	bne.n	403da6 <ui_usb_sof_event+0x3e>
		/* Display device enumerated and in active mode */
		if (++counter_sof > ui_device_speed_blink) {
  403d74:	4b0d      	ldr	r3, [pc, #52]	; (403dac <ui_usb_sof_event+0x44>)
  403d76:	881b      	ldrh	r3, [r3, #0]
  403d78:	3301      	adds	r3, #1
  403d7a:	b29a      	uxth	r2, r3
  403d7c:	4b0b      	ldr	r3, [pc, #44]	; (403dac <ui_usb_sof_event+0x44>)
  403d7e:	801a      	strh	r2, [r3, #0]
  403d80:	4b0a      	ldr	r3, [pc, #40]	; (403dac <ui_usb_sof_event+0x44>)
  403d82:	881a      	ldrh	r2, [r3, #0]
  403d84:	4b0a      	ldr	r3, [pc, #40]	; (403db0 <ui_usb_sof_event+0x48>)
  403d86:	881b      	ldrh	r3, [r3, #0]
  403d88:	429a      	cmp	r2, r3
  403d8a:	d90c      	bls.n	403da6 <ui_usb_sof_event+0x3e>
			counter_sof = 0;
  403d8c:	4b07      	ldr	r3, [pc, #28]	; (403dac <ui_usb_sof_event+0x44>)
  403d8e:	2200      	movs	r2, #0
  403d90:	801a      	strh	r2, [r3, #0]
			if (!ui_data_transfer) {
  403d92:	4b08      	ldr	r3, [pc, #32]	; (403db4 <ui_usb_sof_event+0x4c>)
  403d94:	781b      	ldrb	r3, [r3, #0]
  403d96:	f083 0301 	eor.w	r3, r3, #1
  403d9a:	b2db      	uxtb	r3, r3
  403d9c:	2b00      	cmp	r3, #0
  403d9e:	d002      	beq.n	403da6 <ui_usb_sof_event+0x3e>
				LED_Toggle(LED0);
  403da0:	201e      	movs	r0, #30
  403da2:	4b05      	ldr	r3, [pc, #20]	; (403db8 <ui_usb_sof_event+0x50>)
  403da4:	4798      	blx	r3
			}
		}
	}
}
  403da6:	bd80      	pop	{r7, pc}
  403da8:	20000128 	.word	0x20000128
  403dac:	200194b0 	.word	0x200194b0
  403db0:	200194ac 	.word	0x200194ac
  403db4:	200194ae 	.word	0x200194ae
  403db8:	00403c01 	.word	0x00403c01

00403dbc <ui_com_rx_start>:

void ui_com_rx_start(void)
{
  403dbc:	b580      	push	{r7, lr}
  403dbe:	af00      	add	r7, sp, #0
	ui_data_transfer = true;
  403dc0:	4b05      	ldr	r3, [pc, #20]	; (403dd8 <ui_com_rx_start+0x1c>)
  403dc2:	2201      	movs	r2, #1
  403dc4:	701a      	strb	r2, [r3, #0]
	printf("ui_com_rx_start\r\n");
  403dc6:	4805      	ldr	r0, [pc, #20]	; (403ddc <ui_com_rx_start+0x20>)
  403dc8:	4b05      	ldr	r3, [pc, #20]	; (403de0 <ui_com_rx_start+0x24>)
  403dca:	4798      	blx	r3
	LED_On(LED0);
  403dcc:	201e      	movs	r0, #30
  403dce:	2101      	movs	r1, #1
  403dd0:	4b04      	ldr	r3, [pc, #16]	; (403de4 <ui_com_rx_start+0x28>)
  403dd2:	4798      	blx	r3
}
  403dd4:	bd80      	pop	{r7, pc}
  403dd6:	bf00      	nop
  403dd8:	200194ae 	.word	0x200194ae
  403ddc:	0040d39c 	.word	0x0040d39c
  403de0:	0040a111 	.word	0x0040a111
  403de4:	00403b95 	.word	0x00403b95

00403de8 <ui_com_rx_stop>:

void ui_com_rx_stop(void)
{
  403de8:	b480      	push	{r7}
  403dea:	af00      	add	r7, sp, #0
	ui_data_transfer = false;
  403dec:	4b03      	ldr	r3, [pc, #12]	; (403dfc <ui_com_rx_stop+0x14>)
  403dee:	2200      	movs	r2, #0
  403df0:	701a      	strb	r2, [r3, #0]
}
  403df2:	46bd      	mov	sp, r7
  403df4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403df8:	4770      	bx	lr
  403dfa:	bf00      	nop
  403dfc:	200194ae 	.word	0x200194ae

00403e00 <ui_com_tx_start>:

void ui_com_tx_start(void)
{
  403e00:	b580      	push	{r7, lr}
  403e02:	af00      	add	r7, sp, #0
	ui_data_transfer = true;
  403e04:	4b05      	ldr	r3, [pc, #20]	; (403e1c <ui_com_tx_start+0x1c>)
  403e06:	2201      	movs	r2, #1
  403e08:	701a      	strb	r2, [r3, #0]
	printf("ui_com_tx_start\r\n");
  403e0a:	4805      	ldr	r0, [pc, #20]	; (403e20 <ui_com_tx_start+0x20>)
  403e0c:	4b05      	ldr	r3, [pc, #20]	; (403e24 <ui_com_tx_start+0x24>)
  403e0e:	4798      	blx	r3
	LED_On(LED0);
  403e10:	201e      	movs	r0, #30
  403e12:	2101      	movs	r1, #1
  403e14:	4b04      	ldr	r3, [pc, #16]	; (403e28 <ui_com_tx_start+0x28>)
  403e16:	4798      	blx	r3
}
  403e18:	bd80      	pop	{r7, pc}
  403e1a:	bf00      	nop
  403e1c:	200194ae 	.word	0x200194ae
  403e20:	0040d3b0 	.word	0x0040d3b0
  403e24:	0040a111 	.word	0x0040a111
  403e28:	00403b95 	.word	0x00403b95

00403e2c <ui_com_tx_stop>:

void ui_com_tx_stop(void)
{
  403e2c:	b480      	push	{r7}
  403e2e:	af00      	add	r7, sp, #0
	ui_data_transfer = false;
  403e30:	4b03      	ldr	r3, [pc, #12]	; (403e40 <ui_com_tx_stop+0x14>)
  403e32:	2200      	movs	r2, #0
  403e34:	701a      	strb	r2, [r3, #0]
}
  403e36:	46bd      	mov	sp, r7
  403e38:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e3c:	4770      	bx	lr
  403e3e:	bf00      	nop
  403e40:	200194ae 	.word	0x200194ae

00403e44 <ui_com_error>:

void ui_com_error(void)
{
  403e44:	b480      	push	{r7}
  403e46:	af00      	add	r7, sp, #0
}
  403e48:	46bd      	mov	sp, r7
  403e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e4e:	4770      	bx	lr

00403e50 <ui_com_overflow>:

void ui_com_overflow(void)
{
  403e50:	b480      	push	{r7}
  403e52:	af00      	add	r7, sp, #0
}
  403e54:	46bd      	mov	sp, r7
  403e56:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e5a:	4770      	bx	lr

00403e5c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  403e5c:	b580      	push	{r7, lr}
  403e5e:	b082      	sub	sp, #8
  403e60:	af00      	add	r7, sp, #0
  403e62:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403e64:	687b      	ldr	r3, [r7, #4]
  403e66:	2b07      	cmp	r3, #7
  403e68:	d830      	bhi.n	403ecc <osc_enable+0x70>
  403e6a:	a201      	add	r2, pc, #4	; (adr r2, 403e70 <osc_enable+0x14>)
  403e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403e70:	00403ecd 	.word	0x00403ecd
  403e74:	00403e91 	.word	0x00403e91
  403e78:	00403e99 	.word	0x00403e99
  403e7c:	00403ea1 	.word	0x00403ea1
  403e80:	00403ea9 	.word	0x00403ea9
  403e84:	00403eb1 	.word	0x00403eb1
  403e88:	00403eb9 	.word	0x00403eb9
  403e8c:	00403ec3 	.word	0x00403ec3
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  403e90:	2000      	movs	r0, #0
  403e92:	4b10      	ldr	r3, [pc, #64]	; (403ed4 <osc_enable+0x78>)
  403e94:	4798      	blx	r3
		break;
  403e96:	e019      	b.n	403ecc <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  403e98:	2001      	movs	r0, #1
  403e9a:	4b0e      	ldr	r3, [pc, #56]	; (403ed4 <osc_enable+0x78>)
  403e9c:	4798      	blx	r3
		break;
  403e9e:	e015      	b.n	403ecc <osc_enable+0x70>


	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  403ea0:	2000      	movs	r0, #0
  403ea2:	4b0d      	ldr	r3, [pc, #52]	; (403ed8 <osc_enable+0x7c>)
  403ea4:	4798      	blx	r3
		break;
  403ea6:	e011      	b.n	403ecc <osc_enable+0x70>

	case OSC_MAINCK_16M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_16_MHz);
  403ea8:	2010      	movs	r0, #16
  403eaa:	4b0b      	ldr	r3, [pc, #44]	; (403ed8 <osc_enable+0x7c>)
  403eac:	4798      	blx	r3
		break;
  403eae:	e00d      	b.n	403ecc <osc_enable+0x70>

	case OSC_MAINCK_24M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_24_MHz);
  403eb0:	2020      	movs	r0, #32
  403eb2:	4b09      	ldr	r3, [pc, #36]	; (403ed8 <osc_enable+0x7c>)
  403eb4:	4798      	blx	r3
		break;
  403eb6:	e009      	b.n	403ecc <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403eb8:	2000      	movs	r0, #0
  403eba:	213e      	movs	r1, #62	; 0x3e
  403ebc:	4b07      	ldr	r3, [pc, #28]	; (403edc <osc_enable+0x80>)
  403ebe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  403ec0:	e004      	b.n	403ecc <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  403ec2:	2001      	movs	r0, #1
  403ec4:	213e      	movs	r1, #62	; 0x3e
  403ec6:	4b05      	ldr	r3, [pc, #20]	; (403edc <osc_enable+0x80>)
  403ec8:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  403eca:	bf00      	nop
	}
}
  403ecc:	3708      	adds	r7, #8
  403ece:	46bd      	mov	sp, r7
  403ed0:	bd80      	pop	{r7, pc}
  403ed2:	bf00      	nop
  403ed4:	00406669 	.word	0x00406669
  403ed8:	004066d5 	.word	0x004066d5
  403edc:	00406745 	.word	0x00406745

00403ee0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  403ee0:	b580      	push	{r7, lr}
  403ee2:	b082      	sub	sp, #8
  403ee4:	af00      	add	r7, sp, #0
  403ee6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403ee8:	687b      	ldr	r3, [r7, #4]
  403eea:	2b07      	cmp	r3, #7
  403eec:	d826      	bhi.n	403f3c <osc_is_ready+0x5c>
  403eee:	a201      	add	r2, pc, #4	; (adr r2, 403ef4 <osc_is_ready+0x14>)
  403ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403ef4:	00403f15 	.word	0x00403f15
  403ef8:	00403f19 	.word	0x00403f19
  403efc:	00403f19 	.word	0x00403f19
  403f00:	00403f2b 	.word	0x00403f2b
  403f04:	00403f2b 	.word	0x00403f2b
  403f08:	00403f2b 	.word	0x00403f2b
  403f0c:	00403f2b 	.word	0x00403f2b
  403f10:	00403f2b 	.word	0x00403f2b
	case OSC_SLCK_32K_RC:
		return 1;
  403f14:	2301      	movs	r3, #1
  403f16:	e012      	b.n	403f3e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  403f18:	4b0b      	ldr	r3, [pc, #44]	; (403f48 <osc_is_ready+0x68>)
  403f1a:	4798      	blx	r3
  403f1c:	4603      	mov	r3, r0
  403f1e:	2b00      	cmp	r3, #0
  403f20:	bf14      	ite	ne
  403f22:	2301      	movne	r3, #1
  403f24:	2300      	moveq	r3, #0
  403f26:	b2db      	uxtb	r3, r3
  403f28:	e009      	b.n	403f3e <osc_is_ready+0x5e>
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_16M_RC:
	case OSC_MAINCK_24M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403f2a:	4b08      	ldr	r3, [pc, #32]	; (403f4c <osc_is_ready+0x6c>)
  403f2c:	4798      	blx	r3
  403f2e:	4603      	mov	r3, r0
  403f30:	2b00      	cmp	r3, #0
  403f32:	bf14      	ite	ne
  403f34:	2301      	movne	r3, #1
  403f36:	2300      	moveq	r3, #0
  403f38:	b2db      	uxtb	r3, r3
  403f3a:	e000      	b.n	403f3e <osc_is_ready+0x5e>
	}

	return 0;
  403f3c:	2300      	movs	r3, #0
}
  403f3e:	4618      	mov	r0, r3
  403f40:	3708      	adds	r7, #8
  403f42:	46bd      	mov	sp, r7
  403f44:	bd80      	pop	{r7, pc}
  403f46:	bf00      	nop
  403f48:	004066a1 	.word	0x004066a1
  403f4c:	004067bd 	.word	0x004067bd

00403f50 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  403f50:	b480      	push	{r7}
  403f52:	b083      	sub	sp, #12
  403f54:	af00      	add	r7, sp, #0
  403f56:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403f58:	687b      	ldr	r3, [r7, #4]
  403f5a:	2b07      	cmp	r3, #7
  403f5c:	d825      	bhi.n	403faa <osc_get_rate+0x5a>
  403f5e:	a201      	add	r2, pc, #4	; (adr r2, 403f64 <osc_get_rate+0x14>)
  403f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403f64:	00403f85 	.word	0x00403f85
  403f68:	00403f8b 	.word	0x00403f8b
  403f6c:	00403f91 	.word	0x00403f91
  403f70:	00403f97 	.word	0x00403f97
  403f74:	00403f9b 	.word	0x00403f9b
  403f78:	00403f9f 	.word	0x00403f9f
  403f7c:	00403fa3 	.word	0x00403fa3
  403f80:	00403fa7 	.word	0x00403fa7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  403f84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403f88:	e010      	b.n	403fac <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403f8e:	e00d      	b.n	403fac <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  403f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403f94:	e00a      	b.n	403fac <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403f96:	4b08      	ldr	r3, [pc, #32]	; (403fb8 <osc_get_rate+0x68>)
  403f98:	e008      	b.n	403fac <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  403f9a:	4b08      	ldr	r3, [pc, #32]	; (403fbc <osc_get_rate+0x6c>)
  403f9c:	e006      	b.n	403fac <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  403f9e:	4b08      	ldr	r3, [pc, #32]	; (403fc0 <osc_get_rate+0x70>)
  403fa0:	e004      	b.n	403fac <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  403fa2:	2300      	movs	r3, #0
  403fa4:	e002      	b.n	403fac <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  403fa6:	2300      	movs	r3, #0
  403fa8:	e000      	b.n	403fac <osc_get_rate+0x5c>
#endif
	}

	return 0;
  403faa:	2300      	movs	r3, #0
}
  403fac:	4618      	mov	r0, r3
  403fae:	370c      	adds	r7, #12
  403fb0:	46bd      	mov	sp, r7
  403fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fb6:	4770      	bx	lr
  403fb8:	007a1200 	.word	0x007a1200
  403fbc:	00f42400 	.word	0x00f42400
  403fc0:	016e3600 	.word	0x016e3600

00403fc4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  403fc4:	b580      	push	{r7, lr}
  403fc6:	b082      	sub	sp, #8
  403fc8:	af00      	add	r7, sp, #0
  403fca:	4603      	mov	r3, r0
  403fcc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  403fce:	bf00      	nop
  403fd0:	79fb      	ldrb	r3, [r7, #7]
  403fd2:	4618      	mov	r0, r3
  403fd4:	4b05      	ldr	r3, [pc, #20]	; (403fec <osc_wait_ready+0x28>)
  403fd6:	4798      	blx	r3
  403fd8:	4603      	mov	r3, r0
  403fda:	f083 0301 	eor.w	r3, r3, #1
  403fde:	b2db      	uxtb	r3, r3
  403fe0:	2b00      	cmp	r3, #0
  403fe2:	d1f5      	bne.n	403fd0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  403fe4:	3708      	adds	r7, #8
  403fe6:	46bd      	mov	sp, r7
  403fe8:	bd80      	pop	{r7, pc}
  403fea:	bf00      	nop
  403fec:	00403ee1 	.word	0x00403ee1

00403ff0 <pll_config_init>:
 * \note The SAMG PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  403ff0:	b580      	push	{r7, lr}
  403ff2:	b086      	sub	sp, #24
  403ff4:	af00      	add	r7, sp, #0
  403ff6:	60f8      	str	r0, [r7, #12]
  403ff8:	607a      	str	r2, [r7, #4]
  403ffa:	603b      	str	r3, [r7, #0]
  403ffc:	460b      	mov	r3, r1
  403ffe:	72fb      	strb	r3, [r7, #11]

	Assert(e_src < PLL_NR_SOURCES);
	Assert(ul_div < 2);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  404000:	7afb      	ldrb	r3, [r7, #11]
  404002:	4618      	mov	r0, r3
  404004:	4b0d      	ldr	r3, [pc, #52]	; (40403c <pll_config_init+0x4c>)
  404006:	4798      	blx	r3
  404008:	4602      	mov	r2, r0
  40400a:	687b      	ldr	r3, [r7, #4]
  40400c:	fbb2 f3f3 	udiv	r3, r2, r3
  404010:	617b      	str	r3, [r7, #20]

	vco_hz *= ul_mul;
  404012:	697b      	ldr	r3, [r7, #20]
  404014:	683a      	ldr	r2, [r7, #0]
  404016:	fb02 f303 	mul.w	r3, r2, r3
  40401a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= (PLL_OUTPUT_MIN_HZ - (PLL_OUTPUT_MIN_HZ >> 6)));
	Assert(vco_hz <= (PLL_OUTPUT_MAX_HZ + (PLL_OUTPUT_MAX_HZ >> 6)));

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_PLLAEN(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40401c:	683b      	ldr	r3, [r7, #0]
  40401e:	3b01      	subs	r3, #1
  404020:	041a      	lsls	r2, r3, #16
  404022:	4b07      	ldr	r3, [pc, #28]	; (404040 <pll_config_init+0x50>)
  404024:	4013      	ands	r3, r2
  404026:	687a      	ldr	r2, [r7, #4]
  404028:	b2d2      	uxtb	r2, r2
  40402a:	4313      	orrs	r3, r2
  40402c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  404030:	68fb      	ldr	r3, [r7, #12]
  404032:	601a      	str	r2, [r3, #0]
}
  404034:	3718      	adds	r7, #24
  404036:	46bd      	mov	sp, r7
  404038:	bd80      	pop	{r7, pc}
  40403a:	bf00      	nop
  40403c:	00403f51 	.word	0x00403f51
  404040:	1fff0000 	.word	0x1fff0000

00404044 <pll_enable>:
#endif
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  404044:	b580      	push	{r7, lr}
  404046:	b082      	sub	sp, #8
  404048:	af00      	add	r7, sp, #0
  40404a:	6078      	str	r0, [r7, #4]
  40404c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40404e:	683b      	ldr	r3, [r7, #0]
  404050:	2b00      	cmp	r3, #0
  404052:	d106      	bne.n	404062 <pll_enable+0x1e>
		pmc_disable_pllack(); // Always stop PLL first!
  404054:	4b07      	ldr	r3, [pc, #28]	; (404074 <pll_enable+0x30>)
  404056:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  404058:	4a07      	ldr	r2, [pc, #28]	; (404078 <pll_enable+0x34>)
  40405a:	687b      	ldr	r3, [r7, #4]
  40405c:	681b      	ldr	r3, [r3, #0]
  40405e:	6293      	str	r3, [r2, #40]	; 0x28
  404060:	e005      	b.n	40406e <pll_enable+0x2a>
#if SAMG55
	} else {
		pmc_disable_pllbck(); // Always stop PLL first!
  404062:	4b06      	ldr	r3, [pc, #24]	; (40407c <pll_enable+0x38>)
  404064:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  404066:	4a04      	ldr	r2, [pc, #16]	; (404078 <pll_enable+0x34>)
  404068:	687b      	ldr	r3, [r7, #4]
  40406a:	681b      	ldr	r3, [r3, #0]
  40406c:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif
	}
}
  40406e:	3708      	adds	r7, #8
  404070:	46bd      	mov	sp, r7
  404072:	bd80      	pop	{r7, pc}
  404074:	004067d9 	.word	0x004067d9
  404078:	400e0400 	.word	0x400e0400
  40407c:	0040680d 	.word	0x0040680d

00404080 <pll_is_locked>:
#endif
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  404080:	b580      	push	{r7, lr}
  404082:	b082      	sub	sp, #8
  404084:	af00      	add	r7, sp, #0
  404086:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  404088:	687b      	ldr	r3, [r7, #4]
  40408a:	2b00      	cmp	r3, #0
  40408c:	d103      	bne.n	404096 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40408e:	4b08      	ldr	r3, [pc, #32]	; (4040b0 <pll_is_locked+0x30>)
  404090:	4798      	blx	r3
  404092:	4603      	mov	r3, r0
  404094:	e007      	b.n	4040a6 <pll_is_locked+0x26>
#if SAMG55
	} else if (ul_pll_id == PLLB_ID) {
  404096:	687b      	ldr	r3, [r7, #4]
  404098:	2b01      	cmp	r3, #1
  40409a:	d103      	bne.n	4040a4 <pll_is_locked+0x24>
		return pmc_is_locked_pllbck();
  40409c:	4b05      	ldr	r3, [pc, #20]	; (4040b4 <pll_is_locked+0x34>)
  40409e:	4798      	blx	r3
  4040a0:	4603      	mov	r3, r0
  4040a2:	e000      	b.n	4040a6 <pll_is_locked+0x26>
#endif
	} else {
		return 0;
  4040a4:	2300      	movs	r3, #0
	}
}
  4040a6:	4618      	mov	r0, r3
  4040a8:	3708      	adds	r7, #8
  4040aa:	46bd      	mov	sp, r7
  4040ac:	bd80      	pop	{r7, pc}
  4040ae:	bf00      	nop
  4040b0:	004067f1 	.word	0x004067f1
  4040b4:	00406825 	.word	0x00406825

004040b8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4040b8:	b580      	push	{r7, lr}
  4040ba:	b082      	sub	sp, #8
  4040bc:	af00      	add	r7, sp, #0
  4040be:	4603      	mov	r3, r0
  4040c0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4040c2:	79fb      	ldrb	r3, [r7, #7]
  4040c4:	3300      	adds	r3, #0
  4040c6:	2b01      	cmp	r3, #1
  4040c8:	d808      	bhi.n	4040dc <pll_enable_source+0x24>
	case PLL_SRC_SLCK_RC:
	case PLL_SRC_SLCK_XTAL:
		osc_enable(e_src);
  4040ca:	79fb      	ldrb	r3, [r7, #7]
  4040cc:	4618      	mov	r0, r3
  4040ce:	4b05      	ldr	r3, [pc, #20]	; (4040e4 <pll_enable_source+0x2c>)
  4040d0:	4798      	blx	r3
		osc_wait_ready(e_src);
  4040d2:	79fb      	ldrb	r3, [r7, #7]
  4040d4:	4618      	mov	r0, r3
  4040d6:	4b04      	ldr	r3, [pc, #16]	; (4040e8 <pll_enable_source+0x30>)
  4040d8:	4798      	blx	r3
		break;
  4040da:	e000      	b.n	4040de <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4040dc:	bf00      	nop
	}
}
  4040de:	3708      	adds	r7, #8
  4040e0:	46bd      	mov	sp, r7
  4040e2:	bd80      	pop	{r7, pc}
  4040e4:	00403e5d 	.word	0x00403e5d
  4040e8:	00403fc5 	.word	0x00403fc5

004040ec <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4040ec:	b580      	push	{r7, lr}
  4040ee:	b082      	sub	sp, #8
  4040f0:	af00      	add	r7, sp, #0
  4040f2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4040f4:	bf00      	nop
  4040f6:	6878      	ldr	r0, [r7, #4]
  4040f8:	4b04      	ldr	r3, [pc, #16]	; (40410c <pll_wait_for_lock+0x20>)
  4040fa:	4798      	blx	r3
  4040fc:	4603      	mov	r3, r0
  4040fe:	2b00      	cmp	r3, #0
  404100:	d0f9      	beq.n	4040f6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  404102:	2300      	movs	r3, #0
}
  404104:	4618      	mov	r0, r3
  404106:	3708      	adds	r7, #8
  404108:	46bd      	mov	sp, r7
  40410a:	bd80      	pop	{r7, pc}
  40410c:	00404081 	.word	0x00404081

00404110 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  404110:	b580      	push	{r7, lr}
  404112:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  404114:	2001      	movs	r0, #1
  404116:	4b04      	ldr	r3, [pc, #16]	; (404128 <sysclk_get_main_hz+0x18>)
  404118:	4798      	blx	r3
  40411a:	4602      	mov	r2, r0
  40411c:	f640 3372 	movw	r3, #2930	; 0xb72
  404120:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  404124:	4618      	mov	r0, r3
  404126:	bd80      	pop	{r7, pc}
  404128:	00403f51 	.word	0x00403f51

0040412c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40412c:	b580      	push	{r7, lr}
  40412e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  404130:	4b02      	ldr	r3, [pc, #8]	; (40413c <sysclk_get_cpu_hz+0x10>)
  404132:	4798      	blx	r3
  404134:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  404136:	4618      	mov	r0, r3
  404138:	bd80      	pop	{r7, pc}
  40413a:	bf00      	nop
  40413c:	00404111 	.word	0x00404111

00404140 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  404140:	b590      	push	{r4, r7, lr}
  404142:	b083      	sub	sp, #12
  404144:	af00      	add	r7, sp, #0

#ifdef CONFIG_PLL1_SOURCE
	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_PLL1) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL1_SOURCE);
  404146:	2001      	movs	r0, #1
  404148:	4b0d      	ldr	r3, [pc, #52]	; (404180 <sysclk_enable_usb+0x40>)
  40414a:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 1);
  40414c:	463b      	mov	r3, r7
  40414e:	4618      	mov	r0, r3
  404150:	2101      	movs	r1, #1
  404152:	2201      	movs	r2, #1
  404154:	f240 53b9 	movw	r3, #1465	; 0x5b9
  404158:	4c0a      	ldr	r4, [pc, #40]	; (404184 <sysclk_enable_usb+0x44>)
  40415a:	47a0      	blx	r4
		pll_enable(&pllcfg, 1);
  40415c:	463b      	mov	r3, r7
  40415e:	4618      	mov	r0, r3
  404160:	2101      	movs	r1, #1
  404162:	4b09      	ldr	r3, [pc, #36]	; (404188 <sysclk_enable_usb+0x48>)
  404164:	4798      	blx	r3
		pll_wait_for_lock(1);
  404166:	2001      	movs	r0, #1
  404168:	4b08      	ldr	r3, [pc, #32]	; (40418c <sysclk_enable_usb+0x4c>)
  40416a:	4798      	blx	r3
#ifdef UHD_ENABLE
		pmc_switch_uhpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  40416c:	2000      	movs	r0, #0
  40416e:	4b08      	ldr	r3, [pc, #32]	; (404190 <sysclk_enable_usb+0x50>)
  404170:	4798      	blx	r3
		pmc_enable_uhpck();
  404172:	4b08      	ldr	r3, [pc, #32]	; (404194 <sysclk_enable_usb+0x54>)
  404174:	4798      	blx	r3
#else
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
		pmc_enable_udpck();
#endif
		return;
  404176:	bf00      	nop
	}
#endif
}
  404178:	370c      	adds	r7, #12
  40417a:	46bd      	mov	sp, r7
  40417c:	bd90      	pop	{r4, r7, pc}
  40417e:	bf00      	nop
  404180:	004040b9 	.word	0x004040b9
  404184:	00403ff1 	.word	0x00403ff1
  404188:	00404045 	.word	0x00404045
  40418c:	004040ed 	.word	0x004040ed
  404190:	00406965 	.word	0x00406965
  404194:	0040698d 	.word	0x0040698d

00404198 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  404198:	b590      	push	{r4, r7, lr}
  40419a:	b0a7      	sub	sp, #156	; 0x9c
  40419c:	af02      	add	r7, sp, #8
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40419e:	4821      	ldr	r0, [pc, #132]	; (404224 <sysclk_init+0x8c>)
  4041a0:	4b21      	ldr	r3, [pc, #132]	; (404228 <sysclk_init+0x90>)
  4041a2:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4041a4:	2001      	movs	r0, #1
  4041a6:	4b21      	ldr	r3, [pc, #132]	; (40422c <sysclk_init+0x94>)
  4041a8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4041aa:	f107 0308 	add.w	r3, r7, #8
  4041ae:	4618      	mov	r0, r3
  4041b0:	2101      	movs	r1, #1
  4041b2:	2201      	movs	r2, #1
  4041b4:	f640 3372 	movw	r3, #2930	; 0xb72
  4041b8:	4c1d      	ldr	r4, [pc, #116]	; (404230 <sysclk_init+0x98>)
  4041ba:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4041bc:	f107 0308 	add.w	r3, r7, #8
  4041c0:	4618      	mov	r0, r3
  4041c2:	2100      	movs	r1, #0
  4041c4:	4b1b      	ldr	r3, [pc, #108]	; (404234 <sysclk_init+0x9c>)
  4041c6:	4798      	blx	r3
		pll_wait_for_lock(0);
  4041c8:	2000      	movs	r0, #0
  4041ca:	4b1b      	ldr	r3, [pc, #108]	; (404238 <sysclk_init+0xa0>)
  4041cc:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4041ce:	2000      	movs	r0, #0
  4041d0:	4b1a      	ldr	r3, [pc, #104]	; (40423c <sysclk_init+0xa4>)
  4041d2:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4041d4:	4b1a      	ldr	r3, [pc, #104]	; (404240 <sysclk_init+0xa8>)
  4041d6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4041d8:	4b1a      	ldr	r3, [pc, #104]	; (404244 <sysclk_init+0xac>)
  4041da:	4798      	blx	r3
  4041dc:	4603      	mov	r3, r0
  4041de:	4618      	mov	r0, r3
  4041e0:	4b11      	ldr	r3, [pc, #68]	; (404228 <sysclk_init+0x90>)
  4041e2:	4798      	blx	r3
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  4041e4:	4b18      	ldr	r3, [pc, #96]	; (404248 <sysclk_init+0xb0>)
  4041e6:	681b      	ldr	r3, [r3, #0]
  4041e8:	4a18      	ldr	r2, [pc, #96]	; (40424c <sysclk_init+0xb4>)
  4041ea:	4293      	cmp	r3, r2
  4041ec:	d817      	bhi.n	40421e <sysclk_init+0x86>
	(SystemCoreClock >= (CHIP_FREQ_CPU_MAX - (CHIP_FREQ_CPU_MAX >> 3)))) {
  4041ee:	4b16      	ldr	r3, [pc, #88]	; (404248 <sysclk_init+0xb0>)
  4041f0:	681b      	ldr	r3, [r3, #0]
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  4041f2:	4a17      	ldr	r2, [pc, #92]	; (404250 <sysclk_init+0xb8>)
  4041f4:	4293      	cmp	r3, r2
  4041f6:	d912      	bls.n	40421e <sysclk_init+0x86>
	(SystemCoreClock >= (CHIP_FREQ_CPU_MAX - (CHIP_FREQ_CPU_MAX >> 3)))) {
		/* Get the trim value from unique ID area */
		efc_perform_read_sequence(EFC, EFC_FCMD_STUI, EFC_FCMD_SPUI,
  4041f8:	f107 040c 	add.w	r4, r7, #12
  4041fc:	2320      	movs	r3, #32
  4041fe:	9300      	str	r3, [sp, #0]
  404200:	4814      	ldr	r0, [pc, #80]	; (404254 <sysclk_init+0xbc>)
  404202:	210e      	movs	r1, #14
  404204:	220f      	movs	r2, #15
  404206:	4623      	mov	r3, r4
  404208:	4c13      	ldr	r4, [pc, #76]	; (404258 <sysclk_init+0xc0>)
  40420a:	47a0      	blx	r4
		unique_id, 32);

		trim_value = unique_id[16] & 0x0000FFFF;
  40420c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40420e:	b29b      	uxth	r3, r3
  404210:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		supc_set_regulator_trim_user(SUPC, trim_value);
  404214:	4811      	ldr	r0, [pc, #68]	; (40425c <sysclk_init+0xc4>)
  404216:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
  40421a:	4b11      	ldr	r3, [pc, #68]	; (404260 <sysclk_init+0xc8>)
  40421c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40421e:	3794      	adds	r7, #148	; 0x94
  404220:	46bd      	mov	sp, r7
  404222:	bd90      	pop	{r4, r7, pc}
  404224:	07270e00 	.word	0x07270e00
  404228:	00408dcd 	.word	0x00408dcd
  40422c:	004040b9 	.word	0x004040b9
  404230:	00403ff1 	.word	0x00403ff1
  404234:	00404045 	.word	0x00404045
  404238:	004040ed 	.word	0x004040ed
  40423c:	004065e5 	.word	0x004065e5
  404240:	00408ca5 	.word	0x00408ca5
  404244:	0040412d 	.word	0x0040412d
  404248:	20000140 	.word	0x20000140
  40424c:	080befc0 	.word	0x080befc0
  404250:	06422c3f 	.word	0x06422c3f
  404254:	400e0a00 	.word	0x400e0a00
  404258:	2000001d 	.word	0x2000001d
  40425c:	400e1410 	.word	0x400e1410
  404260:	004069a5 	.word	0x004069a5

00404264 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  404264:	b480      	push	{r7}
  404266:	b083      	sub	sp, #12
  404268:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40426a:	f3ef 8310 	mrs	r3, PRIMASK
  40426e:	603b      	str	r3, [r7, #0]
  return(result);
  404270:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  404272:	2b00      	cmp	r3, #0
  404274:	bf0c      	ite	eq
  404276:	2301      	moveq	r3, #1
  404278:	2300      	movne	r3, #0
  40427a:	b2db      	uxtb	r3, r3
  40427c:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40427e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  404280:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404284:	4b04      	ldr	r3, [pc, #16]	; (404298 <cpu_irq_save+0x34>)
  404286:	2200      	movs	r2, #0
  404288:	701a      	strb	r2, [r3, #0]
	return flags;
  40428a:	687b      	ldr	r3, [r7, #4]
}
  40428c:	4618      	mov	r0, r3
  40428e:	370c      	adds	r7, #12
  404290:	46bd      	mov	sp, r7
  404292:	f85d 7b04 	ldr.w	r7, [sp], #4
  404296:	4770      	bx	lr
  404298:	2000013c 	.word	0x2000013c

0040429c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  40429c:	b480      	push	{r7}
  40429e:	b083      	sub	sp, #12
  4042a0:	af00      	add	r7, sp, #0
  4042a2:	6078      	str	r0, [r7, #4]
	return (flags);
  4042a4:	687b      	ldr	r3, [r7, #4]
  4042a6:	2b00      	cmp	r3, #0
  4042a8:	bf14      	ite	ne
  4042aa:	2301      	movne	r3, #1
  4042ac:	2300      	moveq	r3, #0
  4042ae:	b2db      	uxtb	r3, r3
}
  4042b0:	4618      	mov	r0, r3
  4042b2:	370c      	adds	r7, #12
  4042b4:	46bd      	mov	sp, r7
  4042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042ba:	4770      	bx	lr

004042bc <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4042bc:	b580      	push	{r7, lr}
  4042be:	b082      	sub	sp, #8
  4042c0:	af00      	add	r7, sp, #0
  4042c2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4042c4:	6878      	ldr	r0, [r7, #4]
  4042c6:	4b07      	ldr	r3, [pc, #28]	; (4042e4 <cpu_irq_restore+0x28>)
  4042c8:	4798      	blx	r3
  4042ca:	4603      	mov	r3, r0
  4042cc:	2b00      	cmp	r3, #0
  4042ce:	d005      	beq.n	4042dc <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4042d0:	4b05      	ldr	r3, [pc, #20]	; (4042e8 <cpu_irq_restore+0x2c>)
  4042d2:	2201      	movs	r2, #1
  4042d4:	701a      	strb	r2, [r3, #0]
  4042d6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4042da:	b662      	cpsie	i
}
  4042dc:	3708      	adds	r7, #8
  4042de:	46bd      	mov	sp, r7
  4042e0:	bd80      	pop	{r7, pc}
  4042e2:	bf00      	nop
  4042e4:	0040429d 	.word	0x0040429d
  4042e8:	2000013c 	.word	0x2000013c

004042ec <uhi_cdc_install>:
 * \name Interface used by UHC module
 */
//@{

uhc_enum_status_t uhi_cdc_install(uhc_device_t* dev)
{
  4042ec:	b580      	push	{r7, lr}
  4042ee:	b088      	sub	sp, #32
  4042f0:	af00      	add	r7, sp, #0
  4042f2:	6078      	str	r0, [r7, #4]
	bool b_iface_comm, b_iface_data;
	uint16_t conf_desc_lgt;
	uint8_t port_num, i;
	usb_iface_desc_t *ptr_iface;
	uhi_cdc_port_t *ptr_port = NULL;
  4042f4:	2300      	movs	r3, #0
  4042f6:	613b      	str	r3, [r7, #16]
	uhi_cdc_line_t *ptr_line;

	if (uhi_cdc_dev.dev != NULL) {
  4042f8:	4ba1      	ldr	r3, [pc, #644]	; (404580 <uhi_cdc_install+0x294>)
  4042fa:	681b      	ldr	r3, [r3, #0]
  4042fc:	2b00      	cmp	r3, #0
  4042fe:	d001      	beq.n	404304 <uhi_cdc_install+0x18>
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
  404300:	2305      	movs	r3, #5
  404302:	e1f4      	b.n	4046ee <uhi_cdc_install+0x402>
	}

	// Compute the number of port
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  404304:	687b      	ldr	r3, [r7, #4]
  404306:	695b      	ldr	r3, [r3, #20]
  404308:	789a      	ldrb	r2, [r3, #2]
  40430a:	78db      	ldrb	r3, [r3, #3]
  40430c:	021b      	lsls	r3, r3, #8
  40430e:	4313      	orrs	r3, r2
  404310:	83bb      	strh	r3, [r7, #28]
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  404312:	687b      	ldr	r3, [r7, #4]
  404314:	695b      	ldr	r3, [r3, #20]
  404316:	617b      	str	r3, [r7, #20]
	uhi_cdc_dev.nb_port = 0;
  404318:	4b99      	ldr	r3, [pc, #612]	; (404580 <uhi_cdc_install+0x294>)
  40431a:	2200      	movs	r2, #0
  40431c:	731a      	strb	r2, [r3, #12]
	while (conf_desc_lgt) {
  40431e:	e021      	b.n	404364 <uhi_cdc_install+0x78>
		if ((ptr_iface->bDescriptorType == USB_DT_INTERFACE)
  404320:	697b      	ldr	r3, [r7, #20]
  404322:	785b      	ldrb	r3, [r3, #1]
  404324:	2b04      	cmp	r3, #4
  404326:	d111      	bne.n	40434c <uhi_cdc_install+0x60>
				&& (ptr_iface->bInterfaceClass == CDC_CLASS_COMM)
  404328:	697b      	ldr	r3, [r7, #20]
  40432a:	795b      	ldrb	r3, [r3, #5]
  40432c:	2b02      	cmp	r3, #2
  40432e:	d10d      	bne.n	40434c <uhi_cdc_install+0x60>
				&& (ptr_iface->bInterfaceSubClass == CDC_SUBCLASS_ACM)
  404330:	697b      	ldr	r3, [r7, #20]
  404332:	799b      	ldrb	r3, [r3, #6]
  404334:	2b02      	cmp	r3, #2
  404336:	d109      	bne.n	40434c <uhi_cdc_install+0x60>
				&& (ptr_iface->bInterfaceProtocol <= CDC_PROTOCOL_V25TER)) {
  404338:	697b      	ldr	r3, [r7, #20]
  40433a:	79db      	ldrb	r3, [r3, #7]
  40433c:	2b01      	cmp	r3, #1
  40433e:	d805      	bhi.n	40434c <uhi_cdc_install+0x60>
			// New COM port has been found
			uhi_cdc_dev.nb_port++;
  404340:	4b8f      	ldr	r3, [pc, #572]	; (404580 <uhi_cdc_install+0x294>)
  404342:	7b1b      	ldrb	r3, [r3, #12]
  404344:	3301      	adds	r3, #1
  404346:	b2da      	uxtb	r2, r3
  404348:	4b8d      	ldr	r3, [pc, #564]	; (404580 <uhi_cdc_install+0x294>)
  40434a:	731a      	strb	r2, [r3, #12]
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
  40434c:	697b      	ldr	r3, [r7, #20]
  40434e:	781b      	ldrb	r3, [r3, #0]
  404350:	b29b      	uxth	r3, r3
  404352:	8bba      	ldrh	r2, [r7, #28]
  404354:	1ad3      	subs	r3, r2, r3
  404356:	83bb      	strh	r3, [r7, #28]
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
  404358:	697b      	ldr	r3, [r7, #20]
  40435a:	781b      	ldrb	r3, [r3, #0]
  40435c:	461a      	mov	r2, r3
  40435e:	697b      	ldr	r3, [r7, #20]
  404360:	4413      	add	r3, r2
  404362:	617b      	str	r3, [r7, #20]

	// Compute the number of port
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	uhi_cdc_dev.nb_port = 0;
	while (conf_desc_lgt) {
  404364:	8bbb      	ldrh	r3, [r7, #28]
  404366:	2b00      	cmp	r3, #0
  404368:	d1da      	bne.n	404320 <uhi_cdc_install+0x34>
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
	}
	if (uhi_cdc_dev.nb_port == 0) {
  40436a:	4b85      	ldr	r3, [pc, #532]	; (404580 <uhi_cdc_install+0x294>)
  40436c:	7b1b      	ldrb	r3, [r3, #12]
  40436e:	2b00      	cmp	r3, #0
  404370:	d101      	bne.n	404376 <uhi_cdc_install+0x8a>
		return UHC_ENUM_UNSUPPORTED; // No interface supported
  404372:	2301      	movs	r3, #1
  404374:	e1bb      	b.n	4046ee <uhi_cdc_install+0x402>
	}

	// Alloc port structures
	uhi_cdc_dev.port = malloc(uhi_cdc_dev.nb_port * sizeof(uhi_cdc_port_t));
  404376:	4b82      	ldr	r3, [pc, #520]	; (404580 <uhi_cdc_install+0x294>)
  404378:	7b1b      	ldrb	r3, [r3, #12]
  40437a:	461a      	mov	r2, r3
  40437c:	4613      	mov	r3, r2
  40437e:	011b      	lsls	r3, r3, #4
  404380:	1a9b      	subs	r3, r3, r2
  404382:	009b      	lsls	r3, r3, #2
  404384:	4618      	mov	r0, r3
  404386:	4b7f      	ldr	r3, [pc, #508]	; (404584 <uhi_cdc_install+0x298>)
  404388:	4798      	blx	r3
  40438a:	4603      	mov	r3, r0
  40438c:	461a      	mov	r2, r3
  40438e:	4b7c      	ldr	r3, [pc, #496]	; (404580 <uhi_cdc_install+0x294>)
  404390:	609a      	str	r2, [r3, #8]
	if (uhi_cdc_dev.port == NULL) {
  404392:	4b7b      	ldr	r3, [pc, #492]	; (404580 <uhi_cdc_install+0x294>)
  404394:	689b      	ldr	r3, [r3, #8]
  404396:	2b00      	cmp	r3, #0
  404398:	d101      	bne.n	40439e <uhi_cdc_install+0xb2>
		Assert(false);
		return UHC_ENUM_SOFTWARE_LIMIT;
  40439a:	2305      	movs	r3, #5
  40439c:	e1a7      	b.n	4046ee <uhi_cdc_install+0x402>
	}
	// Initialize structure
	for (i = 0; i<uhi_cdc_dev.nb_port; i++) {
  40439e:	2300      	movs	r3, #0
  4043a0:	76bb      	strb	r3, [r7, #26]
  4043a2:	e053      	b.n	40444c <uhi_cdc_install+0x160>
		uhi_cdc_dev.port[i].ep_comm_in = 0;
  4043a4:	4b76      	ldr	r3, [pc, #472]	; (404580 <uhi_cdc_install+0x294>)
  4043a6:	6899      	ldr	r1, [r3, #8]
  4043a8:	7eba      	ldrb	r2, [r7, #26]
  4043aa:	4613      	mov	r3, r2
  4043ac:	011b      	lsls	r3, r3, #4
  4043ae:	1a9b      	subs	r3, r3, r2
  4043b0:	009b      	lsls	r3, r3, #2
  4043b2:	440b      	add	r3, r1
  4043b4:	2200      	movs	r2, #0
  4043b6:	725a      	strb	r2, [r3, #9]
		uhi_cdc_dev.port[i].iface_data = 0xFF;
  4043b8:	4b71      	ldr	r3, [pc, #452]	; (404580 <uhi_cdc_install+0x294>)
  4043ba:	6899      	ldr	r1, [r3, #8]
  4043bc:	7eba      	ldrb	r2, [r7, #26]
  4043be:	4613      	mov	r3, r2
  4043c0:	011b      	lsls	r3, r3, #4
  4043c2:	1a9b      	subs	r3, r3, r2
  4043c4:	009b      	lsls	r3, r3, #2
  4043c6:	440b      	add	r3, r1
  4043c8:	22ff      	movs	r2, #255	; 0xff
  4043ca:	721a      	strb	r2, [r3, #8]
		uhi_cdc_dev.port[i].line_rx.ep_data = 0;
  4043cc:	4b6c      	ldr	r3, [pc, #432]	; (404580 <uhi_cdc_install+0x294>)
  4043ce:	6899      	ldr	r1, [r3, #8]
  4043d0:	7eba      	ldrb	r2, [r7, #26]
  4043d2:	4613      	mov	r3, r2
  4043d4:	011b      	lsls	r3, r3, #4
  4043d6:	1a9b      	subs	r3, r3, r2
  4043d8:	009b      	lsls	r3, r3, #2
  4043da:	440b      	add	r3, r1
  4043dc:	2200      	movs	r2, #0
  4043de:	731a      	strb	r2, [r3, #12]
		uhi_cdc_dev.port[i].line_rx.buffer[0].ptr = NULL;
  4043e0:	4b67      	ldr	r3, [pc, #412]	; (404580 <uhi_cdc_install+0x294>)
  4043e2:	6899      	ldr	r1, [r3, #8]
  4043e4:	7eba      	ldrb	r2, [r7, #26]
  4043e6:	4613      	mov	r3, r2
  4043e8:	011b      	lsls	r3, r3, #4
  4043ea:	1a9b      	subs	r3, r3, r2
  4043ec:	009b      	lsls	r3, r3, #2
  4043ee:	440b      	add	r3, r1
  4043f0:	2200      	movs	r2, #0
  4043f2:	619a      	str	r2, [r3, #24]
		uhi_cdc_dev.port[i].line_rx.buffer[1].ptr = NULL;
  4043f4:	4b62      	ldr	r3, [pc, #392]	; (404580 <uhi_cdc_install+0x294>)
  4043f6:	6899      	ldr	r1, [r3, #8]
  4043f8:	7eba      	ldrb	r2, [r7, #26]
  4043fa:	4613      	mov	r3, r2
  4043fc:	011b      	lsls	r3, r3, #4
  4043fe:	1a9b      	subs	r3, r3, r2
  404400:	009b      	lsls	r3, r3, #2
  404402:	440b      	add	r3, r1
  404404:	2200      	movs	r2, #0
  404406:	621a      	str	r2, [r3, #32]
		uhi_cdc_dev.port[i].line_tx.ep_data = 0;
  404408:	4b5d      	ldr	r3, [pc, #372]	; (404580 <uhi_cdc_install+0x294>)
  40440a:	6899      	ldr	r1, [r3, #8]
  40440c:	7eba      	ldrb	r2, [r7, #26]
  40440e:	4613      	mov	r3, r2
  404410:	011b      	lsls	r3, r3, #4
  404412:	1a9b      	subs	r3, r3, r2
  404414:	009b      	lsls	r3, r3, #2
  404416:	440b      	add	r3, r1
  404418:	2200      	movs	r2, #0
  40441a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		uhi_cdc_dev.port[i].line_tx.buffer[0].ptr = NULL;
  40441e:	4b58      	ldr	r3, [pc, #352]	; (404580 <uhi_cdc_install+0x294>)
  404420:	6899      	ldr	r1, [r3, #8]
  404422:	7eba      	ldrb	r2, [r7, #26]
  404424:	4613      	mov	r3, r2
  404426:	011b      	lsls	r3, r3, #4
  404428:	1a9b      	subs	r3, r3, r2
  40442a:	009b      	lsls	r3, r3, #2
  40442c:	440b      	add	r3, r1
  40442e:	2200      	movs	r2, #0
  404430:	631a      	str	r2, [r3, #48]	; 0x30
		uhi_cdc_dev.port[i].line_tx.buffer[1].ptr = NULL;
  404432:	4b53      	ldr	r3, [pc, #332]	; (404580 <uhi_cdc_install+0x294>)
  404434:	6899      	ldr	r1, [r3, #8]
  404436:	7eba      	ldrb	r2, [r7, #26]
  404438:	4613      	mov	r3, r2
  40443a:	011b      	lsls	r3, r3, #4
  40443c:	1a9b      	subs	r3, r3, r2
  40443e:	009b      	lsls	r3, r3, #2
  404440:	440b      	add	r3, r1
  404442:	2200      	movs	r2, #0
  404444:	639a      	str	r2, [r3, #56]	; 0x38
	if (uhi_cdc_dev.port == NULL) {
		Assert(false);
		return UHC_ENUM_SOFTWARE_LIMIT;
	}
	// Initialize structure
	for (i = 0; i<uhi_cdc_dev.nb_port; i++) {
  404446:	7ebb      	ldrb	r3, [r7, #26]
  404448:	3301      	adds	r3, #1
  40444a:	76bb      	strb	r3, [r7, #26]
  40444c:	4b4c      	ldr	r3, [pc, #304]	; (404580 <uhi_cdc_install+0x294>)
  40444e:	7b1b      	ldrb	r3, [r3, #12]
  404450:	7eba      	ldrb	r2, [r7, #26]
  404452:	429a      	cmp	r2, r3
  404454:	d3a6      	bcc.n	4043a4 <uhi_cdc_install+0xb8>
		uhi_cdc_dev.port[i].line_tx.buffer[0].ptr = NULL;
		uhi_cdc_dev.port[i].line_tx.buffer[1].ptr = NULL;
	}

	// Fill port structures
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  404456:	687b      	ldr	r3, [r7, #4]
  404458:	695b      	ldr	r3, [r3, #20]
  40445a:	789a      	ldrb	r2, [r3, #2]
  40445c:	78db      	ldrb	r3, [r3, #3]
  40445e:	021b      	lsls	r3, r3, #8
  404460:	4313      	orrs	r3, r2
  404462:	83bb      	strh	r3, [r7, #28]
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  404464:	687b      	ldr	r3, [r7, #4]
  404466:	695b      	ldr	r3, [r3, #20]
  404468:	617b      	str	r3, [r7, #20]
	b_iface_comm = false;
  40446a:	2300      	movs	r3, #0
  40446c:	77fb      	strb	r3, [r7, #31]
	b_iface_data = false;
  40446e:	2300      	movs	r3, #0
  404470:	77bb      	strb	r3, [r7, #30]
	port_num = 0;
  404472:	2300      	movs	r3, #0
  404474:	76fb      	strb	r3, [r7, #27]
	while (conf_desc_lgt) {
  404476:	e0fe      	b.n	404676 <uhi_cdc_install+0x38a>
		switch (ptr_iface->bDescriptorType) {
  404478:	697b      	ldr	r3, [r7, #20]
  40447a:	785b      	ldrb	r3, [r3, #1]
  40447c:	2b05      	cmp	r3, #5
  40447e:	d06b      	beq.n	404558 <uhi_cdc_install+0x26c>
  404480:	2b24      	cmp	r3, #36	; 0x24
  404482:	d058      	beq.n	404536 <uhi_cdc_install+0x24a>
  404484:	2b04      	cmp	r3, #4
  404486:	f040 80ea 	bne.w	40465e <uhi_cdc_install+0x372>

		case USB_DT_INTERFACE:
			if ((ptr_iface->bInterfaceClass == CDC_CLASS_COMM)
  40448a:	697b      	ldr	r3, [r7, #20]
  40448c:	795b      	ldrb	r3, [r3, #5]
  40448e:	2b02      	cmp	r3, #2
  404490:	d11a      	bne.n	4044c8 <uhi_cdc_install+0x1dc>
					&& (ptr_iface->bInterfaceSubClass == CDC_SUBCLASS_ACM)
  404492:	697b      	ldr	r3, [r7, #20]
  404494:	799b      	ldrb	r3, [r3, #6]
  404496:	2b02      	cmp	r3, #2
  404498:	d116      	bne.n	4044c8 <uhi_cdc_install+0x1dc>
					&& (ptr_iface->bInterfaceProtocol <= CDC_PROTOCOL_V25TER) ) {
  40449a:	697b      	ldr	r3, [r7, #20]
  40449c:	79db      	ldrb	r3, [r3, #7]
  40449e:	2b01      	cmp	r3, #1
  4044a0:	d812      	bhi.n	4044c8 <uhi_cdc_install+0x1dc>
				// New Communication Class COM port has been found
				b_iface_comm = true;
  4044a2:	2301      	movs	r3, #1
  4044a4:	77fb      	strb	r3, [r7, #31]
				ptr_port = &uhi_cdc_dev.port[port_num++];
  4044a6:	4b36      	ldr	r3, [pc, #216]	; (404580 <uhi_cdc_install+0x294>)
  4044a8:	689a      	ldr	r2, [r3, #8]
  4044aa:	7efb      	ldrb	r3, [r7, #27]
  4044ac:	1c59      	adds	r1, r3, #1
  4044ae:	76f9      	strb	r1, [r7, #27]
  4044b0:	4619      	mov	r1, r3
  4044b2:	460b      	mov	r3, r1
  4044b4:	011b      	lsls	r3, r3, #4
  4044b6:	1a5b      	subs	r3, r3, r1
  4044b8:	009b      	lsls	r3, r3, #2
  4044ba:	4413      	add	r3, r2
  4044bc:	613b      	str	r3, [r7, #16]
				ptr_port->iface_comm = ptr_iface->bInterfaceNumber;
  4044be:	697b      	ldr	r3, [r7, #20]
  4044c0:	789a      	ldrb	r2, [r3, #2]
  4044c2:	693b      	ldr	r3, [r7, #16]
  4044c4:	71da      	strb	r2, [r3, #7]
  4044c6:	e001      	b.n	4044cc <uhi_cdc_install+0x1e0>
			} else {
				// Stop allocation endpoint(s)
				b_iface_comm = false;
  4044c8:	2300      	movs	r3, #0
  4044ca:	77fb      	strb	r3, [r7, #31]
			}
			if ((ptr_iface->bInterfaceClass == CDC_CLASS_DATA)
  4044cc:	697b      	ldr	r3, [r7, #20]
  4044ce:	795b      	ldrb	r3, [r3, #5]
  4044d0:	2b0a      	cmp	r3, #10
  4044d2:	d12d      	bne.n	404530 <uhi_cdc_install+0x244>
					&& (ptr_iface->bInterfaceSubClass == 0)
  4044d4:	697b      	ldr	r3, [r7, #20]
  4044d6:	799b      	ldrb	r3, [r3, #6]
  4044d8:	2b00      	cmp	r3, #0
  4044da:	d129      	bne.n	404530 <uhi_cdc_install+0x244>
					&& (ptr_iface->bInterfaceProtocol == 0) ) {
  4044dc:	697b      	ldr	r3, [r7, #20]
  4044de:	79db      	ldrb	r3, [r3, #7]
  4044e0:	2b00      	cmp	r3, #0
  4044e2:	d125      	bne.n	404530 <uhi_cdc_install+0x244>
				for (i = 0; i<uhi_cdc_dev.nb_port; i++) {
  4044e4:	2300      	movs	r3, #0
  4044e6:	76bb      	strb	r3, [r7, #26]
  4044e8:	e01b      	b.n	404522 <uhi_cdc_install+0x236>
					ptr_port = &uhi_cdc_dev.port[i];
  4044ea:	4b25      	ldr	r3, [pc, #148]	; (404580 <uhi_cdc_install+0x294>)
  4044ec:	6899      	ldr	r1, [r3, #8]
  4044ee:	7eba      	ldrb	r2, [r7, #26]
  4044f0:	4613      	mov	r3, r2
  4044f2:	011b      	lsls	r3, r3, #4
  4044f4:	1a9b      	subs	r3, r3, r2
  4044f6:	009b      	lsls	r3, r3, #2
  4044f8:	440b      	add	r3, r1
  4044fa:	613b      	str	r3, [r7, #16]
					if (ptr_port->iface_data == 0xFF) {
  4044fc:	693b      	ldr	r3, [r7, #16]
  4044fe:	7a1b      	ldrb	r3, [r3, #8]
  404500:	2bff      	cmp	r3, #255	; 0xff
  404502:	d102      	bne.n	40450a <uhi_cdc_install+0x21e>
						b_iface_data = true;
  404504:	2301      	movs	r3, #1
  404506:	77bb      	strb	r3, [r7, #30]
						break;
  404508:	e010      	b.n	40452c <uhi_cdc_install+0x240>
					}
					else if (ptr_port->iface_data == ptr_iface->bInterfaceNumber) {
  40450a:	693b      	ldr	r3, [r7, #16]
  40450c:	7a1a      	ldrb	r2, [r3, #8]
  40450e:	697b      	ldr	r3, [r7, #20]
  404510:	789b      	ldrb	r3, [r3, #2]
  404512:	429a      	cmp	r2, r3
  404514:	d102      	bne.n	40451c <uhi_cdc_install+0x230>
						// New CDC DATA Class has been found
						// and correspond at a CDC COMM Class
						b_iface_data = true;
  404516:	2301      	movs	r3, #1
  404518:	77bb      	strb	r3, [r7, #30]
						break;
  40451a:	e007      	b.n	40452c <uhi_cdc_install+0x240>
				b_iface_comm = false;
			}
			if ((ptr_iface->bInterfaceClass == CDC_CLASS_DATA)
					&& (ptr_iface->bInterfaceSubClass == 0)
					&& (ptr_iface->bInterfaceProtocol == 0) ) {
				for (i = 0; i<uhi_cdc_dev.nb_port; i++) {
  40451c:	7ebb      	ldrb	r3, [r7, #26]
  40451e:	3301      	adds	r3, #1
  404520:	76bb      	strb	r3, [r7, #26]
  404522:	4b17      	ldr	r3, [pc, #92]	; (404580 <uhi_cdc_install+0x294>)
  404524:	7b1b      	ldrb	r3, [r3, #12]
  404526:	7eba      	ldrb	r2, [r7, #26]
  404528:	429a      	cmp	r2, r3
  40452a:	d3de      	bcc.n	4044ea <uhi_cdc_install+0x1fe>
				ptr_port->iface_comm = ptr_iface->bInterfaceNumber;
			} else {
				// Stop allocation endpoint(s)
				b_iface_comm = false;
			}
			if ((ptr_iface->bInterfaceClass == CDC_CLASS_DATA)
  40452c:	bf00      	nop
				}
			} else {
				// Stop allocation endpoint(s)
				b_iface_data = false;
			}
			break;
  40452e:	e096      	b.n	40465e <uhi_cdc_install+0x372>
						break;
					}
				}
			} else {
				// Stop allocation endpoint(s)
				b_iface_data = false;
  404530:	2300      	movs	r3, #0
  404532:	77bb      	strb	r3, [r7, #30]
			}
			break;
  404534:	e093      	b.n	40465e <uhi_cdc_install+0x372>

		case CDC_CS_INTERFACE:
			if (!b_iface_comm) {
  404536:	7ffb      	ldrb	r3, [r7, #31]
  404538:	f083 0301 	eor.w	r3, r3, #1
  40453c:	b2db      	uxtb	r3, r3
  40453e:	2b00      	cmp	r3, #0
  404540:	d000      	beq.n	404544 <uhi_cdc_install+0x258>
				break;
  404542:	e08c      	b.n	40465e <uhi_cdc_install+0x372>
			}
			if (((usb_cdc_call_mgmt_desc_t*)ptr_iface)->bDescriptorSubtype == CDC_SCS_CALL_MGMT) {
  404544:	697b      	ldr	r3, [r7, #20]
  404546:	789b      	ldrb	r3, [r3, #2]
  404548:	2b01      	cmp	r3, #1
  40454a:	d104      	bne.n	404556 <uhi_cdc_install+0x26a>
				ptr_port->iface_data = ((usb_cdc_call_mgmt_desc_t*)ptr_iface)->bDataInterface;
  40454c:	697b      	ldr	r3, [r7, #20]
  40454e:	791a      	ldrb	r2, [r3, #4]
  404550:	693b      	ldr	r3, [r7, #16]
  404552:	721a      	strb	r2, [r3, #8]
			}
			break;
  404554:	e083      	b.n	40465e <uhi_cdc_install+0x372>
  404556:	e082      	b.n	40465e <uhi_cdc_install+0x372>

		case USB_DT_ENDPOINT:
			//  Allocation of the endpoint
			if (b_iface_comm) {
  404558:	7ffb      	ldrb	r3, [r7, #31]
  40455a:	2b00      	cmp	r3, #0
  40455c:	d01c      	beq.n	404598 <uhi_cdc_install+0x2ac>
				Assert (((usb_ep_desc_t*)ptr_iface)->bmAttributes == USB_EP_TYPE_INTERRUPT);
				Assert (((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
				if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
  40455e:	687b      	ldr	r3, [r7, #4]
  404560:	7c9b      	ldrb	r3, [r3, #18]
  404562:	4618      	mov	r0, r3
  404564:	6979      	ldr	r1, [r7, #20]
  404566:	4b08      	ldr	r3, [pc, #32]	; (404588 <uhi_cdc_install+0x29c>)
  404568:	4798      	blx	r3
  40456a:	4603      	mov	r3, r0
  40456c:	f083 0301 	eor.w	r3, r3, #1
  404570:	b2db      	uxtb	r3, r3
  404572:	2b00      	cmp	r3, #0
  404574:	d00c      	beq.n	404590 <uhi_cdc_install+0x2a4>
					uhi_cdc_free_device();
  404576:	4b05      	ldr	r3, [pc, #20]	; (40458c <uhi_cdc_install+0x2a0>)
  404578:	4798      	blx	r3
					return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
  40457a:	2304      	movs	r3, #4
  40457c:	e0b7      	b.n	4046ee <uhi_cdc_install+0x402>
  40457e:	bf00      	nop
  404580:	200194b4 	.word	0x200194b4
  404584:	0040a139 	.word	0x0040a139
  404588:	00408351 	.word	0x00408351
  40458c:	004047d1 	.word	0x004047d1
				}
				ptr_port->ep_comm_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
  404590:	697b      	ldr	r3, [r7, #20]
  404592:	789a      	ldrb	r2, [r3, #2]
  404594:	693b      	ldr	r3, [r7, #16]
  404596:	725a      	strb	r2, [r3, #9]
			}
			if (b_iface_data) {
  404598:	7fbb      	ldrb	r3, [r7, #30]
  40459a:	2b00      	cmp	r3, #0
  40459c:	d05e      	beq.n	40465c <uhi_cdc_install+0x370>
				Assert (((usb_ep_desc_t*)ptr_iface)->bmAttributes == USB_EP_TYPE_BULK);
				if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
  40459e:	687b      	ldr	r3, [r7, #4]
  4045a0:	7c9b      	ldrb	r3, [r3, #18]
  4045a2:	4618      	mov	r0, r3
  4045a4:	6979      	ldr	r1, [r7, #20]
  4045a6:	4b54      	ldr	r3, [pc, #336]	; (4046f8 <uhi_cdc_install+0x40c>)
  4045a8:	4798      	blx	r3
  4045aa:	4603      	mov	r3, r0
  4045ac:	f083 0301 	eor.w	r3, r3, #1
  4045b0:	b2db      	uxtb	r3, r3
  4045b2:	2b00      	cmp	r3, #0
  4045b4:	d003      	beq.n	4045be <uhi_cdc_install+0x2d2>
					uhi_cdc_free_device();
  4045b6:	4b51      	ldr	r3, [pc, #324]	; (4046fc <uhi_cdc_install+0x410>)
  4045b8:	4798      	blx	r3
					return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
  4045ba:	2304      	movs	r3, #4
  4045bc:	e097      	b.n	4046ee <uhi_cdc_install+0x402>
				}

				if (((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN) {
  4045be:	697b      	ldr	r3, [r7, #20]
  4045c0:	789b      	ldrb	r3, [r3, #2]
  4045c2:	b2db      	uxtb	r3, r3
  4045c4:	b25b      	sxtb	r3, r3
  4045c6:	2b00      	cmp	r3, #0
  4045c8:	da03      	bge.n	4045d2 <uhi_cdc_install+0x2e6>
					ptr_line = &ptr_port->line_rx;
  4045ca:	693b      	ldr	r3, [r7, #16]
  4045cc:	330c      	adds	r3, #12
  4045ce:	60fb      	str	r3, [r7, #12]
  4045d0:	e002      	b.n	4045d8 <uhi_cdc_install+0x2ec>
				} else {
					ptr_line = &ptr_port->line_tx;
  4045d2:	693b      	ldr	r3, [r7, #16]
  4045d4:	3324      	adds	r3, #36	; 0x24
  4045d6:	60fb      	str	r3, [r7, #12]
				}
				ptr_line->ep_data = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
  4045d8:	697b      	ldr	r3, [r7, #20]
  4045da:	789a      	ldrb	r2, [r3, #2]
  4045dc:	68fb      	ldr	r3, [r7, #12]
  4045de:	701a      	strb	r2, [r3, #0]
				ptr_line->b_trans_ongoing = false;
  4045e0:	68fb      	ldr	r3, [r7, #12]
  4045e2:	2200      	movs	r2, #0
  4045e4:	705a      	strb	r2, [r3, #1]
				ptr_line->buf_sel = 0;
  4045e6:	68fb      	ldr	r3, [r7, #12]
  4045e8:	2200      	movs	r2, #0
  4045ea:	711a      	strb	r2, [r3, #4]

				// Allocate and initialize buffers
				uint16_t buf_size = Max( le16_to_cpu(
  4045ec:	697b      	ldr	r3, [r7, #20]
  4045ee:	889b      	ldrh	r3, [r3, #4]
  4045f0:	b29b      	uxth	r3, r3
  4045f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
  4045f6:	bf38      	it	cc
  4045f8:	f44f 53a0 	movcc.w	r3, #5120	; 0x1400
  4045fc:	817b      	strh	r3, [r7, #10]
						UHI_CDC_BUFFER_SIZE );
				//uint16_t buf_size = Max( le16_to_cpu(
				//		((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize),
				//		7+DATA_BLOCK );
						
				ptr_line->buffer_size = buf_size;
  4045fe:	68fb      	ldr	r3, [r7, #12]
  404600:	897a      	ldrh	r2, [r7, #10]
  404602:	80da      	strh	r2, [r3, #6]
				ptr_line->buffer[0].pos = 0;
  404604:	68fb      	ldr	r3, [r7, #12]
  404606:	2200      	movs	r2, #0
  404608:	811a      	strh	r2, [r3, #8]
				ptr_line->buffer[0].nb = 0;
  40460a:	68fb      	ldr	r3, [r7, #12]
  40460c:	2200      	movs	r2, #0
  40460e:	815a      	strh	r2, [r3, #10]
				ptr_line->buffer[0].ptr = malloc(buf_size);
  404610:	897b      	ldrh	r3, [r7, #10]
  404612:	4618      	mov	r0, r3
  404614:	4b3a      	ldr	r3, [pc, #232]	; (404700 <uhi_cdc_install+0x414>)
  404616:	4798      	blx	r3
  404618:	4603      	mov	r3, r0
  40461a:	461a      	mov	r2, r3
  40461c:	68fb      	ldr	r3, [r7, #12]
  40461e:	60da      	str	r2, [r3, #12]
				//ptr_line->buffer[0].ptr = pictureData.payload;//malloc(buf_size);
				if (ptr_line->buffer[0].ptr == NULL) {
  404620:	68fb      	ldr	r3, [r7, #12]
  404622:	68db      	ldr	r3, [r3, #12]
  404624:	2b00      	cmp	r3, #0
  404626:	d103      	bne.n	404630 <uhi_cdc_install+0x344>
					Assert(false);
					uhi_cdc_free_device();
  404628:	4b34      	ldr	r3, [pc, #208]	; (4046fc <uhi_cdc_install+0x410>)
  40462a:	4798      	blx	r3
					return UHC_ENUM_SOFTWARE_LIMIT;
  40462c:	2305      	movs	r3, #5
  40462e:	e05e      	b.n	4046ee <uhi_cdc_install+0x402>
				}
				ptr_line->buffer[1].pos = 0;
  404630:	68fb      	ldr	r3, [r7, #12]
  404632:	2200      	movs	r2, #0
  404634:	821a      	strh	r2, [r3, #16]
				ptr_line->buffer[1].nb = 0;
  404636:	68fb      	ldr	r3, [r7, #12]
  404638:	2200      	movs	r2, #0
  40463a:	825a      	strh	r2, [r3, #18]
				ptr_line->buffer[1].ptr = malloc(buf_size);
  40463c:	897b      	ldrh	r3, [r7, #10]
  40463e:	4618      	mov	r0, r3
  404640:	4b2f      	ldr	r3, [pc, #188]	; (404700 <uhi_cdc_install+0x414>)
  404642:	4798      	blx	r3
  404644:	4603      	mov	r3, r0
  404646:	461a      	mov	r2, r3
  404648:	68fb      	ldr	r3, [r7, #12]
  40464a:	615a      	str	r2, [r3, #20]
				if (ptr_line->buffer[1].ptr == NULL) {
  40464c:	68fb      	ldr	r3, [r7, #12]
  40464e:	695b      	ldr	r3, [r3, #20]
  404650:	2b00      	cmp	r3, #0
  404652:	d103      	bne.n	40465c <uhi_cdc_install+0x370>
					Assert(false);
					uhi_cdc_free_device();
  404654:	4b29      	ldr	r3, [pc, #164]	; (4046fc <uhi_cdc_install+0x410>)
  404656:	4798      	blx	r3
					return UHC_ENUM_SOFTWARE_LIMIT;
  404658:	2305      	movs	r3, #5
  40465a:	e048      	b.n	4046ee <uhi_cdc_install+0x402>
				}

			}
			break;
  40465c:	bf00      	nop

		}
		Assert(conf_desc_lgt >= ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
  40465e:	697b      	ldr	r3, [r7, #20]
  404660:	781b      	ldrb	r3, [r3, #0]
  404662:	b29b      	uxth	r3, r3
  404664:	8bba      	ldrh	r2, [r7, #28]
  404666:	1ad3      	subs	r3, r2, r3
  404668:	83bb      	strh	r3, [r7, #28]
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
  40466a:	697b      	ldr	r3, [r7, #20]
  40466c:	781b      	ldrb	r3, [r3, #0]
  40466e:	461a      	mov	r2, r3
  404670:	697b      	ldr	r3, [r7, #20]
  404672:	4413      	add	r3, r2
  404674:	617b      	str	r3, [r7, #20]
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_comm = false;
	b_iface_data = false;
	port_num = 0;
	while (conf_desc_lgt) {
  404676:	8bbb      	ldrh	r3, [r7, #28]
  404678:	2b00      	cmp	r3, #0
  40467a:	f47f aefd 	bne.w	404478 <uhi_cdc_install+0x18c>
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
	}

	// Check installed ports
	for (i = 0; i<uhi_cdc_dev.nb_port; i++) {
  40467e:	2300      	movs	r3, #0
  404680:	76bb      	strb	r3, [r7, #26]
  404682:	e028      	b.n	4046d6 <uhi_cdc_install+0x3ea>
		if ((uhi_cdc_dev.port[i].ep_comm_in == 0)
  404684:	4b1f      	ldr	r3, [pc, #124]	; (404704 <uhi_cdc_install+0x418>)
  404686:	6899      	ldr	r1, [r3, #8]
  404688:	7eba      	ldrb	r2, [r7, #26]
  40468a:	4613      	mov	r3, r2
  40468c:	011b      	lsls	r3, r3, #4
  40468e:	1a9b      	subs	r3, r3, r2
  404690:	009b      	lsls	r3, r3, #2
  404692:	440b      	add	r3, r1
  404694:	7a5b      	ldrb	r3, [r3, #9]
  404696:	2b00      	cmp	r3, #0
  404698:	d016      	beq.n	4046c8 <uhi_cdc_install+0x3dc>
				|| (uhi_cdc_dev.port[i].line_rx.ep_data == 0)
  40469a:	4b1a      	ldr	r3, [pc, #104]	; (404704 <uhi_cdc_install+0x418>)
  40469c:	6899      	ldr	r1, [r3, #8]
  40469e:	7eba      	ldrb	r2, [r7, #26]
  4046a0:	4613      	mov	r3, r2
  4046a2:	011b      	lsls	r3, r3, #4
  4046a4:	1a9b      	subs	r3, r3, r2
  4046a6:	009b      	lsls	r3, r3, #2
  4046a8:	440b      	add	r3, r1
  4046aa:	7b1b      	ldrb	r3, [r3, #12]
  4046ac:	2b00      	cmp	r3, #0
  4046ae:	d00b      	beq.n	4046c8 <uhi_cdc_install+0x3dc>
				|| (uhi_cdc_dev.port[i].line_tx.ep_data == 0)) {
  4046b0:	4b14      	ldr	r3, [pc, #80]	; (404704 <uhi_cdc_install+0x418>)
  4046b2:	6899      	ldr	r1, [r3, #8]
  4046b4:	7eba      	ldrb	r2, [r7, #26]
  4046b6:	4613      	mov	r3, r2
  4046b8:	011b      	lsls	r3, r3, #4
  4046ba:	1a9b      	subs	r3, r3, r2
  4046bc:	009b      	lsls	r3, r3, #2
  4046be:	440b      	add	r3, r1
  4046c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4046c4:	2b00      	cmp	r3, #0
  4046c6:	d103      	bne.n	4046d0 <uhi_cdc_install+0x3e4>
			// Install is not complete
			uhi_cdc_free_device();
  4046c8:	4b0c      	ldr	r3, [pc, #48]	; (4046fc <uhi_cdc_install+0x410>)
  4046ca:	4798      	blx	r3
			return UHC_ENUM_UNSUPPORTED;
  4046cc:	2301      	movs	r3, #1
  4046ce:	e00e      	b.n	4046ee <uhi_cdc_install+0x402>
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
	}

	// Check installed ports
	for (i = 0; i<uhi_cdc_dev.nb_port; i++) {
  4046d0:	7ebb      	ldrb	r3, [r7, #26]
  4046d2:	3301      	adds	r3, #1
  4046d4:	76bb      	strb	r3, [r7, #26]
  4046d6:	4b0b      	ldr	r3, [pc, #44]	; (404704 <uhi_cdc_install+0x418>)
  4046d8:	7b1b      	ldrb	r3, [r3, #12]
  4046da:	7eba      	ldrb	r2, [r7, #26]
  4046dc:	429a      	cmp	r2, r3
  4046de:	d3d1      	bcc.n	404684 <uhi_cdc_install+0x398>
			// Install is not complete
			uhi_cdc_free_device();
			return UHC_ENUM_UNSUPPORTED;
		}
	}
	uhi_cdc_dev.b_enabled = false;
  4046e0:	4b08      	ldr	r3, [pc, #32]	; (404704 <uhi_cdc_install+0x418>)
  4046e2:	2200      	movs	r2, #0
  4046e4:	711a      	strb	r2, [r3, #4]
	uhi_cdc_dev.dev = dev;
  4046e6:	4a07      	ldr	r2, [pc, #28]	; (404704 <uhi_cdc_install+0x418>)
  4046e8:	687b      	ldr	r3, [r7, #4]
  4046ea:	6013      	str	r3, [r2, #0]
	return UHC_ENUM_SUCCESS;
  4046ec:	2300      	movs	r3, #0
}
  4046ee:	4618      	mov	r0, r3
  4046f0:	3720      	adds	r7, #32
  4046f2:	46bd      	mov	sp, r7
  4046f4:	bd80      	pop	{r7, pc}
  4046f6:	bf00      	nop
  4046f8:	00408351 	.word	0x00408351
  4046fc:	004047d1 	.word	0x004047d1
  404700:	0040a139 	.word	0x0040a139
  404704:	200194b4 	.word	0x200194b4

00404708 <uhi_cdc_enable>:

void uhi_cdc_enable(uhc_device_t* dev)
{
  404708:	b580      	push	{r7, lr}
  40470a:	b082      	sub	sp, #8
  40470c:	af00      	add	r7, sp, #0
  40470e:	6078      	str	r0, [r7, #4]
	if (uhi_cdc_dev.dev != dev) {
  404710:	4b07      	ldr	r3, [pc, #28]	; (404730 <uhi_cdc_enable+0x28>)
  404712:	681a      	ldr	r2, [r3, #0]
  404714:	687b      	ldr	r3, [r7, #4]
  404716:	429a      	cmp	r2, r3
  404718:	d000      	beq.n	40471c <uhi_cdc_enable+0x14>
		return; // No interface to enable
  40471a:	e005      	b.n	404728 <uhi_cdc_enable+0x20>
	}
	uhi_cdc_dev.b_enabled = true;
  40471c:	4b04      	ldr	r3, [pc, #16]	; (404730 <uhi_cdc_enable+0x28>)
  40471e:	2201      	movs	r2, #1
  404720:	711a      	strb	r2, [r3, #4]

	// Start all data transfers
	uhi_cdc_sof(false);
  404722:	2000      	movs	r0, #0
  404724:	4b03      	ldr	r3, [pc, #12]	; (404734 <uhi_cdc_enable+0x2c>)
  404726:	4798      	blx	r3
	UHI_CDC_CHANGE(dev,true);
}
  404728:	3708      	adds	r7, #8
  40472a:	46bd      	mov	sp, r7
  40472c:	bd80      	pop	{r7, pc}
  40472e:	bf00      	nop
  404730:	200194b4 	.word	0x200194b4
  404734:	00404765 	.word	0x00404765

00404738 <uhi_cdc_uninstall>:

void uhi_cdc_uninstall(uhc_device_t* dev)
{
  404738:	b580      	push	{r7, lr}
  40473a:	b082      	sub	sp, #8
  40473c:	af00      	add	r7, sp, #0
  40473e:	6078      	str	r0, [r7, #4]
	if (uhi_cdc_dev.dev != dev) {
  404740:	4b06      	ldr	r3, [pc, #24]	; (40475c <uhi_cdc_uninstall+0x24>)
  404742:	681a      	ldr	r2, [r3, #0]
  404744:	687b      	ldr	r3, [r7, #4]
  404746:	429a      	cmp	r2, r3
  404748:	d000      	beq.n	40474c <uhi_cdc_uninstall+0x14>
		return; // Device not enabled in this interface
  40474a:	e004      	b.n	404756 <uhi_cdc_uninstall+0x1e>
	}
	uhi_cdc_dev.dev = NULL;
  40474c:	4b03      	ldr	r3, [pc, #12]	; (40475c <uhi_cdc_uninstall+0x24>)
  40474e:	2200      	movs	r2, #0
  404750:	601a      	str	r2, [r3, #0]
	uhi_cdc_free_device();
  404752:	4b03      	ldr	r3, [pc, #12]	; (404760 <uhi_cdc_uninstall+0x28>)
  404754:	4798      	blx	r3
	UHI_CDC_CHANGE(dev,false);
}
  404756:	3708      	adds	r7, #8
  404758:	46bd      	mov	sp, r7
  40475a:	bd80      	pop	{r7, pc}
  40475c:	200194b4 	.word	0x200194b4
  404760:	004047d1 	.word	0x004047d1

00404764 <uhi_cdc_sof>:

void uhi_cdc_sof(bool b_micro)
{
  404764:	b580      	push	{r7, lr}
  404766:	b084      	sub	sp, #16
  404768:	af00      	add	r7, sp, #0
  40476a:	4603      	mov	r3, r0
  40476c:	71fb      	strb	r3, [r7, #7]
	uint8_t port = 0;
  40476e:	2300      	movs	r3, #0
  404770:	73fb      	strb	r3, [r7, #15]
	uhi_cdc_port_t *ptr_port;
	UNUSED(b_micro);

	if (uhi_cdc_dev.dev == NULL) {
  404772:	4b13      	ldr	r3, [pc, #76]	; (4047c0 <uhi_cdc_sof+0x5c>)
  404774:	681b      	ldr	r3, [r3, #0]
  404776:	2b00      	cmp	r3, #0
  404778:	d100      	bne.n	40477c <uhi_cdc_sof+0x18>
		return; // No interface to installed
  40477a:	e01d      	b.n	4047b8 <uhi_cdc_sof+0x54>
	}
	if (!uhi_cdc_dev.b_enabled) {
  40477c:	4b10      	ldr	r3, [pc, #64]	; (4047c0 <uhi_cdc_sof+0x5c>)
  40477e:	791b      	ldrb	r3, [r3, #4]
  404780:	f083 0301 	eor.w	r3, r3, #1
  404784:	b2db      	uxtb	r3, r3
  404786:	2b00      	cmp	r3, #0
  404788:	d000      	beq.n	40478c <uhi_cdc_sof+0x28>
		return; // Interface not enabled
  40478a:	e015      	b.n	4047b8 <uhi_cdc_sof+0x54>
	}

	// Update transfers on each port
	while (1) {
		ptr_port = uhi_cdc_get_port(port++);
  40478c:	7bfb      	ldrb	r3, [r7, #15]
  40478e:	1c5a      	adds	r2, r3, #1
  404790:	73fa      	strb	r2, [r7, #15]
  404792:	4618      	mov	r0, r3
  404794:	4b0b      	ldr	r3, [pc, #44]	; (4047c4 <uhi_cdc_sof+0x60>)
  404796:	4798      	blx	r3
  404798:	60b8      	str	r0, [r7, #8]
		if (ptr_port == NULL) {
  40479a:	68bb      	ldr	r3, [r7, #8]
  40479c:	2b00      	cmp	r3, #0
  40479e:	d100      	bne.n	4047a2 <uhi_cdc_sof+0x3e>
			break;
  4047a0:	e00a      	b.n	4047b8 <uhi_cdc_sof+0x54>
		}
		uhi_cdc_rx_update(&ptr_port->line_rx);
  4047a2:	68bb      	ldr	r3, [r7, #8]
  4047a4:	330c      	adds	r3, #12
  4047a6:	4618      	mov	r0, r3
  4047a8:	4b07      	ldr	r3, [pc, #28]	; (4047c8 <uhi_cdc_sof+0x64>)
  4047aa:	4798      	blx	r3
		uhi_cdc_tx_update(&ptr_port->line_tx);
  4047ac:	68bb      	ldr	r3, [r7, #8]
  4047ae:	3324      	adds	r3, #36	; 0x24
  4047b0:	4618      	mov	r0, r3
  4047b2:	4b06      	ldr	r3, [pc, #24]	; (4047cc <uhi_cdc_sof+0x68>)
  4047b4:	4798      	blx	r3
	}
  4047b6:	e7e9      	b.n	40478c <uhi_cdc_sof+0x28>
}
  4047b8:	3710      	adds	r7, #16
  4047ba:	46bd      	mov	sp, r7
  4047bc:	bd80      	pop	{r7, pc}
  4047be:	bf00      	nop
  4047c0:	200194b4 	.word	0x200194b4
  4047c4:	004048c9 	.word	0x004048c9
  4047c8:	00404a15 	.word	0x00404a15
  4047cc:	00404c31 	.word	0x00404c31

004047d0 <uhi_cdc_free_device>:
 * \name Internal routines
 */
//@{

static void uhi_cdc_free_device(void)
{
  4047d0:	b580      	push	{r7, lr}
  4047d2:	b082      	sub	sp, #8
  4047d4:	af00      	add	r7, sp, #0
	if (uhi_cdc_dev.port == NULL) {
  4047d6:	4b3a      	ldr	r3, [pc, #232]	; (4048c0 <uhi_cdc_free_device+0xf0>)
  4047d8:	689b      	ldr	r3, [r3, #8]
  4047da:	2b00      	cmp	r3, #0
  4047dc:	d100      	bne.n	4047e0 <uhi_cdc_free_device+0x10>
		return;
  4047de:	e06b      	b.n	4048b8 <uhi_cdc_free_device+0xe8>
	}

	for (uint8_t i = 0; i<uhi_cdc_dev.nb_port; i++) {
  4047e0:	2300      	movs	r3, #0
  4047e2:	71fb      	strb	r3, [r7, #7]
  4047e4:	e05e      	b.n	4048a4 <uhi_cdc_free_device+0xd4>
		if (uhi_cdc_dev.port[i].line_rx.buffer[0].ptr) {
  4047e6:	4b36      	ldr	r3, [pc, #216]	; (4048c0 <uhi_cdc_free_device+0xf0>)
  4047e8:	6899      	ldr	r1, [r3, #8]
  4047ea:	79fa      	ldrb	r2, [r7, #7]
  4047ec:	4613      	mov	r3, r2
  4047ee:	011b      	lsls	r3, r3, #4
  4047f0:	1a9b      	subs	r3, r3, r2
  4047f2:	009b      	lsls	r3, r3, #2
  4047f4:	440b      	add	r3, r1
  4047f6:	699b      	ldr	r3, [r3, #24]
  4047f8:	2b00      	cmp	r3, #0
  4047fa:	d00b      	beq.n	404814 <uhi_cdc_free_device+0x44>
			free(uhi_cdc_dev.port[i].line_rx.buffer[0].ptr);
  4047fc:	4b30      	ldr	r3, [pc, #192]	; (4048c0 <uhi_cdc_free_device+0xf0>)
  4047fe:	6899      	ldr	r1, [r3, #8]
  404800:	79fa      	ldrb	r2, [r7, #7]
  404802:	4613      	mov	r3, r2
  404804:	011b      	lsls	r3, r3, #4
  404806:	1a9b      	subs	r3, r3, r2
  404808:	009b      	lsls	r3, r3, #2
  40480a:	440b      	add	r3, r1
  40480c:	699b      	ldr	r3, [r3, #24]
  40480e:	4618      	mov	r0, r3
  404810:	4b2c      	ldr	r3, [pc, #176]	; (4048c4 <uhi_cdc_free_device+0xf4>)
  404812:	4798      	blx	r3
		}
		if (uhi_cdc_dev.port[i].line_rx.buffer[1].ptr) {
  404814:	4b2a      	ldr	r3, [pc, #168]	; (4048c0 <uhi_cdc_free_device+0xf0>)
  404816:	6899      	ldr	r1, [r3, #8]
  404818:	79fa      	ldrb	r2, [r7, #7]
  40481a:	4613      	mov	r3, r2
  40481c:	011b      	lsls	r3, r3, #4
  40481e:	1a9b      	subs	r3, r3, r2
  404820:	009b      	lsls	r3, r3, #2
  404822:	440b      	add	r3, r1
  404824:	6a1b      	ldr	r3, [r3, #32]
  404826:	2b00      	cmp	r3, #0
  404828:	d00b      	beq.n	404842 <uhi_cdc_free_device+0x72>
			free(uhi_cdc_dev.port[i].line_rx.buffer[1].ptr);
  40482a:	4b25      	ldr	r3, [pc, #148]	; (4048c0 <uhi_cdc_free_device+0xf0>)
  40482c:	6899      	ldr	r1, [r3, #8]
  40482e:	79fa      	ldrb	r2, [r7, #7]
  404830:	4613      	mov	r3, r2
  404832:	011b      	lsls	r3, r3, #4
  404834:	1a9b      	subs	r3, r3, r2
  404836:	009b      	lsls	r3, r3, #2
  404838:	440b      	add	r3, r1
  40483a:	6a1b      	ldr	r3, [r3, #32]
  40483c:	4618      	mov	r0, r3
  40483e:	4b21      	ldr	r3, [pc, #132]	; (4048c4 <uhi_cdc_free_device+0xf4>)
  404840:	4798      	blx	r3
		}
		if (uhi_cdc_dev.port[i].line_tx.buffer[0].ptr) {
  404842:	4b1f      	ldr	r3, [pc, #124]	; (4048c0 <uhi_cdc_free_device+0xf0>)
  404844:	6899      	ldr	r1, [r3, #8]
  404846:	79fa      	ldrb	r2, [r7, #7]
  404848:	4613      	mov	r3, r2
  40484a:	011b      	lsls	r3, r3, #4
  40484c:	1a9b      	subs	r3, r3, r2
  40484e:	009b      	lsls	r3, r3, #2
  404850:	440b      	add	r3, r1
  404852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404854:	2b00      	cmp	r3, #0
  404856:	d00b      	beq.n	404870 <uhi_cdc_free_device+0xa0>
			free(uhi_cdc_dev.port[i].line_tx.buffer[0].ptr);
  404858:	4b19      	ldr	r3, [pc, #100]	; (4048c0 <uhi_cdc_free_device+0xf0>)
  40485a:	6899      	ldr	r1, [r3, #8]
  40485c:	79fa      	ldrb	r2, [r7, #7]
  40485e:	4613      	mov	r3, r2
  404860:	011b      	lsls	r3, r3, #4
  404862:	1a9b      	subs	r3, r3, r2
  404864:	009b      	lsls	r3, r3, #2
  404866:	440b      	add	r3, r1
  404868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40486a:	4618      	mov	r0, r3
  40486c:	4b15      	ldr	r3, [pc, #84]	; (4048c4 <uhi_cdc_free_device+0xf4>)
  40486e:	4798      	blx	r3
		}
		if (uhi_cdc_dev.port[i].line_tx.buffer[1].ptr) {
  404870:	4b13      	ldr	r3, [pc, #76]	; (4048c0 <uhi_cdc_free_device+0xf0>)
  404872:	6899      	ldr	r1, [r3, #8]
  404874:	79fa      	ldrb	r2, [r7, #7]
  404876:	4613      	mov	r3, r2
  404878:	011b      	lsls	r3, r3, #4
  40487a:	1a9b      	subs	r3, r3, r2
  40487c:	009b      	lsls	r3, r3, #2
  40487e:	440b      	add	r3, r1
  404880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  404882:	2b00      	cmp	r3, #0
  404884:	d00b      	beq.n	40489e <uhi_cdc_free_device+0xce>
			free(uhi_cdc_dev.port[i].line_tx.buffer[1].ptr);
  404886:	4b0e      	ldr	r3, [pc, #56]	; (4048c0 <uhi_cdc_free_device+0xf0>)
  404888:	6899      	ldr	r1, [r3, #8]
  40488a:	79fa      	ldrb	r2, [r7, #7]
  40488c:	4613      	mov	r3, r2
  40488e:	011b      	lsls	r3, r3, #4
  404890:	1a9b      	subs	r3, r3, r2
  404892:	009b      	lsls	r3, r3, #2
  404894:	440b      	add	r3, r1
  404896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  404898:	4618      	mov	r0, r3
  40489a:	4b0a      	ldr	r3, [pc, #40]	; (4048c4 <uhi_cdc_free_device+0xf4>)
  40489c:	4798      	blx	r3
{
	if (uhi_cdc_dev.port == NULL) {
		return;
	}

	for (uint8_t i = 0; i<uhi_cdc_dev.nb_port; i++) {
  40489e:	79fb      	ldrb	r3, [r7, #7]
  4048a0:	3301      	adds	r3, #1
  4048a2:	71fb      	strb	r3, [r7, #7]
  4048a4:	4b06      	ldr	r3, [pc, #24]	; (4048c0 <uhi_cdc_free_device+0xf0>)
  4048a6:	7b1b      	ldrb	r3, [r3, #12]
  4048a8:	79fa      	ldrb	r2, [r7, #7]
  4048aa:	429a      	cmp	r2, r3
  4048ac:	d39b      	bcc.n	4047e6 <uhi_cdc_free_device+0x16>
		}
		if (uhi_cdc_dev.port[i].line_tx.buffer[1].ptr) {
			free(uhi_cdc_dev.port[i].line_tx.buffer[1].ptr);
		}
	}
	free(uhi_cdc_dev.port);
  4048ae:	4b04      	ldr	r3, [pc, #16]	; (4048c0 <uhi_cdc_free_device+0xf0>)
  4048b0:	689b      	ldr	r3, [r3, #8]
  4048b2:	4618      	mov	r0, r3
  4048b4:	4b03      	ldr	r3, [pc, #12]	; (4048c4 <uhi_cdc_free_device+0xf4>)
  4048b6:	4798      	blx	r3
}
  4048b8:	3708      	adds	r7, #8
  4048ba:	46bd      	mov	sp, r7
  4048bc:	bd80      	pop	{r7, pc}
  4048be:	bf00      	nop
  4048c0:	200194b4 	.word	0x200194b4
  4048c4:	0040a149 	.word	0x0040a149

004048c8 <uhi_cdc_get_port>:

static uhi_cdc_port_t* uhi_cdc_get_port(uint8_t port_num)
{
  4048c8:	b480      	push	{r7}
  4048ca:	b083      	sub	sp, #12
  4048cc:	af00      	add	r7, sp, #0
  4048ce:	4603      	mov	r3, r0
  4048d0:	71fb      	strb	r3, [r7, #7]
	if (uhi_cdc_dev.dev == NULL) {
  4048d2:	4b0d      	ldr	r3, [pc, #52]	; (404908 <uhi_cdc_get_port+0x40>)
  4048d4:	681b      	ldr	r3, [r3, #0]
  4048d6:	2b00      	cmp	r3, #0
  4048d8:	d101      	bne.n	4048de <uhi_cdc_get_port+0x16>
		return NULL;
  4048da:	2300      	movs	r3, #0
  4048dc:	e00e      	b.n	4048fc <uhi_cdc_get_port+0x34>
	}
	if (port_num >= uhi_cdc_dev.nb_port) {
  4048de:	4b0a      	ldr	r3, [pc, #40]	; (404908 <uhi_cdc_get_port+0x40>)
  4048e0:	7b1b      	ldrb	r3, [r3, #12]
  4048e2:	79fa      	ldrb	r2, [r7, #7]
  4048e4:	429a      	cmp	r2, r3
  4048e6:	d301      	bcc.n	4048ec <uhi_cdc_get_port+0x24>
		return NULL;
  4048e8:	2300      	movs	r3, #0
  4048ea:	e007      	b.n	4048fc <uhi_cdc_get_port+0x34>
	}
	return &uhi_cdc_dev.port[port_num];
  4048ec:	4b06      	ldr	r3, [pc, #24]	; (404908 <uhi_cdc_get_port+0x40>)
  4048ee:	6899      	ldr	r1, [r3, #8]
  4048f0:	79fa      	ldrb	r2, [r7, #7]
  4048f2:	4613      	mov	r3, r2
  4048f4:	011b      	lsls	r3, r3, #4
  4048f6:	1a9b      	subs	r3, r3, r2
  4048f8:	009b      	lsls	r3, r3, #2
  4048fa:	440b      	add	r3, r1
}
  4048fc:	4618      	mov	r0, r3
  4048fe:	370c      	adds	r7, #12
  404900:	46bd      	mov	sp, r7
  404902:	f85d 7b04 	ldr.w	r7, [sp], #4
  404906:	4770      	bx	lr
  404908:	200194b4 	.word	0x200194b4

0040490c <uhi_cdc_set_conf>:

static bool uhi_cdc_set_conf(uint8_t port, usb_cdc_line_coding_t *configuration)
{
  40490c:	b590      	push	{r4, r7, lr}
  40490e:	b089      	sub	sp, #36	; 0x24
  404910:	af02      	add	r7, sp, #8
  404912:	4603      	mov	r3, r0
  404914:	6039      	str	r1, [r7, #0]
  404916:	71fb      	strb	r3, [r7, #7]
	uhi_cdc_port_t *ptr_port;
	usb_setup_req_t req;

	// Select port
	ptr_port = uhi_cdc_get_port(port);
  404918:	79fb      	ldrb	r3, [r7, #7]
  40491a:	4618      	mov	r0, r3
  40491c:	4b19      	ldr	r3, [pc, #100]	; (404984 <uhi_cdc_set_conf+0x78>)
  40491e:	4798      	blx	r3
  404920:	6178      	str	r0, [r7, #20]
	if (ptr_port == NULL) {
  404922:	697b      	ldr	r3, [r7, #20]
  404924:	2b00      	cmp	r3, #0
  404926:	d101      	bne.n	40492c <uhi_cdc_set_conf+0x20>
		return false;
  404928:	2300      	movs	r3, #0
  40492a:	e027      	b.n	40497c <uhi_cdc_set_conf+0x70>
	}
	memcpy(&ptr_port->conf, configuration, sizeof(usb_cdc_line_coding_t));
  40492c:	697b      	ldr	r3, [r7, #20]
  40492e:	4618      	mov	r0, r3
  404930:	6839      	ldr	r1, [r7, #0]
  404932:	2207      	movs	r2, #7
  404934:	4b14      	ldr	r3, [pc, #80]	; (404988 <uhi_cdc_set_conf+0x7c>)
  404936:	4798      	blx	r3

	// Enable configuration
	req.bmRequestType = USB_REQ_RECIP_INTERFACE | USB_REQ_TYPE_CLASS | USB_REQ_DIR_OUT;
  404938:	2321      	movs	r3, #33	; 0x21
  40493a:	733b      	strb	r3, [r7, #12]
	req.bRequest = USB_REQ_CDC_SET_LINE_CODING;
  40493c:	2320      	movs	r3, #32
  40493e:	737b      	strb	r3, [r7, #13]
	req.wValue = 0;
  404940:	2300      	movs	r3, #0
  404942:	81fb      	strh	r3, [r7, #14]
	req.wIndex = ptr_port->iface_comm;
  404944:	697b      	ldr	r3, [r7, #20]
  404946:	79db      	ldrb	r3, [r3, #7]
  404948:	b29b      	uxth	r3, r3
  40494a:	823b      	strh	r3, [r7, #16]
	req.wLength = sizeof(usb_cdc_line_coding_t);
  40494c:	2307      	movs	r3, #7
  40494e:	827b      	strh	r3, [r7, #18]
	if (!uhd_setup_request(uhi_cdc_dev.dev->address,
  404950:	4b0e      	ldr	r3, [pc, #56]	; (40498c <uhi_cdc_set_conf+0x80>)
  404952:	681b      	ldr	r3, [r3, #0]
  404954:	7c98      	ldrb	r0, [r3, #18]
			&req,
			(uint8_t *) &ptr_port->conf,
  404956:	697a      	ldr	r2, [r7, #20]
	req.bmRequestType = USB_REQ_RECIP_INTERFACE | USB_REQ_TYPE_CLASS | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_CDC_SET_LINE_CODING;
	req.wValue = 0;
	req.wIndex = ptr_port->iface_comm;
	req.wLength = sizeof(usb_cdc_line_coding_t);
	if (!uhd_setup_request(uhi_cdc_dev.dev->address,
  404958:	f107 010c 	add.w	r1, r7, #12
  40495c:	2300      	movs	r3, #0
  40495e:	9300      	str	r3, [sp, #0]
  404960:	2300      	movs	r3, #0
  404962:	9301      	str	r3, [sp, #4]
  404964:	2307      	movs	r3, #7
  404966:	4c0a      	ldr	r4, [pc, #40]	; (404990 <uhi_cdc_set_conf+0x84>)
  404968:	47a0      	blx	r4
  40496a:	4603      	mov	r3, r0
  40496c:	f083 0301 	eor.w	r3, r3, #1
  404970:	b2db      	uxtb	r3, r3
  404972:	2b00      	cmp	r3, #0
  404974:	d001      	beq.n	40497a <uhi_cdc_set_conf+0x6e>
			&req,
			(uint8_t *) &ptr_port->conf,
			sizeof(usb_cdc_line_coding_t),
			NULL, NULL)) {
		return false;
  404976:	2300      	movs	r3, #0
  404978:	e000      	b.n	40497c <uhi_cdc_set_conf+0x70>
	}
	return true;
  40497a:	2301      	movs	r3, #1
}
  40497c:	4618      	mov	r0, r3
  40497e:	371c      	adds	r7, #28
  404980:	46bd      	mov	sp, r7
  404982:	bd90      	pop	{r4, r7, pc}
  404984:	004048c9 	.word	0x004048c9
  404988:	0040a6e1 	.word	0x0040a6e1
  40498c:	200194b4 	.word	0x200194b4
  404990:	00408469 	.word	0x00408469

00404994 <uhi_cdc_set_ctrl_line>:

static bool uhi_cdc_set_ctrl_line(uint8_t port, le16_t wValue)
{
  404994:	b590      	push	{r4, r7, lr}
  404996:	b089      	sub	sp, #36	; 0x24
  404998:	af02      	add	r7, sp, #8
  40499a:	4603      	mov	r3, r0
  40499c:	460a      	mov	r2, r1
  40499e:	71fb      	strb	r3, [r7, #7]
  4049a0:	4613      	mov	r3, r2
  4049a2:	80bb      	strh	r3, [r7, #4]
	uhi_cdc_port_t *ptr_port;
	usb_setup_req_t req;

	// Select port
	ptr_port = uhi_cdc_get_port(port);
  4049a4:	79fb      	ldrb	r3, [r7, #7]
  4049a6:	4618      	mov	r0, r3
  4049a8:	4b17      	ldr	r3, [pc, #92]	; (404a08 <uhi_cdc_set_ctrl_line+0x74>)
  4049aa:	4798      	blx	r3
  4049ac:	6178      	str	r0, [r7, #20]
	if (ptr_port == NULL) {
  4049ae:	697b      	ldr	r3, [r7, #20]
  4049b0:	2b00      	cmp	r3, #0
  4049b2:	d101      	bne.n	4049b8 <uhi_cdc_set_ctrl_line+0x24>
		return false;
  4049b4:	2300      	movs	r3, #0
  4049b6:	e023      	b.n	404a00 <uhi_cdc_set_ctrl_line+0x6c>
	}

	// Enable configuration
	req.bmRequestType = USB_REQ_RECIP_INTERFACE | USB_REQ_TYPE_CLASS | USB_REQ_DIR_OUT;
  4049b8:	2321      	movs	r3, #33	; 0x21
  4049ba:	733b      	strb	r3, [r7, #12]
	req.bRequest = USB_REQ_CDC_SET_CONTROL_LINE_STATE;
  4049bc:	2322      	movs	r3, #34	; 0x22
  4049be:	737b      	strb	r3, [r7, #13]
	req.wValue = wValue;
  4049c0:	88bb      	ldrh	r3, [r7, #4]
  4049c2:	81fb      	strh	r3, [r7, #14]
	req.wIndex = ptr_port->iface_comm;
  4049c4:	697b      	ldr	r3, [r7, #20]
  4049c6:	79db      	ldrb	r3, [r3, #7]
  4049c8:	b29b      	uxth	r3, r3
  4049ca:	823b      	strh	r3, [r7, #16]
	req.wLength = 0;
  4049cc:	2300      	movs	r3, #0
  4049ce:	827b      	strh	r3, [r7, #18]
	if (!uhd_setup_request(uhi_cdc_dev.dev->address,
  4049d0:	4b0e      	ldr	r3, [pc, #56]	; (404a0c <uhi_cdc_set_ctrl_line+0x78>)
  4049d2:	681b      	ldr	r3, [r3, #0]
  4049d4:	7c99      	ldrb	r1, [r3, #18]
  4049d6:	f107 020c 	add.w	r2, r7, #12
  4049da:	2300      	movs	r3, #0
  4049dc:	9300      	str	r3, [sp, #0]
  4049de:	2300      	movs	r3, #0
  4049e0:	9301      	str	r3, [sp, #4]
  4049e2:	4608      	mov	r0, r1
  4049e4:	4611      	mov	r1, r2
  4049e6:	2200      	movs	r2, #0
  4049e8:	2300      	movs	r3, #0
  4049ea:	4c09      	ldr	r4, [pc, #36]	; (404a10 <uhi_cdc_set_ctrl_line+0x7c>)
  4049ec:	47a0      	blx	r4
  4049ee:	4603      	mov	r3, r0
  4049f0:	f083 0301 	eor.w	r3, r3, #1
  4049f4:	b2db      	uxtb	r3, r3
  4049f6:	2b00      	cmp	r3, #0
  4049f8:	d001      	beq.n	4049fe <uhi_cdc_set_ctrl_line+0x6a>
			&req,
			NULL,
			0,
			NULL, NULL)) {
		return false;
  4049fa:	2300      	movs	r3, #0
  4049fc:	e000      	b.n	404a00 <uhi_cdc_set_ctrl_line+0x6c>
	}
	return true;
  4049fe:	2301      	movs	r3, #1
}
  404a00:	4618      	mov	r0, r3
  404a02:	371c      	adds	r7, #28
  404a04:	46bd      	mov	sp, r7
  404a06:	bd90      	pop	{r4, r7, pc}
  404a08:	004048c9 	.word	0x004048c9
  404a0c:	200194b4 	.word	0x200194b4
  404a10:	00408469 	.word	0x00408469

00404a14 <uhi_cdc_rx_update>:

static bool uhi_cdc_rx_update(uhi_cdc_line_t *line)
{
  404a14:	b590      	push	{r4, r7, lr}
  404a16:	b08b      	sub	sp, #44	; 0x2c
  404a18:	af04      	add	r7, sp, #16
  404a1a:	6078      	str	r0, [r7, #4]
	irqflags_t flags;
	uhi_cdc_buf_t *buf_nosel;
	uhi_cdc_buf_t *buf_sel;

	flags = cpu_irq_save();
  404a1c:	4b44      	ldr	r3, [pc, #272]	; (404b30 <uhi_cdc_rx_update+0x11c>)
  404a1e:	4798      	blx	r3
  404a20:	6138      	str	r0, [r7, #16]
	// Check if transfer is already on-going
	if (line->b_trans_ongoing) {
  404a22:	687b      	ldr	r3, [r7, #4]
  404a24:	785b      	ldrb	r3, [r3, #1]
  404a26:	2b00      	cmp	r3, #0
  404a28:	d004      	beq.n	404a34 <uhi_cdc_rx_update+0x20>
		cpu_irq_restore(flags);
  404a2a:	6938      	ldr	r0, [r7, #16]
  404a2c:	4b41      	ldr	r3, [pc, #260]	; (404b34 <uhi_cdc_rx_update+0x120>)
  404a2e:	4798      	blx	r3
		return false;
  404a30:	2300      	movs	r3, #0
  404a32:	e078      	b.n	404b26 <uhi_cdc_rx_update+0x112>
	}

	// Search a empty buffer to start a transfer
	buf_sel = &line->buffer[line->buf_sel];
  404a34:	687b      	ldr	r3, [r7, #4]
  404a36:	791b      	ldrb	r3, [r3, #4]
  404a38:	b2db      	uxtb	r3, r3
  404a3a:	3301      	adds	r3, #1
  404a3c:	00db      	lsls	r3, r3, #3
  404a3e:	687a      	ldr	r2, [r7, #4]
  404a40:	4413      	add	r3, r2
  404a42:	60fb      	str	r3, [r7, #12]
	buf_nosel = &line->buffer[(line->buf_sel == 0)? 1 : 0];
  404a44:	687b      	ldr	r3, [r7, #4]
  404a46:	791b      	ldrb	r3, [r3, #4]
  404a48:	b2db      	uxtb	r3, r3
  404a4a:	2b00      	cmp	r3, #0
  404a4c:	bf0c      	ite	eq
  404a4e:	2301      	moveq	r3, #1
  404a50:	2300      	movne	r3, #0
  404a52:	b2db      	uxtb	r3, r3
  404a54:	3301      	adds	r3, #1
  404a56:	00db      	lsls	r3, r3, #3
  404a58:	687a      	ldr	r2, [r7, #4]
  404a5a:	4413      	add	r3, r2
  404a5c:	617b      	str	r3, [r7, #20]
	if (buf_sel->pos >= buf_sel->nb) {
  404a5e:	68fb      	ldr	r3, [r7, #12]
  404a60:	881a      	ldrh	r2, [r3, #0]
  404a62:	68fb      	ldr	r3, [r7, #12]
  404a64:	885b      	ldrh	r3, [r3, #2]
  404a66:	429a      	cmp	r2, r3
  404a68:	d305      	bcc.n	404a76 <uhi_cdc_rx_update+0x62>
		// The current buffer has been read
		// then reset it
		buf_sel->pos = 0;
  404a6a:	68fb      	ldr	r3, [r7, #12]
  404a6c:	2200      	movs	r2, #0
  404a6e:	801a      	strh	r2, [r3, #0]
		buf_sel->nb = 0;
  404a70:	68fb      	ldr	r3, [r7, #12]
  404a72:	2200      	movs	r2, #0
  404a74:	805a      	strh	r2, [r3, #2]
	}
	if (!buf_sel->nb && buf_nosel->nb) {
  404a76:	68fb      	ldr	r3, [r7, #12]
  404a78:	885b      	ldrh	r3, [r3, #2]
  404a7a:	2b00      	cmp	r3, #0
  404a7c:	d112      	bne.n	404aa4 <uhi_cdc_rx_update+0x90>
  404a7e:	697b      	ldr	r3, [r7, #20]
  404a80:	885b      	ldrh	r3, [r3, #2]
  404a82:	2b00      	cmp	r3, #0
  404a84:	d00e      	beq.n	404aa4 <uhi_cdc_rx_update+0x90>
		// New data available then change current buffer
		line->buf_sel = (line->buf_sel == 0)? 1 : 0;
  404a86:	687b      	ldr	r3, [r7, #4]
  404a88:	791b      	ldrb	r3, [r3, #4]
  404a8a:	b2db      	uxtb	r3, r3
  404a8c:	2b00      	cmp	r3, #0
  404a8e:	bf0c      	ite	eq
  404a90:	2301      	moveq	r3, #1
  404a92:	2300      	movne	r3, #0
  404a94:	b2db      	uxtb	r3, r3
  404a96:	461a      	mov	r2, r3
  404a98:	687b      	ldr	r3, [r7, #4]
  404a9a:	711a      	strb	r2, [r3, #4]
		buf_nosel = buf_sel;
  404a9c:	68fb      	ldr	r3, [r7, #12]
  404a9e:	617b      	str	r3, [r7, #20]
		UHI_CDC_RX_NOTIFY();
  404aa0:	4b25      	ldr	r3, [pc, #148]	; (404b38 <uhi_cdc_rx_update+0x124>)
  404aa2:	4798      	blx	r3
	}

	if (buf_nosel->nb) {
  404aa4:	697b      	ldr	r3, [r7, #20]
  404aa6:	885b      	ldrh	r3, [r3, #2]
  404aa8:	2b00      	cmp	r3, #0
  404aaa:	d004      	beq.n	404ab6 <uhi_cdc_rx_update+0xa2>
		// No empty buffer available to start a transfer
		cpu_irq_restore(flags);
  404aac:	6938      	ldr	r0, [r7, #16]
  404aae:	4b21      	ldr	r3, [pc, #132]	; (404b34 <uhi_cdc_rx_update+0x120>)
  404ab0:	4798      	blx	r3
		return false;
  404ab2:	2300      	movs	r3, #0
  404ab4:	e037      	b.n	404b26 <uhi_cdc_rx_update+0x112>
	}

	// Check if transfer must be delayed after the next SOF
	if (uhi_cdc_dev.dev->speed == UHD_SPEED_HIGH) {
  404ab6:	4b21      	ldr	r3, [pc, #132]	; (404b3c <uhi_cdc_rx_update+0x128>)
  404ab8:	681b      	ldr	r3, [r3, #0]
  404aba:	7cdb      	ldrb	r3, [r3, #19]
  404abc:	2b02      	cmp	r3, #2
  404abe:	d10b      	bne.n	404ad8 <uhi_cdc_rx_update+0xc4>
		if (line->sof == uhd_get_microframe_number()) {
  404ac0:	687b      	ldr	r3, [r7, #4]
  404ac2:	885c      	ldrh	r4, [r3, #2]
  404ac4:	4b1e      	ldr	r3, [pc, #120]	; (404b40 <uhi_cdc_rx_update+0x12c>)
  404ac6:	4798      	blx	r3
  404ac8:	4603      	mov	r3, r0
  404aca:	429c      	cmp	r4, r3
  404acc:	d110      	bne.n	404af0 <uhi_cdc_rx_update+0xdc>
			cpu_irq_restore(flags);
  404ace:	6938      	ldr	r0, [r7, #16]
  404ad0:	4b18      	ldr	r3, [pc, #96]	; (404b34 <uhi_cdc_rx_update+0x120>)
  404ad2:	4798      	blx	r3
			return false;
  404ad4:	2300      	movs	r3, #0
  404ad6:	e026      	b.n	404b26 <uhi_cdc_rx_update+0x112>
		}
	} else {
		if (line->sof == uhd_get_frame_number()) {
  404ad8:	687b      	ldr	r3, [r7, #4]
  404ada:	885c      	ldrh	r4, [r3, #2]
  404adc:	4b19      	ldr	r3, [pc, #100]	; (404b44 <uhi_cdc_rx_update+0x130>)
  404ade:	4798      	blx	r3
  404ae0:	4603      	mov	r3, r0
  404ae2:	429c      	cmp	r4, r3
  404ae4:	d104      	bne.n	404af0 <uhi_cdc_rx_update+0xdc>
			cpu_irq_restore(flags);
  404ae6:	6938      	ldr	r0, [r7, #16]
  404ae8:	4b12      	ldr	r3, [pc, #72]	; (404b34 <uhi_cdc_rx_update+0x120>)
  404aea:	4798      	blx	r3
			return false;
  404aec:	2300      	movs	r3, #0
  404aee:	e01a      	b.n	404b26 <uhi_cdc_rx_update+0x112>
		}
	}

	// Start transfer on empty buffer
	line->b_trans_ongoing = true;
  404af0:	687b      	ldr	r3, [r7, #4]
  404af2:	2201      	movs	r2, #1
  404af4:	705a      	strb	r2, [r3, #1]
	cpu_irq_restore(flags);
  404af6:	6938      	ldr	r0, [r7, #16]
  404af8:	4b0e      	ldr	r3, [pc, #56]	; (404b34 <uhi_cdc_rx_update+0x120>)
  404afa:	4798      	blx	r3

	return uhd_ep_run(
		uhi_cdc_dev.dev->address,
  404afc:	4b0f      	ldr	r3, [pc, #60]	; (404b3c <uhi_cdc_rx_update+0x128>)
  404afe:	681b      	ldr	r3, [r3, #0]

	// Start transfer on empty buffer
	line->b_trans_ongoing = true;
	cpu_irq_restore(flags);

	return uhd_ep_run(
  404b00:	7c99      	ldrb	r1, [r3, #18]
  404b02:	687b      	ldr	r3, [r7, #4]
  404b04:	781a      	ldrb	r2, [r3, #0]
  404b06:	697b      	ldr	r3, [r7, #20]
  404b08:	685c      	ldr	r4, [r3, #4]
		uhi_cdc_dev.dev->address,
		line->ep_data,
		true,
		buf_nosel->ptr,
		line->buffer_size,
  404b0a:	687b      	ldr	r3, [r7, #4]
  404b0c:	88db      	ldrh	r3, [r3, #6]

	// Start transfer on empty buffer
	line->b_trans_ongoing = true;
	cpu_irq_restore(flags);

	return uhd_ep_run(
  404b0e:	9300      	str	r3, [sp, #0]
  404b10:	230a      	movs	r3, #10
  404b12:	9301      	str	r3, [sp, #4]
  404b14:	4b0c      	ldr	r3, [pc, #48]	; (404b48 <uhi_cdc_rx_update+0x134>)
  404b16:	9302      	str	r3, [sp, #8]
  404b18:	4608      	mov	r0, r1
  404b1a:	4611      	mov	r1, r2
  404b1c:	2201      	movs	r2, #1
  404b1e:	4623      	mov	r3, r4
  404b20:	4c0a      	ldr	r4, [pc, #40]	; (404b4c <uhi_cdc_rx_update+0x138>)
  404b22:	47a0      	blx	r4
  404b24:	4603      	mov	r3, r0
		true,
		buf_nosel->ptr,
		line->buffer_size,
		10,
		uhi_cdc_rx_received);
}
  404b26:	4618      	mov	r0, r3
  404b28:	371c      	adds	r7, #28
  404b2a:	46bd      	mov	sp, r7
  404b2c:	bd90      	pop	{r4, r7, pc}
  404b2e:	bf00      	nop
  404b30:	00404265 	.word	0x00404265
  404b34:	004042bd 	.word	0x004042bd
  404b38:	00403929 	.word	0x00403929
  404b3c:	200194b4 	.word	0x200194b4
  404b40:	00408281 	.word	0x00408281
  404b44:	0040826d 	.word	0x0040826d
  404b48:	00404b51 	.word	0x00404b51
  404b4c:	004085b1 	.word	0x004085b1

00404b50 <uhi_cdc_rx_received>:
static void uhi_cdc_rx_received(
		usb_add_t add,
		usb_ep_t ep,
		uhd_trans_status_t status,
		iram_size_t nb_transferred)
{
  404b50:	b580      	push	{r7, lr}
  404b52:	b086      	sub	sp, #24
  404b54:	af00      	add	r7, sp, #0
  404b56:	603b      	str	r3, [r7, #0]
  404b58:	4603      	mov	r3, r0
  404b5a:	71fb      	strb	r3, [r7, #7]
  404b5c:	460b      	mov	r3, r1
  404b5e:	71bb      	strb	r3, [r7, #6]
  404b60:	4613      	mov	r3, r2
  404b62:	717b      	strb	r3, [r7, #5]
	uint8_t port = 0;
  404b64:	2300      	movs	r3, #0
  404b66:	75fb      	strb	r3, [r7, #23]
	uhi_cdc_buf_t *buf;
	UNUSED(add);

	// Search port corresponding at endpoint
	while (1) {
		ptr_port = uhi_cdc_get_port(port++);
  404b68:	7dfb      	ldrb	r3, [r7, #23]
  404b6a:	1c5a      	adds	r2, r3, #1
  404b6c:	75fa      	strb	r2, [r7, #23]
  404b6e:	4618      	mov	r0, r3
  404b70:	4b2a      	ldr	r3, [pc, #168]	; (404c1c <uhi_cdc_rx_received+0xcc>)
  404b72:	4798      	blx	r3
  404b74:	6138      	str	r0, [r7, #16]
		if (ptr_port == NULL) {
  404b76:	693b      	ldr	r3, [r7, #16]
  404b78:	2b00      	cmp	r3, #0
  404b7a:	d100      	bne.n	404b7e <uhi_cdc_rx_received+0x2e>
			return;
  404b7c:	e04a      	b.n	404c14 <uhi_cdc_rx_received+0xc4>
		}
		line = &ptr_port->line_rx;
  404b7e:	693b      	ldr	r3, [r7, #16]
  404b80:	330c      	adds	r3, #12
  404b82:	60fb      	str	r3, [r7, #12]
		if (ep == line->ep_data) {
  404b84:	68fb      	ldr	r3, [r7, #12]
  404b86:	781b      	ldrb	r3, [r3, #0]
  404b88:	79ba      	ldrb	r2, [r7, #6]
  404b8a:	429a      	cmp	r2, r3
  404b8c:	d104      	bne.n	404b98 <uhi_cdc_rx_received+0x48>
			break; // Port found
  404b8e:	bf00      	nop
		}
	}

	if ((UHD_TRANS_TIMEOUT == status) && nb_transferred) {
  404b90:	797b      	ldrb	r3, [r7, #5]
  404b92:	2b07      	cmp	r3, #7
  404b94:	d105      	bne.n	404ba2 <uhi_cdc_rx_received+0x52>
  404b96:	e000      	b.n	404b9a <uhi_cdc_rx_received+0x4a>
		}
		line = &ptr_port->line_rx;
		if (ep == line->ep_data) {
			break; // Port found
		}
	}
  404b98:	e7e6      	b.n	404b68 <uhi_cdc_rx_received+0x18>

	if ((UHD_TRANS_TIMEOUT == status) && nb_transferred) {
  404b9a:	683b      	ldr	r3, [r7, #0]
  404b9c:	2b00      	cmp	r3, #0
  404b9e:	d000      	beq.n	404ba2 <uhi_cdc_rx_received+0x52>
  404ba0:	e006      	b.n	404bb0 <uhi_cdc_rx_received+0x60>
		// Save transfered
	}
	else if (UHD_TRANS_NOERROR != status) {
  404ba2:	797b      	ldrb	r3, [r7, #5]
  404ba4:	2b00      	cmp	r3, #0
  404ba6:	d003      	beq.n	404bb0 <uhi_cdc_rx_received+0x60>
		// Abort transfer
		line->b_trans_ongoing  = false;
  404ba8:	68fb      	ldr	r3, [r7, #12]
  404baa:	2200      	movs	r2, #0
  404bac:	705a      	strb	r2, [r3, #1]
		return;
  404bae:	e031      	b.n	404c14 <uhi_cdc_rx_received+0xc4>
	}

	// Update SOF tag, if it is a short packet
	if (nb_transferred != line->buffer_size) {
  404bb0:	68fb      	ldr	r3, [r7, #12]
  404bb2:	88db      	ldrh	r3, [r3, #6]
  404bb4:	461a      	mov	r2, r3
  404bb6:	683b      	ldr	r3, [r7, #0]
  404bb8:	429a      	cmp	r2, r3
  404bba:	d011      	beq.n	404be0 <uhi_cdc_rx_received+0x90>
		if (uhi_cdc_dev.dev->speed == UHD_SPEED_HIGH) {
  404bbc:	4b18      	ldr	r3, [pc, #96]	; (404c20 <uhi_cdc_rx_received+0xd0>)
  404bbe:	681b      	ldr	r3, [r3, #0]
  404bc0:	7cdb      	ldrb	r3, [r3, #19]
  404bc2:	2b02      	cmp	r3, #2
  404bc4:	d106      	bne.n	404bd4 <uhi_cdc_rx_received+0x84>
			line->sof = uhd_get_microframe_number();
  404bc6:	4b17      	ldr	r3, [pc, #92]	; (404c24 <uhi_cdc_rx_received+0xd4>)
  404bc8:	4798      	blx	r3
  404bca:	4603      	mov	r3, r0
  404bcc:	461a      	mov	r2, r3
  404bce:	68fb      	ldr	r3, [r7, #12]
  404bd0:	805a      	strh	r2, [r3, #2]
  404bd2:	e005      	b.n	404be0 <uhi_cdc_rx_received+0x90>
		} else {
			line->sof = uhd_get_frame_number();
  404bd4:	4b14      	ldr	r3, [pc, #80]	; (404c28 <uhi_cdc_rx_received+0xd8>)
  404bd6:	4798      	blx	r3
  404bd8:	4603      	mov	r3, r0
  404bda:	461a      	mov	r2, r3
  404bdc:	68fb      	ldr	r3, [r7, #12]
  404bde:	805a      	strh	r2, [r3, #2]
		}
	}

	// Update buffer structure
	buf = &line->buffer[(line->buf_sel == 0) ? 1 : 0];
  404be0:	68fb      	ldr	r3, [r7, #12]
  404be2:	791b      	ldrb	r3, [r3, #4]
  404be4:	b2db      	uxtb	r3, r3
  404be6:	2b00      	cmp	r3, #0
  404be8:	bf0c      	ite	eq
  404bea:	2301      	moveq	r3, #1
  404bec:	2300      	movne	r3, #0
  404bee:	b2db      	uxtb	r3, r3
  404bf0:	3301      	adds	r3, #1
  404bf2:	00db      	lsls	r3, r3, #3
  404bf4:	68fa      	ldr	r2, [r7, #12]
  404bf6:	4413      	add	r3, r2
  404bf8:	60bb      	str	r3, [r7, #8]
	buf->pos = 0;
  404bfa:	68bb      	ldr	r3, [r7, #8]
  404bfc:	2200      	movs	r2, #0
  404bfe:	801a      	strh	r2, [r3, #0]
	buf->nb = nb_transferred;
  404c00:	683b      	ldr	r3, [r7, #0]
  404c02:	b29a      	uxth	r2, r3
  404c04:	68bb      	ldr	r3, [r7, #8]
  404c06:	805a      	strh	r2, [r3, #2]
	line->b_trans_ongoing  = false;
  404c08:	68fb      	ldr	r3, [r7, #12]
  404c0a:	2200      	movs	r2, #0
  404c0c:	705a      	strb	r2, [r3, #1]

	// Manage new transfer
	uhi_cdc_rx_update(line);
  404c0e:	68f8      	ldr	r0, [r7, #12]
  404c10:	4b06      	ldr	r3, [pc, #24]	; (404c2c <uhi_cdc_rx_received+0xdc>)
  404c12:	4798      	blx	r3
}
  404c14:	3718      	adds	r7, #24
  404c16:	46bd      	mov	sp, r7
  404c18:	bd80      	pop	{r7, pc}
  404c1a:	bf00      	nop
  404c1c:	004048c9 	.word	0x004048c9
  404c20:	200194b4 	.word	0x200194b4
  404c24:	00408281 	.word	0x00408281
  404c28:	0040826d 	.word	0x0040826d
  404c2c:	00404a15 	.word	0x00404a15

00404c30 <uhi_cdc_tx_update>:


static bool uhi_cdc_tx_update(uhi_cdc_line_t *line)
{
  404c30:	b590      	push	{r4, r7, lr}
  404c32:	b089      	sub	sp, #36	; 0x24
  404c34:	af04      	add	r7, sp, #16
  404c36:	6078      	str	r0, [r7, #4]
	irqflags_t flags;
	uhi_cdc_buf_t *buf;

	flags = cpu_irq_save();
  404c38:	4b32      	ldr	r3, [pc, #200]	; (404d04 <uhi_cdc_tx_update+0xd4>)
  404c3a:	4798      	blx	r3
  404c3c:	60f8      	str	r0, [r7, #12]
	// Check if transfer is already on-going
	if (line->b_trans_ongoing) {
  404c3e:	687b      	ldr	r3, [r7, #4]
  404c40:	785b      	ldrb	r3, [r3, #1]
  404c42:	2b00      	cmp	r3, #0
  404c44:	d004      	beq.n	404c50 <uhi_cdc_tx_update+0x20>
		cpu_irq_restore(flags);
  404c46:	68f8      	ldr	r0, [r7, #12]
  404c48:	4b2f      	ldr	r3, [pc, #188]	; (404d08 <uhi_cdc_tx_update+0xd8>)
  404c4a:	4798      	blx	r3
		return false;
  404c4c:	2300      	movs	r3, #0
  404c4e:	e054      	b.n	404cfa <uhi_cdc_tx_update+0xca>
	}
	// Check if transfer must be delayed after the next SOF
	if (uhi_cdc_dev.dev->speed == UHD_SPEED_HIGH) {
  404c50:	4b2e      	ldr	r3, [pc, #184]	; (404d0c <uhi_cdc_tx_update+0xdc>)
  404c52:	681b      	ldr	r3, [r3, #0]
  404c54:	7cdb      	ldrb	r3, [r3, #19]
  404c56:	2b02      	cmp	r3, #2
  404c58:	d10b      	bne.n	404c72 <uhi_cdc_tx_update+0x42>
		if (line->sof == uhd_get_microframe_number()) {
  404c5a:	687b      	ldr	r3, [r7, #4]
  404c5c:	885c      	ldrh	r4, [r3, #2]
  404c5e:	4b2c      	ldr	r3, [pc, #176]	; (404d10 <uhi_cdc_tx_update+0xe0>)
  404c60:	4798      	blx	r3
  404c62:	4603      	mov	r3, r0
  404c64:	429c      	cmp	r4, r3
  404c66:	d110      	bne.n	404c8a <uhi_cdc_tx_update+0x5a>
			cpu_irq_restore(flags);
  404c68:	68f8      	ldr	r0, [r7, #12]
  404c6a:	4b27      	ldr	r3, [pc, #156]	; (404d08 <uhi_cdc_tx_update+0xd8>)
  404c6c:	4798      	blx	r3
			return false;
  404c6e:	2300      	movs	r3, #0
  404c70:	e043      	b.n	404cfa <uhi_cdc_tx_update+0xca>
		}
	} else {
		if (line->sof == uhd_get_frame_number()) {
  404c72:	687b      	ldr	r3, [r7, #4]
  404c74:	885c      	ldrh	r4, [r3, #2]
  404c76:	4b27      	ldr	r3, [pc, #156]	; (404d14 <uhi_cdc_tx_update+0xe4>)
  404c78:	4798      	blx	r3
  404c7a:	4603      	mov	r3, r0
  404c7c:	429c      	cmp	r4, r3
  404c7e:	d104      	bne.n	404c8a <uhi_cdc_tx_update+0x5a>
			cpu_irq_restore(flags);
  404c80:	68f8      	ldr	r0, [r7, #12]
  404c82:	4b21      	ldr	r3, [pc, #132]	; (404d08 <uhi_cdc_tx_update+0xd8>)
  404c84:	4798      	blx	r3
			return false;
  404c86:	2300      	movs	r3, #0
  404c88:	e037      	b.n	404cfa <uhi_cdc_tx_update+0xca>
		}
	}

	// Send the current buffer if not empty
	buf = &line->buffer[line->buf_sel];
  404c8a:	687b      	ldr	r3, [r7, #4]
  404c8c:	791b      	ldrb	r3, [r3, #4]
  404c8e:	b2db      	uxtb	r3, r3
  404c90:	3301      	adds	r3, #1
  404c92:	00db      	lsls	r3, r3, #3
  404c94:	687a      	ldr	r2, [r7, #4]
  404c96:	4413      	add	r3, r2
  404c98:	60bb      	str	r3, [r7, #8]
	if (buf->nb == 0) {
  404c9a:	68bb      	ldr	r3, [r7, #8]
  404c9c:	885b      	ldrh	r3, [r3, #2]
  404c9e:	2b00      	cmp	r3, #0
  404ca0:	d104      	bne.n	404cac <uhi_cdc_tx_update+0x7c>
		cpu_irq_restore(flags);
  404ca2:	68f8      	ldr	r0, [r7, #12]
  404ca4:	4b18      	ldr	r3, [pc, #96]	; (404d08 <uhi_cdc_tx_update+0xd8>)
  404ca6:	4798      	blx	r3
		return false;
  404ca8:	2300      	movs	r3, #0
  404caa:	e026      	b.n	404cfa <uhi_cdc_tx_update+0xca>
	}

	// Change current buffer to next buffer
	line->buf_sel = (line->buf_sel == 0)? 1 : 0;
  404cac:	687b      	ldr	r3, [r7, #4]
  404cae:	791b      	ldrb	r3, [r3, #4]
  404cb0:	b2db      	uxtb	r3, r3
  404cb2:	2b00      	cmp	r3, #0
  404cb4:	bf0c      	ite	eq
  404cb6:	2301      	moveq	r3, #1
  404cb8:	2300      	movne	r3, #0
  404cba:	b2db      	uxtb	r3, r3
  404cbc:	461a      	mov	r2, r3
  404cbe:	687b      	ldr	r3, [r7, #4]
  404cc0:	711a      	strb	r2, [r3, #4]

	// Start transfer
	line->b_trans_ongoing = true;
  404cc2:	687b      	ldr	r3, [r7, #4]
  404cc4:	2201      	movs	r2, #1
  404cc6:	705a      	strb	r2, [r3, #1]
	cpu_irq_restore(flags);
  404cc8:	68f8      	ldr	r0, [r7, #12]
  404cca:	4b0f      	ldr	r3, [pc, #60]	; (404d08 <uhi_cdc_tx_update+0xd8>)
  404ccc:	4798      	blx	r3

	return uhd_ep_run(
		uhi_cdc_dev.dev->address,
  404cce:	4b0f      	ldr	r3, [pc, #60]	; (404d0c <uhi_cdc_tx_update+0xdc>)
  404cd0:	681b      	ldr	r3, [r3, #0]

	// Start transfer
	line->b_trans_ongoing = true;
	cpu_irq_restore(flags);

	return uhd_ep_run(
  404cd2:	7c99      	ldrb	r1, [r3, #18]
  404cd4:	687b      	ldr	r3, [r7, #4]
  404cd6:	781a      	ldrb	r2, [r3, #0]
  404cd8:	68bb      	ldr	r3, [r7, #8]
  404cda:	685c      	ldr	r4, [r3, #4]
		uhi_cdc_dev.dev->address,
		line->ep_data,
		true,
		buf->ptr,
		buf->nb,
  404cdc:	68bb      	ldr	r3, [r7, #8]
  404cde:	885b      	ldrh	r3, [r3, #2]

	// Start transfer
	line->b_trans_ongoing = true;
	cpu_irq_restore(flags);

	return uhd_ep_run(
  404ce0:	9300      	str	r3, [sp, #0]
  404ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  404ce6:	9301      	str	r3, [sp, #4]
  404ce8:	4b0b      	ldr	r3, [pc, #44]	; (404d18 <uhi_cdc_tx_update+0xe8>)
  404cea:	9302      	str	r3, [sp, #8]
  404cec:	4608      	mov	r0, r1
  404cee:	4611      	mov	r1, r2
  404cf0:	2201      	movs	r2, #1
  404cf2:	4623      	mov	r3, r4
  404cf4:	4c09      	ldr	r4, [pc, #36]	; (404d1c <uhi_cdc_tx_update+0xec>)
  404cf6:	47a0      	blx	r4
  404cf8:	4603      	mov	r3, r0
		true,
		buf->ptr,
		buf->nb,
		1000,
		uhi_cdc_tx_send);
}
  404cfa:	4618      	mov	r0, r3
  404cfc:	3714      	adds	r7, #20
  404cfe:	46bd      	mov	sp, r7
  404d00:	bd90      	pop	{r4, r7, pc}
  404d02:	bf00      	nop
  404d04:	00404265 	.word	0x00404265
  404d08:	004042bd 	.word	0x004042bd
  404d0c:	200194b4 	.word	0x200194b4
  404d10:	00408281 	.word	0x00408281
  404d14:	0040826d 	.word	0x0040826d
  404d18:	00404d21 	.word	0x00404d21
  404d1c:	004085b1 	.word	0x004085b1

00404d20 <uhi_cdc_tx_send>:
static void uhi_cdc_tx_send(
		usb_add_t add,
		usb_ep_t ep,
		uhd_trans_status_t status,
		iram_size_t nb_transferred)
{
  404d20:	b580      	push	{r7, lr}
  404d22:	b088      	sub	sp, #32
  404d24:	af00      	add	r7, sp, #0
  404d26:	603b      	str	r3, [r7, #0]
  404d28:	4603      	mov	r3, r0
  404d2a:	71fb      	strb	r3, [r7, #7]
  404d2c:	460b      	mov	r3, r1
  404d2e:	71bb      	strb	r3, [r7, #6]
  404d30:	4613      	mov	r3, r2
  404d32:	717b      	strb	r3, [r7, #5]
	uint8_t port = 0;
  404d34:	2300      	movs	r3, #0
  404d36:	77fb      	strb	r3, [r7, #31]
	uhi_cdc_line_t *line;
	uhi_cdc_buf_t *buf;
	irqflags_t flags;
	UNUSED(add);

	flags = cpu_irq_save();
  404d38:	4b2c      	ldr	r3, [pc, #176]	; (404dec <uhi_cdc_tx_send+0xcc>)
  404d3a:	4798      	blx	r3
  404d3c:	61b8      	str	r0, [r7, #24]

	// Search port corresponding at endpoint
	while (1) {
		ptr_port = uhi_cdc_get_port(port++);
  404d3e:	7ffb      	ldrb	r3, [r7, #31]
  404d40:	1c5a      	adds	r2, r3, #1
  404d42:	77fa      	strb	r2, [r7, #31]
  404d44:	4618      	mov	r0, r3
  404d46:	4b2a      	ldr	r3, [pc, #168]	; (404df0 <uhi_cdc_tx_send+0xd0>)
  404d48:	4798      	blx	r3
  404d4a:	6178      	str	r0, [r7, #20]
		if (ptr_port == NULL) {
  404d4c:	697b      	ldr	r3, [r7, #20]
  404d4e:	2b00      	cmp	r3, #0
  404d50:	d103      	bne.n	404d5a <uhi_cdc_tx_send+0x3a>
			cpu_irq_restore(flags);
  404d52:	69b8      	ldr	r0, [r7, #24]
  404d54:	4b27      	ldr	r3, [pc, #156]	; (404df4 <uhi_cdc_tx_send+0xd4>)
  404d56:	4798      	blx	r3
			return;
  404d58:	e045      	b.n	404de6 <uhi_cdc_tx_send+0xc6>
		}
		line = &ptr_port->line_tx;
  404d5a:	697b      	ldr	r3, [r7, #20]
  404d5c:	3324      	adds	r3, #36	; 0x24
  404d5e:	613b      	str	r3, [r7, #16]
		if (ep == line->ep_data) {
  404d60:	693b      	ldr	r3, [r7, #16]
  404d62:	781b      	ldrb	r3, [r3, #0]
  404d64:	79ba      	ldrb	r2, [r7, #6]
  404d66:	429a      	cmp	r2, r3
  404d68:	d104      	bne.n	404d74 <uhi_cdc_tx_send+0x54>
			break; // Port found
  404d6a:	bf00      	nop
		}
	}

	if (UHD_TRANS_NOERROR != status) {
  404d6c:	797b      	ldrb	r3, [r7, #5]
  404d6e:	2b00      	cmp	r3, #0
  404d70:	d008      	beq.n	404d84 <uhi_cdc_tx_send+0x64>
  404d72:	e000      	b.n	404d76 <uhi_cdc_tx_send+0x56>
		}
		line = &ptr_port->line_tx;
		if (ep == line->ep_data) {
			break; // Port found
		}
	}
  404d74:	e7e3      	b.n	404d3e <uhi_cdc_tx_send+0x1e>

	if (UHD_TRANS_NOERROR != status) {
		// Abort transfer
		line->b_trans_ongoing  = false;
  404d76:	693b      	ldr	r3, [r7, #16]
  404d78:	2200      	movs	r2, #0
  404d7a:	705a      	strb	r2, [r3, #1]
		cpu_irq_restore(flags);
  404d7c:	69b8      	ldr	r0, [r7, #24]
  404d7e:	4b1d      	ldr	r3, [pc, #116]	; (404df4 <uhi_cdc_tx_send+0xd4>)
  404d80:	4798      	blx	r3
		return;
  404d82:	e030      	b.n	404de6 <uhi_cdc_tx_send+0xc6>
	}

	// Update SOF tag, if it is a short packet
	if (nb_transferred != line->buffer_size) {
  404d84:	693b      	ldr	r3, [r7, #16]
  404d86:	88db      	ldrh	r3, [r3, #6]
  404d88:	461a      	mov	r2, r3
  404d8a:	683b      	ldr	r3, [r7, #0]
  404d8c:	429a      	cmp	r2, r3
  404d8e:	d011      	beq.n	404db4 <uhi_cdc_tx_send+0x94>
		if (uhi_cdc_dev.dev->speed == UHD_SPEED_HIGH) {
  404d90:	4b19      	ldr	r3, [pc, #100]	; (404df8 <uhi_cdc_tx_send+0xd8>)
  404d92:	681b      	ldr	r3, [r3, #0]
  404d94:	7cdb      	ldrb	r3, [r3, #19]
  404d96:	2b02      	cmp	r3, #2
  404d98:	d106      	bne.n	404da8 <uhi_cdc_tx_send+0x88>
			line->sof = uhd_get_microframe_number();
  404d9a:	4b18      	ldr	r3, [pc, #96]	; (404dfc <uhi_cdc_tx_send+0xdc>)
  404d9c:	4798      	blx	r3
  404d9e:	4603      	mov	r3, r0
  404da0:	461a      	mov	r2, r3
  404da2:	693b      	ldr	r3, [r7, #16]
  404da4:	805a      	strh	r2, [r3, #2]
  404da6:	e005      	b.n	404db4 <uhi_cdc_tx_send+0x94>
		} else {
			line->sof = uhd_get_frame_number();
  404da8:	4b15      	ldr	r3, [pc, #84]	; (404e00 <uhi_cdc_tx_send+0xe0>)
  404daa:	4798      	blx	r3
  404dac:	4603      	mov	r3, r0
  404dae:	461a      	mov	r2, r3
  404db0:	693b      	ldr	r3, [r7, #16]
  404db2:	805a      	strh	r2, [r3, #2]
		}
	}

	// Update buffer structure
	buf = &line->buffer[(line->buf_sel == 0) ? 1 : 0 ];
  404db4:	693b      	ldr	r3, [r7, #16]
  404db6:	791b      	ldrb	r3, [r3, #4]
  404db8:	b2db      	uxtb	r3, r3
  404dba:	2b00      	cmp	r3, #0
  404dbc:	bf0c      	ite	eq
  404dbe:	2301      	moveq	r3, #1
  404dc0:	2300      	movne	r3, #0
  404dc2:	b2db      	uxtb	r3, r3
  404dc4:	3301      	adds	r3, #1
  404dc6:	00db      	lsls	r3, r3, #3
  404dc8:	693a      	ldr	r2, [r7, #16]
  404dca:	4413      	add	r3, r2
  404dcc:	60fb      	str	r3, [r7, #12]
	buf->nb = 0;
  404dce:	68fb      	ldr	r3, [r7, #12]
  404dd0:	2200      	movs	r2, #0
  404dd2:	805a      	strh	r2, [r3, #2]
	line->b_trans_ongoing  = false;
  404dd4:	693b      	ldr	r3, [r7, #16]
  404dd6:	2200      	movs	r2, #0
  404dd8:	705a      	strb	r2, [r3, #1]
	cpu_irq_restore(flags);
  404dda:	69b8      	ldr	r0, [r7, #24]
  404ddc:	4b05      	ldr	r3, [pc, #20]	; (404df4 <uhi_cdc_tx_send+0xd4>)
  404dde:	4798      	blx	r3

	// Manage new transfer
	uhi_cdc_tx_update(line);
  404de0:	6938      	ldr	r0, [r7, #16]
  404de2:	4b08      	ldr	r3, [pc, #32]	; (404e04 <uhi_cdc_tx_send+0xe4>)
  404de4:	4798      	blx	r3
}
  404de6:	3720      	adds	r7, #32
  404de8:	46bd      	mov	sp, r7
  404dea:	bd80      	pop	{r7, pc}
  404dec:	00404265 	.word	0x00404265
  404df0:	004048c9 	.word	0x004048c9
  404df4:	004042bd 	.word	0x004042bd
  404df8:	200194b4 	.word	0x200194b4
  404dfc:	00408281 	.word	0x00408281
  404e00:	0040826d 	.word	0x0040826d
  404e04:	00404c31 	.word	0x00404c31

00404e08 <uhi_cdc_open>:
//@}


bool uhi_cdc_open(uint8_t port, usb_cdc_line_coding_t *configuration)
{
  404e08:	b580      	push	{r7, lr}
  404e0a:	b082      	sub	sp, #8
  404e0c:	af00      	add	r7, sp, #0
  404e0e:	4603      	mov	r3, r0
  404e10:	6039      	str	r1, [r7, #0]
  404e12:	71fb      	strb	r3, [r7, #7]
	// Send configuration
	if (!uhi_cdc_set_conf(port, configuration)) {
  404e14:	79fb      	ldrb	r3, [r7, #7]
  404e16:	4618      	mov	r0, r3
  404e18:	6839      	ldr	r1, [r7, #0]
  404e1a:	4b0e      	ldr	r3, [pc, #56]	; (404e54 <uhi_cdc_open+0x4c>)
  404e1c:	4798      	blx	r3
  404e1e:	4603      	mov	r3, r0
  404e20:	f083 0301 	eor.w	r3, r3, #1
  404e24:	b2db      	uxtb	r3, r3
  404e26:	2b00      	cmp	r3, #0
  404e28:	d001      	beq.n	404e2e <uhi_cdc_open+0x26>
		return false;
  404e2a:	2300      	movs	r3, #0
  404e2c:	e00d      	b.n	404e4a <uhi_cdc_open+0x42>
	}
	// Send DTR
	
	if (!uhi_cdc_set_ctrl_line(port, CDC_CTRL_SIGNAL_DTE_PRESENT)) {
  404e2e:	79fb      	ldrb	r3, [r7, #7]
  404e30:	4618      	mov	r0, r3
  404e32:	2101      	movs	r1, #1
  404e34:	4b08      	ldr	r3, [pc, #32]	; (404e58 <uhi_cdc_open+0x50>)
  404e36:	4798      	blx	r3
  404e38:	4603      	mov	r3, r0
  404e3a:	f083 0301 	eor.w	r3, r3, #1
  404e3e:	b2db      	uxtb	r3, r3
  404e40:	2b00      	cmp	r3, #0
  404e42:	d001      	beq.n	404e48 <uhi_cdc_open+0x40>
		return false;
  404e44:	2300      	movs	r3, #0
  404e46:	e000      	b.n	404e4a <uhi_cdc_open+0x42>
	}
	return true;
  404e48:	2301      	movs	r3, #1
}
  404e4a:	4618      	mov	r0, r3
  404e4c:	3708      	adds	r7, #8
  404e4e:	46bd      	mov	sp, r7
  404e50:	bd80      	pop	{r7, pc}
  404e52:	bf00      	nop
  404e54:	0040490d 	.word	0x0040490d
  404e58:	00404995 	.word	0x00404995

00404e5c <uhi_cdc_is_rx_ready>:
	// Clear DTR
	uhi_cdc_set_ctrl_line(port, 0);
}

bool uhi_cdc_is_rx_ready(uint8_t port)
{
  404e5c:	b580      	push	{r7, lr}
  404e5e:	b082      	sub	sp, #8
  404e60:	af00      	add	r7, sp, #0
  404e62:	4603      	mov	r3, r0
  404e64:	71fb      	strb	r3, [r7, #7]
	return (0 != uhi_cdc_get_nb_received(port));
  404e66:	79fb      	ldrb	r3, [r7, #7]
  404e68:	4618      	mov	r0, r3
  404e6a:	4b06      	ldr	r3, [pc, #24]	; (404e84 <uhi_cdc_is_rx_ready+0x28>)
  404e6c:	4798      	blx	r3
  404e6e:	4603      	mov	r3, r0
  404e70:	2b00      	cmp	r3, #0
  404e72:	bf14      	ite	ne
  404e74:	2301      	movne	r3, #1
  404e76:	2300      	moveq	r3, #0
  404e78:	b2db      	uxtb	r3, r3
}
  404e7a:	4618      	mov	r0, r3
  404e7c:	3708      	adds	r7, #8
  404e7e:	46bd      	mov	sp, r7
  404e80:	bd80      	pop	{r7, pc}
  404e82:	bf00      	nop
  404e84:	00404e89 	.word	0x00404e89

00404e88 <uhi_cdc_get_nb_received>:

iram_size_t uhi_cdc_get_nb_received(uint8_t port)
{
  404e88:	b580      	push	{r7, lr}
  404e8a:	b084      	sub	sp, #16
  404e8c:	af00      	add	r7, sp, #0
  404e8e:	4603      	mov	r3, r0
  404e90:	71fb      	strb	r3, [r7, #7]
	uhi_cdc_port_t *ptr_port;
	uhi_cdc_buf_t *buf;

	// Select port
	ptr_port = uhi_cdc_get_port(port);
  404e92:	79fb      	ldrb	r3, [r7, #7]
  404e94:	4618      	mov	r0, r3
  404e96:	4b0d      	ldr	r3, [pc, #52]	; (404ecc <uhi_cdc_get_nb_received+0x44>)
  404e98:	4798      	blx	r3
  404e9a:	60f8      	str	r0, [r7, #12]
	if (ptr_port == NULL) {
  404e9c:	68fb      	ldr	r3, [r7, #12]
  404e9e:	2b00      	cmp	r3, #0
  404ea0:	d101      	bne.n	404ea6 <uhi_cdc_get_nb_received+0x1e>
		return false;
  404ea2:	2300      	movs	r3, #0
  404ea4:	e00e      	b.n	404ec4 <uhi_cdc_get_nb_received+0x3c>
	}

	// Check available data
	buf = &ptr_port->line_rx.buffer[ ptr_port->line_rx.buf_sel ];
  404ea6:	68fb      	ldr	r3, [r7, #12]
  404ea8:	7c1b      	ldrb	r3, [r3, #16]
  404eaa:	b2db      	uxtb	r3, r3
  404eac:	3302      	adds	r3, #2
  404eae:	00db      	lsls	r3, r3, #3
  404eb0:	68fa      	ldr	r2, [r7, #12]
  404eb2:	4413      	add	r3, r2
  404eb4:	3304      	adds	r3, #4
  404eb6:	60bb      	str	r3, [r7, #8]
	return (buf->nb - buf->pos);
  404eb8:	68bb      	ldr	r3, [r7, #8]
  404eba:	885b      	ldrh	r3, [r3, #2]
  404ebc:	461a      	mov	r2, r3
  404ebe:	68bb      	ldr	r3, [r7, #8]
  404ec0:	881b      	ldrh	r3, [r3, #0]
  404ec2:	1ad3      	subs	r3, r2, r3
}
  404ec4:	4618      	mov	r0, r3
  404ec6:	3710      	adds	r7, #16
  404ec8:	46bd      	mov	sp, r7
  404eca:	bd80      	pop	{r7, pc}
  404ecc:	004048c9 	.word	0x004048c9

00404ed0 <uhi_cdc_getc>:

int uhi_cdc_getc(uint8_t port)
{
  404ed0:	b580      	push	{r7, lr}
  404ed2:	b088      	sub	sp, #32
  404ed4:	af00      	add	r7, sp, #0
  404ed6:	4603      	mov	r3, r0
  404ed8:	71fb      	strb	r3, [r7, #7]
	uhi_cdc_port_t *ptr_port;
	uhi_cdc_line_t *line;
	uhi_cdc_buf_t *buf;
	int rx_data = 0;
  404eda:	2300      	movs	r3, #0
  404edc:	61fb      	str	r3, [r7, #28]
	bool b_databit_9;

	// Select port
	ptr_port = uhi_cdc_get_port(port);
  404ede:	79fb      	ldrb	r3, [r7, #7]
  404ee0:	4618      	mov	r0, r3
  404ee2:	4b27      	ldr	r3, [pc, #156]	; (404f80 <uhi_cdc_getc+0xb0>)
  404ee4:	4798      	blx	r3
  404ee6:	6178      	str	r0, [r7, #20]
	if (ptr_port == NULL) {
  404ee8:	697b      	ldr	r3, [r7, #20]
  404eea:	2b00      	cmp	r3, #0
  404eec:	d101      	bne.n	404ef2 <uhi_cdc_getc+0x22>
		return false;
  404eee:	2300      	movs	r3, #0
  404ef0:	e042      	b.n	404f78 <uhi_cdc_getc+0xa8>
	}
	line = &ptr_port->line_rx;
  404ef2:	697b      	ldr	r3, [r7, #20]
  404ef4:	330c      	adds	r3, #12
  404ef6:	613b      	str	r3, [r7, #16]

	b_databit_9 = (9 == ptr_port->conf.bDataBits);
  404ef8:	697b      	ldr	r3, [r7, #20]
  404efa:	799b      	ldrb	r3, [r3, #6]
  404efc:	2b09      	cmp	r3, #9
  404efe:	bf0c      	ite	eq
  404f00:	2301      	moveq	r3, #1
  404f02:	2300      	movne	r3, #0
  404f04:	76fb      	strb	r3, [r7, #27]

uhi_cdc_getc_process_one_byte:
	// Check available data
	buf = &line->buffer[line->buf_sel];
  404f06:	693b      	ldr	r3, [r7, #16]
  404f08:	791b      	ldrb	r3, [r3, #4]
  404f0a:	b2db      	uxtb	r3, r3
  404f0c:	3301      	adds	r3, #1
  404f0e:	00db      	lsls	r3, r3, #3
  404f10:	693a      	ldr	r2, [r7, #16]
  404f12:	4413      	add	r3, r2
  404f14:	60fb      	str	r3, [r7, #12]
	while (buf->pos >= buf->nb) {
  404f16:	bf00      	nop
  404f18:	68fb      	ldr	r3, [r7, #12]
  404f1a:	881a      	ldrh	r2, [r3, #0]
  404f1c:	68fb      	ldr	r3, [r7, #12]
  404f1e:	885b      	ldrh	r3, [r3, #2]
  404f20:	429a      	cmp	r2, r3
  404f22:	d30c      	bcc.n	404f3e <uhi_cdc_getc+0x6e>
		if (NULL == uhi_cdc_get_port(port)) {
  404f24:	79fb      	ldrb	r3, [r7, #7]
  404f26:	4618      	mov	r0, r3
  404f28:	4b15      	ldr	r3, [pc, #84]	; (404f80 <uhi_cdc_getc+0xb0>)
  404f2a:	4798      	blx	r3
  404f2c:	4603      	mov	r3, r0
  404f2e:	2b00      	cmp	r3, #0
  404f30:	d101      	bne.n	404f36 <uhi_cdc_getc+0x66>
			return 0;
  404f32:	2300      	movs	r3, #0
  404f34:	e020      	b.n	404f78 <uhi_cdc_getc+0xa8>
		}
		uhi_cdc_rx_update(line);
  404f36:	6938      	ldr	r0, [r7, #16]
  404f38:	4b12      	ldr	r3, [pc, #72]	; (404f84 <uhi_cdc_getc+0xb4>)
  404f3a:	4798      	blx	r3
		goto uhi_cdc_getc_process_one_byte;
  404f3c:	e7e3      	b.n	404f06 <uhi_cdc_getc+0x36>
	}

	// Read data
	rx_data |= buf->ptr[buf->pos];
  404f3e:	68fb      	ldr	r3, [r7, #12]
  404f40:	685b      	ldr	r3, [r3, #4]
  404f42:	68fa      	ldr	r2, [r7, #12]
  404f44:	8812      	ldrh	r2, [r2, #0]
  404f46:	4413      	add	r3, r2
  404f48:	781b      	ldrb	r3, [r3, #0]
  404f4a:	461a      	mov	r2, r3
  404f4c:	69fb      	ldr	r3, [r7, #28]
  404f4e:	4313      	orrs	r3, r2
  404f50:	61fb      	str	r3, [r7, #28]
	buf->pos++;
  404f52:	68fb      	ldr	r3, [r7, #12]
  404f54:	881b      	ldrh	r3, [r3, #0]
  404f56:	3301      	adds	r3, #1
  404f58:	b29a      	uxth	r2, r3
  404f5a:	68fb      	ldr	r3, [r7, #12]
  404f5c:	801a      	strh	r2, [r3, #0]

	uhi_cdc_rx_update(line);
  404f5e:	6938      	ldr	r0, [r7, #16]
  404f60:	4b08      	ldr	r3, [pc, #32]	; (404f84 <uhi_cdc_getc+0xb4>)
  404f62:	4798      	blx	r3

	if (b_databit_9) {
  404f64:	7efb      	ldrb	r3, [r7, #27]
  404f66:	2b00      	cmp	r3, #0
  404f68:	d005      	beq.n	404f76 <uhi_cdc_getc+0xa6>
		// Receive MSB
		b_databit_9 = false;
  404f6a:	2300      	movs	r3, #0
  404f6c:	76fb      	strb	r3, [r7, #27]
		rx_data = rx_data << 8;
  404f6e:	69fb      	ldr	r3, [r7, #28]
  404f70:	021b      	lsls	r3, r3, #8
  404f72:	61fb      	str	r3, [r7, #28]
		goto uhi_cdc_getc_process_one_byte;
  404f74:	e7c7      	b.n	404f06 <uhi_cdc_getc+0x36>
	}
	return rx_data;
  404f76:	69fb      	ldr	r3, [r7, #28]
}
  404f78:	4618      	mov	r0, r3
  404f7a:	3720      	adds	r7, #32
  404f7c:	46bd      	mov	sp, r7
  404f7e:	bd80      	pop	{r7, pc}
  404f80:	004048c9 	.word	0x004048c9
  404f84:	00404a15 	.word	0x00404a15

00404f88 <uhi_cdc_read_buf>:

iram_size_t uhi_cdc_read_buf(uint8_t port, void* buf, iram_size_t size)
{
  404f88:	b580      	push	{r7, lr}
  404f8a:	b088      	sub	sp, #32
  404f8c:	af00      	add	r7, sp, #0
  404f8e:	4603      	mov	r3, r0
  404f90:	60b9      	str	r1, [r7, #8]
  404f92:	607a      	str	r2, [r7, #4]
  404f94:	73fb      	strb	r3, [r7, #15]
	uhi_cdc_line_t *line;
	uhi_cdc_buf_t *cdc_buf;
	iram_size_t copy_nb;

	// Select port
	ptr_port = uhi_cdc_get_port(port);
  404f96:	7bfb      	ldrb	r3, [r7, #15]
  404f98:	4618      	mov	r0, r3
  404f9a:	4b2d      	ldr	r3, [pc, #180]	; (405050 <uhi_cdc_read_buf+0xc8>)
  404f9c:	4798      	blx	r3
  404f9e:	61b8      	str	r0, [r7, #24]
	if (ptr_port == NULL) {
  404fa0:	69bb      	ldr	r3, [r7, #24]
  404fa2:	2b00      	cmp	r3, #0
  404fa4:	d101      	bne.n	404faa <uhi_cdc_read_buf+0x22>
		return false;
  404fa6:	2300      	movs	r3, #0
  404fa8:	e04d      	b.n	405046 <uhi_cdc_read_buf+0xbe>
	}
	line = &ptr_port->line_rx;
  404faa:	69bb      	ldr	r3, [r7, #24]
  404fac:	330c      	adds	r3, #12
  404fae:	617b      	str	r3, [r7, #20]


uhi_cdc_read_buf_loop_wait:
	// Check available data
	cdc_buf = &line->buffer[line->buf_sel];
  404fb0:	697b      	ldr	r3, [r7, #20]
  404fb2:	791b      	ldrb	r3, [r3, #4]
  404fb4:	b2db      	uxtb	r3, r3
  404fb6:	3301      	adds	r3, #1
  404fb8:	00db      	lsls	r3, r3, #3
  404fba:	697a      	ldr	r2, [r7, #20]
  404fbc:	4413      	add	r3, r2
  404fbe:	613b      	str	r3, [r7, #16]
	while (cdc_buf->pos >= cdc_buf->nb) {
  404fc0:	bf00      	nop
  404fc2:	693b      	ldr	r3, [r7, #16]
  404fc4:	881a      	ldrh	r2, [r3, #0]
  404fc6:	693b      	ldr	r3, [r7, #16]
  404fc8:	885b      	ldrh	r3, [r3, #2]
  404fca:	429a      	cmp	r2, r3
  404fcc:	d30c      	bcc.n	404fe8 <uhi_cdc_read_buf+0x60>
		if (NULL == uhi_cdc_get_port(port)) {
  404fce:	7bfb      	ldrb	r3, [r7, #15]
  404fd0:	4618      	mov	r0, r3
  404fd2:	4b1f      	ldr	r3, [pc, #124]	; (405050 <uhi_cdc_read_buf+0xc8>)
  404fd4:	4798      	blx	r3
  404fd6:	4603      	mov	r3, r0
  404fd8:	2b00      	cmp	r3, #0
  404fda:	d101      	bne.n	404fe0 <uhi_cdc_read_buf+0x58>
			return 0;
  404fdc:	2300      	movs	r3, #0
  404fde:	e032      	b.n	405046 <uhi_cdc_read_buf+0xbe>
		}
		uhi_cdc_rx_update(line);
  404fe0:	6978      	ldr	r0, [r7, #20]
  404fe2:	4b1c      	ldr	r3, [pc, #112]	; (405054 <uhi_cdc_read_buf+0xcc>)
  404fe4:	4798      	blx	r3
		goto uhi_cdc_read_buf_loop_wait;
  404fe6:	e7e3      	b.n	404fb0 <uhi_cdc_read_buf+0x28>
	}

	// Read data
	copy_nb = cdc_buf->nb - cdc_buf->pos;
  404fe8:	693b      	ldr	r3, [r7, #16]
  404fea:	885b      	ldrh	r3, [r3, #2]
  404fec:	461a      	mov	r2, r3
  404fee:	693b      	ldr	r3, [r7, #16]
  404ff0:	881b      	ldrh	r3, [r3, #0]
  404ff2:	1ad3      	subs	r3, r2, r3
  404ff4:	61fb      	str	r3, [r7, #28]
	if (copy_nb > size) {
  404ff6:	69fa      	ldr	r2, [r7, #28]
  404ff8:	687b      	ldr	r3, [r7, #4]
  404ffa:	429a      	cmp	r2, r3
  404ffc:	d901      	bls.n	405002 <uhi_cdc_read_buf+0x7a>
		copy_nb = size;
  404ffe:	687b      	ldr	r3, [r7, #4]
  405000:	61fb      	str	r3, [r7, #28]
	}
	memcpy(buf, &cdc_buf->ptr[cdc_buf->pos], copy_nb);
  405002:	693b      	ldr	r3, [r7, #16]
  405004:	685b      	ldr	r3, [r3, #4]
  405006:	693a      	ldr	r2, [r7, #16]
  405008:	8812      	ldrh	r2, [r2, #0]
  40500a:	4413      	add	r3, r2
  40500c:	68b8      	ldr	r0, [r7, #8]
  40500e:	4619      	mov	r1, r3
  405010:	69fa      	ldr	r2, [r7, #28]
  405012:	4b11      	ldr	r3, [pc, #68]	; (405058 <uhi_cdc_read_buf+0xd0>)
  405014:	4798      	blx	r3
	cdc_buf->pos += copy_nb;
  405016:	693b      	ldr	r3, [r7, #16]
  405018:	881a      	ldrh	r2, [r3, #0]
  40501a:	69fb      	ldr	r3, [r7, #28]
  40501c:	b29b      	uxth	r3, r3
  40501e:	4413      	add	r3, r2
  405020:	b29a      	uxth	r2, r3
  405022:	693b      	ldr	r3, [r7, #16]
  405024:	801a      	strh	r2, [r3, #0]
	buf = (uint8_t*)buf + copy_nb;
  405026:	68ba      	ldr	r2, [r7, #8]
  405028:	69fb      	ldr	r3, [r7, #28]
  40502a:	4413      	add	r3, r2
  40502c:	60bb      	str	r3, [r7, #8]
	size -= copy_nb;
  40502e:	687a      	ldr	r2, [r7, #4]
  405030:	69fb      	ldr	r3, [r7, #28]
  405032:	1ad3      	subs	r3, r2, r3
  405034:	607b      	str	r3, [r7, #4]

	uhi_cdc_rx_update(line);
  405036:	6978      	ldr	r0, [r7, #20]
  405038:	4b06      	ldr	r3, [pc, #24]	; (405054 <uhi_cdc_read_buf+0xcc>)
  40503a:	4798      	blx	r3

	if (size) {
  40503c:	687b      	ldr	r3, [r7, #4]
  40503e:	2b00      	cmp	r3, #0
  405040:	d000      	beq.n	405044 <uhi_cdc_read_buf+0xbc>
		goto uhi_cdc_read_buf_loop_wait;
  405042:	e7b5      	b.n	404fb0 <uhi_cdc_read_buf+0x28>
	}
	return 0;
  405044:	2300      	movs	r3, #0
}
  405046:	4618      	mov	r0, r3
  405048:	3720      	adds	r7, #32
  40504a:	46bd      	mov	sp, r7
  40504c:	bd80      	pop	{r7, pc}
  40504e:	bf00      	nop
  405050:	004048c9 	.word	0x004048c9
  405054:	00404a15 	.word	0x00404a15
  405058:	0040a6e1 	.word	0x0040a6e1

0040505c <uhi_cdc_is_tx_ready>:


bool uhi_cdc_is_tx_ready(uint8_t port)
{
  40505c:	b580      	push	{r7, lr}
  40505e:	b084      	sub	sp, #16
  405060:	af00      	add	r7, sp, #0
  405062:	4603      	mov	r3, r0
  405064:	71fb      	strb	r3, [r7, #7]
	uhi_cdc_port_t *ptr_port;
	uhi_cdc_line_t *line;

	ptr_port = uhi_cdc_get_port(port);
  405066:	79fb      	ldrb	r3, [r7, #7]
  405068:	4618      	mov	r0, r3
  40506a:	4b0f      	ldr	r3, [pc, #60]	; (4050a8 <uhi_cdc_is_tx_ready+0x4c>)
  40506c:	4798      	blx	r3
  40506e:	60f8      	str	r0, [r7, #12]
	if (ptr_port == NULL) {
  405070:	68fb      	ldr	r3, [r7, #12]
  405072:	2b00      	cmp	r3, #0
  405074:	d101      	bne.n	40507a <uhi_cdc_is_tx_ready+0x1e>
		return false;
  405076:	2300      	movs	r3, #0
  405078:	e011      	b.n	40509e <uhi_cdc_is_tx_ready+0x42>
	}
	line = &ptr_port->line_tx;
  40507a:	68fb      	ldr	r3, [r7, #12]
  40507c:	3324      	adds	r3, #36	; 0x24
  40507e:	60bb      	str	r3, [r7, #8]

	return (line->buffer_size != line->buffer[line->buf_sel].nb);
  405080:	68bb      	ldr	r3, [r7, #8]
  405082:	88da      	ldrh	r2, [r3, #6]
  405084:	68bb      	ldr	r3, [r7, #8]
  405086:	791b      	ldrb	r3, [r3, #4]
  405088:	b2db      	uxtb	r3, r3
  40508a:	68b9      	ldr	r1, [r7, #8]
  40508c:	3301      	adds	r3, #1
  40508e:	00db      	lsls	r3, r3, #3
  405090:	440b      	add	r3, r1
  405092:	885b      	ldrh	r3, [r3, #2]
  405094:	429a      	cmp	r2, r3
  405096:	bf14      	ite	ne
  405098:	2301      	movne	r3, #1
  40509a:	2300      	moveq	r3, #0
  40509c:	b2db      	uxtb	r3, r3
}
  40509e:	4618      	mov	r0, r3
  4050a0:	3710      	adds	r7, #16
  4050a2:	46bd      	mov	sp, r7
  4050a4:	bd80      	pop	{r7, pc}
  4050a6:	bf00      	nop
  4050a8:	004048c9 	.word	0x004048c9

004050ac <uhi_cdc_putc>:


int uhi_cdc_putc(uint8_t port, int value)
{
  4050ac:	b580      	push	{r7, lr}
  4050ae:	b088      	sub	sp, #32
  4050b0:	af00      	add	r7, sp, #0
  4050b2:	4603      	mov	r3, r0
  4050b4:	6039      	str	r1, [r7, #0]
  4050b6:	71fb      	strb	r3, [r7, #7]
	uhi_cdc_line_t *line;
	uhi_cdc_buf_t *buf;
	bool b_databit_9;

	// Select port
	ptr_port = uhi_cdc_get_port(port);
  4050b8:	79fb      	ldrb	r3, [r7, #7]
  4050ba:	4618      	mov	r0, r3
  4050bc:	4b29      	ldr	r3, [pc, #164]	; (405164 <uhi_cdc_putc+0xb8>)
  4050be:	4798      	blx	r3
  4050c0:	61b8      	str	r0, [r7, #24]
	if (ptr_port == NULL) {
  4050c2:	69bb      	ldr	r3, [r7, #24]
  4050c4:	2b00      	cmp	r3, #0
  4050c6:	d101      	bne.n	4050cc <uhi_cdc_putc+0x20>
		return false;
  4050c8:	2300      	movs	r3, #0
  4050ca:	e046      	b.n	40515a <uhi_cdc_putc+0xae>
	}
	line = &ptr_port->line_tx;
  4050cc:	69bb      	ldr	r3, [r7, #24]
  4050ce:	3324      	adds	r3, #36	; 0x24
  4050d0:	617b      	str	r3, [r7, #20]

	b_databit_9 = (9 == ptr_port->conf.bDataBits);
  4050d2:	69bb      	ldr	r3, [r7, #24]
  4050d4:	799b      	ldrb	r3, [r3, #6]
  4050d6:	2b09      	cmp	r3, #9
  4050d8:	bf0c      	ite	eq
  4050da:	2301      	moveq	r3, #1
  4050dc:	2300      	movne	r3, #0
  4050de:	77fb      	strb	r3, [r7, #31]

uhi_cdc_putc_process_one_byte:
	// Check available space
	buf = &line->buffer[line->buf_sel];
  4050e0:	697b      	ldr	r3, [r7, #20]
  4050e2:	791b      	ldrb	r3, [r3, #4]
  4050e4:	b2db      	uxtb	r3, r3
  4050e6:	3301      	adds	r3, #1
  4050e8:	00db      	lsls	r3, r3, #3
  4050ea:	697a      	ldr	r2, [r7, #20]
  4050ec:	4413      	add	r3, r2
  4050ee:	613b      	str	r3, [r7, #16]
	while (line->buffer_size == buf->nb) {
  4050f0:	bf00      	nop
  4050f2:	697b      	ldr	r3, [r7, #20]
  4050f4:	88da      	ldrh	r2, [r3, #6]
  4050f6:	693b      	ldr	r3, [r7, #16]
  4050f8:	885b      	ldrh	r3, [r3, #2]
  4050fa:	429a      	cmp	r2, r3
  4050fc:	d109      	bne.n	405112 <uhi_cdc_putc+0x66>
		if (NULL == uhi_cdc_get_port(port)) {
  4050fe:	79fb      	ldrb	r3, [r7, #7]
  405100:	4618      	mov	r0, r3
  405102:	4b18      	ldr	r3, [pc, #96]	; (405164 <uhi_cdc_putc+0xb8>)
  405104:	4798      	blx	r3
  405106:	4603      	mov	r3, r0
  405108:	2b00      	cmp	r3, #0
  40510a:	d101      	bne.n	405110 <uhi_cdc_putc+0x64>
			return false;
  40510c:	2300      	movs	r3, #0
  40510e:	e024      	b.n	40515a <uhi_cdc_putc+0xae>
		}
		goto uhi_cdc_putc_process_one_byte;
  405110:	e7e6      	b.n	4050e0 <uhi_cdc_putc+0x34>
	}

	// Write value
	flags = cpu_irq_save();
  405112:	4b15      	ldr	r3, [pc, #84]	; (405168 <uhi_cdc_putc+0xbc>)
  405114:	4798      	blx	r3
  405116:	60f8      	str	r0, [r7, #12]
	buf = &line->buffer[line->buf_sel];
  405118:	697b      	ldr	r3, [r7, #20]
  40511a:	791b      	ldrb	r3, [r3, #4]
  40511c:	b2db      	uxtb	r3, r3
  40511e:	3301      	adds	r3, #1
  405120:	00db      	lsls	r3, r3, #3
  405122:	697a      	ldr	r2, [r7, #20]
  405124:	4413      	add	r3, r2
  405126:	613b      	str	r3, [r7, #16]
	buf->ptr[buf->nb++] = value;
  405128:	693b      	ldr	r3, [r7, #16]
  40512a:	685a      	ldr	r2, [r3, #4]
  40512c:	693b      	ldr	r3, [r7, #16]
  40512e:	885b      	ldrh	r3, [r3, #2]
  405130:	1c59      	adds	r1, r3, #1
  405132:	b288      	uxth	r0, r1
  405134:	6939      	ldr	r1, [r7, #16]
  405136:	8048      	strh	r0, [r1, #2]
  405138:	4413      	add	r3, r2
  40513a:	683a      	ldr	r2, [r7, #0]
  40513c:	b2d2      	uxtb	r2, r2
  40513e:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
  405140:	68f8      	ldr	r0, [r7, #12]
  405142:	4b0a      	ldr	r3, [pc, #40]	; (40516c <uhi_cdc_putc+0xc0>)
  405144:	4798      	blx	r3

	if (b_databit_9) {
  405146:	7ffb      	ldrb	r3, [r7, #31]
  405148:	2b00      	cmp	r3, #0
  40514a:	d005      	beq.n	405158 <uhi_cdc_putc+0xac>
		// Send MSB
		b_databit_9 = false;
  40514c:	2300      	movs	r3, #0
  40514e:	77fb      	strb	r3, [r7, #31]
		value = value >> 8;
  405150:	683b      	ldr	r3, [r7, #0]
  405152:	121b      	asrs	r3, r3, #8
  405154:	603b      	str	r3, [r7, #0]
		goto uhi_cdc_putc_process_one_byte;
  405156:	e7c3      	b.n	4050e0 <uhi_cdc_putc+0x34>
	}
	return true;
  405158:	2301      	movs	r3, #1
}
  40515a:	4618      	mov	r0, r3
  40515c:	3720      	adds	r7, #32
  40515e:	46bd      	mov	sp, r7
  405160:	bd80      	pop	{r7, pc}
  405162:	bf00      	nop
  405164:	004048c9 	.word	0x004048c9
  405168:	00404265 	.word	0x00404265
  40516c:	004042bd 	.word	0x004042bd

00405170 <uhi_cdc_write_buf>:

iram_size_t uhi_cdc_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  405170:	b580      	push	{r7, lr}
  405172:	b08a      	sub	sp, #40	; 0x28
  405174:	af00      	add	r7, sp, #0
  405176:	4603      	mov	r3, r0
  405178:	60b9      	str	r1, [r7, #8]
  40517a:	607a      	str	r2, [r7, #4]
  40517c:	73fb      	strb	r3, [r7, #15]
	uhi_cdc_line_t *line;
	uhi_cdc_buf_t *cdc_buf;
	iram_size_t copy_nb;

	// Select port
	ptr_port = uhi_cdc_get_port(port);
  40517e:	7bfb      	ldrb	r3, [r7, #15]
  405180:	4618      	mov	r0, r3
  405182:	4b34      	ldr	r3, [pc, #208]	; (405254 <uhi_cdc_write_buf+0xe4>)
  405184:	4798      	blx	r3
  405186:	6238      	str	r0, [r7, #32]
	if (ptr_port == NULL) {
  405188:	6a3b      	ldr	r3, [r7, #32]
  40518a:	2b00      	cmp	r3, #0
  40518c:	d101      	bne.n	405192 <uhi_cdc_write_buf+0x22>
		return false;
  40518e:	2300      	movs	r3, #0
  405190:	e05c      	b.n	40524c <uhi_cdc_write_buf+0xdc>
	}
	line = &ptr_port->line_tx;
  405192:	6a3b      	ldr	r3, [r7, #32]
  405194:	3324      	adds	r3, #36	; 0x24
  405196:	61fb      	str	r3, [r7, #28]

	if (9 == ptr_port->conf.bDataBits) {
  405198:	6a3b      	ldr	r3, [r7, #32]
  40519a:	799b      	ldrb	r3, [r3, #6]
  40519c:	2b09      	cmp	r3, #9
  40519e:	d102      	bne.n	4051a6 <uhi_cdc_write_buf+0x36>
		size *=2;
  4051a0:	687b      	ldr	r3, [r7, #4]
  4051a2:	005b      	lsls	r3, r3, #1
  4051a4:	607b      	str	r3, [r7, #4]
	}

uhi_cdc_write_buf_loop_wait:
	// Check available space
	cdc_buf = &line->buffer[line->buf_sel];
  4051a6:	69fb      	ldr	r3, [r7, #28]
  4051a8:	791b      	ldrb	r3, [r3, #4]
  4051aa:	b2db      	uxtb	r3, r3
  4051ac:	3301      	adds	r3, #1
  4051ae:	00db      	lsls	r3, r3, #3
  4051b0:	69fa      	ldr	r2, [r7, #28]
  4051b2:	4413      	add	r3, r2
  4051b4:	61bb      	str	r3, [r7, #24]
	while (line->buffer_size == cdc_buf->nb) {
  4051b6:	bf00      	nop
  4051b8:	69fb      	ldr	r3, [r7, #28]
  4051ba:	88da      	ldrh	r2, [r3, #6]
  4051bc:	69bb      	ldr	r3, [r7, #24]
  4051be:	885b      	ldrh	r3, [r3, #2]
  4051c0:	429a      	cmp	r2, r3
  4051c2:	d109      	bne.n	4051d8 <uhi_cdc_write_buf+0x68>
		if (NULL == uhi_cdc_get_port(port)) {
  4051c4:	7bfb      	ldrb	r3, [r7, #15]
  4051c6:	4618      	mov	r0, r3
  4051c8:	4b22      	ldr	r3, [pc, #136]	; (405254 <uhi_cdc_write_buf+0xe4>)
  4051ca:	4798      	blx	r3
  4051cc:	4603      	mov	r3, r0
  4051ce:	2b00      	cmp	r3, #0
  4051d0:	d101      	bne.n	4051d6 <uhi_cdc_write_buf+0x66>
			return 0;
  4051d2:	2300      	movs	r3, #0
  4051d4:	e03a      	b.n	40524c <uhi_cdc_write_buf+0xdc>
		}
		goto uhi_cdc_write_buf_loop_wait;
  4051d6:	e7e6      	b.n	4051a6 <uhi_cdc_write_buf+0x36>
	}

	// Write value
	flags = cpu_irq_save();
  4051d8:	4b1f      	ldr	r3, [pc, #124]	; (405258 <uhi_cdc_write_buf+0xe8>)
  4051da:	4798      	blx	r3
  4051dc:	6178      	str	r0, [r7, #20]
	cdc_buf = &line->buffer[line->buf_sel];
  4051de:	69fb      	ldr	r3, [r7, #28]
  4051e0:	791b      	ldrb	r3, [r3, #4]
  4051e2:	b2db      	uxtb	r3, r3
  4051e4:	3301      	adds	r3, #1
  4051e6:	00db      	lsls	r3, r3, #3
  4051e8:	69fa      	ldr	r2, [r7, #28]
  4051ea:	4413      	add	r3, r2
  4051ec:	61bb      	str	r3, [r7, #24]
	copy_nb = line->buffer_size - cdc_buf->nb;
  4051ee:	69fb      	ldr	r3, [r7, #28]
  4051f0:	88db      	ldrh	r3, [r3, #6]
  4051f2:	461a      	mov	r2, r3
  4051f4:	69bb      	ldr	r3, [r7, #24]
  4051f6:	885b      	ldrh	r3, [r3, #2]
  4051f8:	1ad3      	subs	r3, r2, r3
  4051fa:	627b      	str	r3, [r7, #36]	; 0x24
	if (copy_nb>size) {
  4051fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4051fe:	687b      	ldr	r3, [r7, #4]
  405200:	429a      	cmp	r2, r3
  405202:	d901      	bls.n	405208 <uhi_cdc_write_buf+0x98>
		copy_nb = size;
  405204:	687b      	ldr	r3, [r7, #4]
  405206:	627b      	str	r3, [r7, #36]	; 0x24
	}
	memcpy(&cdc_buf->ptr[cdc_buf->nb], buf, copy_nb);
  405208:	69bb      	ldr	r3, [r7, #24]
  40520a:	685b      	ldr	r3, [r3, #4]
  40520c:	69ba      	ldr	r2, [r7, #24]
  40520e:	8852      	ldrh	r2, [r2, #2]
  405210:	4413      	add	r3, r2
  405212:	4618      	mov	r0, r3
  405214:	68b9      	ldr	r1, [r7, #8]
  405216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  405218:	4b10      	ldr	r3, [pc, #64]	; (40525c <uhi_cdc_write_buf+0xec>)
  40521a:	4798      	blx	r3
	cdc_buf->nb += copy_nb;
  40521c:	69bb      	ldr	r3, [r7, #24]
  40521e:	885a      	ldrh	r2, [r3, #2]
  405220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405222:	b29b      	uxth	r3, r3
  405224:	4413      	add	r3, r2
  405226:	b29a      	uxth	r2, r3
  405228:	69bb      	ldr	r3, [r7, #24]
  40522a:	805a      	strh	r2, [r3, #2]
	cpu_irq_restore(flags);
  40522c:	6978      	ldr	r0, [r7, #20]
  40522e:	4b0c      	ldr	r3, [pc, #48]	; (405260 <uhi_cdc_write_buf+0xf0>)
  405230:	4798      	blx	r3

	// Update buffer pointer
	buf = (uint8_t*)buf + copy_nb;
  405232:	68ba      	ldr	r2, [r7, #8]
  405234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405236:	4413      	add	r3, r2
  405238:	60bb      	str	r3, [r7, #8]
	size -= copy_nb;
  40523a:	687a      	ldr	r2, [r7, #4]
  40523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40523e:	1ad3      	subs	r3, r2, r3
  405240:	607b      	str	r3, [r7, #4]

	if (size) {
  405242:	687b      	ldr	r3, [r7, #4]
  405244:	2b00      	cmp	r3, #0
  405246:	d000      	beq.n	40524a <uhi_cdc_write_buf+0xda>
		goto uhi_cdc_write_buf_loop_wait;
  405248:	e7ad      	b.n	4051a6 <uhi_cdc_write_buf+0x36>
	}

	return 0;
  40524a:	2300      	movs	r3, #0
}
  40524c:	4618      	mov	r0, r3
  40524e:	3728      	adds	r7, #40	; 0x28
  405250:	46bd      	mov	sp, r7
  405252:	bd80      	pop	{r7, pc}
  405254:	004048c9 	.word	0x004048c9
  405258:	00404265 	.word	0x00404265
  40525c:	0040a6e1 	.word	0x0040a6e1
  405260:	004042bd 	.word	0x004042bd

00405264 <uhc_enable_timeout_callback>:
 * \param timeout  value of timeout (ms)
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
  405264:	b480      	push	{r7}
  405266:	b083      	sub	sp, #12
  405268:	af00      	add	r7, sp, #0
  40526a:	4603      	mov	r3, r0
  40526c:	6039      	str	r1, [r7, #0]
  40526e:	71fb      	strb	r3, [r7, #7]
	uhc_sof_timeout_callback = callback;
  405270:	4a05      	ldr	r2, [pc, #20]	; (405288 <uhc_enable_timeout_callback+0x24>)
  405272:	683b      	ldr	r3, [r7, #0]
  405274:	6013      	str	r3, [r2, #0]
	uhc_sof_timeout = timeout;
  405276:	4a05      	ldr	r2, [pc, #20]	; (40528c <uhc_enable_timeout_callback+0x28>)
  405278:	79fb      	ldrb	r3, [r7, #7]
  40527a:	7013      	strb	r3, [r2, #0]
}
  40527c:	370c      	adds	r7, #12
  40527e:	46bd      	mov	sp, r7
  405280:	f85d 7b04 	ldr.w	r7, [sp], #4
  405284:	4770      	bx	lr
  405286:	bf00      	nop
  405288:	200194e0 	.word	0x200194e0
  40528c:	2001c402 	.word	0x2001c402

00405290 <uhc_enumeration_suspend>:
/**
 * \brief Enters a specific device in USB suspend mode
 * Suspend the USB line or a port on USB hub.
 */
static void uhc_enumeration_suspend(void)
{
  405290:	b580      	push	{r7, lr}
  405292:	af00      	add	r7, sp, #0
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
  405294:	4b01      	ldr	r3, [pc, #4]	; (40529c <uhc_enumeration_suspend+0xc>)
  405296:	4798      	blx	r3
	}
}
  405298:	bd80      	pop	{r7, pc}
  40529a:	bf00      	nop
  40529c:	004082b1 	.word	0x004082b1

004052a0 <uhc_enumeration_reset>:
 * \brief Sends the USB Reset signal on the USB line of a device
 *
 * \param callback Callback to call at the end of Reset signal
 */
static void uhc_enumeration_reset(uhd_callback_reset_t callback)
{
  4052a0:	b580      	push	{r7, lr}
  4052a2:	b082      	sub	sp, #8
  4052a4:	af00      	add	r7, sp, #0
  4052a6:	6078      	str	r0, [r7, #4]
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
  4052a8:	6878      	ldr	r0, [r7, #4]
  4052aa:	4b02      	ldr	r3, [pc, #8]	; (4052b4 <uhc_enumeration_reset+0x14>)
  4052ac:	4798      	blx	r3
	}
}
  4052ae:	3708      	adds	r7, #8
  4052b0:	46bd      	mov	sp, r7
  4052b2:	bd80      	pop	{r7, pc}
  4052b4:	00408291 	.word	0x00408291

004052b8 <uhc_connection_tree>:
 *
 * \param b_plug   true, if it is a device connection
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
  4052b8:	b580      	push	{r7, lr}
  4052ba:	b084      	sub	sp, #16
  4052bc:	af00      	add	r7, sp, #0
  4052be:	4603      	mov	r3, r0
  4052c0:	6039      	str	r1, [r7, #0]
  4052c2:	71fb      	strb	r3, [r7, #7]
	if (b_plug) {
  4052c4:	79fb      	ldrb	r3, [r7, #7]
  4052c6:	2b00      	cmp	r3, #0
  4052c8:	d00f      	beq.n	4052ea <uhc_connection_tree+0x32>
		uhc_enum_try = 1;
  4052ca:	4b20      	ldr	r3, [pc, #128]	; (40534c <uhc_connection_tree+0x94>)
  4052cc:	2201      	movs	r2, #1
  4052ce:	701a      	strb	r2, [r3, #0]
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
  4052d0:	4b1f      	ldr	r3, [pc, #124]	; (405350 <uhc_connection_tree+0x98>)
  4052d2:	2200      	movs	r2, #0
  4052d4:	615a      	str	r2, [r3, #20]
		uhc_dev_enum->address = 0;
  4052d6:	4b1e      	ldr	r3, [pc, #120]	; (405350 <uhc_connection_tree+0x98>)
  4052d8:	2200      	movs	r2, #0
  4052da:	749a      	strb	r2, [r3, #18]
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
  4052dc:	481c      	ldr	r0, [pc, #112]	; (405350 <uhc_connection_tree+0x98>)
  4052de:	2101      	movs	r1, #1
  4052e0:	4b1c      	ldr	r3, [pc, #112]	; (405354 <uhc_connection_tree+0x9c>)
  4052e2:	4798      	blx	r3
		uhc_enumeration_step1();
  4052e4:	4b1c      	ldr	r3, [pc, #112]	; (405358 <uhc_connection_tree+0xa0>)
  4052e6:	4798      	blx	r3
  4052e8:	e02d      	b.n	405346 <uhc_connection_tree+0x8e>
	} else {
		if (uhc_dev_enum == dev) {
  4052ea:	683b      	ldr	r3, [r7, #0]
  4052ec:	4a18      	ldr	r2, [pc, #96]	; (405350 <uhc_connection_tree+0x98>)
  4052ee:	4293      	cmp	r3, r2
  4052f0:	d102      	bne.n	4052f8 <uhc_connection_tree+0x40>
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
  4052f2:	4b1a      	ldr	r3, [pc, #104]	; (40535c <uhc_connection_tree+0xa4>)
  4052f4:	2200      	movs	r2, #0
  4052f6:	701a      	strb	r2, [r3, #0]
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
  4052f8:	683b      	ldr	r3, [r7, #0]
  4052fa:	7c9b      	ldrb	r3, [r3, #18]
  4052fc:	4618      	mov	r0, r3
  4052fe:	21ff      	movs	r1, #255	; 0xff
  405300:	4b17      	ldr	r3, [pc, #92]	; (405360 <uhc_connection_tree+0xa8>)
  405302:	4798      	blx	r3

		// Disable all USB interfaces (this includes HUB interface)
		for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
  405304:	2300      	movs	r3, #0
  405306:	73fb      	strb	r3, [r7, #15]
  405308:	e00a      	b.n	405320 <uhc_connection_tree+0x68>
			uhc_uhis[i].uninstall(dev);
  40530a:	7bfb      	ldrb	r3, [r7, #15]
  40530c:	4a15      	ldr	r2, [pc, #84]	; (405364 <uhc_connection_tree+0xac>)
  40530e:	011b      	lsls	r3, r3, #4
  405310:	4413      	add	r3, r2
  405312:	3308      	adds	r3, #8
  405314:	681b      	ldr	r3, [r3, #0]
  405316:	6838      	ldr	r0, [r7, #0]
  405318:	4798      	blx	r3
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);

		// Disable all USB interfaces (this includes HUB interface)
		for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
  40531a:	7bfb      	ldrb	r3, [r7, #15]
  40531c:	3301      	adds	r3, #1
  40531e:	73fb      	strb	r3, [r7, #15]
  405320:	7bfb      	ldrb	r3, [r7, #15]
  405322:	2b00      	cmp	r3, #0
  405324:	d0f1      	beq.n	40530a <uhc_connection_tree+0x52>
			uhc_uhis[i].uninstall(dev);
		}

		UHC_CONNECTION_EVENT(dev, false);
  405326:	6838      	ldr	r0, [r7, #0]
  405328:	2100      	movs	r1, #0
  40532a:	4b0a      	ldr	r3, [pc, #40]	; (405354 <uhc_connection_tree+0x9c>)
  40532c:	4798      	blx	r3
		dev->address = UHC_USB_ADD_NOT_VALID;
  40532e:	683b      	ldr	r3, [r7, #0]
  405330:	22ff      	movs	r2, #255	; 0xff
  405332:	749a      	strb	r2, [r3, #18]
		// Free USB configuration descriptor buffer
		if (dev->conf_desc != NULL) {
  405334:	683b      	ldr	r3, [r7, #0]
  405336:	695b      	ldr	r3, [r3, #20]
  405338:	2b00      	cmp	r3, #0
  40533a:	d004      	beq.n	405346 <uhc_connection_tree+0x8e>
			free(dev->conf_desc);
  40533c:	683b      	ldr	r3, [r7, #0]
  40533e:	695b      	ldr	r3, [r3, #20]
  405340:	4618      	mov	r0, r3
  405342:	4b09      	ldr	r3, [pc, #36]	; (405368 <uhc_connection_tree+0xb0>)
  405344:	4798      	blx	r3
			dev->next->prev = dev->prev;
			free(dev);
		}
#endif
	}
}
  405346:	3710      	adds	r7, #16
  405348:	46bd      	mov	sp, r7
  40534a:	bd80      	pop	{r7, pc}
  40534c:	200194dc 	.word	0x200194dc
  405350:	200194c4 	.word	0x200194c4
  405354:	00403c79 	.word	0x00403c79
  405358:	0040536d 	.word	0x0040536d
  40535c:	2001c402 	.word	0x2001c402
  405360:	00408445 	.word	0x00408445
  405364:	2000012c 	.word	0x2000012c
  405368:	0040a149 	.word	0x0040a149

0040536c <uhc_enumeration_step1>:
/**
 * \brief Device enumeration step 1
 * Reset USB line.
 */
static void uhc_enumeration_step1(void)
{
  40536c:	b580      	push	{r7, lr}
  40536e:	af00      	add	r7, sp, #0
	uhc_enumeration_reset(uhc_enumeration_step2);
  405370:	4801      	ldr	r0, [pc, #4]	; (405378 <uhc_enumeration_step1+0xc>)
  405372:	4b02      	ldr	r3, [pc, #8]	; (40537c <uhc_enumeration_step1+0x10>)
  405374:	4798      	blx	r3
}
  405376:	bd80      	pop	{r7, pc}
  405378:	00405381 	.word	0x00405381
  40537c:	004052a1 	.word	0x004052a1

00405380 <uhc_enumeration_step2>:
/**
 * \brief Device enumeration step 2
 * Lets USB line in IDLE state during 20ms.
 */
static void uhc_enumeration_step2(void)
{
  405380:	b580      	push	{r7, lr}
  405382:	af00      	add	r7, sp, #0
	uhc_enable_timeout_callback(20, uhc_enumeration_step3);
  405384:	2014      	movs	r0, #20
  405386:	4902      	ldr	r1, [pc, #8]	; (405390 <uhc_enumeration_step2+0x10>)
  405388:	4b02      	ldr	r3, [pc, #8]	; (405394 <uhc_enumeration_step2+0x14>)
  40538a:	4798      	blx	r3
}
  40538c:	bd80      	pop	{r7, pc}
  40538e:	bf00      	nop
  405390:	00405399 	.word	0x00405399
  405394:	00405265 	.word	0x00405265

00405398 <uhc_enumeration_step3>:
/**
 * \brief Device enumeration step 3
 * Reset USB line.
 */
static void uhc_enumeration_step3(void)
{
  405398:	b580      	push	{r7, lr}
  40539a:	af00      	add	r7, sp, #0
	uhc_enumeration_reset(uhc_enumeration_step4);
  40539c:	4801      	ldr	r0, [pc, #4]	; (4053a4 <uhc_enumeration_step3+0xc>)
  40539e:	4b02      	ldr	r3, [pc, #8]	; (4053a8 <uhc_enumeration_step3+0x10>)
  4053a0:	4798      	blx	r3
}
  4053a2:	bd80      	pop	{r7, pc}
  4053a4:	004053ad 	.word	0x004053ad
  4053a8:	004052a1 	.word	0x004052a1

004053ac <uhc_enumeration_step4>:
/**
 * \brief Device enumeration step 4
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step4(void)
{
  4053ac:	b580      	push	{r7, lr}
  4053ae:	af00      	add	r7, sp, #0
	uhc_dev_enum->speed = uhd_get_speed();
  4053b0:	4b05      	ldr	r3, [pc, #20]	; (4053c8 <uhc_enumeration_step4+0x1c>)
  4053b2:	4798      	blx	r3
  4053b4:	4603      	mov	r3, r0
  4053b6:	461a      	mov	r2, r3
  4053b8:	4b04      	ldr	r3, [pc, #16]	; (4053cc <uhc_enumeration_step4+0x20>)
  4053ba:	74da      	strb	r2, [r3, #19]
	uhc_enable_timeout_callback(100, uhc_enumeration_step5);
  4053bc:	2064      	movs	r0, #100	; 0x64
  4053be:	4904      	ldr	r1, [pc, #16]	; (4053d0 <uhc_enumeration_step4+0x24>)
  4053c0:	4b04      	ldr	r3, [pc, #16]	; (4053d4 <uhc_enumeration_step4+0x28>)
  4053c2:	4798      	blx	r3
}
  4053c4:	bd80      	pop	{r7, pc}
  4053c6:	bf00      	nop
  4053c8:	00408245 	.word	0x00408245
  4053cc:	200194c4 	.word	0x200194c4
  4053d0:	004053d9 	.word	0x004053d9
  4053d4:	00405265 	.word	0x00405265

004053d8 <uhc_enumeration_step5>:
 * Requests the USB device descriptor.
 * This setup request can be aborted
 * because the control endpoint size is unknown.
 */
static void uhc_enumeration_step5(void)
{
  4053d8:	b590      	push	{r4, r7, lr}
  4053da:	b085      	sub	sp, #20
  4053dc:	af02      	add	r7, sp, #8
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
  4053de:	2380      	movs	r3, #128	; 0x80
  4053e0:	703b      	strb	r3, [r7, #0]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
  4053e2:	2306      	movs	r3, #6
  4053e4:	707b      	strb	r3, [r7, #1]
	req.wValue = (USB_DT_DEVICE << 8);
  4053e6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4053ea:	807b      	strh	r3, [r7, #2]
	req.wIndex = 0;
  4053ec:	2300      	movs	r3, #0
  4053ee:	80bb      	strh	r3, [r7, #4]
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
  4053f0:	2308      	movs	r3, #8
  4053f2:	80fb      	strh	r3, [r7, #6]
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
  4053f4:	2000      	movs	r0, #0
  4053f6:	2100      	movs	r1, #0
  4053f8:	4b13      	ldr	r3, [pc, #76]	; (405448 <uhc_enumeration_step5+0x70>)
  4053fa:	4798      	blx	r3
	if (!uhd_ep0_alloc(0, 64)) {
  4053fc:	2000      	movs	r0, #0
  4053fe:	2140      	movs	r1, #64	; 0x40
  405400:	4b12      	ldr	r3, [pc, #72]	; (40544c <uhc_enumeration_step5+0x74>)
  405402:	4798      	blx	r3
  405404:	4603      	mov	r3, r0
  405406:	f083 0301 	eor.w	r3, r3, #1
  40540a:	b2db      	uxtb	r3, r3
  40540c:	2b00      	cmp	r3, #0
  40540e:	d003      	beq.n	405418 <uhc_enumeration_step5+0x40>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
  405410:	2004      	movs	r0, #4
  405412:	4b0f      	ldr	r3, [pc, #60]	; (405450 <uhc_enumeration_step5+0x78>)
  405414:	4798      	blx	r3
		return;
  405416:	e014      	b.n	405442 <uhc_enumeration_step5+0x6a>
	}
	if (!uhd_setup_request(0,
  405418:	463a      	mov	r2, r7
  40541a:	2300      	movs	r3, #0
  40541c:	9300      	str	r3, [sp, #0]
  40541e:	4b0d      	ldr	r3, [pc, #52]	; (405454 <uhc_enumeration_step5+0x7c>)
  405420:	9301      	str	r3, [sp, #4]
  405422:	2000      	movs	r0, #0
  405424:	4611      	mov	r1, r2
  405426:	4a0c      	ldr	r2, [pc, #48]	; (405458 <uhc_enumeration_step5+0x80>)
  405428:	2312      	movs	r3, #18
  40542a:	4c0c      	ldr	r4, [pc, #48]	; (40545c <uhc_enumeration_step5+0x84>)
  40542c:	47a0      	blx	r4
  40542e:	4603      	mov	r3, r0
  405430:	f083 0301 	eor.w	r3, r3, #1
  405434:	b2db      	uxtb	r3, r3
  405436:	2b00      	cmp	r3, #0
  405438:	d003      	beq.n	405442 <uhc_enumeration_step5+0x6a>
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
  40543a:	2006      	movs	r0, #6
  40543c:	4b04      	ldr	r3, [pc, #16]	; (405450 <uhc_enumeration_step5+0x78>)
  40543e:	4798      	blx	r3
		return;
  405440:	bf00      	nop
	}
}
  405442:	370c      	adds	r7, #12
  405444:	46bd      	mov	sp, r7
  405446:	bd90      	pop	{r4, r7, pc}
  405448:	00408445 	.word	0x00408445
  40544c:	004082c9 	.word	0x004082c9
  405450:	00405a01 	.word	0x00405a01
  405454:	00405461 	.word	0x00405461
  405458:	200194c4 	.word	0x200194c4
  40545c:	00408469 	.word	0x00408469

00405460 <uhc_enumeration_step6>:
 */
static void uhc_enumeration_step6(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
  405460:	b580      	push	{r7, lr}
  405462:	b082      	sub	sp, #8
  405464:	af00      	add	r7, sp, #0
  405466:	4603      	mov	r3, r0
  405468:	71fb      	strb	r3, [r7, #7]
  40546a:	460b      	mov	r3, r1
  40546c:	71bb      	strb	r3, [r7, #6]
  40546e:	4613      	mov	r3, r2
  405470:	80bb      	strh	r3, [r7, #4]
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
  405472:	79bb      	ldrb	r3, [r7, #6]
  405474:	2b00      	cmp	r3, #0
  405476:	d106      	bne.n	405486 <uhc_enumeration_step6+0x26>
  405478:	88bb      	ldrh	r3, [r7, #4]
  40547a:	2b07      	cmp	r3, #7
  40547c:	d903      	bls.n	405486 <uhc_enumeration_step6+0x26>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
  40547e:	4b0a      	ldr	r3, [pc, #40]	; (4054a8 <uhc_enumeration_step6+0x48>)
  405480:	785b      	ldrb	r3, [r3, #1]
  405482:	2b01      	cmp	r3, #1
  405484:	d009      	beq.n	40549a <uhc_enumeration_step6+0x3a>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
  405486:	79bb      	ldrb	r3, [r7, #6]
  405488:	2b01      	cmp	r3, #1
  40548a:	d101      	bne.n	405490 <uhc_enumeration_step6+0x30>
  40548c:	2307      	movs	r3, #7
  40548e:	e000      	b.n	405492 <uhc_enumeration_step6+0x32>
  405490:	2303      	movs	r3, #3
  405492:	4618      	mov	r0, r3
  405494:	4b05      	ldr	r3, [pc, #20]	; (4054ac <uhc_enumeration_step6+0x4c>)
  405496:	4798      	blx	r3
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
  405498:	e003      	b.n	4054a2 <uhc_enumeration_step6+0x42>
	}
	// Wait 20ms
	uhc_enable_timeout_callback(20, uhc_enumeration_step7);
  40549a:	2014      	movs	r0, #20
  40549c:	4904      	ldr	r1, [pc, #16]	; (4054b0 <uhc_enumeration_step6+0x50>)
  40549e:	4b05      	ldr	r3, [pc, #20]	; (4054b4 <uhc_enumeration_step6+0x54>)
  4054a0:	4798      	blx	r3
}
  4054a2:	3708      	adds	r7, #8
  4054a4:	46bd      	mov	sp, r7
  4054a6:	bd80      	pop	{r7, pc}
  4054a8:	200194c4 	.word	0x200194c4
  4054ac:	00405a01 	.word	0x00405a01
  4054b0:	004054b9 	.word	0x004054b9
  4054b4:	00405265 	.word	0x00405265

004054b8 <uhc_enumeration_step7>:
/**
 * \brief Device enumeration step 7
 * Reset USB line.
 */
static void uhc_enumeration_step7(void)
{
  4054b8:	b580      	push	{r7, lr}
  4054ba:	af00      	add	r7, sp, #0
	uhc_enumeration_reset(uhc_enumeration_step8);
  4054bc:	4801      	ldr	r0, [pc, #4]	; (4054c4 <uhc_enumeration_step7+0xc>)
  4054be:	4b02      	ldr	r3, [pc, #8]	; (4054c8 <uhc_enumeration_step7+0x10>)
  4054c0:	4798      	blx	r3
}
  4054c2:	bd80      	pop	{r7, pc}
  4054c4:	004054cd 	.word	0x004054cd
  4054c8:	004052a1 	.word	0x004052a1

004054cc <uhc_enumeration_step8>:
/**
 * \brief Device enumeration step 8
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step8(void)
{
  4054cc:	b580      	push	{r7, lr}
  4054ce:	af00      	add	r7, sp, #0
	// Wait 100ms
	uhc_enable_timeout_callback(100, uhc_enumeration_step9);
  4054d0:	2064      	movs	r0, #100	; 0x64
  4054d2:	4902      	ldr	r1, [pc, #8]	; (4054dc <uhc_enumeration_step8+0x10>)
  4054d4:	4b02      	ldr	r3, [pc, #8]	; (4054e0 <uhc_enumeration_step8+0x14>)
  4054d6:	4798      	blx	r3
}
  4054d8:	bd80      	pop	{r7, pc}
  4054da:	bf00      	nop
  4054dc:	004054e5 	.word	0x004054e5
  4054e0:	00405265 	.word	0x00405265

004054e4 <uhc_enumeration_step9>:
/**
 * \brief Device enumeration step 9
 * Send a Set address setup request.
 */
static void uhc_enumeration_step9(void)
{
  4054e4:	b590      	push	{r4, r7, lr}
  4054e6:	b085      	sub	sp, #20
  4054e8:	af02      	add	r7, sp, #8
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
  4054ea:	2300      	movs	r3, #0
  4054ec:	703b      	strb	r3, [r7, #0]
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
  4054ee:	2305      	movs	r3, #5
  4054f0:	707b      	strb	r3, [r7, #1]
		break;
	}
	req.wValue = usb_addr_free;
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
  4054f2:	2301      	movs	r3, #1
  4054f4:	807b      	strh	r3, [r7, #2]
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
  4054f6:	4b19      	ldr	r3, [pc, #100]	; (40555c <uhc_enumeration_step9+0x78>)
  4054f8:	2201      	movs	r2, #1
  4054fa:	749a      	strb	r2, [r3, #18]
#endif
	req.wIndex = 0;
  4054fc:	2300      	movs	r3, #0
  4054fe:	80bb      	strh	r3, [r7, #4]
	req.wLength = 0;
  405500:	2300      	movs	r3, #0
  405502:	80fb      	strh	r3, [r7, #6]

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
  405504:	2000      	movs	r0, #0
  405506:	2100      	movs	r1, #0
  405508:	4b15      	ldr	r3, [pc, #84]	; (405560 <uhc_enumeration_step9+0x7c>)
  40550a:	4798      	blx	r3
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
  40550c:	4b13      	ldr	r3, [pc, #76]	; (40555c <uhc_enumeration_step9+0x78>)
  40550e:	79db      	ldrb	r3, [r3, #7]
  405510:	2000      	movs	r0, #0
  405512:	4619      	mov	r1, r3
  405514:	4b13      	ldr	r3, [pc, #76]	; (405564 <uhc_enumeration_step9+0x80>)
  405516:	4798      	blx	r3
  405518:	4603      	mov	r3, r0
  40551a:	f083 0301 	eor.w	r3, r3, #1
  40551e:	b2db      	uxtb	r3, r3
  405520:	2b00      	cmp	r3, #0
  405522:	d003      	beq.n	40552c <uhc_enumeration_step9+0x48>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
  405524:	2004      	movs	r0, #4
  405526:	4b10      	ldr	r3, [pc, #64]	; (405568 <uhc_enumeration_step9+0x84>)
  405528:	4798      	blx	r3
		return;
  40552a:	e014      	b.n	405556 <uhc_enumeration_step9+0x72>
	}

	if (!uhd_setup_request(0,
  40552c:	463a      	mov	r2, r7
  40552e:	2300      	movs	r3, #0
  405530:	9300      	str	r3, [sp, #0]
  405532:	4b0e      	ldr	r3, [pc, #56]	; (40556c <uhc_enumeration_step9+0x88>)
  405534:	9301      	str	r3, [sp, #4]
  405536:	2000      	movs	r0, #0
  405538:	4611      	mov	r1, r2
  40553a:	4a08      	ldr	r2, [pc, #32]	; (40555c <uhc_enumeration_step9+0x78>)
  40553c:	2312      	movs	r3, #18
  40553e:	4c0c      	ldr	r4, [pc, #48]	; (405570 <uhc_enumeration_step9+0x8c>)
  405540:	47a0      	blx	r4
  405542:	4603      	mov	r3, r0
  405544:	f083 0301 	eor.w	r3, r3, #1
  405548:	b2db      	uxtb	r3, r3
  40554a:	2b00      	cmp	r3, #0
  40554c:	d003      	beq.n	405556 <uhc_enumeration_step9+0x72>
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
  40554e:	2006      	movs	r0, #6
  405550:	4b05      	ldr	r3, [pc, #20]	; (405568 <uhc_enumeration_step9+0x84>)
  405552:	4798      	blx	r3
		return;
  405554:	bf00      	nop
	}
}
  405556:	370c      	adds	r7, #12
  405558:	46bd      	mov	sp, r7
  40555a:	bd90      	pop	{r4, r7, pc}
  40555c:	200194c4 	.word	0x200194c4
  405560:	00408445 	.word	0x00408445
  405564:	004082c9 	.word	0x004082c9
  405568:	00405a01 	.word	0x00405a01
  40556c:	00405575 	.word	0x00405575
  405570:	00408469 	.word	0x00408469

00405574 <uhc_enumeration_step10>:
 */
static void uhc_enumeration_step10(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
  405574:	b580      	push	{r7, lr}
  405576:	b082      	sub	sp, #8
  405578:	af00      	add	r7, sp, #0
  40557a:	4603      	mov	r3, r0
  40557c:	71fb      	strb	r3, [r7, #7]
  40557e:	460b      	mov	r3, r1
  405580:	71bb      	strb	r3, [r7, #6]
  405582:	4613      	mov	r3, r2
  405584:	80bb      	strh	r3, [r7, #4]
	UNUSED(add);
	UNUSED(payload_trans);
	if (status != UHD_TRANS_NOERROR) {
  405586:	79bb      	ldrb	r3, [r7, #6]
  405588:	2b00      	cmp	r3, #0
  40558a:	d009      	beq.n	4055a0 <uhc_enumeration_step10+0x2c>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT) ?
  40558c:	79bb      	ldrb	r3, [r7, #6]
  40558e:	2b01      	cmp	r3, #1
  405590:	d101      	bne.n	405596 <uhc_enumeration_step10+0x22>
  405592:	2307      	movs	r3, #7
  405594:	e000      	b.n	405598 <uhc_enumeration_step10+0x24>
  405596:	2303      	movs	r3, #3
  405598:	4618      	mov	r0, r3
  40559a:	4b05      	ldr	r3, [pc, #20]	; (4055b0 <uhc_enumeration_step10+0x3c>)
  40559c:	4798      	blx	r3
				UHC_ENUM_DISCONNECT : UHC_ENUM_FAIL);
		return;
  40559e:	e003      	b.n	4055a8 <uhc_enumeration_step10+0x34>
	}
	// Wait 20ms
	uhc_enable_timeout_callback(20, uhc_enumeration_step11);
  4055a0:	2014      	movs	r0, #20
  4055a2:	4904      	ldr	r1, [pc, #16]	; (4055b4 <uhc_enumeration_step10+0x40>)
  4055a4:	4b04      	ldr	r3, [pc, #16]	; (4055b8 <uhc_enumeration_step10+0x44>)
  4055a6:	4798      	blx	r3
}
  4055a8:	3708      	adds	r7, #8
  4055aa:	46bd      	mov	sp, r7
  4055ac:	bd80      	pop	{r7, pc}
  4055ae:	bf00      	nop
  4055b0:	00405a01 	.word	0x00405a01
  4055b4:	004055bd 	.word	0x004055bd
  4055b8:	00405265 	.word	0x00405265

004055bc <uhc_enumeration_step11>:
 * \brief Device enumeration step 11
 * Updates USB host pipe with the new USB address.
 * Requests a complete USB device descriptor.
 */
static void uhc_enumeration_step11(void)
{
  4055bc:	b590      	push	{r4, r7, lr}
  4055be:	b085      	sub	sp, #20
  4055c0:	af02      	add	r7, sp, #8
	usb_setup_req_t req;

	// Free address 0 used to start enumeration
	uhd_ep_free(0, 0);
  4055c2:	2000      	movs	r0, #0
  4055c4:	2100      	movs	r1, #0
  4055c6:	4b1a      	ldr	r3, [pc, #104]	; (405630 <uhc_enumeration_step11+0x74>)
  4055c8:	4798      	blx	r3

	// Alloc control endpoint with the new USB address
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
  4055ca:	4b1a      	ldr	r3, [pc, #104]	; (405634 <uhc_enumeration_step11+0x78>)
  4055cc:	79db      	ldrb	r3, [r3, #7]
  4055ce:	2001      	movs	r0, #1
  4055d0:	4619      	mov	r1, r3
  4055d2:	4b19      	ldr	r3, [pc, #100]	; (405638 <uhc_enumeration_step11+0x7c>)
  4055d4:	4798      	blx	r3
  4055d6:	4603      	mov	r3, r0
  4055d8:	f083 0301 	eor.w	r3, r3, #1
  4055dc:	b2db      	uxtb	r3, r3
  4055de:	2b00      	cmp	r3, #0
  4055e0:	d003      	beq.n	4055ea <uhc_enumeration_step11+0x2e>
			uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
  4055e2:	2004      	movs	r0, #4
  4055e4:	4b15      	ldr	r3, [pc, #84]	; (40563c <uhc_enumeration_step11+0x80>)
  4055e6:	4798      	blx	r3
		return;
  4055e8:	e01f      	b.n	40562a <uhc_enumeration_step11+0x6e>
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
  4055ea:	2380      	movs	r3, #128	; 0x80
  4055ec:	703b      	strb	r3, [r7, #0]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
  4055ee:	2306      	movs	r3, #6
  4055f0:	707b      	strb	r3, [r7, #1]
	req.wValue = (USB_DT_DEVICE << 8);
  4055f2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4055f6:	807b      	strh	r3, [r7, #2]
	req.wIndex = 0;
  4055f8:	2300      	movs	r3, #0
  4055fa:	80bb      	strh	r3, [r7, #4]
	req.wLength = sizeof(usb_dev_desc_t);
  4055fc:	2312      	movs	r3, #18
  4055fe:	80fb      	strh	r3, [r7, #6]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
  405600:	463a      	mov	r2, r7
  405602:	2300      	movs	r3, #0
  405604:	9300      	str	r3, [sp, #0]
  405606:	4b0e      	ldr	r3, [pc, #56]	; (405640 <uhc_enumeration_step11+0x84>)
  405608:	9301      	str	r3, [sp, #4]
  40560a:	2001      	movs	r0, #1
  40560c:	4611      	mov	r1, r2
  40560e:	4a09      	ldr	r2, [pc, #36]	; (405634 <uhc_enumeration_step11+0x78>)
  405610:	2312      	movs	r3, #18
  405612:	4c0c      	ldr	r4, [pc, #48]	; (405644 <uhc_enumeration_step11+0x88>)
  405614:	47a0      	blx	r4
  405616:	4603      	mov	r3, r0
  405618:	f083 0301 	eor.w	r3, r3, #1
  40561c:	b2db      	uxtb	r3, r3
  40561e:	2b00      	cmp	r3, #0
  405620:	d003      	beq.n	40562a <uhc_enumeration_step11+0x6e>
			&req,
			(uint8_t *) & uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
  405622:	2006      	movs	r0, #6
  405624:	4b05      	ldr	r3, [pc, #20]	; (40563c <uhc_enumeration_step11+0x80>)
  405626:	4798      	blx	r3
		return;
  405628:	bf00      	nop
	}
}
  40562a:	370c      	adds	r7, #12
  40562c:	46bd      	mov	sp, r7
  40562e:	bd90      	pop	{r4, r7, pc}
  405630:	00408445 	.word	0x00408445
  405634:	200194c4 	.word	0x200194c4
  405638:	004082c9 	.word	0x004082c9
  40563c:	00405a01 	.word	0x00405a01
  405640:	00405649 	.word	0x00405649
  405644:	00408469 	.word	0x00408469

00405648 <uhc_enumeration_step12>:
 */
static void uhc_enumeration_step12(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
  405648:	b590      	push	{r4, r7, lr}
  40564a:	b089      	sub	sp, #36	; 0x24
  40564c:	af02      	add	r7, sp, #8
  40564e:	4603      	mov	r3, r0
  405650:	71fb      	strb	r3, [r7, #7]
  405652:	460b      	mov	r3, r1
  405654:	71bb      	strb	r3, [r7, #6]
  405656:	4613      	mov	r3, r2
  405658:	80bb      	strh	r3, [r7, #4]
	usb_setup_req_t req;
	uint8_t conf_num;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
  40565a:	79bb      	ldrb	r3, [r7, #6]
  40565c:	2b00      	cmp	r3, #0
  40565e:	d106      	bne.n	40566e <uhc_enumeration_step12+0x26>
  405660:	88bb      	ldrh	r3, [r7, #4]
  405662:	2b12      	cmp	r3, #18
  405664:	d103      	bne.n	40566e <uhc_enumeration_step12+0x26>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
  405666:	4b28      	ldr	r3, [pc, #160]	; (405708 <uhc_enumeration_step12+0xc0>)
  405668:	785b      	ldrb	r3, [r3, #1]
  40566a:	2b01      	cmp	r3, #1
  40566c:	d009      	beq.n	405682 <uhc_enumeration_step12+0x3a>
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
  40566e:	79bb      	ldrb	r3, [r7, #6]
  405670:	2b01      	cmp	r3, #1
  405672:	d101      	bne.n	405678 <uhc_enumeration_step12+0x30>
  405674:	2307      	movs	r3, #7
  405676:	e000      	b.n	40567a <uhc_enumeration_step12+0x32>
  405678:	2303      	movs	r3, #3
  40567a:	4618      	mov	r0, r3
  40567c:	4b23      	ldr	r3, [pc, #140]	; (40570c <uhc_enumeration_step12+0xc4>)
  40567e:	4798      	blx	r3
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
  405680:	e03f      	b.n	405702 <uhc_enumeration_step12+0xba>
	}
	// Choose USB device configuration
	if (uhc_dev_enum->dev_desc.bNumConfigurations > 1) {
  405682:	4b21      	ldr	r3, [pc, #132]	; (405708 <uhc_enumeration_step12+0xc0>)
  405684:	7c5b      	ldrb	r3, [r3, #17]
  405686:	2b01      	cmp	r3, #1
  405688:	d902      	bls.n	405690 <uhc_enumeration_step12+0x48>
		conf_num = UHC_DEVICE_CONF(uhc_dev_enum);
  40568a:	2301      	movs	r3, #1
  40568c:	75fb      	strb	r3, [r7, #23]
  40568e:	e001      	b.n	405694 <uhc_enumeration_step12+0x4c>
	} else {
		conf_num = 1;
  405690:	2301      	movs	r3, #1
  405692:	75fb      	strb	r3, [r7, #23]
	}

	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
  405694:	2009      	movs	r0, #9
  405696:	4b1e      	ldr	r3, [pc, #120]	; (405710 <uhc_enumeration_step12+0xc8>)
  405698:	4798      	blx	r3
  40569a:	4603      	mov	r3, r0
  40569c:	461a      	mov	r2, r3
  40569e:	4b1a      	ldr	r3, [pc, #104]	; (405708 <uhc_enumeration_step12+0xc0>)
  4056a0:	615a      	str	r2, [r3, #20]
	if (uhc_dev_enum->conf_desc == NULL) {
  4056a2:	4b19      	ldr	r3, [pc, #100]	; (405708 <uhc_enumeration_step12+0xc0>)
  4056a4:	695b      	ldr	r3, [r3, #20]
  4056a6:	2b00      	cmp	r3, #0
  4056a8:	d103      	bne.n	4056b2 <uhc_enumeration_step12+0x6a>
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
  4056aa:	2006      	movs	r0, #6
  4056ac:	4b17      	ldr	r3, [pc, #92]	; (40570c <uhc_enumeration_step12+0xc4>)
  4056ae:	4798      	blx	r3
		return;
  4056b0:	e027      	b.n	405702 <uhc_enumeration_step12+0xba>
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
  4056b2:	2380      	movs	r3, #128	; 0x80
  4056b4:	733b      	strb	r3, [r7, #12]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
  4056b6:	2306      	movs	r3, #6
  4056b8:	737b      	strb	r3, [r7, #13]
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
  4056ba:	7dfb      	ldrb	r3, [r7, #23]
  4056bc:	b29b      	uxth	r3, r3
  4056be:	3b01      	subs	r3, #1
  4056c0:	b29b      	uxth	r3, r3
  4056c2:	b29b      	uxth	r3, r3
  4056c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4056c8:	b29b      	uxth	r3, r3
  4056ca:	b29b      	uxth	r3, r3
  4056cc:	81fb      	strh	r3, [r7, #14]
	req.wIndex = 0;
  4056ce:	2300      	movs	r3, #0
  4056d0:	823b      	strh	r3, [r7, #16]
	req.wLength = sizeof(usb_conf_desc_t);
  4056d2:	2309      	movs	r3, #9
  4056d4:	827b      	strh	r3, [r7, #18]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
  4056d6:	4b0c      	ldr	r3, [pc, #48]	; (405708 <uhc_enumeration_step12+0xc0>)
  4056d8:	695a      	ldr	r2, [r3, #20]
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
	req.wLength = sizeof(usb_conf_desc_t);
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
  4056da:	f107 010c 	add.w	r1, r7, #12
  4056de:	2300      	movs	r3, #0
  4056e0:	9300      	str	r3, [sp, #0]
  4056e2:	4b0c      	ldr	r3, [pc, #48]	; (405714 <uhc_enumeration_step12+0xcc>)
  4056e4:	9301      	str	r3, [sp, #4]
  4056e6:	2001      	movs	r0, #1
  4056e8:	2309      	movs	r3, #9
  4056ea:	4c0b      	ldr	r4, [pc, #44]	; (405718 <uhc_enumeration_step12+0xd0>)
  4056ec:	47a0      	blx	r4
  4056ee:	4603      	mov	r3, r0
  4056f0:	f083 0301 	eor.w	r3, r3, #1
  4056f4:	b2db      	uxtb	r3, r3
  4056f6:	2b00      	cmp	r3, #0
  4056f8:	d003      	beq.n	405702 <uhc_enumeration_step12+0xba>
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
  4056fa:	2006      	movs	r0, #6
  4056fc:	4b03      	ldr	r3, [pc, #12]	; (40570c <uhc_enumeration_step12+0xc4>)
  4056fe:	4798      	blx	r3
		return;
  405700:	bf00      	nop
	}
}
  405702:	371c      	adds	r7, #28
  405704:	46bd      	mov	sp, r7
  405706:	bd90      	pop	{r4, r7, pc}
  405708:	200194c4 	.word	0x200194c4
  40570c:	00405a01 	.word	0x00405a01
  405710:	0040a139 	.word	0x0040a139
  405714:	0040571d 	.word	0x0040571d
  405718:	00408469 	.word	0x00408469

0040571c <uhc_enumeration_step13>:
 */
static void uhc_enumeration_step13(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
  40571c:	b590      	push	{r4, r7, lr}
  40571e:	b089      	sub	sp, #36	; 0x24
  405720:	af02      	add	r7, sp, #8
  405722:	4603      	mov	r3, r0
  405724:	71fb      	strb	r3, [r7, #7]
  405726:	460b      	mov	r3, r1
  405728:	71bb      	strb	r3, [r7, #6]
  40572a:	4613      	mov	r3, r2
  40572c:	80bb      	strh	r3, [r7, #4]
	uint8_t conf_num;
	uint16_t conf_size;
	uint16_t bus_power = 0;
  40572e:	2300      	movs	r3, #0
  405730:	82fb      	strh	r3, [r7, #22]
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
  405732:	79bb      	ldrb	r3, [r7, #6]
  405734:	2b00      	cmp	r3, #0
  405736:	d107      	bne.n	405748 <uhc_enumeration_step13+0x2c>
  405738:	88bb      	ldrh	r3, [r7, #4]
  40573a:	2b09      	cmp	r3, #9
  40573c:	d104      	bne.n	405748 <uhc_enumeration_step13+0x2c>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
  40573e:	4b39      	ldr	r3, [pc, #228]	; (405824 <uhc_enumeration_step13+0x108>)
  405740:	695b      	ldr	r3, [r3, #20]
  405742:	785b      	ldrb	r3, [r3, #1]
  405744:	2b02      	cmp	r3, #2
  405746:	d009      	beq.n	40575c <uhc_enumeration_step13+0x40>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
  405748:	79bb      	ldrb	r3, [r7, #6]
  40574a:	2b01      	cmp	r3, #1
  40574c:	d101      	bne.n	405752 <uhc_enumeration_step13+0x36>
  40574e:	2307      	movs	r3, #7
  405750:	e000      	b.n	405754 <uhc_enumeration_step13+0x38>
  405752:	2303      	movs	r3, #3
  405754:	4618      	mov	r0, r3
  405756:	4b34      	ldr	r3, [pc, #208]	; (405828 <uhc_enumeration_step13+0x10c>)
  405758:	4798      	blx	r3
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
  40575a:	e060      	b.n	40581e <uhc_enumeration_step13+0x102>
		}
		// Go to USB HUB parent
		dev = dev->hub;
	}
#else
	if (!(uhc_dev_enum->conf_desc->bmAttributes
  40575c:	4b31      	ldr	r3, [pc, #196]	; (405824 <uhc_enumeration_step13+0x108>)
  40575e:	695b      	ldr	r3, [r3, #20]
  405760:	79db      	ldrb	r3, [r3, #7]
			&USB_CONFIG_ATTR_SELF_POWERED)) {
  405762:	f003 0340 	and.w	r3, r3, #64	; 0x40
		}
		// Go to USB HUB parent
		dev = dev->hub;
	}
#else
	if (!(uhc_dev_enum->conf_desc->bmAttributes
  405766:	2b00      	cmp	r3, #0
  405768:	d105      	bne.n	405776 <uhc_enumeration_step13+0x5a>
			&USB_CONFIG_ATTR_SELF_POWERED)) {
		bus_power = uhc_dev_enum->conf_desc->bMaxPower * 2;
  40576a:	4b2e      	ldr	r3, [pc, #184]	; (405824 <uhc_enumeration_step13+0x108>)
  40576c:	695b      	ldr	r3, [r3, #20]
  40576e:	7a1b      	ldrb	r3, [r3, #8]
  405770:	b29b      	uxth	r3, r3
  405772:	005b      	lsls	r3, r3, #1
  405774:	82fb      	strh	r3, [r7, #22]
	}
#endif
	if ((bus_power + uhc_power_running) > USB_HOST_POWER_MAX) {
  405776:	8afb      	ldrh	r3, [r7, #22]
  405778:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40577c:	dd06      	ble.n	40578c <uhc_enumeration_step13+0x70>
		// USB interfaces consumption too high
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_OVERCURRENT);
  40577e:	4829      	ldr	r0, [pc, #164]	; (405824 <uhc_enumeration_step13+0x108>)
  405780:	2102      	movs	r1, #2
  405782:	4b2a      	ldr	r3, [pc, #168]	; (40582c <uhc_enumeration_step13+0x110>)
  405784:	4798      	blx	r3

		// Abort enumeration, set line in suspend mode
		uhc_enumeration_suspend();
  405786:	4b2a      	ldr	r3, [pc, #168]	; (405830 <uhc_enumeration_step13+0x114>)
  405788:	4798      	blx	r3
		return;
  40578a:	e048      	b.n	40581e <uhc_enumeration_step13+0x102>
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
  40578c:	4b25      	ldr	r3, [pc, #148]	; (405824 <uhc_enumeration_step13+0x108>)
  40578e:	695b      	ldr	r3, [r3, #20]
  405790:	789a      	ldrb	r2, [r3, #2]
  405792:	78db      	ldrb	r3, [r3, #3]
  405794:	021b      	lsls	r3, r3, #8
  405796:	4313      	orrs	r3, r2
  405798:	82bb      	strh	r3, [r7, #20]
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
  40579a:	4b22      	ldr	r3, [pc, #136]	; (405824 <uhc_enumeration_step13+0x108>)
  40579c:	695b      	ldr	r3, [r3, #20]
  40579e:	795b      	ldrb	r3, [r3, #5]
  4057a0:	74fb      	strb	r3, [r7, #19]
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
  4057a2:	4b20      	ldr	r3, [pc, #128]	; (405824 <uhc_enumeration_step13+0x108>)
  4057a4:	695b      	ldr	r3, [r3, #20]
  4057a6:	4618      	mov	r0, r3
  4057a8:	4b22      	ldr	r3, [pc, #136]	; (405834 <uhc_enumeration_step13+0x118>)
  4057aa:	4798      	blx	r3
	uhc_dev_enum->conf_desc = malloc(conf_size);
  4057ac:	8abb      	ldrh	r3, [r7, #20]
  4057ae:	4618      	mov	r0, r3
  4057b0:	4b21      	ldr	r3, [pc, #132]	; (405838 <uhc_enumeration_step13+0x11c>)
  4057b2:	4798      	blx	r3
  4057b4:	4603      	mov	r3, r0
  4057b6:	461a      	mov	r2, r3
  4057b8:	4b1a      	ldr	r3, [pc, #104]	; (405824 <uhc_enumeration_step13+0x108>)
  4057ba:	615a      	str	r2, [r3, #20]
	if (uhc_dev_enum->conf_desc == NULL) {
  4057bc:	4b19      	ldr	r3, [pc, #100]	; (405824 <uhc_enumeration_step13+0x108>)
  4057be:	695b      	ldr	r3, [r3, #20]
  4057c0:	2b00      	cmp	r3, #0
  4057c2:	d103      	bne.n	4057cc <uhc_enumeration_step13+0xb0>
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
  4057c4:	2006      	movs	r0, #6
  4057c6:	4b18      	ldr	r3, [pc, #96]	; (405828 <uhc_enumeration_step13+0x10c>)
  4057c8:	4798      	blx	r3
		return;
  4057ca:	e028      	b.n	40581e <uhc_enumeration_step13+0x102>
	}
	// Send USB device descriptor request
	req.bmRequestType =
  4057cc:	2380      	movs	r3, #128	; 0x80
  4057ce:	723b      	strb	r3, [r7, #8]
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
  4057d0:	2306      	movs	r3, #6
  4057d2:	727b      	strb	r3, [r7, #9]
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
  4057d4:	7cfb      	ldrb	r3, [r7, #19]
  4057d6:	b29b      	uxth	r3, r3
  4057d8:	3b01      	subs	r3, #1
  4057da:	b29b      	uxth	r3, r3
  4057dc:	b29b      	uxth	r3, r3
  4057de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4057e2:	b29b      	uxth	r3, r3
  4057e4:	b29b      	uxth	r3, r3
  4057e6:	817b      	strh	r3, [r7, #10]
	req.wIndex = 0;
  4057e8:	2300      	movs	r3, #0
  4057ea:	81bb      	strh	r3, [r7, #12]
	req.wLength = conf_size;
  4057ec:	8abb      	ldrh	r3, [r7, #20]
  4057ee:	81fb      	strh	r3, [r7, #14]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
  4057f0:	4b0c      	ldr	r3, [pc, #48]	; (405824 <uhc_enumeration_step13+0x108>)
  4057f2:	695a      	ldr	r2, [r3, #20]
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
  4057f4:	f107 0108 	add.w	r1, r7, #8
  4057f8:	8abc      	ldrh	r4, [r7, #20]
  4057fa:	2300      	movs	r3, #0
  4057fc:	9300      	str	r3, [sp, #0]
  4057fe:	4b0f      	ldr	r3, [pc, #60]	; (40583c <uhc_enumeration_step13+0x120>)
  405800:	9301      	str	r3, [sp, #4]
  405802:	2001      	movs	r0, #1
  405804:	4623      	mov	r3, r4
  405806:	4c0e      	ldr	r4, [pc, #56]	; (405840 <uhc_enumeration_step13+0x124>)
  405808:	47a0      	blx	r4
  40580a:	4603      	mov	r3, r0
  40580c:	f083 0301 	eor.w	r3, r3, #1
  405810:	b2db      	uxtb	r3, r3
  405812:	2b00      	cmp	r3, #0
  405814:	d003      	beq.n	40581e <uhc_enumeration_step13+0x102>
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
  405816:	2006      	movs	r0, #6
  405818:	4b03      	ldr	r3, [pc, #12]	; (405828 <uhc_enumeration_step13+0x10c>)
  40581a:	4798      	blx	r3
		return;
  40581c:	bf00      	nop
	}
}
  40581e:	371c      	adds	r7, #28
  405820:	46bd      	mov	sp, r7
  405822:	bd90      	pop	{r4, r7, pc}
  405824:	200194c4 	.word	0x200194c4
  405828:	00405a01 	.word	0x00405a01
  40582c:	00403cad 	.word	0x00403cad
  405830:	00405291 	.word	0x00405291
  405834:	0040a149 	.word	0x0040a149
  405838:	0040a139 	.word	0x0040a139
  40583c:	00405845 	.word	0x00405845
  405840:	00408469 	.word	0x00408469

00405844 <uhc_enumeration_step14>:
 */
static void uhc_enumeration_step14(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
  405844:	b590      	push	{r4, r7, lr}
  405846:	b089      	sub	sp, #36	; 0x24
  405848:	af02      	add	r7, sp, #8
  40584a:	4603      	mov	r3, r0
  40584c:	71fb      	strb	r3, [r7, #7]
  40584e:	460b      	mov	r3, r1
  405850:	71bb      	strb	r3, [r7, #6]
  405852:	4613      	mov	r3, r2
  405854:	80bb      	strh	r3, [r7, #4]
	usb_setup_req_t req;
	bool b_conf_supported = false;
  405856:	2300      	movs	r3, #0
  405858:	75fb      	strb	r3, [r7, #23]
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
  40585a:	79bb      	ldrb	r3, [r7, #6]
  40585c:	2b00      	cmp	r3, #0
  40585e:	d10e      	bne.n	40587e <uhc_enumeration_step14+0x3a>
			|| (payload_trans < sizeof(usb_conf_desc_t))
  405860:	88bb      	ldrh	r3, [r7, #4]
  405862:	2b08      	cmp	r3, #8
  405864:	d90b      	bls.n	40587e <uhc_enumeration_step14+0x3a>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
  405866:	4b37      	ldr	r3, [pc, #220]	; (405944 <uhc_enumeration_step14+0x100>)
  405868:	695b      	ldr	r3, [r3, #20]
  40586a:	785b      	ldrb	r3, [r3, #1]
  40586c:	2b02      	cmp	r3, #2
  40586e:	d106      	bne.n	40587e <uhc_enumeration_step14+0x3a>
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
  405870:	4b34      	ldr	r3, [pc, #208]	; (405944 <uhc_enumeration_step14+0x100>)
  405872:	695b      	ldr	r3, [r3, #20]
  405874:	885b      	ldrh	r3, [r3, #2]
  405876:	b29b      	uxth	r3, r3
  405878:	88ba      	ldrh	r2, [r7, #4]
  40587a:	429a      	cmp	r2, r3
  40587c:	d009      	beq.n	405892 <uhc_enumeration_step14+0x4e>
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
  40587e:	79bb      	ldrb	r3, [r7, #6]
  405880:	2b01      	cmp	r3, #1
  405882:	d101      	bne.n	405888 <uhc_enumeration_step14+0x44>
  405884:	2307      	movs	r3, #7
  405886:	e000      	b.n	40588a <uhc_enumeration_step14+0x46>
  405888:	2303      	movs	r3, #3
  40588a:	4618      	mov	r0, r3
  40588c:	4b2e      	ldr	r3, [pc, #184]	; (405948 <uhc_enumeration_step14+0x104>)
  40588e:	4798      	blx	r3
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
  405890:	e054      	b.n	40593c <uhc_enumeration_step14+0xf8>
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
  405892:	2300      	movs	r3, #0
  405894:	75bb      	strb	r3, [r7, #22]
  405896:	e01e      	b.n	4058d6 <uhc_enumeration_step14+0x92>
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
  405898:	7dbb      	ldrb	r3, [r7, #22]
  40589a:	4a2c      	ldr	r2, [pc, #176]	; (40594c <uhc_enumeration_step14+0x108>)
  40589c:	011b      	lsls	r3, r3, #4
  40589e:	4413      	add	r3, r2
  4058a0:	681b      	ldr	r3, [r3, #0]
  4058a2:	4828      	ldr	r0, [pc, #160]	; (405944 <uhc_enumeration_step14+0x100>)
  4058a4:	4798      	blx	r3
  4058a6:	4603      	mov	r3, r0
  4058a8:	2b00      	cmp	r3, #0
  4058aa:	d002      	beq.n	4058b2 <uhc_enumeration_step14+0x6e>
  4058ac:	2b01      	cmp	r3, #1
  4058ae:	d00e      	beq.n	4058ce <uhc_enumeration_step14+0x8a>
  4058b0:	e002      	b.n	4058b8 <uhc_enumeration_step14+0x74>
		case UHC_ENUM_SUCCESS:
			b_conf_supported = true;
  4058b2:	2301      	movs	r3, #1
  4058b4:	75fb      	strb	r3, [r7, #23]
			break;
  4058b6:	e00b      	b.n	4058d0 <uhc_enumeration_step14+0x8c>
			break;

		default:
			// USB host hardware limitation
			// Free all endpoints
			uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
  4058b8:	2001      	movs	r0, #1
  4058ba:	21ff      	movs	r1, #255	; 0xff
  4058bc:	4b24      	ldr	r3, [pc, #144]	; (405950 <uhc_enumeration_step14+0x10c>)
  4058be:	4798      	blx	r3
			UHC_ENUM_EVENT(uhc_dev_enum,UHC_ENUM_HARDWARE_LIMIT);
  4058c0:	4820      	ldr	r0, [pc, #128]	; (405944 <uhc_enumeration_step14+0x100>)
  4058c2:	2104      	movs	r1, #4
  4058c4:	4b23      	ldr	r3, [pc, #140]	; (405954 <uhc_enumeration_step14+0x110>)
  4058c6:	4798      	blx	r3

			// Abort enumeration, set line in suspend mode
			uhc_enumeration_suspend();
  4058c8:	4b23      	ldr	r3, [pc, #140]	; (405958 <uhc_enumeration_step14+0x114>)
  4058ca:	4798      	blx	r3
			return;
  4058cc:	e036      	b.n	40593c <uhc_enumeration_step14+0xf8>
		case UHC_ENUM_SUCCESS:
			b_conf_supported = true;
			break;

		case UHC_ENUM_UNSUPPORTED:
			break;
  4058ce:	bf00      	nop
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
  4058d0:	7dbb      	ldrb	r3, [r7, #22]
  4058d2:	3301      	adds	r3, #1
  4058d4:	75bb      	strb	r3, [r7, #22]
  4058d6:	7dbb      	ldrb	r3, [r7, #22]
  4058d8:	2b00      	cmp	r3, #0
  4058da:	d0dd      	beq.n	405898 <uhc_enumeration_step14+0x54>
			// Abort enumeration, set line in suspend mode
			uhc_enumeration_suspend();
			return;
		}
	}
	if (!b_conf_supported) {
  4058dc:	7dfb      	ldrb	r3, [r7, #23]
  4058de:	f083 0301 	eor.w	r3, r3, #1
  4058e2:	b2db      	uxtb	r3, r3
  4058e4:	2b00      	cmp	r3, #0
  4058e6:	d006      	beq.n	4058f6 <uhc_enumeration_step14+0xb2>
		// No USB interface supported
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_UNSUPPORTED);
  4058e8:	4816      	ldr	r0, [pc, #88]	; (405944 <uhc_enumeration_step14+0x100>)
  4058ea:	2101      	movs	r1, #1
  4058ec:	4b19      	ldr	r3, [pc, #100]	; (405954 <uhc_enumeration_step14+0x110>)
  4058ee:	4798      	blx	r3

		// Abort enumeration, set line in suspend mode
		uhc_enumeration_suspend();
  4058f0:	4b19      	ldr	r3, [pc, #100]	; (405958 <uhc_enumeration_step14+0x114>)
  4058f2:	4798      	blx	r3
		return;
  4058f4:	e022      	b.n	40593c <uhc_enumeration_step14+0xf8>
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
  4058f6:	2300      	movs	r3, #0
  4058f8:	733b      	strb	r3, [r7, #12]
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
  4058fa:	2309      	movs	r3, #9
  4058fc:	737b      	strb	r3, [r7, #13]
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
  4058fe:	4b11      	ldr	r3, [pc, #68]	; (405944 <uhc_enumeration_step14+0x100>)
  405900:	695b      	ldr	r3, [r3, #20]
  405902:	795b      	ldrb	r3, [r3, #5]
  405904:	b29b      	uxth	r3, r3
  405906:	81fb      	strh	r3, [r7, #14]
	req.wIndex = 0;
  405908:	2300      	movs	r3, #0
  40590a:	823b      	strh	r3, [r7, #16]
	req.wLength = 0;
  40590c:	2300      	movs	r3, #0
  40590e:	827b      	strh	r3, [r7, #18]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
  405910:	f107 020c 	add.w	r2, r7, #12
  405914:	2300      	movs	r3, #0
  405916:	9300      	str	r3, [sp, #0]
  405918:	4b10      	ldr	r3, [pc, #64]	; (40595c <uhc_enumeration_step14+0x118>)
  40591a:	9301      	str	r3, [sp, #4]
  40591c:	2001      	movs	r0, #1
  40591e:	4611      	mov	r1, r2
  405920:	2200      	movs	r2, #0
  405922:	2300      	movs	r3, #0
  405924:	4c0e      	ldr	r4, [pc, #56]	; (405960 <uhc_enumeration_step14+0x11c>)
  405926:	47a0      	blx	r4
  405928:	4603      	mov	r3, r0
  40592a:	f083 0301 	eor.w	r3, r3, #1
  40592e:	b2db      	uxtb	r3, r3
  405930:	2b00      	cmp	r3, #0
  405932:	d003      	beq.n	40593c <uhc_enumeration_step14+0xf8>
			&req,
			NULL,
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
  405934:	2006      	movs	r0, #6
  405936:	4b04      	ldr	r3, [pc, #16]	; (405948 <uhc_enumeration_step14+0x104>)
  405938:	4798      	blx	r3
		return;
  40593a:	bf00      	nop
	}
}
  40593c:	371c      	adds	r7, #28
  40593e:	46bd      	mov	sp, r7
  405940:	bd90      	pop	{r4, r7, pc}
  405942:	bf00      	nop
  405944:	200194c4 	.word	0x200194c4
  405948:	00405a01 	.word	0x00405a01
  40594c:	2000012c 	.word	0x2000012c
  405950:	00408445 	.word	0x00408445
  405954:	00403cad 	.word	0x00403cad
  405958:	00405291 	.word	0x00405291
  40595c:	00405965 	.word	0x00405965
  405960:	00408469 	.word	0x00408469

00405964 <uhc_enumeration_step15>:
 */
static void uhc_enumeration_step15(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
  405964:	b580      	push	{r7, lr}
  405966:	b084      	sub	sp, #16
  405968:	af00      	add	r7, sp, #0
  40596a:	4603      	mov	r3, r0
  40596c:	71fb      	strb	r3, [r7, #7]
  40596e:	460b      	mov	r3, r1
  405970:	71bb      	strb	r3, [r7, #6]
  405972:	4613      	mov	r3, r2
  405974:	80bb      	strh	r3, [r7, #4]
	UNUSED(add);
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
  405976:	79bb      	ldrb	r3, [r7, #6]
  405978:	2b00      	cmp	r3, #0
  40597a:	d102      	bne.n	405982 <uhc_enumeration_step15+0x1e>
  40597c:	88bb      	ldrh	r3, [r7, #4]
  40597e:	2b00      	cmp	r3, #0
  405980:	d01a      	beq.n	4059b8 <uhc_enumeration_step15+0x54>
		for(uint8_t i = 0; i < UHC_NB_UHI; i++) {
  405982:	2300      	movs	r3, #0
  405984:	73fb      	strb	r3, [r7, #15]
  405986:	e00a      	b.n	40599e <uhc_enumeration_step15+0x3a>
			uhc_uhis[i].uninstall(uhc_dev_enum);
  405988:	7bfb      	ldrb	r3, [r7, #15]
  40598a:	4a18      	ldr	r2, [pc, #96]	; (4059ec <uhc_enumeration_step15+0x88>)
  40598c:	011b      	lsls	r3, r3, #4
  40598e:	4413      	add	r3, r2
  405990:	3308      	adds	r3, #8
  405992:	681b      	ldr	r3, [r3, #0]
  405994:	4816      	ldr	r0, [pc, #88]	; (4059f0 <uhc_enumeration_step15+0x8c>)
  405996:	4798      	blx	r3
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
		for(uint8_t i = 0; i < UHC_NB_UHI; i++) {
  405998:	7bfb      	ldrb	r3, [r7, #15]
  40599a:	3301      	adds	r3, #1
  40599c:	73fb      	strb	r3, [r7, #15]
  40599e:	7bfb      	ldrb	r3, [r7, #15]
  4059a0:	2b00      	cmp	r3, #0
  4059a2:	d0f1      	beq.n	405988 <uhc_enumeration_step15+0x24>
			uhc_uhis[i].uninstall(uhc_dev_enum);
		}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
  4059a4:	79bb      	ldrb	r3, [r7, #6]
  4059a6:	2b01      	cmp	r3, #1
  4059a8:	d101      	bne.n	4059ae <uhc_enumeration_step15+0x4a>
  4059aa:	2307      	movs	r3, #7
  4059ac:	e000      	b.n	4059b0 <uhc_enumeration_step15+0x4c>
  4059ae:	2303      	movs	r3, #3
  4059b0:	4618      	mov	r0, r3
  4059b2:	4b10      	ldr	r3, [pc, #64]	; (4059f4 <uhc_enumeration_step15+0x90>)
  4059b4:	4798      	blx	r3
				UHC_ENUM_DISCONNECT : UHC_ENUM_FAIL);
		return;
  4059b6:	e016      	b.n	4059e6 <uhc_enumeration_step15+0x82>
	}

	// Enable all UHIs supported
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
  4059b8:	2300      	movs	r3, #0
  4059ba:	73bb      	strb	r3, [r7, #14]
  4059bc:	e009      	b.n	4059d2 <uhc_enumeration_step15+0x6e>
		uhc_uhis[i].enable(uhc_dev_enum);
  4059be:	7bbb      	ldrb	r3, [r7, #14]
  4059c0:	4a0a      	ldr	r2, [pc, #40]	; (4059ec <uhc_enumeration_step15+0x88>)
  4059c2:	011b      	lsls	r3, r3, #4
  4059c4:	4413      	add	r3, r2
  4059c6:	685b      	ldr	r3, [r3, #4]
  4059c8:	4809      	ldr	r0, [pc, #36]	; (4059f0 <uhc_enumeration_step15+0x8c>)
  4059ca:	4798      	blx	r3
				UHC_ENUM_DISCONNECT : UHC_ENUM_FAIL);
		return;
	}

	// Enable all UHIs supported
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
  4059cc:	7bbb      	ldrb	r3, [r7, #14]
  4059ce:	3301      	adds	r3, #1
  4059d0:	73bb      	strb	r3, [r7, #14]
  4059d2:	7bbb      	ldrb	r3, [r7, #14]
  4059d4:	2b00      	cmp	r3, #0
  4059d6:	d0f2      	beq.n	4059be <uhc_enumeration_step15+0x5a>
		return;
	}
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;
  4059d8:	4b07      	ldr	r3, [pc, #28]	; (4059f8 <uhc_enumeration_step15+0x94>)
  4059da:	2200      	movs	r2, #0
  4059dc:	701a      	strb	r2, [r3, #0]

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
  4059de:	4804      	ldr	r0, [pc, #16]	; (4059f0 <uhc_enumeration_step15+0x8c>)
  4059e0:	2100      	movs	r1, #0
  4059e2:	4b06      	ldr	r3, [pc, #24]	; (4059fc <uhc_enumeration_step15+0x98>)
  4059e4:	4798      	blx	r3
}
  4059e6:	3710      	adds	r7, #16
  4059e8:	46bd      	mov	sp, r7
  4059ea:	bd80      	pop	{r7, pc}
  4059ec:	2000012c 	.word	0x2000012c
  4059f0:	200194c4 	.word	0x200194c4
  4059f4:	00405a01 	.word	0x00405a01
  4059f8:	200194dc 	.word	0x200194dc
  4059fc:	00403cad 	.word	0x00403cad

00405a00 <uhc_enumeration_error>:
 * \brief Manage error during device enumeration
 *
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
  405a00:	b580      	push	{r7, lr}
  405a02:	b082      	sub	sp, #8
  405a04:	af00      	add	r7, sp, #0
  405a06:	4603      	mov	r3, r0
  405a08:	71fb      	strb	r3, [r7, #7]
	if (status == UHC_ENUM_DISCONNECT) {
  405a0a:	79fb      	ldrb	r3, [r7, #7]
  405a0c:	2b07      	cmp	r3, #7
  405a0e:	d103      	bne.n	405a18 <uhc_enumeration_error+0x18>
		uhc_enum_try = 0;
  405a10:	4b18      	ldr	r3, [pc, #96]	; (405a74 <uhc_enumeration_error+0x74>)
  405a12:	2200      	movs	r2, #0
  405a14:	701a      	strb	r2, [r3, #0]
		return; // Abort enumeration process
  405a16:	e029      	b.n	405a6c <uhc_enumeration_error+0x6c>
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
  405a18:	4b17      	ldr	r3, [pc, #92]	; (405a78 <uhc_enumeration_error+0x78>)
  405a1a:	7c9b      	ldrb	r3, [r3, #18]
  405a1c:	4618      	mov	r0, r3
  405a1e:	21ff      	movs	r1, #255	; 0xff
  405a20:	4b16      	ldr	r3, [pc, #88]	; (405a7c <uhc_enumeration_error+0x7c>)
  405a22:	4798      	blx	r3

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
  405a24:	4b14      	ldr	r3, [pc, #80]	; (405a78 <uhc_enumeration_error+0x78>)
  405a26:	695b      	ldr	r3, [r3, #20]
  405a28:	2b00      	cmp	r3, #0
  405a2a:	d007      	beq.n	405a3c <uhc_enumeration_error+0x3c>
		free(uhc_dev_enum->conf_desc);
  405a2c:	4b12      	ldr	r3, [pc, #72]	; (405a78 <uhc_enumeration_error+0x78>)
  405a2e:	695b      	ldr	r3, [r3, #20]
  405a30:	4618      	mov	r0, r3
  405a32:	4b13      	ldr	r3, [pc, #76]	; (405a80 <uhc_enumeration_error+0x80>)
  405a34:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
  405a36:	4b10      	ldr	r3, [pc, #64]	; (405a78 <uhc_enumeration_error+0x78>)
  405a38:	2200      	movs	r2, #0
  405a3a:	615a      	str	r2, [r3, #20]
	}
	uhc_dev_enum->address = 0;
  405a3c:	4b0e      	ldr	r3, [pc, #56]	; (405a78 <uhc_enumeration_error+0x78>)
  405a3e:	2200      	movs	r2, #0
  405a40:	749a      	strb	r2, [r3, #18]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
  405a42:	4b0c      	ldr	r3, [pc, #48]	; (405a74 <uhc_enumeration_error+0x74>)
  405a44:	781b      	ldrb	r3, [r3, #0]
  405a46:	1c5a      	adds	r2, r3, #1
  405a48:	b2d1      	uxtb	r1, r2
  405a4a:	4a0a      	ldr	r2, [pc, #40]	; (405a74 <uhc_enumeration_error+0x74>)
  405a4c:	7011      	strb	r1, [r2, #0]
  405a4e:	2b03      	cmp	r3, #3
  405a50:	d802      	bhi.n	405a58 <uhc_enumeration_error+0x58>
		// Restart enumeration at beginning
		uhc_enumeration_step1();
  405a52:	4b0c      	ldr	r3, [pc, #48]	; (405a84 <uhc_enumeration_error+0x84>)
  405a54:	4798      	blx	r3
		return;
  405a56:	e009      	b.n	405a6c <uhc_enumeration_error+0x6c>
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
  405a58:	4b0b      	ldr	r3, [pc, #44]	; (405a88 <uhc_enumeration_error+0x88>)
  405a5a:	4798      	blx	r3
	UHC_ENUM_EVENT(uhc_dev_enum, status);
  405a5c:	79fb      	ldrb	r3, [r7, #7]
  405a5e:	4806      	ldr	r0, [pc, #24]	; (405a78 <uhc_enumeration_error+0x78>)
  405a60:	4619      	mov	r1, r3
  405a62:	4b0a      	ldr	r3, [pc, #40]	; (405a8c <uhc_enumeration_error+0x8c>)
  405a64:	4798      	blx	r3
	uhc_enum_try = 0;
  405a66:	4b03      	ldr	r3, [pc, #12]	; (405a74 <uhc_enumeration_error+0x74>)
  405a68:	2200      	movs	r2, #0
  405a6a:	701a      	strb	r2, [r3, #0]
}
  405a6c:	3708      	adds	r7, #8
  405a6e:	46bd      	mov	sp, r7
  405a70:	bd80      	pop	{r7, pc}
  405a72:	bf00      	nop
  405a74:	200194dc 	.word	0x200194dc
  405a78:	200194c4 	.word	0x200194c4
  405a7c:	00408445 	.word	0x00408445
  405a80:	0040a149 	.word	0x0040a149
  405a84:	0040536d 	.word	0x0040536d
  405a88:	00405291 	.word	0x00405291
  405a8c:	00403cad 	.word	0x00403cad

00405a90 <uhc_remotewakeup>:
 * of all devices connected
 *
 * \param b_enable   true to enable remote wakeup feature, else disable.
 */
static void uhc_remotewakeup(bool b_enable)
{
  405a90:	b590      	push	{r4, r7, lr}
  405a92:	b089      	sub	sp, #36	; 0x24
  405a94:	af02      	add	r7, sp, #8
  405a96:	4603      	mov	r3, r0
  405a98:	71fb      	strb	r3, [r7, #7]
	usb_setup_req_t req;
	uhc_device_t *dev;

	dev = &g_uhc_device_root;
  405a9a:	4b15      	ldr	r3, [pc, #84]	; (405af0 <uhc_remotewakeup+0x60>)
  405a9c:	617b      	str	r3, [r7, #20]
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
  405a9e:	697b      	ldr	r3, [r7, #20]
  405aa0:	695b      	ldr	r3, [r3, #20]
  405aa2:	79db      	ldrb	r3, [r3, #7]
  405aa4:	f003 0320 	and.w	r3, r3, #32
  405aa8:	2b00      	cmp	r3, #0
  405aaa:	d01d      	beq.n	405ae8 <uhc_remotewakeup+0x58>
			if (b_enable) {
  405aac:	79fb      	ldrb	r3, [r7, #7]
  405aae:	2b00      	cmp	r3, #0
  405ab0:	d002      	beq.n	405ab8 <uhc_remotewakeup+0x28>
				req.bRequest = USB_REQ_SET_FEATURE;
  405ab2:	2303      	movs	r3, #3
  405ab4:	737b      	strb	r3, [r7, #13]
  405ab6:	e001      	b.n	405abc <uhc_remotewakeup+0x2c>
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
  405ab8:	2301      	movs	r3, #1
  405aba:	737b      	strb	r3, [r7, #13]
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
  405abc:	2300      	movs	r3, #0
  405abe:	733b      	strb	r3, [r7, #12]
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
  405ac0:	2301      	movs	r3, #1
  405ac2:	81fb      	strh	r3, [r7, #14]
			req.wIndex = 0;
  405ac4:	2300      	movs	r3, #0
  405ac6:	823b      	strh	r3, [r7, #16]
			req.wLength = 0;
  405ac8:	2300      	movs	r3, #0
  405aca:	827b      	strh	r3, [r7, #18]
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
  405acc:	697b      	ldr	r3, [r7, #20]
  405ace:	7c99      	ldrb	r1, [r3, #18]
  405ad0:	f107 020c 	add.w	r2, r7, #12
  405ad4:	2300      	movs	r3, #0
  405ad6:	9300      	str	r3, [sp, #0]
  405ad8:	2300      	movs	r3, #0
  405ada:	9301      	str	r3, [sp, #4]
  405adc:	4608      	mov	r0, r1
  405ade:	4611      	mov	r1, r2
  405ae0:	2200      	movs	r2, #0
  405ae2:	2300      	movs	r3, #0
  405ae4:	4c03      	ldr	r4, [pc, #12]	; (405af4 <uhc_remotewakeup+0x64>)
  405ae6:	47a0      	blx	r4
		if (dev->next == NULL) {
			break;
		}
		dev = dev->next;
#else
		break;
  405ae8:	bf00      	nop
#endif
	}
}
  405aea:	371c      	adds	r7, #28
  405aec:	46bd      	mov	sp, r7
  405aee:	bd90      	pop	{r4, r7, pc}
  405af0:	200194c4 	.word	0x200194c4
  405af4:	00408469 	.word	0x00408469

00405af8 <uhc_notify_connection>:
/**
 * \name Callbacks used by USB Host Driver (UHD) to notify events
 * @{
 */
void uhc_notify_connection(bool b_plug)
{
  405af8:	b580      	push	{r7, lr}
  405afa:	b082      	sub	sp, #8
  405afc:	af00      	add	r7, sp, #0
  405afe:	4603      	mov	r3, r0
  405b00:	71fb      	strb	r3, [r7, #7]
	if (b_plug) {
  405b02:	79fb      	ldrb	r3, [r7, #7]
  405b04:	2b00      	cmp	r3, #0
  405b06:	d104      	bne.n	405b12 <uhc_notify_connection+0x1a>

#ifdef USB_HOST_HUB_SUPPORT
		uhc_power_running = 0;
#endif
	} else {
		if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
  405b08:	4b06      	ldr	r3, [pc, #24]	; (405b24 <uhc_notify_connection+0x2c>)
  405b0a:	7c9b      	ldrb	r3, [r3, #18]
  405b0c:	2bff      	cmp	r3, #255	; 0xff
  405b0e:	d100      	bne.n	405b12 <uhc_notify_connection+0x1a>
			// Already disconnected
			// Ignore the noise from host stop process
			return;
  405b10:	e004      	b.n	405b1c <uhc_notify_connection+0x24>
		}
	}
	// Device connection on root
	uhc_connection_tree(b_plug, &g_uhc_device_root);
  405b12:	79fb      	ldrb	r3, [r7, #7]
  405b14:	4618      	mov	r0, r3
  405b16:	4903      	ldr	r1, [pc, #12]	; (405b24 <uhc_notify_connection+0x2c>)
  405b18:	4b03      	ldr	r3, [pc, #12]	; (405b28 <uhc_notify_connection+0x30>)
  405b1a:	4798      	blx	r3
}
  405b1c:	3708      	adds	r7, #8
  405b1e:	46bd      	mov	sp, r7
  405b20:	bd80      	pop	{r7, pc}
  405b22:	bf00      	nop
  405b24:	200194c4 	.word	0x200194c4
  405b28:	004052b9 	.word	0x004052b9

00405b2c <uhc_notify_sof>:

void uhc_notify_sof(bool b_micro)
{
  405b2c:	b580      	push	{r7, lr}
  405b2e:	b084      	sub	sp, #16
  405b30:	af00      	add	r7, sp, #0
  405b32:	4603      	mov	r3, r0
  405b34:	71fb      	strb	r3, [r7, #7]
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
  405b36:	2300      	movs	r3, #0
  405b38:	73fb      	strb	r3, [r7, #15]
  405b3a:	e013      	b.n	405b64 <uhc_notify_sof+0x38>
		if (uhc_uhis[i].sof_notify != NULL) {
  405b3c:	7bfb      	ldrb	r3, [r7, #15]
  405b3e:	4a18      	ldr	r2, [pc, #96]	; (405ba0 <uhc_notify_sof+0x74>)
  405b40:	011b      	lsls	r3, r3, #4
  405b42:	4413      	add	r3, r2
  405b44:	3308      	adds	r3, #8
  405b46:	685b      	ldr	r3, [r3, #4]
  405b48:	2b00      	cmp	r3, #0
  405b4a:	d008      	beq.n	405b5e <uhc_notify_sof+0x32>
			uhc_uhis[i].sof_notify(b_micro);
  405b4c:	7bfb      	ldrb	r3, [r7, #15]
  405b4e:	4a14      	ldr	r2, [pc, #80]	; (405ba0 <uhc_notify_sof+0x74>)
  405b50:	011b      	lsls	r3, r3, #4
  405b52:	4413      	add	r3, r2
  405b54:	3308      	adds	r3, #8
  405b56:	685b      	ldr	r3, [r3, #4]
  405b58:	79fa      	ldrb	r2, [r7, #7]
  405b5a:	4610      	mov	r0, r2
  405b5c:	4798      	blx	r3
}

void uhc_notify_sof(bool b_micro)
{
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
  405b5e:	7bfb      	ldrb	r3, [r7, #15]
  405b60:	3301      	adds	r3, #1
  405b62:	73fb      	strb	r3, [r7, #15]
  405b64:	7bfb      	ldrb	r3, [r7, #15]
  405b66:	2b00      	cmp	r3, #0
  405b68:	d0e8      	beq.n	405b3c <uhc_notify_sof+0x10>
		if (uhc_uhis[i].sof_notify != NULL) {
			uhc_uhis[i].sof_notify(b_micro);
		}
	}

	if (!b_micro) {
  405b6a:	79fb      	ldrb	r3, [r7, #7]
  405b6c:	f083 0301 	eor.w	r3, r3, #1
  405b70:	b2db      	uxtb	r3, r3
  405b72:	2b00      	cmp	r3, #0
  405b74:	d010      	beq.n	405b98 <uhc_notify_sof+0x6c>
		// Manage SOF timeout
		if (uhc_sof_timeout) {
  405b76:	4b0b      	ldr	r3, [pc, #44]	; (405ba4 <uhc_notify_sof+0x78>)
  405b78:	781b      	ldrb	r3, [r3, #0]
  405b7a:	2b00      	cmp	r3, #0
  405b7c:	d00c      	beq.n	405b98 <uhc_notify_sof+0x6c>
			if (--uhc_sof_timeout == 0) {
  405b7e:	4b09      	ldr	r3, [pc, #36]	; (405ba4 <uhc_notify_sof+0x78>)
  405b80:	781b      	ldrb	r3, [r3, #0]
  405b82:	3b01      	subs	r3, #1
  405b84:	b2da      	uxtb	r2, r3
  405b86:	4b07      	ldr	r3, [pc, #28]	; (405ba4 <uhc_notify_sof+0x78>)
  405b88:	701a      	strb	r2, [r3, #0]
  405b8a:	4b06      	ldr	r3, [pc, #24]	; (405ba4 <uhc_notify_sof+0x78>)
  405b8c:	781b      	ldrb	r3, [r3, #0]
  405b8e:	2b00      	cmp	r3, #0
  405b90:	d102      	bne.n	405b98 <uhc_notify_sof+0x6c>
				uhc_sof_timeout_callback();
  405b92:	4b05      	ldr	r3, [pc, #20]	; (405ba8 <uhc_notify_sof+0x7c>)
  405b94:	681b      	ldr	r3, [r3, #0]
  405b96:	4798      	blx	r3
			}
		}
	}
}
  405b98:	3710      	adds	r7, #16
  405b9a:	46bd      	mov	sp, r7
  405b9c:	bd80      	pop	{r7, pc}
  405b9e:	bf00      	nop
  405ba0:	2000012c 	.word	0x2000012c
  405ba4:	2001c402 	.word	0x2001c402
  405ba8:	200194e0 	.word	0x200194e0

00405bac <uhc_notify_resume>:

void uhc_notify_resume(void)
{
  405bac:	b580      	push	{r7, lr}
  405bae:	af00      	add	r7, sp, #0
	uhc_remotewakeup(false);
  405bb0:	2000      	movs	r0, #0
  405bb2:	4b02      	ldr	r3, [pc, #8]	; (405bbc <uhc_notify_resume+0x10>)
  405bb4:	4798      	blx	r3
	UHC_WAKEUP_EVENT();
  405bb6:	4b02      	ldr	r3, [pc, #8]	; (405bc0 <uhc_notify_resume+0x14>)
  405bb8:	4798      	blx	r3
}
  405bba:	bd80      	pop	{r7, pc}
  405bbc:	00405a91 	.word	0x00405a91
  405bc0:	00403d5d 	.word	0x00403d5d

00405bc4 <uhc_start>:
 * \name Functions to control the USB host stack
 *
 * @{
 */
void uhc_start(void)
{
  405bc4:	b580      	push	{r7, lr}
  405bc6:	af00      	add	r7, sp, #0
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
  405bc8:	4b04      	ldr	r3, [pc, #16]	; (405bdc <uhc_start+0x18>)
  405bca:	22ff      	movs	r2, #255	; 0xff
  405bcc:	749a      	strb	r2, [r3, #18]
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
  405bce:	4b04      	ldr	r3, [pc, #16]	; (405be0 <uhc_start+0x1c>)
  405bd0:	2200      	movs	r2, #0
  405bd2:	701a      	strb	r2, [r3, #0]
	uhd_enable();
  405bd4:	4b03      	ldr	r3, [pc, #12]	; (405be4 <uhc_start+0x20>)
  405bd6:	4798      	blx	r3
}
  405bd8:	bd80      	pop	{r7, pc}
  405bda:	bf00      	nop
  405bdc:	200194c4 	.word	0x200194c4
  405be0:	2001c402 	.word	0x2001c402
  405be4:	00408199 	.word	0x00408199

00405be8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  405be8:	b480      	push	{r7}
  405bea:	b083      	sub	sp, #12
  405bec:	af00      	add	r7, sp, #0
  405bee:	4603      	mov	r3, r0
  405bf0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405bf2:	4908      	ldr	r1, [pc, #32]	; (405c14 <NVIC_EnableIRQ+0x2c>)
  405bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405bf8:	095b      	lsrs	r3, r3, #5
  405bfa:	79fa      	ldrb	r2, [r7, #7]
  405bfc:	f002 021f 	and.w	r2, r2, #31
  405c00:	2001      	movs	r0, #1
  405c02:	fa00 f202 	lsl.w	r2, r0, r2
  405c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  405c0a:	370c      	adds	r7, #12
  405c0c:	46bd      	mov	sp, r7
  405c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c12:	4770      	bx	lr
  405c14:	e000e100 	.word	0xe000e100

00405c18 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  405c18:	b580      	push	{r7, lr}
  405c1a:	b082      	sub	sp, #8
  405c1c:	af00      	add	r7, sp, #0
  405c1e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  405c20:	6878      	ldr	r0, [r7, #4]
  405c22:	4b02      	ldr	r3, [pc, #8]	; (405c2c <sysclk_enable_peripheral_clock+0x14>)
  405c24:	4798      	blx	r3
}
  405c26:	3708      	adds	r7, #8
  405c28:	46bd      	mov	sp, r7
  405c2a:	bd80      	pop	{r7, pc}
  405c2c:	00406841 	.word	0x00406841

00405c30 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  405c30:	b580      	push	{r7, lr}
  405c32:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  405c34:	200b      	movs	r0, #11
  405c36:	4b03      	ldr	r3, [pc, #12]	; (405c44 <ioport_init+0x14>)
  405c38:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  405c3a:	200c      	movs	r0, #12
  405c3c:	4b01      	ldr	r3, [pc, #4]	; (405c44 <ioport_init+0x14>)
  405c3e:	4798      	blx	r3
	arch_ioport_init();
}
  405c40:	bd80      	pop	{r7, pc}
  405c42:	bf00      	nop
  405c44:	00405c19 	.word	0x00405c19

00405c48 <ioport_disable_port>:
 * \param port IOPORT port to disable
 * \param mask Pin mask of pins to disable
 */
static inline void ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
  405c48:	b480      	push	{r7}
  405c4a:	b087      	sub	sp, #28
  405c4c:	af00      	add	r7, sp, #0
  405c4e:	6078      	str	r0, [r7, #4]
  405c50:	6039      	str	r1, [r7, #0]
  405c52:	687b      	ldr	r3, [r7, #4]
  405c54:	617b      	str	r3, [r7, #20]
  405c56:	683b      	ldr	r3, [r7, #0]
  405c58:	613b      	str	r3, [r7, #16]
  405c5a:	697b      	ldr	r3, [r7, #20]
  405c5c:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405c5e:	68fb      	ldr	r3, [r7, #12]
  405c60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405c64:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405c68:	025b      	lsls	r3, r3, #9
  405c6a:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405c6c:	693b      	ldr	r3, [r7, #16]
  405c6e:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_port(port, mask);
}
  405c70:	371c      	adds	r7, #28
  405c72:	46bd      	mov	sp, r7
  405c74:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c78:	4770      	bx	lr
  405c7a:	bf00      	nop

00405c7c <ioport_set_port_mode>:
 * \param mode Mode masks to configure for the specified pins (\ref
 * ioport_modes)
 */
static inline void ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
  405c7c:	b480      	push	{r7}
  405c7e:	b08b      	sub	sp, #44	; 0x2c
  405c80:	af00      	add	r7, sp, #0
  405c82:	60f8      	str	r0, [r7, #12]
  405c84:	60b9      	str	r1, [r7, #8]
  405c86:	607a      	str	r2, [r7, #4]
  405c88:	68fb      	ldr	r3, [r7, #12]
  405c8a:	627b      	str	r3, [r7, #36]	; 0x24
  405c8c:	68bb      	ldr	r3, [r7, #8]
  405c8e:	623b      	str	r3, [r7, #32]
  405c90:	687b      	ldr	r3, [r7, #4]
  405c92:	61fb      	str	r3, [r7, #28]
  405c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405c96:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405c98:	69bb      	ldr	r3, [r7, #24]
  405c9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405c9e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405ca2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  405ca4:	617b      	str	r3, [r7, #20]

	if (mode & IOPORT_MODE_PULLUP) {
  405ca6:	69fb      	ldr	r3, [r7, #28]
  405ca8:	f003 0308 	and.w	r3, r3, #8
  405cac:	2b00      	cmp	r3, #0
  405cae:	d003      	beq.n	405cb8 <ioport_set_port_mode+0x3c>
		base->PIO_PUER = mask;
  405cb0:	697b      	ldr	r3, [r7, #20]
  405cb2:	6a3a      	ldr	r2, [r7, #32]
  405cb4:	665a      	str	r2, [r3, #100]	; 0x64
  405cb6:	e002      	b.n	405cbe <ioport_set_port_mode+0x42>
	} else {
		base->PIO_PUDR = mask;
  405cb8:	697b      	ldr	r3, [r7, #20]
  405cba:	6a3a      	ldr	r2, [r7, #32]
  405cbc:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  405cbe:	69fb      	ldr	r3, [r7, #28]
  405cc0:	f003 0310 	and.w	r3, r3, #16
  405cc4:	2b00      	cmp	r3, #0
  405cc6:	d004      	beq.n	405cd2 <ioport_set_port_mode+0x56>
		base->PIO_PPDER = mask;
  405cc8:	697b      	ldr	r3, [r7, #20]
  405cca:	6a3a      	ldr	r2, [r7, #32]
  405ccc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  405cd0:	e003      	b.n	405cda <ioport_set_port_mode+0x5e>
	} else {
		base->PIO_PPDDR = mask;
  405cd2:	697b      	ldr	r3, [r7, #20]
  405cd4:	6a3a      	ldr	r2, [r7, #32]
  405cd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  405cda:	69fb      	ldr	r3, [r7, #28]
  405cdc:	f003 0320 	and.w	r3, r3, #32
  405ce0:	2b00      	cmp	r3, #0
  405ce2:	d003      	beq.n	405cec <ioport_set_port_mode+0x70>
		base->PIO_MDER = mask;
  405ce4:	697b      	ldr	r3, [r7, #20]
  405ce6:	6a3a      	ldr	r2, [r7, #32]
  405ce8:	651a      	str	r2, [r3, #80]	; 0x50
  405cea:	e002      	b.n	405cf2 <ioport_set_port_mode+0x76>
	} else {
		base->PIO_MDDR = mask;
  405cec:	697b      	ldr	r3, [r7, #20]
  405cee:	6a3a      	ldr	r2, [r7, #32]
  405cf0:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  405cf2:	69fb      	ldr	r3, [r7, #28]
  405cf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  405cf8:	2b00      	cmp	r3, #0
  405cfa:	d003      	beq.n	405d04 <ioport_set_port_mode+0x88>
		base->PIO_IFER = mask;
  405cfc:	697b      	ldr	r3, [r7, #20]
  405cfe:	6a3a      	ldr	r2, [r7, #32]
  405d00:	621a      	str	r2, [r3, #32]
  405d02:	e002      	b.n	405d0a <ioport_set_port_mode+0x8e>
	} else {
		base->PIO_IFDR = mask;
  405d04:	697b      	ldr	r3, [r7, #20]
  405d06:	6a3a      	ldr	r2, [r7, #32]
  405d08:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  405d0a:	69fb      	ldr	r3, [r7, #28]
  405d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405d10:	2b00      	cmp	r3, #0
  405d12:	d004      	beq.n	405d1e <ioport_set_port_mode+0xa2>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  405d14:	697b      	ldr	r3, [r7, #20]
  405d16:	6a3a      	ldr	r2, [r7, #32]
  405d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  405d1c:	e003      	b.n	405d26 <ioport_set_port_mode+0xaa>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  405d1e:	697b      	ldr	r3, [r7, #20]
  405d20:	6a3a      	ldr	r2, [r7, #32]
  405d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  405d26:	69fb      	ldr	r3, [r7, #28]
  405d28:	f003 0301 	and.w	r3, r3, #1
  405d2c:	2b00      	cmp	r3, #0
  405d2e:	d006      	beq.n	405d3e <ioport_set_port_mode+0xc2>
		base->PIO_ABCDSR[0] |= mask;
  405d30:	697b      	ldr	r3, [r7, #20]
  405d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405d34:	6a3b      	ldr	r3, [r7, #32]
  405d36:	431a      	orrs	r2, r3
  405d38:	697b      	ldr	r3, [r7, #20]
  405d3a:	671a      	str	r2, [r3, #112]	; 0x70
  405d3c:	e006      	b.n	405d4c <ioport_set_port_mode+0xd0>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  405d3e:	697b      	ldr	r3, [r7, #20]
  405d40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405d42:	6a3b      	ldr	r3, [r7, #32]
  405d44:	43db      	mvns	r3, r3
  405d46:	401a      	ands	r2, r3
  405d48:	697b      	ldr	r3, [r7, #20]
  405d4a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  405d4c:	69fb      	ldr	r3, [r7, #28]
  405d4e:	f003 0302 	and.w	r3, r3, #2
  405d52:	2b00      	cmp	r3, #0
  405d54:	d006      	beq.n	405d64 <ioport_set_port_mode+0xe8>
		base->PIO_ABCDSR[1] |= mask;
  405d56:	697b      	ldr	r3, [r7, #20]
  405d58:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405d5a:	6a3b      	ldr	r3, [r7, #32]
  405d5c:	431a      	orrs	r2, r3
  405d5e:	697b      	ldr	r3, [r7, #20]
  405d60:	675a      	str	r2, [r3, #116]	; 0x74
  405d62:	e006      	b.n	405d72 <ioport_set_port_mode+0xf6>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  405d64:	697b      	ldr	r3, [r7, #20]
  405d66:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405d68:	6a3b      	ldr	r3, [r7, #32]
  405d6a:	43db      	mvns	r3, r3
  405d6c:	401a      	ands	r2, r3
  405d6e:	697b      	ldr	r3, [r7, #20]
  405d70:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_port_mode(port, mask, mode);
}
  405d72:	372c      	adds	r7, #44	; 0x2c
  405d74:	46bd      	mov	sp, r7
  405d76:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d7a:	4770      	bx	lr

00405d7c <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  405d7c:	b480      	push	{r7}
  405d7e:	b08d      	sub	sp, #52	; 0x34
  405d80:	af00      	add	r7, sp, #0
  405d82:	6078      	str	r0, [r7, #4]
  405d84:	460b      	mov	r3, r1
  405d86:	70fb      	strb	r3, [r7, #3]
  405d88:	687b      	ldr	r3, [r7, #4]
  405d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  405d8c:	78fb      	ldrb	r3, [r7, #3]
  405d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  405d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405d94:	627b      	str	r3, [r7, #36]	; 0x24
  405d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405d98:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  405d9a:	6a3b      	ldr	r3, [r7, #32]
  405d9c:	095b      	lsrs	r3, r3, #5
  405d9e:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405da0:	69fb      	ldr	r3, [r7, #28]
  405da2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405da6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405daa:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  405dac:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  405dae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  405db2:	2b01      	cmp	r3, #1
  405db4:	d109      	bne.n	405dca <ioport_set_pin_dir+0x4e>
  405db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405db8:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  405dba:	697b      	ldr	r3, [r7, #20]
  405dbc:	f003 031f 	and.w	r3, r3, #31
  405dc0:	2201      	movs	r2, #1
  405dc2:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405dc4:	69bb      	ldr	r3, [r7, #24]
  405dc6:	611a      	str	r2, [r3, #16]
  405dc8:	e00c      	b.n	405de4 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  405dca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  405dce:	2b00      	cmp	r3, #0
  405dd0:	d108      	bne.n	405de4 <ioport_set_pin_dir+0x68>
  405dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405dd4:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  405dd6:	693b      	ldr	r3, [r7, #16]
  405dd8:	f003 031f 	and.w	r3, r3, #31
  405ddc:	2201      	movs	r2, #1
  405dde:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  405de0:	69bb      	ldr	r3, [r7, #24]
  405de2:	615a      	str	r2, [r3, #20]
  405de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405de6:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  405de8:	68fb      	ldr	r3, [r7, #12]
  405dea:	f003 031f 	and.w	r3, r3, #31
  405dee:	2201      	movs	r2, #1
  405df0:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405df2:	69bb      	ldr	r3, [r7, #24]
  405df4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  405df8:	3734      	adds	r7, #52	; 0x34
  405dfa:	46bd      	mov	sp, r7
  405dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e00:	4770      	bx	lr
  405e02:	bf00      	nop

00405e04 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  405e04:	b480      	push	{r7}
  405e06:	b08b      	sub	sp, #44	; 0x2c
  405e08:	af00      	add	r7, sp, #0
  405e0a:	6078      	str	r0, [r7, #4]
  405e0c:	460b      	mov	r3, r1
  405e0e:	70fb      	strb	r3, [r7, #3]
  405e10:	687b      	ldr	r3, [r7, #4]
  405e12:	627b      	str	r3, [r7, #36]	; 0x24
  405e14:	78fb      	ldrb	r3, [r7, #3]
  405e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  405e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405e1c:	61fb      	str	r3, [r7, #28]
  405e1e:	69fb      	ldr	r3, [r7, #28]
  405e20:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  405e22:	69bb      	ldr	r3, [r7, #24]
  405e24:	095b      	lsrs	r3, r3, #5
  405e26:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405e28:	697b      	ldr	r3, [r7, #20]
  405e2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405e2e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405e32:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  405e34:	613b      	str	r3, [r7, #16]

	if (level) {
  405e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  405e3a:	2b00      	cmp	r3, #0
  405e3c:	d009      	beq.n	405e52 <ioport_set_pin_level+0x4e>
  405e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405e40:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  405e42:	68fb      	ldr	r3, [r7, #12]
  405e44:	f003 031f 	and.w	r3, r3, #31
  405e48:	2201      	movs	r2, #1
  405e4a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405e4c:	693b      	ldr	r3, [r7, #16]
  405e4e:	631a      	str	r2, [r3, #48]	; 0x30
  405e50:	e008      	b.n	405e64 <ioport_set_pin_level+0x60>
  405e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405e54:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  405e56:	68bb      	ldr	r3, [r7, #8]
  405e58:	f003 031f 	and.w	r3, r3, #31
  405e5c:	2201      	movs	r2, #1
  405e5e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  405e60:	693b      	ldr	r3, [r7, #16]
  405e62:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  405e64:	372c      	adds	r7, #44	; 0x2c
  405e66:	46bd      	mov	sp, r7
  405e68:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e6c:	4770      	bx	lr
  405e6e:	bf00      	nop

00405e70 <system_board_init>:
#endif

static void Button1_Handler(uint32_t id, uint32_t mask);

void system_board_init(void)
{
  405e70:	b590      	push	{r4, r7, lr}
  405e72:	b083      	sub	sp, #12
  405e74:	af02      	add	r7, sp, #8

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  405e76:	4b2c      	ldr	r3, [pc, #176]	; (405f28 <system_board_init+0xb8>)
  405e78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405e7c:	605a      	str	r2, [r3, #4]
#endif
	ioport_init();
  405e7e:	4b2b      	ldr	r3, [pc, #172]	; (405f2c <system_board_init+0xbc>)
  405e80:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
  405e82:	201e      	movs	r0, #30
  405e84:	2101      	movs	r1, #1
  405e86:	4b2a      	ldr	r3, [pc, #168]	; (405f30 <system_board_init+0xc0>)
  405e88:	4798      	blx	r3
	ioport_set_pin_level(LED_0_PIN, IOPORT_PIN_LEVEL_LOW);
  405e8a:	201e      	movs	r0, #30
  405e8c:	2100      	movs	r1, #0
  405e8e:	4b29      	ldr	r3, [pc, #164]	; (405f34 <system_board_init+0xc4>)
  405e90:	4798      	blx	r3
	
	/* Initialize LED0, turned off */
	ioport_set_pin_dir(LED_1_PIN, IOPORT_DIR_OUTPUT);
  405e92:	2010      	movs	r0, #16
  405e94:	2101      	movs	r1, #1
  405e96:	4b26      	ldr	r3, [pc, #152]	; (405f30 <system_board_init+0xc0>)
  405e98:	4798      	blx	r3
	ioport_set_pin_level(LED_1_PIN, IOPORT_PIN_LEVEL_LOW);
  405e9a:	2010      	movs	r0, #16
  405e9c:	2100      	movs	r1, #0
  405e9e:	4b25      	ldr	r3, [pc, #148]	; (405f34 <system_board_init+0xc4>)
  405ea0:	4798      	blx	r3
	
		
	ioport_set_pin_dir(ESP_PIN_RESET, IOPORT_DIR_OUTPUT);
  405ea2:	2021      	movs	r0, #33	; 0x21
  405ea4:	2101      	movs	r1, #1
  405ea6:	4b22      	ldr	r3, [pc, #136]	; (405f30 <system_board_init+0xc0>)
  405ea8:	4798      	blx	r3
	ioport_set_pin_level(ESP_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
  405eaa:	2021      	movs	r0, #33	; 0x21
  405eac:	2101      	movs	r1, #1
  405eae:	4b21      	ldr	r3, [pc, #132]	; (405f34 <system_board_init+0xc4>)
  405eb0:	4798      	blx	r3

	/* Initialize SW0 */
	//ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  405eb2:	4821      	ldr	r0, [pc, #132]	; (405f38 <system_board_init+0xc8>)
  405eb4:	2101      	movs	r1, #1
  405eb6:	220a      	movs	r2, #10
  405eb8:	4b20      	ldr	r3, [pc, #128]	; (405f3c <system_board_init+0xcc>)
  405eba:	4798      	blx	r3
	/* Interrupt on rising edge  */
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  405ebc:	4b20      	ldr	r3, [pc, #128]	; (405f40 <system_board_init+0xd0>)
  405ebe:	9300      	str	r3, [sp, #0]
  405ec0:	481d      	ldr	r0, [pc, #116]	; (405f38 <system_board_init+0xc8>)
  405ec2:	210c      	movs	r1, #12
  405ec4:	2201      	movs	r2, #1
  405ec6:	2359      	movs	r3, #89	; 0x59
  405ec8:	4c1e      	ldr	r4, [pc, #120]	; (405f44 <system_board_init+0xd4>)
  405eca:	47a0      	blx	r4
	PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
  405ecc:	200c      	movs	r0, #12
  405ece:	4b1e      	ldr	r3, [pc, #120]	; (405f48 <system_board_init+0xd8>)
  405ed0:	4798      	blx	r3
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO,
  405ed2:	4819      	ldr	r0, [pc, #100]	; (405f38 <system_board_init+0xc8>)
  405ed4:	210c      	movs	r1, #12
  405ed6:	2200      	movs	r2, #0
  405ed8:	4b1c      	ldr	r3, [pc, #112]	; (405f4c <system_board_init+0xdc>)
  405eda:	4798      	blx	r3
	(IRQn_Type) PIN_PUSHBUTTON_1_ID, 0);
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  405edc:	4816      	ldr	r0, [pc, #88]	; (405f38 <system_board_init+0xc8>)
  405ede:	2101      	movs	r1, #1
  405ee0:	4b1b      	ldr	r3, [pc, #108]	; (405f50 <system_board_init+0xe0>)
  405ee2:	4798      	blx	r3

#if defined (CONF_BOARD_UART_CONSOLE)
	/* Configure UART pins */
	ioport_set_port_peripheral_mode(PINS_USART4_PORT, PINS_USART4,
  405ee4:	2001      	movs	r0, #1
  405ee6:	f44f 7140 	mov.w	r1, #768	; 0x300
  405eea:	2200      	movs	r2, #0
  405eec:	4b19      	ldr	r3, [pc, #100]	; (405f54 <system_board_init+0xe4>)
  405eee:	4798      	blx	r3
  405ef0:	2001      	movs	r0, #1
  405ef2:	f44f 7140 	mov.w	r1, #768	; 0x300
  405ef6:	4b18      	ldr	r3, [pc, #96]	; (405f58 <system_board_init+0xe8>)
  405ef8:	4798      	blx	r3
#endif


	
	//usart0 for wifi serial	
	ioport_set_port_peripheral_mode(PINS_USART0_PORT, PINS_USART0,PINS_USART0_FLAGS);
  405efa:	2000      	movs	r0, #0
  405efc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  405f00:	2200      	movs	r2, #0
  405f02:	4b14      	ldr	r3, [pc, #80]	; (405f54 <system_board_init+0xe4>)
  405f04:	4798      	blx	r3
  405f06:	2000      	movs	r0, #0
  405f08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  405f0c:	4b12      	ldr	r3, [pc, #72]	; (405f58 <system_board_init+0xe8>)
  405f0e:	4798      	blx	r3
		
	// Temperature sensor UART
	ioport_set_port_peripheral_mode(PINS_USART3_PORT, PINS_USART3, PINS_USART3_FLAGS);
  405f10:	2000      	movs	r0, #0
  405f12:	2118      	movs	r1, #24
  405f14:	2200      	movs	r2, #0
  405f16:	4b0f      	ldr	r3, [pc, #60]	; (405f54 <system_board_init+0xe4>)
  405f18:	4798      	blx	r3
  405f1a:	2000      	movs	r0, #0
  405f1c:	2118      	movs	r1, #24
  405f1e:	4b0e      	ldr	r3, [pc, #56]	; (405f58 <system_board_init+0xe8>)
  405f20:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif
}
  405f22:	3704      	adds	r7, #4
  405f24:	46bd      	mov	sp, r7
  405f26:	bd90      	pop	{r4, r7, pc}
  405f28:	400e1450 	.word	0x400e1450
  405f2c:	00405c31 	.word	0x00405c31
  405f30:	00405d7d 	.word	0x00405d7d
  405f34:	00405e05 	.word	0x00405e05
  405f38:	400e1000 	.word	0x400e1000
  405f3c:	00406221 	.word	0x00406221
  405f40:	00405f5d 	.word	0x00405f5d
  405f44:	004064c9 	.word	0x004064c9
  405f48:	00405be9 	.word	0x00405be9
  405f4c:	00406561 	.word	0x00406561
  405f50:	004062c5 	.word	0x004062c5
  405f54:	00405c7d 	.word	0x00405c7d
  405f58:	00405c49 	.word	0x00405c49

00405f5c <Button1_Handler>:
 *
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
  405f5c:	b580      	push	{r7, lr}
  405f5e:	b082      	sub	sp, #8
  405f60:	af00      	add	r7, sp, #0
  405f62:	6078      	str	r0, [r7, #4]
  405f64:	6039      	str	r1, [r7, #0]
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {	
  405f66:	687b      	ldr	r3, [r7, #4]
  405f68:	2b0c      	cmp	r3, #12
  405f6a:	d104      	bne.n	405f76 <Button1_Handler+0x1a>
  405f6c:	683b      	ldr	r3, [r7, #0]
  405f6e:	2b01      	cmp	r3, #1
  405f70:	d101      	bne.n	405f76 <Button1_Handler+0x1a>
		extern void vFNBtton_Click_Hook( void );
		vFNBtton_Click_Hook();
  405f72:	4b02      	ldr	r3, [pc, #8]	; (405f7c <Button1_Handler+0x20>)
  405f74:	4798      	blx	r3
	}
}
  405f76:	3708      	adds	r7, #8
  405f78:	46bd      	mov	sp, r7
  405f7a:	bd80      	pop	{r7, pc}
  405f7c:	004012dd 	.word	0x004012dd

00405f80 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  405f80:	b480      	push	{r7}
  405f82:	b083      	sub	sp, #12
  405f84:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405f86:	f3ef 8310 	mrs	r3, PRIMASK
  405f8a:	603b      	str	r3, [r7, #0]
  return(result);
  405f8c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  405f8e:	2b00      	cmp	r3, #0
  405f90:	bf0c      	ite	eq
  405f92:	2301      	moveq	r3, #1
  405f94:	2300      	movne	r3, #0
  405f96:	b2db      	uxtb	r3, r3
  405f98:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  405f9a:	b672      	cpsid	i
  405f9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405fa0:	4b04      	ldr	r3, [pc, #16]	; (405fb4 <cpu_irq_save+0x34>)
  405fa2:	2200      	movs	r2, #0
  405fa4:	701a      	strb	r2, [r3, #0]
	return flags;
  405fa6:	687b      	ldr	r3, [r7, #4]
}
  405fa8:	4618      	mov	r0, r3
  405faa:	370c      	adds	r7, #12
  405fac:	46bd      	mov	sp, r7
  405fae:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fb2:	4770      	bx	lr
  405fb4:	2000013c 	.word	0x2000013c

00405fb8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  405fb8:	b480      	push	{r7}
  405fba:	b083      	sub	sp, #12
  405fbc:	af00      	add	r7, sp, #0
  405fbe:	6078      	str	r0, [r7, #4]
	return (flags);
  405fc0:	687b      	ldr	r3, [r7, #4]
  405fc2:	2b00      	cmp	r3, #0
  405fc4:	bf14      	ite	ne
  405fc6:	2301      	movne	r3, #1
  405fc8:	2300      	moveq	r3, #0
  405fca:	b2db      	uxtb	r3, r3
}
  405fcc:	4618      	mov	r0, r3
  405fce:	370c      	adds	r7, #12
  405fd0:	46bd      	mov	sp, r7
  405fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fd6:	4770      	bx	lr

00405fd8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  405fd8:	b580      	push	{r7, lr}
  405fda:	b082      	sub	sp, #8
  405fdc:	af00      	add	r7, sp, #0
  405fde:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  405fe0:	6878      	ldr	r0, [r7, #4]
  405fe2:	4b07      	ldr	r3, [pc, #28]	; (406000 <cpu_irq_restore+0x28>)
  405fe4:	4798      	blx	r3
  405fe6:	4603      	mov	r3, r0
  405fe8:	2b00      	cmp	r3, #0
  405fea:	d005      	beq.n	405ff8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  405fec:	4b05      	ldr	r3, [pc, #20]	; (406004 <cpu_irq_restore+0x2c>)
  405fee:	2201      	movs	r2, #1
  405ff0:	701a      	strb	r2, [r3, #0]
  405ff2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  405ff6:	b662      	cpsie	i
}
  405ff8:	3708      	adds	r7, #8
  405ffa:	46bd      	mov	sp, r7
  405ffc:	bd80      	pop	{r7, pc}
  405ffe:	bf00      	nop
  406000:	00405fb9 	.word	0x00405fb9
  406004:	2000013c 	.word	0x2000013c

00406008 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  406008:	b580      	push	{r7, lr}
  40600a:	b082      	sub	sp, #8
  40600c:	af00      	add	r7, sp, #0
  40600e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  406010:	6878      	ldr	r0, [r7, #4]
  406012:	4b02      	ldr	r3, [pc, #8]	; (40601c <sysclk_enable_peripheral_clock+0x14>)
  406014:	4798      	blx	r3
}
  406016:	3708      	adds	r7, #8
  406018:	46bd      	mov	sp, r7
  40601a:	bd80      	pop	{r7, pc}
  40601c:	00406841 	.word	0x00406841

00406020 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  406020:	b580      	push	{r7, lr}
  406022:	b084      	sub	sp, #16
  406024:	af00      	add	r7, sp, #0
  406026:	4603      	mov	r3, r0
  406028:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40602a:	79fb      	ldrb	r3, [r7, #7]
  40602c:	4a0a      	ldr	r2, [pc, #40]	; (406058 <sleepmgr_lock_mode+0x38>)
  40602e:	5cd3      	ldrb	r3, [r2, r3]
  406030:	2bff      	cmp	r3, #255	; 0xff
  406032:	d100      	bne.n	406036 <sleepmgr_lock_mode+0x16>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
  406034:	e7fe      	b.n	406034 <sleepmgr_lock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
  406036:	4b09      	ldr	r3, [pc, #36]	; (40605c <sleepmgr_lock_mode+0x3c>)
  406038:	4798      	blx	r3
  40603a:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  40603c:	79fb      	ldrb	r3, [r7, #7]
  40603e:	4a06      	ldr	r2, [pc, #24]	; (406058 <sleepmgr_lock_mode+0x38>)
  406040:	5cd2      	ldrb	r2, [r2, r3]
  406042:	3201      	adds	r2, #1
  406044:	b2d1      	uxtb	r1, r2
  406046:	4a04      	ldr	r2, [pc, #16]	; (406058 <sleepmgr_lock_mode+0x38>)
  406048:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  40604a:	68f8      	ldr	r0, [r7, #12]
  40604c:	4b04      	ldr	r3, [pc, #16]	; (406060 <sleepmgr_lock_mode+0x40>)
  40604e:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  406050:	3710      	adds	r7, #16
  406052:	46bd      	mov	sp, r7
  406054:	bd80      	pop	{r7, pc}
  406056:	bf00      	nop
  406058:	2001c3fc 	.word	0x2001c3fc
  40605c:	00405f81 	.word	0x00405f81
  406060:	00405fd9 	.word	0x00405fd9

00406064 <flexcom_enable>:
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  406064:	b580      	push	{r7, lr}
  406066:	b082      	sub	sp, #8
  406068:	af00      	add	r7, sp, #0
  40606a:	6078      	str	r0, [r7, #4]
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
  40606c:	2000      	movs	r0, #0
  40606e:	4b4a      	ldr	r3, [pc, #296]	; (406198 <flexcom_enable+0x134>)
  406070:	4798      	blx	r3
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  406072:	687b      	ldr	r3, [r7, #4]
  406074:	4a49      	ldr	r2, [pc, #292]	; (40619c <flexcom_enable+0x138>)
  406076:	4293      	cmp	r3, r2
  406078:	d10d      	bne.n	406096 <flexcom_enable+0x32>
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
  40607a:	2007      	movs	r0, #7
  40607c:	4b48      	ldr	r3, [pc, #288]	; (4061a0 <flexcom_enable+0x13c>)
  40607e:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  406080:	2007      	movs	r0, #7
  406082:	4b48      	ldr	r3, [pc, #288]	; (4061a4 <flexcom_enable+0x140>)
  406084:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  406086:	2007      	movs	r0, #7
  406088:	2100      	movs	r1, #0
  40608a:	4b47      	ldr	r3, [pc, #284]	; (4061a8 <flexcom_enable+0x144>)
  40608c:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  40608e:	2007      	movs	r0, #7
  406090:	4b46      	ldr	r3, [pc, #280]	; (4061ac <flexcom_enable+0x148>)
  406092:	4798      	blx	r3
  406094:	e07c      	b.n	406190 <flexcom_enable+0x12c>
	} else
#endif
#ifdef ID_FLEXCOM6
	if (p_flexcom == FLEXCOM6) {
  406096:	687b      	ldr	r3, [r7, #4]
  406098:	4a45      	ldr	r2, [pc, #276]	; (4061b0 <flexcom_enable+0x14c>)
  40609a:	4293      	cmp	r3, r2
  40609c:	d10d      	bne.n	4060ba <flexcom_enable+0x56>
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
  40609e:	2016      	movs	r0, #22
  4060a0:	4b3f      	ldr	r3, [pc, #252]	; (4061a0 <flexcom_enable+0x13c>)
  4060a2:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  4060a4:	2007      	movs	r0, #7
  4060a6:	4b3f      	ldr	r3, [pc, #252]	; (4061a4 <flexcom_enable+0x140>)
  4060a8:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4060aa:	2007      	movs	r0, #7
  4060ac:	2100      	movs	r1, #0
  4060ae:	4b3e      	ldr	r3, [pc, #248]	; (4061a8 <flexcom_enable+0x144>)
  4060b0:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4060b2:	2007      	movs	r0, #7
  4060b4:	4b3d      	ldr	r3, [pc, #244]	; (4061ac <flexcom_enable+0x148>)
  4060b6:	4798      	blx	r3
  4060b8:	e06a      	b.n	406190 <flexcom_enable+0x12c>
	} else
#endif
#ifdef ID_FLEXCOM5
	if (p_flexcom == FLEXCOM5) {
  4060ba:	687b      	ldr	r3, [r7, #4]
  4060bc:	4a3d      	ldr	r2, [pc, #244]	; (4061b4 <flexcom_enable+0x150>)
  4060be:	4293      	cmp	r3, r2
  4060c0:	d10d      	bne.n	4060de <flexcom_enable+0x7a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
  4060c2:	2015      	movs	r0, #21
  4060c4:	4b36      	ldr	r3, [pc, #216]	; (4061a0 <flexcom_enable+0x13c>)
  4060c6:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  4060c8:	2007      	movs	r0, #7
  4060ca:	4b36      	ldr	r3, [pc, #216]	; (4061a4 <flexcom_enable+0x140>)
  4060cc:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4060ce:	2007      	movs	r0, #7
  4060d0:	2100      	movs	r1, #0
  4060d2:	4b35      	ldr	r3, [pc, #212]	; (4061a8 <flexcom_enable+0x144>)
  4060d4:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4060d6:	2007      	movs	r0, #7
  4060d8:	4b34      	ldr	r3, [pc, #208]	; (4061ac <flexcom_enable+0x148>)
  4060da:	4798      	blx	r3
  4060dc:	e058      	b.n	406190 <flexcom_enable+0x12c>
	} else
#endif
#ifdef ID_FLEXCOM4
	if (p_flexcom == FLEXCOM4) {
  4060de:	687b      	ldr	r3, [r7, #4]
  4060e0:	4a35      	ldr	r2, [pc, #212]	; (4061b8 <flexcom_enable+0x154>)
  4060e2:	4293      	cmp	r3, r2
  4060e4:	d10d      	bne.n	406102 <flexcom_enable+0x9e>
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
  4060e6:	2014      	movs	r0, #20
  4060e8:	4b2d      	ldr	r3, [pc, #180]	; (4061a0 <flexcom_enable+0x13c>)
  4060ea:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  4060ec:	2007      	movs	r0, #7
  4060ee:	4b2d      	ldr	r3, [pc, #180]	; (4061a4 <flexcom_enable+0x140>)
  4060f0:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4060f2:	2007      	movs	r0, #7
  4060f4:	2100      	movs	r1, #0
  4060f6:	4b2c      	ldr	r3, [pc, #176]	; (4061a8 <flexcom_enable+0x144>)
  4060f8:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4060fa:	2007      	movs	r0, #7
  4060fc:	4b2b      	ldr	r3, [pc, #172]	; (4061ac <flexcom_enable+0x148>)
  4060fe:	4798      	blx	r3
  406100:	e046      	b.n	406190 <flexcom_enable+0x12c>
	} else
#endif
#ifdef ID_FLEXCOM3
	if (p_flexcom == FLEXCOM3) {
  406102:	687b      	ldr	r3, [r7, #4]
  406104:	4a2d      	ldr	r2, [pc, #180]	; (4061bc <flexcom_enable+0x158>)
  406106:	4293      	cmp	r3, r2
  406108:	d10d      	bne.n	406126 <flexcom_enable+0xc2>
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
  40610a:	2013      	movs	r0, #19
  40610c:	4b24      	ldr	r3, [pc, #144]	; (4061a0 <flexcom_enable+0x13c>)
  40610e:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  406110:	2006      	movs	r0, #6
  406112:	4b24      	ldr	r3, [pc, #144]	; (4061a4 <flexcom_enable+0x140>)
  406114:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  406116:	2006      	movs	r0, #6
  406118:	2100      	movs	r1, #0
  40611a:	4b23      	ldr	r3, [pc, #140]	; (4061a8 <flexcom_enable+0x144>)
  40611c:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  40611e:	2006      	movs	r0, #6
  406120:	4b22      	ldr	r3, [pc, #136]	; (4061ac <flexcom_enable+0x148>)
  406122:	4798      	blx	r3
  406124:	e034      	b.n	406190 <flexcom_enable+0x12c>
	} else
#endif
#ifdef ID_FLEXCOM2
	if (p_flexcom == FLEXCOM2) {
  406126:	687b      	ldr	r3, [r7, #4]
  406128:	4a25      	ldr	r2, [pc, #148]	; (4061c0 <flexcom_enable+0x15c>)
  40612a:	4293      	cmp	r3, r2
  40612c:	d10d      	bne.n	40614a <flexcom_enable+0xe6>
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
  40612e:	200e      	movs	r0, #14
  406130:	4b1b      	ldr	r3, [pc, #108]	; (4061a0 <flexcom_enable+0x13c>)
  406132:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  406134:	2006      	movs	r0, #6
  406136:	4b1b      	ldr	r3, [pc, #108]	; (4061a4 <flexcom_enable+0x140>)
  406138:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40613a:	2006      	movs	r0, #6
  40613c:	2100      	movs	r1, #0
  40613e:	4b1a      	ldr	r3, [pc, #104]	; (4061a8 <flexcom_enable+0x144>)
  406140:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  406142:	2006      	movs	r0, #6
  406144:	4b19      	ldr	r3, [pc, #100]	; (4061ac <flexcom_enable+0x148>)
  406146:	4798      	blx	r3
  406148:	e022      	b.n	406190 <flexcom_enable+0x12c>
	} else
#endif
#ifdef ID_FLEXCOM1
	if (p_flexcom == FLEXCOM1) {
  40614a:	687b      	ldr	r3, [r7, #4]
  40614c:	4a1d      	ldr	r2, [pc, #116]	; (4061c4 <flexcom_enable+0x160>)
  40614e:	4293      	cmp	r3, r2
  406150:	d10d      	bne.n	40616e <flexcom_enable+0x10a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
  406152:	2009      	movs	r0, #9
  406154:	4b12      	ldr	r3, [pc, #72]	; (4061a0 <flexcom_enable+0x13c>)
  406156:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  406158:	2006      	movs	r0, #6
  40615a:	4b12      	ldr	r3, [pc, #72]	; (4061a4 <flexcom_enable+0x140>)
  40615c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40615e:	2006      	movs	r0, #6
  406160:	2100      	movs	r1, #0
  406162:	4b11      	ldr	r3, [pc, #68]	; (4061a8 <flexcom_enable+0x144>)
  406164:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  406166:	2006      	movs	r0, #6
  406168:	4b10      	ldr	r3, [pc, #64]	; (4061ac <flexcom_enable+0x148>)
  40616a:	4798      	blx	r3
  40616c:	e010      	b.n	406190 <flexcom_enable+0x12c>
	} else
#endif
#ifdef ID_FLEXCOM0
	if (p_flexcom == FLEXCOM0) {
  40616e:	687b      	ldr	r3, [r7, #4]
  406170:	4a15      	ldr	r2, [pc, #84]	; (4061c8 <flexcom_enable+0x164>)
  406172:	4293      	cmp	r3, r2
  406174:	d10c      	bne.n	406190 <flexcom_enable+0x12c>
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
  406176:	2008      	movs	r0, #8
  406178:	4b09      	ldr	r3, [pc, #36]	; (4061a0 <flexcom_enable+0x13c>)
  40617a:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  40617c:	2006      	movs	r0, #6
  40617e:	4b09      	ldr	r3, [pc, #36]	; (4061a4 <flexcom_enable+0x140>)
  406180:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  406182:	2006      	movs	r0, #6
  406184:	2100      	movs	r1, #0
  406186:	4b08      	ldr	r3, [pc, #32]	; (4061a8 <flexcom_enable+0x144>)
  406188:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  40618a:	2006      	movs	r0, #6
  40618c:	4b07      	ldr	r3, [pc, #28]	; (4061ac <flexcom_enable+0x148>)
  40618e:	4798      	blx	r3
	} else
#endif
	{
		Assert(false);
	}
}
  406190:	3708      	adds	r7, #8
  406192:	46bd      	mov	sp, r7
  406194:	bd80      	pop	{r7, pc}
  406196:	bf00      	nop
  406198:	00406021 	.word	0x00406021
  40619c:	40034000 	.word	0x40034000
  4061a0:	00406009 	.word	0x00406009
  4061a4:	00406941 	.word	0x00406941
  4061a8:	004068c5 	.word	0x004068c5
  4061ac:	0040691d 	.word	0x0040691d
  4061b0:	40040000 	.word	0x40040000
  4061b4:	40008000 	.word	0x40008000
  4061b8:	4001c000 	.word	0x4001c000
  4061bc:	40018000 	.word	0x40018000
  4061c0:	40024000 	.word	0x40024000
  4061c4:	40020000 	.word	0x40020000
  4061c8:	4000c000 	.word	0x4000c000

004061cc <flexcom_set_opmode>:
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
  4061cc:	b480      	push	{r7}
  4061ce:	b083      	sub	sp, #12
  4061d0:	af00      	add	r7, sp, #0
  4061d2:	6078      	str	r0, [r7, #4]
  4061d4:	460b      	mov	r3, r1
  4061d6:	70fb      	strb	r3, [r7, #3]
	p_flexcom->FLEXCOM_MR = opmode;
  4061d8:	78fa      	ldrb	r2, [r7, #3]
  4061da:	687b      	ldr	r3, [r7, #4]
  4061dc:	601a      	str	r2, [r3, #0]
}
  4061de:	370c      	adds	r7, #12
  4061e0:	46bd      	mov	sp, r7
  4061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061e6:	4770      	bx	lr

004061e8 <matrix_set_usb_host>:
/**
 * \brief Set USB device mode.
 *
 */
void matrix_set_usb_host(void)
{
  4061e8:	b480      	push	{r7}
  4061ea:	b083      	sub	sp, #12
  4061ec:	af00      	add	r7, sp, #0
	Matrix *p_matrix = MATRIX;
  4061ee:	4b0b      	ldr	r3, [pc, #44]	; (40621c <matrix_set_usb_host+0x34>)
  4061f0:	607b      	str	r3, [r7, #4]

	p_matrix->CCFG_SYSIO &= ~(CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11);
  4061f2:	687b      	ldr	r3, [r7, #4]
  4061f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  4061f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
  4061fc:	687b      	ldr	r3, [r7, #4]
  4061fe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	p_matrix->CCFG_USBMR &= ~CCFG_USBMR_DEVICE;
  406202:	687b      	ldr	r3, [r7, #4]
  406204:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
  406208:	f023 0201 	bic.w	r2, r3, #1
  40620c:	687b      	ldr	r3, [r7, #4]
  40620e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
  406212:	370c      	adds	r7, #12
  406214:	46bd      	mov	sp, r7
  406216:	f85d 7b04 	ldr.w	r7, [sp], #4
  40621a:	4770      	bx	lr
  40621c:	400e0200 	.word	0x400e0200

00406220 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  406220:	b480      	push	{r7}
  406222:	b085      	sub	sp, #20
  406224:	af00      	add	r7, sp, #0
  406226:	60f8      	str	r0, [r7, #12]
  406228:	60b9      	str	r1, [r7, #8]
  40622a:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40622c:	68fb      	ldr	r3, [r7, #12]
  40622e:	68ba      	ldr	r2, [r7, #8]
  406230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  406234:	687b      	ldr	r3, [r7, #4]
  406236:	005b      	lsls	r3, r3, #1
  406238:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40623c:	fbb2 f3f3 	udiv	r3, r2, r3
  406240:	3b01      	subs	r3, #1
  406242:	f3c3 020d 	ubfx	r2, r3, #0, #14
  406246:	68fb      	ldr	r3, [r7, #12]
  406248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  40624c:	3714      	adds	r7, #20
  40624e:	46bd      	mov	sp, r7
  406250:	f85d 7b04 	ldr.w	r7, [sp], #4
  406254:	4770      	bx	lr
  406256:	bf00      	nop

00406258 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  406258:	b480      	push	{r7}
  40625a:	b085      	sub	sp, #20
  40625c:	af00      	add	r7, sp, #0
  40625e:	60f8      	str	r0, [r7, #12]
  406260:	60b9      	str	r1, [r7, #8]
  406262:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  406264:	687b      	ldr	r3, [r7, #4]
  406266:	f003 0310 	and.w	r3, r3, #16
  40626a:	2b00      	cmp	r3, #0
  40626c:	d020      	beq.n	4062b0 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40626e:	68fb      	ldr	r3, [r7, #12]
  406270:	68ba      	ldr	r2, [r7, #8]
  406272:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  406276:	687b      	ldr	r3, [r7, #4]
  406278:	f003 0320 	and.w	r3, r3, #32
  40627c:	2b00      	cmp	r3, #0
  40627e:	d004      	beq.n	40628a <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  406280:	68fb      	ldr	r3, [r7, #12]
  406282:	68ba      	ldr	r2, [r7, #8]
  406284:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  406288:	e003      	b.n	406292 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40628a:	68fb      	ldr	r3, [r7, #12]
  40628c:	68ba      	ldr	r2, [r7, #8]
  40628e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  406292:	687b      	ldr	r3, [r7, #4]
  406294:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406298:	2b00      	cmp	r3, #0
  40629a:	d004      	beq.n	4062a6 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40629c:	68fb      	ldr	r3, [r7, #12]
  40629e:	68ba      	ldr	r2, [r7, #8]
  4062a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  4062a4:	e008      	b.n	4062b8 <pio_configure_interrupt+0x60>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4062a6:	68fb      	ldr	r3, [r7, #12]
  4062a8:	68ba      	ldr	r2, [r7, #8]
  4062aa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  4062ae:	e003      	b.n	4062b8 <pio_configure_interrupt+0x60>
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4062b0:	68fb      	ldr	r3, [r7, #12]
  4062b2:	68ba      	ldr	r2, [r7, #8]
  4062b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  4062b8:	3714      	adds	r7, #20
  4062ba:	46bd      	mov	sp, r7
  4062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4062c0:	4770      	bx	lr
  4062c2:	bf00      	nop

004062c4 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4062c4:	b480      	push	{r7}
  4062c6:	b083      	sub	sp, #12
  4062c8:	af00      	add	r7, sp, #0
  4062ca:	6078      	str	r0, [r7, #4]
  4062cc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ISR;
  4062ce:	687b      	ldr	r3, [r7, #4]
  4062d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  4062d2:	687b      	ldr	r3, [r7, #4]
  4062d4:	683a      	ldr	r2, [r7, #0]
  4062d6:	641a      	str	r2, [r3, #64]	; 0x40
}
  4062d8:	370c      	adds	r7, #12
  4062da:	46bd      	mov	sp, r7
  4062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4062e0:	4770      	bx	lr
  4062e2:	bf00      	nop

004062e4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4062e4:	b480      	push	{r7}
  4062e6:	b083      	sub	sp, #12
  4062e8:	af00      	add	r7, sp, #0
  4062ea:	6078      	str	r0, [r7, #4]
  4062ec:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4062ee:	687b      	ldr	r3, [r7, #4]
  4062f0:	683a      	ldr	r2, [r7, #0]
  4062f2:	645a      	str	r2, [r3, #68]	; 0x44
}
  4062f4:	370c      	adds	r7, #12
  4062f6:	46bd      	mov	sp, r7
  4062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4062fc:	4770      	bx	lr
  4062fe:	bf00      	nop

00406300 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  406300:	b480      	push	{r7}
  406302:	b083      	sub	sp, #12
  406304:	af00      	add	r7, sp, #0
  406306:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  406308:	687b      	ldr	r3, [r7, #4]
  40630a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40630c:	4618      	mov	r0, r3
  40630e:	370c      	adds	r7, #12
  406310:	46bd      	mov	sp, r7
  406312:	f85d 7b04 	ldr.w	r7, [sp], #4
  406316:	4770      	bx	lr

00406318 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  406318:	b480      	push	{r7}
  40631a:	b083      	sub	sp, #12
  40631c:	af00      	add	r7, sp, #0
  40631e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  406320:	687b      	ldr	r3, [r7, #4]
  406322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  406324:	4618      	mov	r0, r3
  406326:	370c      	adds	r7, #12
  406328:	46bd      	mov	sp, r7
  40632a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40632e:	4770      	bx	lr

00406330 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  406330:	b480      	push	{r7}
  406332:	b083      	sub	sp, #12
  406334:	af00      	add	r7, sp, #0
  406336:	4603      	mov	r3, r0
  406338:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40633a:	4908      	ldr	r1, [pc, #32]	; (40635c <NVIC_EnableIRQ+0x2c>)
  40633c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406340:	095b      	lsrs	r3, r3, #5
  406342:	79fa      	ldrb	r2, [r7, #7]
  406344:	f002 021f 	and.w	r2, r2, #31
  406348:	2001      	movs	r0, #1
  40634a:	fa00 f202 	lsl.w	r2, r0, r2
  40634e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  406352:	370c      	adds	r7, #12
  406354:	46bd      	mov	sp, r7
  406356:	f85d 7b04 	ldr.w	r7, [sp], #4
  40635a:	4770      	bx	lr
  40635c:	e000e100 	.word	0xe000e100

00406360 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  406360:	b480      	push	{r7}
  406362:	b083      	sub	sp, #12
  406364:	af00      	add	r7, sp, #0
  406366:	4603      	mov	r3, r0
  406368:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40636a:	4909      	ldr	r1, [pc, #36]	; (406390 <NVIC_DisableIRQ+0x30>)
  40636c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406370:	095b      	lsrs	r3, r3, #5
  406372:	79fa      	ldrb	r2, [r7, #7]
  406374:	f002 021f 	and.w	r2, r2, #31
  406378:	2001      	movs	r0, #1
  40637a:	fa00 f202 	lsl.w	r2, r0, r2
  40637e:	3320      	adds	r3, #32
  406380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  406384:	370c      	adds	r7, #12
  406386:	46bd      	mov	sp, r7
  406388:	f85d 7b04 	ldr.w	r7, [sp], #4
  40638c:	4770      	bx	lr
  40638e:	bf00      	nop
  406390:	e000e100 	.word	0xe000e100

00406394 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  406394:	b480      	push	{r7}
  406396:	b083      	sub	sp, #12
  406398:	af00      	add	r7, sp, #0
  40639a:	4603      	mov	r3, r0
  40639c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40639e:	4909      	ldr	r1, [pc, #36]	; (4063c4 <NVIC_ClearPendingIRQ+0x30>)
  4063a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4063a4:	095b      	lsrs	r3, r3, #5
  4063a6:	79fa      	ldrb	r2, [r7, #7]
  4063a8:	f002 021f 	and.w	r2, r2, #31
  4063ac:	2001      	movs	r0, #1
  4063ae:	fa00 f202 	lsl.w	r2, r0, r2
  4063b2:	3360      	adds	r3, #96	; 0x60
  4063b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4063b8:	370c      	adds	r7, #12
  4063ba:	46bd      	mov	sp, r7
  4063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4063c0:	4770      	bx	lr
  4063c2:	bf00      	nop
  4063c4:	e000e100 	.word	0xe000e100

004063c8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4063c8:	b480      	push	{r7}
  4063ca:	b083      	sub	sp, #12
  4063cc:	af00      	add	r7, sp, #0
  4063ce:	4603      	mov	r3, r0
  4063d0:	6039      	str	r1, [r7, #0]
  4063d2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4063d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4063d8:	2b00      	cmp	r3, #0
  4063da:	da0b      	bge.n	4063f4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4063dc:	490d      	ldr	r1, [pc, #52]	; (406414 <NVIC_SetPriority+0x4c>)
  4063de:	79fb      	ldrb	r3, [r7, #7]
  4063e0:	f003 030f 	and.w	r3, r3, #15
  4063e4:	3b04      	subs	r3, #4
  4063e6:	683a      	ldr	r2, [r7, #0]
  4063e8:	b2d2      	uxtb	r2, r2
  4063ea:	0112      	lsls	r2, r2, #4
  4063ec:	b2d2      	uxtb	r2, r2
  4063ee:	440b      	add	r3, r1
  4063f0:	761a      	strb	r2, [r3, #24]
  4063f2:	e009      	b.n	406408 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4063f4:	4908      	ldr	r1, [pc, #32]	; (406418 <NVIC_SetPriority+0x50>)
  4063f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4063fa:	683a      	ldr	r2, [r7, #0]
  4063fc:	b2d2      	uxtb	r2, r2
  4063fe:	0112      	lsls	r2, r2, #4
  406400:	b2d2      	uxtb	r2, r2
  406402:	440b      	add	r3, r1
  406404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  406408:	370c      	adds	r7, #12
  40640a:	46bd      	mov	sp, r7
  40640c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406410:	4770      	bx	lr
  406412:	bf00      	nop
  406414:	e000ed00 	.word	0xe000ed00
  406418:	e000e100 	.word	0xe000e100

0040641c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40641c:	b580      	push	{r7, lr}
  40641e:	b084      	sub	sp, #16
  406420:	af00      	add	r7, sp, #0
  406422:	6078      	str	r0, [r7, #4]
  406424:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  406426:	6878      	ldr	r0, [r7, #4]
  406428:	4b24      	ldr	r3, [pc, #144]	; (4064bc <pio_handler_process+0xa0>)
  40642a:	4798      	blx	r3
  40642c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40642e:	6878      	ldr	r0, [r7, #4]
  406430:	4b23      	ldr	r3, [pc, #140]	; (4064c0 <pio_handler_process+0xa4>)
  406432:	4798      	blx	r3
  406434:	4602      	mov	r2, r0
  406436:	68fb      	ldr	r3, [r7, #12]
  406438:	4013      	ands	r3, r2
  40643a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40643c:	68fb      	ldr	r3, [r7, #12]
  40643e:	2b00      	cmp	r3, #0
  406440:	d038      	beq.n	4064b4 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  406442:	2300      	movs	r3, #0
  406444:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  406446:	e032      	b.n	4064ae <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  406448:	4a1e      	ldr	r2, [pc, #120]	; (4064c4 <pio_handler_process+0xa8>)
  40644a:	68bb      	ldr	r3, [r7, #8]
  40644c:	011b      	lsls	r3, r3, #4
  40644e:	4413      	add	r3, r2
  406450:	681a      	ldr	r2, [r3, #0]
  406452:	683b      	ldr	r3, [r7, #0]
  406454:	429a      	cmp	r2, r3
  406456:	d123      	bne.n	4064a0 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  406458:	4a1a      	ldr	r2, [pc, #104]	; (4064c4 <pio_handler_process+0xa8>)
  40645a:	68bb      	ldr	r3, [r7, #8]
  40645c:	011b      	lsls	r3, r3, #4
  40645e:	4413      	add	r3, r2
  406460:	685a      	ldr	r2, [r3, #4]
  406462:	68fb      	ldr	r3, [r7, #12]
  406464:	4013      	ands	r3, r2
  406466:	2b00      	cmp	r3, #0
  406468:	d01a      	beq.n	4064a0 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40646a:	4a16      	ldr	r2, [pc, #88]	; (4064c4 <pio_handler_process+0xa8>)
  40646c:	68bb      	ldr	r3, [r7, #8]
  40646e:	011b      	lsls	r3, r3, #4
  406470:	4413      	add	r3, r2
  406472:	3308      	adds	r3, #8
  406474:	685b      	ldr	r3, [r3, #4]
  406476:	4913      	ldr	r1, [pc, #76]	; (4064c4 <pio_handler_process+0xa8>)
  406478:	68ba      	ldr	r2, [r7, #8]
  40647a:	0112      	lsls	r2, r2, #4
  40647c:	440a      	add	r2, r1
  40647e:	6810      	ldr	r0, [r2, #0]
  406480:	4910      	ldr	r1, [pc, #64]	; (4064c4 <pio_handler_process+0xa8>)
  406482:	68ba      	ldr	r2, [r7, #8]
  406484:	0112      	lsls	r2, r2, #4
  406486:	440a      	add	r2, r1
  406488:	6852      	ldr	r2, [r2, #4]
  40648a:	4611      	mov	r1, r2
  40648c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40648e:	4a0d      	ldr	r2, [pc, #52]	; (4064c4 <pio_handler_process+0xa8>)
  406490:	68bb      	ldr	r3, [r7, #8]
  406492:	011b      	lsls	r3, r3, #4
  406494:	4413      	add	r3, r2
  406496:	685b      	ldr	r3, [r3, #4]
  406498:	43db      	mvns	r3, r3
  40649a:	68fa      	ldr	r2, [r7, #12]
  40649c:	4013      	ands	r3, r2
  40649e:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4064a0:	68bb      	ldr	r3, [r7, #8]
  4064a2:	3301      	adds	r3, #1
  4064a4:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4064a6:	68bb      	ldr	r3, [r7, #8]
  4064a8:	2b06      	cmp	r3, #6
  4064aa:	d900      	bls.n	4064ae <pio_handler_process+0x92>
				break;
  4064ac:	e002      	b.n	4064b4 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4064ae:	68fb      	ldr	r3, [r7, #12]
  4064b0:	2b00      	cmp	r3, #0
  4064b2:	d1c9      	bne.n	406448 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4064b4:	3710      	adds	r7, #16
  4064b6:	46bd      	mov	sp, r7
  4064b8:	bd80      	pop	{r7, pc}
  4064ba:	bf00      	nop
  4064bc:	00406301 	.word	0x00406301
  4064c0:	00406319 	.word	0x00406319
  4064c4:	200194e4 	.word	0x200194e4

004064c8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4064c8:	b580      	push	{r7, lr}
  4064ca:	b086      	sub	sp, #24
  4064cc:	af00      	add	r7, sp, #0
  4064ce:	60f8      	str	r0, [r7, #12]
  4064d0:	60b9      	str	r1, [r7, #8]
  4064d2:	607a      	str	r2, [r7, #4]
  4064d4:	603b      	str	r3, [r7, #0]
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4064d6:	4b13      	ldr	r3, [pc, #76]	; (406524 <pio_handler_set+0x5c>)
  4064d8:	681b      	ldr	r3, [r3, #0]
  4064da:	2b06      	cmp	r3, #6
  4064dc:	d901      	bls.n	4064e2 <pio_handler_set+0x1a>
		return 1;
  4064de:	2301      	movs	r3, #1
  4064e0:	e01c      	b.n	40651c <pio_handler_set+0x54>

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  4064e2:	4b10      	ldr	r3, [pc, #64]	; (406524 <pio_handler_set+0x5c>)
  4064e4:	681b      	ldr	r3, [r3, #0]
  4064e6:	011b      	lsls	r3, r3, #4
  4064e8:	4a0f      	ldr	r2, [pc, #60]	; (406528 <pio_handler_set+0x60>)
  4064ea:	4413      	add	r3, r2
  4064ec:	617b      	str	r3, [r7, #20]
	pSource->id = ul_id;
  4064ee:	697b      	ldr	r3, [r7, #20]
  4064f0:	68ba      	ldr	r2, [r7, #8]
  4064f2:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4064f4:	697b      	ldr	r3, [r7, #20]
  4064f6:	687a      	ldr	r2, [r7, #4]
  4064f8:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4064fa:	697b      	ldr	r3, [r7, #20]
  4064fc:	683a      	ldr	r2, [r7, #0]
  4064fe:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  406500:	697b      	ldr	r3, [r7, #20]
  406502:	6a3a      	ldr	r2, [r7, #32]
  406504:	60da      	str	r2, [r3, #12]
	gs_ul_nb_sources++;
  406506:	4b07      	ldr	r3, [pc, #28]	; (406524 <pio_handler_set+0x5c>)
  406508:	681b      	ldr	r3, [r3, #0]
  40650a:	3301      	adds	r3, #1
  40650c:	4a05      	ldr	r2, [pc, #20]	; (406524 <pio_handler_set+0x5c>)
  40650e:	6013      	str	r3, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  406510:	68f8      	ldr	r0, [r7, #12]
  406512:	6879      	ldr	r1, [r7, #4]
  406514:	683a      	ldr	r2, [r7, #0]
  406516:	4b05      	ldr	r3, [pc, #20]	; (40652c <pio_handler_set+0x64>)
  406518:	4798      	blx	r3

	return 0;
  40651a:	2300      	movs	r3, #0
}
  40651c:	4618      	mov	r0, r3
  40651e:	3718      	adds	r7, #24
  406520:	46bd      	mov	sp, r7
  406522:	bd80      	pop	{r7, pc}
  406524:	20019554 	.word	0x20019554
  406528:	200194e4 	.word	0x200194e4
  40652c:	00406259 	.word	0x00406259

00406530 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  406530:	b580      	push	{r7, lr}
  406532:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  406534:	4802      	ldr	r0, [pc, #8]	; (406540 <PIOA_Handler+0x10>)
  406536:	210b      	movs	r1, #11
  406538:	4b02      	ldr	r3, [pc, #8]	; (406544 <PIOA_Handler+0x14>)
  40653a:	4798      	blx	r3
}
  40653c:	bd80      	pop	{r7, pc}
  40653e:	bf00      	nop
  406540:	400e0e00 	.word	0x400e0e00
  406544:	0040641d 	.word	0x0040641d

00406548 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  406548:	b580      	push	{r7, lr}
  40654a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40654c:	4802      	ldr	r0, [pc, #8]	; (406558 <PIOB_Handler+0x10>)
  40654e:	210c      	movs	r1, #12
  406550:	4b02      	ldr	r3, [pc, #8]	; (40655c <PIOB_Handler+0x14>)
  406552:	4798      	blx	r3
}
  406554:	bd80      	pop	{r7, pc}
  406556:	bf00      	nop
  406558:	400e1000 	.word	0x400e1000
  40655c:	0040641d 	.word	0x0040641d

00406560 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  406560:	b580      	push	{r7, lr}
  406562:	b086      	sub	sp, #24
  406564:	af00      	add	r7, sp, #0
  406566:	60f8      	str	r0, [r7, #12]
  406568:	460b      	mov	r3, r1
  40656a:	607a      	str	r2, [r7, #4]
  40656c:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  40656e:	2300      	movs	r3, #0
  406570:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  406572:	68f8      	ldr	r0, [r7, #12]
  406574:	4b13      	ldr	r3, [pc, #76]	; (4065c4 <pio_handler_set_priority+0x64>)
  406576:	4798      	blx	r3
  406578:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40657a:	68f8      	ldr	r0, [r7, #12]
  40657c:	f04f 31ff 	mov.w	r1, #4294967295
  406580:	4b11      	ldr	r3, [pc, #68]	; (4065c8 <pio_handler_set_priority+0x68>)
  406582:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  406584:	68f8      	ldr	r0, [r7, #12]
  406586:	4b11      	ldr	r3, [pc, #68]	; (4065cc <pio_handler_set_priority+0x6c>)
  406588:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  40658a:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40658e:	4618      	mov	r0, r3
  406590:	4b0f      	ldr	r3, [pc, #60]	; (4065d0 <pio_handler_set_priority+0x70>)
  406592:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  406594:	f997 300b 	ldrsb.w	r3, [r7, #11]
  406598:	4618      	mov	r0, r3
  40659a:	4b0e      	ldr	r3, [pc, #56]	; (4065d4 <pio_handler_set_priority+0x74>)
  40659c:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  40659e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4065a2:	4618      	mov	r0, r3
  4065a4:	6879      	ldr	r1, [r7, #4]
  4065a6:	4b0c      	ldr	r3, [pc, #48]	; (4065d8 <pio_handler_set_priority+0x78>)
  4065a8:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  4065aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4065ae:	4618      	mov	r0, r3
  4065b0:	4b0a      	ldr	r3, [pc, #40]	; (4065dc <pio_handler_set_priority+0x7c>)
  4065b2:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  4065b4:	68f8      	ldr	r0, [r7, #12]
  4065b6:	6979      	ldr	r1, [r7, #20]
  4065b8:	4b09      	ldr	r3, [pc, #36]	; (4065e0 <pio_handler_set_priority+0x80>)
  4065ba:	4798      	blx	r3
}
  4065bc:	3718      	adds	r7, #24
  4065be:	46bd      	mov	sp, r7
  4065c0:	bd80      	pop	{r7, pc}
  4065c2:	bf00      	nop
  4065c4:	00406319 	.word	0x00406319
  4065c8:	004062e5 	.word	0x004062e5
  4065cc:	00406301 	.word	0x00406301
  4065d0:	00406361 	.word	0x00406361
  4065d4:	00406395 	.word	0x00406395
  4065d8:	004063c9 	.word	0x004063c9
  4065dc:	00406331 	.word	0x00406331
  4065e0:	004062c5 	.word	0x004062c5

004065e4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4065e4:	b480      	push	{r7}
  4065e6:	b085      	sub	sp, #20
  4065e8:	af00      	add	r7, sp, #0
  4065ea:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4065ec:	491d      	ldr	r1, [pc, #116]	; (406664 <pmc_switch_mck_to_pllack+0x80>)
  4065ee:	4b1d      	ldr	r3, [pc, #116]	; (406664 <pmc_switch_mck_to_pllack+0x80>)
  4065f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4065f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4065f6:	687b      	ldr	r3, [r7, #4]
  4065f8:	4313      	orrs	r3, r2
  4065fa:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4065fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406600:	60fb      	str	r3, [r7, #12]
  406602:	e007      	b.n	406614 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  406604:	68fb      	ldr	r3, [r7, #12]
  406606:	2b00      	cmp	r3, #0
  406608:	d101      	bne.n	40660e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40660a:	2301      	movs	r3, #1
  40660c:	e023      	b.n	406656 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40660e:	68fb      	ldr	r3, [r7, #12]
  406610:	3b01      	subs	r3, #1
  406612:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  406614:	4b13      	ldr	r3, [pc, #76]	; (406664 <pmc_switch_mck_to_pllack+0x80>)
  406616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406618:	f003 0308 	and.w	r3, r3, #8
  40661c:	2b00      	cmp	r3, #0
  40661e:	d0f1      	beq.n	406604 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  406620:	4a10      	ldr	r2, [pc, #64]	; (406664 <pmc_switch_mck_to_pllack+0x80>)
  406622:	4b10      	ldr	r3, [pc, #64]	; (406664 <pmc_switch_mck_to_pllack+0x80>)
  406624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406626:	f023 0303 	bic.w	r3, r3, #3
  40662a:	f043 0302 	orr.w	r3, r3, #2
  40662e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  406630:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406634:	60fb      	str	r3, [r7, #12]
  406636:	e007      	b.n	406648 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  406638:	68fb      	ldr	r3, [r7, #12]
  40663a:	2b00      	cmp	r3, #0
  40663c:	d101      	bne.n	406642 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40663e:	2301      	movs	r3, #1
  406640:	e009      	b.n	406656 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  406642:	68fb      	ldr	r3, [r7, #12]
  406644:	3b01      	subs	r3, #1
  406646:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  406648:	4b06      	ldr	r3, [pc, #24]	; (406664 <pmc_switch_mck_to_pllack+0x80>)
  40664a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40664c:	f003 0308 	and.w	r3, r3, #8
  406650:	2b00      	cmp	r3, #0
  406652:	d0f1      	beq.n	406638 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  406654:	2300      	movs	r3, #0
}
  406656:	4618      	mov	r0, r3
  406658:	3714      	adds	r7, #20
  40665a:	46bd      	mov	sp, r7
  40665c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406660:	4770      	bx	lr
  406662:	bf00      	nop
  406664:	400e0400 	.word	0x400e0400

00406668 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  406668:	b480      	push	{r7}
  40666a:	b083      	sub	sp, #12
  40666c:	af00      	add	r7, sp, #0
  40666e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  406670:	687b      	ldr	r3, [r7, #4]
  406672:	2b01      	cmp	r3, #1
  406674:	d107      	bne.n	406686 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  406676:	4a08      	ldr	r2, [pc, #32]	; (406698 <pmc_switch_sclk_to_32kxtal+0x30>)
  406678:	4b07      	ldr	r3, [pc, #28]	; (406698 <pmc_switch_sclk_to_32kxtal+0x30>)
  40667a:	689b      	ldr	r3, [r3, #8]
  40667c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  406680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406684:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  406686:	4b04      	ldr	r3, [pc, #16]	; (406698 <pmc_switch_sclk_to_32kxtal+0x30>)
  406688:	4a04      	ldr	r2, [pc, #16]	; (40669c <pmc_switch_sclk_to_32kxtal+0x34>)
  40668a:	601a      	str	r2, [r3, #0]
}
  40668c:	370c      	adds	r7, #12
  40668e:	46bd      	mov	sp, r7
  406690:	f85d 7b04 	ldr.w	r7, [sp], #4
  406694:	4770      	bx	lr
  406696:	bf00      	nop
  406698:	400e1410 	.word	0x400e1410
  40669c:	a5000008 	.word	0xa5000008

004066a0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4066a0:	b480      	push	{r7}
  4066a2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4066a4:	4b09      	ldr	r3, [pc, #36]	; (4066cc <pmc_osc_is_ready_32kxtal+0x2c>)
  4066a6:	695b      	ldr	r3, [r3, #20]
  4066a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4066ac:	2b00      	cmp	r3, #0
  4066ae:	d007      	beq.n	4066c0 <pmc_osc_is_ready_32kxtal+0x20>
  4066b0:	4b07      	ldr	r3, [pc, #28]	; (4066d0 <pmc_osc_is_ready_32kxtal+0x30>)
  4066b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4066b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4066b8:	2b00      	cmp	r3, #0
  4066ba:	d001      	beq.n	4066c0 <pmc_osc_is_ready_32kxtal+0x20>
  4066bc:	2301      	movs	r3, #1
  4066be:	e000      	b.n	4066c2 <pmc_osc_is_ready_32kxtal+0x22>
  4066c0:	2300      	movs	r3, #0
}
  4066c2:	4618      	mov	r0, r3
  4066c4:	46bd      	mov	sp, r7
  4066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066ca:	4770      	bx	lr
  4066cc:	400e1410 	.word	0x400e1410
  4066d0:	400e0400 	.word	0x400e0400

004066d4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4066d4:	b480      	push	{r7}
  4066d6:	b083      	sub	sp, #12
  4066d8:	af00      	add	r7, sp, #0
  4066da:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4066dc:	4a18      	ldr	r2, [pc, #96]	; (406740 <pmc_switch_mainck_to_fastrc+0x6c>)
  4066de:	4b18      	ldr	r3, [pc, #96]	; (406740 <pmc_switch_mainck_to_fastrc+0x6c>)
  4066e0:	6a1b      	ldr	r3, [r3, #32]
  4066e2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4066e6:	f043 0308 	orr.w	r3, r3, #8
  4066ea:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4066ec:	bf00      	nop
  4066ee:	4b14      	ldr	r3, [pc, #80]	; (406740 <pmc_switch_mainck_to_fastrc+0x6c>)
  4066f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4066f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4066f6:	2b00      	cmp	r3, #0
  4066f8:	d0f9      	beq.n	4066ee <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4066fa:	4911      	ldr	r1, [pc, #68]	; (406740 <pmc_switch_mainck_to_fastrc+0x6c>)
  4066fc:	4b10      	ldr	r3, [pc, #64]	; (406740 <pmc_switch_mainck_to_fastrc+0x6c>)
  4066fe:	6a1b      	ldr	r3, [r3, #32]
  406700:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  406704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  406708:	687a      	ldr	r2, [r7, #4]
  40670a:	4313      	orrs	r3, r2
  40670c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  406710:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  406712:	bf00      	nop
  406714:	4b0a      	ldr	r3, [pc, #40]	; (406740 <pmc_switch_mainck_to_fastrc+0x6c>)
  406716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40671c:	2b00      	cmp	r3, #0
  40671e:	d0f9      	beq.n	406714 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  406720:	4a07      	ldr	r2, [pc, #28]	; (406740 <pmc_switch_mainck_to_fastrc+0x6c>)
  406722:	4b07      	ldr	r3, [pc, #28]	; (406740 <pmc_switch_mainck_to_fastrc+0x6c>)
  406724:	6a1b      	ldr	r3, [r3, #32]
  406726:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40672a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40672e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  406732:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  406734:	370c      	adds	r7, #12
  406736:	46bd      	mov	sp, r7
  406738:	f85d 7b04 	ldr.w	r7, [sp], #4
  40673c:	4770      	bx	lr
  40673e:	bf00      	nop
  406740:	400e0400 	.word	0x400e0400

00406744 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  406744:	b480      	push	{r7}
  406746:	b083      	sub	sp, #12
  406748:	af00      	add	r7, sp, #0
  40674a:	6078      	str	r0, [r7, #4]
  40674c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40674e:	687b      	ldr	r3, [r7, #4]
  406750:	2b00      	cmp	r3, #0
  406752:	d008      	beq.n	406766 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  406754:	4916      	ldr	r1, [pc, #88]	; (4067b0 <pmc_switch_mainck_to_xtal+0x6c>)
  406756:	4b16      	ldr	r3, [pc, #88]	; (4067b0 <pmc_switch_mainck_to_xtal+0x6c>)
  406758:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40675a:	4a16      	ldr	r2, [pc, #88]	; (4067b4 <pmc_switch_mainck_to_xtal+0x70>)
  40675c:	401a      	ands	r2, r3
  40675e:	4b16      	ldr	r3, [pc, #88]	; (4067b8 <pmc_switch_mainck_to_xtal+0x74>)
  406760:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  406762:	620b      	str	r3, [r1, #32]
  406764:	e01e      	b.n	4067a4 <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  406766:	4912      	ldr	r1, [pc, #72]	; (4067b0 <pmc_switch_mainck_to_xtal+0x6c>)
  406768:	4b11      	ldr	r3, [pc, #68]	; (4067b0 <pmc_switch_mainck_to_xtal+0x6c>)
  40676a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40676c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  406770:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  406774:	683a      	ldr	r2, [r7, #0]
  406776:	0212      	lsls	r2, r2, #8
  406778:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40677a:	4313      	orrs	r3, r2
  40677c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  406780:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  406784:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  406786:	bf00      	nop
  406788:	4b09      	ldr	r3, [pc, #36]	; (4067b0 <pmc_switch_mainck_to_xtal+0x6c>)
  40678a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40678c:	f003 0301 	and.w	r3, r3, #1
  406790:	2b00      	cmp	r3, #0
  406792:	d0f9      	beq.n	406788 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  406794:	4a06      	ldr	r2, [pc, #24]	; (4067b0 <pmc_switch_mainck_to_xtal+0x6c>)
  406796:	4b06      	ldr	r3, [pc, #24]	; (4067b0 <pmc_switch_mainck_to_xtal+0x6c>)
  406798:	6a1b      	ldr	r3, [r3, #32]
  40679a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40679e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4067a2:	6213      	str	r3, [r2, #32]
	}
}
  4067a4:	370c      	adds	r7, #12
  4067a6:	46bd      	mov	sp, r7
  4067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067ac:	4770      	bx	lr
  4067ae:	bf00      	nop
  4067b0:	400e0400 	.word	0x400e0400
  4067b4:	fec8fffc 	.word	0xfec8fffc
  4067b8:	01370002 	.word	0x01370002

004067bc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4067bc:	b480      	push	{r7}
  4067be:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4067c0:	4b04      	ldr	r3, [pc, #16]	; (4067d4 <pmc_osc_is_ready_mainck+0x18>)
  4067c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4067c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4067c8:	4618      	mov	r0, r3
  4067ca:	46bd      	mov	sp, r7
  4067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067d0:	4770      	bx	lr
  4067d2:	bf00      	nop
  4067d4:	400e0400 	.word	0x400e0400

004067d8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4067d8:	b480      	push	{r7}
  4067da:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  4067dc:	4b03      	ldr	r3, [pc, #12]	; (4067ec <pmc_disable_pllack+0x14>)
  4067de:	2200      	movs	r2, #0
  4067e0:	629a      	str	r2, [r3, #40]	; 0x28
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
#endif
}
  4067e2:	46bd      	mov	sp, r7
  4067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067e8:	4770      	bx	lr
  4067ea:	bf00      	nop
  4067ec:	400e0400 	.word	0x400e0400

004067f0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4067f0:	b480      	push	{r7}
  4067f2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4067f4:	4b04      	ldr	r3, [pc, #16]	; (406808 <pmc_is_locked_pllack+0x18>)
  4067f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4067f8:	f003 0302 	and.w	r3, r3, #2
}
  4067fc:	4618      	mov	r0, r3
  4067fe:	46bd      	mov	sp, r7
  406800:	f85d 7b04 	ldr.w	r7, [sp], #4
  406804:	4770      	bx	lr
  406806:	bf00      	nop
  406808:	400e0400 	.word	0x400e0400

0040680c <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  40680c:	b480      	push	{r7}
  40680e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  406810:	4b03      	ldr	r3, [pc, #12]	; (406820 <pmc_disable_pllbck+0x14>)
  406812:	2200      	movs	r2, #0
  406814:	62da      	str	r2, [r3, #44]	; 0x2c
}
  406816:	46bd      	mov	sp, r7
  406818:	f85d 7b04 	ldr.w	r7, [sp], #4
  40681c:	4770      	bx	lr
  40681e:	bf00      	nop
  406820:	400e0400 	.word	0x400e0400

00406824 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  406824:	b480      	push	{r7}
  406826:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  406828:	4b04      	ldr	r3, [pc, #16]	; (40683c <pmc_is_locked_pllbck+0x18>)
  40682a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40682c:	f003 0304 	and.w	r3, r3, #4
}
  406830:	4618      	mov	r0, r3
  406832:	46bd      	mov	sp, r7
  406834:	f85d 7b04 	ldr.w	r7, [sp], #4
  406838:	4770      	bx	lr
  40683a:	bf00      	nop
  40683c:	400e0400 	.word	0x400e0400

00406840 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  406840:	b480      	push	{r7}
  406842:	b083      	sub	sp, #12
  406844:	af00      	add	r7, sp, #0
  406846:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  406848:	687b      	ldr	r3, [r7, #4]
  40684a:	2b32      	cmp	r3, #50	; 0x32
  40684c:	d901      	bls.n	406852 <pmc_enable_periph_clk+0x12>
		return 1;
  40684e:	2301      	movs	r3, #1
  406850:	e02f      	b.n	4068b2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  406852:	687b      	ldr	r3, [r7, #4]
  406854:	2b1f      	cmp	r3, #31
  406856:	d813      	bhi.n	406880 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  406858:	4b19      	ldr	r3, [pc, #100]	; (4068c0 <pmc_enable_periph_clk+0x80>)
  40685a:	699a      	ldr	r2, [r3, #24]
  40685c:	687b      	ldr	r3, [r7, #4]
  40685e:	2101      	movs	r1, #1
  406860:	fa01 f303 	lsl.w	r3, r1, r3
  406864:	401a      	ands	r2, r3
  406866:	687b      	ldr	r3, [r7, #4]
  406868:	2101      	movs	r1, #1
  40686a:	fa01 f303 	lsl.w	r3, r1, r3
  40686e:	429a      	cmp	r2, r3
  406870:	d01e      	beq.n	4068b0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  406872:	4a13      	ldr	r2, [pc, #76]	; (4068c0 <pmc_enable_periph_clk+0x80>)
  406874:	687b      	ldr	r3, [r7, #4]
  406876:	2101      	movs	r1, #1
  406878:	fa01 f303 	lsl.w	r3, r1, r3
  40687c:	6113      	str	r3, [r2, #16]
  40687e:	e017      	b.n	4068b0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  406880:	687b      	ldr	r3, [r7, #4]
  406882:	3b20      	subs	r3, #32
  406884:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  406886:	4b0e      	ldr	r3, [pc, #56]	; (4068c0 <pmc_enable_periph_clk+0x80>)
  406888:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40688c:	687b      	ldr	r3, [r7, #4]
  40688e:	2101      	movs	r1, #1
  406890:	fa01 f303 	lsl.w	r3, r1, r3
  406894:	401a      	ands	r2, r3
  406896:	687b      	ldr	r3, [r7, #4]
  406898:	2101      	movs	r1, #1
  40689a:	fa01 f303 	lsl.w	r3, r1, r3
  40689e:	429a      	cmp	r2, r3
  4068a0:	d006      	beq.n	4068b0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4068a2:	4a07      	ldr	r2, [pc, #28]	; (4068c0 <pmc_enable_periph_clk+0x80>)
  4068a4:	687b      	ldr	r3, [r7, #4]
  4068a6:	2101      	movs	r1, #1
  4068a8:	fa01 f303 	lsl.w	r3, r1, r3
  4068ac:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4068b0:	2300      	movs	r3, #0
}
  4068b2:	4618      	mov	r0, r3
  4068b4:	370c      	adds	r7, #12
  4068b6:	46bd      	mov	sp, r7
  4068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4068bc:	4770      	bx	lr
  4068be:	bf00      	nop
  4068c0:	400e0400 	.word	0x400e0400

004068c4 <pmc_switch_pck_to_mck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
  4068c4:	b480      	push	{r7}
  4068c6:	b085      	sub	sp, #20
  4068c8:	af00      	add	r7, sp, #0
  4068ca:	6078      	str	r0, [r7, #4]
  4068cc:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  4068ce:	4912      	ldr	r1, [pc, #72]	; (406918 <pmc_switch_pck_to_mck+0x54>)
  4068d0:	683b      	ldr	r3, [r7, #0]
  4068d2:	f043 0204 	orr.w	r2, r3, #4
  4068d6:	687b      	ldr	r3, [r7, #4]
  4068d8:	3310      	adds	r3, #16
  4068da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
  4068de:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4068e2:	60fb      	str	r3, [r7, #12]
  4068e4:	e007      	b.n	4068f6 <pmc_switch_pck_to_mck+0x32>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  4068e6:	68fb      	ldr	r3, [r7, #12]
  4068e8:	2b00      	cmp	r3, #0
  4068ea:	d101      	bne.n	4068f0 <pmc_switch_pck_to_mck+0x2c>
			return 1;
  4068ec:	2301      	movs	r3, #1
  4068ee:	e00d      	b.n	40690c <pmc_switch_pck_to_mck+0x48>
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4068f0:	68fb      	ldr	r3, [r7, #12]
  4068f2:	3b01      	subs	r3, #1
  4068f4:	60fb      	str	r3, [r7, #12]
  4068f6:	4b08      	ldr	r3, [pc, #32]	; (406918 <pmc_switch_pck_to_mck+0x54>)
  4068f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4068fa:	687b      	ldr	r3, [r7, #4]
  4068fc:	f44f 7180 	mov.w	r1, #256	; 0x100
  406900:	fa01 f303 	lsl.w	r3, r1, r3
  406904:	4013      	ands	r3, r2
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  406906:	2b00      	cmp	r3, #0
  406908:	d0ed      	beq.n	4068e6 <pmc_switch_pck_to_mck+0x22>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40690a:	2300      	movs	r3, #0
}
  40690c:	4618      	mov	r0, r3
  40690e:	3714      	adds	r7, #20
  406910:	46bd      	mov	sp, r7
  406912:	f85d 7b04 	ldr.w	r7, [sp], #4
  406916:	4770      	bx	lr
  406918:	400e0400 	.word	0x400e0400

0040691c <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
  40691c:	b480      	push	{r7}
  40691e:	b083      	sub	sp, #12
  406920:	af00      	add	r7, sp, #0
  406922:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  406924:	4a05      	ldr	r2, [pc, #20]	; (40693c <pmc_enable_pck+0x20>)
  406926:	687b      	ldr	r3, [r7, #4]
  406928:	f44f 7180 	mov.w	r1, #256	; 0x100
  40692c:	fa01 f303 	lsl.w	r3, r1, r3
  406930:	6013      	str	r3, [r2, #0]
}
  406932:	370c      	adds	r7, #12
  406934:	46bd      	mov	sp, r7
  406936:	f85d 7b04 	ldr.w	r7, [sp], #4
  40693a:	4770      	bx	lr
  40693c:	400e0400 	.word	0x400e0400

00406940 <pmc_disable_pck>:
 * \brief Disable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
  406940:	b480      	push	{r7}
  406942:	b083      	sub	sp, #12
  406944:	af00      	add	r7, sp, #0
  406946:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  406948:	4a05      	ldr	r2, [pc, #20]	; (406960 <pmc_disable_pck+0x20>)
  40694a:	687b      	ldr	r3, [r7, #4]
  40694c:	f44f 7180 	mov.w	r1, #256	; 0x100
  406950:	fa01 f303 	lsl.w	r3, r1, r3
  406954:	6053      	str	r3, [r2, #4]
}
  406956:	370c      	adds	r7, #12
  406958:	46bd      	mov	sp, r7
  40695a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40695e:	4770      	bx	lr
  406960:	400e0400 	.word	0x400e0400

00406964 <pmc_switch_uhpck_to_pllbck>:
 * \brief Switch UHP (USB) clock source selection to PLLB clock.
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_uhpck_to_pllbck(uint32_t ul_usbdiv)
{
  406964:	b480      	push	{r7}
  406966:	b083      	sub	sp, #12
  406968:	af00      	add	r7, sp, #0
  40696a:	6078      	str	r0, [r7, #4]
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  40696c:	4a06      	ldr	r2, [pc, #24]	; (406988 <pmc_switch_uhpck_to_pllbck+0x24>)
  40696e:	687b      	ldr	r3, [r7, #4]
  406970:	021b      	lsls	r3, r3, #8
  406972:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  406976:	f043 0301 	orr.w	r3, r3, #1
  40697a:	6393      	str	r3, [r2, #56]	; 0x38
}
  40697c:	370c      	adds	r7, #12
  40697e:	46bd      	mov	sp, r7
  406980:	f85d 7b04 	ldr.w	r7, [sp], #4
  406984:	4770      	bx	lr
  406986:	bf00      	nop
  406988:	400e0400 	.word	0x400e0400

0040698c <pmc_enable_uhpck>:

/**
 * \brief Enable UHP (USB) clock.
 */
void pmc_enable_uhpck(void)
{
  40698c:	b480      	push	{r7}
  40698e:	af00      	add	r7, sp, #0
	PMC->PMC_SCER = PMC_SCER_UHP;
  406990:	4b03      	ldr	r3, [pc, #12]	; (4069a0 <pmc_enable_uhpck+0x14>)
  406992:	2240      	movs	r2, #64	; 0x40
  406994:	601a      	str	r2, [r3, #0]
}
  406996:	46bd      	mov	sp, r7
  406998:	f85d 7b04 	ldr.w	r7, [sp], #4
  40699c:	4770      	bx	lr
  40699e:	bf00      	nop
  4069a0:	400e0400 	.word	0x400e0400

004069a4 <supc_set_regulator_trim_user>:
 * \param value the trim value.
 *
 * \note For the trim value in 96M PLL, please read the value in flash unique identifier area.
 */
void supc_set_regulator_trim_user(Supc *p_supc, uint32_t value)
{
  4069a4:	b480      	push	{r7}
  4069a6:	b085      	sub	sp, #20
  4069a8:	af00      	add	r7, sp, #0
  4069aa:	6078      	str	r0, [r7, #4]
  4069ac:	6039      	str	r1, [r7, #0]
#if SAMG54
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  4069ae:	687b      	ldr	r3, [r7, #4]
  4069b0:	69db      	ldr	r3, [r3, #28]
  4069b2:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
  4069b6:	60fb      	str	r3, [r7, #12]
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
		| ((value & 0xFu) << 9);
  4069b8:	683b      	ldr	r3, [r7, #0]
  4069ba:	f003 030f 	and.w	r3, r3, #15
  4069be:	025a      	lsls	r2, r3, #9
  4069c0:	68fb      	ldr	r3, [r7, #12]
  4069c2:	4313      	orrs	r3, r2
  4069c4:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  4069c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
  4069cc:	687a      	ldr	r2, [r7, #4]
  4069ce:	61d3      	str	r3, [r2, #28]
		| ((value & 0xFu) << 9);
#endif
}
  4069d0:	3714      	adds	r7, #20
  4069d2:	46bd      	mov	sp, r7
  4069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4069d8:	4770      	bx	lr
  4069da:	bf00      	nop

004069dc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4069dc:	b480      	push	{r7}
  4069de:	b083      	sub	sp, #12
  4069e0:	af00      	add	r7, sp, #0
  4069e2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4069e4:	687b      	ldr	r3, [r7, #4]
  4069e6:	2b07      	cmp	r3, #7
  4069e8:	d825      	bhi.n	406a36 <osc_get_rate+0x5a>
  4069ea:	a201      	add	r2, pc, #4	; (adr r2, 4069f0 <osc_get_rate+0x14>)
  4069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4069f0:	00406a11 	.word	0x00406a11
  4069f4:	00406a17 	.word	0x00406a17
  4069f8:	00406a1d 	.word	0x00406a1d
  4069fc:	00406a23 	.word	0x00406a23
  406a00:	00406a27 	.word	0x00406a27
  406a04:	00406a2b 	.word	0x00406a2b
  406a08:	00406a2f 	.word	0x00406a2f
  406a0c:	00406a33 	.word	0x00406a33
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  406a10:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  406a14:	e010      	b.n	406a38 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  406a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406a1a:	e00d      	b.n	406a38 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  406a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406a20:	e00a      	b.n	406a38 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  406a22:	4b08      	ldr	r3, [pc, #32]	; (406a44 <osc_get_rate+0x68>)
  406a24:	e008      	b.n	406a38 <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  406a26:	4b08      	ldr	r3, [pc, #32]	; (406a48 <osc_get_rate+0x6c>)
  406a28:	e006      	b.n	406a38 <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  406a2a:	4b08      	ldr	r3, [pc, #32]	; (406a4c <osc_get_rate+0x70>)
  406a2c:	e004      	b.n	406a38 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  406a2e:	2300      	movs	r3, #0
  406a30:	e002      	b.n	406a38 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  406a32:	2300      	movs	r3, #0
  406a34:	e000      	b.n	406a38 <osc_get_rate+0x5c>
#endif
	}

	return 0;
  406a36:	2300      	movs	r3, #0
}
  406a38:	4618      	mov	r0, r3
  406a3a:	370c      	adds	r7, #12
  406a3c:	46bd      	mov	sp, r7
  406a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a42:	4770      	bx	lr
  406a44:	007a1200 	.word	0x007a1200
  406a48:	00f42400 	.word	0x00f42400
  406a4c:	016e3600 	.word	0x016e3600

00406a50 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  406a50:	b580      	push	{r7, lr}
  406a52:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  406a54:	2001      	movs	r0, #1
  406a56:	4b04      	ldr	r3, [pc, #16]	; (406a68 <sysclk_get_main_hz+0x18>)
  406a58:	4798      	blx	r3
  406a5a:	4602      	mov	r2, r0
  406a5c:	f640 3372 	movw	r3, #2930	; 0xb72
  406a60:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  406a64:	4618      	mov	r0, r3
  406a66:	bd80      	pop	{r7, pc}
  406a68:	004069dd 	.word	0x004069dd

00406a6c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  406a6c:	b580      	push	{r7, lr}
  406a6e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  406a70:	4b02      	ldr	r3, [pc, #8]	; (406a7c <sysclk_get_cpu_hz+0x10>)
  406a72:	4798      	blx	r3
  406a74:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  406a76:	4618      	mov	r0, r3
  406a78:	bd80      	pop	{r7, pc}
  406a7a:	bf00      	nop
  406a7c:	00406a51 	.word	0x00406a51

00406a80 <ohci_init>:
/**
 * \brief Initialize the OHCI module.
 *
 */
void ohci_init(void)
{
  406a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406a84:	b083      	sub	sp, #12
  406a86:	af00      	add	r7, sp, #0
	uint32_t i, temp_value;

	for (i = 0; i < OHCI_NUM_OF_INTERRUPT_SOURCE; i++) {
  406a88:	2300      	movs	r3, #0
  406a8a:	607b      	str	r3, [r7, #4]
  406a8c:	e007      	b.n	406a9e <ohci_init+0x1e>
		ohci_callback_pointer[i] = 0;
  406a8e:	4a96      	ldr	r2, [pc, #600]	; (406ce8 <ohci_init+0x268>)
  406a90:	687b      	ldr	r3, [r7, #4]
  406a92:	2100      	movs	r1, #0
  406a94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 */
void ohci_init(void)
{
	uint32_t i, temp_value;

	for (i = 0; i < OHCI_NUM_OF_INTERRUPT_SOURCE; i++) {
  406a98:	687b      	ldr	r3, [r7, #4]
  406a9a:	3301      	adds	r3, #1
  406a9c:	607b      	str	r3, [r7, #4]
  406a9e:	687b      	ldr	r3, [r7, #4]
  406aa0:	2b07      	cmp	r3, #7
  406aa2:	d9f4      	bls.n	406a8e <ohci_init+0xe>
		ohci_callback_pointer[i] = 0;
	}

	memset((void *)&hcca, 0, sizeof(hcca));
  406aa4:	4891      	ldr	r0, [pc, #580]	; (406cec <ohci_init+0x26c>)
  406aa6:	2100      	movs	r1, #0
  406aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
  406aac:	4b90      	ldr	r3, [pc, #576]	; (406cf0 <ohci_init+0x270>)
  406aae:	4798      	blx	r3
	memset((void *)&control_ed, 0, sizeof(control_ed));
  406ab0:	4890      	ldr	r0, [pc, #576]	; (406cf4 <ohci_init+0x274>)
  406ab2:	2100      	movs	r1, #0
  406ab4:	2210      	movs	r2, #16
  406ab6:	4b8e      	ldr	r3, [pc, #568]	; (406cf0 <ohci_init+0x270>)
  406ab8:	4798      	blx	r3
	for (i = 0; i < 8; i++) {
  406aba:	2300      	movs	r3, #0
  406abc:	607b      	str	r3, [r7, #4]
  406abe:	e02f      	b.n	406b20 <ohci_init+0xa0>
		memset((void *)&bulk_ed[i], 0, sizeof(bulk_ed[i]));
  406ac0:	687b      	ldr	r3, [r7, #4]
  406ac2:	011b      	lsls	r3, r3, #4
  406ac4:	4a8c      	ldr	r2, [pc, #560]	; (406cf8 <ohci_init+0x278>)
  406ac6:	4413      	add	r3, r2
  406ac8:	4618      	mov	r0, r3
  406aca:	2100      	movs	r1, #0
  406acc:	2210      	movs	r2, #16
  406ace:	4b88      	ldr	r3, [pc, #544]	; (406cf0 <ohci_init+0x270>)
  406ad0:	4798      	blx	r3
		memset((void *)&interrupt_ed[i], 0, sizeof(interrupt_ed[i]));
  406ad2:	687b      	ldr	r3, [r7, #4]
  406ad4:	011b      	lsls	r3, r3, #4
  406ad6:	4a89      	ldr	r2, [pc, #548]	; (406cfc <ohci_init+0x27c>)
  406ad8:	4413      	add	r3, r2
  406ada:	4618      	mov	r0, r3
  406adc:	2100      	movs	r1, #0
  406ade:	2210      	movs	r2, #16
  406ae0:	4b83      	ldr	r3, [pc, #524]	; (406cf0 <ohci_init+0x270>)
  406ae2:	4798      	blx	r3
		memset((void *)&isochronous_ed[i], 0, sizeof(isochronous_ed[i]));
  406ae4:	687b      	ldr	r3, [r7, #4]
  406ae6:	011b      	lsls	r3, r3, #4
  406ae8:	4a85      	ldr	r2, [pc, #532]	; (406d00 <ohci_init+0x280>)
  406aea:	4413      	add	r3, r2
  406aec:	4618      	mov	r0, r3
  406aee:	2100      	movs	r1, #0
  406af0:	2210      	movs	r2, #16
  406af2:	4b7f      	ldr	r3, [pc, #508]	; (406cf0 <ohci_init+0x270>)
  406af4:	4798      	blx	r3
		memset((void *)&bulk_td_head[i], 0, sizeof(bulk_td_head[i]));
  406af6:	687b      	ldr	r3, [r7, #4]
  406af8:	011b      	lsls	r3, r3, #4
  406afa:	4a82      	ldr	r2, [pc, #520]	; (406d04 <ohci_init+0x284>)
  406afc:	4413      	add	r3, r2
  406afe:	4618      	mov	r0, r3
  406b00:	2100      	movs	r1, #0
  406b02:	2210      	movs	r2, #16
  406b04:	4b7a      	ldr	r3, [pc, #488]	; (406cf0 <ohci_init+0x270>)
  406b06:	4798      	blx	r3
		memset((void *)&bulk_td_tail[i], 0, sizeof(bulk_td_tail[i]));
  406b08:	687b      	ldr	r3, [r7, #4]
  406b0a:	011b      	lsls	r3, r3, #4
  406b0c:	4a7e      	ldr	r2, [pc, #504]	; (406d08 <ohci_init+0x288>)
  406b0e:	4413      	add	r3, r2
  406b10:	4618      	mov	r0, r3
  406b12:	2100      	movs	r1, #0
  406b14:	2210      	movs	r2, #16
  406b16:	4b76      	ldr	r3, [pc, #472]	; (406cf0 <ohci_init+0x270>)
  406b18:	4798      	blx	r3
		ohci_callback_pointer[i] = 0;
	}

	memset((void *)&hcca, 0, sizeof(hcca));
	memset((void *)&control_ed, 0, sizeof(control_ed));
	for (i = 0; i < 8; i++) {
  406b1a:	687b      	ldr	r3, [r7, #4]
  406b1c:	3301      	adds	r3, #1
  406b1e:	607b      	str	r3, [r7, #4]
  406b20:	687b      	ldr	r3, [r7, #4]
  406b22:	2b07      	cmp	r3, #7
  406b24:	d9cc      	bls.n	406ac0 <ohci_init+0x40>
		memset((void *)&interrupt_ed[i], 0, sizeof(interrupt_ed[i]));
		memset((void *)&isochronous_ed[i], 0, sizeof(isochronous_ed[i]));
		memset((void *)&bulk_td_head[i], 0, sizeof(bulk_td_head[i]));
		memset((void *)&bulk_td_tail[i], 0, sizeof(bulk_td_tail[i]));
	}
	memset((void *)&control_td_head, 0, sizeof(control_td_head));
  406b26:	4879      	ldr	r0, [pc, #484]	; (406d0c <ohci_init+0x28c>)
  406b28:	2100      	movs	r1, #0
  406b2a:	2210      	movs	r2, #16
  406b2c:	4b70      	ldr	r3, [pc, #448]	; (406cf0 <ohci_init+0x270>)
  406b2e:	4798      	blx	r3
	memset((void *)&control_td_tail, 0, sizeof(control_td_tail));
  406b30:	4877      	ldr	r0, [pc, #476]	; (406d10 <ohci_init+0x290>)
  406b32:	2100      	movs	r1, #0
  406b34:	2210      	movs	r2, #16
  406b36:	4b6e      	ldr	r3, [pc, #440]	; (406cf0 <ohci_init+0x270>)
  406b38:	4798      	blx	r3
	memset((void *)&interrupt_td_head, 0, sizeof(interrupt_td_head));
  406b3a:	4876      	ldr	r0, [pc, #472]	; (406d14 <ohci_init+0x294>)
  406b3c:	2100      	movs	r1, #0
  406b3e:	2280      	movs	r2, #128	; 0x80
  406b40:	4b6b      	ldr	r3, [pc, #428]	; (406cf0 <ohci_init+0x270>)
  406b42:	4798      	blx	r3
	memset((void *)&interrupt_td_tail, 0, sizeof(interrupt_td_tail));
  406b44:	4874      	ldr	r0, [pc, #464]	; (406d18 <ohci_init+0x298>)
  406b46:	2100      	movs	r1, #0
  406b48:	2280      	movs	r2, #128	; 0x80
  406b4a:	4b69      	ldr	r3, [pc, #420]	; (406cf0 <ohci_init+0x270>)
  406b4c:	4798      	blx	r3
	memset((void *)&isochronous_td_head, 0, sizeof(isochronous_td_head));
  406b4e:	4873      	ldr	r0, [pc, #460]	; (406d1c <ohci_init+0x29c>)
  406b50:	2100      	movs	r1, #0
  406b52:	f44f 7280 	mov.w	r2, #256	; 0x100
  406b56:	4b66      	ldr	r3, [pc, #408]	; (406cf0 <ohci_init+0x270>)
  406b58:	4798      	blx	r3
	memset((void *)&isochronous_td_tail, 0, sizeof(isochronous_td_tail));
  406b5a:	4871      	ldr	r0, [pc, #452]	; (406d20 <ohci_init+0x2a0>)
  406b5c:	2100      	movs	r1, #0
  406b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
  406b62:	4b63      	ldr	r3, [pc, #396]	; (406cf0 <ohci_init+0x270>)
  406b64:	4798      	blx	r3

	/* Setup Host Controller to issue a software reset. */
	OHCI->HcCommandStatus = HC_COMMANDSTATUS_HCR;
  406b66:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406b6a:	2201      	movs	r2, #1
  406b6c:	609a      	str	r2, [r3, #8]
	while (OHCI->HcCommandStatus & HC_COMMANDSTATUS_HCR);
  406b6e:	bf00      	nop
  406b70:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406b74:	689b      	ldr	r3, [r3, #8]
  406b76:	f003 0301 	and.w	r3, r3, #1
  406b7a:	2b00      	cmp	r3, #0
  406b7c:	d1f8      	bne.n	406b70 <ohci_init+0xf0>

    /* Write Fm Interval and Largest Data Packet Counter. */
	OHCI->HcFmInterval    = FIT | (FSMP(FI)<< 16) | FI;
  406b7e:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406b82:	4a68      	ldr	r2, [pc, #416]	; (406d24 <ohci_init+0x2a4>)
  406b84:	635a      	str	r2, [r3, #52]	; 0x34
	OHCI->HcPeriodicStart = FI * 90 / 100;
  406b86:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406b8a:	f642 222f 	movw	r2, #10799	; 0x2a2f
  406b8e:	641a      	str	r2, [r3, #64]	; 0x40

	/* Begin sending SOF. */
	temp_value = OHCI->HcControl;
  406b90:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406b94:	685b      	ldr	r3, [r3, #4]
  406b96:	603b      	str	r3, [r7, #0]
	temp_value &= ~HC_CONTROL_HCFS;
  406b98:	683b      	ldr	r3, [r7, #0]
  406b9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  406b9e:	603b      	str	r3, [r7, #0]
	temp_value |= HC_CONTROL_HCFS_USBOPERATIONAL;
  406ba0:	683b      	ldr	r3, [r7, #0]
  406ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406ba6:	603b      	str	r3, [r7, #0]
	OHCI->HcControl = temp_value;
  406ba8:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  406bac:	683b      	ldr	r3, [r7, #0]
  406bae:	6053      	str	r3, [r2, #4]

	OHCI->HcControl |= HC_CONTROL_PLE;
  406bb0:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  406bb4:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406bb8:	685b      	ldr	r3, [r3, #4]
  406bba:	f043 0304 	orr.w	r3, r3, #4
  406bbe:	6053      	str	r3, [r2, #4]
	OHCI->HcControl |= HC_CONTROL_IE;
  406bc0:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  406bc4:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406bc8:	685b      	ldr	r3, [r3, #4]
  406bca:	f043 0308 	orr.w	r3, r3, #8
  406bce:	6053      	str	r3, [r2, #4]

	OHCI->HcHCCA = (uint32_t)&hcca;
  406bd0:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406bd4:	4a45      	ldr	r2, [pc, #276]	; (406cec <ohci_init+0x26c>)
  406bd6:	619a      	str	r2, [r3, #24]

	/* Clear Interrrupt Status. */
	OHCI->HcInterruptStatus |= OHCI->HcInterruptStatus;
  406bd8:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406bdc:	68db      	ldr	r3, [r3, #12]
  406bde:	f04f 5101 	mov.w	r1, #541065216	; 0x20400000
  406be2:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  406be6:	68d2      	ldr	r2, [r2, #12]
  406be8:	4313      	orrs	r3, r2
  406bea:	60cb      	str	r3, [r1, #12]

	/* Enable some interrupts. */
	OHCI->HcInterruptEnable = HC_INTERRUPT_WDH | HC_INTERRUPT_SF
  406bec:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406bf0:	4a4d      	ldr	r2, [pc, #308]	; (406d28 <ohci_init+0x2a8>)
  406bf2:	611a      	str	r2, [r3, #16]
				| HC_INTERRUPT_RD | HC_INTERRUPT_RHSC | HC_INTERRUPT_MIE;

	/* Delay some time to access the port. */
	delay_ms(50);
  406bf4:	4b4d      	ldr	r3, [pc, #308]	; (406d2c <ohci_init+0x2ac>)
  406bf6:	4798      	blx	r3
  406bf8:	4603      	mov	r3, r0
  406bfa:	4618      	mov	r0, r3
  406bfc:	f04f 0100 	mov.w	r1, #0
  406c00:	4602      	mov	r2, r0
  406c02:	460b      	mov	r3, r1
  406c04:	1892      	adds	r2, r2, r2
  406c06:	eb43 0303 	adc.w	r3, r3, r3
  406c0a:	1812      	adds	r2, r2, r0
  406c0c:	eb43 0301 	adc.w	r3, r3, r1
  406c10:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  406c14:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
  406c18:	ea4f 08c2 	mov.w	r8, r2, lsl #3
  406c1c:	4642      	mov	r2, r8
  406c1e:	464b      	mov	r3, r9
  406c20:	1812      	adds	r2, r2, r0
  406c22:	eb43 0301 	adc.w	r3, r3, r1
  406c26:	1892      	adds	r2, r2, r2
  406c28:	eb43 0303 	adc.w	r3, r3, r3
  406c2c:	4610      	mov	r0, r2
  406c2e:	4619      	mov	r1, r3
  406c30:	f243 62af 	movw	r2, #13999	; 0x36af
  406c34:	f04f 0300 	mov.w	r3, #0
  406c38:	1812      	adds	r2, r2, r0
  406c3a:	eb43 0301 	adc.w	r3, r3, r1
  406c3e:	4e3c      	ldr	r6, [pc, #240]	; (406d30 <ohci_init+0x2b0>)
  406c40:	4610      	mov	r0, r2
  406c42:	4619      	mov	r1, r3
  406c44:	f243 62b0 	movw	r2, #14000	; 0x36b0
  406c48:	f04f 0300 	mov.w	r3, #0
  406c4c:	47b0      	blx	r6
  406c4e:	4602      	mov	r2, r0
  406c50:	460b      	mov	r3, r1
  406c52:	4613      	mov	r3, r2
  406c54:	4618      	mov	r0, r3
  406c56:	4b37      	ldr	r3, [pc, #220]	; (406d34 <ohci_init+0x2b4>)
  406c58:	4798      	blx	r3

	/* Set Global Power. */
	OHCI->HcRhStatus = RH_HS_LPSC;
  406c5a:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406c5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  406c62:	651a      	str	r2, [r3, #80]	; 0x50

	/* Initiate port reset. */
	OHCI->HcRhPortStatus = RH_PS_PRS;
  406c64:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406c68:	2210      	movs	r2, #16
  406c6a:	655a      	str	r2, [r3, #84]	; 0x54
	while (OHCI->HcRhPortStatus & RH_PS_PRS);
  406c6c:	bf00      	nop
  406c6e:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  406c74:	f003 0310 	and.w	r3, r3, #16
  406c78:	2b00      	cmp	r3, #0
  406c7a:	d1f8      	bne.n	406c6e <ohci_init+0x1ee>
	delay_ms(100);
  406c7c:	4b2b      	ldr	r3, [pc, #172]	; (406d2c <ohci_init+0x2ac>)
  406c7e:	4798      	blx	r3
  406c80:	4603      	mov	r3, r0
  406c82:	4618      	mov	r0, r3
  406c84:	f04f 0100 	mov.w	r1, #0
  406c88:	4602      	mov	r2, r0
  406c8a:	460b      	mov	r3, r1
  406c8c:	1892      	adds	r2, r2, r2
  406c8e:	eb43 0303 	adc.w	r3, r3, r3
  406c92:	1812      	adds	r2, r2, r0
  406c94:	eb43 0301 	adc.w	r3, r3, r1
  406c98:	015d      	lsls	r5, r3, #5
  406c9a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  406c9e:	0154      	lsls	r4, r2, #5
  406ca0:	1912      	adds	r2, r2, r4
  406ca2:	eb43 0305 	adc.w	r3, r3, r5
  406ca6:	1812      	adds	r2, r2, r0
  406ca8:	eb43 0301 	adc.w	r3, r3, r1
  406cac:	f243 60af 	movw	r0, #13999	; 0x36af
  406cb0:	f04f 0100 	mov.w	r1, #0
  406cb4:	1812      	adds	r2, r2, r0
  406cb6:	eb43 0301 	adc.w	r3, r3, r1
  406cba:	4c1d      	ldr	r4, [pc, #116]	; (406d30 <ohci_init+0x2b0>)
  406cbc:	4610      	mov	r0, r2
  406cbe:	4619      	mov	r1, r3
  406cc0:	f243 62b0 	movw	r2, #14000	; 0x36b0
  406cc4:	f04f 0300 	mov.w	r3, #0
  406cc8:	47a0      	blx	r4
  406cca:	4602      	mov	r2, r0
  406ccc:	460b      	mov	r3, r1
  406cce:	4613      	mov	r3, r2
  406cd0:	4618      	mov	r0, r3
  406cd2:	4b18      	ldr	r3, [pc, #96]	; (406d34 <ohci_init+0x2b4>)
  406cd4:	4798      	blx	r3
    /* Clear port reset signal. */
    OHCI->HcRhPortStatus = RH_PS_PRSC;
  406cd6:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406cda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  406cde:	655a      	str	r2, [r3, #84]	; 0x54
}
  406ce0:	370c      	adds	r7, #12
  406ce2:	46bd      	mov	sp, r7
  406ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406ce8:	20019ce0 	.word	0x20019ce0
  406cec:	20019600 	.word	0x20019600
  406cf0:	0040a815 	.word	0x0040a815
  406cf4:	20019700 	.word	0x20019700
  406cf8:	20019730 	.word	0x20019730
  406cfc:	200198c0 	.word	0x200198c0
  406d00:	20019a50 	.word	0x20019a50
  406d04:	200197c0 	.word	0x200197c0
  406d08:	20019840 	.word	0x20019840
  406d0c:	20019710 	.word	0x20019710
  406d10:	20019720 	.word	0x20019720
  406d14:	20019950 	.word	0x20019950
  406d18:	200199d0 	.word	0x200199d0
  406d1c:	20019ae0 	.word	0x20019ae0
  406d20:	20019be0 	.word	0x20019be0
  406d24:	a7782edf 	.word	0xa7782edf
  406d28:	8000004e 	.word	0x8000004e
  406d2c:	00406a6d 	.word	0x00406a6d
  406d30:	00409b25 	.word	0x00409b25
  406d34:	20000001 	.word	0x20000001

00406d38 <ohci_get_device_speed>:
 * \brief Gets the speed of connected device.
 *
 * \return Device speed, true for low speed, false for full speed.
 */
bool ohci_get_device_speed (void)
{
  406d38:	b480      	push	{r7}
  406d3a:	af00      	add	r7, sp, #0
	if (OHCI->HcRhPortStatus & RH_PS_LSDA) {
  406d3c:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  406d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
  406d46:	2b00      	cmp	r3, #0
  406d48:	d001      	beq.n	406d4e <ohci_get_device_speed+0x16>
		return true;
  406d4a:	2301      	movs	r3, #1
  406d4c:	e000      	b.n	406d50 <ohci_get_device_speed+0x18>
	} else {
		return false;
  406d4e:	2300      	movs	r3, #0
	}
}
  406d50:	4618      	mov	r0, r3
  406d52:	46bd      	mov	sp, r7
  406d54:	f85d 7b04 	ldr.w	r7, [sp], #4
  406d58:	4770      	bx	lr
  406d5a:	bf00      	nop

00406d5c <ohci_get_frame_number>:
 * \brief Gets the current Start Of Frame (SOF) number
 *
 * \return current start of frame number.
 */
uint16_t ohci_get_frame_number (void)
{
  406d5c:	b480      	push	{r7}
  406d5e:	af00      	add	r7, sp, #0
	return hcca.FrameNumber;
  406d60:	4b04      	ldr	r3, [pc, #16]	; (406d74 <ohci_get_frame_number+0x18>)
  406d62:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
  406d66:	b29b      	uxth	r3, r3
}
  406d68:	4618      	mov	r0, r3
  406d6a:	46bd      	mov	sp, r7
  406d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406d70:	4770      	bx	lr
  406d72:	bf00      	nop
  406d74:	20019600 	.word	0x20019600

00406d78 <ohci_bus_reset>:
/**
 * \brief Enables the Reset state on the USB line.
 *
 */
void ohci_bus_reset(void)
{
  406d78:	b5b0      	push	{r4, r5, r7, lr}
  406d7a:	af00      	add	r7, sp, #0
	Assert(!(OHCI->HcRhPortStatus & RH_PS_CCS));

	/* Initiate port reset. */
	OHCI->HcRhPortStatus = RH_PS_PRS;
  406d7c:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406d80:	2210      	movs	r2, #16
  406d82:	655a      	str	r2, [r3, #84]	; 0x54
	while (OHCI->HcRhPortStatus & RH_PS_PRS);
  406d84:	bf00      	nop
  406d86:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  406d8c:	f003 0310 	and.w	r3, r3, #16
  406d90:	2b00      	cmp	r3, #0
  406d92:	d1f8      	bne.n	406d86 <ohci_bus_reset+0xe>
	delay_ms(100);
  406d94:	4b1a      	ldr	r3, [pc, #104]	; (406e00 <ohci_bus_reset+0x88>)
  406d96:	4798      	blx	r3
  406d98:	4603      	mov	r3, r0
  406d9a:	4618      	mov	r0, r3
  406d9c:	f04f 0100 	mov.w	r1, #0
  406da0:	4602      	mov	r2, r0
  406da2:	460b      	mov	r3, r1
  406da4:	1892      	adds	r2, r2, r2
  406da6:	eb43 0303 	adc.w	r3, r3, r3
  406daa:	1812      	adds	r2, r2, r0
  406dac:	eb43 0301 	adc.w	r3, r3, r1
  406db0:	015d      	lsls	r5, r3, #5
  406db2:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  406db6:	0154      	lsls	r4, r2, #5
  406db8:	1912      	adds	r2, r2, r4
  406dba:	eb43 0305 	adc.w	r3, r3, r5
  406dbe:	1812      	adds	r2, r2, r0
  406dc0:	eb43 0301 	adc.w	r3, r3, r1
  406dc4:	f243 60af 	movw	r0, #13999	; 0x36af
  406dc8:	f04f 0100 	mov.w	r1, #0
  406dcc:	1812      	adds	r2, r2, r0
  406dce:	eb43 0301 	adc.w	r3, r3, r1
  406dd2:	4c0c      	ldr	r4, [pc, #48]	; (406e04 <ohci_bus_reset+0x8c>)
  406dd4:	4610      	mov	r0, r2
  406dd6:	4619      	mov	r1, r3
  406dd8:	f243 62b0 	movw	r2, #14000	; 0x36b0
  406ddc:	f04f 0300 	mov.w	r3, #0
  406de0:	47a0      	blx	r4
  406de2:	4602      	mov	r2, r0
  406de4:	460b      	mov	r3, r1
  406de6:	4613      	mov	r3, r2
  406de8:	4618      	mov	r0, r3
  406dea:	4b07      	ldr	r3, [pc, #28]	; (406e08 <ohci_bus_reset+0x90>)
  406dec:	4798      	blx	r3
    /* Clear port reset signal. */
    OHCI->HcRhPortStatus = RH_PS_PRSC;
  406dee:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406df2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  406df6:	655a      	str	r2, [r3, #84]	; 0x54

	bus_reset_flag = true;
  406df8:	4b04      	ldr	r3, [pc, #16]	; (406e0c <ohci_bus_reset+0x94>)
  406dfa:	2201      	movs	r2, #1
  406dfc:	601a      	str	r2, [r3, #0]
}
  406dfe:	bdb0      	pop	{r4, r5, r7, pc}
  406e00:	00406a6d 	.word	0x00406a6d
  406e04:	00409b25 	.word	0x00409b25
  406e08:	20000001 	.word	0x20000001
  406e0c:	20019d04 	.word	0x20019d04

00406e10 <ohci_bus_suspend>:
/**
 * \brief Enables the suspend state on the USB line.
 *
 */
void ohci_bus_suspend(void)
{
  406e10:	b480      	push	{r7}
  406e12:	b083      	sub	sp, #12
  406e14:	af00      	add	r7, sp, #0
	uint32_t temp_value;

	OHCI->HcControl |= HC_CONTROL_RWE;
  406e16:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  406e1a:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406e1e:	685b      	ldr	r3, [r3, #4]
  406e20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  406e24:	6053      	str	r3, [r2, #4]

	/**
	 * Suspend hub ... this is the "global (to this bus) suspend" mode,
	 * which doesn't imply ports will first be individually suspended.
	 */
	temp_value = OHCI->HcControl;
  406e26:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406e2a:	685b      	ldr	r3, [r3, #4]
  406e2c:	607b      	str	r3, [r7, #4]
	temp_value &= ~HC_CONTROL_HCFS;
  406e2e:	687b      	ldr	r3, [r7, #4]
  406e30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  406e34:	607b      	str	r3, [r7, #4]
	temp_value |= HC_CONTROL_HCFS_USBSUSPEND;
  406e36:	687b      	ldr	r3, [r7, #4]
  406e38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  406e3c:	607b      	str	r3, [r7, #4]
	OHCI->HcControl = temp_value;
  406e3e:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  406e42:	687b      	ldr	r3, [r7, #4]
  406e44:	6053      	str	r3, [r2, #4]

	/* Device remote wakeup enable. */
	OHCI->HcRhStatus = RH_HS_DRWE;
  406e46:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406e4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  406e4e:	651a      	str	r2, [r3, #80]	; 0x50
}
  406e50:	370c      	adds	r7, #12
  406e52:	46bd      	mov	sp, r7
  406e54:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e58:	4770      	bx	lr
  406e5a:	bf00      	nop

00406e5c <ohci_bus_resume>:
 * \brief Enables the IDLE state on the USB line.
 * The IDLE state is enable when SOF are present on USB line.
 * A Downstream Resume signal can be sent.
 */
void ohci_bus_resume(void)
{
  406e5c:	b5b0      	push	{r4, r5, r7, lr}
  406e5e:	b082      	sub	sp, #8
  406e60:	af00      	add	r7, sp, #0
	uint32_t temp_value;

	/* Device remote wakeup disable. */
	OHCI->HcRhStatus = RH_HS_CRWE;
  406e62:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406e66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  406e6a:	651a      	str	r2, [r3, #80]	; 0x50

	temp_value = OHCI->HcControl;
  406e6c:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406e70:	685b      	ldr	r3, [r3, #4]
  406e72:	607b      	str	r3, [r7, #4]
	temp_value &= ~HC_CONTROL_HCFS;
  406e74:	687b      	ldr	r3, [r7, #4]
  406e76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  406e7a:	607b      	str	r3, [r7, #4]
	temp_value |= HC_CONTROL_HCFS_USBRESUME;
  406e7c:	687b      	ldr	r3, [r7, #4]
  406e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406e82:	607b      	str	r3, [r7, #4]
	OHCI->HcControl = temp_value;
  406e84:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  406e88:	687b      	ldr	r3, [r7, #4]
  406e8a:	6053      	str	r3, [r2, #4]

	delay_ms(50);
  406e8c:	4b25      	ldr	r3, [pc, #148]	; (406f24 <ohci_bus_resume+0xc8>)
  406e8e:	4798      	blx	r3
  406e90:	4603      	mov	r3, r0
  406e92:	4618      	mov	r0, r3
  406e94:	f04f 0100 	mov.w	r1, #0
  406e98:	4602      	mov	r2, r0
  406e9a:	460b      	mov	r3, r1
  406e9c:	1892      	adds	r2, r2, r2
  406e9e:	eb43 0303 	adc.w	r3, r3, r3
  406ea2:	1812      	adds	r2, r2, r0
  406ea4:	eb43 0301 	adc.w	r3, r3, r1
  406ea8:	00dd      	lsls	r5, r3, #3
  406eaa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
  406eae:	00d4      	lsls	r4, r2, #3
  406eb0:	4622      	mov	r2, r4
  406eb2:	462b      	mov	r3, r5
  406eb4:	1812      	adds	r2, r2, r0
  406eb6:	eb43 0301 	adc.w	r3, r3, r1
  406eba:	1892      	adds	r2, r2, r2
  406ebc:	eb43 0303 	adc.w	r3, r3, r3
  406ec0:	4610      	mov	r0, r2
  406ec2:	4619      	mov	r1, r3
  406ec4:	f243 62af 	movw	r2, #13999	; 0x36af
  406ec8:	f04f 0300 	mov.w	r3, #0
  406ecc:	1812      	adds	r2, r2, r0
  406ece:	eb43 0301 	adc.w	r3, r3, r1
  406ed2:	4c15      	ldr	r4, [pc, #84]	; (406f28 <ohci_bus_resume+0xcc>)
  406ed4:	4610      	mov	r0, r2
  406ed6:	4619      	mov	r1, r3
  406ed8:	f243 62b0 	movw	r2, #14000	; 0x36b0
  406edc:	f04f 0300 	mov.w	r3, #0
  406ee0:	47a0      	blx	r4
  406ee2:	4602      	mov	r2, r0
  406ee4:	460b      	mov	r3, r1
  406ee6:	4613      	mov	r3, r2
  406ee8:	4618      	mov	r0, r3
  406eea:	4b10      	ldr	r3, [pc, #64]	; (406f2c <ohci_bus_resume+0xd0>)
  406eec:	4798      	blx	r3

	/* Then re-enable operations */
	temp_value = OHCI->HcControl;
  406eee:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406ef2:	685b      	ldr	r3, [r3, #4]
  406ef4:	607b      	str	r3, [r7, #4]
	temp_value &= ~HC_CONTROL_HCFS;
  406ef6:	687b      	ldr	r3, [r7, #4]
  406ef8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  406efc:	607b      	str	r3, [r7, #4]
	temp_value |= HC_CONTROL_HCFS_USBOPERATIONAL;
  406efe:	687b      	ldr	r3, [r7, #4]
  406f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406f04:	607b      	str	r3, [r7, #4]
	OHCI->HcControl = temp_value;
  406f06:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  406f0a:	687b      	ldr	r3, [r7, #4]
  406f0c:	6053      	str	r3, [r2, #4]


	OHCI->HcControl &= ~HC_CONTROL_RWE;
  406f0e:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  406f12:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406f16:	685b      	ldr	r3, [r3, #4]
  406f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  406f1c:	6053      	str	r3, [r2, #4]
}
  406f1e:	3708      	adds	r7, #8
  406f20:	46bd      	mov	sp, r7
  406f22:	bdb0      	pop	{r4, r5, r7, pc}
  406f24:	00406a6d 	.word	0x00406a6d
  406f28:	00409b25 	.word	0x00409b25
  406f2c:	20000001 	.word	0x20000001

00406f30 <ohci_add_ed_control>:
/**
 * \brief Add a control endpoint.
 * \return true for success.
 */
bool ohci_add_ed_control(ed_info_t *ed_info)
{
  406f30:	b580      	push	{r7, lr}
  406f32:	b082      	sub	sp, #8
  406f34:	af00      	add	r7, sp, #0
  406f36:	6078      	str	r0, [r7, #4]
	/* control endpoint. */	
	memset((void *)&control_ed, 0, sizeof(control_ed));
  406f38:	4808      	ldr	r0, [pc, #32]	; (406f5c <ohci_add_ed_control+0x2c>)
  406f3a:	2100      	movs	r1, #0
  406f3c:	2210      	movs	r2, #16
  406f3e:	4b08      	ldr	r3, [pc, #32]	; (406f60 <ohci_add_ed_control+0x30>)
  406f40:	4798      	blx	r3
	OHCI->HcControlHeadED = (uint32_t)&control_ed;
  406f42:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406f46:	4a05      	ldr	r2, [pc, #20]	; (406f5c <ohci_add_ed_control+0x2c>)
  406f48:	621a      	str	r2, [r3, #32]
	control_ed.ed_info.ul_ed_info = ed_info->ul_ed_info;
  406f4a:	687b      	ldr	r3, [r7, #4]
  406f4c:	681b      	ldr	r3, [r3, #0]
  406f4e:	4a03      	ldr	r2, [pc, #12]	; (406f5c <ohci_add_ed_control+0x2c>)
  406f50:	6013      	str	r3, [r2, #0]
	return true;
  406f52:	2301      	movs	r3, #1
}
  406f54:	4618      	mov	r0, r3
  406f56:	3708      	adds	r7, #8
  406f58:	46bd      	mov	sp, r7
  406f5a:	bd80      	pop	{r7, pc}
  406f5c:	20019700 	.word	0x20019700
  406f60:	0040a815 	.word	0x0040a815

00406f64 <ohci_add_ed_bulk>:
/**
 * \brief Add a bulk endpoint.
 * \return true for success.
 */
bool ohci_add_ed_bulk(ed_info_t *ed_info)
{
  406f64:	b580      	push	{r7, lr}
  406f66:	b086      	sub	sp, #24
  406f68:	af00      	add	r7, sp, #0
  406f6a:	6078      	str	r0, [r7, #4]

	struct ohci_ed *bulk_ed_head;
	struct ohci_ed *bulk_ed_add;

	/* Check if there is free bulk endpoint. */
	for (i = 0; i < 8; i++) {
  406f6c:	2300      	movs	r3, #0
  406f6e:	617b      	str	r3, [r7, #20]
  406f70:	e02a      	b.n	406fc8 <ohci_add_ed_bulk+0x64>
		if (!(bulk_ed_status & (1 << i))) {
  406f72:	4b32      	ldr	r3, [pc, #200]	; (40703c <ohci_add_ed_bulk+0xd8>)
  406f74:	781b      	ldrb	r3, [r3, #0]
  406f76:	b2db      	uxtb	r3, r3
  406f78:	461a      	mov	r2, r3
  406f7a:	697b      	ldr	r3, [r7, #20]
  406f7c:	fa42 f303 	asr.w	r3, r2, r3
  406f80:	f003 0301 	and.w	r3, r3, #1
  406f84:	2b00      	cmp	r3, #0
  406f86:	d11c      	bne.n	406fc2 <ohci_add_ed_bulk+0x5e>
			bulk_ed_status |= (1 << i);
  406f88:	697b      	ldr	r3, [r7, #20]
  406f8a:	2201      	movs	r2, #1
  406f8c:	fa02 f303 	lsl.w	r3, r2, r3
  406f90:	b2da      	uxtb	r2, r3
  406f92:	4b2a      	ldr	r3, [pc, #168]	; (40703c <ohci_add_ed_bulk+0xd8>)
  406f94:	781b      	ldrb	r3, [r3, #0]
  406f96:	b2db      	uxtb	r3, r3
  406f98:	b2db      	uxtb	r3, r3
  406f9a:	4313      	orrs	r3, r2
  406f9c:	b2db      	uxtb	r3, r3
  406f9e:	b2da      	uxtb	r2, r3
  406fa0:	4b26      	ldr	r3, [pc, #152]	; (40703c <ohci_add_ed_bulk+0xd8>)
  406fa2:	701a      	strb	r2, [r3, #0]
			memset((void *)&bulk_ed[i], 0, sizeof(bulk_ed[i]));
  406fa4:	697b      	ldr	r3, [r7, #20]
  406fa6:	011b      	lsls	r3, r3, #4
  406fa8:	4a25      	ldr	r2, [pc, #148]	; (407040 <ohci_add_ed_bulk+0xdc>)
  406faa:	4413      	add	r3, r2
  406fac:	4618      	mov	r0, r3
  406fae:	2100      	movs	r1, #0
  406fb0:	2210      	movs	r2, #16
  406fb2:	4b24      	ldr	r3, [pc, #144]	; (407044 <ohci_add_ed_bulk+0xe0>)
  406fb4:	4798      	blx	r3
			bulk_ed_add = (struct ohci_ed *)&bulk_ed[i];
  406fb6:	697b      	ldr	r3, [r7, #20]
  406fb8:	011b      	lsls	r3, r3, #4
  406fba:	4a21      	ldr	r2, [pc, #132]	; (407040 <ohci_add_ed_bulk+0xdc>)
  406fbc:	4413      	add	r3, r2
  406fbe:	60fb      	str	r3, [r7, #12]
			break;
  406fc0:	e005      	b.n	406fce <ohci_add_ed_bulk+0x6a>

	struct ohci_ed *bulk_ed_head;
	struct ohci_ed *bulk_ed_add;

	/* Check if there is free bulk endpoint. */
	for (i = 0; i < 8; i++) {
  406fc2:	697b      	ldr	r3, [r7, #20]
  406fc4:	3301      	adds	r3, #1
  406fc6:	617b      	str	r3, [r7, #20]
  406fc8:	697b      	ldr	r3, [r7, #20]
  406fca:	2b07      	cmp	r3, #7
  406fcc:	d9d1      	bls.n	406f72 <ohci_add_ed_bulk+0xe>
			memset((void *)&bulk_ed[i], 0, sizeof(bulk_ed[i]));
			bulk_ed_add = (struct ohci_ed *)&bulk_ed[i];
			break;
		}
	}
	if (i == 8) {
  406fce:	697b      	ldr	r3, [r7, #20]
  406fd0:	2b08      	cmp	r3, #8
  406fd2:	d101      	bne.n	406fd8 <ohci_add_ed_bulk+0x74>
		return false;
  406fd4:	2300      	movs	r3, #0
  406fd6:	e02d      	b.n	407034 <ohci_add_ed_bulk+0xd0>
	}

	bulk_ed_head = (struct ohci_ed *)OHCI->HcBulkHeadED;
  406fd8:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  406fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  406fde:	613b      	str	r3, [r7, #16]

	if (bulk_ed_head == NULL) {
  406fe0:	693b      	ldr	r3, [r7, #16]
  406fe2:	2b00      	cmp	r3, #0
  406fe4:	d108      	bne.n	406ff8 <ohci_add_ed_bulk+0x94>
		bulk_ed_add->ed_info.ul_ed_info = ed_info->ul_ed_info;
  406fe6:	687b      	ldr	r3, [r7, #4]
  406fe8:	681a      	ldr	r2, [r3, #0]
  406fea:	68fb      	ldr	r3, [r7, #12]
  406fec:	601a      	str	r2, [r3, #0]
		OHCI->HcBulkHeadED = (uint32_t)bulk_ed_add;
  406fee:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  406ff2:	68fb      	ldr	r3, [r7, #12]
  406ff4:	6293      	str	r3, [r2, #40]	; 0x28
  406ff6:	e01c      	b.n	407032 <ohci_add_ed_bulk+0xce>
	} else {
		/* Check if the endpoint has been allocated */
		while (bulk_ed_head->p_next_ed != NULL) {
  406ff8:	e010      	b.n	40701c <ohci_add_ed_bulk+0xb8>
			if (bulk_ed_head->ed_info.ed_info_s.bEndpointNumber ==
  406ffa:	693b      	ldr	r3, [r7, #16]
  406ffc:	881b      	ldrh	r3, [r3, #0]
  406ffe:	f3c3 13c3 	ubfx	r3, r3, #7, #4
  407002:	b2da      	uxtb	r2, r3
					ed_info->ed_info_s.bEndpointNumber) {
  407004:	687b      	ldr	r3, [r7, #4]
  407006:	881b      	ldrh	r3, [r3, #0]
  407008:	f3c3 13c3 	ubfx	r3, r3, #7, #4
  40700c:	b2db      	uxtb	r3, r3
		bulk_ed_add->ed_info.ul_ed_info = ed_info->ul_ed_info;
		OHCI->HcBulkHeadED = (uint32_t)bulk_ed_add;
	} else {
		/* Check if the endpoint has been allocated */
		while (bulk_ed_head->p_next_ed != NULL) {
			if (bulk_ed_head->ed_info.ed_info_s.bEndpointNumber ==
  40700e:	429a      	cmp	r2, r3
  407010:	d101      	bne.n	407016 <ohci_add_ed_bulk+0xb2>
					ed_info->ed_info_s.bEndpointNumber) {
				return false;
  407012:	2300      	movs	r3, #0
  407014:	e00e      	b.n	407034 <ohci_add_ed_bulk+0xd0>
			}
			bulk_ed_head = bulk_ed_head->p_next_ed;
  407016:	693b      	ldr	r3, [r7, #16]
  407018:	68db      	ldr	r3, [r3, #12]
  40701a:	613b      	str	r3, [r7, #16]
	if (bulk_ed_head == NULL) {
		bulk_ed_add->ed_info.ul_ed_info = ed_info->ul_ed_info;
		OHCI->HcBulkHeadED = (uint32_t)bulk_ed_add;
	} else {
		/* Check if the endpoint has been allocated */
		while (bulk_ed_head->p_next_ed != NULL) {
  40701c:	693b      	ldr	r3, [r7, #16]
  40701e:	68db      	ldr	r3, [r3, #12]
  407020:	2b00      	cmp	r3, #0
  407022:	d1ea      	bne.n	406ffa <ohci_add_ed_bulk+0x96>
				return false;
			}
			bulk_ed_head = bulk_ed_head->p_next_ed;
		};

		bulk_ed_head->p_next_ed = bulk_ed_add;
  407024:	693b      	ldr	r3, [r7, #16]
  407026:	68fa      	ldr	r2, [r7, #12]
  407028:	60da      	str	r2, [r3, #12]
		bulk_ed_add->ed_info.ul_ed_info = ed_info->ul_ed_info;
  40702a:	687b      	ldr	r3, [r7, #4]
  40702c:	681a      	ldr	r2, [r3, #0]
  40702e:	68fb      	ldr	r3, [r7, #12]
  407030:	601a      	str	r2, [r3, #0]
	}
	return true;
  407032:	2301      	movs	r3, #1
}
  407034:	4618      	mov	r0, r3
  407036:	3718      	adds	r7, #24
  407038:	46bd      	mov	sp, r7
  40703a:	bd80      	pop	{r7, pc}
  40703c:	200197b0 	.word	0x200197b0
  407040:	20019730 	.word	0x20019730
  407044:	0040a815 	.word	0x0040a815

00407048 <ohci_add_ed_period>:
 * Simplify the management, only 32 interrupt ED support, no list on each entry.
 *
 * \return true for success.
 */
bool ohci_add_ed_period(ed_info_t *ed_info)
{
  407048:	b580      	push	{r7, lr}
  40704a:	b086      	sub	sp, #24
  40704c:	af00      	add	r7, sp, #0
  40704e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	struct ohci_ed *period_ed_add;
	struct ohci_ed *period_ed_header;

	if (ed_info->ed_info_s.bFormat) {
  407050:	687b      	ldr	r3, [r7, #4]
  407052:	785b      	ldrb	r3, [r3, #1]
  407054:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  407058:	b2db      	uxtb	r3, r3
  40705a:	2b00      	cmp	r3, #0
  40705c:	d055      	beq.n	40710a <ohci_add_ed_period+0xc2>
		/* isochronous ED */

		/* Check if there is free isochronous endpoint. */
		for (j = 0; j < 8; j++) {
  40705e:	2300      	movs	r3, #0
  407060:	613b      	str	r3, [r7, #16]
  407062:	e02a      	b.n	4070ba <ohci_add_ed_period+0x72>
			if (!(isochronous_ed_status & (1 << j))) {
  407064:	4b64      	ldr	r3, [pc, #400]	; (4071f8 <ohci_add_ed_period+0x1b0>)
  407066:	781b      	ldrb	r3, [r3, #0]
  407068:	b2db      	uxtb	r3, r3
  40706a:	461a      	mov	r2, r3
  40706c:	693b      	ldr	r3, [r7, #16]
  40706e:	fa42 f303 	asr.w	r3, r2, r3
  407072:	f003 0301 	and.w	r3, r3, #1
  407076:	2b00      	cmp	r3, #0
  407078:	d11c      	bne.n	4070b4 <ohci_add_ed_period+0x6c>
				isochronous_ed_status |= (1 << j);
  40707a:	693b      	ldr	r3, [r7, #16]
  40707c:	2201      	movs	r2, #1
  40707e:	fa02 f303 	lsl.w	r3, r2, r3
  407082:	b2da      	uxtb	r2, r3
  407084:	4b5c      	ldr	r3, [pc, #368]	; (4071f8 <ohci_add_ed_period+0x1b0>)
  407086:	781b      	ldrb	r3, [r3, #0]
  407088:	b2db      	uxtb	r3, r3
  40708a:	b2db      	uxtb	r3, r3
  40708c:	4313      	orrs	r3, r2
  40708e:	b2db      	uxtb	r3, r3
  407090:	b2da      	uxtb	r2, r3
  407092:	4b59      	ldr	r3, [pc, #356]	; (4071f8 <ohci_add_ed_period+0x1b0>)
  407094:	701a      	strb	r2, [r3, #0]
				memset((void *)&isochronous_ed[j], 0, sizeof(isochronous_ed[j]));
  407096:	693b      	ldr	r3, [r7, #16]
  407098:	011b      	lsls	r3, r3, #4
  40709a:	4a58      	ldr	r2, [pc, #352]	; (4071fc <ohci_add_ed_period+0x1b4>)
  40709c:	4413      	add	r3, r2
  40709e:	4618      	mov	r0, r3
  4070a0:	2100      	movs	r1, #0
  4070a2:	2210      	movs	r2, #16
  4070a4:	4b56      	ldr	r3, [pc, #344]	; (407200 <ohci_add_ed_period+0x1b8>)
  4070a6:	4798      	blx	r3
				period_ed_add = (struct ohci_ed *)&isochronous_ed[j];
  4070a8:	693b      	ldr	r3, [r7, #16]
  4070aa:	011b      	lsls	r3, r3, #4
  4070ac:	4a53      	ldr	r2, [pc, #332]	; (4071fc <ohci_add_ed_period+0x1b4>)
  4070ae:	4413      	add	r3, r2
  4070b0:	60fb      	str	r3, [r7, #12]
				break;
  4070b2:	e005      	b.n	4070c0 <ohci_add_ed_period+0x78>

	if (ed_info->ed_info_s.bFormat) {
		/* isochronous ED */

		/* Check if there is free isochronous endpoint. */
		for (j = 0; j < 8; j++) {
  4070b4:	693b      	ldr	r3, [r7, #16]
  4070b6:	3301      	adds	r3, #1
  4070b8:	613b      	str	r3, [r7, #16]
  4070ba:	693b      	ldr	r3, [r7, #16]
  4070bc:	2b07      	cmp	r3, #7
  4070be:	d9d1      	bls.n	407064 <ohci_add_ed_period+0x1c>
				memset((void *)&isochronous_ed[j], 0, sizeof(isochronous_ed[j]));
				period_ed_add = (struct ohci_ed *)&isochronous_ed[j];
				break;
			}
		}
		if (j == 8) {
  4070c0:	693b      	ldr	r3, [r7, #16]
  4070c2:	2b08      	cmp	r3, #8
  4070c4:	d101      	bne.n	4070ca <ohci_add_ed_period+0x82>
			return false;
  4070c6:	2300      	movs	r3, #0
  4070c8:	e092      	b.n	4071f0 <ohci_add_ed_period+0x1a8>
		}

		period_ed_add->ed_info.ul_ed_info = ed_info->ul_ed_info;
  4070ca:	687b      	ldr	r3, [r7, #4]
  4070cc:	681a      	ldr	r2, [r3, #0]
  4070ce:	68fb      	ldr	r3, [r7, #12]
  4070d0:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 32; i++) {
  4070d2:	2300      	movs	r3, #0
  4070d4:	617b      	str	r3, [r7, #20]
  4070d6:	e013      	b.n	407100 <ohci_add_ed_period+0xb8>
			period_ed_header = (struct ohci_ed *)hcca.InterruptTable[i];
  4070d8:	4a4a      	ldr	r2, [pc, #296]	; (407204 <ohci_add_ed_period+0x1bc>)
  4070da:	697b      	ldr	r3, [r7, #20]
  4070dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4070e0:	60bb      	str	r3, [r7, #8]
			if (period_ed_header == NULL) {
  4070e2:	68bb      	ldr	r3, [r7, #8]
  4070e4:	2b00      	cmp	r3, #0
  4070e6:	d105      	bne.n	4070f4 <ohci_add_ed_period+0xac>
				hcca.InterruptTable[i] = (uint32_t)period_ed_add;
  4070e8:	68fa      	ldr	r2, [r7, #12]
  4070ea:	4946      	ldr	r1, [pc, #280]	; (407204 <ohci_add_ed_period+0x1bc>)
  4070ec:	697b      	ldr	r3, [r7, #20]
  4070ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4070f2:	e002      	b.n	4070fa <ohci_add_ed_period+0xb2>
			} else {
				period_ed_header->p_next_ed = period_ed_add;
  4070f4:	68bb      	ldr	r3, [r7, #8]
  4070f6:	68fa      	ldr	r2, [r7, #12]
  4070f8:	60da      	str	r2, [r3, #12]
		if (j == 8) {
			return false;
		}

		period_ed_add->ed_info.ul_ed_info = ed_info->ul_ed_info;
		for (i = 0; i < 32; i++) {
  4070fa:	697b      	ldr	r3, [r7, #20]
  4070fc:	3301      	adds	r3, #1
  4070fe:	617b      	str	r3, [r7, #20]
  407100:	697b      	ldr	r3, [r7, #20]
  407102:	2b1f      	cmp	r3, #31
  407104:	d9e8      	bls.n	4070d8 <ohci_add_ed_period+0x90>
				hcca.InterruptTable[i] = (uint32_t)period_ed_add;
			} else {
				period_ed_header->p_next_ed = period_ed_add;
			}
		}
		return true;
  407106:	2301      	movs	r3, #1
  407108:	e072      	b.n	4071f0 <ohci_add_ed_period+0x1a8>
	} else {
		/* interrupt ED */

		/* Check if there is free interrupt endpoint. */
		for (j = 0; j < 8; j++) {
  40710a:	2300      	movs	r3, #0
  40710c:	613b      	str	r3, [r7, #16]
  40710e:	e02a      	b.n	407166 <ohci_add_ed_period+0x11e>
			if (!(interrupt_ed_status & (1 << j))) {
  407110:	4b3d      	ldr	r3, [pc, #244]	; (407208 <ohci_add_ed_period+0x1c0>)
  407112:	781b      	ldrb	r3, [r3, #0]
  407114:	b2db      	uxtb	r3, r3
  407116:	461a      	mov	r2, r3
  407118:	693b      	ldr	r3, [r7, #16]
  40711a:	fa42 f303 	asr.w	r3, r2, r3
  40711e:	f003 0301 	and.w	r3, r3, #1
  407122:	2b00      	cmp	r3, #0
  407124:	d11c      	bne.n	407160 <ohci_add_ed_period+0x118>
				interrupt_ed_status |= (1 << j);
  407126:	693b      	ldr	r3, [r7, #16]
  407128:	2201      	movs	r2, #1
  40712a:	fa02 f303 	lsl.w	r3, r2, r3
  40712e:	b2da      	uxtb	r2, r3
  407130:	4b35      	ldr	r3, [pc, #212]	; (407208 <ohci_add_ed_period+0x1c0>)
  407132:	781b      	ldrb	r3, [r3, #0]
  407134:	b2db      	uxtb	r3, r3
  407136:	b2db      	uxtb	r3, r3
  407138:	4313      	orrs	r3, r2
  40713a:	b2db      	uxtb	r3, r3
  40713c:	b2da      	uxtb	r2, r3
  40713e:	4b32      	ldr	r3, [pc, #200]	; (407208 <ohci_add_ed_period+0x1c0>)
  407140:	701a      	strb	r2, [r3, #0]
				memset((void *)&interrupt_ed[j], 0, sizeof(interrupt_ed[j]));
  407142:	693b      	ldr	r3, [r7, #16]
  407144:	011b      	lsls	r3, r3, #4
  407146:	4a31      	ldr	r2, [pc, #196]	; (40720c <ohci_add_ed_period+0x1c4>)
  407148:	4413      	add	r3, r2
  40714a:	4618      	mov	r0, r3
  40714c:	2100      	movs	r1, #0
  40714e:	2210      	movs	r2, #16
  407150:	4b2b      	ldr	r3, [pc, #172]	; (407200 <ohci_add_ed_period+0x1b8>)
  407152:	4798      	blx	r3
				period_ed_add = (struct ohci_ed *)&interrupt_ed[j];
  407154:	693b      	ldr	r3, [r7, #16]
  407156:	011b      	lsls	r3, r3, #4
  407158:	4a2c      	ldr	r2, [pc, #176]	; (40720c <ohci_add_ed_period+0x1c4>)
  40715a:	4413      	add	r3, r2
  40715c:	60fb      	str	r3, [r7, #12]
				break;
  40715e:	e005      	b.n	40716c <ohci_add_ed_period+0x124>
		return true;
	} else {
		/* interrupt ED */

		/* Check if there is free interrupt endpoint. */
		for (j = 0; j < 8; j++) {
  407160:	693b      	ldr	r3, [r7, #16]
  407162:	3301      	adds	r3, #1
  407164:	613b      	str	r3, [r7, #16]
  407166:	693b      	ldr	r3, [r7, #16]
  407168:	2b07      	cmp	r3, #7
  40716a:	d9d1      	bls.n	407110 <ohci_add_ed_period+0xc8>
				memset((void *)&interrupt_ed[j], 0, sizeof(interrupt_ed[j]));
				period_ed_add = (struct ohci_ed *)&interrupt_ed[j];
				break;
			}
		}
		if (j == 8) {
  40716c:	693b      	ldr	r3, [r7, #16]
  40716e:	2b08      	cmp	r3, #8
  407170:	d101      	bne.n	407176 <ohci_add_ed_period+0x12e>
			return false;
  407172:	2300      	movs	r3, #0
  407174:	e03c      	b.n	4071f0 <ohci_add_ed_period+0x1a8>
		}

		for (i = 0; i < 8; i++) {
  407176:	2300      	movs	r3, #0
  407178:	617b      	str	r3, [r7, #20]
  40717a:	e035      	b.n	4071e8 <ohci_add_ed_period+0x1a0>
			period_ed_header = (struct ohci_ed *)hcca.InterruptTable[i];
  40717c:	4a21      	ldr	r2, [pc, #132]	; (407204 <ohci_add_ed_period+0x1bc>)
  40717e:	697b      	ldr	r3, [r7, #20]
  407180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407184:	60bb      	str	r3, [r7, #8]
			if (period_ed_header == NULL) {
  407186:	68bb      	ldr	r3, [r7, #8]
  407188:	2b00      	cmp	r3, #0
  40718a:	d11c      	bne.n	4071c6 <ohci_add_ed_period+0x17e>
				period_ed_add->ed_info.ul_ed_info = ed_info->ul_ed_info;
  40718c:	687b      	ldr	r3, [r7, #4]
  40718e:	681a      	ldr	r2, [r3, #0]
  407190:	68fb      	ldr	r3, [r7, #12]
  407192:	601a      	str	r2, [r3, #0]
				hcca.InterruptTable[i] = (uint32_t)period_ed_add;
  407194:	68fa      	ldr	r2, [r7, #12]
  407196:	491b      	ldr	r1, [pc, #108]	; (407204 <ohci_add_ed_period+0x1bc>)
  407198:	697b      	ldr	r3, [r7, #20]
  40719a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				hcca.InterruptTable[i + 8] = (uint32_t)period_ed_add;
  40719e:	697b      	ldr	r3, [r7, #20]
  4071a0:	3308      	adds	r3, #8
  4071a2:	68fa      	ldr	r2, [r7, #12]
  4071a4:	4917      	ldr	r1, [pc, #92]	; (407204 <ohci_add_ed_period+0x1bc>)
  4071a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				hcca.InterruptTable[i + 16] = (uint32_t)period_ed_add;
  4071aa:	697b      	ldr	r3, [r7, #20]
  4071ac:	3310      	adds	r3, #16
  4071ae:	68fa      	ldr	r2, [r7, #12]
  4071b0:	4914      	ldr	r1, [pc, #80]	; (407204 <ohci_add_ed_period+0x1bc>)
  4071b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				hcca.InterruptTable[i + 24] = (uint32_t)period_ed_add;
  4071b6:	697b      	ldr	r3, [r7, #20]
  4071b8:	3318      	adds	r3, #24
  4071ba:	68fa      	ldr	r2, [r7, #12]
  4071bc:	4911      	ldr	r1, [pc, #68]	; (407204 <ohci_add_ed_period+0x1bc>)
  4071be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				return true;
  4071c2:	2301      	movs	r3, #1
  4071c4:	e014      	b.n	4071f0 <ohci_add_ed_period+0x1a8>
			} else {
				if (period_ed_header->ed_info.ed_info_s.bEndpointNumber
  4071c6:	68bb      	ldr	r3, [r7, #8]
  4071c8:	881b      	ldrh	r3, [r3, #0]
  4071ca:	f3c3 13c3 	ubfx	r3, r3, #7, #4
  4071ce:	b2da      	uxtb	r2, r3
						== ed_info->ed_info_s.bEndpointNumber) {
  4071d0:	687b      	ldr	r3, [r7, #4]
  4071d2:	881b      	ldrh	r3, [r3, #0]
  4071d4:	f3c3 13c3 	ubfx	r3, r3, #7, #4
  4071d8:	b2db      	uxtb	r3, r3
				hcca.InterruptTable[i + 8] = (uint32_t)period_ed_add;
				hcca.InterruptTable[i + 16] = (uint32_t)period_ed_add;
				hcca.InterruptTable[i + 24] = (uint32_t)period_ed_add;
				return true;
			} else {
				if (period_ed_header->ed_info.ed_info_s.bEndpointNumber
  4071da:	429a      	cmp	r2, r3
  4071dc:	d101      	bne.n	4071e2 <ohci_add_ed_period+0x19a>
						== ed_info->ed_info_s.bEndpointNumber) {
					return false;
  4071de:	2300      	movs	r3, #0
  4071e0:	e006      	b.n	4071f0 <ohci_add_ed_period+0x1a8>
		}
		if (j == 8) {
			return false;
		}

		for (i = 0; i < 8; i++) {
  4071e2:	697b      	ldr	r3, [r7, #20]
  4071e4:	3301      	adds	r3, #1
  4071e6:	617b      	str	r3, [r7, #20]
  4071e8:	697b      	ldr	r3, [r7, #20]
  4071ea:	2b07      	cmp	r3, #7
  4071ec:	d9c6      	bls.n	40717c <ohci_add_ed_period+0x134>
					return false;
				}
			}
		}
	}
	return false;
  4071ee:	2300      	movs	r3, #0
}
  4071f0:	4618      	mov	r0, r3
  4071f2:	3718      	adds	r7, #24
  4071f4:	46bd      	mov	sp, r7
  4071f6:	bd80      	pop	{r7, pc}
  4071f8:	20019ad0 	.word	0x20019ad0
  4071fc:	20019a50 	.word	0x20019a50
  407200:	0040a815 	.word	0x0040a815
  407204:	20019600 	.word	0x20019600
  407208:	20019940 	.word	0x20019940
  40720c:	200198c0 	.word	0x200198c0

00407210 <ohci_remove_ed>:
 * \brief Remove an endpoint.
 *
 * \param ep_number endpoint number.
 */
void ohci_remove_ed(uint8_t ep_number)
{
  407210:	b580      	push	{r7, lr}
  407212:	b086      	sub	sp, #24
  407214:	af00      	add	r7, sp, #0
  407216:	4603      	mov	r3, r0
  407218:	71fb      	strb	r3, [r7, #7]
	uint32_t i, j;
	struct ohci_ed *ed_header = 0;
  40721a:	2300      	movs	r3, #0
  40721c:	60fb      	str	r3, [r7, #12]
	struct ohci_ed *ed_free_header = 0;
  40721e:	2300      	movs	r3, #0
  407220:	60bb      	str	r3, [r7, #8]

	/* Control endpoints. */
	if (ep_number == 0) {
  407222:	79fb      	ldrb	r3, [r7, #7]
  407224:	2b00      	cmp	r3, #0
  407226:	d104      	bne.n	407232 <ohci_remove_ed+0x22>
		memset((void *)&control_ed, 0, sizeof(control_ed));
  407228:	4868      	ldr	r0, [pc, #416]	; (4073cc <ohci_remove_ed+0x1bc>)
  40722a:	2100      	movs	r1, #0
  40722c:	2210      	movs	r2, #16
  40722e:	4b68      	ldr	r3, [pc, #416]	; (4073d0 <ohci_remove_ed+0x1c0>)
  407230:	4798      	blx	r3
	} 

	/* Bulk/Int/ISO endpoints. */
	if (ep_number != 0xFF) {
  407232:	79fb      	ldrb	r3, [r7, #7]
  407234:	2bff      	cmp	r3, #255	; 0xff
  407236:	f000 80a8 	beq.w	40738a <ohci_remove_ed+0x17a>
		/* Bulk endpoints. */
		ed_header = (struct ohci_ed *)OHCI->HcBulkHeadED;
  40723a:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  40723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407240:	60fb      	str	r3, [r7, #12]
		if (ed_header != NULL) {
  407242:	68fb      	ldr	r3, [r7, #12]
  407244:	2b00      	cmp	r3, #0
  407246:	d02e      	beq.n	4072a6 <ohci_remove_ed+0x96>
			if (ed_header->ed_info.ed_info_s.bEndpointNumber == ep_number) {
  407248:	68fb      	ldr	r3, [r7, #12]
  40724a:	881b      	ldrh	r3, [r3, #0]
  40724c:	f3c3 13c3 	ubfx	r3, r3, #7, #4
  407250:	b2db      	uxtb	r3, r3
  407252:	461a      	mov	r2, r3
  407254:	79fb      	ldrb	r3, [r7, #7]
  407256:	429a      	cmp	r2, r3
  407258:	d107      	bne.n	40726a <ohci_remove_ed+0x5a>
				OHCI->HcBulkHeadED = (uint32_t)ed_header->p_next_ed;
  40725a:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  40725e:	68fb      	ldr	r3, [r7, #12]
  407260:	68db      	ldr	r3, [r3, #12]
  407262:	6293      	str	r3, [r2, #40]	; 0x28
				ed_free_header = ed_header;
  407264:	68fb      	ldr	r3, [r7, #12]
  407266:	60bb      	str	r3, [r7, #8]
  407268:	e01d      	b.n	4072a6 <ohci_remove_ed+0x96>
			} else {
				/* Check the list */
				while ((ed_header != NULL) && (ed_header->p_next_ed != NULL)) {
  40726a:	e015      	b.n	407298 <ohci_remove_ed+0x88>
					if (ed_header->p_next_ed->ed_info.ed_info_s.bEndpointNumber
  40726c:	68fb      	ldr	r3, [r7, #12]
  40726e:	68db      	ldr	r3, [r3, #12]
  407270:	881b      	ldrh	r3, [r3, #0]
  407272:	f3c3 13c3 	ubfx	r3, r3, #7, #4
  407276:	b2db      	uxtb	r3, r3
							==	ep_number) {
  407278:	461a      	mov	r2, r3
  40727a:	79fb      	ldrb	r3, [r7, #7]
				OHCI->HcBulkHeadED = (uint32_t)ed_header->p_next_ed;
				ed_free_header = ed_header;
			} else {
				/* Check the list */
				while ((ed_header != NULL) && (ed_header->p_next_ed != NULL)) {
					if (ed_header->p_next_ed->ed_info.ed_info_s.bEndpointNumber
  40727c:	429a      	cmp	r2, r3
  40727e:	d108      	bne.n	407292 <ohci_remove_ed+0x82>
							==	ep_number) {
						ed_free_header = ed_header->p_next_ed;
  407280:	68fb      	ldr	r3, [r7, #12]
  407282:	68db      	ldr	r3, [r3, #12]
  407284:	60bb      	str	r3, [r7, #8]
						ed_header->p_next_ed = ed_header->p_next_ed->p_next_ed;
  407286:	68fb      	ldr	r3, [r7, #12]
  407288:	68db      	ldr	r3, [r3, #12]
  40728a:	68da      	ldr	r2, [r3, #12]
  40728c:	68fb      	ldr	r3, [r7, #12]
  40728e:	60da      	str	r2, [r3, #12]
						break;
  407290:	e009      	b.n	4072a6 <ohci_remove_ed+0x96>
					}
					ed_header = ed_header->p_next_ed;
  407292:	68fb      	ldr	r3, [r7, #12]
  407294:	68db      	ldr	r3, [r3, #12]
  407296:	60fb      	str	r3, [r7, #12]
			if (ed_header->ed_info.ed_info_s.bEndpointNumber == ep_number) {
				OHCI->HcBulkHeadED = (uint32_t)ed_header->p_next_ed;
				ed_free_header = ed_header;
			} else {
				/* Check the list */
				while ((ed_header != NULL) && (ed_header->p_next_ed != NULL)) {
  407298:	68fb      	ldr	r3, [r7, #12]
  40729a:	2b00      	cmp	r3, #0
  40729c:	d003      	beq.n	4072a6 <ohci_remove_ed+0x96>
  40729e:	68fb      	ldr	r3, [r7, #12]
  4072a0:	68db      	ldr	r3, [r3, #12]
  4072a2:	2b00      	cmp	r3, #0
  4072a4:	d1e2      	bne.n	40726c <ohci_remove_ed+0x5c>
				};
			}
		}

		/* Int/ISO endpoints. */
		for (i = 0; i < 32; i++) {
  4072a6:	2300      	movs	r3, #0
  4072a8:	617b      	str	r3, [r7, #20]
  4072aa:	e01a      	b.n	4072e2 <ohci_remove_ed+0xd2>
			ed_header = (struct ohci_ed *)hcca.InterruptTable[i];
  4072ac:	4a49      	ldr	r2, [pc, #292]	; (4073d4 <ohci_remove_ed+0x1c4>)
  4072ae:	697b      	ldr	r3, [r7, #20]
  4072b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4072b4:	60fb      	str	r3, [r7, #12]
			while (ed_header != NULL) {
  4072b6:	e00e      	b.n	4072d6 <ohci_remove_ed+0xc6>
				if (ed_header->ed_info.ed_info_s.bEndpointNumber == ep_number) {
  4072b8:	68fb      	ldr	r3, [r7, #12]
  4072ba:	881b      	ldrh	r3, [r3, #0]
  4072bc:	f3c3 13c3 	ubfx	r3, r3, #7, #4
  4072c0:	b2db      	uxtb	r3, r3
  4072c2:	461a      	mov	r2, r3
  4072c4:	79fb      	ldrb	r3, [r7, #7]
  4072c6:	429a      	cmp	r2, r3
  4072c8:	d102      	bne.n	4072d0 <ohci_remove_ed+0xc0>
					ed_free_header = ed_header;
  4072ca:	68fb      	ldr	r3, [r7, #12]
  4072cc:	60bb      	str	r3, [r7, #8]
					break;
  4072ce:	e005      	b.n	4072dc <ohci_remove_ed+0xcc>
				}
				ed_header = ed_header->p_next_ed;
  4072d0:	68fb      	ldr	r3, [r7, #12]
  4072d2:	68db      	ldr	r3, [r3, #12]
  4072d4:	60fb      	str	r3, [r7, #12]
		}

		/* Int/ISO endpoints. */
		for (i = 0; i < 32; i++) {
			ed_header = (struct ohci_ed *)hcca.InterruptTable[i];
			while (ed_header != NULL) {
  4072d6:	68fb      	ldr	r3, [r7, #12]
  4072d8:	2b00      	cmp	r3, #0
  4072da:	d1ed      	bne.n	4072b8 <ohci_remove_ed+0xa8>
				};
			}
		}

		/* Int/ISO endpoints. */
		for (i = 0; i < 32; i++) {
  4072dc:	697b      	ldr	r3, [r7, #20]
  4072de:	3301      	adds	r3, #1
  4072e0:	617b      	str	r3, [r7, #20]
  4072e2:	697b      	ldr	r3, [r7, #20]
  4072e4:	2b1f      	cmp	r3, #31
  4072e6:	d9e1      	bls.n	4072ac <ohci_remove_ed+0x9c>
				}
				ed_header = ed_header->p_next_ed;
			}
		}

		for (j = 0; j < 8; j++) {
  4072e8:	2300      	movs	r3, #0
  4072ea:	613b      	str	r3, [r7, #16]
  4072ec:	e04a      	b.n	407384 <ohci_remove_ed+0x174>
			if (ed_free_header == &bulk_ed[j]) {
  4072ee:	693b      	ldr	r3, [r7, #16]
  4072f0:	011b      	lsls	r3, r3, #4
  4072f2:	4a39      	ldr	r2, [pc, #228]	; (4073d8 <ohci_remove_ed+0x1c8>)
  4072f4:	441a      	add	r2, r3
  4072f6:	68bb      	ldr	r3, [r7, #8]
  4072f8:	429a      	cmp	r2, r3
  4072fa:	d110      	bne.n	40731e <ohci_remove_ed+0x10e>
				bulk_ed_status &= ~(1 << j);
  4072fc:	693b      	ldr	r3, [r7, #16]
  4072fe:	2201      	movs	r2, #1
  407300:	fa02 f303 	lsl.w	r3, r2, r3
  407304:	b2db      	uxtb	r3, r3
  407306:	43db      	mvns	r3, r3
  407308:	b2da      	uxtb	r2, r3
  40730a:	4b34      	ldr	r3, [pc, #208]	; (4073dc <ohci_remove_ed+0x1cc>)
  40730c:	781b      	ldrb	r3, [r3, #0]
  40730e:	b2db      	uxtb	r3, r3
  407310:	b2db      	uxtb	r3, r3
  407312:	4013      	ands	r3, r2
  407314:	b2db      	uxtb	r3, r3
  407316:	b2da      	uxtb	r2, r3
  407318:	4b30      	ldr	r3, [pc, #192]	; (4073dc <ohci_remove_ed+0x1cc>)
  40731a:	701a      	strb	r2, [r3, #0]
				break;
  40731c:	e035      	b.n	40738a <ohci_remove_ed+0x17a>
			}
			if (ed_free_header == &interrupt_ed[j]) {
  40731e:	693b      	ldr	r3, [r7, #16]
  407320:	011b      	lsls	r3, r3, #4
  407322:	4a2f      	ldr	r2, [pc, #188]	; (4073e0 <ohci_remove_ed+0x1d0>)
  407324:	441a      	add	r2, r3
  407326:	68bb      	ldr	r3, [r7, #8]
  407328:	429a      	cmp	r2, r3
  40732a:	d110      	bne.n	40734e <ohci_remove_ed+0x13e>
				interrupt_ed_status &= ~(1 << j);
  40732c:	693b      	ldr	r3, [r7, #16]
  40732e:	2201      	movs	r2, #1
  407330:	fa02 f303 	lsl.w	r3, r2, r3
  407334:	b2db      	uxtb	r3, r3
  407336:	43db      	mvns	r3, r3
  407338:	b2da      	uxtb	r2, r3
  40733a:	4b2a      	ldr	r3, [pc, #168]	; (4073e4 <ohci_remove_ed+0x1d4>)
  40733c:	781b      	ldrb	r3, [r3, #0]
  40733e:	b2db      	uxtb	r3, r3
  407340:	b2db      	uxtb	r3, r3
  407342:	4013      	ands	r3, r2
  407344:	b2db      	uxtb	r3, r3
  407346:	b2da      	uxtb	r2, r3
  407348:	4b26      	ldr	r3, [pc, #152]	; (4073e4 <ohci_remove_ed+0x1d4>)
  40734a:	701a      	strb	r2, [r3, #0]
				break;
  40734c:	e01d      	b.n	40738a <ohci_remove_ed+0x17a>
			}
			if (ed_free_header == &isochronous_ed[j]) {
  40734e:	693b      	ldr	r3, [r7, #16]
  407350:	011b      	lsls	r3, r3, #4
  407352:	4a25      	ldr	r2, [pc, #148]	; (4073e8 <ohci_remove_ed+0x1d8>)
  407354:	441a      	add	r2, r3
  407356:	68bb      	ldr	r3, [r7, #8]
  407358:	429a      	cmp	r2, r3
  40735a:	d110      	bne.n	40737e <ohci_remove_ed+0x16e>
				isochronous_ed_status &= ~(1 << j);
  40735c:	693b      	ldr	r3, [r7, #16]
  40735e:	2201      	movs	r2, #1
  407360:	fa02 f303 	lsl.w	r3, r2, r3
  407364:	b2db      	uxtb	r3, r3
  407366:	43db      	mvns	r3, r3
  407368:	b2da      	uxtb	r2, r3
  40736a:	4b20      	ldr	r3, [pc, #128]	; (4073ec <ohci_remove_ed+0x1dc>)
  40736c:	781b      	ldrb	r3, [r3, #0]
  40736e:	b2db      	uxtb	r3, r3
  407370:	b2db      	uxtb	r3, r3
  407372:	4013      	ands	r3, r2
  407374:	b2db      	uxtb	r3, r3
  407376:	b2da      	uxtb	r2, r3
  407378:	4b1c      	ldr	r3, [pc, #112]	; (4073ec <ohci_remove_ed+0x1dc>)
  40737a:	701a      	strb	r2, [r3, #0]
				break;
  40737c:	e005      	b.n	40738a <ohci_remove_ed+0x17a>
				}
				ed_header = ed_header->p_next_ed;
			}
		}

		for (j = 0; j < 8; j++) {
  40737e:	693b      	ldr	r3, [r7, #16]
  407380:	3301      	adds	r3, #1
  407382:	613b      	str	r3, [r7, #16]
  407384:	693b      	ldr	r3, [r7, #16]
  407386:	2b07      	cmp	r3, #7
  407388:	d9b1      	bls.n	4072ee <ohci_remove_ed+0xde>
		}

	}

	/* All endpoints. */
	if (ep_number == 0xFF) {
  40738a:	79fb      	ldrb	r3, [r7, #7]
  40738c:	2bff      	cmp	r3, #255	; 0xff
  40738e:	d11a      	bne.n	4073c6 <ohci_remove_ed+0x1b6>
		/* Bulk endpoints. */
		OHCI->HcBulkHeadED = 0;
  407390:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407394:	2200      	movs	r2, #0
  407396:	629a      	str	r2, [r3, #40]	; 0x28

		/* Int/ISO endpoints. */
		for (i = 0; i < 32; i++) {
  407398:	2300      	movs	r3, #0
  40739a:	617b      	str	r3, [r7, #20]
  40739c:	e007      	b.n	4073ae <ohci_remove_ed+0x19e>
			hcca.InterruptTable[i] = 0;
  40739e:	4a0d      	ldr	r2, [pc, #52]	; (4073d4 <ohci_remove_ed+0x1c4>)
  4073a0:	697b      	ldr	r3, [r7, #20]
  4073a2:	2100      	movs	r1, #0
  4073a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (ep_number == 0xFF) {
		/* Bulk endpoints. */
		OHCI->HcBulkHeadED = 0;

		/* Int/ISO endpoints. */
		for (i = 0; i < 32; i++) {
  4073a8:	697b      	ldr	r3, [r7, #20]
  4073aa:	3301      	adds	r3, #1
  4073ac:	617b      	str	r3, [r7, #20]
  4073ae:	697b      	ldr	r3, [r7, #20]
  4073b0:	2b1f      	cmp	r3, #31
  4073b2:	d9f4      	bls.n	40739e <ohci_remove_ed+0x18e>
			hcca.InterruptTable[i] = 0;
		}

		bulk_ed_status = 0;
  4073b4:	4b09      	ldr	r3, [pc, #36]	; (4073dc <ohci_remove_ed+0x1cc>)
  4073b6:	2200      	movs	r2, #0
  4073b8:	701a      	strb	r2, [r3, #0]
		interrupt_ed_status = 0;
  4073ba:	4b0a      	ldr	r3, [pc, #40]	; (4073e4 <ohci_remove_ed+0x1d4>)
  4073bc:	2200      	movs	r2, #0
  4073be:	701a      	strb	r2, [r3, #0]
		isochronous_ed_status = 0;
  4073c0:	4b0a      	ldr	r3, [pc, #40]	; (4073ec <ohci_remove_ed+0x1dc>)
  4073c2:	2200      	movs	r2, #0
  4073c4:	701a      	strb	r2, [r3, #0]
	};
}
  4073c6:	3718      	adds	r7, #24
  4073c8:	46bd      	mov	sp, r7
  4073ca:	bd80      	pop	{r7, pc}
  4073cc:	20019700 	.word	0x20019700
  4073d0:	0040a815 	.word	0x0040a815
  4073d4:	20019600 	.word	0x20019600
  4073d8:	20019730 	.word	0x20019730
  4073dc:	200197b0 	.word	0x200197b0
  4073e0:	200198c0 	.word	0x200198c0
  4073e4:	20019940 	.word	0x20019940
  4073e8:	20019a50 	.word	0x20019a50
  4073ec:	20019ad0 	.word	0x20019ad0

004073f0 <ohci_clear_ed_transfer_status>:
 * \brief Remove an endpoint transfer status.
 *
 * \param td_general_header TD used by the endpoint.
 */
void ohci_clear_ed_transfer_status(struct ohci_td_general *td_general_header)
{
  4073f0:	b480      	push	{r7}
  4073f2:	b085      	sub	sp, #20
  4073f4:	af00      	add	r7, sp, #0
  4073f6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t temp_head;

	if (td_general_header == &control_td_head) {
  4073f8:	687b      	ldr	r3, [r7, #4]
  4073fa:	4a3c      	ldr	r2, [pc, #240]	; (4074ec <ohci_clear_ed_transfer_status+0xfc>)
  4073fc:	4293      	cmp	r3, r2
  4073fe:	d109      	bne.n	407414 <ohci_clear_ed_transfer_status+0x24>
		temp_head = (uint32_t)control_ed.p_td_head;
  407400:	4b3b      	ldr	r3, [pc, #236]	; (4074f0 <ohci_clear_ed_transfer_status+0x100>)
  407402:	689b      	ldr	r3, [r3, #8]
  407404:	60bb      	str	r3, [r7, #8]
		temp_head &= 0xFFFFFFF0;
  407406:	68bb      	ldr	r3, [r7, #8]
  407408:	f023 030f 	bic.w	r3, r3, #15
  40740c:	60bb      	str	r3, [r7, #8]
		control_ed.p_td_head = (void *)temp_head;
  40740e:	68bb      	ldr	r3, [r7, #8]
  407410:	4a37      	ldr	r2, [pc, #220]	; (4074f0 <ohci_clear_ed_transfer_status+0x100>)
  407412:	6093      	str	r3, [r2, #8]
	}

	for (i = 0; i < 8; i++) {
  407414:	2300      	movs	r3, #0
  407416:	60fb      	str	r3, [r7, #12]
  407418:	e01b      	b.n	407452 <ohci_clear_ed_transfer_status+0x62>
		if (td_general_header == &bulk_td_head[i]) {
  40741a:	68fb      	ldr	r3, [r7, #12]
  40741c:	011b      	lsls	r3, r3, #4
  40741e:	4a35      	ldr	r2, [pc, #212]	; (4074f4 <ohci_clear_ed_transfer_status+0x104>)
  407420:	441a      	add	r2, r3
  407422:	687b      	ldr	r3, [r7, #4]
  407424:	429a      	cmp	r2, r3
  407426:	d111      	bne.n	40744c <ohci_clear_ed_transfer_status+0x5c>
			temp_head = (uint32_t)bulk_ed[i].p_td_head;
  407428:	4a33      	ldr	r2, [pc, #204]	; (4074f8 <ohci_clear_ed_transfer_status+0x108>)
  40742a:	68fb      	ldr	r3, [r7, #12]
  40742c:	011b      	lsls	r3, r3, #4
  40742e:	4413      	add	r3, r2
  407430:	3308      	adds	r3, #8
  407432:	681b      	ldr	r3, [r3, #0]
  407434:	60bb      	str	r3, [r7, #8]
			temp_head &= 0xFFFFFFF0;
  407436:	68bb      	ldr	r3, [r7, #8]
  407438:	f023 030f 	bic.w	r3, r3, #15
  40743c:	60bb      	str	r3, [r7, #8]
			bulk_ed[i].p_td_head = (void *)temp_head;
  40743e:	68ba      	ldr	r2, [r7, #8]
  407440:	492d      	ldr	r1, [pc, #180]	; (4074f8 <ohci_clear_ed_transfer_status+0x108>)
  407442:	68fb      	ldr	r3, [r7, #12]
  407444:	011b      	lsls	r3, r3, #4
  407446:	440b      	add	r3, r1
  407448:	3308      	adds	r3, #8
  40744a:	601a      	str	r2, [r3, #0]
		temp_head = (uint32_t)control_ed.p_td_head;
		temp_head &= 0xFFFFFFF0;
		control_ed.p_td_head = (void *)temp_head;
	}

	for (i = 0; i < 8; i++) {
  40744c:	68fb      	ldr	r3, [r7, #12]
  40744e:	3301      	adds	r3, #1
  407450:	60fb      	str	r3, [r7, #12]
  407452:	68fb      	ldr	r3, [r7, #12]
  407454:	2b07      	cmp	r3, #7
  407456:	d9e0      	bls.n	40741a <ohci_clear_ed_transfer_status+0x2a>
			temp_head = (uint32_t)bulk_ed[i].p_td_head;
			temp_head &= 0xFFFFFFF0;
			bulk_ed[i].p_td_head = (void *)temp_head;
		}
	}
	for (i = 0; i < 8; i++) {
  407458:	2300      	movs	r3, #0
  40745a:	60fb      	str	r3, [r7, #12]
  40745c:	e01b      	b.n	407496 <ohci_clear_ed_transfer_status+0xa6>
		if (td_general_header == &interrupt_td_head[i]) {
  40745e:	68fb      	ldr	r3, [r7, #12]
  407460:	011b      	lsls	r3, r3, #4
  407462:	4a26      	ldr	r2, [pc, #152]	; (4074fc <ohci_clear_ed_transfer_status+0x10c>)
  407464:	441a      	add	r2, r3
  407466:	687b      	ldr	r3, [r7, #4]
  407468:	429a      	cmp	r2, r3
  40746a:	d111      	bne.n	407490 <ohci_clear_ed_transfer_status+0xa0>
			temp_head = (uint32_t)interrupt_ed[i].p_td_head;
  40746c:	4a24      	ldr	r2, [pc, #144]	; (407500 <ohci_clear_ed_transfer_status+0x110>)
  40746e:	68fb      	ldr	r3, [r7, #12]
  407470:	011b      	lsls	r3, r3, #4
  407472:	4413      	add	r3, r2
  407474:	3308      	adds	r3, #8
  407476:	681b      	ldr	r3, [r3, #0]
  407478:	60bb      	str	r3, [r7, #8]
			temp_head &= 0xFFFFFFF0;
  40747a:	68bb      	ldr	r3, [r7, #8]
  40747c:	f023 030f 	bic.w	r3, r3, #15
  407480:	60bb      	str	r3, [r7, #8]
			interrupt_ed[i].p_td_head = (void *)temp_head;
  407482:	68ba      	ldr	r2, [r7, #8]
  407484:	491e      	ldr	r1, [pc, #120]	; (407500 <ohci_clear_ed_transfer_status+0x110>)
  407486:	68fb      	ldr	r3, [r7, #12]
  407488:	011b      	lsls	r3, r3, #4
  40748a:	440b      	add	r3, r1
  40748c:	3308      	adds	r3, #8
  40748e:	601a      	str	r2, [r3, #0]
			temp_head = (uint32_t)bulk_ed[i].p_td_head;
			temp_head &= 0xFFFFFFF0;
			bulk_ed[i].p_td_head = (void *)temp_head;
		}
	}
	for (i = 0; i < 8; i++) {
  407490:	68fb      	ldr	r3, [r7, #12]
  407492:	3301      	adds	r3, #1
  407494:	60fb      	str	r3, [r7, #12]
  407496:	68fb      	ldr	r3, [r7, #12]
  407498:	2b07      	cmp	r3, #7
  40749a:	d9e0      	bls.n	40745e <ohci_clear_ed_transfer_status+0x6e>
			temp_head = (uint32_t)interrupt_ed[i].p_td_head;
			temp_head &= 0xFFFFFFF0;
			interrupt_ed[i].p_td_head = (void *)temp_head;
		}
	}
	for (i = 0; i < 8; i++) {
  40749c:	2300      	movs	r3, #0
  40749e:	60fb      	str	r3, [r7, #12]
  4074a0:	e01b      	b.n	4074da <ohci_clear_ed_transfer_status+0xea>
		if (td_general_header ==
					(struct ohci_td_general *)&isochronous_td_head[i]) {
  4074a2:	68fb      	ldr	r3, [r7, #12]
  4074a4:	015b      	lsls	r3, r3, #5
  4074a6:	4a17      	ldr	r2, [pc, #92]	; (407504 <ohci_clear_ed_transfer_status+0x114>)
  4074a8:	441a      	add	r2, r3
			temp_head &= 0xFFFFFFF0;
			interrupt_ed[i].p_td_head = (void *)temp_head;
		}
	}
	for (i = 0; i < 8; i++) {
		if (td_general_header ==
  4074aa:	687b      	ldr	r3, [r7, #4]
  4074ac:	429a      	cmp	r2, r3
  4074ae:	d111      	bne.n	4074d4 <ohci_clear_ed_transfer_status+0xe4>
					(struct ohci_td_general *)&isochronous_td_head[i]) {
			temp_head = (uint32_t)isochronous_ed[i].p_td_head;
  4074b0:	4a15      	ldr	r2, [pc, #84]	; (407508 <ohci_clear_ed_transfer_status+0x118>)
  4074b2:	68fb      	ldr	r3, [r7, #12]
  4074b4:	011b      	lsls	r3, r3, #4
  4074b6:	4413      	add	r3, r2
  4074b8:	3308      	adds	r3, #8
  4074ba:	681b      	ldr	r3, [r3, #0]
  4074bc:	60bb      	str	r3, [r7, #8]
			temp_head &= 0xFFFFFFF0;
  4074be:	68bb      	ldr	r3, [r7, #8]
  4074c0:	f023 030f 	bic.w	r3, r3, #15
  4074c4:	60bb      	str	r3, [r7, #8]
			isochronous_ed[i].p_td_head = (void *)temp_head;
  4074c6:	68ba      	ldr	r2, [r7, #8]
  4074c8:	490f      	ldr	r1, [pc, #60]	; (407508 <ohci_clear_ed_transfer_status+0x118>)
  4074ca:	68fb      	ldr	r3, [r7, #12]
  4074cc:	011b      	lsls	r3, r3, #4
  4074ce:	440b      	add	r3, r1
  4074d0:	3308      	adds	r3, #8
  4074d2:	601a      	str	r2, [r3, #0]
			temp_head = (uint32_t)interrupt_ed[i].p_td_head;
			temp_head &= 0xFFFFFFF0;
			interrupt_ed[i].p_td_head = (void *)temp_head;
		}
	}
	for (i = 0; i < 8; i++) {
  4074d4:	68fb      	ldr	r3, [r7, #12]
  4074d6:	3301      	adds	r3, #1
  4074d8:	60fb      	str	r3, [r7, #12]
  4074da:	68fb      	ldr	r3, [r7, #12]
  4074dc:	2b07      	cmp	r3, #7
  4074de:	d9e0      	bls.n	4074a2 <ohci_clear_ed_transfer_status+0xb2>
			temp_head = (uint32_t)isochronous_ed[i].p_td_head;
			temp_head &= 0xFFFFFFF0;
			isochronous_ed[i].p_td_head = (void *)temp_head;
		}
	}
}
  4074e0:	3714      	adds	r7, #20
  4074e2:	46bd      	mov	sp, r7
  4074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4074e8:	4770      	bx	lr
  4074ea:	bf00      	nop
  4074ec:	20019710 	.word	0x20019710
  4074f0:	20019700 	.word	0x20019700
  4074f4:	200197c0 	.word	0x200197c0
  4074f8:	20019730 	.word	0x20019730
  4074fc:	20019950 	.word	0x20019950
  407500:	200198c0 	.word	0x200198c0
  407504:	20019ae0 	.word	0x20019ae0
  407508:	20019a50 	.word	0x20019a50

0040750c <ohci_add_td_control>:
 * \param buf_size Length of the data buffer.
 *
 * \return true for success.
 */
bool ohci_add_td_control(enum pid pid, uint8_t *buf, uint16_t buf_size)
{
  40750c:	b580      	push	{r7, lr}
  40750e:	b082      	sub	sp, #8
  407510:	af00      	add	r7, sp, #0
  407512:	4603      	mov	r3, r0
  407514:	6039      	str	r1, [r7, #0]
  407516:	71fb      	strb	r3, [r7, #7]
  407518:	4613      	mov	r3, r2
  40751a:	80bb      	strh	r3, [r7, #4]
	OHCI->HcControl &= ~HC_CONTROL_CLE;
  40751c:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  407520:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407524:	685b      	ldr	r3, [r3, #4]
  407526:	f023 0310 	bic.w	r3, r3, #16
  40752a:	6053      	str	r3, [r2, #4]

	memset((void *)&control_td_head, 0, sizeof(control_td_head));
  40752c:	483b      	ldr	r0, [pc, #236]	; (40761c <ohci_add_td_control+0x110>)
  40752e:	2100      	movs	r1, #0
  407530:	2210      	movs	r2, #16
  407532:	4b3b      	ldr	r3, [pc, #236]	; (407620 <ohci_add_td_control+0x114>)
  407534:	4798      	blx	r3
	memset((void *)&control_td_tail, 0, sizeof(control_td_tail));
  407536:	483b      	ldr	r0, [pc, #236]	; (407624 <ohci_add_td_control+0x118>)
  407538:	2100      	movs	r1, #0
  40753a:	2210      	movs	r2, #16
  40753c:	4b38      	ldr	r3, [pc, #224]	; (407620 <ohci_add_td_control+0x114>)
  40753e:	4798      	blx	r3

	control_td_head.td_info.bBufferRounding = 1;
  407540:	4b36      	ldr	r3, [pc, #216]	; (40761c <ohci_add_td_control+0x110>)
  407542:	681a      	ldr	r2, [r3, #0]
  407544:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  407548:	601a      	str	r2, [r3, #0]
	control_td_head.td_info.bDirectionPID = pid;
  40754a:	79fb      	ldrb	r3, [r7, #7]
  40754c:	f003 0303 	and.w	r3, r3, #3
  407550:	b2da      	uxtb	r2, r3
  407552:	4b32      	ldr	r3, [pc, #200]	; (40761c <ohci_add_td_control+0x110>)
  407554:	f002 0203 	and.w	r2, r2, #3
  407558:	04d2      	lsls	r2, r2, #19
  40755a:	6819      	ldr	r1, [r3, #0]
  40755c:	f421 11c0 	bic.w	r1, r1, #1572864	; 0x180000
  407560:	430a      	orrs	r2, r1
  407562:	601a      	str	r2, [r3, #0]
	control_td_head.td_info.bDelayInterrupt = 0;
  407564:	4b2d      	ldr	r3, [pc, #180]	; (40761c <ohci_add_td_control+0x110>)
  407566:	681a      	ldr	r2, [r3, #0]
  407568:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
  40756c:	601a      	str	r2, [r3, #0]
	if (pid == TD_PID_SETUP) {
  40756e:	79fb      	ldrb	r3, [r7, #7]
  407570:	2b00      	cmp	r3, #0
  407572:	d107      	bne.n	407584 <ohci_add_td_control+0x78>
		control_td_head.td_info.bDataToggle = 2;
  407574:	4b29      	ldr	r3, [pc, #164]	; (40761c <ohci_add_td_control+0x110>)
  407576:	681a      	ldr	r2, [r3, #0]
  407578:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
  40757c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  407580:	601a      	str	r2, [r3, #0]
  407582:	e004      	b.n	40758e <ohci_add_td_control+0x82>
	} else {
		control_td_head.td_info.bDataToggle = 3;
  407584:	4b25      	ldr	r3, [pc, #148]	; (40761c <ohci_add_td_control+0x110>)
  407586:	681a      	ldr	r2, [r3, #0]
  407588:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
  40758c:	601a      	str	r2, [r3, #0]
	}
	control_td_head.td_info.bErrorCount = 0;
  40758e:	4b23      	ldr	r3, [pc, #140]	; (40761c <ohci_add_td_control+0x110>)
  407590:	681a      	ldr	r2, [r3, #0]
  407592:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
  407596:	601a      	str	r2, [r3, #0]
	control_td_head.td_info.bConditionCode = 0xf;
  407598:	4b20      	ldr	r3, [pc, #128]	; (40761c <ohci_add_td_control+0x110>)
  40759a:	681a      	ldr	r2, [r3, #0]
  40759c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4075a0:	601a      	str	r2, [r3, #0]
	control_td_head.pCurrentBufferPointer= buf;
  4075a2:	4a1e      	ldr	r2, [pc, #120]	; (40761c <ohci_add_td_control+0x110>)
  4075a4:	683b      	ldr	r3, [r7, #0]
  4075a6:	6053      	str	r3, [r2, #4]
	control_td_head.p_next_td = NULL;
  4075a8:	4b1c      	ldr	r3, [pc, #112]	; (40761c <ohci_add_td_control+0x110>)
  4075aa:	2200      	movs	r2, #0
  4075ac:	609a      	str	r2, [r3, #8]
	control_td_head.pBufferEnd = buf + buf_size - 1;
  4075ae:	88bb      	ldrh	r3, [r7, #4]
  4075b0:	3b01      	subs	r3, #1
  4075b2:	683a      	ldr	r2, [r7, #0]
  4075b4:	4413      	add	r3, r2
  4075b6:	4a19      	ldr	r2, [pc, #100]	; (40761c <ohci_add_td_control+0x110>)
  4075b8:	60d3      	str	r3, [r2, #12]

	/* Check the halt status. */
	if ((uint32_t)control_ed.p_td_head & 0x01) {
  4075ba:	4b1b      	ldr	r3, [pc, #108]	; (407628 <ohci_add_td_control+0x11c>)
  4075bc:	689b      	ldr	r3, [r3, #8]
  4075be:	f003 0301 	and.w	r3, r3, #1
  4075c2:	2b00      	cmp	r3, #0
  4075c4:	d001      	beq.n	4075ca <ohci_add_td_control+0xbe>
		return false;
  4075c6:	2300      	movs	r3, #0
  4075c8:	e024      	b.n	407614 <ohci_add_td_control+0x108>
	}

	control_ed.p_td_head = (void *)&control_td_head;
  4075ca:	4b17      	ldr	r3, [pc, #92]	; (407628 <ohci_add_td_control+0x11c>)
  4075cc:	4a13      	ldr	r2, [pc, #76]	; (40761c <ohci_add_td_control+0x110>)
  4075ce:	609a      	str	r2, [r3, #8]
	control_ed.p_td_tail = NULL;
  4075d0:	4b15      	ldr	r3, [pc, #84]	; (407628 <ohci_add_td_control+0x11c>)
  4075d2:	2200      	movs	r2, #0
  4075d4:	605a      	str	r2, [r3, #4]

	OHCI->HcCommandStatus = HC_COMMANDSTATUS_CLF;
  4075d6:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  4075da:	2202      	movs	r2, #2
  4075dc:	609a      	str	r2, [r3, #8]
	OHCI->HcControl |= HC_CONTROL_CLE;
  4075de:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  4075e2:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  4075e6:	685b      	ldr	r3, [r3, #4]
  4075e8:	f043 0310 	orr.w	r3, r3, #16
  4075ec:	6053      	str	r3, [r2, #4]

	/* Wait for transfer done. */
	do {
		p_td_head = ((uint32_t)(control_ed.p_td_head)) & 0xFFFFFFF0;
  4075ee:	4b0e      	ldr	r3, [pc, #56]	; (407628 <ohci_add_td_control+0x11c>)
  4075f0:	689b      	ldr	r3, [r3, #8]
  4075f2:	f023 030f 	bic.w	r3, r3, #15
  4075f6:	4a0d      	ldr	r2, [pc, #52]	; (40762c <ohci_add_td_control+0x120>)
  4075f8:	6013      	str	r3, [r2, #0]
		p_td_tail = ((uint32_t)(control_ed.p_td_tail)) & 0xFFFFFFF0;
  4075fa:	4b0b      	ldr	r3, [pc, #44]	; (407628 <ohci_add_td_control+0x11c>)
  4075fc:	685b      	ldr	r3, [r3, #4]
  4075fe:	f023 030f 	bic.w	r3, r3, #15
  407602:	4a0b      	ldr	r2, [pc, #44]	; (407630 <ohci_add_td_control+0x124>)
  407604:	6013      	str	r3, [r2, #0]
	} while(p_td_head != p_td_tail);
  407606:	4b09      	ldr	r3, [pc, #36]	; (40762c <ohci_add_td_control+0x120>)
  407608:	681a      	ldr	r2, [r3, #0]
  40760a:	4b09      	ldr	r3, [pc, #36]	; (407630 <ohci_add_td_control+0x124>)
  40760c:	681b      	ldr	r3, [r3, #0]
  40760e:	429a      	cmp	r2, r3
  407610:	d1ed      	bne.n	4075ee <ohci_add_td_control+0xe2>

	return true;
  407612:	2301      	movs	r3, #1
}
  407614:	4618      	mov	r0, r3
  407616:	3708      	adds	r7, #8
  407618:	46bd      	mov	sp, r7
  40761a:	bd80      	pop	{r7, pc}
  40761c:	20019710 	.word	0x20019710
  407620:	0040a815 	.word	0x0040a815
  407624:	20019720 	.word	0x20019720
  407628:	20019700 	.word	0x20019700
  40762c:	20019d08 	.word	0x20019d08
  407630:	20019d0c 	.word	0x20019d0c

00407634 <ohci_add_td_non_control>:
 *
 * \return true for success.
 */
bool ohci_add_td_non_control(uint8_t ep_number, uint8_t *buf,
		uint32_t buf_size, struct ohci_td_general **td_general_header)
{
  407634:	b580      	push	{r7, lr}
  407636:	b088      	sub	sp, #32
  407638:	af00      	add	r7, sp, #0
  40763a:	60b9      	str	r1, [r7, #8]
  40763c:	607a      	str	r2, [r7, #4]
  40763e:	603b      	str	r3, [r7, #0]
  407640:	4603      	mov	r3, r0
  407642:	73fb      	strb	r3, [r7, #15]
	struct ohci_ed *ed_header;
	uint32_t i;
	uint8_t ep_dir;

	if (ep_number & 0x80) {
  407644:	7bfb      	ldrb	r3, [r7, #15]
  407646:	b25b      	sxtb	r3, r3
  407648:	2b00      	cmp	r3, #0
  40764a:	da02      	bge.n	407652 <ohci_add_td_non_control+0x1e>
		ep_dir = 2;
  40764c:	2302      	movs	r3, #2
  40764e:	75fb      	strb	r3, [r7, #23]
  407650:	e001      	b.n	407656 <ohci_add_td_non_control+0x22>
	} else {
		ep_dir = 1;
  407652:	2301      	movs	r3, #1
  407654:	75fb      	strb	r3, [r7, #23]
	}
	ep_number = ep_number & 0xF;
  407656:	7bfb      	ldrb	r3, [r7, #15]
  407658:	f003 030f 	and.w	r3, r3, #15
  40765c:	73fb      	strb	r3, [r7, #15]

	/* Bulk endpoints. */
	i = 0;
  40765e:	2300      	movs	r3, #0
  407660:	61bb      	str	r3, [r7, #24]
	ed_header = (struct ohci_ed *)OHCI->HcBulkHeadED;
  407662:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407668:	61fb      	str	r3, [r7, #28]
	while (ed_header != NULL) {
  40766a:	e0c6      	b.n	4077fa <ohci_add_td_non_control+0x1c6>
		if ((ed_header->ed_info.ed_info_s.bEndpointNumber == ep_number) &&
  40766c:	69fb      	ldr	r3, [r7, #28]
  40766e:	881b      	ldrh	r3, [r3, #0]
  407670:	f3c3 13c3 	ubfx	r3, r3, #7, #4
  407674:	b2db      	uxtb	r3, r3
  407676:	461a      	mov	r2, r3
  407678:	7bfb      	ldrb	r3, [r7, #15]
  40767a:	429a      	cmp	r2, r3
  40767c:	f040 80b7 	bne.w	4077ee <ohci_add_td_non_control+0x1ba>
				(ed_header->ed_info.ed_info_s.bDirection == ep_dir)) {
  407680:	69fb      	ldr	r3, [r7, #28]
  407682:	785b      	ldrb	r3, [r3, #1]
  407684:	f3c3 03c1 	ubfx	r3, r3, #3, #2
  407688:	b2db      	uxtb	r3, r3
  40768a:	461a      	mov	r2, r3
  40768c:	7dfb      	ldrb	r3, [r7, #23]

	/* Bulk endpoints. */
	i = 0;
	ed_header = (struct ohci_ed *)OHCI->HcBulkHeadED;
	while (ed_header != NULL) {
		if ((ed_header->ed_info.ed_info_s.bEndpointNumber == ep_number) &&
  40768e:	429a      	cmp	r2, r3
  407690:	f040 80ad 	bne.w	4077ee <ohci_add_td_non_control+0x1ba>
				(ed_header->ed_info.ed_info_s.bDirection == ep_dir)) {
			/* Wait for transfer done. */
			do {
				p_td_head = ((uint32_t)(ed_header->p_td_head)) & 0xFFFFFFF0;
  407694:	69fb      	ldr	r3, [r7, #28]
  407696:	689b      	ldr	r3, [r3, #8]
  407698:	f023 030f 	bic.w	r3, r3, #15
  40769c:	4a5a      	ldr	r2, [pc, #360]	; (407808 <ohci_add_td_non_control+0x1d4>)
  40769e:	6013      	str	r3, [r2, #0]
				p_td_tail = ((uint32_t)(ed_header->p_td_tail)) & 0xFFFFFFF0;
  4076a0:	69fb      	ldr	r3, [r7, #28]
  4076a2:	685b      	ldr	r3, [r3, #4]
  4076a4:	f023 030f 	bic.w	r3, r3, #15
  4076a8:	4a58      	ldr	r2, [pc, #352]	; (40780c <ohci_add_td_non_control+0x1d8>)
  4076aa:	6013      	str	r3, [r2, #0]
			} while(p_td_head != p_td_tail);
  4076ac:	4b56      	ldr	r3, [pc, #344]	; (407808 <ohci_add_td_non_control+0x1d4>)
  4076ae:	681a      	ldr	r2, [r3, #0]
  4076b0:	4b56      	ldr	r3, [pc, #344]	; (40780c <ohci_add_td_non_control+0x1d8>)
  4076b2:	681b      	ldr	r3, [r3, #0]
  4076b4:	429a      	cmp	r2, r3
  4076b6:	d1ed      	bne.n	407694 <ohci_add_td_non_control+0x60>

			memset((void *)&bulk_td_head[i], 0, sizeof(bulk_td_head[i]));
  4076b8:	69bb      	ldr	r3, [r7, #24]
  4076ba:	011b      	lsls	r3, r3, #4
  4076bc:	4a54      	ldr	r2, [pc, #336]	; (407810 <ohci_add_td_non_control+0x1dc>)
  4076be:	4413      	add	r3, r2
  4076c0:	4618      	mov	r0, r3
  4076c2:	2100      	movs	r1, #0
  4076c4:	2210      	movs	r2, #16
  4076c6:	4b53      	ldr	r3, [pc, #332]	; (407814 <ohci_add_td_non_control+0x1e0>)
  4076c8:	4798      	blx	r3
			memset((void *)&bulk_td_tail[i], 0, sizeof(bulk_td_tail[i]));
  4076ca:	69bb      	ldr	r3, [r7, #24]
  4076cc:	011b      	lsls	r3, r3, #4
  4076ce:	4a52      	ldr	r2, [pc, #328]	; (407818 <ohci_add_td_non_control+0x1e4>)
  4076d0:	4413      	add	r3, r2
  4076d2:	4618      	mov	r0, r3
  4076d4:	2100      	movs	r1, #0
  4076d6:	2210      	movs	r2, #16
  4076d8:	4b4e      	ldr	r3, [pc, #312]	; (407814 <ohci_add_td_non_control+0x1e0>)
  4076da:	4798      	blx	r3

			bulk_td_head[i].td_info.bBufferRounding = 1;
  4076dc:	4a4c      	ldr	r2, [pc, #304]	; (407810 <ohci_add_td_non_control+0x1dc>)
  4076de:	69bb      	ldr	r3, [r7, #24]
  4076e0:	011b      	lsls	r3, r3, #4
  4076e2:	4413      	add	r3, r2
  4076e4:	681a      	ldr	r2, [r3, #0]
  4076e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  4076ea:	601a      	str	r2, [r3, #0]
			bulk_td_head[i].td_info.bDirectionPID = 3;
  4076ec:	4a48      	ldr	r2, [pc, #288]	; (407810 <ohci_add_td_non_control+0x1dc>)
  4076ee:	69bb      	ldr	r3, [r7, #24]
  4076f0:	011b      	lsls	r3, r3, #4
  4076f2:	4413      	add	r3, r2
  4076f4:	681a      	ldr	r2, [r3, #0]
  4076f6:	f442 12c0 	orr.w	r2, r2, #1572864	; 0x180000
  4076fa:	601a      	str	r2, [r3, #0]
			bulk_td_head[i].td_info.bDelayInterrupt = 0;
  4076fc:	4a44      	ldr	r2, [pc, #272]	; (407810 <ohci_add_td_non_control+0x1dc>)
  4076fe:	69bb      	ldr	r3, [r7, #24]
  407700:	011b      	lsls	r3, r3, #4
  407702:	4413      	add	r3, r2
  407704:	681a      	ldr	r2, [r3, #0]
  407706:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
  40770a:	601a      	str	r2, [r3, #0]
			bulk_td_head[i].td_info.bDataToggle = 0;
  40770c:	4a40      	ldr	r2, [pc, #256]	; (407810 <ohci_add_td_non_control+0x1dc>)
  40770e:	69bb      	ldr	r3, [r7, #24]
  407710:	011b      	lsls	r3, r3, #4
  407712:	4413      	add	r3, r2
  407714:	681a      	ldr	r2, [r3, #0]
  407716:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
  40771a:	601a      	str	r2, [r3, #0]
			bulk_td_head[i].td_info.bErrorCount = 0;
  40771c:	4a3c      	ldr	r2, [pc, #240]	; (407810 <ohci_add_td_non_control+0x1dc>)
  40771e:	69bb      	ldr	r3, [r7, #24]
  407720:	011b      	lsls	r3, r3, #4
  407722:	4413      	add	r3, r2
  407724:	681a      	ldr	r2, [r3, #0]
  407726:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
  40772a:	601a      	str	r2, [r3, #0]
			bulk_td_head[i].td_info.bConditionCode = 0;
  40772c:	4a38      	ldr	r2, [pc, #224]	; (407810 <ohci_add_td_non_control+0x1dc>)
  40772e:	69bb      	ldr	r3, [r7, #24]
  407730:	011b      	lsls	r3, r3, #4
  407732:	4413      	add	r3, r2
  407734:	681a      	ldr	r2, [r3, #0]
  407736:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
  40773a:	601a      	str	r2, [r3, #0]
			bulk_td_head[i].pCurrentBufferPointer= buf;
  40773c:	4a34      	ldr	r2, [pc, #208]	; (407810 <ohci_add_td_non_control+0x1dc>)
  40773e:	69bb      	ldr	r3, [r7, #24]
  407740:	011b      	lsls	r3, r3, #4
  407742:	4413      	add	r3, r2
  407744:	68ba      	ldr	r2, [r7, #8]
  407746:	605a      	str	r2, [r3, #4]
			bulk_td_head[i].p_next_td = NULL;
  407748:	4a31      	ldr	r2, [pc, #196]	; (407810 <ohci_add_td_non_control+0x1dc>)
  40774a:	69bb      	ldr	r3, [r7, #24]
  40774c:	011b      	lsls	r3, r3, #4
  40774e:	4413      	add	r3, r2
  407750:	3308      	adds	r3, #8
  407752:	2200      	movs	r2, #0
  407754:	601a      	str	r2, [r3, #0]
			bulk_td_head[i].pBufferEnd = buf + buf_size - 1;
  407756:	687b      	ldr	r3, [r7, #4]
  407758:	3b01      	subs	r3, #1
  40775a:	68ba      	ldr	r2, [r7, #8]
  40775c:	441a      	add	r2, r3
  40775e:	492c      	ldr	r1, [pc, #176]	; (407810 <ohci_add_td_non_control+0x1dc>)
  407760:	69bb      	ldr	r3, [r7, #24]
  407762:	011b      	lsls	r3, r3, #4
  407764:	440b      	add	r3, r1
  407766:	3308      	adds	r3, #8
  407768:	605a      	str	r2, [r3, #4]

			/* Check the halt status. */
			if ((uint32_t)ed_header->p_td_head & 0x01) {
  40776a:	69fb      	ldr	r3, [r7, #28]
  40776c:	689b      	ldr	r3, [r3, #8]
  40776e:	f003 0301 	and.w	r3, r3, #1
  407772:	2b00      	cmp	r3, #0
  407774:	d001      	beq.n	40777a <ohci_add_td_non_control+0x146>
				return false;
  407776:	2300      	movs	r3, #0
  407778:	e1da      	b.n	407b30 <ohci_add_td_non_control+0x4fc>
			}

			p_td_head = (uint32_t)(&bulk_td_head[i]);
  40777a:	69bb      	ldr	r3, [r7, #24]
  40777c:	011b      	lsls	r3, r3, #4
  40777e:	4a24      	ldr	r2, [pc, #144]	; (407810 <ohci_add_td_non_control+0x1dc>)
  407780:	4413      	add	r3, r2
  407782:	461a      	mov	r2, r3
  407784:	4b20      	ldr	r3, [pc, #128]	; (407808 <ohci_add_td_non_control+0x1d4>)
  407786:	601a      	str	r2, [r3, #0]
			p_td_head &= 0xFFFFFFF0;
  407788:	4b1f      	ldr	r3, [pc, #124]	; (407808 <ohci_add_td_non_control+0x1d4>)
  40778a:	681b      	ldr	r3, [r3, #0]
  40778c:	f023 030f 	bic.w	r3, r3, #15
  407790:	4a1d      	ldr	r2, [pc, #116]	; (407808 <ohci_add_td_non_control+0x1d4>)
  407792:	6013      	str	r3, [r2, #0]
			*td_general_header = (struct ohci_td_general *)p_td_head;
  407794:	4b1c      	ldr	r3, [pc, #112]	; (407808 <ohci_add_td_non_control+0x1d4>)
  407796:	681b      	ldr	r3, [r3, #0]
  407798:	461a      	mov	r2, r3
  40779a:	683b      	ldr	r3, [r7, #0]
  40779c:	601a      	str	r2, [r3, #0]
			p_td_tail = (uint32_t)(ed_header->p_td_head);
  40779e:	69fb      	ldr	r3, [r7, #28]
  4077a0:	689b      	ldr	r3, [r3, #8]
  4077a2:	461a      	mov	r2, r3
  4077a4:	4b19      	ldr	r3, [pc, #100]	; (40780c <ohci_add_td_non_control+0x1d8>)
  4077a6:	601a      	str	r2, [r3, #0]
			p_td_tail &= 0x0000000F;
  4077a8:	4b18      	ldr	r3, [pc, #96]	; (40780c <ohci_add_td_non_control+0x1d8>)
  4077aa:	681b      	ldr	r3, [r3, #0]
  4077ac:	f003 030f 	and.w	r3, r3, #15
  4077b0:	4a16      	ldr	r2, [pc, #88]	; (40780c <ohci_add_td_non_control+0x1d8>)
  4077b2:	6013      	str	r3, [r2, #0]
			p_td_head |= p_td_tail;
  4077b4:	4b15      	ldr	r3, [pc, #84]	; (40780c <ohci_add_td_non_control+0x1d8>)
  4077b6:	681a      	ldr	r2, [r3, #0]
  4077b8:	4b13      	ldr	r3, [pc, #76]	; (407808 <ohci_add_td_non_control+0x1d4>)
  4077ba:	681b      	ldr	r3, [r3, #0]
  4077bc:	4313      	orrs	r3, r2
  4077be:	4a12      	ldr	r2, [pc, #72]	; (407808 <ohci_add_td_non_control+0x1d4>)
  4077c0:	6013      	str	r3, [r2, #0]

			ed_header->p_td_head = (void *)p_td_head;
  4077c2:	4b11      	ldr	r3, [pc, #68]	; (407808 <ohci_add_td_non_control+0x1d4>)
  4077c4:	681b      	ldr	r3, [r3, #0]
  4077c6:	461a      	mov	r2, r3
  4077c8:	69fb      	ldr	r3, [r7, #28]
  4077ca:	609a      	str	r2, [r3, #8]
			ed_header->p_td_tail = NULL;
  4077cc:	69fb      	ldr	r3, [r7, #28]
  4077ce:	2200      	movs	r2, #0
  4077d0:	605a      	str	r2, [r3, #4]

			OHCI->HcCommandStatus = HC_COMMANDSTATUS_BLF;
  4077d2:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  4077d6:	2204      	movs	r2, #4
  4077d8:	609a      	str	r2, [r3, #8]
			OHCI->HcControl |= HC_CONTROL_BLE;
  4077da:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  4077de:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  4077e2:	685b      	ldr	r3, [r3, #4]
  4077e4:	f043 0320 	orr.w	r3, r3, #32
  4077e8:	6053      	str	r3, [r2, #4]
				
			return true;
  4077ea:	2301      	movs	r3, #1
  4077ec:	e1a0      	b.n	407b30 <ohci_add_td_non_control+0x4fc>
		} else {
			ed_header = ed_header->p_next_ed;
  4077ee:	69fb      	ldr	r3, [r7, #28]
  4077f0:	68db      	ldr	r3, [r3, #12]
  4077f2:	61fb      	str	r3, [r7, #28]
			i++;
  4077f4:	69bb      	ldr	r3, [r7, #24]
  4077f6:	3301      	adds	r3, #1
  4077f8:	61bb      	str	r3, [r7, #24]
	ep_number = ep_number & 0xF;

	/* Bulk endpoints. */
	i = 0;
	ed_header = (struct ohci_ed *)OHCI->HcBulkHeadED;
	while (ed_header != NULL) {
  4077fa:	69fb      	ldr	r3, [r7, #28]
  4077fc:	2b00      	cmp	r3, #0
  4077fe:	f47f af35 	bne.w	40766c <ohci_add_td_non_control+0x38>
			i++;
		}
	}

	/* Int/ISO endpoints. */
	for (i = 0; i < 8; i++) {
  407802:	2300      	movs	r3, #0
  407804:	61bb      	str	r3, [r7, #24]
  407806:	e18e      	b.n	407b26 <ohci_add_td_non_control+0x4f2>
  407808:	20019d08 	.word	0x20019d08
  40780c:	20019d0c 	.word	0x20019d0c
  407810:	200197c0 	.word	0x200197c0
  407814:	0040a815 	.word	0x0040a815
  407818:	20019840 	.word	0x20019840
		ed_header = (struct ohci_ed *)hcca.InterruptTable[i];
  40781c:	4a70      	ldr	r2, [pc, #448]	; (4079e0 <ohci_add_td_non_control+0x3ac>)
  40781e:	69bb      	ldr	r3, [r7, #24]
  407820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407824:	61fb      	str	r3, [r7, #28]
		if ((ed_header->ed_info.ed_info_s.bEndpointNumber == ep_number) &&
  407826:	69fb      	ldr	r3, [r7, #28]
  407828:	881b      	ldrh	r3, [r3, #0]
  40782a:	f3c3 13c3 	ubfx	r3, r3, #7, #4
  40782e:	b2db      	uxtb	r3, r3
  407830:	461a      	mov	r2, r3
  407832:	7bfb      	ldrb	r3, [r7, #15]
  407834:	429a      	cmp	r2, r3
  407836:	f040 8173 	bne.w	407b20 <ohci_add_td_non_control+0x4ec>
				(ed_header->ed_info.ed_info_s.bDirection == ep_dir)) {
  40783a:	69fb      	ldr	r3, [r7, #28]
  40783c:	785b      	ldrb	r3, [r3, #1]
  40783e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
  407842:	b2db      	uxtb	r3, r3
  407844:	461a      	mov	r2, r3
  407846:	7dfb      	ldrb	r3, [r7, #23]
	}

	/* Int/ISO endpoints. */
	for (i = 0; i < 8; i++) {
		ed_header = (struct ohci_ed *)hcca.InterruptTable[i];
		if ((ed_header->ed_info.ed_info_s.bEndpointNumber == ep_number) &&
  407848:	429a      	cmp	r2, r3
  40784a:	f040 8169 	bne.w	407b20 <ohci_add_td_non_control+0x4ec>
				(ed_header->ed_info.ed_info_s.bDirection == ep_dir)) {
			if (ed_header->ed_info.ed_info_s.bFormat == 0) {
  40784e:	69fb      	ldr	r3, [r7, #28]
  407850:	785b      	ldrb	r3, [r3, #1]
  407852:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  407856:	b2db      	uxtb	r3, r3
  407858:	2b00      	cmp	r3, #0
  40785a:	f040 80cd 	bne.w	4079f8 <ohci_add_td_non_control+0x3c4>
				/* Wait for transfer done. */
				do {
					p_td_head = ((uint32_t)(ed_header->p_td_head)) & 0xFFFFFFF0;
  40785e:	69fb      	ldr	r3, [r7, #28]
  407860:	689b      	ldr	r3, [r3, #8]
  407862:	f023 030f 	bic.w	r3, r3, #15
  407866:	4a5f      	ldr	r2, [pc, #380]	; (4079e4 <ohci_add_td_non_control+0x3b0>)
  407868:	6013      	str	r3, [r2, #0]
					p_td_tail = ((uint32_t)(ed_header->p_td_tail)) & 0xFFFFFFF0;
  40786a:	69fb      	ldr	r3, [r7, #28]
  40786c:	685b      	ldr	r3, [r3, #4]
  40786e:	f023 030f 	bic.w	r3, r3, #15
  407872:	4a5d      	ldr	r2, [pc, #372]	; (4079e8 <ohci_add_td_non_control+0x3b4>)
  407874:	6013      	str	r3, [r2, #0]
				} while(p_td_head != p_td_tail);
  407876:	4b5b      	ldr	r3, [pc, #364]	; (4079e4 <ohci_add_td_non_control+0x3b0>)
  407878:	681a      	ldr	r2, [r3, #0]
  40787a:	4b5b      	ldr	r3, [pc, #364]	; (4079e8 <ohci_add_td_non_control+0x3b4>)
  40787c:	681b      	ldr	r3, [r3, #0]
  40787e:	429a      	cmp	r2, r3
  407880:	d1ed      	bne.n	40785e <ohci_add_td_non_control+0x22a>

				OHCI->HcControl &= ~HC_CONTROL_PLE;
  407882:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  407886:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  40788a:	685b      	ldr	r3, [r3, #4]
  40788c:	f023 0304 	bic.w	r3, r3, #4
  407890:	6053      	str	r3, [r2, #4]
				OHCI->HcControl &= ~HC_CONTROL_IE;
  407892:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  407896:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  40789a:	685b      	ldr	r3, [r3, #4]
  40789c:	f023 0308 	bic.w	r3, r3, #8
  4078a0:	6053      	str	r3, [r2, #4]
				
				memset((void *)&interrupt_td_head[i], 0, sizeof(interrupt_td_head[i]));
  4078a2:	69bb      	ldr	r3, [r7, #24]
  4078a4:	011b      	lsls	r3, r3, #4
  4078a6:	4a51      	ldr	r2, [pc, #324]	; (4079ec <ohci_add_td_non_control+0x3b8>)
  4078a8:	4413      	add	r3, r2
  4078aa:	4618      	mov	r0, r3
  4078ac:	2100      	movs	r1, #0
  4078ae:	2210      	movs	r2, #16
  4078b0:	4b4f      	ldr	r3, [pc, #316]	; (4079f0 <ohci_add_td_non_control+0x3bc>)
  4078b2:	4798      	blx	r3
				memset((void *)&interrupt_td_tail[i], 0, sizeof(interrupt_td_tail[i]));
  4078b4:	69bb      	ldr	r3, [r7, #24]
  4078b6:	011b      	lsls	r3, r3, #4
  4078b8:	4a4e      	ldr	r2, [pc, #312]	; (4079f4 <ohci_add_td_non_control+0x3c0>)
  4078ba:	4413      	add	r3, r2
  4078bc:	4618      	mov	r0, r3
  4078be:	2100      	movs	r1, #0
  4078c0:	2210      	movs	r2, #16
  4078c2:	4b4b      	ldr	r3, [pc, #300]	; (4079f0 <ohci_add_td_non_control+0x3bc>)
  4078c4:	4798      	blx	r3

				interrupt_td_head[i].td_info.bBufferRounding = 1;
  4078c6:	4a49      	ldr	r2, [pc, #292]	; (4079ec <ohci_add_td_non_control+0x3b8>)
  4078c8:	69bb      	ldr	r3, [r7, #24]
  4078ca:	011b      	lsls	r3, r3, #4
  4078cc:	4413      	add	r3, r2
  4078ce:	681a      	ldr	r2, [r3, #0]
  4078d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  4078d4:	601a      	str	r2, [r3, #0]
				interrupt_td_head[i].td_info.bDirectionPID = 3;
  4078d6:	4a45      	ldr	r2, [pc, #276]	; (4079ec <ohci_add_td_non_control+0x3b8>)
  4078d8:	69bb      	ldr	r3, [r7, #24]
  4078da:	011b      	lsls	r3, r3, #4
  4078dc:	4413      	add	r3, r2
  4078de:	681a      	ldr	r2, [r3, #0]
  4078e0:	f442 12c0 	orr.w	r2, r2, #1572864	; 0x180000
  4078e4:	601a      	str	r2, [r3, #0]
				interrupt_td_head[i].td_info.bDelayInterrupt = 0;
  4078e6:	4a41      	ldr	r2, [pc, #260]	; (4079ec <ohci_add_td_non_control+0x3b8>)
  4078e8:	69bb      	ldr	r3, [r7, #24]
  4078ea:	011b      	lsls	r3, r3, #4
  4078ec:	4413      	add	r3, r2
  4078ee:	681a      	ldr	r2, [r3, #0]
  4078f0:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
  4078f4:	601a      	str	r2, [r3, #0]
				interrupt_td_head[i].td_info.bDataToggle = 0;
  4078f6:	4a3d      	ldr	r2, [pc, #244]	; (4079ec <ohci_add_td_non_control+0x3b8>)
  4078f8:	69bb      	ldr	r3, [r7, #24]
  4078fa:	011b      	lsls	r3, r3, #4
  4078fc:	4413      	add	r3, r2
  4078fe:	681a      	ldr	r2, [r3, #0]
  407900:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
  407904:	601a      	str	r2, [r3, #0]
				interrupt_td_head[i].td_info.bErrorCount = 0;
  407906:	4a39      	ldr	r2, [pc, #228]	; (4079ec <ohci_add_td_non_control+0x3b8>)
  407908:	69bb      	ldr	r3, [r7, #24]
  40790a:	011b      	lsls	r3, r3, #4
  40790c:	4413      	add	r3, r2
  40790e:	681a      	ldr	r2, [r3, #0]
  407910:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
  407914:	601a      	str	r2, [r3, #0]
				interrupt_td_head[i].td_info.bConditionCode = 0;
  407916:	4a35      	ldr	r2, [pc, #212]	; (4079ec <ohci_add_td_non_control+0x3b8>)
  407918:	69bb      	ldr	r3, [r7, #24]
  40791a:	011b      	lsls	r3, r3, #4
  40791c:	4413      	add	r3, r2
  40791e:	681a      	ldr	r2, [r3, #0]
  407920:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
  407924:	601a      	str	r2, [r3, #0]
				interrupt_td_head[i].pCurrentBufferPointer= buf;
  407926:	4a31      	ldr	r2, [pc, #196]	; (4079ec <ohci_add_td_non_control+0x3b8>)
  407928:	69bb      	ldr	r3, [r7, #24]
  40792a:	011b      	lsls	r3, r3, #4
  40792c:	4413      	add	r3, r2
  40792e:	68ba      	ldr	r2, [r7, #8]
  407930:	605a      	str	r2, [r3, #4]
				interrupt_td_head[i].p_next_td = NULL;
  407932:	4a2e      	ldr	r2, [pc, #184]	; (4079ec <ohci_add_td_non_control+0x3b8>)
  407934:	69bb      	ldr	r3, [r7, #24]
  407936:	011b      	lsls	r3, r3, #4
  407938:	4413      	add	r3, r2
  40793a:	3308      	adds	r3, #8
  40793c:	2200      	movs	r2, #0
  40793e:	601a      	str	r2, [r3, #0]
				interrupt_td_head[i].pBufferEnd = buf + buf_size - 1;
  407940:	687b      	ldr	r3, [r7, #4]
  407942:	3b01      	subs	r3, #1
  407944:	68ba      	ldr	r2, [r7, #8]
  407946:	441a      	add	r2, r3
  407948:	4928      	ldr	r1, [pc, #160]	; (4079ec <ohci_add_td_non_control+0x3b8>)
  40794a:	69bb      	ldr	r3, [r7, #24]
  40794c:	011b      	lsls	r3, r3, #4
  40794e:	440b      	add	r3, r1
  407950:	3308      	adds	r3, #8
  407952:	605a      	str	r2, [r3, #4]

				/* Check the halt status. */
				if ((uint32_t)ed_header->p_td_head & 0x01) {
  407954:	69fb      	ldr	r3, [r7, #28]
  407956:	689b      	ldr	r3, [r3, #8]
  407958:	f003 0301 	and.w	r3, r3, #1
  40795c:	2b00      	cmp	r3, #0
  40795e:	d001      	beq.n	407964 <ohci_add_td_non_control+0x330>
					return false;
  407960:	2300      	movs	r3, #0
  407962:	e0e5      	b.n	407b30 <ohci_add_td_non_control+0x4fc>
				}

				p_td_head = (uint32_t)(&interrupt_td_head[i]);
  407964:	69bb      	ldr	r3, [r7, #24]
  407966:	011b      	lsls	r3, r3, #4
  407968:	4a20      	ldr	r2, [pc, #128]	; (4079ec <ohci_add_td_non_control+0x3b8>)
  40796a:	4413      	add	r3, r2
  40796c:	461a      	mov	r2, r3
  40796e:	4b1d      	ldr	r3, [pc, #116]	; (4079e4 <ohci_add_td_non_control+0x3b0>)
  407970:	601a      	str	r2, [r3, #0]
				p_td_head &= 0xFFFFFFF0;
  407972:	4b1c      	ldr	r3, [pc, #112]	; (4079e4 <ohci_add_td_non_control+0x3b0>)
  407974:	681b      	ldr	r3, [r3, #0]
  407976:	f023 030f 	bic.w	r3, r3, #15
  40797a:	4a1a      	ldr	r2, [pc, #104]	; (4079e4 <ohci_add_td_non_control+0x3b0>)
  40797c:	6013      	str	r3, [r2, #0]
				*td_general_header = (struct ohci_td_general *)p_td_head;
  40797e:	4b19      	ldr	r3, [pc, #100]	; (4079e4 <ohci_add_td_non_control+0x3b0>)
  407980:	681b      	ldr	r3, [r3, #0]
  407982:	461a      	mov	r2, r3
  407984:	683b      	ldr	r3, [r7, #0]
  407986:	601a      	str	r2, [r3, #0]
				p_td_tail = (uint32_t)(ed_header->p_td_head);
  407988:	69fb      	ldr	r3, [r7, #28]
  40798a:	689b      	ldr	r3, [r3, #8]
  40798c:	461a      	mov	r2, r3
  40798e:	4b16      	ldr	r3, [pc, #88]	; (4079e8 <ohci_add_td_non_control+0x3b4>)
  407990:	601a      	str	r2, [r3, #0]
				p_td_tail &= 0x0000000F;
  407992:	4b15      	ldr	r3, [pc, #84]	; (4079e8 <ohci_add_td_non_control+0x3b4>)
  407994:	681b      	ldr	r3, [r3, #0]
  407996:	f003 030f 	and.w	r3, r3, #15
  40799a:	4a13      	ldr	r2, [pc, #76]	; (4079e8 <ohci_add_td_non_control+0x3b4>)
  40799c:	6013      	str	r3, [r2, #0]
				p_td_head |= p_td_tail;
  40799e:	4b12      	ldr	r3, [pc, #72]	; (4079e8 <ohci_add_td_non_control+0x3b4>)
  4079a0:	681a      	ldr	r2, [r3, #0]
  4079a2:	4b10      	ldr	r3, [pc, #64]	; (4079e4 <ohci_add_td_non_control+0x3b0>)
  4079a4:	681b      	ldr	r3, [r3, #0]
  4079a6:	4313      	orrs	r3, r2
  4079a8:	4a0e      	ldr	r2, [pc, #56]	; (4079e4 <ohci_add_td_non_control+0x3b0>)
  4079aa:	6013      	str	r3, [r2, #0]
				ed_header->p_td_head = (void *)p_td_head;
  4079ac:	4b0d      	ldr	r3, [pc, #52]	; (4079e4 <ohci_add_td_non_control+0x3b0>)
  4079ae:	681b      	ldr	r3, [r3, #0]
  4079b0:	461a      	mov	r2, r3
  4079b2:	69fb      	ldr	r3, [r7, #28]
  4079b4:	609a      	str	r2, [r3, #8]
				ed_header->p_td_tail = NULL;
  4079b6:	69fb      	ldr	r3, [r7, #28]
  4079b8:	2200      	movs	r2, #0
  4079ba:	605a      	str	r2, [r3, #4]

				OHCI->HcControl |= HC_CONTROL_PLE;
  4079bc:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  4079c0:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  4079c4:	685b      	ldr	r3, [r3, #4]
  4079c6:	f043 0304 	orr.w	r3, r3, #4
  4079ca:	6053      	str	r3, [r2, #4]
				OHCI->HcControl |= HC_CONTROL_IE;
  4079cc:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  4079d0:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  4079d4:	685b      	ldr	r3, [r3, #4]
  4079d6:	f043 0308 	orr.w	r3, r3, #8
  4079da:	6053      	str	r3, [r2, #4]

				return true;
  4079dc:	2301      	movs	r3, #1
  4079de:	e0a7      	b.n	407b30 <ohci_add_td_non_control+0x4fc>
  4079e0:	20019600 	.word	0x20019600
  4079e4:	20019d08 	.word	0x20019d08
  4079e8:	20019d0c 	.word	0x20019d0c
  4079ec:	20019950 	.word	0x20019950
  4079f0:	0040a815 	.word	0x0040a815
  4079f4:	200199d0 	.word	0x200199d0
			} else {
				/* Wait for transfer done. */
				do {
					p_td_head = ((uint32_t)(ed_header->p_td_head)) & 0xFFFFFFF0;
  4079f8:	69fb      	ldr	r3, [r7, #28]
  4079fa:	689b      	ldr	r3, [r3, #8]
  4079fc:	f023 030f 	bic.w	r3, r3, #15
  407a00:	4a4d      	ldr	r2, [pc, #308]	; (407b38 <ohci_add_td_non_control+0x504>)
  407a02:	6013      	str	r3, [r2, #0]
					p_td_tail = ((uint32_t)(ed_header->p_td_tail)) & 0xFFFFFFF0;
  407a04:	69fb      	ldr	r3, [r7, #28]
  407a06:	685b      	ldr	r3, [r3, #4]
  407a08:	f023 030f 	bic.w	r3, r3, #15
  407a0c:	4a4b      	ldr	r2, [pc, #300]	; (407b3c <ohci_add_td_non_control+0x508>)
  407a0e:	6013      	str	r3, [r2, #0]
				} while(p_td_head != p_td_tail);
  407a10:	4b49      	ldr	r3, [pc, #292]	; (407b38 <ohci_add_td_non_control+0x504>)
  407a12:	681a      	ldr	r2, [r3, #0]
  407a14:	4b49      	ldr	r3, [pc, #292]	; (407b3c <ohci_add_td_non_control+0x508>)
  407a16:	681b      	ldr	r3, [r3, #0]
  407a18:	429a      	cmp	r2, r3
  407a1a:	d1ed      	bne.n	4079f8 <ohci_add_td_non_control+0x3c4>

				OHCI->HcControl &= ~HC_CONTROL_PLE;
  407a1c:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  407a20:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407a24:	685b      	ldr	r3, [r3, #4]
  407a26:	f023 0304 	bic.w	r3, r3, #4
  407a2a:	6053      	str	r3, [r2, #4]
				OHCI->HcControl &= ~HC_CONTROL_IE;
  407a2c:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  407a30:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407a34:	685b      	ldr	r3, [r3, #4]
  407a36:	f023 0308 	bic.w	r3, r3, #8
  407a3a:	6053      	str	r3, [r2, #4]
				
				memset((void *)&isochronous_td_head[i], 0, sizeof(isochronous_td_head[i]));
  407a3c:	69bb      	ldr	r3, [r7, #24]
  407a3e:	015b      	lsls	r3, r3, #5
  407a40:	4a3f      	ldr	r2, [pc, #252]	; (407b40 <ohci_add_td_non_control+0x50c>)
  407a42:	4413      	add	r3, r2
  407a44:	4618      	mov	r0, r3
  407a46:	2100      	movs	r1, #0
  407a48:	2220      	movs	r2, #32
  407a4a:	4b3e      	ldr	r3, [pc, #248]	; (407b44 <ohci_add_td_non_control+0x510>)
  407a4c:	4798      	blx	r3
				memset((void *)&isochronous_td_tail[i], 0, sizeof(isochronous_td_tail[i]));
  407a4e:	69bb      	ldr	r3, [r7, #24]
  407a50:	015b      	lsls	r3, r3, #5
  407a52:	4a3d      	ldr	r2, [pc, #244]	; (407b48 <ohci_add_td_non_control+0x514>)
  407a54:	4413      	add	r3, r2
  407a56:	4618      	mov	r0, r3
  407a58:	2100      	movs	r1, #0
  407a5a:	2220      	movs	r2, #32
  407a5c:	4b39      	ldr	r3, [pc, #228]	; (407b44 <ohci_add_td_non_control+0x510>)
  407a5e:	4798      	blx	r3

				/* Start after 3 frame. */
				isochronous_td_head[i].td_info.bStartingFrame = ohci_get_frame_number() + 3;
  407a60:	4b3a      	ldr	r3, [pc, #232]	; (407b4c <ohci_add_td_non_control+0x518>)
  407a62:	4798      	blx	r3
  407a64:	4603      	mov	r3, r0
  407a66:	3303      	adds	r3, #3
  407a68:	b299      	uxth	r1, r3
  407a6a:	4a35      	ldr	r2, [pc, #212]	; (407b40 <ohci_add_td_non_control+0x50c>)
  407a6c:	69bb      	ldr	r3, [r7, #24]
  407a6e:	015b      	lsls	r3, r3, #5
  407a70:	441a      	add	r2, r3
  407a72:	b289      	uxth	r1, r1
  407a74:	6813      	ldr	r3, [r2, #0]
  407a76:	0c1b      	lsrs	r3, r3, #16
  407a78:	041b      	lsls	r3, r3, #16
  407a7a:	430b      	orrs	r3, r1
  407a7c:	6013      	str	r3, [r2, #0]
				isochronous_td_head[i].td_info.bDelayInterrupt = 0;
  407a7e:	4a30      	ldr	r2, [pc, #192]	; (407b40 <ohci_add_td_non_control+0x50c>)
  407a80:	69bb      	ldr	r3, [r7, #24]
  407a82:	015b      	lsls	r3, r3, #5
  407a84:	4413      	add	r3, r2
  407a86:	681a      	ldr	r2, [r3, #0]
  407a88:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
  407a8c:	601a      	str	r2, [r3, #0]
				isochronous_td_head[i].td_info.FrameCount = 0;				// one frame transaction
  407a8e:	4a2c      	ldr	r2, [pc, #176]	; (407b40 <ohci_add_td_non_control+0x50c>)
  407a90:	69bb      	ldr	r3, [r7, #24]
  407a92:	015b      	lsls	r3, r3, #5
  407a94:	4413      	add	r3, r2
  407a96:	681a      	ldr	r2, [r3, #0]
  407a98:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
  407a9c:	601a      	str	r2, [r3, #0]
				isochronous_td_head[i].td_info.bConditionCode = 0;
  407a9e:	4a28      	ldr	r2, [pc, #160]	; (407b40 <ohci_add_td_non_control+0x50c>)
  407aa0:	69bb      	ldr	r3, [r7, #24]
  407aa2:	015b      	lsls	r3, r3, #5
  407aa4:	4413      	add	r3, r2
  407aa6:	681a      	ldr	r2, [r3, #0]
  407aa8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
  407aac:	601a      	str	r2, [r3, #0]
				isochronous_td_head[i].pBufferPage0= buf;
  407aae:	4a24      	ldr	r2, [pc, #144]	; (407b40 <ohci_add_td_non_control+0x50c>)
  407ab0:	69bb      	ldr	r3, [r7, #24]
  407ab2:	015b      	lsls	r3, r3, #5
  407ab4:	4413      	add	r3, r2
  407ab6:	68ba      	ldr	r2, [r7, #8]
  407ab8:	605a      	str	r2, [r3, #4]
				isochronous_td_head[i].p_next_td = NULL;
  407aba:	4a21      	ldr	r2, [pc, #132]	; (407b40 <ohci_add_td_non_control+0x50c>)
  407abc:	69bb      	ldr	r3, [r7, #24]
  407abe:	015b      	lsls	r3, r3, #5
  407ac0:	4413      	add	r3, r2
  407ac2:	3308      	adds	r3, #8
  407ac4:	2200      	movs	r2, #0
  407ac6:	601a      	str	r2, [r3, #0]
				isochronous_td_head[i].pBufferEnd = buf + buf_size - 1;
  407ac8:	687b      	ldr	r3, [r7, #4]
  407aca:	3b01      	subs	r3, #1
  407acc:	68ba      	ldr	r2, [r7, #8]
  407ace:	441a      	add	r2, r3
  407ad0:	491b      	ldr	r1, [pc, #108]	; (407b40 <ohci_add_td_non_control+0x50c>)
  407ad2:	69bb      	ldr	r3, [r7, #24]
  407ad4:	015b      	lsls	r3, r3, #5
  407ad6:	440b      	add	r3, r1
  407ad8:	3308      	adds	r3, #8
  407ada:	605a      	str	r2, [r3, #4]
				isochronous_td_head[i].offset_psw[0] = 0;
  407adc:	4a18      	ldr	r2, [pc, #96]	; (407b40 <ohci_add_td_non_control+0x50c>)
  407ade:	69bb      	ldr	r3, [r7, #24]
  407ae0:	015b      	lsls	r3, r3, #5
  407ae2:	4413      	add	r3, r2
  407ae4:	3310      	adds	r3, #16
  407ae6:	2200      	movs	r2, #0
  407ae8:	801a      	strh	r2, [r3, #0]
//				}

				// set the skip
//				ed_header->ed_info.ed_info_s.bSkip = 1;

				ed_header->p_td_head = (void *)&isochronous_td_head[i];
  407aea:	69bb      	ldr	r3, [r7, #24]
  407aec:	015b      	lsls	r3, r3, #5
  407aee:	4a14      	ldr	r2, [pc, #80]	; (407b40 <ohci_add_td_non_control+0x50c>)
  407af0:	441a      	add	r2, r3
  407af2:	69fb      	ldr	r3, [r7, #28]
  407af4:	609a      	str	r2, [r3, #8]
				ed_header->p_td_tail = NULL;
  407af6:	69fb      	ldr	r3, [r7, #28]
  407af8:	2200      	movs	r2, #0
  407afa:	605a      	str	r2, [r3, #4]

				// clear the skip
//				ed_header->ed_info.ed_info_s.bSkip = 0;

				OHCI->HcControl |= HC_CONTROL_PLE;
  407afc:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  407b00:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407b04:	685b      	ldr	r3, [r3, #4]
  407b06:	f043 0304 	orr.w	r3, r3, #4
  407b0a:	6053      	str	r3, [r2, #4]
				OHCI->HcControl |= HC_CONTROL_IE;
  407b0c:	f04f 5201 	mov.w	r2, #541065216	; 0x20400000
  407b10:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407b14:	685b      	ldr	r3, [r3, #4]
  407b16:	f043 0308 	orr.w	r3, r3, #8
  407b1a:	6053      	str	r3, [r2, #4]
					
				return true;
  407b1c:	2301      	movs	r3, #1
  407b1e:	e007      	b.n	407b30 <ohci_add_td_non_control+0x4fc>
			i++;
		}
	}

	/* Int/ISO endpoints. */
	for (i = 0; i < 8; i++) {
  407b20:	69bb      	ldr	r3, [r7, #24]
  407b22:	3301      	adds	r3, #1
  407b24:	61bb      	str	r3, [r7, #24]
  407b26:	69bb      	ldr	r3, [r7, #24]
  407b28:	2b07      	cmp	r3, #7
  407b2a:	f67f ae77 	bls.w	40781c <ohci_add_td_non_control+0x1e8>
					
				return true;
			}
		}
	}
	return false;
  407b2e:	2300      	movs	r3, #0
}
  407b30:	4618      	mov	r0, r3
  407b32:	3720      	adds	r7, #32
  407b34:	46bd      	mov	sp, r7
  407b36:	bd80      	pop	{r7, pc}
  407b38:	20019d08 	.word	0x20019d08
  407b3c:	20019d0c 	.word	0x20019d0c
  407b40:	20019ae0 	.word	0x20019ae0
  407b44:	0040a815 	.word	0x0040a815
  407b48:	20019be0 	.word	0x20019be0
  407b4c:	00406d5d 	.word	0x00406d5d

00407b50 <ohci_register_callback>:
 *
 * \param int_source interrupt source type.
 * \param call_back Pointer to the callback function.
 */
void ohci_register_callback(enum ohci_interrupt_source int_source, void *call_back)
{
  407b50:	b480      	push	{r7}
  407b52:	b083      	sub	sp, #12
  407b54:	af00      	add	r7, sp, #0
  407b56:	4603      	mov	r3, r0
  407b58:	6039      	str	r1, [r7, #0]
  407b5a:	71fb      	strb	r3, [r7, #7]
	ohci_callback_pointer[int_source] = (ohci_callback_t)call_back;
  407b5c:	79fb      	ldrb	r3, [r7, #7]
  407b5e:	683a      	ldr	r2, [r7, #0]
  407b60:	4903      	ldr	r1, [pc, #12]	; (407b70 <ohci_register_callback+0x20>)
  407b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  407b66:	370c      	adds	r7, #12
  407b68:	46bd      	mov	sp, r7
  407b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  407b6e:	4770      	bx	lr
  407b70:	20019ce0 	.word	0x20019ce0

00407b74 <UHP_Handler>:

/**
 * \brief USB host interrupt handler.
 */
void UHP_Handler()
{
  407b74:	b580      	push	{r7, lr}
  407b76:	b084      	sub	sp, #16
  407b78:	af00      	add	r7, sp, #0
	uint32_t int_status;
	uint32_t rh_status;
	uint32_t rh_port_status;
	struct ohci_td_general *td_general_header;

	rh_status = OHCI->HcRhStatus;
  407b7a:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  407b80:	60fb      	str	r3, [r7, #12]
	rh_port_status = OHCI->HcRhPortStatus;
  407b82:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  407b88:	60bb      	str	r3, [r7, #8]
	/**
	 * Read interrupt status (and flush pending writes).  We ignore the
	 * optimization of checking the LSB of hcca->done_head; it doesn't
	 * work on all systems (edge triggering for OHCI can be a factor).
	 */
	int_status = OHCI->HcInterruptStatus;
  407b8a:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407b8e:	68db      	ldr	r3, [r3, #12]
  407b90:	607b      	str	r3, [r7, #4]

	/* We only care about interrupts that are enabled */
	int_status &= OHCI->HcInterruptEnable;
  407b92:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407b96:	691b      	ldr	r3, [r3, #16]
  407b98:	687a      	ldr	r2, [r7, #4]
  407b9a:	4013      	ands	r3, r2
  407b9c:	607b      	str	r3, [r7, #4]

	if (int_status & HC_INTERRUPT_WDH) {
  407b9e:	687b      	ldr	r3, [r7, #4]
  407ba0:	f003 0302 	and.w	r3, r3, #2
  407ba4:	2b00      	cmp	r3, #0
  407ba6:	d02c      	beq.n	407c02 <UHP_Handler+0x8e>
		td_general_header = (struct ohci_td_general *)hcca.pDoneHead;
  407ba8:	4b56      	ldr	r3, [pc, #344]	; (407d04 <UHP_Handler+0x190>)
  407baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  407bae:	603b      	str	r3, [r7, #0]
		OHCI->HcInterruptStatus = HC_INTERRUPT_WDH;
  407bb0:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407bb4:	2202      	movs	r2, #2
  407bb6:	60da      	str	r2, [r3, #12]
		callback_para = (uint32_t)td_general_header;
  407bb8:	683b      	ldr	r3, [r7, #0]
  407bba:	4a53      	ldr	r2, [pc, #332]	; (407d08 <UHP_Handler+0x194>)
  407bbc:	6013      	str	r3, [r2, #0]
		callback_para &= 0xFFFFFFF0;
  407bbe:	4b52      	ldr	r3, [pc, #328]	; (407d08 <UHP_Handler+0x194>)
  407bc0:	681b      	ldr	r3, [r3, #0]
  407bc2:	f023 030f 	bic.w	r3, r3, #15
  407bc6:	4a50      	ldr	r2, [pc, #320]	; (407d08 <UHP_Handler+0x194>)
  407bc8:	6013      	str	r3, [r2, #0]
		if (callback_para == ((uint32_t)&control_td_head & 0xFFFFFFF0)) {
  407bca:	4b4f      	ldr	r3, [pc, #316]	; (407d08 <UHP_Handler+0x194>)
  407bcc:	681a      	ldr	r2, [r3, #0]
  407bce:	4b4f      	ldr	r3, [pc, #316]	; (407d0c <UHP_Handler+0x198>)
  407bd0:	f023 030f 	bic.w	r3, r3, #15
  407bd4:	429a      	cmp	r2, r3
  407bd6:	d105      	bne.n	407be4 <UHP_Handler+0x70>
			callback_para |= 0x80000000;
  407bd8:	4b4b      	ldr	r3, [pc, #300]	; (407d08 <UHP_Handler+0x194>)
  407bda:	681b      	ldr	r3, [r3, #0]
  407bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407be0:	4a49      	ldr	r2, [pc, #292]	; (407d08 <UHP_Handler+0x194>)
  407be2:	6013      	str	r3, [r2, #0]
		}
		callback_para |= td_general_header->td_info.bConditionCode;
  407be4:	683b      	ldr	r3, [r7, #0]
  407be6:	78db      	ldrb	r3, [r3, #3]
  407be8:	f3c3 1303 	ubfx	r3, r3, #4, #4
  407bec:	b2db      	uxtb	r3, r3
  407bee:	461a      	mov	r2, r3
  407bf0:	4b45      	ldr	r3, [pc, #276]	; (407d08 <UHP_Handler+0x194>)
  407bf2:	681b      	ldr	r3, [r3, #0]
  407bf4:	4313      	orrs	r3, r2
  407bf6:	4a44      	ldr	r2, [pc, #272]	; (407d08 <UHP_Handler+0x194>)
  407bf8:	6013      	str	r3, [r2, #0]
		ohci_callback_pointer[OHCI_INTERRUPT_WDH](&callback_para);
  407bfa:	4b45      	ldr	r3, [pc, #276]	; (407d10 <UHP_Handler+0x19c>)
  407bfc:	685b      	ldr	r3, [r3, #4]
  407bfe:	4842      	ldr	r0, [pc, #264]	; (407d08 <UHP_Handler+0x194>)
  407c00:	4798      	blx	r3
	/**
	 * For connect and disconnect events, we expect the controller
	 * to turn on RHSC along with RD.  But for remote wakeup events
	 * this might not happen.
	 */
	if (int_status & HC_INTERRUPT_RD) {
  407c02:	687b      	ldr	r3, [r7, #4]
  407c04:	f003 0308 	and.w	r3, r3, #8
  407c08:	2b00      	cmp	r3, #0
  407c0a:	d009      	beq.n	407c20 <UHP_Handler+0xac>
		/* Resume detected. */
		OHCI->HcInterruptStatus = HC_INTERRUPT_RD;
  407c0c:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407c10:	2208      	movs	r2, #8
  407c12:	60da      	str	r2, [r3, #12]
		ohci_bus_resume();
  407c14:	4b3f      	ldr	r3, [pc, #252]	; (407d14 <UHP_Handler+0x1a0>)
  407c16:	4798      	blx	r3
		ohci_callback_pointer[OHCI_INTERRUPT_RD](&callback_para);
  407c18:	4b3d      	ldr	r3, [pc, #244]	; (407d10 <UHP_Handler+0x19c>)
  407c1a:	68db      	ldr	r3, [r3, #12]
  407c1c:	483a      	ldr	r0, [pc, #232]	; (407d08 <UHP_Handler+0x194>)
  407c1e:	4798      	blx	r3
	}

	if (int_status & HC_INTERRUPT_RHSC) {
  407c20:	687b      	ldr	r3, [r7, #4]
  407c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
  407c26:	2b00      	cmp	r3, #0
  407c28:	d042      	beq.n	407cb0 <UHP_Handler+0x13c>
		if (bus_reset_flag) {
  407c2a:	4b3b      	ldr	r3, [pc, #236]	; (407d18 <UHP_Handler+0x1a4>)
  407c2c:	681b      	ldr	r3, [r3, #0]
  407c2e:	2b00      	cmp	r3, #0
  407c30:	d013      	beq.n	407c5a <UHP_Handler+0xe6>
			OHCI->HcRhPortStatus = RH_PS_PRSC;
  407c32:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407c36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  407c3a:	655a      	str	r2, [r3, #84]	; 0x54
			OHCI->HcInterruptStatus = HC_INTERRUPT_RHSC;
  407c3c:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407c40:	2240      	movs	r2, #64	; 0x40
  407c42:	60da      	str	r2, [r3, #12]
			bus_reset_flag = false;
  407c44:	4b34      	ldr	r3, [pc, #208]	; (407d18 <UHP_Handler+0x1a4>)
  407c46:	2200      	movs	r2, #0
  407c48:	601a      	str	r2, [r3, #0]
			callback_para = BUS_RESET;
  407c4a:	4b2f      	ldr	r3, [pc, #188]	; (407d08 <UHP_Handler+0x194>)
  407c4c:	2202      	movs	r2, #2
  407c4e:	601a      	str	r2, [r3, #0]
			ohci_callback_pointer[OHCI_INTERRUPT_RHSC](&callback_para);
  407c50:	4b2f      	ldr	r3, [pc, #188]	; (407d10 <UHP_Handler+0x19c>)
  407c52:	699b      	ldr	r3, [r3, #24]
  407c54:	482c      	ldr	r0, [pc, #176]	; (407d08 <UHP_Handler+0x194>)
  407c56:	4798      	blx	r3
  407c58:	e02a      	b.n	407cb0 <UHP_Handler+0x13c>
		} else if (rh_port_status & RH_PS_CSC) {
  407c5a:	68bb      	ldr	r3, [r7, #8]
  407c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  407c60:	2b00      	cmp	r3, #0
  407c62:	d01e      	beq.n	407ca2 <UHP_Handler+0x12e>
			OHCI->HcRhPortStatus = RH_PS_CSC;
  407c64:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407c68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  407c6c:	655a      	str	r2, [r3, #84]	; 0x54
			OHCI->HcInterruptStatus = HC_INTERRUPT_RHSC;
  407c6e:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407c72:	2240      	movs	r2, #64	; 0x40
  407c74:	60da      	str	r2, [r3, #12]
			if (!(rh_status & RH_HS_DRWE)) {
  407c76:	68fb      	ldr	r3, [r7, #12]
  407c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  407c7c:	2b00      	cmp	r3, #0
  407c7e:	d117      	bne.n	407cb0 <UHP_Handler+0x13c>
				if (rh_port_status & RH_PS_CCS) {
  407c80:	68bb      	ldr	r3, [r7, #8]
  407c82:	f003 0301 	and.w	r3, r3, #1
  407c86:	2b00      	cmp	r3, #0
  407c88:	d003      	beq.n	407c92 <UHP_Handler+0x11e>
					callback_para = BUS_CONNECT;
  407c8a:	4b1f      	ldr	r3, [pc, #124]	; (407d08 <UHP_Handler+0x194>)
  407c8c:	2200      	movs	r2, #0
  407c8e:	601a      	str	r2, [r3, #0]
  407c90:	e002      	b.n	407c98 <UHP_Handler+0x124>
				} else {
					callback_para = BUS_DISCONNECT;
  407c92:	4b1d      	ldr	r3, [pc, #116]	; (407d08 <UHP_Handler+0x194>)
  407c94:	2201      	movs	r2, #1
  407c96:	601a      	str	r2, [r3, #0]
				}
				ohci_callback_pointer[OHCI_INTERRUPT_RHSC](&callback_para);
  407c98:	4b1d      	ldr	r3, [pc, #116]	; (407d10 <UHP_Handler+0x19c>)
  407c9a:	699b      	ldr	r3, [r3, #24]
  407c9c:	481a      	ldr	r0, [pc, #104]	; (407d08 <UHP_Handler+0x194>)
  407c9e:	4798      	blx	r3
  407ca0:	e006      	b.n	407cb0 <UHP_Handler+0x13c>
			}
		} else {
			OHCI->HcInterruptStatus = HC_INTERRUPT_RHSC;
  407ca2:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407ca6:	2240      	movs	r2, #64	; 0x40
  407ca8:	60da      	str	r2, [r3, #12]
			callback_para = 0xff;
  407caa:	4b17      	ldr	r3, [pc, #92]	; (407d08 <UHP_Handler+0x194>)
  407cac:	22ff      	movs	r2, #255	; 0xff
  407cae:	601a      	str	r2, [r3, #0]
		}
	}

	if (int_status & HC_INTERRUPT_SF) {
  407cb0:	687b      	ldr	r3, [r7, #4]
  407cb2:	f003 0304 	and.w	r3, r3, #4
  407cb6:	2b00      	cmp	r3, #0
  407cb8:	d007      	beq.n	407cca <UHP_Handler+0x156>
		OHCI->HcInterruptStatus = HC_INTERRUPT_SF;
  407cba:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407cbe:	2204      	movs	r2, #4
  407cc0:	60da      	str	r2, [r3, #12]
		ohci_callback_pointer[OHCI_INTERRUPT_SF](&callback_para);
  407cc2:	4b13      	ldr	r3, [pc, #76]	; (407d10 <UHP_Handler+0x19c>)
  407cc4:	689b      	ldr	r3, [r3, #8]
  407cc6:	4810      	ldr	r0, [pc, #64]	; (407d08 <UHP_Handler+0x194>)
  407cc8:	4798      	blx	r3
	}

	if (int_status & HC_INTERRUPT_SO) {
  407cca:	687b      	ldr	r3, [r7, #4]
  407ccc:	f003 0301 	and.w	r3, r3, #1
  407cd0:	2b00      	cmp	r3, #0
  407cd2:	d007      	beq.n	407ce4 <UHP_Handler+0x170>
		OHCI->HcInterruptStatus = HC_INTERRUPT_SO;
  407cd4:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407cd8:	2201      	movs	r2, #1
  407cda:	60da      	str	r2, [r3, #12]
		ohci_callback_pointer[OHCI_INTERRUPT_SO](&callback_para);
  407cdc:	4b0c      	ldr	r3, [pc, #48]	; (407d10 <UHP_Handler+0x19c>)
  407cde:	681b      	ldr	r3, [r3, #0]
  407ce0:	4809      	ldr	r0, [pc, #36]	; (407d08 <UHP_Handler+0x194>)
  407ce2:	4798      	blx	r3
	}

	if (int_status & HC_INTERRUPT_UE) {
  407ce4:	687b      	ldr	r3, [r7, #4]
  407ce6:	f003 0310 	and.w	r3, r3, #16
  407cea:	2b00      	cmp	r3, #0
  407cec:	d007      	beq.n	407cfe <UHP_Handler+0x18a>
		OHCI->HcInterruptStatus = HC_INTERRUPT_UE;
  407cee:	f04f 5301 	mov.w	r3, #541065216	; 0x20400000
  407cf2:	2210      	movs	r2, #16
  407cf4:	60da      	str	r2, [r3, #12]
		ohci_callback_pointer[OHCI_INTERRUPT_UE](&callback_para);
  407cf6:	4b06      	ldr	r3, [pc, #24]	; (407d10 <UHP_Handler+0x19c>)
  407cf8:	691b      	ldr	r3, [r3, #16]
  407cfa:	4803      	ldr	r0, [pc, #12]	; (407d08 <UHP_Handler+0x194>)
  407cfc:	4798      	blx	r3
	}
}
  407cfe:	3710      	adds	r7, #16
  407d00:	46bd      	mov	sp, r7
  407d02:	bd80      	pop	{r7, pc}
  407d04:	20019600 	.word	0x20019600
  407d08:	20019d00 	.word	0x20019d00
  407d0c:	20019710 	.word	0x20019710
  407d10:	20019ce0 	.word	0x20019ce0
  407d14:	00406e5d 	.word	0x00406e5d
  407d18:	20019d04 	.word	0x20019d04

00407d1c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  407d1c:	b480      	push	{r7}
  407d1e:	b083      	sub	sp, #12
  407d20:	af00      	add	r7, sp, #0
  407d22:	4603      	mov	r3, r0
  407d24:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  407d26:	4908      	ldr	r1, [pc, #32]	; (407d48 <NVIC_EnableIRQ+0x2c>)
  407d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407d2c:	095b      	lsrs	r3, r3, #5
  407d2e:	79fa      	ldrb	r2, [r7, #7]
  407d30:	f002 021f 	and.w	r2, r2, #31
  407d34:	2001      	movs	r0, #1
  407d36:	fa00 f202 	lsl.w	r2, r0, r2
  407d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  407d3e:	370c      	adds	r7, #12
  407d40:	46bd      	mov	sp, r7
  407d42:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d46:	4770      	bx	lr
  407d48:	e000e100 	.word	0xe000e100

00407d4c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  407d4c:	b480      	push	{r7}
  407d4e:	b083      	sub	sp, #12
  407d50:	af00      	add	r7, sp, #0
  407d52:	4603      	mov	r3, r0
  407d54:	6039      	str	r1, [r7, #0]
  407d56:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  407d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407d5c:	2b00      	cmp	r3, #0
  407d5e:	da0b      	bge.n	407d78 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  407d60:	490d      	ldr	r1, [pc, #52]	; (407d98 <NVIC_SetPriority+0x4c>)
  407d62:	79fb      	ldrb	r3, [r7, #7]
  407d64:	f003 030f 	and.w	r3, r3, #15
  407d68:	3b04      	subs	r3, #4
  407d6a:	683a      	ldr	r2, [r7, #0]
  407d6c:	b2d2      	uxtb	r2, r2
  407d6e:	0112      	lsls	r2, r2, #4
  407d70:	b2d2      	uxtb	r2, r2
  407d72:	440b      	add	r3, r1
  407d74:	761a      	strb	r2, [r3, #24]
  407d76:	e009      	b.n	407d8c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  407d78:	4908      	ldr	r1, [pc, #32]	; (407d9c <NVIC_SetPriority+0x50>)
  407d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407d7e:	683a      	ldr	r2, [r7, #0]
  407d80:	b2d2      	uxtb	r2, r2
  407d82:	0112      	lsls	r2, r2, #4
  407d84:	b2d2      	uxtb	r2, r2
  407d86:	440b      	add	r3, r1
  407d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  407d8c:	370c      	adds	r7, #12
  407d8e:	46bd      	mov	sp, r7
  407d90:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d94:	4770      	bx	lr
  407d96:	bf00      	nop
  407d98:	e000ed00 	.word	0xe000ed00
  407d9c:	e000e100 	.word	0xe000e100

00407da0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  407da0:	b480      	push	{r7}
  407da2:	b083      	sub	sp, #12
  407da4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  407da6:	f3ef 8310 	mrs	r3, PRIMASK
  407daa:	603b      	str	r3, [r7, #0]
  return(result);
  407dac:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  407dae:	2b00      	cmp	r3, #0
  407db0:	bf0c      	ite	eq
  407db2:	2301      	moveq	r3, #1
  407db4:	2300      	movne	r3, #0
  407db6:	b2db      	uxtb	r3, r3
  407db8:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  407dba:	b672      	cpsid	i
  407dbc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  407dc0:	4b04      	ldr	r3, [pc, #16]	; (407dd4 <cpu_irq_save+0x34>)
  407dc2:	2200      	movs	r2, #0
  407dc4:	701a      	strb	r2, [r3, #0]
	return flags;
  407dc6:	687b      	ldr	r3, [r7, #4]
}
  407dc8:	4618      	mov	r0, r3
  407dca:	370c      	adds	r7, #12
  407dcc:	46bd      	mov	sp, r7
  407dce:	f85d 7b04 	ldr.w	r7, [sp], #4
  407dd2:	4770      	bx	lr
  407dd4:	2000013c 	.word	0x2000013c

00407dd8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  407dd8:	b480      	push	{r7}
  407dda:	b083      	sub	sp, #12
  407ddc:	af00      	add	r7, sp, #0
  407dde:	6078      	str	r0, [r7, #4]
	return (flags);
  407de0:	687b      	ldr	r3, [r7, #4]
  407de2:	2b00      	cmp	r3, #0
  407de4:	bf14      	ite	ne
  407de6:	2301      	movne	r3, #1
  407de8:	2300      	moveq	r3, #0
  407dea:	b2db      	uxtb	r3, r3
}
  407dec:	4618      	mov	r0, r3
  407dee:	370c      	adds	r7, #12
  407df0:	46bd      	mov	sp, r7
  407df2:	f85d 7b04 	ldr.w	r7, [sp], #4
  407df6:	4770      	bx	lr

00407df8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  407df8:	b580      	push	{r7, lr}
  407dfa:	b082      	sub	sp, #8
  407dfc:	af00      	add	r7, sp, #0
  407dfe:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  407e00:	6878      	ldr	r0, [r7, #4]
  407e02:	4b07      	ldr	r3, [pc, #28]	; (407e20 <cpu_irq_restore+0x28>)
  407e04:	4798      	blx	r3
  407e06:	4603      	mov	r3, r0
  407e08:	2b00      	cmp	r3, #0
  407e0a:	d005      	beq.n	407e18 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  407e0c:	4b05      	ldr	r3, [pc, #20]	; (407e24 <cpu_irq_restore+0x2c>)
  407e0e:	2201      	movs	r2, #1
  407e10:	701a      	strb	r2, [r3, #0]
  407e12:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  407e16:	b662      	cpsie	i
}
  407e18:	3708      	adds	r7, #8
  407e1a:	46bd      	mov	sp, r7
  407e1c:	bd80      	pop	{r7, pc}
  407e1e:	bf00      	nop
  407e20:	00407dd9 	.word	0x00407dd9
  407e24:	2000013c 	.word	0x2000013c

00407e28 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  407e28:	b580      	push	{r7, lr}
  407e2a:	b084      	sub	sp, #16
  407e2c:	af00      	add	r7, sp, #0
  407e2e:	4603      	mov	r3, r0
  407e30:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  407e32:	79fb      	ldrb	r3, [r7, #7]
  407e34:	4a0a      	ldr	r2, [pc, #40]	; (407e60 <sleepmgr_lock_mode+0x38>)
  407e36:	5cd3      	ldrb	r3, [r2, r3]
  407e38:	2bff      	cmp	r3, #255	; 0xff
  407e3a:	d100      	bne.n	407e3e <sleepmgr_lock_mode+0x16>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
  407e3c:	e7fe      	b.n	407e3c <sleepmgr_lock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
  407e3e:	4b09      	ldr	r3, [pc, #36]	; (407e64 <sleepmgr_lock_mode+0x3c>)
  407e40:	4798      	blx	r3
  407e42:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  407e44:	79fb      	ldrb	r3, [r7, #7]
  407e46:	4a06      	ldr	r2, [pc, #24]	; (407e60 <sleepmgr_lock_mode+0x38>)
  407e48:	5cd2      	ldrb	r2, [r2, r3]
  407e4a:	3201      	adds	r2, #1
  407e4c:	b2d1      	uxtb	r1, r2
  407e4e:	4a04      	ldr	r2, [pc, #16]	; (407e60 <sleepmgr_lock_mode+0x38>)
  407e50:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  407e52:	68f8      	ldr	r0, [r7, #12]
  407e54:	4b04      	ldr	r3, [pc, #16]	; (407e68 <sleepmgr_lock_mode+0x40>)
  407e56:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  407e58:	3710      	adds	r7, #16
  407e5a:	46bd      	mov	sp, r7
  407e5c:	bd80      	pop	{r7, pc}
  407e5e:	bf00      	nop
  407e60:	2001c3fc 	.word	0x2001c3fc
  407e64:	00407da1 	.word	0x00407da1
  407e68:	00407df9 	.word	0x00407df9

00407e6c <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
  407e6c:	b580      	push	{r7, lr}
  407e6e:	b084      	sub	sp, #16
  407e70:	af00      	add	r7, sp, #0
  407e72:	4603      	mov	r3, r0
  407e74:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  407e76:	79fb      	ldrb	r3, [r7, #7]
  407e78:	4a0a      	ldr	r2, [pc, #40]	; (407ea4 <sleepmgr_unlock_mode+0x38>)
  407e7a:	5cd3      	ldrb	r3, [r2, r3]
  407e7c:	2b00      	cmp	r3, #0
  407e7e:	d100      	bne.n	407e82 <sleepmgr_unlock_mode+0x16>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
  407e80:	e7fe      	b.n	407e80 <sleepmgr_unlock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
  407e82:	4b09      	ldr	r3, [pc, #36]	; (407ea8 <sleepmgr_unlock_mode+0x3c>)
  407e84:	4798      	blx	r3
  407e86:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
  407e88:	79fb      	ldrb	r3, [r7, #7]
  407e8a:	4a06      	ldr	r2, [pc, #24]	; (407ea4 <sleepmgr_unlock_mode+0x38>)
  407e8c:	5cd2      	ldrb	r2, [r2, r3]
  407e8e:	3a01      	subs	r2, #1
  407e90:	b2d1      	uxtb	r1, r2
  407e92:	4a04      	ldr	r2, [pc, #16]	; (407ea4 <sleepmgr_unlock_mode+0x38>)
  407e94:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  407e96:	68f8      	ldr	r0, [r7, #12]
  407e98:	4b04      	ldr	r3, [pc, #16]	; (407eac <sleepmgr_unlock_mode+0x40>)
  407e9a:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  407e9c:	3710      	adds	r7, #16
  407e9e:	46bd      	mov	sp, r7
  407ea0:	bd80      	pop	{r7, pc}
  407ea2:	bf00      	nop
  407ea4:	2001c3fc 	.word	0x2001c3fc
  407ea8:	00407da1 	.word	0x00407da1
  407eac:	00407df9 	.word	0x00407df9

00407eb0 <uhd_sleep_mode>:
 * \brief Manages the sleep mode following the UHP state
 *
 * \param new_state  New UHP state
 */
static void uhd_sleep_mode(enum uhd_uhp_state_enum new_state)
{
  407eb0:	b580      	push	{r7, lr}
  407eb2:	b084      	sub	sp, #16
  407eb4:	af00      	add	r7, sp, #0
  407eb6:	4603      	mov	r3, r0
  407eb8:	71fb      	strb	r3, [r7, #7]
	enum sleepmgr_mode sleep_mode[] = {
  407eba:	2300      	movs	r3, #0
  407ebc:	723b      	strb	r3, [r7, #8]
  407ebe:	2300      	movs	r3, #0
  407ec0:	727b      	strb	r3, [r7, #9]
  407ec2:	2300      	movs	r3, #0
  407ec4:	72bb      	strb	r3, [r7, #10]
  407ec6:	2300      	movs	r3, #0
  407ec8:	72fb      	strb	r3, [r7, #11]
  407eca:	2300      	movs	r3, #0
  407ecc:	733b      	strb	r3, [r7, #12]
  407ece:	2300      	movs	r3, #0
  407ed0:	737b      	strb	r3, [r7, #13]
		SLEEPMGR_ACTIVE, // UHD_STATE_IDLE
	};

	static enum uhd_uhp_state_enum uhd_state = UHD_STATE_OFF;

	if (uhd_state == new_state) {
  407ed2:	4b12      	ldr	r3, [pc, #72]	; (407f1c <uhd_sleep_mode+0x6c>)
  407ed4:	781b      	ldrb	r3, [r3, #0]
  407ed6:	79fa      	ldrb	r2, [r7, #7]
  407ed8:	429a      	cmp	r2, r3
  407eda:	d01c      	beq.n	407f16 <uhd_sleep_mode+0x66>
		return; // No change
	}
	if (new_state != UHD_STATE_OFF) {
  407edc:	79fb      	ldrb	r3, [r7, #7]
  407ede:	2b00      	cmp	r3, #0
  407ee0:	d008      	beq.n	407ef4 <uhd_sleep_mode+0x44>
		/* Lock new limit. */
		sleepmgr_lock_mode(sleep_mode[new_state]);
  407ee2:	79fb      	ldrb	r3, [r7, #7]
  407ee4:	f107 0210 	add.w	r2, r7, #16
  407ee8:	4413      	add	r3, r2
  407eea:	f813 3c08 	ldrb.w	r3, [r3, #-8]
  407eee:	4618      	mov	r0, r3
  407ef0:	4b0b      	ldr	r3, [pc, #44]	; (407f20 <uhd_sleep_mode+0x70>)
  407ef2:	4798      	blx	r3
	}
	if (uhd_state != UHD_STATE_OFF) {
  407ef4:	4b09      	ldr	r3, [pc, #36]	; (407f1c <uhd_sleep_mode+0x6c>)
  407ef6:	781b      	ldrb	r3, [r3, #0]
  407ef8:	2b00      	cmp	r3, #0
  407efa:	d009      	beq.n	407f10 <uhd_sleep_mode+0x60>
		/* Unlock old limit. */
		sleepmgr_unlock_mode(sleep_mode[uhd_state]);
  407efc:	4b07      	ldr	r3, [pc, #28]	; (407f1c <uhd_sleep_mode+0x6c>)
  407efe:	781b      	ldrb	r3, [r3, #0]
  407f00:	f107 0210 	add.w	r2, r7, #16
  407f04:	4413      	add	r3, r2
  407f06:	f813 3c08 	ldrb.w	r3, [r3, #-8]
  407f0a:	4618      	mov	r0, r3
  407f0c:	4b05      	ldr	r3, [pc, #20]	; (407f24 <uhd_sleep_mode+0x74>)
  407f0e:	4798      	blx	r3
	}
	uhd_state = new_state;
  407f10:	4a02      	ldr	r2, [pc, #8]	; (407f1c <uhd_sleep_mode+0x6c>)
  407f12:	79fb      	ldrb	r3, [r7, #7]
  407f14:	7013      	strb	r3, [r2, #0]
}
  407f16:	3710      	adds	r7, #16
  407f18:	46bd      	mov	sp, r7
  407f1a:	bd80      	pop	{r7, pc}
  407f1c:	20019dbe 	.word	0x20019dbe
  407f20:	00407e29 	.word	0x00407e29
  407f24:	00407e6d 	.word	0x00407e6d

00407f28 <uhd_transfer_end>:
/**
 * \internal
 * \brief Manages callback in transfer end
 */
static void uhd_transfer_end(void *pointer)
{
  407f28:	b5f0      	push	{r4, r5, r6, r7, lr}
  407f2a:	b08b      	sub	sp, #44	; 0x2c
  407f2c:	af00      	add	r7, sp, #0
  407f2e:	6078      	str	r0, [r7, #4]
	uint32_t completion_code;
	uint32_t i;
	struct ohci_td_general *td_general_header;
	iram_size_t current_buffer_point;

	td_general_header = (struct ohci_td_general *)pointer;
  407f30:	687b      	ldr	r3, [r7, #4]
  407f32:	623b      	str	r3, [r7, #32]

	uint32_t *type = (uint32_t *)pointer;
  407f34:	687b      	ldr	r3, [r7, #4]
  407f36:	61bb      	str	r3, [r7, #24]
	volatile uint32_t callback_type = *type;
  407f38:	69bb      	ldr	r3, [r7, #24]
  407f3a:	681b      	ldr	r3, [r3, #0]
  407f3c:	60fb      	str	r3, [r7, #12]

	if (!(callback_type & 0x80000000)) {
  407f3e:	68fb      	ldr	r3, [r7, #12]
  407f40:	2b00      	cmp	r3, #0
  407f42:	f2c0 8089 	blt.w	408058 <uhd_transfer_end+0x130>
		td_general_header = (struct ohci_td_general *)(callback_type & 0xFFFFFFF0);
  407f46:	68fb      	ldr	r3, [r7, #12]
  407f48:	f023 030f 	bic.w	r3, r3, #15
  407f4c:	623b      	str	r3, [r7, #32]
		while (td_general_header != NULL) {
  407f4e:	e07e      	b.n	40804e <uhd_transfer_end+0x126>
			/* Check if there is free callback resource. */
			for (i = 0; i < 8; i++) {
  407f50:	2300      	movs	r3, #0
  407f52:	627b      	str	r3, [r7, #36]	; 0x24
  407f54:	e00f      	b.n	407f76 <uhd_transfer_end+0x4e>
				if (callback_trans_end_para[i].td_general_header ==
  407f56:	494c      	ldr	r1, [pc, #304]	; (408088 <uhd_transfer_end+0x160>)
  407f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  407f5a:	4613      	mov	r3, r2
  407f5c:	009b      	lsls	r3, r3, #2
  407f5e:	4413      	add	r3, r2
  407f60:	009b      	lsls	r3, r3, #2
  407f62:	440b      	add	r3, r1
  407f64:	3308      	adds	r3, #8
  407f66:	681a      	ldr	r2, [r3, #0]
  407f68:	6a3b      	ldr	r3, [r7, #32]
  407f6a:	429a      	cmp	r2, r3
  407f6c:	d100      	bne.n	407f70 <uhd_transfer_end+0x48>
							td_general_header) {
					break;
  407f6e:	e005      	b.n	407f7c <uhd_transfer_end+0x54>

	if (!(callback_type & 0x80000000)) {
		td_general_header = (struct ohci_td_general *)(callback_type & 0xFFFFFFF0);
		while (td_general_header != NULL) {
			/* Check if there is free callback resource. */
			for (i = 0; i < 8; i++) {
  407f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407f72:	3301      	adds	r3, #1
  407f74:	627b      	str	r3, [r7, #36]	; 0x24
  407f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407f78:	2b07      	cmp	r3, #7
  407f7a:	d9ec      	bls.n	407f56 <uhd_transfer_end+0x2e>
				if (callback_trans_end_para[i].td_general_header ==
							td_general_header) {
					break;
				}
			}
			if (i == 8) {
  407f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407f7e:	2b08      	cmp	r3, #8
  407f80:	d100      	bne.n	407f84 <uhd_transfer_end+0x5c>
				return;
  407f82:	e07e      	b.n	408082 <uhd_transfer_end+0x15a>
			}

			if (callback_trans_end_para[i].callback_trans_end_func != NULL) {
  407f84:	4940      	ldr	r1, [pc, #256]	; (408088 <uhd_transfer_end+0x160>)
  407f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  407f88:	4613      	mov	r3, r2
  407f8a:	009b      	lsls	r3, r3, #2
  407f8c:	4413      	add	r3, r2
  407f8e:	009b      	lsls	r3, r3, #2
  407f90:	440b      	add	r3, r1
  407f92:	3308      	adds	r3, #8
  407f94:	685b      	ldr	r3, [r3, #4]
  407f96:	2b00      	cmp	r3, #0
  407f98:	d056      	beq.n	408048 <uhd_transfer_end+0x120>
				current_buffer_point =
						(iram_size_t)td_general_header->pCurrentBufferPointer;
  407f9a:	6a3b      	ldr	r3, [r7, #32]
  407f9c:	685b      	ldr	r3, [r3, #4]
			if (i == 8) {
				return;
			}

			if (callback_trans_end_para[i].callback_trans_end_func != NULL) {
				current_buffer_point =
  407f9e:	61fb      	str	r3, [r7, #28]
						(iram_size_t)td_general_header->pCurrentBufferPointer;
				if (!current_buffer_point) {
  407fa0:	69fb      	ldr	r3, [r7, #28]
  407fa2:	2b00      	cmp	r3, #0
  407fa4:	d103      	bne.n	407fae <uhd_transfer_end+0x86>
					current_buffer_point =
						(iram_size_t)td_general_header->pBufferEnd + 1;
  407fa6:	6a3b      	ldr	r3, [r7, #32]
  407fa8:	68db      	ldr	r3, [r3, #12]

			if (callback_trans_end_para[i].callback_trans_end_func != NULL) {
				current_buffer_point =
						(iram_size_t)td_general_header->pCurrentBufferPointer;
				if (!current_buffer_point) {
					current_buffer_point =
  407faa:	3301      	adds	r3, #1
  407fac:	61fb      	str	r3, [r7, #28]
						(iram_size_t)td_general_header->pBufferEnd + 1;
				}

				completion_code = (callback_type & 0x0000000F);
  407fae:	68fb      	ldr	r3, [r7, #12]
  407fb0:	f003 030f 	and.w	r3, r3, #15
  407fb4:	617b      	str	r3, [r7, #20]
				if (completion_code == TD_CONDITIONCODE_STALL) {
  407fb6:	697b      	ldr	r3, [r7, #20]
  407fb8:	2b04      	cmp	r3, #4
  407fba:	d10b      	bne.n	407fd4 <uhd_transfer_end+0xac>
					callback_trans_end_para[i].status = UHD_TRANS_STALL;
  407fbc:	4932      	ldr	r1, [pc, #200]	; (408088 <uhd_transfer_end+0x160>)
  407fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  407fc0:	4613      	mov	r3, r2
  407fc2:	009b      	lsls	r3, r3, #2
  407fc4:	4413      	add	r3, r2
  407fc6:	009b      	lsls	r3, r3, #2
  407fc8:	440b      	add	r3, r1
  407fca:	2204      	movs	r2, #4
  407fcc:	709a      	strb	r2, [r3, #2]
					ohci_clear_ed_transfer_status(td_general_header);
  407fce:	6a38      	ldr	r0, [r7, #32]
  407fd0:	4b2e      	ldr	r3, [pc, #184]	; (40808c <uhd_transfer_end+0x164>)
  407fd2:	4798      	blx	r3
				}

				callback_trans_end_para[i].callback_trans_end_func(
  407fd4:	492c      	ldr	r1, [pc, #176]	; (408088 <uhd_transfer_end+0x160>)
  407fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  407fd8:	4613      	mov	r3, r2
  407fda:	009b      	lsls	r3, r3, #2
  407fdc:	4413      	add	r3, r2
  407fde:	009b      	lsls	r3, r3, #2
  407fe0:	440b      	add	r3, r1
  407fe2:	3308      	adds	r3, #8
  407fe4:	685c      	ldr	r4, [r3, #4]
  407fe6:	4928      	ldr	r1, [pc, #160]	; (408088 <uhd_transfer_end+0x160>)
  407fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  407fea:	4613      	mov	r3, r2
  407fec:	009b      	lsls	r3, r3, #2
  407fee:	4413      	add	r3, r2
  407ff0:	009b      	lsls	r3, r3, #2
  407ff2:	440b      	add	r3, r1
  407ff4:	7818      	ldrb	r0, [r3, #0]
  407ff6:	4924      	ldr	r1, [pc, #144]	; (408088 <uhd_transfer_end+0x160>)
  407ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  407ffa:	4613      	mov	r3, r2
  407ffc:	009b      	lsls	r3, r3, #2
  407ffe:	4413      	add	r3, r2
  408000:	009b      	lsls	r3, r3, #2
  408002:	440b      	add	r3, r1
  408004:	785e      	ldrb	r6, [r3, #1]
  408006:	4920      	ldr	r1, [pc, #128]	; (408088 <uhd_transfer_end+0x160>)
  408008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40800a:	4613      	mov	r3, r2
  40800c:	009b      	lsls	r3, r3, #2
  40800e:	4413      	add	r3, r2
  408010:	009b      	lsls	r3, r3, #2
  408012:	440b      	add	r3, r1
  408014:	789d      	ldrb	r5, [r3, #2]
						callback_trans_end_para[i].add,
						callback_trans_end_para[i].ep,
						callback_trans_end_para[i].status,
						(current_buffer_point
						- callback_trans_end_para[i].nb_transfered));
  408016:	491c      	ldr	r1, [pc, #112]	; (408088 <uhd_transfer_end+0x160>)
  408018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40801a:	4613      	mov	r3, r2
  40801c:	009b      	lsls	r3, r3, #2
  40801e:	4413      	add	r3, r2
  408020:	009b      	lsls	r3, r3, #2
  408022:	440b      	add	r3, r1
  408024:	685b      	ldr	r3, [r3, #4]
				if (completion_code == TD_CONDITIONCODE_STALL) {
					callback_trans_end_para[i].status = UHD_TRANS_STALL;
					ohci_clear_ed_transfer_status(td_general_header);
				}

				callback_trans_end_para[i].callback_trans_end_func(
  408026:	69fa      	ldr	r2, [r7, #28]
  408028:	1ad3      	subs	r3, r2, r3
  40802a:	4631      	mov	r1, r6
  40802c:	462a      	mov	r2, r5
  40802e:	47a0      	blx	r4
						callback_trans_end_para[i].ep,
						callback_trans_end_para[i].status,
						(current_buffer_point
						- callback_trans_end_para[i].nb_transfered));

				memset((void *)&callback_trans_end_para[i], 0,
  408030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  408032:	4613      	mov	r3, r2
  408034:	009b      	lsls	r3, r3, #2
  408036:	4413      	add	r3, r2
  408038:	009b      	lsls	r3, r3, #2
  40803a:	4a13      	ldr	r2, [pc, #76]	; (408088 <uhd_transfer_end+0x160>)
  40803c:	4413      	add	r3, r2
  40803e:	4618      	mov	r0, r3
  408040:	2100      	movs	r1, #0
  408042:	2214      	movs	r2, #20
  408044:	4b12      	ldr	r3, [pc, #72]	; (408090 <uhd_transfer_end+0x168>)
  408046:	4798      	blx	r3
						sizeof(callback_trans_end_para[i]));
			}

			td_general_header = td_general_header->p_next_td;
  408048:	6a3b      	ldr	r3, [r7, #32]
  40804a:	689b      	ldr	r3, [r3, #8]
  40804c:	623b      	str	r3, [r7, #32]
	uint32_t *type = (uint32_t *)pointer;
	volatile uint32_t callback_type = *type;

	if (!(callback_type & 0x80000000)) {
		td_general_header = (struct ohci_td_general *)(callback_type & 0xFFFFFFF0);
		while (td_general_header != NULL) {
  40804e:	6a3b      	ldr	r3, [r7, #32]
  408050:	2b00      	cmp	r3, #0
  408052:	f47f af7d 	bne.w	407f50 <uhd_transfer_end+0x28>
  408056:	e014      	b.n	408082 <uhd_transfer_end+0x15a>
						sizeof(callback_trans_end_para[i]));
			}

			td_general_header = td_general_header->p_next_td;
		}
	} else if (callback_type & 0x80000000) {
  408058:	68fb      	ldr	r3, [r7, #12]
  40805a:	2b00      	cmp	r3, #0
  40805c:	da11      	bge.n	408082 <uhd_transfer_end+0x15a>
		if (callback_setup_end_func != NULL) {
  40805e:	4b0d      	ldr	r3, [pc, #52]	; (408094 <uhd_transfer_end+0x16c>)
  408060:	681b      	ldr	r3, [r3, #0]
  408062:	2b00      	cmp	r3, #0
  408064:	d00d      	beq.n	408082 <uhd_transfer_end+0x15a>
			uhd_callback_setup_end_t callback_setup = callback_setup_end_func;
  408066:	4b0b      	ldr	r3, [pc, #44]	; (408094 <uhd_transfer_end+0x16c>)
  408068:	681b      	ldr	r3, [r3, #0]
  40806a:	613b      	str	r3, [r7, #16]
			callback_setup_end_func = NULL;
  40806c:	4b09      	ldr	r3, [pc, #36]	; (408094 <uhd_transfer_end+0x16c>)
  40806e:	2200      	movs	r2, #0
  408070:	601a      	str	r2, [r3, #0]

			callback_setup(callback_setup_end_para.add,
  408072:	4b09      	ldr	r3, [pc, #36]	; (408098 <uhd_transfer_end+0x170>)
  408074:	7818      	ldrb	r0, [r3, #0]
  408076:	4b08      	ldr	r3, [pc, #32]	; (408098 <uhd_transfer_end+0x170>)
  408078:	7859      	ldrb	r1, [r3, #1]
  40807a:	4b07      	ldr	r3, [pc, #28]	; (408098 <uhd_transfer_end+0x170>)
  40807c:	885a      	ldrh	r2, [r3, #2]
  40807e:	693b      	ldr	r3, [r7, #16]
  408080:	4798      	blx	r3
						callback_setup_end_para.status,
						callback_setup_end_para.payload_trans);

		}
	}
}
  408082:	372c      	adds	r7, #44	; 0x2c
  408084:	46bd      	mov	sp, r7
  408086:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408088:	20019d1c 	.word	0x20019d1c
  40808c:	004073f1 	.word	0x004073f1
  408090:	0040a815 	.word	0x0040a815
  408094:	20019d18 	.word	0x20019d18
  408098:	20019d14 	.word	0x20019d14

0040809c <uhd_sof_interrupt>:
 * \brief Manages timeouts and actions based on SOF events
 * - UHC user notification
 * - SOF user notification
 */
static void uhd_sof_interrupt(void *pointer)
{
  40809c:	b580      	push	{r7, lr}
  40809e:	b082      	sub	sp, #8
  4080a0:	af00      	add	r7, sp, #0
  4080a2:	6078      	str	r0, [r7, #4]
	UNUSED(pointer);

	/* Manage a delay to enter in suspend */
	if (uhd_suspend_start) {
  4080a4:	4b18      	ldr	r3, [pc, #96]	; (408108 <uhd_sof_interrupt+0x6c>)
  4080a6:	781b      	ldrb	r3, [r3, #0]
  4080a8:	2b00      	cmp	r3, #0
  4080aa:	d010      	beq.n	4080ce <uhd_sof_interrupt+0x32>
		if (--uhd_suspend_start == 0) {
  4080ac:	4b16      	ldr	r3, [pc, #88]	; (408108 <uhd_sof_interrupt+0x6c>)
  4080ae:	781b      	ldrb	r3, [r3, #0]
  4080b0:	3b01      	subs	r3, #1
  4080b2:	b2da      	uxtb	r2, r3
  4080b4:	4b14      	ldr	r3, [pc, #80]	; (408108 <uhd_sof_interrupt+0x6c>)
  4080b6:	701a      	strb	r2, [r3, #0]
  4080b8:	4b13      	ldr	r3, [pc, #76]	; (408108 <uhd_sof_interrupt+0x6c>)
  4080ba:	781b      	ldrb	r3, [r3, #0]
  4080bc:	2b00      	cmp	r3, #0
  4080be:	d105      	bne.n	4080cc <uhd_sof_interrupt+0x30>
			ohci_bus_suspend();
  4080c0:	4b12      	ldr	r3, [pc, #72]	; (40810c <uhd_sof_interrupt+0x70>)
  4080c2:	4798      	blx	r3
			uhd_sleep_mode(UHD_STATE_SUSPEND);
  4080c4:	2004      	movs	r0, #4
  4080c6:	4b12      	ldr	r3, [pc, #72]	; (408110 <uhd_sof_interrupt+0x74>)
  4080c8:	4798      	blx	r3
		}
		return; // Abort SOF events
  4080ca:	e01a      	b.n	408102 <uhd_sof_interrupt+0x66>
  4080cc:	e019      	b.n	408102 <uhd_sof_interrupt+0x66>
	}

	/* Manage a delay to exit of suspend */
	if (uhd_resume_start) {
  4080ce:	4b11      	ldr	r3, [pc, #68]	; (408114 <uhd_sof_interrupt+0x78>)
  4080d0:	781b      	ldrb	r3, [r3, #0]
  4080d2:	2b00      	cmp	r3, #0
  4080d4:	d010      	beq.n	4080f8 <uhd_sof_interrupt+0x5c>
		if (--uhd_resume_start == 0) {
  4080d6:	4b0f      	ldr	r3, [pc, #60]	; (408114 <uhd_sof_interrupt+0x78>)
  4080d8:	781b      	ldrb	r3, [r3, #0]
  4080da:	3b01      	subs	r3, #1
  4080dc:	b2da      	uxtb	r2, r3
  4080de:	4b0d      	ldr	r3, [pc, #52]	; (408114 <uhd_sof_interrupt+0x78>)
  4080e0:	701a      	strb	r2, [r3, #0]
  4080e2:	4b0c      	ldr	r3, [pc, #48]	; (408114 <uhd_sof_interrupt+0x78>)
  4080e4:	781b      	ldrb	r3, [r3, #0]
  4080e6:	2b00      	cmp	r3, #0
  4080e8:	d105      	bne.n	4080f6 <uhd_sof_interrupt+0x5a>
			// Notify the UHC
			uhc_notify_resume();
  4080ea:	4b0b      	ldr	r3, [pc, #44]	; (408118 <uhd_sof_interrupt+0x7c>)
  4080ec:	4798      	blx	r3
			uhd_sleep_mode(UHD_STATE_IDLE);
  4080ee:	2005      	movs	r0, #5
  4080f0:	4b07      	ldr	r3, [pc, #28]	; (408110 <uhd_sof_interrupt+0x74>)
  4080f2:	4798      	blx	r3
		}
		return; // Abort SOF events
  4080f4:	e005      	b.n	408102 <uhd_sof_interrupt+0x66>
  4080f6:	e004      	b.n	408102 <uhd_sof_interrupt+0x66>
	}	

	/* Notify the UHC. */
	uhc_notify_sof(false);
  4080f8:	2000      	movs	r0, #0
  4080fa:	4b08      	ldr	r3, [pc, #32]	; (40811c <uhd_sof_interrupt+0x80>)
  4080fc:	4798      	blx	r3

	/* Notify the user application. */
	UHC_SOF_EVENT();
  4080fe:	4b08      	ldr	r3, [pc, #32]	; (408120 <uhd_sof_interrupt+0x84>)
  408100:	4798      	blx	r3
}
  408102:	3708      	adds	r7, #8
  408104:	46bd      	mov	sp, r7
  408106:	bd80      	pop	{r7, pc}
  408108:	20019dbc 	.word	0x20019dbc
  40810c:	00406e11 	.word	0x00406e11
  408110:	00407eb1 	.word	0x00407eb1
  408114:	20019dbd 	.word	0x20019dbd
  408118:	00405bad 	.word	0x00405bad
  40811c:	00405b2d 	.word	0x00405b2d
  408120:	00403d69 	.word	0x00403d69

00408124 <uhd_remote_wakeup>:

static void uhd_remote_wakeup(void *pointer)
{
  408124:	b480      	push	{r7}
  408126:	b083      	sub	sp, #12
  408128:	af00      	add	r7, sp, #0
  40812a:	6078      	str	r0, [r7, #4]
	UNUSED(pointer);

	/* Wait 50ms before restarting transfer. */
	uhd_resume_start = 50;
  40812c:	4b03      	ldr	r3, [pc, #12]	; (40813c <uhd_remote_wakeup+0x18>)
  40812e:	2232      	movs	r2, #50	; 0x32
  408130:	701a      	strb	r2, [r3, #0]
}
  408132:	370c      	adds	r7, #12
  408134:	46bd      	mov	sp, r7
  408136:	f85d 7b04 	ldr.w	r7, [sp], #4
  40813a:	4770      	bx	lr
  40813c:	20019dbd 	.word	0x20019dbd

00408140 <uhd_status_change>:

static void uhd_status_change(void *pointer)
{
  408140:	b580      	push	{r7, lr}
  408142:	b084      	sub	sp, #16
  408144:	af00      	add	r7, sp, #0
  408146:	6078      	str	r0, [r7, #4]
	uint32_t *bus_flag;

	bus_flag = (uint32_t *)pointer;
  408148:	687b      	ldr	r3, [r7, #4]
  40814a:	60fb      	str	r3, [r7, #12]

	if (*bus_flag == BUS_CONNECT) {
  40814c:	68fb      	ldr	r3, [r7, #12]
  40814e:	681b      	ldr	r3, [r3, #0]
  408150:	2b00      	cmp	r3, #0
  408152:	d103      	bne.n	40815c <uhd_status_change+0x1c>
		uhc_notify_connection(true);
  408154:	2001      	movs	r0, #1
  408156:	4b0e      	ldr	r3, [pc, #56]	; (408190 <uhd_status_change+0x50>)
  408158:	4798      	blx	r3
  40815a:	e015      	b.n	408188 <uhd_status_change+0x48>
	} else if (*bus_flag == BUS_DISCONNECT) {
  40815c:	68fb      	ldr	r3, [r7, #12]
  40815e:	681b      	ldr	r3, [r3, #0]
  408160:	2b01      	cmp	r3, #1
  408162:	d103      	bne.n	40816c <uhd_status_change+0x2c>
		uhc_notify_connection(false);
  408164:	2000      	movs	r0, #0
  408166:	4b0a      	ldr	r3, [pc, #40]	; (408190 <uhd_status_change+0x50>)
  408168:	4798      	blx	r3
  40816a:	e00d      	b.n	408188 <uhd_status_change+0x48>
	} else if (*bus_flag == BUS_RESET) {
  40816c:	68fb      	ldr	r3, [r7, #12]
  40816e:	681b      	ldr	r3, [r3, #0]
  408170:	2b02      	cmp	r3, #2
  408172:	d109      	bne.n	408188 <uhd_status_change+0x48>
		if (uhd_reset_callback != NULL) {
  408174:	4b07      	ldr	r3, [pc, #28]	; (408194 <uhd_status_change+0x54>)
  408176:	681b      	ldr	r3, [r3, #0]
  408178:	2b00      	cmp	r3, #0
  40817a:	d005      	beq.n	408188 <uhd_status_change+0x48>
			uhd_reset_callback();
  40817c:	4b05      	ldr	r3, [pc, #20]	; (408194 <uhd_status_change+0x54>)
  40817e:	681b      	ldr	r3, [r3, #0]
  408180:	4798      	blx	r3
			uhd_reset_callback = NULL;
  408182:	4b04      	ldr	r3, [pc, #16]	; (408194 <uhd_status_change+0x54>)
  408184:	2200      	movs	r2, #0
  408186:	601a      	str	r2, [r3, #0]
		}
	}
}
  408188:	3710      	adds	r7, #16
  40818a:	46bd      	mov	sp, r7
  40818c:	bd80      	pop	{r7, pc}
  40818e:	bf00      	nop
  408190:	00405af9 	.word	0x00405af9
  408194:	20019d10 	.word	0x20019d10

00408198 <uhd_enable>:

void uhd_enable(void)
{
  408198:	b580      	push	{r7, lr}
  40819a:	b082      	sub	sp, #8
  40819c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	uhd_suspend_start = 0;
  40819e:	4b19      	ldr	r3, [pc, #100]	; (408204 <uhd_enable+0x6c>)
  4081a0:	2200      	movs	r2, #0
  4081a2:	701a      	strb	r2, [r3, #0]
	uhd_resume_start = 0;
  4081a4:	4b18      	ldr	r3, [pc, #96]	; (408208 <uhd_enable+0x70>)
  4081a6:	2200      	movs	r2, #0
  4081a8:	701a      	strb	r2, [r3, #0]

	uhd_sleep_mode(UHD_STATE_DISCONNECT);
  4081aa:	2003      	movs	r0, #3
  4081ac:	4b17      	ldr	r3, [pc, #92]	; (40820c <uhd_enable+0x74>)
  4081ae:	4798      	blx	r3

#if SAMG55
	matrix_set_usb_host();
  4081b0:	4b17      	ldr	r3, [pc, #92]	; (408210 <uhd_enable+0x78>)
  4081b2:	4798      	blx	r3
#endif

	/* Enable USB hardware clock. */
	sysclk_enable_usb();
  4081b4:	4b17      	ldr	r3, [pc, #92]	; (408214 <uhd_enable+0x7c>)
  4081b6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_UHP);
  4081b8:	202f      	movs	r0, #47	; 0x2f
  4081ba:	4b17      	ldr	r3, [pc, #92]	; (408218 <uhd_enable+0x80>)
  4081bc:	4798      	blx	r3

	/**
	 * Always authorize asynchronous USB interrupts to exit of sleep mode
	 * For SAMG55 USB wake up device except BACKUP mode.
	 */
	NVIC_SetPriority((IRQn_Type)ID_UHP, UHD_USB_INT_LEVEL);
  4081be:	202f      	movs	r0, #47	; 0x2f
  4081c0:	2105      	movs	r1, #5
  4081c2:	4b16      	ldr	r3, [pc, #88]	; (40821c <uhd_enable+0x84>)
  4081c4:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)ID_UHP);
  4081c6:	202f      	movs	r0, #47	; 0x2f
  4081c8:	4b15      	ldr	r3, [pc, #84]	; (408220 <uhd_enable+0x88>)
  4081ca:	4798      	blx	r3
//	pmc_set_fast_startup_input(PMC_FSMR_USBAL);

	/* To avoid USB interrupt before end of initialization. */
	flags = cpu_irq_save();
  4081cc:	4b15      	ldr	r3, [pc, #84]	; (408224 <uhd_enable+0x8c>)
  4081ce:	4798      	blx	r3
  4081d0:	6078      	str	r0, [r7, #4]

	ohci_init();
  4081d2:	4b15      	ldr	r3, [pc, #84]	; (408228 <uhd_enable+0x90>)
  4081d4:	4798      	blx	r3
	ohci_register_callback(OHCI_INTERRUPT_WDH, (void *)uhd_transfer_end);
  4081d6:	2001      	movs	r0, #1
  4081d8:	4914      	ldr	r1, [pc, #80]	; (40822c <uhd_enable+0x94>)
  4081da:	4b15      	ldr	r3, [pc, #84]	; (408230 <uhd_enable+0x98>)
  4081dc:	4798      	blx	r3
	ohci_register_callback(OHCI_INTERRUPT_SF, (void *)uhd_sof_interrupt);
  4081de:	2002      	movs	r0, #2
  4081e0:	4914      	ldr	r1, [pc, #80]	; (408234 <uhd_enable+0x9c>)
  4081e2:	4b13      	ldr	r3, [pc, #76]	; (408230 <uhd_enable+0x98>)
  4081e4:	4798      	blx	r3
	ohci_register_callback(OHCI_INTERRUPT_RD, (void *)uhd_remote_wakeup);
  4081e6:	2003      	movs	r0, #3
  4081e8:	4913      	ldr	r1, [pc, #76]	; (408238 <uhd_enable+0xa0>)
  4081ea:	4b11      	ldr	r3, [pc, #68]	; (408230 <uhd_enable+0x98>)
  4081ec:	4798      	blx	r3
	ohci_register_callback(OHCI_INTERRUPT_RHSC, (void *)uhd_status_change);
  4081ee:	2006      	movs	r0, #6
  4081f0:	4912      	ldr	r1, [pc, #72]	; (40823c <uhd_enable+0xa4>)
  4081f2:	4b0f      	ldr	r3, [pc, #60]	; (408230 <uhd_enable+0x98>)
  4081f4:	4798      	blx	r3

	cpu_irq_restore(flags);
  4081f6:	6878      	ldr	r0, [r7, #4]
  4081f8:	4b11      	ldr	r3, [pc, #68]	; (408240 <uhd_enable+0xa8>)
  4081fa:	4798      	blx	r3
}
  4081fc:	3708      	adds	r7, #8
  4081fe:	46bd      	mov	sp, r7
  408200:	bd80      	pop	{r7, pc}
  408202:	bf00      	nop
  408204:	20019dbc 	.word	0x20019dbc
  408208:	20019dbd 	.word	0x20019dbd
  40820c:	00407eb1 	.word	0x00407eb1
  408210:	004061e9 	.word	0x004061e9
  408214:	00404141 	.word	0x00404141
  408218:	00406841 	.word	0x00406841
  40821c:	00407d4d 	.word	0x00407d4d
  408220:	00407d1d 	.word	0x00407d1d
  408224:	00407da1 	.word	0x00407da1
  408228:	00406a81 	.word	0x00406a81
  40822c:	00407f29 	.word	0x00407f29
  408230:	00407b51 	.word	0x00407b51
  408234:	0040809d 	.word	0x0040809d
  408238:	00408125 	.word	0x00408125
  40823c:	00408141 	.word	0x00408141
  408240:	00407df9 	.word	0x00407df9

00408244 <uhd_get_speed>:
	uhd_sleep_mode(UHD_STATE_OFF);

}

uhd_speed_t uhd_get_speed(void)
{
  408244:	b580      	push	{r7, lr}
  408246:	af00      	add	r7, sp, #0
	switch (ohci_get_device_speed()) {
  408248:	4b07      	ldr	r3, [pc, #28]	; (408268 <uhd_get_speed+0x24>)
  40824a:	4798      	blx	r3
  40824c:	4603      	mov	r3, r0
  40824e:	2b00      	cmp	r3, #0
  408250:	d002      	beq.n	408258 <uhd_get_speed+0x14>
  408252:	2b01      	cmp	r3, #1
  408254:	d002      	beq.n	40825c <uhd_get_speed+0x18>
  408256:	e003      	b.n	408260 <uhd_get_speed+0x1c>

	case 0:
		return UHD_SPEED_FULL;
  408258:	2301      	movs	r3, #1
  40825a:	e002      	b.n	408262 <uhd_get_speed+0x1e>

	case 1:
		return UHD_SPEED_LOW;
  40825c:	2300      	movs	r3, #0
  40825e:	e000      	b.n	408262 <uhd_get_speed+0x1e>

	default:
		Assert(false);
		return UHD_SPEED_LOW;
  408260:	2300      	movs	r3, #0
	}
}
  408262:	4618      	mov	r0, r3
  408264:	bd80      	pop	{r7, pc}
  408266:	bf00      	nop
  408268:	00406d39 	.word	0x00406d39

0040826c <uhd_get_frame_number>:

uint16_t uhd_get_frame_number(void)
{
  40826c:	b580      	push	{r7, lr}
  40826e:	af00      	add	r7, sp, #0
	return ohci_get_frame_number();
  408270:	4b02      	ldr	r3, [pc, #8]	; (40827c <uhd_get_frame_number+0x10>)
  408272:	4798      	blx	r3
  408274:	4603      	mov	r3, r0
}
  408276:	4618      	mov	r0, r3
  408278:	bd80      	pop	{r7, pc}
  40827a:	bf00      	nop
  40827c:	00406d5d 	.word	0x00406d5d

00408280 <uhd_get_microframe_number>:

uint16_t uhd_get_microframe_number(void)
{
  408280:	b480      	push	{r7}
  408282:	af00      	add	r7, sp, #0
	return 0; // Not supported
  408284:	2300      	movs	r3, #0
}
  408286:	4618      	mov	r0, r3
  408288:	46bd      	mov	sp, r7
  40828a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40828e:	4770      	bx	lr

00408290 <uhd_send_reset>:

void uhd_send_reset(uhd_callback_reset_t callback)
{
  408290:	b580      	push	{r7, lr}
  408292:	b082      	sub	sp, #8
  408294:	af00      	add	r7, sp, #0
  408296:	6078      	str	r0, [r7, #4]
	uhd_reset_callback = callback;
  408298:	4a03      	ldr	r2, [pc, #12]	; (4082a8 <uhd_send_reset+0x18>)
  40829a:	687b      	ldr	r3, [r7, #4]
  40829c:	6013      	str	r3, [r2, #0]
	ohci_bus_reset();
  40829e:	4b03      	ldr	r3, [pc, #12]	; (4082ac <uhd_send_reset+0x1c>)
  4082a0:	4798      	blx	r3
}
  4082a2:	3708      	adds	r7, #8
  4082a4:	46bd      	mov	sp, r7
  4082a6:	bd80      	pop	{r7, pc}
  4082a8:	20019d10 	.word	0x20019d10
  4082ac:	00406d79 	.word	0x00406d79

004082b0 <uhd_suspend>:

void uhd_suspend(void)
{
  4082b0:	b480      	push	{r7}
  4082b2:	af00      	add	r7, sp, #0
	/* Wait three SOFs before entering in suspend state. */
	uhd_suspend_start = 3;
  4082b4:	4b03      	ldr	r3, [pc, #12]	; (4082c4 <uhd_suspend+0x14>)
  4082b6:	2203      	movs	r2, #3
  4082b8:	701a      	strb	r2, [r3, #0]
}
  4082ba:	46bd      	mov	sp, r7
  4082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4082c0:	4770      	bx	lr
  4082c2:	bf00      	nop
  4082c4:	20019dbc 	.word	0x20019dbc

004082c8 <uhd_ep0_alloc>:
	/* Wait 50ms before restarting transfer. */
	uhd_resume_start = 50;
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
  4082c8:	b580      	push	{r7, lr}
  4082ca:	b084      	sub	sp, #16
  4082cc:	af00      	add	r7, sp, #0
  4082ce:	4603      	mov	r3, r0
  4082d0:	460a      	mov	r2, r1
  4082d2:	71fb      	strb	r3, [r7, #7]
  4082d4:	4613      	mov	r3, r2
  4082d6:	71bb      	strb	r3, [r7, #6]
	ed_info_t ed_info_temp;

	if (ep_size < 8) {
  4082d8:	79bb      	ldrb	r3, [r7, #6]
  4082da:	2b07      	cmp	r3, #7
  4082dc:	d801      	bhi.n	4082e2 <uhd_ep0_alloc+0x1a>
		return false;
  4082de:	2300      	movs	r3, #0
  4082e0:	e02d      	b.n	40833e <uhd_ep0_alloc+0x76>
	}

	ed_info_temp.ed_info_s.bFunctionAddress = add;             // device address
  4082e2:	79fb      	ldrb	r3, [r7, #7]
  4082e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4082e8:	b2da      	uxtb	r2, r3
  4082ea:	7b3b      	ldrb	r3, [r7, #12]
  4082ec:	f362 0306 	bfi	r3, r2, #0, #7
  4082f0:	733b      	strb	r3, [r7, #12]
	ed_info_temp.ed_info_s.bEndpointNumber = 0;                // endpoint 0
  4082f2:	89bb      	ldrh	r3, [r7, #12]
  4082f4:	f36f 13ca 	bfc	r3, #7, #4
  4082f8:	81bb      	strh	r3, [r7, #12]
	ed_info_temp.ed_info_s.bDirection = 0;                     // in TD
  4082fa:	7b7b      	ldrb	r3, [r7, #13]
  4082fc:	f36f 03c4 	bfc	r3, #3, #2
  408300:	737b      	strb	r3, [r7, #13]
	ed_info_temp.ed_info_s.bSpeed = ohci_get_device_speed();   // speed
  408302:	4b11      	ldr	r3, [pc, #68]	; (408348 <uhd_ep0_alloc+0x80>)
  408304:	4798      	blx	r3
  408306:	4603      	mov	r3, r0
  408308:	461a      	mov	r2, r3
  40830a:	7b7b      	ldrb	r3, [r7, #13]
  40830c:	f362 1345 	bfi	r3, r2, #5, #1
  408310:	737b      	strb	r3, [r7, #13]
	ed_info_temp.ed_info_s.bSkip = 0;                          // no skip
  408312:	7b7b      	ldrb	r3, [r7, #13]
  408314:	f36f 1386 	bfc	r3, #6, #1
  408318:	737b      	strb	r3, [r7, #13]
	ed_info_temp.ed_info_s.bFormat = 0;                        // General TD
  40831a:	7b7b      	ldrb	r3, [r7, #13]
  40831c:	f36f 13c7 	bfc	r3, #7, #1
  408320:	737b      	strb	r3, [r7, #13]
	ed_info_temp.ed_info_s.bMaximumPacketSize = ep_size;       // max packet size
  408322:	79bb      	ldrb	r3, [r7, #6]
  408324:	f3c3 030a 	ubfx	r3, r3, #0, #11
  408328:	b29a      	uxth	r2, r3
  40832a:	89fb      	ldrh	r3, [r7, #14]
  40832c:	f362 030a 	bfi	r3, r2, #0, #11
  408330:	81fb      	strh	r3, [r7, #14]

	ohci_add_ed_control(&ed_info_temp);
  408332:	f107 030c 	add.w	r3, r7, #12
  408336:	4618      	mov	r0, r3
  408338:	4b04      	ldr	r3, [pc, #16]	; (40834c <uhd_ep0_alloc+0x84>)
  40833a:	4798      	blx	r3

	return true;
  40833c:	2301      	movs	r3, #1
}
  40833e:	4618      	mov	r0, r3
  408340:	3710      	adds	r7, #16
  408342:	46bd      	mov	sp, r7
  408344:	bd80      	pop	{r7, pc}
  408346:	bf00      	nop
  408348:	00406d39 	.word	0x00406d39
  40834c:	00406f31 	.word	0x00406f31

00408350 <uhd_ep_alloc>:

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
{
  408350:	b580      	push	{r7, lr}
  408352:	b084      	sub	sp, #16
  408354:	af00      	add	r7, sp, #0
  408356:	4603      	mov	r3, r0
  408358:	6039      	str	r1, [r7, #0]
  40835a:	71fb      	strb	r3, [r7, #7]
	ed_info_t ed_info_temp;
	bool return_value;
	uint8_t ep_type;
	uint8_t ep_dir;

	ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
  40835c:	683b      	ldr	r3, [r7, #0]
  40835e:	78db      	ldrb	r3, [r3, #3]
  408360:	f003 0303 	and.w	r3, r3, #3
  408364:	737b      	strb	r3, [r7, #13]
	if (ep_desc->bEndpointAddress & USB_EP_DIR_IN) {
  408366:	683b      	ldr	r3, [r7, #0]
  408368:	789b      	ldrb	r3, [r3, #2]
  40836a:	b2db      	uxtb	r3, r3
  40836c:	b25b      	sxtb	r3, r3
  40836e:	2b00      	cmp	r3, #0
  408370:	da02      	bge.n	408378 <uhd_ep_alloc+0x28>
		ep_dir = 2;
  408372:	2302      	movs	r3, #2
  408374:	73bb      	strb	r3, [r7, #14]
  408376:	e001      	b.n	40837c <uhd_ep_alloc+0x2c>
	} else {
		ep_dir = 1;
  408378:	2301      	movs	r3, #1
  40837a:	73bb      	strb	r3, [r7, #14]
	}

	ed_info_temp.ed_info_s.bFunctionAddress = add;			   // device address=UHC_DEVICE_ENUM_ADD=1
  40837c:	79fb      	ldrb	r3, [r7, #7]
  40837e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  408382:	b2da      	uxtb	r2, r3
  408384:	7a3b      	ldrb	r3, [r7, #8]
  408386:	f362 0306 	bfi	r3, r2, #0, #7
  40838a:	723b      	strb	r3, [r7, #8]
	ed_info_temp.ed_info_s.bEndpointNumber = ep_desc->bEndpointAddress; // endpoint number
  40838c:	683b      	ldr	r3, [r7, #0]
  40838e:	789b      	ldrb	r3, [r3, #2]
  408390:	f003 030f 	and.w	r3, r3, #15
  408394:	b2da      	uxtb	r2, r3
  408396:	893b      	ldrh	r3, [r7, #8]
  408398:	f362 13ca 	bfi	r3, r2, #7, #4
  40839c:	813b      	strh	r3, [r7, #8]
	ed_info_temp.ed_info_s.bDirection = ep_dir;				   // Set direction
  40839e:	7bbb      	ldrb	r3, [r7, #14]
  4083a0:	f003 0303 	and.w	r3, r3, #3
  4083a4:	b2da      	uxtb	r2, r3
  4083a6:	7a7b      	ldrb	r3, [r7, #9]
  4083a8:	f362 03c4 	bfi	r3, r2, #3, #2
  4083ac:	727b      	strb	r3, [r7, #9]
	ed_info_temp.ed_info_s.bSpeed = ohci_get_device_speed();   // speed
  4083ae:	4b22      	ldr	r3, [pc, #136]	; (408438 <uhd_ep_alloc+0xe8>)
  4083b0:	4798      	blx	r3
  4083b2:	4603      	mov	r3, r0
  4083b4:	461a      	mov	r2, r3
  4083b6:	7a7b      	ldrb	r3, [r7, #9]
  4083b8:	f362 1345 	bfi	r3, r2, #5, #1
  4083bc:	727b      	strb	r3, [r7, #9]
	ed_info_temp.ed_info_s.bSkip = 0;						   // no skip
  4083be:	7a7b      	ldrb	r3, [r7, #9]
  4083c0:	f36f 1386 	bfc	r3, #6, #1
  4083c4:	727b      	strb	r3, [r7, #9]
	ed_info_temp.ed_info_s.bFormat = 0; 					   // General TD
  4083c6:	7a7b      	ldrb	r3, [r7, #9]
  4083c8:	f36f 13c7 	bfc	r3, #7, #1
  4083cc:	727b      	strb	r3, [r7, #9]
	ed_info_temp.ed_info_s.bMaximumPacketSize = ep_desc->wMaxPacketSize;  // max packet size
  4083ce:	683b      	ldr	r3, [r7, #0]
  4083d0:	889b      	ldrh	r3, [r3, #4]
  4083d2:	b29b      	uxth	r3, r3
  4083d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4083d8:	b29a      	uxth	r2, r3
  4083da:	897b      	ldrh	r3, [r7, #10]
  4083dc:	f362 030a 	bfi	r3, r2, #0, #11
  4083e0:	817b      	strh	r3, [r7, #10]

	switch(ep_type) {
  4083e2:	7b7b      	ldrb	r3, [r7, #13]
  4083e4:	2b02      	cmp	r3, #2
  4083e6:	d017      	beq.n	408418 <uhd_ep_alloc+0xc8>
  4083e8:	2b03      	cmp	r3, #3
  4083ea:	d00d      	beq.n	408408 <uhd_ep_alloc+0xb8>
  4083ec:	2b01      	cmp	r3, #1
  4083ee:	d11b      	bne.n	408428 <uhd_ep_alloc+0xd8>
	case USB_EP_TYPE_ISOCHRONOUS:
		ed_info_temp.ed_info_s.bFormat = 1;                // ISO TD
  4083f0:	7a7b      	ldrb	r3, [r7, #9]
  4083f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4083f6:	727b      	strb	r3, [r7, #9]
		return_value = ohci_add_ed_period(&ed_info_temp);
  4083f8:	f107 0308 	add.w	r3, r7, #8
  4083fc:	4618      	mov	r0, r3
  4083fe:	4b0f      	ldr	r3, [pc, #60]	; (40843c <uhd_ep_alloc+0xec>)
  408400:	4798      	blx	r3
  408402:	4603      	mov	r3, r0
  408404:	73fb      	strb	r3, [r7, #15]
		break;
  408406:	e011      	b.n	40842c <uhd_ep_alloc+0xdc>
	case USB_EP_TYPE_INTERRUPT:
		return_value = ohci_add_ed_period(&ed_info_temp);
  408408:	f107 0308 	add.w	r3, r7, #8
  40840c:	4618      	mov	r0, r3
  40840e:	4b0b      	ldr	r3, [pc, #44]	; (40843c <uhd_ep_alloc+0xec>)
  408410:	4798      	blx	r3
  408412:	4603      	mov	r3, r0
  408414:	73fb      	strb	r3, [r7, #15]
		break;
  408416:	e009      	b.n	40842c <uhd_ep_alloc+0xdc>
	case USB_EP_TYPE_BULK:
		return_value = ohci_add_ed_bulk(&ed_info_temp);
  408418:	f107 0308 	add.w	r3, r7, #8
  40841c:	4618      	mov	r0, r3
  40841e:	4b08      	ldr	r3, [pc, #32]	; (408440 <uhd_ep_alloc+0xf0>)
  408420:	4798      	blx	r3
  408422:	4603      	mov	r3, r0
  408424:	73fb      	strb	r3, [r7, #15]
		break;
  408426:	e001      	b.n	40842c <uhd_ep_alloc+0xdc>
	default:
		Assert(false);
		return false;
  408428:	2300      	movs	r3, #0
  40842a:	e000      	b.n	40842e <uhd_ep_alloc+0xde>
	}

	return return_value;
  40842c:	7bfb      	ldrb	r3, [r7, #15]
}
  40842e:	4618      	mov	r0, r3
  408430:	3710      	adds	r7, #16
  408432:	46bd      	mov	sp, r7
  408434:	bd80      	pop	{r7, pc}
  408436:	bf00      	nop
  408438:	00406d39 	.word	0x00406d39
  40843c:	00407049 	.word	0x00407049
  408440:	00406f65 	.word	0x00406f65

00408444 <uhd_ep_free>:


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
  408444:	b580      	push	{r7, lr}
  408446:	b082      	sub	sp, #8
  408448:	af00      	add	r7, sp, #0
  40844a:	4603      	mov	r3, r0
  40844c:	460a      	mov	r2, r1
  40844e:	71fb      	strb	r3, [r7, #7]
  408450:	4613      	mov	r3, r2
  408452:	71bb      	strb	r3, [r7, #6]
	UNUSED(add);

	ohci_remove_ed(endp);
  408454:	79bb      	ldrb	r3, [r7, #6]
  408456:	4618      	mov	r0, r3
  408458:	4b02      	ldr	r3, [pc, #8]	; (408464 <uhd_ep_free+0x20>)
  40845a:	4798      	blx	r3
}
  40845c:	3708      	adds	r7, #8
  40845e:	46bd      	mov	sp, r7
  408460:	bd80      	pop	{r7, pc}
  408462:	bf00      	nop
  408464:	00407211 	.word	0x00407211

00408468 <uhd_setup_request>:
		usb_setup_req_t *req,
		uint8_t *payload,
		uint16_t payload_size,
		uhd_callback_setup_run_t callback_run,
		uhd_callback_setup_end_t callback_end)
{
  408468:	b580      	push	{r7, lr}
  40846a:	b086      	sub	sp, #24
  40846c:	af00      	add	r7, sp, #0
  40846e:	60b9      	str	r1, [r7, #8]
  408470:	607a      	str	r2, [r7, #4]
  408472:	461a      	mov	r2, r3
  408474:	4603      	mov	r3, r0
  408476:	73fb      	strb	r3, [r7, #15]
  408478:	4613      	mov	r3, r2
  40847a:	81bb      	strh	r3, [r7, #12]
	UNUSED(callback_run);

	bool return_value;

	irqflags_t flags;
	flags = cpu_irq_save();
  40847c:	4b47      	ldr	r3, [pc, #284]	; (40859c <uhd_setup_request+0x134>)
  40847e:	4798      	blx	r3
  408480:	6178      	str	r0, [r7, #20]

	/* Add setup TD. */
	return_value = ohci_add_td_control(TD_PID_SETUP, (uint8_t *)req, sizeof(usb_setup_req_t));
  408482:	2000      	movs	r0, #0
  408484:	68b9      	ldr	r1, [r7, #8]
  408486:	2208      	movs	r2, #8
  408488:	4b45      	ldr	r3, [pc, #276]	; (4085a0 <uhd_setup_request+0x138>)
  40848a:	4798      	blx	r3
  40848c:	4603      	mov	r3, r0
  40848e:	74fb      	strb	r3, [r7, #19]
	if (return_value == false) {
  408490:	7cfb      	ldrb	r3, [r7, #19]
  408492:	f083 0301 	eor.w	r3, r3, #1
  408496:	b2db      	uxtb	r3, r3
  408498:	2b00      	cmp	r3, #0
  40849a:	d004      	beq.n	4084a6 <uhd_setup_request+0x3e>
		cpu_irq_restore(flags);
  40849c:	6978      	ldr	r0, [r7, #20]
  40849e:	4b41      	ldr	r3, [pc, #260]	; (4085a4 <uhd_setup_request+0x13c>)
  4084a0:	4798      	blx	r3
		return false;
  4084a2:	2300      	movs	r3, #0
  4084a4:	e076      	b.n	408594 <uhd_setup_request+0x12c>
	}

	if ((req->bmRequestType & USB_REQ_DIR_MASK) == USB_REQ_DIR_IN) {
  4084a6:	68bb      	ldr	r3, [r7, #8]
  4084a8:	781b      	ldrb	r3, [r3, #0]
  4084aa:	b2db      	uxtb	r3, r3
  4084ac:	b25b      	sxtb	r3, r3
  4084ae:	2b00      	cmp	r3, #0
  4084b0:	da24      	bge.n	4084fc <uhd_setup_request+0x94>
		/* Add in TD. */
		return_value = ohci_add_td_control(TD_PID_IN, payload, payload_size);
  4084b2:	89bb      	ldrh	r3, [r7, #12]
  4084b4:	2002      	movs	r0, #2
  4084b6:	6879      	ldr	r1, [r7, #4]
  4084b8:	461a      	mov	r2, r3
  4084ba:	4b39      	ldr	r3, [pc, #228]	; (4085a0 <uhd_setup_request+0x138>)
  4084bc:	4798      	blx	r3
  4084be:	4603      	mov	r3, r0
  4084c0:	74fb      	strb	r3, [r7, #19]
		if (return_value == false) {
  4084c2:	7cfb      	ldrb	r3, [r7, #19]
  4084c4:	f083 0301 	eor.w	r3, r3, #1
  4084c8:	b2db      	uxtb	r3, r3
  4084ca:	2b00      	cmp	r3, #0
  4084cc:	d004      	beq.n	4084d8 <uhd_setup_request+0x70>
			cpu_irq_restore(flags);
  4084ce:	6978      	ldr	r0, [r7, #20]
  4084d0:	4b34      	ldr	r3, [pc, #208]	; (4085a4 <uhd_setup_request+0x13c>)
  4084d2:	4798      	blx	r3
			return false;
  4084d4:	2300      	movs	r3, #0
  4084d6:	e05d      	b.n	408594 <uhd_setup_request+0x12c>
		}

		/* Add out TD. */
		return_value = ohci_add_td_control(TD_PID_OUT, payload, 0);
  4084d8:	2001      	movs	r0, #1
  4084da:	6879      	ldr	r1, [r7, #4]
  4084dc:	2200      	movs	r2, #0
  4084de:	4b30      	ldr	r3, [pc, #192]	; (4085a0 <uhd_setup_request+0x138>)
  4084e0:	4798      	blx	r3
  4084e2:	4603      	mov	r3, r0
  4084e4:	74fb      	strb	r3, [r7, #19]
		if (return_value == false) {
  4084e6:	7cfb      	ldrb	r3, [r7, #19]
  4084e8:	f083 0301 	eor.w	r3, r3, #1
  4084ec:	b2db      	uxtb	r3, r3
  4084ee:	2b00      	cmp	r3, #0
  4084f0:	d040      	beq.n	408574 <uhd_setup_request+0x10c>
			cpu_irq_restore(flags);
  4084f2:	6978      	ldr	r0, [r7, #20]
  4084f4:	4b2b      	ldr	r3, [pc, #172]	; (4085a4 <uhd_setup_request+0x13c>)
  4084f6:	4798      	blx	r3
			return false;
  4084f8:	2300      	movs	r3, #0
  4084fa:	e04b      	b.n	408594 <uhd_setup_request+0x12c>
		}
	} else {
		if (req->wLength) {
  4084fc:	68bb      	ldr	r3, [r7, #8]
  4084fe:	88db      	ldrh	r3, [r3, #6]
  408500:	b29b      	uxth	r3, r3
  408502:	2b00      	cmp	r3, #0
  408504:	d024      	beq.n	408550 <uhd_setup_request+0xe8>
			/* Add out TD. */
			return_value = ohci_add_td_control(TD_PID_OUT, payload, payload_size);
  408506:	89bb      	ldrh	r3, [r7, #12]
  408508:	2001      	movs	r0, #1
  40850a:	6879      	ldr	r1, [r7, #4]
  40850c:	461a      	mov	r2, r3
  40850e:	4b24      	ldr	r3, [pc, #144]	; (4085a0 <uhd_setup_request+0x138>)
  408510:	4798      	blx	r3
  408512:	4603      	mov	r3, r0
  408514:	74fb      	strb	r3, [r7, #19]
			if (return_value == false) {
  408516:	7cfb      	ldrb	r3, [r7, #19]
  408518:	f083 0301 	eor.w	r3, r3, #1
  40851c:	b2db      	uxtb	r3, r3
  40851e:	2b00      	cmp	r3, #0
  408520:	d004      	beq.n	40852c <uhd_setup_request+0xc4>
				cpu_irq_restore(flags);
  408522:	6978      	ldr	r0, [r7, #20]
  408524:	4b1f      	ldr	r3, [pc, #124]	; (4085a4 <uhd_setup_request+0x13c>)
  408526:	4798      	blx	r3
				return false;
  408528:	2300      	movs	r3, #0
  40852a:	e033      	b.n	408594 <uhd_setup_request+0x12c>
			}

			/* Add in TD. */
			return_value = ohci_add_td_control(TD_PID_IN, payload, 0);
  40852c:	2002      	movs	r0, #2
  40852e:	6879      	ldr	r1, [r7, #4]
  408530:	2200      	movs	r2, #0
  408532:	4b1b      	ldr	r3, [pc, #108]	; (4085a0 <uhd_setup_request+0x138>)
  408534:	4798      	blx	r3
  408536:	4603      	mov	r3, r0
  408538:	74fb      	strb	r3, [r7, #19]
			if (return_value == false) {
  40853a:	7cfb      	ldrb	r3, [r7, #19]
  40853c:	f083 0301 	eor.w	r3, r3, #1
  408540:	b2db      	uxtb	r3, r3
  408542:	2b00      	cmp	r3, #0
  408544:	d016      	beq.n	408574 <uhd_setup_request+0x10c>
				cpu_irq_restore(flags);
  408546:	6978      	ldr	r0, [r7, #20]
  408548:	4b16      	ldr	r3, [pc, #88]	; (4085a4 <uhd_setup_request+0x13c>)
  40854a:	4798      	blx	r3
				return false;
  40854c:	2300      	movs	r3, #0
  40854e:	e021      	b.n	408594 <uhd_setup_request+0x12c>
			}
		} else {
			/* No DATA phase */
			return_value = ohci_add_td_control(TD_PID_IN, payload, 0);
  408550:	2002      	movs	r0, #2
  408552:	6879      	ldr	r1, [r7, #4]
  408554:	2200      	movs	r2, #0
  408556:	4b12      	ldr	r3, [pc, #72]	; (4085a0 <uhd_setup_request+0x138>)
  408558:	4798      	blx	r3
  40855a:	4603      	mov	r3, r0
  40855c:	74fb      	strb	r3, [r7, #19]
			if (return_value == false) {
  40855e:	7cfb      	ldrb	r3, [r7, #19]
  408560:	f083 0301 	eor.w	r3, r3, #1
  408564:	b2db      	uxtb	r3, r3
  408566:	2b00      	cmp	r3, #0
  408568:	d004      	beq.n	408574 <uhd_setup_request+0x10c>
				cpu_irq_restore(flags);
  40856a:	6978      	ldr	r0, [r7, #20]
  40856c:	4b0d      	ldr	r3, [pc, #52]	; (4085a4 <uhd_setup_request+0x13c>)
  40856e:	4798      	blx	r3
				return false;
  408570:	2300      	movs	r3, #0
  408572:	e00f      	b.n	408594 <uhd_setup_request+0x12c>
			}
		}
	}

	callback_setup_end_para.add = add;
  408574:	4a0c      	ldr	r2, [pc, #48]	; (4085a8 <uhd_setup_request+0x140>)
  408576:	7bfb      	ldrb	r3, [r7, #15]
  408578:	7013      	strb	r3, [r2, #0]
	callback_setup_end_para.status = UHD_TRANS_NOERROR;
  40857a:	4b0b      	ldr	r3, [pc, #44]	; (4085a8 <uhd_setup_request+0x140>)
  40857c:	2200      	movs	r2, #0
  40857e:	705a      	strb	r2, [r3, #1]
	callback_setup_end_para.payload_trans = payload_size;
  408580:	4a09      	ldr	r2, [pc, #36]	; (4085a8 <uhd_setup_request+0x140>)
  408582:	89bb      	ldrh	r3, [r7, #12]
  408584:	8053      	strh	r3, [r2, #2]
	callback_setup_end_func = callback_end;
  408586:	4a09      	ldr	r2, [pc, #36]	; (4085ac <uhd_setup_request+0x144>)
  408588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40858a:	6013      	str	r3, [r2, #0]

	cpu_irq_restore(flags);
  40858c:	6978      	ldr	r0, [r7, #20]
  40858e:	4b05      	ldr	r3, [pc, #20]	; (4085a4 <uhd_setup_request+0x13c>)
  408590:	4798      	blx	r3

	return true;
  408592:	2301      	movs	r3, #1
}
  408594:	4618      	mov	r0, r3
  408596:	3718      	adds	r7, #24
  408598:	46bd      	mov	sp, r7
  40859a:	bd80      	pop	{r7, pc}
  40859c:	00407da1 	.word	0x00407da1
  4085a0:	0040750d 	.word	0x0040750d
  4085a4:	00407df9 	.word	0x00407df9
  4085a8:	20019d14 	.word	0x20019d14
  4085ac:	20019d18 	.word	0x20019d18

004085b0 <uhd_ep_run>:
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
  4085b0:	b590      	push	{r4, r7, lr}
  4085b2:	b087      	sub	sp, #28
  4085b4:	af00      	add	r7, sp, #0
  4085b6:	603b      	str	r3, [r7, #0]
  4085b8:	4603      	mov	r3, r0
  4085ba:	71fb      	strb	r3, [r7, #7]
  4085bc:	460b      	mov	r3, r1
  4085be:	71bb      	strb	r3, [r7, #6]
  4085c0:	4613      	mov	r3, r2
  4085c2:	717b      	strb	r3, [r7, #5]
	UNUSED(b_shortpacket);
	UNUSED(timeout);

	uint32_t i;
	bool return_value = true;
  4085c4:	2301      	movs	r3, #1
  4085c6:	74fb      	strb	r3, [r7, #19]

	/* Check if there is free callback resource. */
	for (i = 0; i < 8; i++) {
  4085c8:	2300      	movs	r3, #0
  4085ca:	617b      	str	r3, [r7, #20]
  4085cc:	e01d      	b.n	40860a <uhd_ep_run+0x5a>
		if (!callback_trans_end_para[i].flag) {
  4085ce:	4942      	ldr	r1, [pc, #264]	; (4086d8 <uhd_ep_run+0x128>)
  4085d0:	697a      	ldr	r2, [r7, #20]
  4085d2:	4613      	mov	r3, r2
  4085d4:	009b      	lsls	r3, r3, #2
  4085d6:	4413      	add	r3, r2
  4085d8:	009b      	lsls	r3, r3, #2
  4085da:	440b      	add	r3, r1
  4085dc:	3310      	adds	r3, #16
  4085de:	781b      	ldrb	r3, [r3, #0]
  4085e0:	f083 0301 	eor.w	r3, r3, #1
  4085e4:	b2db      	uxtb	r3, r3
  4085e6:	2b00      	cmp	r3, #0
  4085e8:	d00c      	beq.n	408604 <uhd_ep_run+0x54>
			memset((void *)&callback_trans_end_para[i], 0,
  4085ea:	697a      	ldr	r2, [r7, #20]
  4085ec:	4613      	mov	r3, r2
  4085ee:	009b      	lsls	r3, r3, #2
  4085f0:	4413      	add	r3, r2
  4085f2:	009b      	lsls	r3, r3, #2
  4085f4:	4a38      	ldr	r2, [pc, #224]	; (4086d8 <uhd_ep_run+0x128>)
  4085f6:	4413      	add	r3, r2
  4085f8:	4618      	mov	r0, r3
  4085fa:	2100      	movs	r1, #0
  4085fc:	2214      	movs	r2, #20
  4085fe:	4b37      	ldr	r3, [pc, #220]	; (4086dc <uhd_ep_run+0x12c>)
  408600:	4798      	blx	r3
					sizeof(callback_trans_end_para[i]));
			break;
  408602:	e005      	b.n	408610 <uhd_ep_run+0x60>

	uint32_t i;
	bool return_value = true;

	/* Check if there is free callback resource. */
	for (i = 0; i < 8; i++) {
  408604:	697b      	ldr	r3, [r7, #20]
  408606:	3301      	adds	r3, #1
  408608:	617b      	str	r3, [r7, #20]
  40860a:	697b      	ldr	r3, [r7, #20]
  40860c:	2b07      	cmp	r3, #7
  40860e:	d9de      	bls.n	4085ce <uhd_ep_run+0x1e>
			memset((void *)&callback_trans_end_para[i], 0,
					sizeof(callback_trans_end_para[i]));
			break;
		}
	}
	if (i == 8) {
  408610:	697b      	ldr	r3, [r7, #20]
  408612:	2b08      	cmp	r3, #8
  408614:	d101      	bne.n	40861a <uhd_ep_run+0x6a>
		return false;
  408616:	2300      	movs	r3, #0
  408618:	e059      	b.n	4086ce <uhd_ep_run+0x11e>
	}

	irqflags_t flags;

	flags = cpu_irq_save();
  40861a:	4b31      	ldr	r3, [pc, #196]	; (4086e0 <uhd_ep_run+0x130>)
  40861c:	4798      	blx	r3
  40861e:	60f8      	str	r0, [r7, #12]

	return_value = ohci_add_td_non_control(endp, buf, buf_size,
  408620:	697a      	ldr	r2, [r7, #20]
  408622:	4613      	mov	r3, r2
  408624:	009b      	lsls	r3, r3, #2
  408626:	4413      	add	r3, r2
  408628:	009b      	lsls	r3, r3, #2
  40862a:	3308      	adds	r3, #8
  40862c:	4a2a      	ldr	r2, [pc, #168]	; (4086d8 <uhd_ep_run+0x128>)
  40862e:	4413      	add	r3, r2
  408630:	79ba      	ldrb	r2, [r7, #6]
  408632:	4610      	mov	r0, r2
  408634:	6839      	ldr	r1, [r7, #0]
  408636:	6aba      	ldr	r2, [r7, #40]	; 0x28
  408638:	4c2a      	ldr	r4, [pc, #168]	; (4086e4 <uhd_ep_run+0x134>)
  40863a:	47a0      	blx	r4
  40863c:	4603      	mov	r3, r0
  40863e:	74fb      	strb	r3, [r7, #19]
			&callback_trans_end_para[i].td_general_header);
	if (return_value == false) {
  408640:	7cfb      	ldrb	r3, [r7, #19]
  408642:	f083 0301 	eor.w	r3, r3, #1
  408646:	b2db      	uxtb	r3, r3
  408648:	2b00      	cmp	r3, #0
  40864a:	d004      	beq.n	408656 <uhd_ep_run+0xa6>
		cpu_irq_restore(flags);
  40864c:	68f8      	ldr	r0, [r7, #12]
  40864e:	4b26      	ldr	r3, [pc, #152]	; (4086e8 <uhd_ep_run+0x138>)
  408650:	4798      	blx	r3
		return false;
  408652:	2300      	movs	r3, #0
  408654:	e03b      	b.n	4086ce <uhd_ep_run+0x11e>
	}

	callback_trans_end_para[i].add = add;
  408656:	4920      	ldr	r1, [pc, #128]	; (4086d8 <uhd_ep_run+0x128>)
  408658:	697a      	ldr	r2, [r7, #20]
  40865a:	4613      	mov	r3, r2
  40865c:	009b      	lsls	r3, r3, #2
  40865e:	4413      	add	r3, r2
  408660:	009b      	lsls	r3, r3, #2
  408662:	440b      	add	r3, r1
  408664:	79fa      	ldrb	r2, [r7, #7]
  408666:	701a      	strb	r2, [r3, #0]
	callback_trans_end_para[i].ep = endp;
  408668:	491b      	ldr	r1, [pc, #108]	; (4086d8 <uhd_ep_run+0x128>)
  40866a:	697a      	ldr	r2, [r7, #20]
  40866c:	4613      	mov	r3, r2
  40866e:	009b      	lsls	r3, r3, #2
  408670:	4413      	add	r3, r2
  408672:	009b      	lsls	r3, r3, #2
  408674:	440b      	add	r3, r1
  408676:	79ba      	ldrb	r2, [r7, #6]
  408678:	705a      	strb	r2, [r3, #1]
	callback_trans_end_para[i].status = UHD_TRANS_NOERROR;
  40867a:	4917      	ldr	r1, [pc, #92]	; (4086d8 <uhd_ep_run+0x128>)
  40867c:	697a      	ldr	r2, [r7, #20]
  40867e:	4613      	mov	r3, r2
  408680:	009b      	lsls	r3, r3, #2
  408682:	4413      	add	r3, r2
  408684:	009b      	lsls	r3, r3, #2
  408686:	440b      	add	r3, r1
  408688:	2200      	movs	r2, #0
  40868a:	709a      	strb	r2, [r3, #2]
	callback_trans_end_para[i].nb_transfered = (iram_size_t)buf;
  40868c:	6839      	ldr	r1, [r7, #0]
  40868e:	4812      	ldr	r0, [pc, #72]	; (4086d8 <uhd_ep_run+0x128>)
  408690:	697a      	ldr	r2, [r7, #20]
  408692:	4613      	mov	r3, r2
  408694:	009b      	lsls	r3, r3, #2
  408696:	4413      	add	r3, r2
  408698:	009b      	lsls	r3, r3, #2
  40869a:	4403      	add	r3, r0
  40869c:	6059      	str	r1, [r3, #4]
	callback_trans_end_para[i].callback_trans_end_func = callback;
  40869e:	490e      	ldr	r1, [pc, #56]	; (4086d8 <uhd_ep_run+0x128>)
  4086a0:	697a      	ldr	r2, [r7, #20]
  4086a2:	4613      	mov	r3, r2
  4086a4:	009b      	lsls	r3, r3, #2
  4086a6:	4413      	add	r3, r2
  4086a8:	009b      	lsls	r3, r3, #2
  4086aa:	440b      	add	r3, r1
  4086ac:	3308      	adds	r3, #8
  4086ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4086b0:	605a      	str	r2, [r3, #4]
	callback_trans_end_para[i].flag = 1;
  4086b2:	4909      	ldr	r1, [pc, #36]	; (4086d8 <uhd_ep_run+0x128>)
  4086b4:	697a      	ldr	r2, [r7, #20]
  4086b6:	4613      	mov	r3, r2
  4086b8:	009b      	lsls	r3, r3, #2
  4086ba:	4413      	add	r3, r2
  4086bc:	009b      	lsls	r3, r3, #2
  4086be:	440b      	add	r3, r1
  4086c0:	3310      	adds	r3, #16
  4086c2:	2201      	movs	r2, #1
  4086c4:	701a      	strb	r2, [r3, #0]

	cpu_irq_restore(flags);
  4086c6:	68f8      	ldr	r0, [r7, #12]
  4086c8:	4b07      	ldr	r3, [pc, #28]	; (4086e8 <uhd_ep_run+0x138>)
  4086ca:	4798      	blx	r3

	return true;
  4086cc:	2301      	movs	r3, #1
}
  4086ce:	4618      	mov	r0, r3
  4086d0:	371c      	adds	r7, #28
  4086d2:	46bd      	mov	sp, r7
  4086d4:	bd90      	pop	{r4, r7, pc}
  4086d6:	bf00      	nop
  4086d8:	20019d1c 	.word	0x20019d1c
  4086dc:	0040a815 	.word	0x0040a815
  4086e0:	00407da1 	.word	0x00407da1
  4086e4:	00407635 	.word	0x00407635
  4086e8:	00407df9 	.word	0x00407df9

004086ec <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4086ec:	b480      	push	{r7}
  4086ee:	b089      	sub	sp, #36	; 0x24
  4086f0:	af00      	add	r7, sp, #0
  4086f2:	60f8      	str	r0, [r7, #12]
  4086f4:	60b9      	str	r1, [r7, #8]
  4086f6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4086f8:	68bb      	ldr	r3, [r7, #8]
  4086fa:	011a      	lsls	r2, r3, #4
  4086fc:	687b      	ldr	r3, [r7, #4]
  4086fe:	429a      	cmp	r2, r3
  408700:	d802      	bhi.n	408708 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  408702:	2310      	movs	r3, #16
  408704:	61fb      	str	r3, [r7, #28]
  408706:	e001      	b.n	40870c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  408708:	2308      	movs	r3, #8
  40870a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40870c:	687b      	ldr	r3, [r7, #4]
  40870e:	00da      	lsls	r2, r3, #3
  408710:	69fb      	ldr	r3, [r7, #28]
  408712:	68b9      	ldr	r1, [r7, #8]
  408714:	fb01 f303 	mul.w	r3, r1, r3
  408718:	085b      	lsrs	r3, r3, #1
  40871a:	441a      	add	r2, r3
  40871c:	69fb      	ldr	r3, [r7, #28]
  40871e:	68b9      	ldr	r1, [r7, #8]
  408720:	fb01 f303 	mul.w	r3, r1, r3
  408724:	fbb2 f3f3 	udiv	r3, r2, r3
  408728:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40872a:	69bb      	ldr	r3, [r7, #24]
  40872c:	08db      	lsrs	r3, r3, #3
  40872e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  408730:	69bb      	ldr	r3, [r7, #24]
  408732:	f003 0307 	and.w	r3, r3, #7
  408736:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  408738:	697b      	ldr	r3, [r7, #20]
  40873a:	2b00      	cmp	r3, #0
  40873c:	d003      	beq.n	408746 <usart_set_async_baudrate+0x5a>
  40873e:	697b      	ldr	r3, [r7, #20]
  408740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  408744:	d301      	bcc.n	40874a <usart_set_async_baudrate+0x5e>
		return 1;
  408746:	2301      	movs	r3, #1
  408748:	e00f      	b.n	40876a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40874a:	69fb      	ldr	r3, [r7, #28]
  40874c:	2b08      	cmp	r3, #8
  40874e:	d105      	bne.n	40875c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  408750:	68fb      	ldr	r3, [r7, #12]
  408752:	685b      	ldr	r3, [r3, #4]
  408754:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  408758:	68fb      	ldr	r3, [r7, #12]
  40875a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40875c:	693b      	ldr	r3, [r7, #16]
  40875e:	041a      	lsls	r2, r3, #16
  408760:	697b      	ldr	r3, [r7, #20]
  408762:	431a      	orrs	r2, r3
  408764:	68fb      	ldr	r3, [r7, #12]
  408766:	621a      	str	r2, [r3, #32]

	return 0;
  408768:	2300      	movs	r3, #0
}
  40876a:	4618      	mov	r0, r3
  40876c:	3724      	adds	r7, #36	; 0x24
  40876e:	46bd      	mov	sp, r7
  408770:	f85d 7b04 	ldr.w	r7, [sp], #4
  408774:	4770      	bx	lr
  408776:	bf00      	nop

00408778 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  408778:	b580      	push	{r7, lr}
  40877a:	b082      	sub	sp, #8
  40877c:	af00      	add	r7, sp, #0
  40877e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  408780:	6878      	ldr	r0, [r7, #4]
  408782:	4b0d      	ldr	r3, [pc, #52]	; (4087b8 <usart_reset+0x40>)
  408784:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  408786:	687b      	ldr	r3, [r7, #4]
  408788:	2200      	movs	r2, #0
  40878a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  40878c:	687b      	ldr	r3, [r7, #4]
  40878e:	2200      	movs	r2, #0
  408790:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  408792:	687b      	ldr	r3, [r7, #4]
  408794:	2200      	movs	r2, #0
  408796:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  408798:	6878      	ldr	r0, [r7, #4]
  40879a:	4b08      	ldr	r3, [pc, #32]	; (4087bc <usart_reset+0x44>)
  40879c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40879e:	6878      	ldr	r0, [r7, #4]
  4087a0:	4b07      	ldr	r3, [pc, #28]	; (4087c0 <usart_reset+0x48>)
  4087a2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4087a4:	6878      	ldr	r0, [r7, #4]
  4087a6:	4b07      	ldr	r3, [pc, #28]	; (4087c4 <usart_reset+0x4c>)
  4087a8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4087aa:	6878      	ldr	r0, [r7, #4]
  4087ac:	4b06      	ldr	r3, [pc, #24]	; (4087c8 <usart_reset+0x50>)
  4087ae:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4087b0:	3708      	adds	r7, #8
  4087b2:	46bd      	mov	sp, r7
  4087b4:	bd80      	pop	{r7, pc}
  4087b6:	bf00      	nop
  4087b8:	00408b25 	.word	0x00408b25
  4087bc:	004088c1 	.word	0x004088c1
  4087c0:	004088f1 	.word	0x004088f1
  4087c4:	0040898d 	.word	0x0040898d
  4087c8:	004089c5 	.word	0x004089c5

004087cc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4087cc:	b580      	push	{r7, lr}
  4087ce:	b084      	sub	sp, #16
  4087d0:	af00      	add	r7, sp, #0
  4087d2:	60f8      	str	r0, [r7, #12]
  4087d4:	60b9      	str	r1, [r7, #8]
  4087d6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4087d8:	68f8      	ldr	r0, [r7, #12]
  4087da:	4b1a      	ldr	r3, [pc, #104]	; (408844 <usart_init_rs232+0x78>)
  4087dc:	4798      	blx	r3

	ul_reg_val = 0;
  4087de:	4b1a      	ldr	r3, [pc, #104]	; (408848 <usart_init_rs232+0x7c>)
  4087e0:	2200      	movs	r2, #0
  4087e2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4087e4:	68bb      	ldr	r3, [r7, #8]
  4087e6:	2b00      	cmp	r3, #0
  4087e8:	d009      	beq.n	4087fe <usart_init_rs232+0x32>
  4087ea:	68bb      	ldr	r3, [r7, #8]
  4087ec:	681b      	ldr	r3, [r3, #0]
  4087ee:	68f8      	ldr	r0, [r7, #12]
  4087f0:	4619      	mov	r1, r3
  4087f2:	687a      	ldr	r2, [r7, #4]
  4087f4:	4b15      	ldr	r3, [pc, #84]	; (40884c <usart_init_rs232+0x80>)
  4087f6:	4798      	blx	r3
  4087f8:	4603      	mov	r3, r0
  4087fa:	2b00      	cmp	r3, #0
  4087fc:	d001      	beq.n	408802 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4087fe:	2301      	movs	r3, #1
  408800:	e01b      	b.n	40883a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  408802:	68bb      	ldr	r3, [r7, #8]
  408804:	685a      	ldr	r2, [r3, #4]
  408806:	68bb      	ldr	r3, [r7, #8]
  408808:	689b      	ldr	r3, [r3, #8]
  40880a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40880c:	68bb      	ldr	r3, [r7, #8]
  40880e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  408810:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  408812:	68bb      	ldr	r3, [r7, #8]
  408814:	68db      	ldr	r3, [r3, #12]
  408816:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  408818:	4b0b      	ldr	r3, [pc, #44]	; (408848 <usart_init_rs232+0x7c>)
  40881a:	681b      	ldr	r3, [r3, #0]
  40881c:	4313      	orrs	r3, r2
  40881e:	4a0a      	ldr	r2, [pc, #40]	; (408848 <usart_init_rs232+0x7c>)
  408820:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  408822:	4b09      	ldr	r3, [pc, #36]	; (408848 <usart_init_rs232+0x7c>)
  408824:	681b      	ldr	r3, [r3, #0]
  408826:	4a08      	ldr	r2, [pc, #32]	; (408848 <usart_init_rs232+0x7c>)
  408828:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40882a:	68fb      	ldr	r3, [r7, #12]
  40882c:	685a      	ldr	r2, [r3, #4]
  40882e:	4b06      	ldr	r3, [pc, #24]	; (408848 <usart_init_rs232+0x7c>)
  408830:	681b      	ldr	r3, [r3, #0]
  408832:	431a      	orrs	r2, r3
  408834:	68fb      	ldr	r3, [r7, #12]
  408836:	605a      	str	r2, [r3, #4]

	return 0;
  408838:	2300      	movs	r3, #0
}
  40883a:	4618      	mov	r0, r3
  40883c:	3710      	adds	r7, #16
  40883e:	46bd      	mov	sp, r7
  408840:	bd80      	pop	{r7, pc}
  408842:	bf00      	nop
  408844:	00408779 	.word	0x00408779
  408848:	20019dc0 	.word	0x20019dc0
  40884c:	004086ed 	.word	0x004086ed

00408850 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  408850:	b580      	push	{r7, lr}
  408852:	b084      	sub	sp, #16
  408854:	af00      	add	r7, sp, #0
  408856:	60f8      	str	r0, [r7, #12]
  408858:	60b9      	str	r1, [r7, #8]
  40885a:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  40885c:	68f8      	ldr	r0, [r7, #12]
  40885e:	68b9      	ldr	r1, [r7, #8]
  408860:	687a      	ldr	r2, [r7, #4]
  408862:	4b0a      	ldr	r3, [pc, #40]	; (40888c <usart_init_hw_handshaking+0x3c>)
  408864:	4798      	blx	r3
  408866:	4603      	mov	r3, r0
  408868:	2b00      	cmp	r3, #0
  40886a:	d001      	beq.n	408870 <usart_init_hw_handshaking+0x20>
		return 1;
  40886c:	2301      	movs	r3, #1
  40886e:	e008      	b.n	408882 <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  408870:	68fb      	ldr	r3, [r7, #12]
  408872:	685b      	ldr	r3, [r3, #4]
  408874:	f023 030f 	bic.w	r3, r3, #15
  408878:	f043 0202 	orr.w	r2, r3, #2
  40887c:	68fb      	ldr	r3, [r7, #12]
  40887e:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  408880:	2300      	movs	r3, #0
}
  408882:	4618      	mov	r0, r3
  408884:	3710      	adds	r7, #16
  408886:	46bd      	mov	sp, r7
  408888:	bd80      	pop	{r7, pc}
  40888a:	bf00      	nop
  40888c:	004087cd 	.word	0x004087cd

00408890 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  408890:	b480      	push	{r7}
  408892:	b083      	sub	sp, #12
  408894:	af00      	add	r7, sp, #0
  408896:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  408898:	687b      	ldr	r3, [r7, #4]
  40889a:	2240      	movs	r2, #64	; 0x40
  40889c:	601a      	str	r2, [r3, #0]
}
  40889e:	370c      	adds	r7, #12
  4088a0:	46bd      	mov	sp, r7
  4088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4088a6:	4770      	bx	lr

004088a8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  4088a8:	b480      	push	{r7}
  4088aa:	b083      	sub	sp, #12
  4088ac:	af00      	add	r7, sp, #0
  4088ae:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  4088b0:	687b      	ldr	r3, [r7, #4]
  4088b2:	2280      	movs	r2, #128	; 0x80
  4088b4:	601a      	str	r2, [r3, #0]
}
  4088b6:	370c      	adds	r7, #12
  4088b8:	46bd      	mov	sp, r7
  4088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4088be:	4770      	bx	lr

004088c0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4088c0:	b480      	push	{r7}
  4088c2:	b083      	sub	sp, #12
  4088c4:	af00      	add	r7, sp, #0
  4088c6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4088c8:	687b      	ldr	r3, [r7, #4]
  4088ca:	2288      	movs	r2, #136	; 0x88
  4088cc:	601a      	str	r2, [r3, #0]
}
  4088ce:	370c      	adds	r7, #12
  4088d0:	46bd      	mov	sp, r7
  4088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4088d6:	4770      	bx	lr

004088d8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4088d8:	b480      	push	{r7}
  4088da:	b083      	sub	sp, #12
  4088dc:	af00      	add	r7, sp, #0
  4088de:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4088e0:	687b      	ldr	r3, [r7, #4]
  4088e2:	2210      	movs	r2, #16
  4088e4:	601a      	str	r2, [r3, #0]
}
  4088e6:	370c      	adds	r7, #12
  4088e8:	46bd      	mov	sp, r7
  4088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4088ee:	4770      	bx	lr

004088f0 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4088f0:	b480      	push	{r7}
  4088f2:	b083      	sub	sp, #12
  4088f4:	af00      	add	r7, sp, #0
  4088f6:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4088f8:	687b      	ldr	r3, [r7, #4]
  4088fa:	2224      	movs	r2, #36	; 0x24
  4088fc:	601a      	str	r2, [r3, #0]
}
  4088fe:	370c      	adds	r7, #12
  408900:	46bd      	mov	sp, r7
  408902:	f85d 7b04 	ldr.w	r7, [sp], #4
  408906:	4770      	bx	lr

00408908 <usart_set_rx_timeout>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param timeout The value of receive timeout.
 */
void usart_set_rx_timeout(Usart *p_usart, uint32_t timeout)
{
  408908:	b480      	push	{r7}
  40890a:	b083      	sub	sp, #12
  40890c:	af00      	add	r7, sp, #0
  40890e:	6078      	str	r0, [r7, #4]
  408910:	6039      	str	r1, [r7, #0]
	p_usart->US_RTOR = timeout;
  408912:	687b      	ldr	r3, [r7, #4]
  408914:	683a      	ldr	r2, [r7, #0]
  408916:	625a      	str	r2, [r3, #36]	; 0x24
}
  408918:	370c      	adds	r7, #12
  40891a:	46bd      	mov	sp, r7
  40891c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408920:	4770      	bx	lr
  408922:	bf00      	nop

00408924 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  408924:	b480      	push	{r7}
  408926:	b083      	sub	sp, #12
  408928:	af00      	add	r7, sp, #0
  40892a:	6078      	str	r0, [r7, #4]
  40892c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40892e:	687b      	ldr	r3, [r7, #4]
  408930:	683a      	ldr	r2, [r7, #0]
  408932:	609a      	str	r2, [r3, #8]
}
  408934:	370c      	adds	r7, #12
  408936:	46bd      	mov	sp, r7
  408938:	f85d 7b04 	ldr.w	r7, [sp], #4
  40893c:	4770      	bx	lr
  40893e:	bf00      	nop

00408940 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  408940:	b480      	push	{r7}
  408942:	b083      	sub	sp, #12
  408944:	af00      	add	r7, sp, #0
  408946:	6078      	str	r0, [r7, #4]
  408948:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40894a:	687b      	ldr	r3, [r7, #4]
  40894c:	683a      	ldr	r2, [r7, #0]
  40894e:	60da      	str	r2, [r3, #12]
}
  408950:	370c      	adds	r7, #12
  408952:	46bd      	mov	sp, r7
  408954:	f85d 7b04 	ldr.w	r7, [sp], #4
  408958:	4770      	bx	lr
  40895a:	bf00      	nop

0040895c <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
  40895c:	b480      	push	{r7}
  40895e:	b083      	sub	sp, #12
  408960:	af00      	add	r7, sp, #0
  408962:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
  408964:	687b      	ldr	r3, [r7, #4]
  408966:	691b      	ldr	r3, [r3, #16]
}
  408968:	4618      	mov	r0, r3
  40896a:	370c      	adds	r7, #12
  40896c:	46bd      	mov	sp, r7
  40896e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408972:	4770      	bx	lr

00408974 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  408974:	b480      	push	{r7}
  408976:	b083      	sub	sp, #12
  408978:	af00      	add	r7, sp, #0
  40897a:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  40897c:	687b      	ldr	r3, [r7, #4]
  40897e:	695b      	ldr	r3, [r3, #20]
}
  408980:	4618      	mov	r0, r3
  408982:	370c      	adds	r7, #12
  408984:	46bd      	mov	sp, r7
  408986:	f85d 7b04 	ldr.w	r7, [sp], #4
  40898a:	4770      	bx	lr

0040898c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  40898c:	b480      	push	{r7}
  40898e:	b083      	sub	sp, #12
  408990:	af00      	add	r7, sp, #0
  408992:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  408994:	687b      	ldr	r3, [r7, #4]
  408996:	f44f 7280 	mov.w	r2, #256	; 0x100
  40899a:	601a      	str	r2, [r3, #0]
}
  40899c:	370c      	adds	r7, #12
  40899e:	46bd      	mov	sp, r7
  4089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4089a4:	4770      	bx	lr
  4089a6:	bf00      	nop

004089a8 <usart_start_rx_timeout>:
 * Reset the status bit TIMEOUT in US_CSR.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_start_rx_timeout(Usart *p_usart)
{
  4089a8:	b480      	push	{r7}
  4089aa:	b083      	sub	sp, #12
  4089ac:	af00      	add	r7, sp, #0
  4089ae:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_STTTO;
  4089b0:	687b      	ldr	r3, [r7, #4]
  4089b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4089b6:	601a      	str	r2, [r3, #0]
}
  4089b8:	370c      	adds	r7, #12
  4089ba:	46bd      	mov	sp, r7
  4089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4089c0:	4770      	bx	lr
  4089c2:	bf00      	nop

004089c4 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4089c4:	b480      	push	{r7}
  4089c6:	b083      	sub	sp, #12
  4089c8:	af00      	add	r7, sp, #0
  4089ca:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4089cc:	687b      	ldr	r3, [r7, #4]
  4089ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4089d2:	601a      	str	r2, [r3, #0]
}
  4089d4:	370c      	adds	r7, #12
  4089d6:	46bd      	mov	sp, r7
  4089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4089dc:	4770      	bx	lr
  4089de:	bf00      	nop

004089e0 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4089e0:	b480      	push	{r7}
  4089e2:	b083      	sub	sp, #12
  4089e4:	af00      	add	r7, sp, #0
  4089e6:	6078      	str	r0, [r7, #4]
  4089e8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4089ea:	687b      	ldr	r3, [r7, #4]
  4089ec:	695b      	ldr	r3, [r3, #20]
  4089ee:	f003 0302 	and.w	r3, r3, #2
  4089f2:	2b00      	cmp	r3, #0
  4089f4:	d101      	bne.n	4089fa <usart_write+0x1a>
		return 1;
  4089f6:	2301      	movs	r3, #1
  4089f8:	e005      	b.n	408a06 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4089fa:	683b      	ldr	r3, [r7, #0]
  4089fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
  408a00:	687b      	ldr	r3, [r7, #4]
  408a02:	61da      	str	r2, [r3, #28]
	return 0;
  408a04:	2300      	movs	r3, #0
}
  408a06:	4618      	mov	r0, r3
  408a08:	370c      	adds	r7, #12
  408a0a:	46bd      	mov	sp, r7
  408a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a10:	4770      	bx	lr
  408a12:	bf00      	nop

00408a14 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  408a14:	b480      	push	{r7}
  408a16:	b083      	sub	sp, #12
  408a18:	af00      	add	r7, sp, #0
  408a1a:	6078      	str	r0, [r7, #4]
  408a1c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  408a1e:	687b      	ldr	r3, [r7, #4]
  408a20:	695b      	ldr	r3, [r3, #20]
  408a22:	f003 0301 	and.w	r3, r3, #1
  408a26:	2b00      	cmp	r3, #0
  408a28:	d101      	bne.n	408a2e <usart_read+0x1a>
		return 1;
  408a2a:	2301      	movs	r3, #1
  408a2c:	e006      	b.n	408a3c <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  408a2e:	687b      	ldr	r3, [r7, #4]
  408a30:	699b      	ldr	r3, [r3, #24]
  408a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
  408a36:	683b      	ldr	r3, [r7, #0]
  408a38:	601a      	str	r2, [r3, #0]

	return 0;
  408a3a:	2300      	movs	r3, #0
}
  408a3c:	4618      	mov	r0, r3
  408a3e:	370c      	adds	r7, #12
  408a40:	46bd      	mov	sp, r7
  408a42:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a46:	4770      	bx	lr

00408a48 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  408a48:	b480      	push	{r7}
  408a4a:	b085      	sub	sp, #20
  408a4c:	af00      	add	r7, sp, #0
  408a4e:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  408a50:	2300      	movs	r3, #0
  408a52:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  408a54:	687b      	ldr	r3, [r7, #4]
  408a56:	4a23      	ldr	r2, [pc, #140]	; (408ae4 <usart_get_pdc_base+0x9c>)
  408a58:	4293      	cmp	r3, r2
  408a5a:	d103      	bne.n	408a64 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  408a5c:	4b22      	ldr	r3, [pc, #136]	; (408ae8 <usart_get_pdc_base+0xa0>)
  408a5e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  408a60:	68fb      	ldr	r3, [r7, #12]
  408a62:	e038      	b.n	408ad6 <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  408a64:	687b      	ldr	r3, [r7, #4]
  408a66:	4a21      	ldr	r2, [pc, #132]	; (408aec <usart_get_pdc_base+0xa4>)
  408a68:	4293      	cmp	r3, r2
  408a6a:	d103      	bne.n	408a74 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  408a6c:	4b20      	ldr	r3, [pc, #128]	; (408af0 <usart_get_pdc_base+0xa8>)
  408a6e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  408a70:	68fb      	ldr	r3, [r7, #12]
  408a72:	e030      	b.n	408ad6 <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
  408a74:	687b      	ldr	r3, [r7, #4]
  408a76:	4a1f      	ldr	r2, [pc, #124]	; (408af4 <usart_get_pdc_base+0xac>)
  408a78:	4293      	cmp	r3, r2
  408a7a:	d103      	bne.n	408a84 <usart_get_pdc_base+0x3c>
		p_pdc_base = PDC_USART2;
  408a7c:	4b1e      	ldr	r3, [pc, #120]	; (408af8 <usart_get_pdc_base+0xb0>)
  408a7e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  408a80:	68fb      	ldr	r3, [r7, #12]
  408a82:	e028      	b.n	408ad6 <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART3
	else if (p_usart == USART3) {
  408a84:	687b      	ldr	r3, [r7, #4]
  408a86:	4a1d      	ldr	r2, [pc, #116]	; (408afc <usart_get_pdc_base+0xb4>)
  408a88:	4293      	cmp	r3, r2
  408a8a:	d103      	bne.n	408a94 <usart_get_pdc_base+0x4c>
		p_pdc_base = PDC_USART3;
  408a8c:	4b1c      	ldr	r3, [pc, #112]	; (408b00 <usart_get_pdc_base+0xb8>)
  408a8e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  408a90:	68fb      	ldr	r3, [r7, #12]
  408a92:	e020      	b.n	408ad6 <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART4
	else if (p_usart == USART4) {
  408a94:	687b      	ldr	r3, [r7, #4]
  408a96:	4a1b      	ldr	r2, [pc, #108]	; (408b04 <usart_get_pdc_base+0xbc>)
  408a98:	4293      	cmp	r3, r2
  408a9a:	d103      	bne.n	408aa4 <usart_get_pdc_base+0x5c>
		p_pdc_base = PDC_USART4;
  408a9c:	4b1a      	ldr	r3, [pc, #104]	; (408b08 <usart_get_pdc_base+0xc0>)
  408a9e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  408aa0:	68fb      	ldr	r3, [r7, #12]
  408aa2:	e018      	b.n	408ad6 <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART5
	else if (p_usart == USART5) {
  408aa4:	687b      	ldr	r3, [r7, #4]
  408aa6:	4a19      	ldr	r2, [pc, #100]	; (408b0c <usart_get_pdc_base+0xc4>)
  408aa8:	4293      	cmp	r3, r2
  408aaa:	d103      	bne.n	408ab4 <usart_get_pdc_base+0x6c>
		p_pdc_base = PDC_USART5;
  408aac:	4b18      	ldr	r3, [pc, #96]	; (408b10 <usart_get_pdc_base+0xc8>)
  408aae:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  408ab0:	68fb      	ldr	r3, [r7, #12]
  408ab2:	e010      	b.n	408ad6 <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART6
	else if (p_usart == USART6) {
  408ab4:	687b      	ldr	r3, [r7, #4]
  408ab6:	4a17      	ldr	r2, [pc, #92]	; (408b14 <usart_get_pdc_base+0xcc>)
  408ab8:	4293      	cmp	r3, r2
  408aba:	d103      	bne.n	408ac4 <usart_get_pdc_base+0x7c>
		p_pdc_base = PDC_USART6;
  408abc:	4b16      	ldr	r3, [pc, #88]	; (408b18 <usart_get_pdc_base+0xd0>)
  408abe:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  408ac0:	68fb      	ldr	r3, [r7, #12]
  408ac2:	e008      	b.n	408ad6 <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART7
	else if (p_usart == USART7) {
  408ac4:	687b      	ldr	r3, [r7, #4]
  408ac6:	4a15      	ldr	r2, [pc, #84]	; (408b1c <usart_get_pdc_base+0xd4>)
  408ac8:	4293      	cmp	r3, r2
  408aca:	d103      	bne.n	408ad4 <usart_get_pdc_base+0x8c>
		p_pdc_base = PDC_USART7;
  408acc:	4b14      	ldr	r3, [pc, #80]	; (408b20 <usart_get_pdc_base+0xd8>)
  408ace:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  408ad0:	68fb      	ldr	r3, [r7, #12]
  408ad2:	e000      	b.n	408ad6 <usart_get_pdc_base+0x8e>
	}
#endif

	return p_pdc_base;
  408ad4:	68fb      	ldr	r3, [r7, #12]
}
  408ad6:	4618      	mov	r0, r3
  408ad8:	3714      	adds	r7, #20
  408ada:	46bd      	mov	sp, r7
  408adc:	f85d 7b04 	ldr.w	r7, [sp], #4
  408ae0:	4770      	bx	lr
  408ae2:	bf00      	nop
  408ae4:	4000c200 	.word	0x4000c200
  408ae8:	4000c300 	.word	0x4000c300
  408aec:	40020200 	.word	0x40020200
  408af0:	40020300 	.word	0x40020300
  408af4:	40024200 	.word	0x40024200
  408af8:	40024300 	.word	0x40024300
  408afc:	40018200 	.word	0x40018200
  408b00:	40018300 	.word	0x40018300
  408b04:	4001c200 	.word	0x4001c200
  408b08:	4001c300 	.word	0x4001c300
  408b0c:	40008200 	.word	0x40008200
  408b10:	40008300 	.word	0x40008300
  408b14:	40040200 	.word	0x40040200
  408b18:	40040300 	.word	0x40040300
  408b1c:	40034200 	.word	0x40034200
  408b20:	40034300 	.word	0x40034300

00408b24 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  408b24:	b480      	push	{r7}
  408b26:	b083      	sub	sp, #12
  408b28:	af00      	add	r7, sp, #0
  408b2a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  408b2c:	687b      	ldr	r3, [r7, #4]
  408b2e:	4a04      	ldr	r2, [pc, #16]	; (408b40 <usart_disable_writeprotect+0x1c>)
  408b30:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  408b34:	370c      	adds	r7, #12
  408b36:	46bd      	mov	sp, r7
  408b38:	f85d 7b04 	ldr.w	r7, [sp], #4
  408b3c:	4770      	bx	lr
  408b3e:	bf00      	nop
  408b40:	55534100 	.word	0x55534100

00408b44 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  408b44:	b480      	push	{r7}
  408b46:	b083      	sub	sp, #12
  408b48:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  408b4a:	f3ef 8310 	mrs	r3, PRIMASK
  408b4e:	603b      	str	r3, [r7, #0]
  return(result);
  408b50:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  408b52:	2b00      	cmp	r3, #0
  408b54:	bf0c      	ite	eq
  408b56:	2301      	moveq	r3, #1
  408b58:	2300      	movne	r3, #0
  408b5a:	b2db      	uxtb	r3, r3
  408b5c:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  408b5e:	b672      	cpsid	i
  408b60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  408b64:	4b04      	ldr	r3, [pc, #16]	; (408b78 <cpu_irq_save+0x34>)
  408b66:	2200      	movs	r2, #0
  408b68:	701a      	strb	r2, [r3, #0]
	return flags;
  408b6a:	687b      	ldr	r3, [r7, #4]
}
  408b6c:	4618      	mov	r0, r3
  408b6e:	370c      	adds	r7, #12
  408b70:	46bd      	mov	sp, r7
  408b72:	f85d 7b04 	ldr.w	r7, [sp], #4
  408b76:	4770      	bx	lr
  408b78:	2000013c 	.word	0x2000013c

00408b7c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  408b7c:	b480      	push	{r7}
  408b7e:	b083      	sub	sp, #12
  408b80:	af00      	add	r7, sp, #0
  408b82:	6078      	str	r0, [r7, #4]
	return (flags);
  408b84:	687b      	ldr	r3, [r7, #4]
  408b86:	2b00      	cmp	r3, #0
  408b88:	bf14      	ite	ne
  408b8a:	2301      	movne	r3, #1
  408b8c:	2300      	moveq	r3, #0
  408b8e:	b2db      	uxtb	r3, r3
}
  408b90:	4618      	mov	r0, r3
  408b92:	370c      	adds	r7, #12
  408b94:	46bd      	mov	sp, r7
  408b96:	f85d 7b04 	ldr.w	r7, [sp], #4
  408b9a:	4770      	bx	lr

00408b9c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  408b9c:	b580      	push	{r7, lr}
  408b9e:	b082      	sub	sp, #8
  408ba0:	af00      	add	r7, sp, #0
  408ba2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  408ba4:	6878      	ldr	r0, [r7, #4]
  408ba6:	4b07      	ldr	r3, [pc, #28]	; (408bc4 <cpu_irq_restore+0x28>)
  408ba8:	4798      	blx	r3
  408baa:	4603      	mov	r3, r0
  408bac:	2b00      	cmp	r3, #0
  408bae:	d005      	beq.n	408bbc <cpu_irq_restore+0x20>
		cpu_irq_enable();
  408bb0:	4b05      	ldr	r3, [pc, #20]	; (408bc8 <cpu_irq_restore+0x2c>)
  408bb2:	2201      	movs	r2, #1
  408bb4:	701a      	strb	r2, [r3, #0]
  408bb6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  408bba:	b662      	cpsie	i
}
  408bbc:	3708      	adds	r7, #8
  408bbe:	46bd      	mov	sp, r7
  408bc0:	bd80      	pop	{r7, pc}
  408bc2:	bf00      	nop
  408bc4:	00408b7d 	.word	0x00408b7d
  408bc8:	2000013c 	.word	0x2000013c

00408bcc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  408bcc:	b580      	push	{r7, lr}
  408bce:	b084      	sub	sp, #16
  408bd0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  408bd2:	4b25      	ldr	r3, [pc, #148]	; (408c68 <Reset_Handler+0x9c>)
  408bd4:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  408bd6:	4b25      	ldr	r3, [pc, #148]	; (408c6c <Reset_Handler+0xa0>)
  408bd8:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  408bda:	68fa      	ldr	r2, [r7, #12]
  408bdc:	68bb      	ldr	r3, [r7, #8]
  408bde:	429a      	cmp	r2, r3
  408be0:	d00c      	beq.n	408bfc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  408be2:	e007      	b.n	408bf4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  408be4:	68bb      	ldr	r3, [r7, #8]
  408be6:	1d1a      	adds	r2, r3, #4
  408be8:	60ba      	str	r2, [r7, #8]
  408bea:	68fa      	ldr	r2, [r7, #12]
  408bec:	1d11      	adds	r1, r2, #4
  408bee:	60f9      	str	r1, [r7, #12]
  408bf0:	6812      	ldr	r2, [r2, #0]
  408bf2:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  408bf4:	68bb      	ldr	r3, [r7, #8]
  408bf6:	4a1e      	ldr	r2, [pc, #120]	; (408c70 <Reset_Handler+0xa4>)
  408bf8:	4293      	cmp	r3, r2
  408bfa:	d3f3      	bcc.n	408be4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  408bfc:	4b1d      	ldr	r3, [pc, #116]	; (408c74 <Reset_Handler+0xa8>)
  408bfe:	60bb      	str	r3, [r7, #8]
  408c00:	e004      	b.n	408c0c <Reset_Handler+0x40>
                *pDest++ = 0;
  408c02:	68bb      	ldr	r3, [r7, #8]
  408c04:	1d1a      	adds	r2, r3, #4
  408c06:	60ba      	str	r2, [r7, #8]
  408c08:	2200      	movs	r2, #0
  408c0a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  408c0c:	68bb      	ldr	r3, [r7, #8]
  408c0e:	4a1a      	ldr	r2, [pc, #104]	; (408c78 <Reset_Handler+0xac>)
  408c10:	4293      	cmp	r3, r2
  408c12:	d3f6      	bcc.n	408c02 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  408c14:	4b19      	ldr	r3, [pc, #100]	; (408c7c <Reset_Handler+0xb0>)
  408c16:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  408c18:	4a19      	ldr	r2, [pc, #100]	; (408c80 <Reset_Handler+0xb4>)
  408c1a:	68fb      	ldr	r3, [r7, #12]
  408c1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  408c20:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  408c22:	4b18      	ldr	r3, [pc, #96]	; (408c84 <Reset_Handler+0xb8>)
  408c24:	4798      	blx	r3
  408c26:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  408c28:	4a17      	ldr	r2, [pc, #92]	; (408c88 <Reset_Handler+0xbc>)
  408c2a:	4b17      	ldr	r3, [pc, #92]	; (408c88 <Reset_Handler+0xbc>)
  408c2c:	681b      	ldr	r3, [r3, #0]
  408c2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  408c32:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  408c34:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  408c38:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  408c3c:	6878      	ldr	r0, [r7, #4]
  408c3e:	4b13      	ldr	r3, [pc, #76]	; (408c8c <Reset_Handler+0xc0>)
  408c40:	4798      	blx	r3

#if __FPU_USED
	fpu_enable();
#endif

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  408c42:	68fb      	ldr	r3, [r7, #12]
  408c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  408c48:	d309      	bcc.n	408c5e <Reset_Handler+0x92>
  408c4a:	68fb      	ldr	r3, [r7, #12]
  408c4c:	4a10      	ldr	r2, [pc, #64]	; (408c90 <Reset_Handler+0xc4>)
  408c4e:	4293      	cmp	r3, r2
  408c50:	d805      	bhi.n	408c5e <Reset_Handler+0x92>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  408c52:	4a0b      	ldr	r2, [pc, #44]	; (408c80 <Reset_Handler+0xb4>)
  408c54:	4b0a      	ldr	r3, [pc, #40]	; (408c80 <Reset_Handler+0xb4>)
  408c56:	689b      	ldr	r3, [r3, #8]
  408c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  408c5c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  408c5e:	4b0d      	ldr	r3, [pc, #52]	; (408c94 <Reset_Handler+0xc8>)
  408c60:	4798      	blx	r3

        /* Branch to main function */
        main();
  408c62:	4b0d      	ldr	r3, [pc, #52]	; (408c98 <Reset_Handler+0xcc>)
  408c64:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  408c66:	e7fe      	b.n	408c66 <Reset_Handler+0x9a>
  408c68:	0040d62c 	.word	0x0040d62c
  408c6c:	20000000 	.word	0x20000000
  408c70:	200009c4 	.word	0x200009c4
  408c74:	20000a00 	.word	0x20000a00
  408c78:	2001c408 	.word	0x2001c408
  408c7c:	00400000 	.word	0x00400000
  408c80:	e000ed00 	.word	0xe000ed00
  408c84:	00408b45 	.word	0x00408b45
  408c88:	e000ed88 	.word	0xe000ed88
  408c8c:	00408b9d 	.word	0x00408b9d
  408c90:	20027fff 	.word	0x20027fff
  408c94:	0040a0c1 	.word	0x0040a0c1
  408c98:	00409679 	.word	0x00409679

00408c9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  408c9c:	b480      	push	{r7}
  408c9e:	af00      	add	r7, sp, #0
        while (1) {
        }
  408ca0:	e7fe      	b.n	408ca0 <Dummy_Handler+0x4>
  408ca2:	bf00      	nop

00408ca4 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
  408ca4:	b480      	push	{r7}
  408ca6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  408ca8:	4b41      	ldr	r3, [pc, #260]	; (408db0 <SystemCoreClockUpdate+0x10c>)
  408caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408cac:	f003 0303 	and.w	r3, r3, #3
  408cb0:	2b01      	cmp	r3, #1
  408cb2:	d014      	beq.n	408cde <SystemCoreClockUpdate+0x3a>
  408cb4:	2b01      	cmp	r3, #1
  408cb6:	d302      	bcc.n	408cbe <SystemCoreClockUpdate+0x1a>
  408cb8:	2b02      	cmp	r3, #2
  408cba:	d038      	beq.n	408d2e <SystemCoreClockUpdate+0x8a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
					CKGR_PLLAR_MULA_Pos) + 1U);
		}
		break;
	default:
		break;
  408cbc:	e05a      	b.n	408d74 <SystemCoreClockUpdate+0xd0>
void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  408cbe:	4b3d      	ldr	r3, [pc, #244]	; (408db4 <SystemCoreClockUpdate+0x110>)
  408cc0:	695b      	ldr	r3, [r3, #20]
  408cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  408cc6:	2b00      	cmp	r3, #0
  408cc8:	d004      	beq.n	408cd4 <SystemCoreClockUpdate+0x30>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  408cca:	4b3b      	ldr	r3, [pc, #236]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408ccc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  408cd0:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
  408cd2:	e04f      	b.n	408d74 <SystemCoreClockUpdate+0xd0>
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  408cd4:	4b38      	ldr	r3, [pc, #224]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408cd6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  408cda:	601a      	str	r2, [r3, #0]
		}
		break;
  408cdc:	e04a      	b.n	408d74 <SystemCoreClockUpdate+0xd0>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  408cde:	4b34      	ldr	r3, [pc, #208]	; (408db0 <SystemCoreClockUpdate+0x10c>)
  408ce0:	6a1b      	ldr	r3, [r3, #32]
  408ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  408ce6:	2b00      	cmp	r3, #0
  408ce8:	d003      	beq.n	408cf2 <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  408cea:	4b33      	ldr	r3, [pc, #204]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408cec:	4a33      	ldr	r2, [pc, #204]	; (408dbc <SystemCoreClockUpdate+0x118>)
  408cee:	601a      	str	r2, [r3, #0]
  408cf0:	e01c      	b.n	408d2c <SystemCoreClockUpdate+0x88>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  408cf2:	4b31      	ldr	r3, [pc, #196]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408cf4:	4a32      	ldr	r2, [pc, #200]	; (408dc0 <SystemCoreClockUpdate+0x11c>)
  408cf6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  408cf8:	4b2d      	ldr	r3, [pc, #180]	; (408db0 <SystemCoreClockUpdate+0x10c>)
  408cfa:	6a1b      	ldr	r3, [r3, #32]
  408cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  408d00:	2b10      	cmp	r3, #16
  408d02:	d004      	beq.n	408d0e <SystemCoreClockUpdate+0x6a>
  408d04:	2b20      	cmp	r3, #32
  408d06:	d008      	beq.n	408d1a <SystemCoreClockUpdate+0x76>
  408d08:	2b00      	cmp	r3, #0
  408d0a:	d00e      	beq.n	408d2a <SystemCoreClockUpdate+0x86>
				break;
			case CKGR_MOR_MOSCRCF_24_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
  408d0c:	e00e      	b.n	408d2c <SystemCoreClockUpdate+0x88>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_8_MHz:
				break;
			case CKGR_MOR_MOSCRCF_16_MHz:
				SystemCoreClock *= 2U;
  408d0e:	4b2a      	ldr	r3, [pc, #168]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408d10:	681b      	ldr	r3, [r3, #0]
  408d12:	005b      	lsls	r3, r3, #1
  408d14:	4a28      	ldr	r2, [pc, #160]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408d16:	6013      	str	r3, [r2, #0]
				break;
  408d18:	e008      	b.n	408d2c <SystemCoreClockUpdate+0x88>
			case CKGR_MOR_MOSCRCF_24_MHz:
				SystemCoreClock *= 3U;
  408d1a:	4b27      	ldr	r3, [pc, #156]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408d1c:	681a      	ldr	r2, [r3, #0]
  408d1e:	4613      	mov	r3, r2
  408d20:	005b      	lsls	r3, r3, #1
  408d22:	4413      	add	r3, r2
  408d24:	4a24      	ldr	r2, [pc, #144]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408d26:	6013      	str	r3, [r2, #0]
				break;
  408d28:	e000      	b.n	408d2c <SystemCoreClockUpdate+0x88>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_8_MHz:
				break;
  408d2a:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
  408d2c:	e022      	b.n	408d74 <SystemCoreClockUpdate+0xd0>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  408d2e:	4b21      	ldr	r3, [pc, #132]	; (408db4 <SystemCoreClockUpdate+0x110>)
  408d30:	695b      	ldr	r3, [r3, #20]
  408d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
  408d36:	2b00      	cmp	r3, #0
  408d38:	d004      	beq.n	408d44 <SystemCoreClockUpdate+0xa0>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  408d3a:	4b1f      	ldr	r3, [pc, #124]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408d3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  408d40:	601a      	str	r2, [r3, #0]
  408d42:	e003      	b.n	408d4c <SystemCoreClockUpdate+0xa8>
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  408d44:	4b1c      	ldr	r3, [pc, #112]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408d46:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  408d4a:	601a      	str	r2, [r3, #0]
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  408d4c:	4b18      	ldr	r3, [pc, #96]	; (408db0 <SystemCoreClockUpdate+0x10c>)
  408d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408d50:	f003 0303 	and.w	r3, r3, #3
  408d54:	2b02      	cmp	r3, #2
  408d56:	d10c      	bne.n	408d72 <SystemCoreClockUpdate+0xce>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  408d58:	4b15      	ldr	r3, [pc, #84]	; (408db0 <SystemCoreClockUpdate+0x10c>)
  408d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408d5c:	4b19      	ldr	r3, [pc, #100]	; (408dc4 <SystemCoreClockUpdate+0x120>)
  408d5e:	4013      	ands	r3, r2
  408d60:	0c1b      	lsrs	r3, r3, #16
					CKGR_PLLAR_MULA_Pos) + 1U);
  408d62:	3301      	adds	r3, #1
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  408d64:	4a14      	ldr	r2, [pc, #80]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408d66:	6812      	ldr	r2, [r2, #0]
  408d68:	fb02 f303 	mul.w	r3, r2, r3
  408d6c:	4a12      	ldr	r2, [pc, #72]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408d6e:	6013      	str	r3, [r2, #0]
					CKGR_PLLAR_MULA_Pos) + 1U);
		}
		break;
  408d70:	e7ff      	b.n	408d72 <SystemCoreClockUpdate+0xce>
  408d72:	bf00      	nop
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  408d74:	4b0e      	ldr	r3, [pc, #56]	; (408db0 <SystemCoreClockUpdate+0x10c>)
  408d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408d78:	f003 0370 	and.w	r3, r3, #112	; 0x70
  408d7c:	2b70      	cmp	r3, #112	; 0x70
  408d7e:	d108      	bne.n	408d92 <SystemCoreClockUpdate+0xee>
		SystemCoreClock /= 3U;
  408d80:	4b0d      	ldr	r3, [pc, #52]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408d82:	681b      	ldr	r3, [r3, #0]
  408d84:	4a10      	ldr	r2, [pc, #64]	; (408dc8 <SystemCoreClockUpdate+0x124>)
  408d86:	fba2 2303 	umull	r2, r3, r2, r3
  408d8a:	085b      	lsrs	r3, r3, #1
  408d8c:	4a0a      	ldr	r2, [pc, #40]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408d8e:	6013      	str	r3, [r2, #0]
  408d90:	e009      	b.n	408da6 <SystemCoreClockUpdate+0x102>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  408d92:	4b07      	ldr	r3, [pc, #28]	; (408db0 <SystemCoreClockUpdate+0x10c>)
  408d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
  408d9a:	091a      	lsrs	r2, r3, #4
  408d9c:	4b06      	ldr	r3, [pc, #24]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408d9e:	681b      	ldr	r3, [r3, #0]
  408da0:	40d3      	lsrs	r3, r2
  408da2:	4a05      	ldr	r2, [pc, #20]	; (408db8 <SystemCoreClockUpdate+0x114>)
  408da4:	6013      	str	r3, [r2, #0]
	}
}
  408da6:	46bd      	mov	sp, r7
  408da8:	f85d 7b04 	ldr.w	r7, [sp], #4
  408dac:	4770      	bx	lr
  408dae:	bf00      	nop
  408db0:	400e0400 	.word	0x400e0400
  408db4:	400e1410 	.word	0x400e1410
  408db8:	20000140 	.word	0x20000140
  408dbc:	00b71b00 	.word	0x00b71b00
  408dc0:	007a1200 	.word	0x007a1200
  408dc4:	1fff0000 	.word	0x1fff0000
  408dc8:	aaaaaaab 	.word	0xaaaaaaab

00408dcc <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
  408dcc:	b480      	push	{r7}
  408dce:	b083      	sub	sp, #12
  408dd0:	af00      	add	r7, sp, #0
  408dd2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  408dd4:	687b      	ldr	r3, [r7, #4]
  408dd6:	4a18      	ldr	r2, [pc, #96]	; (408e38 <system_init_flash+0x6c>)
  408dd8:	4293      	cmp	r3, r2
  408dda:	d804      	bhi.n	408de6 <system_init_flash+0x1a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  408ddc:	4b17      	ldr	r3, [pc, #92]	; (408e3c <system_init_flash+0x70>)
  408dde:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  408de2:	601a      	str	r2, [r3, #0]
  408de4:	e023      	b.n	408e2e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  408de6:	687b      	ldr	r3, [r7, #4]
  408de8:	4a15      	ldr	r2, [pc, #84]	; (408e40 <system_init_flash+0x74>)
  408dea:	4293      	cmp	r3, r2
  408dec:	d803      	bhi.n	408df6 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  408dee:	4b13      	ldr	r3, [pc, #76]	; (408e3c <system_init_flash+0x70>)
  408df0:	4a14      	ldr	r2, [pc, #80]	; (408e44 <system_init_flash+0x78>)
  408df2:	601a      	str	r2, [r3, #0]
  408df4:	e01b      	b.n	408e2e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  408df6:	687b      	ldr	r3, [r7, #4]
  408df8:	4a13      	ldr	r2, [pc, #76]	; (408e48 <system_init_flash+0x7c>)
  408dfa:	4293      	cmp	r3, r2
  408dfc:	d803      	bhi.n	408e06 <system_init_flash+0x3a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  408dfe:	4b0f      	ldr	r3, [pc, #60]	; (408e3c <system_init_flash+0x70>)
  408e00:	4a12      	ldr	r2, [pc, #72]	; (408e4c <system_init_flash+0x80>)
  408e02:	601a      	str	r2, [r3, #0]
  408e04:	e013      	b.n	408e2e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  408e06:	687b      	ldr	r3, [r7, #4]
  408e08:	4a11      	ldr	r2, [pc, #68]	; (408e50 <system_init_flash+0x84>)
  408e0a:	4293      	cmp	r3, r2
  408e0c:	d803      	bhi.n	408e16 <system_init_flash+0x4a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  408e0e:	4b0b      	ldr	r3, [pc, #44]	; (408e3c <system_init_flash+0x70>)
  408e10:	4a10      	ldr	r2, [pc, #64]	; (408e54 <system_init_flash+0x88>)
  408e12:	601a      	str	r2, [r3, #0]
  408e14:	e00b      	b.n	408e2e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  408e16:	687b      	ldr	r3, [r7, #4]
  408e18:	4a0f      	ldr	r2, [pc, #60]	; (408e58 <system_init_flash+0x8c>)
  408e1a:	4293      	cmp	r3, r2
  408e1c:	d804      	bhi.n	408e28 <system_init_flash+0x5c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  408e1e:	4b07      	ldr	r3, [pc, #28]	; (408e3c <system_init_flash+0x70>)
  408e20:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  408e24:	601a      	str	r2, [r3, #0]
  408e26:	e002      	b.n	408e2e <system_init_flash+0x62>
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  408e28:	4b04      	ldr	r3, [pc, #16]	; (408e3c <system_init_flash+0x70>)
  408e2a:	4a0c      	ldr	r2, [pc, #48]	; (408e5c <system_init_flash+0x90>)
  408e2c:	601a      	str	r2, [r3, #0]
	}
}
  408e2e:	370c      	adds	r7, #12
  408e30:	46bd      	mov	sp, r7
  408e32:	f85d 7b04 	ldr.w	r7, [sp], #4
  408e36:	4770      	bx	lr
  408e38:	01312cff 	.word	0x01312cff
  408e3c:	400e0a00 	.word	0x400e0a00
  408e40:	026259ff 	.word	0x026259ff
  408e44:	04000100 	.word	0x04000100
  408e48:	039386ff 	.word	0x039386ff
  408e4c:	04000200 	.word	0x04000200
  408e50:	04c4b3ff 	.word	0x04c4b3ff
  408e54:	04000300 	.word	0x04000300
  408e58:	05f5e0ff 	.word	0x05f5e0ff
  408e5c:	04000500 	.word	0x04000500

00408e60 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  408e60:	b480      	push	{r7}
  408e62:	b085      	sub	sp, #20
  408e64:	af00      	add	r7, sp, #0
  408e66:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  408e68:	4b10      	ldr	r3, [pc, #64]	; (408eac <_sbrk+0x4c>)
  408e6a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  408e6c:	4b10      	ldr	r3, [pc, #64]	; (408eb0 <_sbrk+0x50>)
  408e6e:	681b      	ldr	r3, [r3, #0]
  408e70:	2b00      	cmp	r3, #0
  408e72:	d102      	bne.n	408e7a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  408e74:	4b0e      	ldr	r3, [pc, #56]	; (408eb0 <_sbrk+0x50>)
  408e76:	4a0f      	ldr	r2, [pc, #60]	; (408eb4 <_sbrk+0x54>)
  408e78:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  408e7a:	4b0d      	ldr	r3, [pc, #52]	; (408eb0 <_sbrk+0x50>)
  408e7c:	681b      	ldr	r3, [r3, #0]
  408e7e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  408e80:	68ba      	ldr	r2, [r7, #8]
  408e82:	687b      	ldr	r3, [r7, #4]
  408e84:	441a      	add	r2, r3
  408e86:	68fb      	ldr	r3, [r7, #12]
  408e88:	429a      	cmp	r2, r3
  408e8a:	dd02      	ble.n	408e92 <_sbrk+0x32>
		return (caddr_t) -1;	
  408e8c:	f04f 33ff 	mov.w	r3, #4294967295
  408e90:	e006      	b.n	408ea0 <_sbrk+0x40>
	}

	heap += incr;
  408e92:	4b07      	ldr	r3, [pc, #28]	; (408eb0 <_sbrk+0x50>)
  408e94:	681a      	ldr	r2, [r3, #0]
  408e96:	687b      	ldr	r3, [r7, #4]
  408e98:	4413      	add	r3, r2
  408e9a:	4a05      	ldr	r2, [pc, #20]	; (408eb0 <_sbrk+0x50>)
  408e9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  408e9e:	68bb      	ldr	r3, [r7, #8]
}
  408ea0:	4618      	mov	r0, r3
  408ea2:	3714      	adds	r7, #20
  408ea4:	46bd      	mov	sp, r7
  408ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
  408eaa:	4770      	bx	lr
  408eac:	20027ffc 	.word	0x20027ffc
  408eb0:	20019dc4 	.word	0x20019dc4
  408eb4:	2001f408 	.word	0x2001f408

00408eb8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  408eb8:	b480      	push	{r7}
  408eba:	b083      	sub	sp, #12
  408ebc:	af00      	add	r7, sp, #0
  408ebe:	6078      	str	r0, [r7, #4]
	return -1;
  408ec0:	f04f 33ff 	mov.w	r3, #4294967295
}
  408ec4:	4618      	mov	r0, r3
  408ec6:	370c      	adds	r7, #12
  408ec8:	46bd      	mov	sp, r7
  408eca:	f85d 7b04 	ldr.w	r7, [sp], #4
  408ece:	4770      	bx	lr

00408ed0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  408ed0:	b480      	push	{r7}
  408ed2:	b083      	sub	sp, #12
  408ed4:	af00      	add	r7, sp, #0
  408ed6:	6078      	str	r0, [r7, #4]
  408ed8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  408eda:	683b      	ldr	r3, [r7, #0]
  408edc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  408ee0:	605a      	str	r2, [r3, #4]

	return 0;
  408ee2:	2300      	movs	r3, #0
}
  408ee4:	4618      	mov	r0, r3
  408ee6:	370c      	adds	r7, #12
  408ee8:	46bd      	mov	sp, r7
  408eea:	f85d 7b04 	ldr.w	r7, [sp], #4
  408eee:	4770      	bx	lr

00408ef0 <_isatty>:

extern int _isatty(int file)
{
  408ef0:	b480      	push	{r7}
  408ef2:	b083      	sub	sp, #12
  408ef4:	af00      	add	r7, sp, #0
  408ef6:	6078      	str	r0, [r7, #4]
	return 1;
  408ef8:	2301      	movs	r3, #1
}
  408efa:	4618      	mov	r0, r3
  408efc:	370c      	adds	r7, #12
  408efe:	46bd      	mov	sp, r7
  408f00:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f04:	4770      	bx	lr
  408f06:	bf00      	nop

00408f08 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  408f08:	b480      	push	{r7}
  408f0a:	b085      	sub	sp, #20
  408f0c:	af00      	add	r7, sp, #0
  408f0e:	60f8      	str	r0, [r7, #12]
  408f10:	60b9      	str	r1, [r7, #8]
  408f12:	607a      	str	r2, [r7, #4]
	return 0;
  408f14:	2300      	movs	r3, #0
}
  408f16:	4618      	mov	r0, r3
  408f18:	3714      	adds	r7, #20
  408f1a:	46bd      	mov	sp, r7
  408f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f20:	4770      	bx	lr
  408f22:	bf00      	nop

00408f24 <FastCRC>:
	0xAD, 0x78, 0xD2, 0x07, 0x53, 0x86, 0x2C, 0xF9,
};


uint8_t FastCRC(uint8_t LastCRC, uint8_t newbyte)
{
  408f24:	b480      	push	{r7}
  408f26:	b083      	sub	sp, #12
  408f28:	af00      	add	r7, sp, #0
  408f2a:	4603      	mov	r3, r0
  408f2c:	460a      	mov	r2, r1
  408f2e:	71fb      	strb	r3, [r7, #7]
  408f30:	4613      	mov	r3, r2
  408f32:	71bb      	strb	r3, [r7, #6]
	LastCRC = p_CRCtbl[ LastCRC ^ newbyte ];
  408f34:	79fa      	ldrb	r2, [r7, #7]
  408f36:	79bb      	ldrb	r3, [r7, #6]
  408f38:	4053      	eors	r3, r2
  408f3a:	b2db      	uxtb	r3, r3
  408f3c:	461a      	mov	r2, r3
  408f3e:	4b05      	ldr	r3, [pc, #20]	; (408f54 <FastCRC+0x30>)
  408f40:	5c9b      	ldrb	r3, [r3, r2]
  408f42:	71fb      	strb	r3, [r7, #7]
	return(LastCRC);
  408f44:	79fb      	ldrb	r3, [r7, #7]
}
  408f46:	4618      	mov	r0, r3
  408f48:	370c      	adds	r7, #12
  408f4a:	46bd      	mov	sp, r7
  408f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f50:	4770      	bx	lr
  408f52:	bf00      	nop
  408f54:	0040d3c4 	.word	0x0040d3c4

00408f58 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  408f58:	b480      	push	{r7}
  408f5a:	b085      	sub	sp, #20
  408f5c:	af00      	add	r7, sp, #0
  408f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
  408f60:	687b      	ldr	r3, [r7, #4]
  408f62:	f003 0307 	and.w	r3, r3, #7
  408f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  408f68:	4b0c      	ldr	r3, [pc, #48]	; (408f9c <NVIC_SetPriorityGrouping+0x44>)
  408f6a:	68db      	ldr	r3, [r3, #12]
  408f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  408f6e:	68ba      	ldr	r2, [r7, #8]
  408f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
  408f74:	4013      	ands	r3, r2
  408f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  408f78:	68fb      	ldr	r3, [r7, #12]
  408f7a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
  408f7c:	68bb      	ldr	r3, [r7, #8]
  408f7e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
  408f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  408f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  408f88:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  408f8a:	4a04      	ldr	r2, [pc, #16]	; (408f9c <NVIC_SetPriorityGrouping+0x44>)
  408f8c:	68bb      	ldr	r3, [r7, #8]
  408f8e:	60d3      	str	r3, [r2, #12]
}
  408f90:	3714      	adds	r7, #20
  408f92:	46bd      	mov	sp, r7
  408f94:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f98:	4770      	bx	lr
  408f9a:	bf00      	nop
  408f9c:	e000ed00 	.word	0xe000ed00

00408fa0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  408fa0:	b480      	push	{r7}
  408fa2:	b083      	sub	sp, #12
  408fa4:	af00      	add	r7, sp, #0
  408fa6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  408fa8:	687b      	ldr	r3, [r7, #4]
  408faa:	2b07      	cmp	r3, #7
  408fac:	d825      	bhi.n	408ffa <osc_get_rate+0x5a>
  408fae:	a201      	add	r2, pc, #4	; (adr r2, 408fb4 <osc_get_rate+0x14>)
  408fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408fb4:	00408fd5 	.word	0x00408fd5
  408fb8:	00408fdb 	.word	0x00408fdb
  408fbc:	00408fe1 	.word	0x00408fe1
  408fc0:	00408fe7 	.word	0x00408fe7
  408fc4:	00408feb 	.word	0x00408feb
  408fc8:	00408fef 	.word	0x00408fef
  408fcc:	00408ff3 	.word	0x00408ff3
  408fd0:	00408ff7 	.word	0x00408ff7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  408fd4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  408fd8:	e010      	b.n	408ffc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  408fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  408fde:	e00d      	b.n	408ffc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  408fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  408fe4:	e00a      	b.n	408ffc <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  408fe6:	4b08      	ldr	r3, [pc, #32]	; (409008 <osc_get_rate+0x68>)
  408fe8:	e008      	b.n	408ffc <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  408fea:	4b08      	ldr	r3, [pc, #32]	; (40900c <osc_get_rate+0x6c>)
  408fec:	e006      	b.n	408ffc <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  408fee:	4b08      	ldr	r3, [pc, #32]	; (409010 <osc_get_rate+0x70>)
  408ff0:	e004      	b.n	408ffc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  408ff2:	2300      	movs	r3, #0
  408ff4:	e002      	b.n	408ffc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  408ff6:	2300      	movs	r3, #0
  408ff8:	e000      	b.n	408ffc <osc_get_rate+0x5c>
#endif
	}

	return 0;
  408ffa:	2300      	movs	r3, #0
}
  408ffc:	4618      	mov	r0, r3
  408ffe:	370c      	adds	r7, #12
  409000:	46bd      	mov	sp, r7
  409002:	f85d 7b04 	ldr.w	r7, [sp], #4
  409006:	4770      	bx	lr
  409008:	007a1200 	.word	0x007a1200
  40900c:	00f42400 	.word	0x00f42400
  409010:	016e3600 	.word	0x016e3600

00409014 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  409014:	b580      	push	{r7, lr}
  409016:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  409018:	2001      	movs	r0, #1
  40901a:	4b04      	ldr	r3, [pc, #16]	; (40902c <sysclk_get_main_hz+0x18>)
  40901c:	4798      	blx	r3
  40901e:	4602      	mov	r2, r0
  409020:	f640 3372 	movw	r3, #2930	; 0xb72
  409024:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  409028:	4618      	mov	r0, r3
  40902a:	bd80      	pop	{r7, pc}
  40902c:	00408fa1 	.word	0x00408fa1

00409030 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  409030:	b580      	push	{r7, lr}
  409032:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  409034:	4b02      	ldr	r3, [pc, #8]	; (409040 <sysclk_get_peripheral_hz+0x10>)
  409036:	4798      	blx	r3
  409038:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40903a:	4618      	mov	r0, r3
  40903c:	bd80      	pop	{r7, pc}
  40903e:	bf00      	nop
  409040:	00409015 	.word	0x00409015

00409044 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  409044:	b580      	push	{r7, lr}
  409046:	b082      	sub	sp, #8
  409048:	af00      	add	r7, sp, #0
  40904a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40904c:	6878      	ldr	r0, [r7, #4]
  40904e:	4b02      	ldr	r3, [pc, #8]	; (409058 <sysclk_enable_peripheral_clock+0x14>)
  409050:	4798      	blx	r3
}
  409052:	3708      	adds	r7, #8
  409054:	46bd      	mov	sp, r7
  409056:	bd80      	pop	{r7, pc}
  409058:	00406841 	.word	0x00406841

0040905c <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
  40905c:	b480      	push	{r7}
  40905e:	b083      	sub	sp, #12
  409060:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
  409062:	2300      	movs	r3, #0
  409064:	71fb      	strb	r3, [r7, #7]
  409066:	e006      	b.n	409076 <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
  409068:	79fb      	ldrb	r3, [r7, #7]
  40906a:	4a08      	ldr	r2, [pc, #32]	; (40908c <sleepmgr_init+0x30>)
  40906c:	2100      	movs	r1, #0
  40906e:	54d1      	strb	r1, [r2, r3]
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
  409070:	79fb      	ldrb	r3, [r7, #7]
  409072:	3301      	adds	r3, #1
  409074:	71fb      	strb	r3, [r7, #7]
  409076:	79fb      	ldrb	r3, [r7, #7]
  409078:	2b04      	cmp	r3, #4
  40907a:	d9f5      	bls.n	409068 <sleepmgr_init+0xc>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  40907c:	4b03      	ldr	r3, [pc, #12]	; (40908c <sleepmgr_init+0x30>)
  40907e:	2201      	movs	r2, #1
  409080:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  409082:	370c      	adds	r7, #12
  409084:	46bd      	mov	sp, r7
  409086:	f85d 7b04 	ldr.w	r7, [sp], #4
  40908a:	4770      	bx	lr
  40908c:	2001c3fc 	.word	0x2001c3fc

00409090 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  409090:	b580      	push	{r7, lr}
  409092:	b088      	sub	sp, #32
  409094:	af00      	add	r7, sp, #0
  409096:	6078      	str	r0, [r7, #4]
  409098:	6039      	str	r1, [r7, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40909a:	683b      	ldr	r3, [r7, #0]
  40909c:	681b      	ldr	r3, [r3, #0]
  40909e:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
  4090a0:	683b      	ldr	r3, [r7, #0]
  4090a2:	685b      	ldr	r3, [r3, #4]
  4090a4:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
  4090a6:	683b      	ldr	r3, [r7, #0]
  4090a8:	689b      	ldr	r3, [r3, #8]
  4090aa:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
  4090ac:	683b      	ldr	r3, [r7, #0]
  4090ae:	68db      	ldr	r3, [r3, #12]
  4090b0:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4090b2:	2300      	movs	r3, #0
  4090b4:	61bb      	str	r3, [r7, #24]
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4090b6:	687b      	ldr	r3, [r7, #4]
  4090b8:	4a68      	ldr	r2, [pc, #416]	; (40925c <usart_serial_init+0x1cc>)
  4090ba:	4293      	cmp	r3, r2
  4090bc:	d115      	bne.n	4090ea <usart_serial_init+0x5a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
  4090be:	4868      	ldr	r0, [pc, #416]	; (409260 <usart_serial_init+0x1d0>)
  4090c0:	4b68      	ldr	r3, [pc, #416]	; (409264 <usart_serial_init+0x1d4>)
  4090c2:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
  4090c4:	4866      	ldr	r0, [pc, #408]	; (409260 <usart_serial_init+0x1d0>)
  4090c6:	2101      	movs	r1, #1
  4090c8:	4b67      	ldr	r3, [pc, #412]	; (409268 <usart_serial_init+0x1d8>)
  4090ca:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART0);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4090cc:	4b67      	ldr	r3, [pc, #412]	; (40926c <usart_serial_init+0x1dc>)
  4090ce:	4798      	blx	r3
  4090d0:	4602      	mov	r2, r0
  4090d2:	f107 0308 	add.w	r3, r7, #8
  4090d6:	6878      	ldr	r0, [r7, #4]
  4090d8:	4619      	mov	r1, r3
  4090da:	4b65      	ldr	r3, [pc, #404]	; (409270 <usart_serial_init+0x1e0>)
  4090dc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4090de:	6878      	ldr	r0, [r7, #4]
  4090e0:	4b64      	ldr	r3, [pc, #400]	; (409274 <usart_serial_init+0x1e4>)
  4090e2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4090e4:	6878      	ldr	r0, [r7, #4]
  4090e6:	4b64      	ldr	r3, [pc, #400]	; (409278 <usart_serial_init+0x1e8>)
  4090e8:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4090ea:	687b      	ldr	r3, [r7, #4]
  4090ec:	4a63      	ldr	r2, [pc, #396]	; (40927c <usart_serial_init+0x1ec>)
  4090ee:	4293      	cmp	r3, r2
  4090f0:	d115      	bne.n	40911e <usart_serial_init+0x8e>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
  4090f2:	4863      	ldr	r0, [pc, #396]	; (409280 <usart_serial_init+0x1f0>)
  4090f4:	4b5b      	ldr	r3, [pc, #364]	; (409264 <usart_serial_init+0x1d4>)
  4090f6:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
  4090f8:	4861      	ldr	r0, [pc, #388]	; (409280 <usart_serial_init+0x1f0>)
  4090fa:	2101      	movs	r1, #1
  4090fc:	4b5a      	ldr	r3, [pc, #360]	; (409268 <usart_serial_init+0x1d8>)
  4090fe:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  409100:	4b5a      	ldr	r3, [pc, #360]	; (40926c <usart_serial_init+0x1dc>)
  409102:	4798      	blx	r3
  409104:	4602      	mov	r2, r0
  409106:	f107 0308 	add.w	r3, r7, #8
  40910a:	6878      	ldr	r0, [r7, #4]
  40910c:	4619      	mov	r1, r3
  40910e:	4b58      	ldr	r3, [pc, #352]	; (409270 <usart_serial_init+0x1e0>)
  409110:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  409112:	6878      	ldr	r0, [r7, #4]
  409114:	4b57      	ldr	r3, [pc, #348]	; (409274 <usart_serial_init+0x1e4>)
  409116:	4798      	blx	r3
		usart_enable_rx(p_usart);
  409118:	6878      	ldr	r0, [r7, #4]
  40911a:	4b57      	ldr	r3, [pc, #348]	; (409278 <usart_serial_init+0x1e8>)
  40911c:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40911e:	687b      	ldr	r3, [r7, #4]
  409120:	4a58      	ldr	r2, [pc, #352]	; (409284 <usart_serial_init+0x1f4>)
  409122:	4293      	cmp	r3, r2
  409124:	d115      	bne.n	409152 <usart_serial_init+0xc2>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
  409126:	4858      	ldr	r0, [pc, #352]	; (409288 <usart_serial_init+0x1f8>)
  409128:	4b4e      	ldr	r3, [pc, #312]	; (409264 <usart_serial_init+0x1d4>)
  40912a:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
  40912c:	4856      	ldr	r0, [pc, #344]	; (409288 <usart_serial_init+0x1f8>)
  40912e:	2101      	movs	r1, #1
  409130:	4b4d      	ldr	r3, [pc, #308]	; (409268 <usart_serial_init+0x1d8>)
  409132:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART2);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  409134:	4b4d      	ldr	r3, [pc, #308]	; (40926c <usart_serial_init+0x1dc>)
  409136:	4798      	blx	r3
  409138:	4602      	mov	r2, r0
  40913a:	f107 0308 	add.w	r3, r7, #8
  40913e:	6878      	ldr	r0, [r7, #4]
  409140:	4619      	mov	r1, r3
  409142:	4b4b      	ldr	r3, [pc, #300]	; (409270 <usart_serial_init+0x1e0>)
  409144:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  409146:	6878      	ldr	r0, [r7, #4]
  409148:	4b4a      	ldr	r3, [pc, #296]	; (409274 <usart_serial_init+0x1e4>)
  40914a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40914c:	6878      	ldr	r0, [r7, #4]
  40914e:	4b4a      	ldr	r3, [pc, #296]	; (409278 <usart_serial_init+0x1e8>)
  409150:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  409152:	687b      	ldr	r3, [r7, #4]
  409154:	4a4d      	ldr	r2, [pc, #308]	; (40928c <usart_serial_init+0x1fc>)
  409156:	4293      	cmp	r3, r2
  409158:	d115      	bne.n	409186 <usart_serial_init+0xf6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM3);
  40915a:	484d      	ldr	r0, [pc, #308]	; (409290 <usart_serial_init+0x200>)
  40915c:	4b41      	ldr	r3, [pc, #260]	; (409264 <usart_serial_init+0x1d4>)
  40915e:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM3, FLEXCOM_USART);
  409160:	484b      	ldr	r0, [pc, #300]	; (409290 <usart_serial_init+0x200>)
  409162:	2101      	movs	r1, #1
  409164:	4b40      	ldr	r3, [pc, #256]	; (409268 <usart_serial_init+0x1d8>)
  409166:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART3);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  409168:	4b40      	ldr	r3, [pc, #256]	; (40926c <usart_serial_init+0x1dc>)
  40916a:	4798      	blx	r3
  40916c:	4602      	mov	r2, r0
  40916e:	f107 0308 	add.w	r3, r7, #8
  409172:	6878      	ldr	r0, [r7, #4]
  409174:	4619      	mov	r1, r3
  409176:	4b3e      	ldr	r3, [pc, #248]	; (409270 <usart_serial_init+0x1e0>)
  409178:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40917a:	6878      	ldr	r0, [r7, #4]
  40917c:	4b3d      	ldr	r3, [pc, #244]	; (409274 <usart_serial_init+0x1e4>)
  40917e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  409180:	6878      	ldr	r0, [r7, #4]
  409182:	4b3d      	ldr	r3, [pc, #244]	; (409278 <usart_serial_init+0x1e8>)
  409184:	4798      	blx	r3
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  409186:	687b      	ldr	r3, [r7, #4]
  409188:	4a42      	ldr	r2, [pc, #264]	; (409294 <usart_serial_init+0x204>)
  40918a:	4293      	cmp	r3, r2
  40918c:	d115      	bne.n	4091ba <usart_serial_init+0x12a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM4);
  40918e:	4842      	ldr	r0, [pc, #264]	; (409298 <usart_serial_init+0x208>)
  409190:	4b34      	ldr	r3, [pc, #208]	; (409264 <usart_serial_init+0x1d4>)
  409192:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM4, FLEXCOM_USART);
  409194:	4840      	ldr	r0, [pc, #256]	; (409298 <usart_serial_init+0x208>)
  409196:	2101      	movs	r1, #1
  409198:	4b33      	ldr	r3, [pc, #204]	; (409268 <usart_serial_init+0x1d8>)
  40919a:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART4);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40919c:	4b33      	ldr	r3, [pc, #204]	; (40926c <usart_serial_init+0x1dc>)
  40919e:	4798      	blx	r3
  4091a0:	4602      	mov	r2, r0
  4091a2:	f107 0308 	add.w	r3, r7, #8
  4091a6:	6878      	ldr	r0, [r7, #4]
  4091a8:	4619      	mov	r1, r3
  4091aa:	4b31      	ldr	r3, [pc, #196]	; (409270 <usart_serial_init+0x1e0>)
  4091ac:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4091ae:	6878      	ldr	r0, [r7, #4]
  4091b0:	4b30      	ldr	r3, [pc, #192]	; (409274 <usart_serial_init+0x1e4>)
  4091b2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4091b4:	6878      	ldr	r0, [r7, #4]
  4091b6:	4b30      	ldr	r3, [pc, #192]	; (409278 <usart_serial_init+0x1e8>)
  4091b8:	4798      	blx	r3
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  4091ba:	687b      	ldr	r3, [r7, #4]
  4091bc:	4a37      	ldr	r2, [pc, #220]	; (40929c <usart_serial_init+0x20c>)
  4091be:	4293      	cmp	r3, r2
  4091c0:	d115      	bne.n	4091ee <usart_serial_init+0x15e>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM5);
  4091c2:	4837      	ldr	r0, [pc, #220]	; (4092a0 <usart_serial_init+0x210>)
  4091c4:	4b27      	ldr	r3, [pc, #156]	; (409264 <usart_serial_init+0x1d4>)
  4091c6:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM5, FLEXCOM_USART);
  4091c8:	4835      	ldr	r0, [pc, #212]	; (4092a0 <usart_serial_init+0x210>)
  4091ca:	2101      	movs	r1, #1
  4091cc:	4b26      	ldr	r3, [pc, #152]	; (409268 <usart_serial_init+0x1d8>)
  4091ce:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART5);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4091d0:	4b26      	ldr	r3, [pc, #152]	; (40926c <usart_serial_init+0x1dc>)
  4091d2:	4798      	blx	r3
  4091d4:	4602      	mov	r2, r0
  4091d6:	f107 0308 	add.w	r3, r7, #8
  4091da:	6878      	ldr	r0, [r7, #4]
  4091dc:	4619      	mov	r1, r3
  4091de:	4b24      	ldr	r3, [pc, #144]	; (409270 <usart_serial_init+0x1e0>)
  4091e0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4091e2:	6878      	ldr	r0, [r7, #4]
  4091e4:	4b23      	ldr	r3, [pc, #140]	; (409274 <usart_serial_init+0x1e4>)
  4091e6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4091e8:	6878      	ldr	r0, [r7, #4]
  4091ea:	4b23      	ldr	r3, [pc, #140]	; (409278 <usart_serial_init+0x1e8>)
  4091ec:	4798      	blx	r3
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  4091ee:	687b      	ldr	r3, [r7, #4]
  4091f0:	4a2c      	ldr	r2, [pc, #176]	; (4092a4 <usart_serial_init+0x214>)
  4091f2:	4293      	cmp	r3, r2
  4091f4:	d115      	bne.n	409222 <usart_serial_init+0x192>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM6);
  4091f6:	482c      	ldr	r0, [pc, #176]	; (4092a8 <usart_serial_init+0x218>)
  4091f8:	4b1a      	ldr	r3, [pc, #104]	; (409264 <usart_serial_init+0x1d4>)
  4091fa:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM6, FLEXCOM_USART);
  4091fc:	482a      	ldr	r0, [pc, #168]	; (4092a8 <usart_serial_init+0x218>)
  4091fe:	2101      	movs	r1, #1
  409200:	4b19      	ldr	r3, [pc, #100]	; (409268 <usart_serial_init+0x1d8>)
  409202:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART6);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  409204:	4b19      	ldr	r3, [pc, #100]	; (40926c <usart_serial_init+0x1dc>)
  409206:	4798      	blx	r3
  409208:	4602      	mov	r2, r0
  40920a:	f107 0308 	add.w	r3, r7, #8
  40920e:	6878      	ldr	r0, [r7, #4]
  409210:	4619      	mov	r1, r3
  409212:	4b17      	ldr	r3, [pc, #92]	; (409270 <usart_serial_init+0x1e0>)
  409214:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  409216:	6878      	ldr	r0, [r7, #4]
  409218:	4b16      	ldr	r3, [pc, #88]	; (409274 <usart_serial_init+0x1e4>)
  40921a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40921c:	6878      	ldr	r0, [r7, #4]
  40921e:	4b16      	ldr	r3, [pc, #88]	; (409278 <usart_serial_init+0x1e8>)
  409220:	4798      	blx	r3
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  409222:	687b      	ldr	r3, [r7, #4]
  409224:	4a21      	ldr	r2, [pc, #132]	; (4092ac <usart_serial_init+0x21c>)
  409226:	4293      	cmp	r3, r2
  409228:	d115      	bne.n	409256 <usart_serial_init+0x1c6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM7);
  40922a:	4821      	ldr	r0, [pc, #132]	; (4092b0 <usart_serial_init+0x220>)
  40922c:	4b0d      	ldr	r3, [pc, #52]	; (409264 <usart_serial_init+0x1d4>)
  40922e:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM7, FLEXCOM_USART);
  409230:	481f      	ldr	r0, [pc, #124]	; (4092b0 <usart_serial_init+0x220>)
  409232:	2101      	movs	r1, #1
  409234:	4b0c      	ldr	r3, [pc, #48]	; (409268 <usart_serial_init+0x1d8>)
  409236:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART7);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  409238:	4b0c      	ldr	r3, [pc, #48]	; (40926c <usart_serial_init+0x1dc>)
  40923a:	4798      	blx	r3
  40923c:	4602      	mov	r2, r0
  40923e:	f107 0308 	add.w	r3, r7, #8
  409242:	6878      	ldr	r0, [r7, #4]
  409244:	4619      	mov	r1, r3
  409246:	4b0a      	ldr	r3, [pc, #40]	; (409270 <usart_serial_init+0x1e0>)
  409248:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40924a:	6878      	ldr	r0, [r7, #4]
  40924c:	4b09      	ldr	r3, [pc, #36]	; (409274 <usart_serial_init+0x1e4>)
  40924e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  409250:	6878      	ldr	r0, [r7, #4]
  409252:	4b09      	ldr	r3, [pc, #36]	; (409278 <usart_serial_init+0x1e8>)
  409254:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  409256:	3720      	adds	r7, #32
  409258:	46bd      	mov	sp, r7
  40925a:	bd80      	pop	{r7, pc}
  40925c:	4000c200 	.word	0x4000c200
  409260:	4000c000 	.word	0x4000c000
  409264:	00406065 	.word	0x00406065
  409268:	004061cd 	.word	0x004061cd
  40926c:	00409031 	.word	0x00409031
  409270:	004087cd 	.word	0x004087cd
  409274:	00408891 	.word	0x00408891
  409278:	004088d9 	.word	0x004088d9
  40927c:	40020200 	.word	0x40020200
  409280:	40020000 	.word	0x40020000
  409284:	40024200 	.word	0x40024200
  409288:	40024000 	.word	0x40024000
  40928c:	40018200 	.word	0x40018200
  409290:	40018000 	.word	0x40018000
  409294:	4001c200 	.word	0x4001c200
  409298:	4001c000 	.word	0x4001c000
  40929c:	40008200 	.word	0x40008200
  4092a0:	40008000 	.word	0x40008000
  4092a4:	40040200 	.word	0x40040200
  4092a8:	40040000 	.word	0x40040000
  4092ac:	40034200 	.word	0x40034200
  4092b0:	40034000 	.word	0x40034000

004092b4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4092b4:	b580      	push	{r7, lr}
  4092b6:	b082      	sub	sp, #8
  4092b8:	af00      	add	r7, sp, #0
  4092ba:	6078      	str	r0, [r7, #4]
  4092bc:	460b      	mov	r3, r1
  4092be:	70fb      	strb	r3, [r7, #3]
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4092c0:	687b      	ldr	r3, [r7, #4]
  4092c2:	4a3e      	ldr	r2, [pc, #248]	; (4093bc <usart_serial_putchar+0x108>)
  4092c4:	4293      	cmp	r3, r2
  4092c6:	d10a      	bne.n	4092de <usart_serial_putchar+0x2a>
		while (usart_write(p_usart, c)!=0);
  4092c8:	bf00      	nop
  4092ca:	78fb      	ldrb	r3, [r7, #3]
  4092cc:	6878      	ldr	r0, [r7, #4]
  4092ce:	4619      	mov	r1, r3
  4092d0:	4b3b      	ldr	r3, [pc, #236]	; (4093c0 <usart_serial_putchar+0x10c>)
  4092d2:	4798      	blx	r3
  4092d4:	4603      	mov	r3, r0
  4092d6:	2b00      	cmp	r3, #0
  4092d8:	d1f7      	bne.n	4092ca <usart_serial_putchar+0x16>
		return 1;
  4092da:	2301      	movs	r3, #1
  4092dc:	e069      	b.n	4093b2 <usart_serial_putchar+0xfe>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4092de:	687b      	ldr	r3, [r7, #4]
  4092e0:	4a38      	ldr	r2, [pc, #224]	; (4093c4 <usart_serial_putchar+0x110>)
  4092e2:	4293      	cmp	r3, r2
  4092e4:	d10a      	bne.n	4092fc <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
  4092e6:	bf00      	nop
  4092e8:	78fb      	ldrb	r3, [r7, #3]
  4092ea:	6878      	ldr	r0, [r7, #4]
  4092ec:	4619      	mov	r1, r3
  4092ee:	4b34      	ldr	r3, [pc, #208]	; (4093c0 <usart_serial_putchar+0x10c>)
  4092f0:	4798      	blx	r3
  4092f2:	4603      	mov	r3, r0
  4092f4:	2b00      	cmp	r3, #0
  4092f6:	d1f7      	bne.n	4092e8 <usart_serial_putchar+0x34>
		return 1;
  4092f8:	2301      	movs	r3, #1
  4092fa:	e05a      	b.n	4093b2 <usart_serial_putchar+0xfe>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4092fc:	687b      	ldr	r3, [r7, #4]
  4092fe:	4a32      	ldr	r2, [pc, #200]	; (4093c8 <usart_serial_putchar+0x114>)
  409300:	4293      	cmp	r3, r2
  409302:	d10a      	bne.n	40931a <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  409304:	bf00      	nop
  409306:	78fb      	ldrb	r3, [r7, #3]
  409308:	6878      	ldr	r0, [r7, #4]
  40930a:	4619      	mov	r1, r3
  40930c:	4b2c      	ldr	r3, [pc, #176]	; (4093c0 <usart_serial_putchar+0x10c>)
  40930e:	4798      	blx	r3
  409310:	4603      	mov	r3, r0
  409312:	2b00      	cmp	r3, #0
  409314:	d1f7      	bne.n	409306 <usart_serial_putchar+0x52>
		return 1;
  409316:	2301      	movs	r3, #1
  409318:	e04b      	b.n	4093b2 <usart_serial_putchar+0xfe>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  40931a:	687b      	ldr	r3, [r7, #4]
  40931c:	4a2b      	ldr	r2, [pc, #172]	; (4093cc <usart_serial_putchar+0x118>)
  40931e:	4293      	cmp	r3, r2
  409320:	d10a      	bne.n	409338 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  409322:	bf00      	nop
  409324:	78fb      	ldrb	r3, [r7, #3]
  409326:	6878      	ldr	r0, [r7, #4]
  409328:	4619      	mov	r1, r3
  40932a:	4b25      	ldr	r3, [pc, #148]	; (4093c0 <usart_serial_putchar+0x10c>)
  40932c:	4798      	blx	r3
  40932e:	4603      	mov	r3, r0
  409330:	2b00      	cmp	r3, #0
  409332:	d1f7      	bne.n	409324 <usart_serial_putchar+0x70>
		return 1;
  409334:	2301      	movs	r3, #1
  409336:	e03c      	b.n	4093b2 <usart_serial_putchar+0xfe>
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  409338:	687b      	ldr	r3, [r7, #4]
  40933a:	4a25      	ldr	r2, [pc, #148]	; (4093d0 <usart_serial_putchar+0x11c>)
  40933c:	4293      	cmp	r3, r2
  40933e:	d10a      	bne.n	409356 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  409340:	bf00      	nop
  409342:	78fb      	ldrb	r3, [r7, #3]
  409344:	6878      	ldr	r0, [r7, #4]
  409346:	4619      	mov	r1, r3
  409348:	4b1d      	ldr	r3, [pc, #116]	; (4093c0 <usart_serial_putchar+0x10c>)
  40934a:	4798      	blx	r3
  40934c:	4603      	mov	r3, r0
  40934e:	2b00      	cmp	r3, #0
  409350:	d1f7      	bne.n	409342 <usart_serial_putchar+0x8e>
		return 1;
  409352:	2301      	movs	r3, #1
  409354:	e02d      	b.n	4093b2 <usart_serial_putchar+0xfe>
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  409356:	687b      	ldr	r3, [r7, #4]
  409358:	4a1e      	ldr	r2, [pc, #120]	; (4093d4 <usart_serial_putchar+0x120>)
  40935a:	4293      	cmp	r3, r2
  40935c:	d10a      	bne.n	409374 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  40935e:	bf00      	nop
  409360:	78fb      	ldrb	r3, [r7, #3]
  409362:	6878      	ldr	r0, [r7, #4]
  409364:	4619      	mov	r1, r3
  409366:	4b16      	ldr	r3, [pc, #88]	; (4093c0 <usart_serial_putchar+0x10c>)
  409368:	4798      	blx	r3
  40936a:	4603      	mov	r3, r0
  40936c:	2b00      	cmp	r3, #0
  40936e:	d1f7      	bne.n	409360 <usart_serial_putchar+0xac>
		return 1;
  409370:	2301      	movs	r3, #1
  409372:	e01e      	b.n	4093b2 <usart_serial_putchar+0xfe>
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  409374:	687b      	ldr	r3, [r7, #4]
  409376:	4a18      	ldr	r2, [pc, #96]	; (4093d8 <usart_serial_putchar+0x124>)
  409378:	4293      	cmp	r3, r2
  40937a:	d10a      	bne.n	409392 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  40937c:	bf00      	nop
  40937e:	78fb      	ldrb	r3, [r7, #3]
  409380:	6878      	ldr	r0, [r7, #4]
  409382:	4619      	mov	r1, r3
  409384:	4b0e      	ldr	r3, [pc, #56]	; (4093c0 <usart_serial_putchar+0x10c>)
  409386:	4798      	blx	r3
  409388:	4603      	mov	r3, r0
  40938a:	2b00      	cmp	r3, #0
  40938c:	d1f7      	bne.n	40937e <usart_serial_putchar+0xca>
		return 1;
  40938e:	2301      	movs	r3, #1
  409390:	e00f      	b.n	4093b2 <usart_serial_putchar+0xfe>
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  409392:	687b      	ldr	r3, [r7, #4]
  409394:	4a11      	ldr	r2, [pc, #68]	; (4093dc <usart_serial_putchar+0x128>)
  409396:	4293      	cmp	r3, r2
  409398:	d10a      	bne.n	4093b0 <usart_serial_putchar+0xfc>
		while (usart_write(p_usart, c)!=0);
  40939a:	bf00      	nop
  40939c:	78fb      	ldrb	r3, [r7, #3]
  40939e:	6878      	ldr	r0, [r7, #4]
  4093a0:	4619      	mov	r1, r3
  4093a2:	4b07      	ldr	r3, [pc, #28]	; (4093c0 <usart_serial_putchar+0x10c>)
  4093a4:	4798      	blx	r3
  4093a6:	4603      	mov	r3, r0
  4093a8:	2b00      	cmp	r3, #0
  4093aa:	d1f7      	bne.n	40939c <usart_serial_putchar+0xe8>
		return 1;
  4093ac:	2301      	movs	r3, #1
  4093ae:	e000      	b.n	4093b2 <usart_serial_putchar+0xfe>
	}
# endif
#endif /* ifdef USART */

	return 0;
  4093b0:	2300      	movs	r3, #0
}
  4093b2:	4618      	mov	r0, r3
  4093b4:	3708      	adds	r7, #8
  4093b6:	46bd      	mov	sp, r7
  4093b8:	bd80      	pop	{r7, pc}
  4093ba:	bf00      	nop
  4093bc:	4000c200 	.word	0x4000c200
  4093c0:	004089e1 	.word	0x004089e1
  4093c4:	40020200 	.word	0x40020200
  4093c8:	40024200 	.word	0x40024200
  4093cc:	40018200 	.word	0x40018200
  4093d0:	4001c200 	.word	0x4001c200
  4093d4:	40008200 	.word	0x40008200
  4093d8:	40040200 	.word	0x40040200
  4093dc:	40034200 	.word	0x40034200

004093e0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4093e0:	b580      	push	{r7, lr}
  4093e2:	b084      	sub	sp, #16
  4093e4:	af00      	add	r7, sp, #0
  4093e6:	6078      	str	r0, [r7, #4]
  4093e8:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4093ea:	2300      	movs	r3, #0
  4093ec:	60fb      	str	r3, [r7, #12]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4093ee:	687b      	ldr	r3, [r7, #4]
  4093f0:	4a48      	ldr	r2, [pc, #288]	; (409514 <usart_serial_getchar+0x134>)
  4093f2:	4293      	cmp	r3, r2
  4093f4:	d10d      	bne.n	409412 <usart_serial_getchar+0x32>
		while (usart_read(p_usart, &val));
  4093f6:	bf00      	nop
  4093f8:	f107 030c 	add.w	r3, r7, #12
  4093fc:	6878      	ldr	r0, [r7, #4]
  4093fe:	4619      	mov	r1, r3
  409400:	4b45      	ldr	r3, [pc, #276]	; (409518 <usart_serial_getchar+0x138>)
  409402:	4798      	blx	r3
  409404:	4603      	mov	r3, r0
  409406:	2b00      	cmp	r3, #0
  409408:	d1f6      	bne.n	4093f8 <usart_serial_getchar+0x18>
		*data = (uint8_t)(val & 0xFF);
  40940a:	68fb      	ldr	r3, [r7, #12]
  40940c:	b2da      	uxtb	r2, r3
  40940e:	683b      	ldr	r3, [r7, #0]
  409410:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  409412:	687b      	ldr	r3, [r7, #4]
  409414:	4a41      	ldr	r2, [pc, #260]	; (40951c <usart_serial_getchar+0x13c>)
  409416:	4293      	cmp	r3, r2
  409418:	d10d      	bne.n	409436 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
  40941a:	bf00      	nop
  40941c:	f107 030c 	add.w	r3, r7, #12
  409420:	6878      	ldr	r0, [r7, #4]
  409422:	4619      	mov	r1, r3
  409424:	4b3c      	ldr	r3, [pc, #240]	; (409518 <usart_serial_getchar+0x138>)
  409426:	4798      	blx	r3
  409428:	4603      	mov	r3, r0
  40942a:	2b00      	cmp	r3, #0
  40942c:	d1f6      	bne.n	40941c <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
  40942e:	68fb      	ldr	r3, [r7, #12]
  409430:	b2da      	uxtb	r2, r3
  409432:	683b      	ldr	r3, [r7, #0]
  409434:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  409436:	687b      	ldr	r3, [r7, #4]
  409438:	4a39      	ldr	r2, [pc, #228]	; (409520 <usart_serial_getchar+0x140>)
  40943a:	4293      	cmp	r3, r2
  40943c:	d10d      	bne.n	40945a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
  40943e:	bf00      	nop
  409440:	f107 030c 	add.w	r3, r7, #12
  409444:	6878      	ldr	r0, [r7, #4]
  409446:	4619      	mov	r1, r3
  409448:	4b33      	ldr	r3, [pc, #204]	; (409518 <usart_serial_getchar+0x138>)
  40944a:	4798      	blx	r3
  40944c:	4603      	mov	r3, r0
  40944e:	2b00      	cmp	r3, #0
  409450:	d1f6      	bne.n	409440 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  409452:	68fb      	ldr	r3, [r7, #12]
  409454:	b2da      	uxtb	r2, r3
  409456:	683b      	ldr	r3, [r7, #0]
  409458:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  40945a:	687b      	ldr	r3, [r7, #4]
  40945c:	4a31      	ldr	r2, [pc, #196]	; (409524 <usart_serial_getchar+0x144>)
  40945e:	4293      	cmp	r3, r2
  409460:	d10d      	bne.n	40947e <usart_serial_getchar+0x9e>
		while (usart_read(p_usart, &val));
  409462:	bf00      	nop
  409464:	f107 030c 	add.w	r3, r7, #12
  409468:	6878      	ldr	r0, [r7, #4]
  40946a:	4619      	mov	r1, r3
  40946c:	4b2a      	ldr	r3, [pc, #168]	; (409518 <usart_serial_getchar+0x138>)
  40946e:	4798      	blx	r3
  409470:	4603      	mov	r3, r0
  409472:	2b00      	cmp	r3, #0
  409474:	d1f6      	bne.n	409464 <usart_serial_getchar+0x84>
		*data = (uint8_t)(val & 0xFF);
  409476:	68fb      	ldr	r3, [r7, #12]
  409478:	b2da      	uxtb	r2, r3
  40947a:	683b      	ldr	r3, [r7, #0]
  40947c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  40947e:	687b      	ldr	r3, [r7, #4]
  409480:	4a29      	ldr	r2, [pc, #164]	; (409528 <usart_serial_getchar+0x148>)
  409482:	4293      	cmp	r3, r2
  409484:	d10d      	bne.n	4094a2 <usart_serial_getchar+0xc2>
		while (usart_read(p_usart, &val));
  409486:	bf00      	nop
  409488:	f107 030c 	add.w	r3, r7, #12
  40948c:	6878      	ldr	r0, [r7, #4]
  40948e:	4619      	mov	r1, r3
  409490:	4b21      	ldr	r3, [pc, #132]	; (409518 <usart_serial_getchar+0x138>)
  409492:	4798      	blx	r3
  409494:	4603      	mov	r3, r0
  409496:	2b00      	cmp	r3, #0
  409498:	d1f6      	bne.n	409488 <usart_serial_getchar+0xa8>
		*data = (uint8_t)(val & 0xFF);
  40949a:	68fb      	ldr	r3, [r7, #12]
  40949c:	b2da      	uxtb	r2, r3
  40949e:	683b      	ldr	r3, [r7, #0]
  4094a0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  4094a2:	687b      	ldr	r3, [r7, #4]
  4094a4:	4a21      	ldr	r2, [pc, #132]	; (40952c <usart_serial_getchar+0x14c>)
  4094a6:	4293      	cmp	r3, r2
  4094a8:	d10d      	bne.n	4094c6 <usart_serial_getchar+0xe6>
		while (usart_read(p_usart, &val));
  4094aa:	bf00      	nop
  4094ac:	f107 030c 	add.w	r3, r7, #12
  4094b0:	6878      	ldr	r0, [r7, #4]
  4094b2:	4619      	mov	r1, r3
  4094b4:	4b18      	ldr	r3, [pc, #96]	; (409518 <usart_serial_getchar+0x138>)
  4094b6:	4798      	blx	r3
  4094b8:	4603      	mov	r3, r0
  4094ba:	2b00      	cmp	r3, #0
  4094bc:	d1f6      	bne.n	4094ac <usart_serial_getchar+0xcc>
		*data = (uint8_t)(val & 0xFF);
  4094be:	68fb      	ldr	r3, [r7, #12]
  4094c0:	b2da      	uxtb	r2, r3
  4094c2:	683b      	ldr	r3, [r7, #0]
  4094c4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  4094c6:	687b      	ldr	r3, [r7, #4]
  4094c8:	4a19      	ldr	r2, [pc, #100]	; (409530 <usart_serial_getchar+0x150>)
  4094ca:	4293      	cmp	r3, r2
  4094cc:	d10d      	bne.n	4094ea <usart_serial_getchar+0x10a>
		while (usart_read(p_usart, &val));
  4094ce:	bf00      	nop
  4094d0:	f107 030c 	add.w	r3, r7, #12
  4094d4:	6878      	ldr	r0, [r7, #4]
  4094d6:	4619      	mov	r1, r3
  4094d8:	4b0f      	ldr	r3, [pc, #60]	; (409518 <usart_serial_getchar+0x138>)
  4094da:	4798      	blx	r3
  4094dc:	4603      	mov	r3, r0
  4094de:	2b00      	cmp	r3, #0
  4094e0:	d1f6      	bne.n	4094d0 <usart_serial_getchar+0xf0>
		*data = (uint8_t)(val & 0xFF);
  4094e2:	68fb      	ldr	r3, [r7, #12]
  4094e4:	b2da      	uxtb	r2, r3
  4094e6:	683b      	ldr	r3, [r7, #0]
  4094e8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  4094ea:	687b      	ldr	r3, [r7, #4]
  4094ec:	4a11      	ldr	r2, [pc, #68]	; (409534 <usart_serial_getchar+0x154>)
  4094ee:	4293      	cmp	r3, r2
  4094f0:	d10d      	bne.n	40950e <usart_serial_getchar+0x12e>
		while (usart_read(p_usart, &val));
  4094f2:	bf00      	nop
  4094f4:	f107 030c 	add.w	r3, r7, #12
  4094f8:	6878      	ldr	r0, [r7, #4]
  4094fa:	4619      	mov	r1, r3
  4094fc:	4b06      	ldr	r3, [pc, #24]	; (409518 <usart_serial_getchar+0x138>)
  4094fe:	4798      	blx	r3
  409500:	4603      	mov	r3, r0
  409502:	2b00      	cmp	r3, #0
  409504:	d1f6      	bne.n	4094f4 <usart_serial_getchar+0x114>
		*data = (uint8_t)(val & 0xFF);
  409506:	68fb      	ldr	r3, [r7, #12]
  409508:	b2da      	uxtb	r2, r3
  40950a:	683b      	ldr	r3, [r7, #0]
  40950c:	701a      	strb	r2, [r3, #0]
	}
# endif
#endif /* ifdef USART */

}
  40950e:	3710      	adds	r7, #16
  409510:	46bd      	mov	sp, r7
  409512:	bd80      	pop	{r7, pc}
  409514:	4000c200 	.word	0x4000c200
  409518:	00408a15 	.word	0x00408a15
  40951c:	40020200 	.word	0x40020200
  409520:	40024200 	.word	0x40024200
  409524:	40018200 	.word	0x40018200
  409528:	4001c200 	.word	0x4001c200
  40952c:	40008200 	.word	0x40008200
  409530:	40040200 	.word	0x40040200
  409534:	40034200 	.word	0x40034200

00409538 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  409538:	b580      	push	{r7, lr}
  40953a:	b082      	sub	sp, #8
  40953c:	af00      	add	r7, sp, #0
  40953e:	6078      	str	r0, [r7, #4]
  409540:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  409542:	4a0f      	ldr	r2, [pc, #60]	; (409580 <stdio_serial_init+0x48>)
  409544:	687b      	ldr	r3, [r7, #4]
  409546:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  409548:	4b0e      	ldr	r3, [pc, #56]	; (409584 <stdio_serial_init+0x4c>)
  40954a:	4a0f      	ldr	r2, [pc, #60]	; (409588 <stdio_serial_init+0x50>)
  40954c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40954e:	4b0f      	ldr	r3, [pc, #60]	; (40958c <stdio_serial_init+0x54>)
  409550:	4a0f      	ldr	r2, [pc, #60]	; (409590 <stdio_serial_init+0x58>)
  409552:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  409554:	6878      	ldr	r0, [r7, #4]
  409556:	6839      	ldr	r1, [r7, #0]
  409558:	4b0e      	ldr	r3, [pc, #56]	; (409594 <stdio_serial_init+0x5c>)
  40955a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40955c:	4b0e      	ldr	r3, [pc, #56]	; (409598 <stdio_serial_init+0x60>)
  40955e:	681b      	ldr	r3, [r3, #0]
  409560:	689b      	ldr	r3, [r3, #8]
  409562:	4618      	mov	r0, r3
  409564:	2100      	movs	r1, #0
  409566:	4b0d      	ldr	r3, [pc, #52]	; (40959c <stdio_serial_init+0x64>)
  409568:	4798      	blx	r3
	setbuf(stdin, NULL);
  40956a:	4b0b      	ldr	r3, [pc, #44]	; (409598 <stdio_serial_init+0x60>)
  40956c:	681b      	ldr	r3, [r3, #0]
  40956e:	685b      	ldr	r3, [r3, #4]
  409570:	4618      	mov	r0, r3
  409572:	2100      	movs	r1, #0
  409574:	4b09      	ldr	r3, [pc, #36]	; (40959c <stdio_serial_init+0x64>)
  409576:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  409578:	3708      	adds	r7, #8
  40957a:	46bd      	mov	sp, r7
  40957c:	bd80      	pop	{r7, pc}
  40957e:	bf00      	nop
  409580:	20019f8c 	.word	0x20019f8c
  409584:	20019f88 	.word	0x20019f88
  409588:	004092b5 	.word	0x004092b5
  40958c:	20019f84 	.word	0x20019f84
  409590:	004093e1 	.word	0x004093e1
  409594:	00409091 	.word	0x00409091
  409598:	20000588 	.word	0x20000588
  40959c:	0040a949 	.word	0x0040a949

004095a0 <SysTick_Handler>:
static void prvSetupHardware(void);
/**
 * \brief Handler for System Tick interrupt.
 */
void SysTick_Handler(void)
{
  4095a0:	b580      	push	{r7, lr}
  4095a2:	af00      	add	r7, sp, #0
	xPortSysTickHandler();
  4095a4:	4b01      	ldr	r3, [pc, #4]	; (4095ac <SysTick_Handler+0xc>)
  4095a6:	4798      	blx	r3
}
  4095a8:	bd80      	pop	{r7, pc}
  4095aa:	bf00      	nop
  4095ac:	0040182d 	.word	0x0040182d

004095b0 <vApplicationStackOverflowHook>:
/**
 * \brief Called if stack overflow during execution
 */
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,signed char *pcTaskName)
{
  4095b0:	b580      	push	{r7, lr}
  4095b2:	b082      	sub	sp, #8
  4095b4:	af00      	add	r7, sp, #0
  4095b6:	6078      	str	r0, [r7, #4]
  4095b8:	6039      	str	r1, [r7, #0]
	printf("stack overflow\r\n");
  4095ba:	4802      	ldr	r0, [pc, #8]	; (4095c4 <vApplicationStackOverflowHook+0x14>)
  4095bc:	4b02      	ldr	r3, [pc, #8]	; (4095c8 <vApplicationStackOverflowHook+0x18>)
  4095be:	4798      	blx	r3
	for (;;) {
	}
  4095c0:	e7fe      	b.n	4095c0 <vApplicationStackOverflowHook+0x10>
  4095c2:	bf00      	nop
  4095c4:	0040d4c4 	.word	0x0040d4c4
  4095c8:	0040a111 	.word	0x0040a111

004095cc <vApplicationMallocFailedHook>:
extern void vApplicationTickHook(void)
{

}
extern void vApplicationMallocFailedHook(void)
{
  4095cc:	b580      	push	{r7, lr}
  4095ce:	af00      	add	r7, sp, #0
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
  4095d0:	4802      	ldr	r0, [pc, #8]	; (4095dc <vApplicationMallocFailedHook+0x10>)
  4095d2:	216f      	movs	r1, #111	; 0x6f
  4095d4:	4b02      	ldr	r3, [pc, #8]	; (4095e0 <vApplicationMallocFailedHook+0x14>)
  4095d6:	4798      	blx	r3
}
  4095d8:	bd80      	pop	{r7, pc}
  4095da:	bf00      	nop
  4095dc:	0040d4d8 	.word	0x0040d4d8
  4095e0:	00409705 	.word	0x00409705

004095e4 <configure_console>:

/**
 *  \brief Configure UART console.
 */
static void configure_console(void)
{
  4095e4:	b590      	push	{r4, r7, lr}
  4095e6:	b085      	sub	sp, #20
  4095e8:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  4095ea:	4b08      	ldr	r3, [pc, #32]	; (40960c <configure_console+0x28>)
  4095ec:	463c      	mov	r4, r7
  4095ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4095f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits = CONF_UART_STOP_BITS,
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  4095f4:	2014      	movs	r0, #20
  4095f6:	4b06      	ldr	r3, [pc, #24]	; (409610 <configure_console+0x2c>)
  4095f8:	4798      	blx	r3
	stdio_serial_init(CONF_UART_CONSOLE, &uart_serial_options);
  4095fa:	463b      	mov	r3, r7
  4095fc:	4805      	ldr	r0, [pc, #20]	; (409614 <configure_console+0x30>)
  4095fe:	4619      	mov	r1, r3
  409600:	4b05      	ldr	r3, [pc, #20]	; (409618 <configure_console+0x34>)
  409602:	4798      	blx	r3
	
}
  409604:	3714      	adds	r7, #20
  409606:	46bd      	mov	sp, r7
  409608:	bd90      	pop	{r4, r7, pc}
  40960a:	bf00      	nop
  40960c:	0040d4e8 	.word	0x0040d4e8
  409610:	00409045 	.word	0x00409045
  409614:	4001c200 	.word	0x4001c200
  409618:	00409539 	.word	0x00409539

0040961c <prvSetupHardware>:
static void prvSetupHardware(void)
{
  40961c:	b580      	push	{r7, lr}
  40961e:	af00      	add	r7, sp, #0
	/* Initialize the synchronous clock system to the default configuration
	   set in conf_clock.h.
	   \note All non-essential peripheral clocks are initially disabled. */
	sysclk_init();
  409620:	4b0c      	ldr	r3, [pc, #48]	; (409654 <prvSetupHardware+0x38>)
  409622:	4798      	blx	r3
	
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
  409624:	2000      	movs	r0, #0
  409626:	4b0c      	ldr	r3, [pc, #48]	; (409658 <prvSetupHardware+0x3c>)
  409628:	4798      	blx	r3
		
	/* Initialize the resources used by this example to the default
	   configuration set in conf_board.h */
	board_init();
  40962a:	4b0c      	ldr	r3, [pc, #48]	; (40965c <prvSetupHardware+0x40>)
  40962c:	4798      	blx	r3
	
	configure_console();
  40962e:	4b0c      	ldr	r3, [pc, #48]	; (409660 <prvSetupHardware+0x44>)
  409630:	4798      	blx	r3
	
	puts(STRING_HEADER);
  409632:	480c      	ldr	r0, [pc, #48]	; (409664 <prvSetupHardware+0x48>)
  409634:	4b0c      	ldr	r3, [pc, #48]	; (409668 <prvSetupHardware+0x4c>)
  409636:	4798      	blx	r3
	
	//tSensor_serial_init();
	
	/* Initialize interrupts */
	irq_initialize_vectors();
	cpu_irq_enable();
  409638:	4b0c      	ldr	r3, [pc, #48]	; (40966c <prvSetupHardware+0x50>)
  40963a:	2201      	movs	r2, #1
  40963c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40963e:	f3bf 8f5f 	dmb	sy
  409642:	b662      	cpsie	i

	/* Initialize the sleep manager, lock initial mode. */
	sleepmgr_init();
  409644:	4b0a      	ldr	r3, [pc, #40]	; (409670 <prvSetupHardware+0x54>)
  409646:	4798      	blx	r3
	/* Initialize the user interface */
	//ui_init();

	/* Start USB host stack */
	//uhc_start();
	wifi_serial_init(BIT_RATE_3686400);
  409648:	f44f 1061 	mov.w	r0, #3686400	; 0x384000
  40964c:	4b09      	ldr	r3, [pc, #36]	; (409674 <prvSetupHardware+0x58>)
  40964e:	4798      	blx	r3
	
}
  409650:	bd80      	pop	{r7, pc}
  409652:	bf00      	nop
  409654:	00404199 	.word	0x00404199
  409658:	00408f59 	.word	0x00408f59
  40965c:	00405e71 	.word	0x00405e71
  409660:	004095e5 	.word	0x004095e5
  409664:	0040d4f8 	.word	0x0040d4f8
  409668:	0040a915 	.word	0x0040a915
  40966c:	2000013c 	.word	0x2000013c
  409670:	0040905d 	.word	0x0040905d
  409674:	0040075d 	.word	0x0040075d

00409678 <main>:
/*! \brief Main function. Execution starts here.
 */
int main(void)
{
  409678:	b590      	push	{r4, r7, lr}
  40967a:	b085      	sub	sp, #20
  40967c:	af04      	add	r7, sp, #16
	/* Prepare the hardware to run this demo. */
	prvSetupHardware();
  40967e:	4b17      	ldr	r3, [pc, #92]	; (4096dc <main+0x64>)
  409680:	4798      	blx	r3

	
	//task for processing Data from WIFI
	if (xTaskCreate(wifi_task, "Wifi", STACK_SIZE_WIFI_TASK, NULL, tskIDLE_PRIORITY + 4, NULL)!=pdPASS){
  409682:	2304      	movs	r3, #4
  409684:	9300      	str	r3, [sp, #0]
  409686:	2300      	movs	r3, #0
  409688:	9301      	str	r3, [sp, #4]
  40968a:	2300      	movs	r3, #0
  40968c:	9302      	str	r3, [sp, #8]
  40968e:	2300      	movs	r3, #0
  409690:	9303      	str	r3, [sp, #12]
  409692:	4813      	ldr	r0, [pc, #76]	; (4096e0 <main+0x68>)
  409694:	4913      	ldr	r1, [pc, #76]	; (4096e4 <main+0x6c>)
  409696:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40969a:	2300      	movs	r3, #0
  40969c:	4c12      	ldr	r4, [pc, #72]	; (4096e8 <main+0x70>)
  40969e:	47a0      	blx	r4
  4096a0:	4603      	mov	r3, r0
  4096a2:	2b01      	cmp	r3, #1
  4096a4:	d002      	beq.n	4096ac <main+0x34>
		printf("Failed to create taskWifi task\r\n");
  4096a6:	4811      	ldr	r0, [pc, #68]	; (4096ec <main+0x74>)
  4096a8:	4b11      	ldr	r3, [pc, #68]	; (4096f0 <main+0x78>)
  4096aa:	4798      	blx	r3
	}

	//task for processing Camera Data
	if (xTaskCreate(taskCamera, "Camera", STACK_SIZE_CAMERA_TASK, NULL, tskIDLE_PRIORITY + 3, NULL)!=pdPASS){
  4096ac:	2303      	movs	r3, #3
  4096ae:	9300      	str	r3, [sp, #0]
  4096b0:	2300      	movs	r3, #0
  4096b2:	9301      	str	r3, [sp, #4]
  4096b4:	2300      	movs	r3, #0
  4096b6:	9302      	str	r3, [sp, #8]
  4096b8:	2300      	movs	r3, #0
  4096ba:	9303      	str	r3, [sp, #12]
  4096bc:	480d      	ldr	r0, [pc, #52]	; (4096f4 <main+0x7c>)
  4096be:	490e      	ldr	r1, [pc, #56]	; (4096f8 <main+0x80>)
  4096c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4096c4:	2300      	movs	r3, #0
  4096c6:	4c08      	ldr	r4, [pc, #32]	; (4096e8 <main+0x70>)
  4096c8:	47a0      	blx	r4
  4096ca:	4603      	mov	r3, r0
  4096cc:	2b01      	cmp	r3, #1
  4096ce:	d002      	beq.n	4096d6 <main+0x5e>
		printf("Failed to create Monitor task\r\n");
  4096d0:	480a      	ldr	r0, [pc, #40]	; (4096fc <main+0x84>)
  4096d2:	4b07      	ldr	r3, [pc, #28]	; (4096f0 <main+0x78>)
  4096d4:	4798      	blx	r3
	/*if (xTaskCreate(taskTSensor, "TSensor", STACK_SIZE_TSENSOR_TASK, NULL, tskIDLE_PRIORITY + 2, NULL)!=pdPASS){
		printf("Failed to create Temperature Sensor task\r\n");
	}*/
		
	/* Start the RTOS scheduler. */
	vTaskStartScheduler();
  4096d6:	4b0a      	ldr	r3, [pc, #40]	; (409700 <main+0x88>)
  4096d8:	4798      	blx	r3
    
	/* The main loop manages only the power mode
	   because the USB management is done by interrupt */
	while (true) {
		//sleepmgr_enter_sleep();
	}
  4096da:	e7fe      	b.n	4096da <main+0x62>
  4096dc:	0040961d 	.word	0x0040961d
  4096e0:	00401129 	.word	0x00401129
  4096e4:	0040d550 	.word	0x0040d550
  4096e8:	00402351 	.word	0x00402351
  4096ec:	0040d558 	.word	0x0040d558
  4096f0:	0040a111 	.word	0x0040a111
  4096f4:	004039a9 	.word	0x004039a9
  4096f8:	0040d57c 	.word	0x0040d57c
  4096fc:	0040d584 	.word	0x0040d584
  409700:	00402505 	.word	0x00402505

00409704 <assert_triggered>:
 *       - conf_foo.h   configuration of each module
 *       - ui.c        implement of user's interface (buttons, leds)
 */

void assert_triggered(const char *file, uint32_t line)
{
  409704:	b580      	push	{r7, lr}
  409706:	b086      	sub	sp, #24
  409708:	af00      	add	r7, sp, #0
  40970a:	6078      	str	r0, [r7, #4]
  40970c:	6039      	str	r1, [r7, #0]
	volatile uint32_t block_var = 0, line_in;
  40970e:	2300      	movs	r3, #0
  409710:	613b      	str	r3, [r7, #16]
	const char *file_in;

	/* These assignments are made to prevent the compiler optimizing the
	values away. */
	file_in = file;
  409712:	687b      	ldr	r3, [r7, #4]
  409714:	617b      	str	r3, [r7, #20]
	line_in = line;
  409716:	683b      	ldr	r3, [r7, #0]
  409718:	60fb      	str	r3, [r7, #12]
	(void) file_in;
	(void) line_in;
  40971a:	68fb      	ldr	r3, [r7, #12]

	taskENTER_CRITICAL();
  40971c:	4b05      	ldr	r3, [pc, #20]	; (409734 <assert_triggered+0x30>)
  40971e:	4798      	blx	r3
	{
		while (block_var == 0) {
  409720:	bf00      	nop
  409722:	693b      	ldr	r3, [r7, #16]
  409724:	2b00      	cmp	r3, #0
  409726:	d0fc      	beq.n	409722 <assert_triggered+0x1e>
			/* Set block_var to a non-zero value in the debugger to
			step out of this function. */
		}
	}
	taskEXIT_CRITICAL();
  409728:	4b03      	ldr	r3, [pc, #12]	; (409738 <assert_triggered+0x34>)
  40972a:	4798      	blx	r3
  40972c:	3718      	adds	r7, #24
  40972e:	46bd      	mov	sp, r7
  409730:	bd80      	pop	{r7, pc}
  409732:	bf00      	nop
  409734:	0040177d 	.word	0x0040177d
  409738:	00401799 	.word	0x00401799

0040973c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40973c:	b480      	push	{r7}
  40973e:	b083      	sub	sp, #12
  409740:	af00      	add	r7, sp, #0
  409742:	4603      	mov	r3, r0
  409744:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  409746:	4908      	ldr	r1, [pc, #32]	; (409768 <NVIC_EnableIRQ+0x2c>)
  409748:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40974c:	095b      	lsrs	r3, r3, #5
  40974e:	79fa      	ldrb	r2, [r7, #7]
  409750:	f002 021f 	and.w	r2, r2, #31
  409754:	2001      	movs	r0, #1
  409756:	fa00 f202 	lsl.w	r2, r0, r2
  40975a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40975e:	370c      	adds	r7, #12
  409760:	46bd      	mov	sp, r7
  409762:	f85d 7b04 	ldr.w	r7, [sp], #4
  409766:	4770      	bx	lr
  409768:	e000e100 	.word	0xe000e100

0040976c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40976c:	b480      	push	{r7}
  40976e:	b083      	sub	sp, #12
  409770:	af00      	add	r7, sp, #0
  409772:	4603      	mov	r3, r0
  409774:	6039      	str	r1, [r7, #0]
  409776:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  409778:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40977c:	2b00      	cmp	r3, #0
  40977e:	da0b      	bge.n	409798 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  409780:	490d      	ldr	r1, [pc, #52]	; (4097b8 <NVIC_SetPriority+0x4c>)
  409782:	79fb      	ldrb	r3, [r7, #7]
  409784:	f003 030f 	and.w	r3, r3, #15
  409788:	3b04      	subs	r3, #4
  40978a:	683a      	ldr	r2, [r7, #0]
  40978c:	b2d2      	uxtb	r2, r2
  40978e:	0112      	lsls	r2, r2, #4
  409790:	b2d2      	uxtb	r2, r2
  409792:	440b      	add	r3, r1
  409794:	761a      	strb	r2, [r3, #24]
  409796:	e009      	b.n	4097ac <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  409798:	4908      	ldr	r1, [pc, #32]	; (4097bc <NVIC_SetPriority+0x50>)
  40979a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40979e:	683a      	ldr	r2, [r7, #0]
  4097a0:	b2d2      	uxtb	r2, r2
  4097a2:	0112      	lsls	r2, r2, #4
  4097a4:	b2d2      	uxtb	r2, r2
  4097a6:	440b      	add	r3, r1
  4097a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4097ac:	370c      	adds	r7, #12
  4097ae:	46bd      	mov	sp, r7
  4097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4097b4:	4770      	bx	lr
  4097b6:	bf00      	nop
  4097b8:	e000ed00 	.word	0xe000ed00
  4097bc:	e000e100 	.word	0xe000e100

004097c0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4097c0:	b480      	push	{r7}
  4097c2:	b083      	sub	sp, #12
  4097c4:	af00      	add	r7, sp, #0
  4097c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4097c8:	687b      	ldr	r3, [r7, #4]
  4097ca:	2b07      	cmp	r3, #7
  4097cc:	d825      	bhi.n	40981a <osc_get_rate+0x5a>
  4097ce:	a201      	add	r2, pc, #4	; (adr r2, 4097d4 <osc_get_rate+0x14>)
  4097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4097d4:	004097f5 	.word	0x004097f5
  4097d8:	004097fb 	.word	0x004097fb
  4097dc:	00409801 	.word	0x00409801
  4097e0:	00409807 	.word	0x00409807
  4097e4:	0040980b 	.word	0x0040980b
  4097e8:	0040980f 	.word	0x0040980f
  4097ec:	00409813 	.word	0x00409813
  4097f0:	00409817 	.word	0x00409817
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4097f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4097f8:	e010      	b.n	40981c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4097fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4097fe:	e00d      	b.n	40981c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  409800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  409804:	e00a      	b.n	40981c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  409806:	4b08      	ldr	r3, [pc, #32]	; (409828 <osc_get_rate+0x68>)
  409808:	e008      	b.n	40981c <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  40980a:	4b08      	ldr	r3, [pc, #32]	; (40982c <osc_get_rate+0x6c>)
  40980c:	e006      	b.n	40981c <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  40980e:	4b08      	ldr	r3, [pc, #32]	; (409830 <osc_get_rate+0x70>)
  409810:	e004      	b.n	40981c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  409812:	2300      	movs	r3, #0
  409814:	e002      	b.n	40981c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  409816:	2300      	movs	r3, #0
  409818:	e000      	b.n	40981c <osc_get_rate+0x5c>
#endif
	}

	return 0;
  40981a:	2300      	movs	r3, #0
}
  40981c:	4618      	mov	r0, r3
  40981e:	370c      	adds	r7, #12
  409820:	46bd      	mov	sp, r7
  409822:	f85d 7b04 	ldr.w	r7, [sp], #4
  409826:	4770      	bx	lr
  409828:	007a1200 	.word	0x007a1200
  40982c:	00f42400 	.word	0x00f42400
  409830:	016e3600 	.word	0x016e3600

00409834 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  409834:	b580      	push	{r7, lr}
  409836:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  409838:	2001      	movs	r0, #1
  40983a:	4b04      	ldr	r3, [pc, #16]	; (40984c <sysclk_get_main_hz+0x18>)
  40983c:	4798      	blx	r3
  40983e:	4602      	mov	r2, r0
  409840:	f640 3372 	movw	r3, #2930	; 0xb72
  409844:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  409848:	4618      	mov	r0, r3
  40984a:	bd80      	pop	{r7, pc}
  40984c:	004097c1 	.word	0x004097c1

00409850 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  409850:	b580      	push	{r7, lr}
  409852:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  409854:	4b02      	ldr	r3, [pc, #8]	; (409860 <sysclk_get_peripheral_hz+0x10>)
  409856:	4798      	blx	r3
  409858:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40985a:	4618      	mov	r0, r3
  40985c:	bd80      	pop	{r7, pc}
  40985e:	bf00      	nop
  409860:	00409835 	.word	0x00409835

00409864 <sysclk_get_peripheral_bus_hz>:
 * \param module Pointer to the module's base address.
 *
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
  409864:	b580      	push	{r7, lr}
  409866:	b082      	sub	sp, #8
  409868:	af00      	add	r7, sp, #0
  40986a:	6078      	str	r0, [r7, #4]
	UNUSED(module);
	return sysclk_get_peripheral_hz();
  40986c:	4b03      	ldr	r3, [pc, #12]	; (40987c <sysclk_get_peripheral_bus_hz+0x18>)
  40986e:	4798      	blx	r3
  409870:	4603      	mov	r3, r0
}
  409872:	4618      	mov	r0, r3
  409874:	3708      	adds	r7, #8
  409876:	46bd      	mov	sp, r7
  409878:	bd80      	pop	{r7, pc}
  40987a:	bf00      	nop
  40987c:	00409851 	.word	0x00409851

00409880 <FLEXCOM7_Handler>:
	.stop_bits = US_MR_NBSTOP_1_BIT,
	.channel_mode = US_MR_CHMODE_NORMAL,
};

ISR(USART_HANDLER)
{
  409880:	b580      	push	{r7, lr}
  409882:	b084      	sub	sp, #16
  409884:	af00      	add	r7, sp, #0
	uint32_t sr = usart_get_status(USART_BASE);
  409886:	4831      	ldr	r0, [pc, #196]	; (40994c <FLEXCOM7_Handler+0xcc>)
  409888:	4b31      	ldr	r3, [pc, #196]	; (409950 <FLEXCOM7_Handler+0xd0>)
  40988a:	4798      	blx	r3
  40988c:	60f8      	str	r0, [r7, #12]
	if (sr & US_CSR_RXRDY) {
  40988e:	68fb      	ldr	r3, [r7, #12]
  409890:	f003 0301 	and.w	r3, r3, #1
  409894:	2b00      	cmp	r3, #0
  409896:	d036      	beq.n	409906 <FLEXCOM7_Handler+0x86>
		/* Data received */
		ui_com_tx_start();
  409898:	4b2e      	ldr	r3, [pc, #184]	; (409954 <FLEXCOM7_Handler+0xd4>)
  40989a:	4798      	blx	r3
		uint32_t value;
		bool b_error = usart_read(USART_BASE, &value) ||
  40989c:	463b      	mov	r3, r7
  40989e:	482b      	ldr	r0, [pc, #172]	; (40994c <FLEXCOM7_Handler+0xcc>)
  4098a0:	4619      	mov	r1, r3
  4098a2:	4b2d      	ldr	r3, [pc, #180]	; (409958 <FLEXCOM7_Handler+0xd8>)
  4098a4:	4798      	blx	r3
  4098a6:	4603      	mov	r3, r0
  4098a8:	2b00      	cmp	r3, #0
  4098aa:	d104      	bne.n	4098b6 <FLEXCOM7_Handler+0x36>
			(sr & (US_CSR_FRAME | US_CSR_TIMEOUT | US_CSR_PARE));
  4098ac:	68fb      	ldr	r3, [r7, #12]
  4098ae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
	uint32_t sr = usart_get_status(USART_BASE);
	if (sr & US_CSR_RXRDY) {
		/* Data received */
		ui_com_tx_start();
		uint32_t value;
		bool b_error = usart_read(USART_BASE, &value) ||
  4098b2:	2b00      	cmp	r3, #0
  4098b4:	d001      	beq.n	4098ba <FLEXCOM7_Handler+0x3a>
  4098b6:	2301      	movs	r3, #1
  4098b8:	e000      	b.n	4098bc <FLEXCOM7_Handler+0x3c>
  4098ba:	2300      	movs	r3, #0
  4098bc:	72fb      	strb	r3, [r7, #11]
  4098be:	7afb      	ldrb	r3, [r7, #11]
  4098c0:	f003 0301 	and.w	r3, r3, #1
  4098c4:	72fb      	strb	r3, [r7, #11]
			(sr & (US_CSR_FRAME | US_CSR_TIMEOUT | US_CSR_PARE));
		if (b_error) {
  4098c6:	7afb      	ldrb	r3, [r7, #11]
  4098c8:	2b00      	cmp	r3, #0
  4098ca:	d007      	beq.n	4098dc <FLEXCOM7_Handler+0x5c>
			usart_reset_rx(USART_BASE);
  4098cc:	481f      	ldr	r0, [pc, #124]	; (40994c <FLEXCOM7_Handler+0xcc>)
  4098ce:	4b23      	ldr	r3, [pc, #140]	; (40995c <FLEXCOM7_Handler+0xdc>)
  4098d0:	4798      	blx	r3
			usart_enable_rx(USART_BASE);
  4098d2:	481e      	ldr	r0, [pc, #120]	; (40994c <FLEXCOM7_Handler+0xcc>)
  4098d4:	4b22      	ldr	r3, [pc, #136]	; (409960 <FLEXCOM7_Handler+0xe0>)
  4098d6:	4798      	blx	r3
			ui_com_error();
  4098d8:	4b22      	ldr	r3, [pc, #136]	; (409964 <FLEXCOM7_Handler+0xe4>)
  4098da:	4798      	blx	r3
		}

		/* Transfer UART RX fifo to CDC TX */
		if (!uhi_cdc_is_tx_ready(0)) {
  4098dc:	2000      	movs	r0, #0
  4098de:	4b22      	ldr	r3, [pc, #136]	; (409968 <FLEXCOM7_Handler+0xe8>)
  4098e0:	4798      	blx	r3
  4098e2:	4603      	mov	r3, r0
  4098e4:	f083 0301 	eor.w	r3, r3, #1
  4098e8:	b2db      	uxtb	r3, r3
  4098ea:	2b00      	cmp	r3, #0
  4098ec:	d002      	beq.n	4098f4 <FLEXCOM7_Handler+0x74>
			/* Fifo full */
			ui_com_overflow();
  4098ee:	4b1f      	ldr	r3, [pc, #124]	; (40996c <FLEXCOM7_Handler+0xec>)
  4098f0:	4798      	blx	r3
  4098f2:	e004      	b.n	4098fe <FLEXCOM7_Handler+0x7e>
		} else {
			uhi_cdc_putc(0, value);
  4098f4:	683b      	ldr	r3, [r7, #0]
  4098f6:	2000      	movs	r0, #0
  4098f8:	4619      	mov	r1, r3
  4098fa:	4b1d      	ldr	r3, [pc, #116]	; (409970 <FLEXCOM7_Handler+0xf0>)
  4098fc:	4798      	blx	r3
		}

		ui_com_tx_stop();
  4098fe:	4b1d      	ldr	r3, [pc, #116]	; (409974 <FLEXCOM7_Handler+0xf4>)
  409900:	4798      	blx	r3
		return;
  409902:	bf00      	nop
  409904:	e01f      	b.n	409946 <FLEXCOM7_Handler+0xc6>
	}

	if (sr & US_CSR_TXRDY) {
  409906:	68fb      	ldr	r3, [r7, #12]
  409908:	f003 0302 	and.w	r3, r3, #2
  40990c:	2b00      	cmp	r3, #0
  40990e:	d01a      	beq.n	409946 <FLEXCOM7_Handler+0xc6>
		/* Data ready to be sent */
		if (uhi_cdc_is_rx_ready(0)) {
  409910:	2000      	movs	r0, #0
  409912:	4b19      	ldr	r3, [pc, #100]	; (409978 <FLEXCOM7_Handler+0xf8>)
  409914:	4798      	blx	r3
  409916:	4603      	mov	r3, r0
  409918:	2b00      	cmp	r3, #0
  40991a:	d00b      	beq.n	409934 <FLEXCOM7_Handler+0xb4>
			/* Transmit next data */
			ui_com_rx_start();
  40991c:	4b17      	ldr	r3, [pc, #92]	; (40997c <FLEXCOM7_Handler+0xfc>)
  40991e:	4798      	blx	r3
			int c = uhi_cdc_getc(0);
  409920:	2000      	movs	r0, #0
  409922:	4b17      	ldr	r3, [pc, #92]	; (409980 <FLEXCOM7_Handler+0x100>)
  409924:	4798      	blx	r3
  409926:	6078      	str	r0, [r7, #4]
			usart_write(USART_BASE, c);
  409928:	687b      	ldr	r3, [r7, #4]
  40992a:	4808      	ldr	r0, [pc, #32]	; (40994c <FLEXCOM7_Handler+0xcc>)
  40992c:	4619      	mov	r1, r3
  40992e:	4b15      	ldr	r3, [pc, #84]	; (409984 <FLEXCOM7_Handler+0x104>)
  409930:	4798      	blx	r3
  409932:	e008      	b.n	409946 <FLEXCOM7_Handler+0xc6>
		} else {
			/* Fifo empty then Stop UART transmission */
			usart_disable_tx(USART_BASE);
  409934:	4805      	ldr	r0, [pc, #20]	; (40994c <FLEXCOM7_Handler+0xcc>)
  409936:	4b14      	ldr	r3, [pc, #80]	; (409988 <FLEXCOM7_Handler+0x108>)
  409938:	4798      	blx	r3
			usart_disable_interrupt(USART_BASE, US_IDR_TXRDY);
  40993a:	4804      	ldr	r0, [pc, #16]	; (40994c <FLEXCOM7_Handler+0xcc>)
  40993c:	2102      	movs	r1, #2
  40993e:	4b13      	ldr	r3, [pc, #76]	; (40998c <FLEXCOM7_Handler+0x10c>)
  409940:	4798      	blx	r3
			ui_com_rx_stop();
  409942:	4b13      	ldr	r3, [pc, #76]	; (409990 <FLEXCOM7_Handler+0x110>)
  409944:	4798      	blx	r3
		}
	}
}
  409946:	3710      	adds	r7, #16
  409948:	46bd      	mov	sp, r7
  40994a:	bd80      	pop	{r7, pc}
  40994c:	40034200 	.word	0x40034200
  409950:	00408975 	.word	0x00408975
  409954:	00403e01 	.word	0x00403e01
  409958:	00408a15 	.word	0x00408a15
  40995c:	004088f1 	.word	0x004088f1
  409960:	004088d9 	.word	0x004088d9
  409964:	00403e45 	.word	0x00403e45
  409968:	0040505d 	.word	0x0040505d
  40996c:	00403e51 	.word	0x00403e51
  409970:	004050ad 	.word	0x004050ad
  409974:	00403e2d 	.word	0x00403e2d
  409978:	00404e5d 	.word	0x00404e5d
  40997c:	00403dbd 	.word	0x00403dbd
  409980:	00404ed1 	.word	0x00404ed1
  409984:	004089e1 	.word	0x004089e1
  409988:	004088a9 	.word	0x004088a9
  40998c:	00408941 	.word	0x00408941
  409990:	00403de9 	.word	0x00403de9

00409994 <uart_config>:
		usart_enable_interrupt(USART_BASE, US_IER_TXRDY);
	}
}

void uart_config(usb_cdc_line_coding_t *cfg)
{
  409994:	b580      	push	{r7, lr}
  409996:	b086      	sub	sp, #24
  409998:	af00      	add	r7, sp, #0
  40999a:	6078      	str	r0, [r7, #4]
	uint32_t stopbits, parity, databits;
	uint32_t imr;

	switch (cfg->bCharFormat) {
  40999c:	687b      	ldr	r3, [r7, #4]
  40999e:	791b      	ldrb	r3, [r3, #4]
  4099a0:	2b01      	cmp	r3, #1
  4099a2:	d005      	beq.n	4099b0 <uart_config+0x1c>
  4099a4:	2b02      	cmp	r3, #2
  4099a6:	d107      	bne.n	4099b8 <uart_config+0x24>
	case CDC_STOP_BITS_2:
		stopbits = US_MR_NBSTOP_2_BIT;
  4099a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4099ac:	617b      	str	r3, [r7, #20]
		break;
  4099ae:	e006      	b.n	4099be <uart_config+0x2a>

	case CDC_STOP_BITS_1_5:
		stopbits = US_MR_NBSTOP_1_5_BIT;
  4099b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4099b4:	617b      	str	r3, [r7, #20]
		break;
  4099b6:	e002      	b.n	4099be <uart_config+0x2a>

	case CDC_STOP_BITS_1:
	default:
		/* Default stop bit = 1 stop bit */
		stopbits = US_MR_NBSTOP_1_BIT;
  4099b8:	2300      	movs	r3, #0
  4099ba:	617b      	str	r3, [r7, #20]
		break;
  4099bc:	bf00      	nop
	}

	switch (cfg->bParityType) {
  4099be:	687b      	ldr	r3, [r7, #4]
  4099c0:	795b      	ldrb	r3, [r3, #5]
  4099c2:	3b01      	subs	r3, #1
  4099c4:	2b03      	cmp	r3, #3
  4099c6:	d81a      	bhi.n	4099fe <uart_config+0x6a>
  4099c8:	a201      	add	r2, pc, #4	; (adr r2, 4099d0 <uart_config+0x3c>)
  4099ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4099ce:	bf00      	nop
  4099d0:	004099e7 	.word	0x004099e7
  4099d4:	004099e1 	.word	0x004099e1
  4099d8:	004099ef 	.word	0x004099ef
  4099dc:	004099f7 	.word	0x004099f7
	case CDC_PAR_EVEN:
		parity = US_MR_PAR_EVEN;
  4099e0:	2300      	movs	r3, #0
  4099e2:	613b      	str	r3, [r7, #16]
		break;
  4099e4:	e00f      	b.n	409a06 <uart_config+0x72>

	case CDC_PAR_ODD:
		parity = US_MR_PAR_ODD;
  4099e6:	f44f 7300 	mov.w	r3, #512	; 0x200
  4099ea:	613b      	str	r3, [r7, #16]
		break;
  4099ec:	e00b      	b.n	409a06 <uart_config+0x72>

	case CDC_PAR_MARK:
		parity = US_MR_PAR_MARK;
  4099ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  4099f2:	613b      	str	r3, [r7, #16]
		break;
  4099f4:	e007      	b.n	409a06 <uart_config+0x72>

	case CDC_PAR_SPACE:
		parity = US_MR_PAR_SPACE;
  4099f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4099fa:	613b      	str	r3, [r7, #16]
		break;
  4099fc:	e003      	b.n	409a06 <uart_config+0x72>

	default:
	case CDC_PAR_NONE:
		parity = US_MR_PAR_NO;
  4099fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
  409a02:	613b      	str	r3, [r7, #16]
		break;
  409a04:	bf00      	nop
	}

	switch(cfg->bDataBits) {
  409a06:	687b      	ldr	r3, [r7, #4]
  409a08:	799b      	ldrb	r3, [r3, #6]
  409a0a:	3b05      	subs	r3, #5
  409a0c:	2b02      	cmp	r3, #2
  409a0e:	d804      	bhi.n	409a1a <uart_config+0x86>
	case 5: case 6: case 7:
		databits = cfg->bDataBits - 5;
  409a10:	687b      	ldr	r3, [r7, #4]
  409a12:	799b      	ldrb	r3, [r3, #6]
  409a14:	3b05      	subs	r3, #5
  409a16:	60fb      	str	r3, [r7, #12]
		break;
  409a18:	e002      	b.n	409a20 <uart_config+0x8c>
	default:
	case 8:
		databits = US_MR_CHRL_8_BIT;
  409a1a:	23c0      	movs	r3, #192	; 0xc0
  409a1c:	60fb      	str	r3, [r7, #12]
		break;
  409a1e:	bf00      	nop
	}

	/* Options for USART. */
	usart_options.baudrate = LE32_TO_CPU(cfg->dwDTERate);
  409a20:	687b      	ldr	r3, [r7, #4]
  409a22:	681b      	ldr	r3, [r3, #0]
  409a24:	4a16      	ldr	r2, [pc, #88]	; (409a80 <uart_config+0xec>)
  409a26:	6013      	str	r3, [r2, #0]
	usart_options.char_length = databits;
  409a28:	4a15      	ldr	r2, [pc, #84]	; (409a80 <uart_config+0xec>)
  409a2a:	68fb      	ldr	r3, [r7, #12]
  409a2c:	6053      	str	r3, [r2, #4]
	usart_options.parity_type = parity;
  409a2e:	4a14      	ldr	r2, [pc, #80]	; (409a80 <uart_config+0xec>)
  409a30:	693b      	ldr	r3, [r7, #16]
  409a32:	6093      	str	r3, [r2, #8]
	usart_options.stop_bits = stopbits;
  409a34:	4a12      	ldr	r2, [pc, #72]	; (409a80 <uart_config+0xec>)
  409a36:	697b      	ldr	r3, [r7, #20]
  409a38:	60d3      	str	r3, [r2, #12]
	usart_options.channel_mode = US_MR_CHMODE_NORMAL;
  409a3a:	4b11      	ldr	r3, [pc, #68]	; (409a80 <uart_config+0xec>)
  409a3c:	2200      	movs	r2, #0
  409a3e:	611a      	str	r2, [r3, #16]
	imr = usart_get_interrupt_mask(USART_BASE);
  409a40:	4810      	ldr	r0, [pc, #64]	; (409a84 <uart_config+0xf0>)
  409a42:	4b11      	ldr	r3, [pc, #68]	; (409a88 <uart_config+0xf4>)
  409a44:	4798      	blx	r3
  409a46:	60b8      	str	r0, [r7, #8]
	usart_disable_interrupt(USART_BASE, 0xFFFFFFFF);
  409a48:	480e      	ldr	r0, [pc, #56]	; (409a84 <uart_config+0xf0>)
  409a4a:	f04f 31ff 	mov.w	r1, #4294967295
  409a4e:	4b0f      	ldr	r3, [pc, #60]	; (409a8c <uart_config+0xf8>)
  409a50:	4798      	blx	r3
	usart_init_rs232(USART_BASE, &usart_options,
  409a52:	480c      	ldr	r0, [pc, #48]	; (409a84 <uart_config+0xf0>)
  409a54:	4b0e      	ldr	r3, [pc, #56]	; (409a90 <uart_config+0xfc>)
  409a56:	4798      	blx	r3
  409a58:	4603      	mov	r3, r0
  409a5a:	480a      	ldr	r0, [pc, #40]	; (409a84 <uart_config+0xf0>)
  409a5c:	4908      	ldr	r1, [pc, #32]	; (409a80 <uart_config+0xec>)
  409a5e:	461a      	mov	r2, r3
  409a60:	4b0c      	ldr	r3, [pc, #48]	; (409a94 <uart_config+0x100>)
  409a62:	4798      	blx	r3
			sysclk_get_peripheral_bus_hz(USART_BASE));
	/* Restore both RX and TX */
	usart_enable_tx(USART_BASE);
  409a64:	4807      	ldr	r0, [pc, #28]	; (409a84 <uart_config+0xf0>)
  409a66:	4b0c      	ldr	r3, [pc, #48]	; (409a98 <uart_config+0x104>)
  409a68:	4798      	blx	r3
	usart_enable_rx(USART_BASE);
  409a6a:	4806      	ldr	r0, [pc, #24]	; (409a84 <uart_config+0xf0>)
  409a6c:	4b0b      	ldr	r3, [pc, #44]	; (409a9c <uart_config+0x108>)
  409a6e:	4798      	blx	r3
	usart_enable_interrupt(USART_BASE, imr);
  409a70:	4804      	ldr	r0, [pc, #16]	; (409a84 <uart_config+0xf0>)
  409a72:	68b9      	ldr	r1, [r7, #8]
  409a74:	4b0a      	ldr	r3, [pc, #40]	; (409aa0 <uart_config+0x10c>)
  409a76:	4798      	blx	r3
}
  409a78:	3718      	adds	r7, #24
  409a7a:	46bd      	mov	sp, r7
  409a7c:	bd80      	pop	{r7, pc}
  409a7e:	bf00      	nop
  409a80:	20000144 	.word	0x20000144
  409a84:	40034200 	.word	0x40034200
  409a88:	0040895d 	.word	0x0040895d
  409a8c:	00408941 	.word	0x00408941
  409a90:	00409865 	.word	0x00409865
  409a94:	004087cd 	.word	0x004087cd
  409a98:	00408891 	.word	0x00408891
  409a9c:	004088d9 	.word	0x004088d9
  409aa0:	00408925 	.word	0x00408925

00409aa4 <uart_open>:

void uart_open(void)
{
  409aa4:	b580      	push	{r7, lr}
  409aa6:	af00      	add	r7, sp, #0
	/* IO is initialized in board init
	 * Enable interrupt with priority higher than USB
	 */
	NVIC_SetPriority(USART_INT_IRQn, USART_INT_LEVEL);
  409aa8:	2007      	movs	r0, #7
  409aaa:	2103      	movs	r1, #3
  409aac:	4b11      	ldr	r3, [pc, #68]	; (409af4 <uart_open+0x50>)
  409aae:	4798      	blx	r3
	NVIC_EnableIRQ(USART_INT_IRQn);
  409ab0:	2007      	movs	r0, #7
  409ab2:	4b11      	ldr	r3, [pc, #68]	; (409af8 <uart_open+0x54>)
  409ab4:	4798      	blx	r3

	/* Initialize it in RS232 mode. */
	USART_PERIPH_CLK_ENABLE();
  409ab6:	4811      	ldr	r0, [pc, #68]	; (409afc <uart_open+0x58>)
  409ab8:	4b11      	ldr	r3, [pc, #68]	; (409b00 <uart_open+0x5c>)
  409aba:	4798      	blx	r3
  409abc:	480f      	ldr	r0, [pc, #60]	; (409afc <uart_open+0x58>)
  409abe:	2101      	movs	r1, #1
  409ac0:	4b10      	ldr	r3, [pc, #64]	; (409b04 <uart_open+0x60>)
  409ac2:	4798      	blx	r3
	if (usart_init_rs232(USART_BASE, &usart_options,
  409ac4:	4810      	ldr	r0, [pc, #64]	; (409b08 <uart_open+0x64>)
  409ac6:	4b11      	ldr	r3, [pc, #68]	; (409b0c <uart_open+0x68>)
  409ac8:	4798      	blx	r3
  409aca:	4603      	mov	r3, r0
  409acc:	480e      	ldr	r0, [pc, #56]	; (409b08 <uart_open+0x64>)
  409ace:	4910      	ldr	r1, [pc, #64]	; (409b10 <uart_open+0x6c>)
  409ad0:	461a      	mov	r2, r3
  409ad2:	4b10      	ldr	r3, [pc, #64]	; (409b14 <uart_open+0x70>)
  409ad4:	4798      	blx	r3
  409ad6:	4603      	mov	r3, r0
  409ad8:	2b00      	cmp	r3, #0
  409ada:	d000      	beq.n	409ade <uart_open+0x3a>
			sysclk_get_peripheral_bus_hz(USART_BASE))) {
		return;
  409adc:	e009      	b.n	409af2 <uart_open+0x4e>

	/* Enable USART */
	USART_ENABLE();

	/* Enable both RX and TX */
	usart_enable_tx(USART_BASE);
  409ade:	480a      	ldr	r0, [pc, #40]	; (409b08 <uart_open+0x64>)
  409ae0:	4b0d      	ldr	r3, [pc, #52]	; (409b18 <uart_open+0x74>)
  409ae2:	4798      	blx	r3
	usart_enable_rx(USART_BASE);
  409ae4:	4808      	ldr	r0, [pc, #32]	; (409b08 <uart_open+0x64>)
  409ae6:	4b0d      	ldr	r3, [pc, #52]	; (409b1c <uart_open+0x78>)
  409ae8:	4798      	blx	r3
	/* Enable interrupts */
	usart_enable_interrupt(USART_BASE, US_IER_RXRDY | US_IER_TXRDY);
  409aea:	4807      	ldr	r0, [pc, #28]	; (409b08 <uart_open+0x64>)
  409aec:	2103      	movs	r1, #3
  409aee:	4b0c      	ldr	r3, [pc, #48]	; (409b20 <uart_open+0x7c>)
  409af0:	4798      	blx	r3
}
  409af2:	bd80      	pop	{r7, pc}
  409af4:	0040976d 	.word	0x0040976d
  409af8:	0040973d 	.word	0x0040973d
  409afc:	40034000 	.word	0x40034000
  409b00:	00406065 	.word	0x00406065
  409b04:	004061cd 	.word	0x004061cd
  409b08:	40034200 	.word	0x40034200
  409b0c:	00409865 	.word	0x00409865
  409b10:	20000144 	.word	0x20000144
  409b14:	004087cd 	.word	0x004087cd
  409b18:	00408891 	.word	0x00408891
  409b1c:	004088d9 	.word	0x004088d9
  409b20:	00408925 	.word	0x00408925

00409b24 <__aeabi_uldivmod>:
  409b24:	b953      	cbnz	r3, 409b3c <__aeabi_uldivmod+0x18>
  409b26:	b94a      	cbnz	r2, 409b3c <__aeabi_uldivmod+0x18>
  409b28:	2900      	cmp	r1, #0
  409b2a:	bf08      	it	eq
  409b2c:	2800      	cmpeq	r0, #0
  409b2e:	bf1c      	itt	ne
  409b30:	f04f 31ff 	movne.w	r1, #4294967295
  409b34:	f04f 30ff 	movne.w	r0, #4294967295
  409b38:	f000 b83c 	b.w	409bb4 <__aeabi_idiv0>
  409b3c:	b082      	sub	sp, #8
  409b3e:	46ec      	mov	ip, sp
  409b40:	e92d 5000 	stmdb	sp!, {ip, lr}
  409b44:	f000 f81e 	bl	409b84 <__gnu_uldivmod_helper>
  409b48:	f8dd e004 	ldr.w	lr, [sp, #4]
  409b4c:	b002      	add	sp, #8
  409b4e:	bc0c      	pop	{r2, r3}
  409b50:	4770      	bx	lr
  409b52:	bf00      	nop

00409b54 <__gnu_ldivmod_helper>:
  409b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409b58:	9c06      	ldr	r4, [sp, #24]
  409b5a:	4615      	mov	r5, r2
  409b5c:	4606      	mov	r6, r0
  409b5e:	460f      	mov	r7, r1
  409b60:	4698      	mov	r8, r3
  409b62:	f000 f829 	bl	409bb8 <__divdi3>
  409b66:	fb05 f301 	mul.w	r3, r5, r1
  409b6a:	fb00 3808 	mla	r8, r0, r8, r3
  409b6e:	fba5 2300 	umull	r2, r3, r5, r0
  409b72:	1ab2      	subs	r2, r6, r2
  409b74:	4443      	add	r3, r8
  409b76:	eb67 0303 	sbc.w	r3, r7, r3
  409b7a:	e9c4 2300 	strd	r2, r3, [r4]
  409b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409b82:	bf00      	nop

00409b84 <__gnu_uldivmod_helper>:
  409b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409b88:	9c06      	ldr	r4, [sp, #24]
  409b8a:	4690      	mov	r8, r2
  409b8c:	4606      	mov	r6, r0
  409b8e:	460f      	mov	r7, r1
  409b90:	461d      	mov	r5, r3
  409b92:	f000 f95f 	bl	409e54 <__udivdi3>
  409b96:	fb00 f505 	mul.w	r5, r0, r5
  409b9a:	fba0 2308 	umull	r2, r3, r0, r8
  409b9e:	fb08 5501 	mla	r5, r8, r1, r5
  409ba2:	1ab2      	subs	r2, r6, r2
  409ba4:	442b      	add	r3, r5
  409ba6:	eb67 0303 	sbc.w	r3, r7, r3
  409baa:	e9c4 2300 	strd	r2, r3, [r4]
  409bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409bb2:	bf00      	nop

00409bb4 <__aeabi_idiv0>:
  409bb4:	4770      	bx	lr
  409bb6:	bf00      	nop

00409bb8 <__divdi3>:
  409bb8:	2900      	cmp	r1, #0
  409bba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  409bbe:	f2c0 80a6 	blt.w	409d0e <__divdi3+0x156>
  409bc2:	2600      	movs	r6, #0
  409bc4:	2b00      	cmp	r3, #0
  409bc6:	f2c0 809c 	blt.w	409d02 <__divdi3+0x14a>
  409bca:	4688      	mov	r8, r1
  409bcc:	4694      	mov	ip, r2
  409bce:	469e      	mov	lr, r3
  409bd0:	4615      	mov	r5, r2
  409bd2:	4604      	mov	r4, r0
  409bd4:	460f      	mov	r7, r1
  409bd6:	2b00      	cmp	r3, #0
  409bd8:	d13d      	bne.n	409c56 <__divdi3+0x9e>
  409bda:	428a      	cmp	r2, r1
  409bdc:	d959      	bls.n	409c92 <__divdi3+0xda>
  409bde:	fab2 f382 	clz	r3, r2
  409be2:	b13b      	cbz	r3, 409bf4 <__divdi3+0x3c>
  409be4:	f1c3 0220 	rsb	r2, r3, #32
  409be8:	409f      	lsls	r7, r3
  409bea:	fa20 f202 	lsr.w	r2, r0, r2
  409bee:	409d      	lsls	r5, r3
  409bf0:	4317      	orrs	r7, r2
  409bf2:	409c      	lsls	r4, r3
  409bf4:	0c29      	lsrs	r1, r5, #16
  409bf6:	0c22      	lsrs	r2, r4, #16
  409bf8:	fbb7 fef1 	udiv	lr, r7, r1
  409bfc:	b2a8      	uxth	r0, r5
  409bfe:	fb01 771e 	mls	r7, r1, lr, r7
  409c02:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  409c06:	fb00 f30e 	mul.w	r3, r0, lr
  409c0a:	42bb      	cmp	r3, r7
  409c0c:	d90a      	bls.n	409c24 <__divdi3+0x6c>
  409c0e:	197f      	adds	r7, r7, r5
  409c10:	f10e 32ff 	add.w	r2, lr, #4294967295
  409c14:	f080 8105 	bcs.w	409e22 <__divdi3+0x26a>
  409c18:	42bb      	cmp	r3, r7
  409c1a:	f240 8102 	bls.w	409e22 <__divdi3+0x26a>
  409c1e:	f1ae 0e02 	sub.w	lr, lr, #2
  409c22:	442f      	add	r7, r5
  409c24:	1aff      	subs	r7, r7, r3
  409c26:	b2a4      	uxth	r4, r4
  409c28:	fbb7 f3f1 	udiv	r3, r7, r1
  409c2c:	fb01 7713 	mls	r7, r1, r3, r7
  409c30:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  409c34:	fb00 f003 	mul.w	r0, r0, r3
  409c38:	42b8      	cmp	r0, r7
  409c3a:	d908      	bls.n	409c4e <__divdi3+0x96>
  409c3c:	197f      	adds	r7, r7, r5
  409c3e:	f103 32ff 	add.w	r2, r3, #4294967295
  409c42:	f080 80f0 	bcs.w	409e26 <__divdi3+0x26e>
  409c46:	42b8      	cmp	r0, r7
  409c48:	f240 80ed 	bls.w	409e26 <__divdi3+0x26e>
  409c4c:	3b02      	subs	r3, #2
  409c4e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  409c52:	2200      	movs	r2, #0
  409c54:	e003      	b.n	409c5e <__divdi3+0xa6>
  409c56:	428b      	cmp	r3, r1
  409c58:	d90f      	bls.n	409c7a <__divdi3+0xc2>
  409c5a:	2200      	movs	r2, #0
  409c5c:	4613      	mov	r3, r2
  409c5e:	1c34      	adds	r4, r6, #0
  409c60:	bf18      	it	ne
  409c62:	2401      	movne	r4, #1
  409c64:	4260      	negs	r0, r4
  409c66:	f04f 0500 	mov.w	r5, #0
  409c6a:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  409c6e:	4058      	eors	r0, r3
  409c70:	4051      	eors	r1, r2
  409c72:	1900      	adds	r0, r0, r4
  409c74:	4169      	adcs	r1, r5
  409c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409c7a:	fab3 f283 	clz	r2, r3
  409c7e:	2a00      	cmp	r2, #0
  409c80:	f040 8086 	bne.w	409d90 <__divdi3+0x1d8>
  409c84:	428b      	cmp	r3, r1
  409c86:	d302      	bcc.n	409c8e <__divdi3+0xd6>
  409c88:	4584      	cmp	ip, r0
  409c8a:	f200 80db 	bhi.w	409e44 <__divdi3+0x28c>
  409c8e:	2301      	movs	r3, #1
  409c90:	e7e5      	b.n	409c5e <__divdi3+0xa6>
  409c92:	b912      	cbnz	r2, 409c9a <__divdi3+0xe2>
  409c94:	2301      	movs	r3, #1
  409c96:	fbb3 f5f2 	udiv	r5, r3, r2
  409c9a:	fab5 f085 	clz	r0, r5
  409c9e:	2800      	cmp	r0, #0
  409ca0:	d13b      	bne.n	409d1a <__divdi3+0x162>
  409ca2:	1b78      	subs	r0, r7, r5
  409ca4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  409ca8:	fa1f fc85 	uxth.w	ip, r5
  409cac:	2201      	movs	r2, #1
  409cae:	fbb0 f8fe 	udiv	r8, r0, lr
  409cb2:	0c21      	lsrs	r1, r4, #16
  409cb4:	fb0e 0718 	mls	r7, lr, r8, r0
  409cb8:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  409cbc:	fb0c f308 	mul.w	r3, ip, r8
  409cc0:	42bb      	cmp	r3, r7
  409cc2:	d907      	bls.n	409cd4 <__divdi3+0x11c>
  409cc4:	197f      	adds	r7, r7, r5
  409cc6:	f108 31ff 	add.w	r1, r8, #4294967295
  409cca:	d202      	bcs.n	409cd2 <__divdi3+0x11a>
  409ccc:	42bb      	cmp	r3, r7
  409cce:	f200 80bd 	bhi.w	409e4c <__divdi3+0x294>
  409cd2:	4688      	mov	r8, r1
  409cd4:	1aff      	subs	r7, r7, r3
  409cd6:	b2a4      	uxth	r4, r4
  409cd8:	fbb7 f3fe 	udiv	r3, r7, lr
  409cdc:	fb0e 7713 	mls	r7, lr, r3, r7
  409ce0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  409ce4:	fb0c fc03 	mul.w	ip, ip, r3
  409ce8:	45bc      	cmp	ip, r7
  409cea:	d907      	bls.n	409cfc <__divdi3+0x144>
  409cec:	197f      	adds	r7, r7, r5
  409cee:	f103 31ff 	add.w	r1, r3, #4294967295
  409cf2:	d202      	bcs.n	409cfa <__divdi3+0x142>
  409cf4:	45bc      	cmp	ip, r7
  409cf6:	f200 80a7 	bhi.w	409e48 <__divdi3+0x290>
  409cfa:	460b      	mov	r3, r1
  409cfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  409d00:	e7ad      	b.n	409c5e <__divdi3+0xa6>
  409d02:	4252      	negs	r2, r2
  409d04:	ea6f 0606 	mvn.w	r6, r6
  409d08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409d0c:	e75d      	b.n	409bca <__divdi3+0x12>
  409d0e:	4240      	negs	r0, r0
  409d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409d14:	f04f 36ff 	mov.w	r6, #4294967295
  409d18:	e754      	b.n	409bc4 <__divdi3+0xc>
  409d1a:	f1c0 0220 	rsb	r2, r0, #32
  409d1e:	fa24 f102 	lsr.w	r1, r4, r2
  409d22:	fa07 f300 	lsl.w	r3, r7, r0
  409d26:	4085      	lsls	r5, r0
  409d28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  409d2c:	40d7      	lsrs	r7, r2
  409d2e:	4319      	orrs	r1, r3
  409d30:	fbb7 f2fe 	udiv	r2, r7, lr
  409d34:	0c0b      	lsrs	r3, r1, #16
  409d36:	fb0e 7712 	mls	r7, lr, r2, r7
  409d3a:	fa1f fc85 	uxth.w	ip, r5
  409d3e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  409d42:	fb0c f702 	mul.w	r7, ip, r2
  409d46:	429f      	cmp	r7, r3
  409d48:	fa04 f400 	lsl.w	r4, r4, r0
  409d4c:	d907      	bls.n	409d5e <__divdi3+0x1a6>
  409d4e:	195b      	adds	r3, r3, r5
  409d50:	f102 30ff 	add.w	r0, r2, #4294967295
  409d54:	d274      	bcs.n	409e40 <__divdi3+0x288>
  409d56:	429f      	cmp	r7, r3
  409d58:	d972      	bls.n	409e40 <__divdi3+0x288>
  409d5a:	3a02      	subs	r2, #2
  409d5c:	442b      	add	r3, r5
  409d5e:	1bdf      	subs	r7, r3, r7
  409d60:	b289      	uxth	r1, r1
  409d62:	fbb7 f8fe 	udiv	r8, r7, lr
  409d66:	fb0e 7318 	mls	r3, lr, r8, r7
  409d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  409d6e:	fb0c f708 	mul.w	r7, ip, r8
  409d72:	429f      	cmp	r7, r3
  409d74:	d908      	bls.n	409d88 <__divdi3+0x1d0>
  409d76:	195b      	adds	r3, r3, r5
  409d78:	f108 31ff 	add.w	r1, r8, #4294967295
  409d7c:	d25c      	bcs.n	409e38 <__divdi3+0x280>
  409d7e:	429f      	cmp	r7, r3
  409d80:	d95a      	bls.n	409e38 <__divdi3+0x280>
  409d82:	f1a8 0802 	sub.w	r8, r8, #2
  409d86:	442b      	add	r3, r5
  409d88:	1bd8      	subs	r0, r3, r7
  409d8a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  409d8e:	e78e      	b.n	409cae <__divdi3+0xf6>
  409d90:	f1c2 0320 	rsb	r3, r2, #32
  409d94:	fa2c f103 	lsr.w	r1, ip, r3
  409d98:	fa0e fe02 	lsl.w	lr, lr, r2
  409d9c:	fa20 f703 	lsr.w	r7, r0, r3
  409da0:	ea41 0e0e 	orr.w	lr, r1, lr
  409da4:	fa08 f002 	lsl.w	r0, r8, r2
  409da8:	fa28 f103 	lsr.w	r1, r8, r3
  409dac:	ea4f 451e 	mov.w	r5, lr, lsr #16
  409db0:	4338      	orrs	r0, r7
  409db2:	fbb1 f8f5 	udiv	r8, r1, r5
  409db6:	0c03      	lsrs	r3, r0, #16
  409db8:	fb05 1118 	mls	r1, r5, r8, r1
  409dbc:	fa1f f78e 	uxth.w	r7, lr
  409dc0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  409dc4:	fb07 f308 	mul.w	r3, r7, r8
  409dc8:	428b      	cmp	r3, r1
  409dca:	fa0c fc02 	lsl.w	ip, ip, r2
  409dce:	d909      	bls.n	409de4 <__divdi3+0x22c>
  409dd0:	eb11 010e 	adds.w	r1, r1, lr
  409dd4:	f108 39ff 	add.w	r9, r8, #4294967295
  409dd8:	d230      	bcs.n	409e3c <__divdi3+0x284>
  409dda:	428b      	cmp	r3, r1
  409ddc:	d92e      	bls.n	409e3c <__divdi3+0x284>
  409dde:	f1a8 0802 	sub.w	r8, r8, #2
  409de2:	4471      	add	r1, lr
  409de4:	1ac9      	subs	r1, r1, r3
  409de6:	b280      	uxth	r0, r0
  409de8:	fbb1 f3f5 	udiv	r3, r1, r5
  409dec:	fb05 1113 	mls	r1, r5, r3, r1
  409df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409df4:	fb07 f703 	mul.w	r7, r7, r3
  409df8:	428f      	cmp	r7, r1
  409dfa:	d908      	bls.n	409e0e <__divdi3+0x256>
  409dfc:	eb11 010e 	adds.w	r1, r1, lr
  409e00:	f103 30ff 	add.w	r0, r3, #4294967295
  409e04:	d216      	bcs.n	409e34 <__divdi3+0x27c>
  409e06:	428f      	cmp	r7, r1
  409e08:	d914      	bls.n	409e34 <__divdi3+0x27c>
  409e0a:	3b02      	subs	r3, #2
  409e0c:	4471      	add	r1, lr
  409e0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  409e12:	1bc9      	subs	r1, r1, r7
  409e14:	fba3 890c 	umull	r8, r9, r3, ip
  409e18:	4549      	cmp	r1, r9
  409e1a:	d309      	bcc.n	409e30 <__divdi3+0x278>
  409e1c:	d005      	beq.n	409e2a <__divdi3+0x272>
  409e1e:	2200      	movs	r2, #0
  409e20:	e71d      	b.n	409c5e <__divdi3+0xa6>
  409e22:	4696      	mov	lr, r2
  409e24:	e6fe      	b.n	409c24 <__divdi3+0x6c>
  409e26:	4613      	mov	r3, r2
  409e28:	e711      	b.n	409c4e <__divdi3+0x96>
  409e2a:	4094      	lsls	r4, r2
  409e2c:	4544      	cmp	r4, r8
  409e2e:	d2f6      	bcs.n	409e1e <__divdi3+0x266>
  409e30:	3b01      	subs	r3, #1
  409e32:	e7f4      	b.n	409e1e <__divdi3+0x266>
  409e34:	4603      	mov	r3, r0
  409e36:	e7ea      	b.n	409e0e <__divdi3+0x256>
  409e38:	4688      	mov	r8, r1
  409e3a:	e7a5      	b.n	409d88 <__divdi3+0x1d0>
  409e3c:	46c8      	mov	r8, r9
  409e3e:	e7d1      	b.n	409de4 <__divdi3+0x22c>
  409e40:	4602      	mov	r2, r0
  409e42:	e78c      	b.n	409d5e <__divdi3+0x1a6>
  409e44:	4613      	mov	r3, r2
  409e46:	e70a      	b.n	409c5e <__divdi3+0xa6>
  409e48:	3b02      	subs	r3, #2
  409e4a:	e757      	b.n	409cfc <__divdi3+0x144>
  409e4c:	f1a8 0802 	sub.w	r8, r8, #2
  409e50:	442f      	add	r7, r5
  409e52:	e73f      	b.n	409cd4 <__divdi3+0x11c>

00409e54 <__udivdi3>:
  409e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409e58:	2b00      	cmp	r3, #0
  409e5a:	d144      	bne.n	409ee6 <__udivdi3+0x92>
  409e5c:	428a      	cmp	r2, r1
  409e5e:	4615      	mov	r5, r2
  409e60:	4604      	mov	r4, r0
  409e62:	d94f      	bls.n	409f04 <__udivdi3+0xb0>
  409e64:	fab2 f782 	clz	r7, r2
  409e68:	460e      	mov	r6, r1
  409e6a:	b14f      	cbz	r7, 409e80 <__udivdi3+0x2c>
  409e6c:	f1c7 0320 	rsb	r3, r7, #32
  409e70:	40b9      	lsls	r1, r7
  409e72:	fa20 f603 	lsr.w	r6, r0, r3
  409e76:	fa02 f507 	lsl.w	r5, r2, r7
  409e7a:	430e      	orrs	r6, r1
  409e7c:	fa00 f407 	lsl.w	r4, r0, r7
  409e80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  409e84:	0c23      	lsrs	r3, r4, #16
  409e86:	fbb6 f0fe 	udiv	r0, r6, lr
  409e8a:	b2af      	uxth	r7, r5
  409e8c:	fb0e 6110 	mls	r1, lr, r0, r6
  409e90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  409e94:	fb07 f100 	mul.w	r1, r7, r0
  409e98:	4299      	cmp	r1, r3
  409e9a:	d909      	bls.n	409eb0 <__udivdi3+0x5c>
  409e9c:	195b      	adds	r3, r3, r5
  409e9e:	f100 32ff 	add.w	r2, r0, #4294967295
  409ea2:	f080 80ec 	bcs.w	40a07e <__udivdi3+0x22a>
  409ea6:	4299      	cmp	r1, r3
  409ea8:	f240 80e9 	bls.w	40a07e <__udivdi3+0x22a>
  409eac:	3802      	subs	r0, #2
  409eae:	442b      	add	r3, r5
  409eb0:	1a5a      	subs	r2, r3, r1
  409eb2:	b2a4      	uxth	r4, r4
  409eb4:	fbb2 f3fe 	udiv	r3, r2, lr
  409eb8:	fb0e 2213 	mls	r2, lr, r3, r2
  409ebc:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  409ec0:	fb07 f703 	mul.w	r7, r7, r3
  409ec4:	4297      	cmp	r7, r2
  409ec6:	d908      	bls.n	409eda <__udivdi3+0x86>
  409ec8:	1952      	adds	r2, r2, r5
  409eca:	f103 31ff 	add.w	r1, r3, #4294967295
  409ece:	f080 80d8 	bcs.w	40a082 <__udivdi3+0x22e>
  409ed2:	4297      	cmp	r7, r2
  409ed4:	f240 80d5 	bls.w	40a082 <__udivdi3+0x22e>
  409ed8:	3b02      	subs	r3, #2
  409eda:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  409ede:	2600      	movs	r6, #0
  409ee0:	4631      	mov	r1, r6
  409ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409ee6:	428b      	cmp	r3, r1
  409ee8:	d847      	bhi.n	409f7a <__udivdi3+0x126>
  409eea:	fab3 f683 	clz	r6, r3
  409eee:	2e00      	cmp	r6, #0
  409ef0:	d148      	bne.n	409f84 <__udivdi3+0x130>
  409ef2:	428b      	cmp	r3, r1
  409ef4:	d302      	bcc.n	409efc <__udivdi3+0xa8>
  409ef6:	4282      	cmp	r2, r0
  409ef8:	f200 80cd 	bhi.w	40a096 <__udivdi3+0x242>
  409efc:	2001      	movs	r0, #1
  409efe:	4631      	mov	r1, r6
  409f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f04:	b912      	cbnz	r2, 409f0c <__udivdi3+0xb8>
  409f06:	2501      	movs	r5, #1
  409f08:	fbb5 f5f2 	udiv	r5, r5, r2
  409f0c:	fab5 f885 	clz	r8, r5
  409f10:	f1b8 0f00 	cmp.w	r8, #0
  409f14:	d177      	bne.n	40a006 <__udivdi3+0x1b2>
  409f16:	1b4a      	subs	r2, r1, r5
  409f18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  409f1c:	b2af      	uxth	r7, r5
  409f1e:	2601      	movs	r6, #1
  409f20:	fbb2 f0fe 	udiv	r0, r2, lr
  409f24:	0c23      	lsrs	r3, r4, #16
  409f26:	fb0e 2110 	mls	r1, lr, r0, r2
  409f2a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  409f2e:	fb07 f300 	mul.w	r3, r7, r0
  409f32:	428b      	cmp	r3, r1
  409f34:	d907      	bls.n	409f46 <__udivdi3+0xf2>
  409f36:	1949      	adds	r1, r1, r5
  409f38:	f100 32ff 	add.w	r2, r0, #4294967295
  409f3c:	d202      	bcs.n	409f44 <__udivdi3+0xf0>
  409f3e:	428b      	cmp	r3, r1
  409f40:	f200 80ba 	bhi.w	40a0b8 <__udivdi3+0x264>
  409f44:	4610      	mov	r0, r2
  409f46:	1ac9      	subs	r1, r1, r3
  409f48:	b2a4      	uxth	r4, r4
  409f4a:	fbb1 f3fe 	udiv	r3, r1, lr
  409f4e:	fb0e 1113 	mls	r1, lr, r3, r1
  409f52:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  409f56:	fb07 f703 	mul.w	r7, r7, r3
  409f5a:	42a7      	cmp	r7, r4
  409f5c:	d908      	bls.n	409f70 <__udivdi3+0x11c>
  409f5e:	1964      	adds	r4, r4, r5
  409f60:	f103 32ff 	add.w	r2, r3, #4294967295
  409f64:	f080 808f 	bcs.w	40a086 <__udivdi3+0x232>
  409f68:	42a7      	cmp	r7, r4
  409f6a:	f240 808c 	bls.w	40a086 <__udivdi3+0x232>
  409f6e:	3b02      	subs	r3, #2
  409f70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  409f74:	4631      	mov	r1, r6
  409f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f7a:	2600      	movs	r6, #0
  409f7c:	4630      	mov	r0, r6
  409f7e:	4631      	mov	r1, r6
  409f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f84:	f1c6 0420 	rsb	r4, r6, #32
  409f88:	fa22 f504 	lsr.w	r5, r2, r4
  409f8c:	40b3      	lsls	r3, r6
  409f8e:	432b      	orrs	r3, r5
  409f90:	fa20 fc04 	lsr.w	ip, r0, r4
  409f94:	fa01 f706 	lsl.w	r7, r1, r6
  409f98:	fa21 f504 	lsr.w	r5, r1, r4
  409f9c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  409fa0:	ea4c 0707 	orr.w	r7, ip, r7
  409fa4:	fbb5 f8fe 	udiv	r8, r5, lr
  409fa8:	0c39      	lsrs	r1, r7, #16
  409faa:	fb0e 5518 	mls	r5, lr, r8, r5
  409fae:	fa1f fc83 	uxth.w	ip, r3
  409fb2:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  409fb6:	fb0c f108 	mul.w	r1, ip, r8
  409fba:	42a9      	cmp	r1, r5
  409fbc:	fa02 f206 	lsl.w	r2, r2, r6
  409fc0:	d904      	bls.n	409fcc <__udivdi3+0x178>
  409fc2:	18ed      	adds	r5, r5, r3
  409fc4:	f108 34ff 	add.w	r4, r8, #4294967295
  409fc8:	d367      	bcc.n	40a09a <__udivdi3+0x246>
  409fca:	46a0      	mov	r8, r4
  409fcc:	1a6d      	subs	r5, r5, r1
  409fce:	b2bf      	uxth	r7, r7
  409fd0:	fbb5 f4fe 	udiv	r4, r5, lr
  409fd4:	fb0e 5514 	mls	r5, lr, r4, r5
  409fd8:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  409fdc:	fb0c fc04 	mul.w	ip, ip, r4
  409fe0:	458c      	cmp	ip, r1
  409fe2:	d904      	bls.n	409fee <__udivdi3+0x19a>
  409fe4:	18c9      	adds	r1, r1, r3
  409fe6:	f104 35ff 	add.w	r5, r4, #4294967295
  409fea:	d35c      	bcc.n	40a0a6 <__udivdi3+0x252>
  409fec:	462c      	mov	r4, r5
  409fee:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  409ff2:	ebcc 0101 	rsb	r1, ip, r1
  409ff6:	fba4 2302 	umull	r2, r3, r4, r2
  409ffa:	4299      	cmp	r1, r3
  409ffc:	d348      	bcc.n	40a090 <__udivdi3+0x23c>
  409ffe:	d044      	beq.n	40a08a <__udivdi3+0x236>
  40a000:	4620      	mov	r0, r4
  40a002:	2600      	movs	r6, #0
  40a004:	e76c      	b.n	409ee0 <__udivdi3+0x8c>
  40a006:	f1c8 0420 	rsb	r4, r8, #32
  40a00a:	fa01 f308 	lsl.w	r3, r1, r8
  40a00e:	fa05 f508 	lsl.w	r5, r5, r8
  40a012:	fa20 f704 	lsr.w	r7, r0, r4
  40a016:	40e1      	lsrs	r1, r4
  40a018:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40a01c:	431f      	orrs	r7, r3
  40a01e:	fbb1 f6fe 	udiv	r6, r1, lr
  40a022:	0c3a      	lsrs	r2, r7, #16
  40a024:	fb0e 1116 	mls	r1, lr, r6, r1
  40a028:	fa1f fc85 	uxth.w	ip, r5
  40a02c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40a030:	fb0c f206 	mul.w	r2, ip, r6
  40a034:	429a      	cmp	r2, r3
  40a036:	fa00 f408 	lsl.w	r4, r0, r8
  40a03a:	d907      	bls.n	40a04c <__udivdi3+0x1f8>
  40a03c:	195b      	adds	r3, r3, r5
  40a03e:	f106 31ff 	add.w	r1, r6, #4294967295
  40a042:	d237      	bcs.n	40a0b4 <__udivdi3+0x260>
  40a044:	429a      	cmp	r2, r3
  40a046:	d935      	bls.n	40a0b4 <__udivdi3+0x260>
  40a048:	3e02      	subs	r6, #2
  40a04a:	442b      	add	r3, r5
  40a04c:	1a9b      	subs	r3, r3, r2
  40a04e:	b2bf      	uxth	r7, r7
  40a050:	fbb3 f0fe 	udiv	r0, r3, lr
  40a054:	fb0e 3310 	mls	r3, lr, r0, r3
  40a058:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  40a05c:	fb0c f100 	mul.w	r1, ip, r0
  40a060:	4299      	cmp	r1, r3
  40a062:	d907      	bls.n	40a074 <__udivdi3+0x220>
  40a064:	195b      	adds	r3, r3, r5
  40a066:	f100 32ff 	add.w	r2, r0, #4294967295
  40a06a:	d221      	bcs.n	40a0b0 <__udivdi3+0x25c>
  40a06c:	4299      	cmp	r1, r3
  40a06e:	d91f      	bls.n	40a0b0 <__udivdi3+0x25c>
  40a070:	3802      	subs	r0, #2
  40a072:	442b      	add	r3, r5
  40a074:	1a5a      	subs	r2, r3, r1
  40a076:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  40a07a:	4667      	mov	r7, ip
  40a07c:	e750      	b.n	409f20 <__udivdi3+0xcc>
  40a07e:	4610      	mov	r0, r2
  40a080:	e716      	b.n	409eb0 <__udivdi3+0x5c>
  40a082:	460b      	mov	r3, r1
  40a084:	e729      	b.n	409eda <__udivdi3+0x86>
  40a086:	4613      	mov	r3, r2
  40a088:	e772      	b.n	409f70 <__udivdi3+0x11c>
  40a08a:	40b0      	lsls	r0, r6
  40a08c:	4290      	cmp	r0, r2
  40a08e:	d2b7      	bcs.n	40a000 <__udivdi3+0x1ac>
  40a090:	1e60      	subs	r0, r4, #1
  40a092:	2600      	movs	r6, #0
  40a094:	e724      	b.n	409ee0 <__udivdi3+0x8c>
  40a096:	4630      	mov	r0, r6
  40a098:	e722      	b.n	409ee0 <__udivdi3+0x8c>
  40a09a:	42a9      	cmp	r1, r5
  40a09c:	d995      	bls.n	409fca <__udivdi3+0x176>
  40a09e:	f1a8 0802 	sub.w	r8, r8, #2
  40a0a2:	441d      	add	r5, r3
  40a0a4:	e792      	b.n	409fcc <__udivdi3+0x178>
  40a0a6:	458c      	cmp	ip, r1
  40a0a8:	d9a0      	bls.n	409fec <__udivdi3+0x198>
  40a0aa:	3c02      	subs	r4, #2
  40a0ac:	4419      	add	r1, r3
  40a0ae:	e79e      	b.n	409fee <__udivdi3+0x19a>
  40a0b0:	4610      	mov	r0, r2
  40a0b2:	e7df      	b.n	40a074 <__udivdi3+0x220>
  40a0b4:	460e      	mov	r6, r1
  40a0b6:	e7c9      	b.n	40a04c <__udivdi3+0x1f8>
  40a0b8:	3802      	subs	r0, #2
  40a0ba:	4429      	add	r1, r5
  40a0bc:	e743      	b.n	409f46 <__udivdi3+0xf2>
  40a0be:	bf00      	nop

0040a0c0 <__libc_init_array>:
  40a0c0:	b570      	push	{r4, r5, r6, lr}
  40a0c2:	4e0f      	ldr	r6, [pc, #60]	; (40a100 <__libc_init_array+0x40>)
  40a0c4:	4d0f      	ldr	r5, [pc, #60]	; (40a104 <__libc_init_array+0x44>)
  40a0c6:	1b76      	subs	r6, r6, r5
  40a0c8:	10b6      	asrs	r6, r6, #2
  40a0ca:	bf18      	it	ne
  40a0cc:	2400      	movne	r4, #0
  40a0ce:	d005      	beq.n	40a0dc <__libc_init_array+0x1c>
  40a0d0:	3401      	adds	r4, #1
  40a0d2:	f855 3b04 	ldr.w	r3, [r5], #4
  40a0d6:	4798      	blx	r3
  40a0d8:	42a6      	cmp	r6, r4
  40a0da:	d1f9      	bne.n	40a0d0 <__libc_init_array+0x10>
  40a0dc:	4e0a      	ldr	r6, [pc, #40]	; (40a108 <__libc_init_array+0x48>)
  40a0de:	4d0b      	ldr	r5, [pc, #44]	; (40a10c <__libc_init_array+0x4c>)
  40a0e0:	1b76      	subs	r6, r6, r5
  40a0e2:	f003 fa8d 	bl	40d600 <_init>
  40a0e6:	10b6      	asrs	r6, r6, #2
  40a0e8:	bf18      	it	ne
  40a0ea:	2400      	movne	r4, #0
  40a0ec:	d006      	beq.n	40a0fc <__libc_init_array+0x3c>
  40a0ee:	3401      	adds	r4, #1
  40a0f0:	f855 3b04 	ldr.w	r3, [r5], #4
  40a0f4:	4798      	blx	r3
  40a0f6:	42a6      	cmp	r6, r4
  40a0f8:	d1f9      	bne.n	40a0ee <__libc_init_array+0x2e>
  40a0fa:	bd70      	pop	{r4, r5, r6, pc}
  40a0fc:	bd70      	pop	{r4, r5, r6, pc}
  40a0fe:	bf00      	nop
  40a100:	0040d60c 	.word	0x0040d60c
  40a104:	0040d60c 	.word	0x0040d60c
  40a108:	0040d614 	.word	0x0040d614
  40a10c:	0040d60c 	.word	0x0040d60c

0040a110 <iprintf>:
  40a110:	b40f      	push	{r0, r1, r2, r3}
  40a112:	b500      	push	{lr}
  40a114:	4907      	ldr	r1, [pc, #28]	; (40a134 <iprintf+0x24>)
  40a116:	b083      	sub	sp, #12
  40a118:	ab04      	add	r3, sp, #16
  40a11a:	6808      	ldr	r0, [r1, #0]
  40a11c:	f853 2b04 	ldr.w	r2, [r3], #4
  40a120:	6881      	ldr	r1, [r0, #8]
  40a122:	9301      	str	r3, [sp, #4]
  40a124:	f000 fd32 	bl	40ab8c <_vfiprintf_r>
  40a128:	b003      	add	sp, #12
  40a12a:	f85d eb04 	ldr.w	lr, [sp], #4
  40a12e:	b004      	add	sp, #16
  40a130:	4770      	bx	lr
  40a132:	bf00      	nop
  40a134:	20000588 	.word	0x20000588

0040a138 <malloc>:
  40a138:	4b02      	ldr	r3, [pc, #8]	; (40a144 <malloc+0xc>)
  40a13a:	4601      	mov	r1, r0
  40a13c:	6818      	ldr	r0, [r3, #0]
  40a13e:	f000 b80b 	b.w	40a158 <_malloc_r>
  40a142:	bf00      	nop
  40a144:	20000588 	.word	0x20000588

0040a148 <free>:
  40a148:	4b02      	ldr	r3, [pc, #8]	; (40a154 <free+0xc>)
  40a14a:	4601      	mov	r1, r0
  40a14c:	6818      	ldr	r0, [r3, #0]
  40a14e:	f001 bde9 	b.w	40bd24 <_free_r>
  40a152:	bf00      	nop
  40a154:	20000588 	.word	0x20000588

0040a158 <_malloc_r>:
  40a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a15c:	f101 050b 	add.w	r5, r1, #11
  40a160:	2d16      	cmp	r5, #22
  40a162:	b083      	sub	sp, #12
  40a164:	4606      	mov	r6, r0
  40a166:	d927      	bls.n	40a1b8 <_malloc_r+0x60>
  40a168:	f035 0507 	bics.w	r5, r5, #7
  40a16c:	f100 80b6 	bmi.w	40a2dc <_malloc_r+0x184>
  40a170:	42a9      	cmp	r1, r5
  40a172:	f200 80b3 	bhi.w	40a2dc <_malloc_r+0x184>
  40a176:	f000 fb9b 	bl	40a8b0 <__malloc_lock>
  40a17a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40a17e:	d222      	bcs.n	40a1c6 <_malloc_r+0x6e>
  40a180:	4fc2      	ldr	r7, [pc, #776]	; (40a48c <_malloc_r+0x334>)
  40a182:	08e8      	lsrs	r0, r5, #3
  40a184:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  40a188:	68dc      	ldr	r4, [r3, #12]
  40a18a:	429c      	cmp	r4, r3
  40a18c:	f000 81c8 	beq.w	40a520 <_malloc_r+0x3c8>
  40a190:	6863      	ldr	r3, [r4, #4]
  40a192:	68e1      	ldr	r1, [r4, #12]
  40a194:	68a5      	ldr	r5, [r4, #8]
  40a196:	f023 0303 	bic.w	r3, r3, #3
  40a19a:	4423      	add	r3, r4
  40a19c:	4630      	mov	r0, r6
  40a19e:	685a      	ldr	r2, [r3, #4]
  40a1a0:	60e9      	str	r1, [r5, #12]
  40a1a2:	f042 0201 	orr.w	r2, r2, #1
  40a1a6:	608d      	str	r5, [r1, #8]
  40a1a8:	605a      	str	r2, [r3, #4]
  40a1aa:	f000 fb83 	bl	40a8b4 <__malloc_unlock>
  40a1ae:	3408      	adds	r4, #8
  40a1b0:	4620      	mov	r0, r4
  40a1b2:	b003      	add	sp, #12
  40a1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a1b8:	2910      	cmp	r1, #16
  40a1ba:	f200 808f 	bhi.w	40a2dc <_malloc_r+0x184>
  40a1be:	f000 fb77 	bl	40a8b0 <__malloc_lock>
  40a1c2:	2510      	movs	r5, #16
  40a1c4:	e7dc      	b.n	40a180 <_malloc_r+0x28>
  40a1c6:	0a68      	lsrs	r0, r5, #9
  40a1c8:	f000 808f 	beq.w	40a2ea <_malloc_r+0x192>
  40a1cc:	2804      	cmp	r0, #4
  40a1ce:	f200 8154 	bhi.w	40a47a <_malloc_r+0x322>
  40a1d2:	09a8      	lsrs	r0, r5, #6
  40a1d4:	3038      	adds	r0, #56	; 0x38
  40a1d6:	0041      	lsls	r1, r0, #1
  40a1d8:	4fac      	ldr	r7, [pc, #688]	; (40a48c <_malloc_r+0x334>)
  40a1da:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40a1de:	68cc      	ldr	r4, [r1, #12]
  40a1e0:	42a1      	cmp	r1, r4
  40a1e2:	d106      	bne.n	40a1f2 <_malloc_r+0x9a>
  40a1e4:	e00c      	b.n	40a200 <_malloc_r+0xa8>
  40a1e6:	2a00      	cmp	r2, #0
  40a1e8:	f280 8082 	bge.w	40a2f0 <_malloc_r+0x198>
  40a1ec:	68e4      	ldr	r4, [r4, #12]
  40a1ee:	42a1      	cmp	r1, r4
  40a1f0:	d006      	beq.n	40a200 <_malloc_r+0xa8>
  40a1f2:	6863      	ldr	r3, [r4, #4]
  40a1f4:	f023 0303 	bic.w	r3, r3, #3
  40a1f8:	1b5a      	subs	r2, r3, r5
  40a1fa:	2a0f      	cmp	r2, #15
  40a1fc:	ddf3      	ble.n	40a1e6 <_malloc_r+0x8e>
  40a1fe:	3801      	subs	r0, #1
  40a200:	3001      	adds	r0, #1
  40a202:	49a2      	ldr	r1, [pc, #648]	; (40a48c <_malloc_r+0x334>)
  40a204:	693c      	ldr	r4, [r7, #16]
  40a206:	f101 0e08 	add.w	lr, r1, #8
  40a20a:	4574      	cmp	r4, lr
  40a20c:	f000 817d 	beq.w	40a50a <_malloc_r+0x3b2>
  40a210:	6863      	ldr	r3, [r4, #4]
  40a212:	f023 0303 	bic.w	r3, r3, #3
  40a216:	1b5a      	subs	r2, r3, r5
  40a218:	2a0f      	cmp	r2, #15
  40a21a:	f300 8163 	bgt.w	40a4e4 <_malloc_r+0x38c>
  40a21e:	2a00      	cmp	r2, #0
  40a220:	f8c1 e014 	str.w	lr, [r1, #20]
  40a224:	f8c1 e010 	str.w	lr, [r1, #16]
  40a228:	da73      	bge.n	40a312 <_malloc_r+0x1ba>
  40a22a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a22e:	f080 8139 	bcs.w	40a4a4 <_malloc_r+0x34c>
  40a232:	08db      	lsrs	r3, r3, #3
  40a234:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  40a238:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  40a23c:	684a      	ldr	r2, [r1, #4]
  40a23e:	f8d8 9008 	ldr.w	r9, [r8, #8]
  40a242:	f8c4 9008 	str.w	r9, [r4, #8]
  40a246:	2301      	movs	r3, #1
  40a248:	fa03 f30c 	lsl.w	r3, r3, ip
  40a24c:	4313      	orrs	r3, r2
  40a24e:	f8c4 800c 	str.w	r8, [r4, #12]
  40a252:	604b      	str	r3, [r1, #4]
  40a254:	f8c8 4008 	str.w	r4, [r8, #8]
  40a258:	f8c9 400c 	str.w	r4, [r9, #12]
  40a25c:	1082      	asrs	r2, r0, #2
  40a25e:	2401      	movs	r4, #1
  40a260:	4094      	lsls	r4, r2
  40a262:	429c      	cmp	r4, r3
  40a264:	d862      	bhi.n	40a32c <_malloc_r+0x1d4>
  40a266:	4223      	tst	r3, r4
  40a268:	d106      	bne.n	40a278 <_malloc_r+0x120>
  40a26a:	f020 0003 	bic.w	r0, r0, #3
  40a26e:	0064      	lsls	r4, r4, #1
  40a270:	4223      	tst	r3, r4
  40a272:	f100 0004 	add.w	r0, r0, #4
  40a276:	d0fa      	beq.n	40a26e <_malloc_r+0x116>
  40a278:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  40a27c:	46c4      	mov	ip, r8
  40a27e:	4681      	mov	r9, r0
  40a280:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40a284:	459c      	cmp	ip, r3
  40a286:	d107      	bne.n	40a298 <_malloc_r+0x140>
  40a288:	e141      	b.n	40a50e <_malloc_r+0x3b6>
  40a28a:	2900      	cmp	r1, #0
  40a28c:	f280 8151 	bge.w	40a532 <_malloc_r+0x3da>
  40a290:	68db      	ldr	r3, [r3, #12]
  40a292:	459c      	cmp	ip, r3
  40a294:	f000 813b 	beq.w	40a50e <_malloc_r+0x3b6>
  40a298:	685a      	ldr	r2, [r3, #4]
  40a29a:	f022 0203 	bic.w	r2, r2, #3
  40a29e:	1b51      	subs	r1, r2, r5
  40a2a0:	290f      	cmp	r1, #15
  40a2a2:	ddf2      	ble.n	40a28a <_malloc_r+0x132>
  40a2a4:	461c      	mov	r4, r3
  40a2a6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40a2aa:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40a2ae:	195a      	adds	r2, r3, r5
  40a2b0:	f045 0901 	orr.w	r9, r5, #1
  40a2b4:	f041 0501 	orr.w	r5, r1, #1
  40a2b8:	f8c3 9004 	str.w	r9, [r3, #4]
  40a2bc:	4630      	mov	r0, r6
  40a2be:	f8c8 c00c 	str.w	ip, [r8, #12]
  40a2c2:	f8cc 8008 	str.w	r8, [ip, #8]
  40a2c6:	617a      	str	r2, [r7, #20]
  40a2c8:	613a      	str	r2, [r7, #16]
  40a2ca:	f8c2 e00c 	str.w	lr, [r2, #12]
  40a2ce:	f8c2 e008 	str.w	lr, [r2, #8]
  40a2d2:	6055      	str	r5, [r2, #4]
  40a2d4:	5051      	str	r1, [r2, r1]
  40a2d6:	f000 faed 	bl	40a8b4 <__malloc_unlock>
  40a2da:	e769      	b.n	40a1b0 <_malloc_r+0x58>
  40a2dc:	2400      	movs	r4, #0
  40a2de:	230c      	movs	r3, #12
  40a2e0:	4620      	mov	r0, r4
  40a2e2:	6033      	str	r3, [r6, #0]
  40a2e4:	b003      	add	sp, #12
  40a2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a2ea:	217e      	movs	r1, #126	; 0x7e
  40a2ec:	203f      	movs	r0, #63	; 0x3f
  40a2ee:	e773      	b.n	40a1d8 <_malloc_r+0x80>
  40a2f0:	4423      	add	r3, r4
  40a2f2:	68e1      	ldr	r1, [r4, #12]
  40a2f4:	685a      	ldr	r2, [r3, #4]
  40a2f6:	68a5      	ldr	r5, [r4, #8]
  40a2f8:	f042 0201 	orr.w	r2, r2, #1
  40a2fc:	60e9      	str	r1, [r5, #12]
  40a2fe:	4630      	mov	r0, r6
  40a300:	608d      	str	r5, [r1, #8]
  40a302:	605a      	str	r2, [r3, #4]
  40a304:	f000 fad6 	bl	40a8b4 <__malloc_unlock>
  40a308:	3408      	adds	r4, #8
  40a30a:	4620      	mov	r0, r4
  40a30c:	b003      	add	sp, #12
  40a30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a312:	4423      	add	r3, r4
  40a314:	4630      	mov	r0, r6
  40a316:	685a      	ldr	r2, [r3, #4]
  40a318:	f042 0201 	orr.w	r2, r2, #1
  40a31c:	605a      	str	r2, [r3, #4]
  40a31e:	f000 fac9 	bl	40a8b4 <__malloc_unlock>
  40a322:	3408      	adds	r4, #8
  40a324:	4620      	mov	r0, r4
  40a326:	b003      	add	sp, #12
  40a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a32c:	68bc      	ldr	r4, [r7, #8]
  40a32e:	6863      	ldr	r3, [r4, #4]
  40a330:	f023 0803 	bic.w	r8, r3, #3
  40a334:	4545      	cmp	r5, r8
  40a336:	d804      	bhi.n	40a342 <_malloc_r+0x1ea>
  40a338:	ebc5 0308 	rsb	r3, r5, r8
  40a33c:	2b0f      	cmp	r3, #15
  40a33e:	f300 808c 	bgt.w	40a45a <_malloc_r+0x302>
  40a342:	4b53      	ldr	r3, [pc, #332]	; (40a490 <_malloc_r+0x338>)
  40a344:	f8df a158 	ldr.w	sl, [pc, #344]	; 40a4a0 <_malloc_r+0x348>
  40a348:	681a      	ldr	r2, [r3, #0]
  40a34a:	f8da 3000 	ldr.w	r3, [sl]
  40a34e:	3301      	adds	r3, #1
  40a350:	442a      	add	r2, r5
  40a352:	eb04 0b08 	add.w	fp, r4, r8
  40a356:	f000 8150 	beq.w	40a5fa <_malloc_r+0x4a2>
  40a35a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40a35e:	320f      	adds	r2, #15
  40a360:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40a364:	f022 020f 	bic.w	r2, r2, #15
  40a368:	4611      	mov	r1, r2
  40a36a:	4630      	mov	r0, r6
  40a36c:	9201      	str	r2, [sp, #4]
  40a36e:	f000 fad9 	bl	40a924 <_sbrk_r>
  40a372:	f1b0 3fff 	cmp.w	r0, #4294967295
  40a376:	4681      	mov	r9, r0
  40a378:	9a01      	ldr	r2, [sp, #4]
  40a37a:	f000 8147 	beq.w	40a60c <_malloc_r+0x4b4>
  40a37e:	4583      	cmp	fp, r0
  40a380:	f200 80ee 	bhi.w	40a560 <_malloc_r+0x408>
  40a384:	4b43      	ldr	r3, [pc, #268]	; (40a494 <_malloc_r+0x33c>)
  40a386:	6819      	ldr	r1, [r3, #0]
  40a388:	45cb      	cmp	fp, r9
  40a38a:	4411      	add	r1, r2
  40a38c:	6019      	str	r1, [r3, #0]
  40a38e:	f000 8142 	beq.w	40a616 <_malloc_r+0x4be>
  40a392:	f8da 0000 	ldr.w	r0, [sl]
  40a396:	f8df e108 	ldr.w	lr, [pc, #264]	; 40a4a0 <_malloc_r+0x348>
  40a39a:	3001      	adds	r0, #1
  40a39c:	bf1b      	ittet	ne
  40a39e:	ebcb 0b09 	rsbne	fp, fp, r9
  40a3a2:	4459      	addne	r1, fp
  40a3a4:	f8ce 9000 	streq.w	r9, [lr]
  40a3a8:	6019      	strne	r1, [r3, #0]
  40a3aa:	f019 0107 	ands.w	r1, r9, #7
  40a3ae:	f000 8107 	beq.w	40a5c0 <_malloc_r+0x468>
  40a3b2:	f1c1 0008 	rsb	r0, r1, #8
  40a3b6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40a3ba:	4481      	add	r9, r0
  40a3bc:	3108      	adds	r1, #8
  40a3be:	444a      	add	r2, r9
  40a3c0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40a3c4:	ebc2 0a01 	rsb	sl, r2, r1
  40a3c8:	4651      	mov	r1, sl
  40a3ca:	4630      	mov	r0, r6
  40a3cc:	9301      	str	r3, [sp, #4]
  40a3ce:	f000 faa9 	bl	40a924 <_sbrk_r>
  40a3d2:	1c43      	adds	r3, r0, #1
  40a3d4:	9b01      	ldr	r3, [sp, #4]
  40a3d6:	f000 812c 	beq.w	40a632 <_malloc_r+0x4da>
  40a3da:	ebc9 0200 	rsb	r2, r9, r0
  40a3de:	4452      	add	r2, sl
  40a3e0:	f042 0201 	orr.w	r2, r2, #1
  40a3e4:	6819      	ldr	r1, [r3, #0]
  40a3e6:	f8c7 9008 	str.w	r9, [r7, #8]
  40a3ea:	4451      	add	r1, sl
  40a3ec:	42bc      	cmp	r4, r7
  40a3ee:	f8c9 2004 	str.w	r2, [r9, #4]
  40a3f2:	6019      	str	r1, [r3, #0]
  40a3f4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 40a494 <_malloc_r+0x33c>
  40a3f8:	d016      	beq.n	40a428 <_malloc_r+0x2d0>
  40a3fa:	f1b8 0f0f 	cmp.w	r8, #15
  40a3fe:	f240 80ee 	bls.w	40a5de <_malloc_r+0x486>
  40a402:	6862      	ldr	r2, [r4, #4]
  40a404:	f1a8 030c 	sub.w	r3, r8, #12
  40a408:	f023 0307 	bic.w	r3, r3, #7
  40a40c:	18e0      	adds	r0, r4, r3
  40a40e:	f002 0201 	and.w	r2, r2, #1
  40a412:	f04f 0e05 	mov.w	lr, #5
  40a416:	431a      	orrs	r2, r3
  40a418:	2b0f      	cmp	r3, #15
  40a41a:	6062      	str	r2, [r4, #4]
  40a41c:	f8c0 e004 	str.w	lr, [r0, #4]
  40a420:	f8c0 e008 	str.w	lr, [r0, #8]
  40a424:	f200 8109 	bhi.w	40a63a <_malloc_r+0x4e2>
  40a428:	4b1b      	ldr	r3, [pc, #108]	; (40a498 <_malloc_r+0x340>)
  40a42a:	68bc      	ldr	r4, [r7, #8]
  40a42c:	681a      	ldr	r2, [r3, #0]
  40a42e:	4291      	cmp	r1, r2
  40a430:	bf88      	it	hi
  40a432:	6019      	strhi	r1, [r3, #0]
  40a434:	4b19      	ldr	r3, [pc, #100]	; (40a49c <_malloc_r+0x344>)
  40a436:	681a      	ldr	r2, [r3, #0]
  40a438:	4291      	cmp	r1, r2
  40a43a:	6862      	ldr	r2, [r4, #4]
  40a43c:	bf88      	it	hi
  40a43e:	6019      	strhi	r1, [r3, #0]
  40a440:	f022 0203 	bic.w	r2, r2, #3
  40a444:	4295      	cmp	r5, r2
  40a446:	eba2 0305 	sub.w	r3, r2, r5
  40a44a:	d801      	bhi.n	40a450 <_malloc_r+0x2f8>
  40a44c:	2b0f      	cmp	r3, #15
  40a44e:	dc04      	bgt.n	40a45a <_malloc_r+0x302>
  40a450:	4630      	mov	r0, r6
  40a452:	f000 fa2f 	bl	40a8b4 <__malloc_unlock>
  40a456:	2400      	movs	r4, #0
  40a458:	e6aa      	b.n	40a1b0 <_malloc_r+0x58>
  40a45a:	1962      	adds	r2, r4, r5
  40a45c:	f043 0301 	orr.w	r3, r3, #1
  40a460:	f045 0501 	orr.w	r5, r5, #1
  40a464:	6065      	str	r5, [r4, #4]
  40a466:	4630      	mov	r0, r6
  40a468:	60ba      	str	r2, [r7, #8]
  40a46a:	6053      	str	r3, [r2, #4]
  40a46c:	f000 fa22 	bl	40a8b4 <__malloc_unlock>
  40a470:	3408      	adds	r4, #8
  40a472:	4620      	mov	r0, r4
  40a474:	b003      	add	sp, #12
  40a476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a47a:	2814      	cmp	r0, #20
  40a47c:	d968      	bls.n	40a550 <_malloc_r+0x3f8>
  40a47e:	2854      	cmp	r0, #84	; 0x54
  40a480:	f200 8097 	bhi.w	40a5b2 <_malloc_r+0x45a>
  40a484:	0b28      	lsrs	r0, r5, #12
  40a486:	306e      	adds	r0, #110	; 0x6e
  40a488:	0041      	lsls	r1, r0, #1
  40a48a:	e6a5      	b.n	40a1d8 <_malloc_r+0x80>
  40a48c:	2000058c 	.word	0x2000058c
  40a490:	20019dd0 	.word	0x20019dd0
  40a494:	20019dd4 	.word	0x20019dd4
  40a498:	20019dcc 	.word	0x20019dcc
  40a49c:	20019dc8 	.word	0x20019dc8
  40a4a0:	20000998 	.word	0x20000998
  40a4a4:	0a5a      	lsrs	r2, r3, #9
  40a4a6:	2a04      	cmp	r2, #4
  40a4a8:	d955      	bls.n	40a556 <_malloc_r+0x3fe>
  40a4aa:	2a14      	cmp	r2, #20
  40a4ac:	f200 80a7 	bhi.w	40a5fe <_malloc_r+0x4a6>
  40a4b0:	325b      	adds	r2, #91	; 0x5b
  40a4b2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40a4b6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  40a4ba:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 40a678 <_malloc_r+0x520>
  40a4be:	f8dc 1008 	ldr.w	r1, [ip, #8]
  40a4c2:	4561      	cmp	r1, ip
  40a4c4:	d07f      	beq.n	40a5c6 <_malloc_r+0x46e>
  40a4c6:	684a      	ldr	r2, [r1, #4]
  40a4c8:	f022 0203 	bic.w	r2, r2, #3
  40a4cc:	4293      	cmp	r3, r2
  40a4ce:	d202      	bcs.n	40a4d6 <_malloc_r+0x37e>
  40a4d0:	6889      	ldr	r1, [r1, #8]
  40a4d2:	458c      	cmp	ip, r1
  40a4d4:	d1f7      	bne.n	40a4c6 <_malloc_r+0x36e>
  40a4d6:	68ca      	ldr	r2, [r1, #12]
  40a4d8:	687b      	ldr	r3, [r7, #4]
  40a4da:	60e2      	str	r2, [r4, #12]
  40a4dc:	60a1      	str	r1, [r4, #8]
  40a4de:	6094      	str	r4, [r2, #8]
  40a4e0:	60cc      	str	r4, [r1, #12]
  40a4e2:	e6bb      	b.n	40a25c <_malloc_r+0x104>
  40a4e4:	1963      	adds	r3, r4, r5
  40a4e6:	f042 0701 	orr.w	r7, r2, #1
  40a4ea:	f045 0501 	orr.w	r5, r5, #1
  40a4ee:	6065      	str	r5, [r4, #4]
  40a4f0:	4630      	mov	r0, r6
  40a4f2:	614b      	str	r3, [r1, #20]
  40a4f4:	610b      	str	r3, [r1, #16]
  40a4f6:	f8c3 e00c 	str.w	lr, [r3, #12]
  40a4fa:	f8c3 e008 	str.w	lr, [r3, #8]
  40a4fe:	605f      	str	r7, [r3, #4]
  40a500:	509a      	str	r2, [r3, r2]
  40a502:	3408      	adds	r4, #8
  40a504:	f000 f9d6 	bl	40a8b4 <__malloc_unlock>
  40a508:	e652      	b.n	40a1b0 <_malloc_r+0x58>
  40a50a:	684b      	ldr	r3, [r1, #4]
  40a50c:	e6a6      	b.n	40a25c <_malloc_r+0x104>
  40a50e:	f109 0901 	add.w	r9, r9, #1
  40a512:	f019 0f03 	tst.w	r9, #3
  40a516:	f10c 0c08 	add.w	ip, ip, #8
  40a51a:	f47f aeb1 	bne.w	40a280 <_malloc_r+0x128>
  40a51e:	e02c      	b.n	40a57a <_malloc_r+0x422>
  40a520:	f104 0308 	add.w	r3, r4, #8
  40a524:	6964      	ldr	r4, [r4, #20]
  40a526:	42a3      	cmp	r3, r4
  40a528:	bf08      	it	eq
  40a52a:	3002      	addeq	r0, #2
  40a52c:	f43f ae69 	beq.w	40a202 <_malloc_r+0xaa>
  40a530:	e62e      	b.n	40a190 <_malloc_r+0x38>
  40a532:	441a      	add	r2, r3
  40a534:	461c      	mov	r4, r3
  40a536:	6851      	ldr	r1, [r2, #4]
  40a538:	68db      	ldr	r3, [r3, #12]
  40a53a:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40a53e:	f041 0101 	orr.w	r1, r1, #1
  40a542:	6051      	str	r1, [r2, #4]
  40a544:	4630      	mov	r0, r6
  40a546:	60eb      	str	r3, [r5, #12]
  40a548:	609d      	str	r5, [r3, #8]
  40a54a:	f000 f9b3 	bl	40a8b4 <__malloc_unlock>
  40a54e:	e62f      	b.n	40a1b0 <_malloc_r+0x58>
  40a550:	305b      	adds	r0, #91	; 0x5b
  40a552:	0041      	lsls	r1, r0, #1
  40a554:	e640      	b.n	40a1d8 <_malloc_r+0x80>
  40a556:	099a      	lsrs	r2, r3, #6
  40a558:	3238      	adds	r2, #56	; 0x38
  40a55a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40a55e:	e7aa      	b.n	40a4b6 <_malloc_r+0x35e>
  40a560:	42bc      	cmp	r4, r7
  40a562:	4b45      	ldr	r3, [pc, #276]	; (40a678 <_malloc_r+0x520>)
  40a564:	f43f af0e 	beq.w	40a384 <_malloc_r+0x22c>
  40a568:	689c      	ldr	r4, [r3, #8]
  40a56a:	6862      	ldr	r2, [r4, #4]
  40a56c:	f022 0203 	bic.w	r2, r2, #3
  40a570:	e768      	b.n	40a444 <_malloc_r+0x2ec>
  40a572:	f8d8 8000 	ldr.w	r8, [r8]
  40a576:	4598      	cmp	r8, r3
  40a578:	d17c      	bne.n	40a674 <_malloc_r+0x51c>
  40a57a:	f010 0f03 	tst.w	r0, #3
  40a57e:	f1a8 0308 	sub.w	r3, r8, #8
  40a582:	f100 30ff 	add.w	r0, r0, #4294967295
  40a586:	d1f4      	bne.n	40a572 <_malloc_r+0x41a>
  40a588:	687b      	ldr	r3, [r7, #4]
  40a58a:	ea23 0304 	bic.w	r3, r3, r4
  40a58e:	607b      	str	r3, [r7, #4]
  40a590:	0064      	lsls	r4, r4, #1
  40a592:	429c      	cmp	r4, r3
  40a594:	f63f aeca 	bhi.w	40a32c <_malloc_r+0x1d4>
  40a598:	2c00      	cmp	r4, #0
  40a59a:	f43f aec7 	beq.w	40a32c <_malloc_r+0x1d4>
  40a59e:	4223      	tst	r3, r4
  40a5a0:	4648      	mov	r0, r9
  40a5a2:	f47f ae69 	bne.w	40a278 <_malloc_r+0x120>
  40a5a6:	0064      	lsls	r4, r4, #1
  40a5a8:	4223      	tst	r3, r4
  40a5aa:	f100 0004 	add.w	r0, r0, #4
  40a5ae:	d0fa      	beq.n	40a5a6 <_malloc_r+0x44e>
  40a5b0:	e662      	b.n	40a278 <_malloc_r+0x120>
  40a5b2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  40a5b6:	d818      	bhi.n	40a5ea <_malloc_r+0x492>
  40a5b8:	0be8      	lsrs	r0, r5, #15
  40a5ba:	3077      	adds	r0, #119	; 0x77
  40a5bc:	0041      	lsls	r1, r0, #1
  40a5be:	e60b      	b.n	40a1d8 <_malloc_r+0x80>
  40a5c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40a5c4:	e6fb      	b.n	40a3be <_malloc_r+0x266>
  40a5c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40a5ca:	1092      	asrs	r2, r2, #2
  40a5cc:	f04f 0c01 	mov.w	ip, #1
  40a5d0:	fa0c f202 	lsl.w	r2, ip, r2
  40a5d4:	4313      	orrs	r3, r2
  40a5d6:	f8c8 3004 	str.w	r3, [r8, #4]
  40a5da:	460a      	mov	r2, r1
  40a5dc:	e77d      	b.n	40a4da <_malloc_r+0x382>
  40a5de:	2301      	movs	r3, #1
  40a5e0:	f8c9 3004 	str.w	r3, [r9, #4]
  40a5e4:	464c      	mov	r4, r9
  40a5e6:	2200      	movs	r2, #0
  40a5e8:	e72c      	b.n	40a444 <_malloc_r+0x2ec>
  40a5ea:	f240 5354 	movw	r3, #1364	; 0x554
  40a5ee:	4298      	cmp	r0, r3
  40a5f0:	d81c      	bhi.n	40a62c <_malloc_r+0x4d4>
  40a5f2:	0ca8      	lsrs	r0, r5, #18
  40a5f4:	307c      	adds	r0, #124	; 0x7c
  40a5f6:	0041      	lsls	r1, r0, #1
  40a5f8:	e5ee      	b.n	40a1d8 <_malloc_r+0x80>
  40a5fa:	3210      	adds	r2, #16
  40a5fc:	e6b4      	b.n	40a368 <_malloc_r+0x210>
  40a5fe:	2a54      	cmp	r2, #84	; 0x54
  40a600:	d823      	bhi.n	40a64a <_malloc_r+0x4f2>
  40a602:	0b1a      	lsrs	r2, r3, #12
  40a604:	326e      	adds	r2, #110	; 0x6e
  40a606:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40a60a:	e754      	b.n	40a4b6 <_malloc_r+0x35e>
  40a60c:	68bc      	ldr	r4, [r7, #8]
  40a60e:	6862      	ldr	r2, [r4, #4]
  40a610:	f022 0203 	bic.w	r2, r2, #3
  40a614:	e716      	b.n	40a444 <_malloc_r+0x2ec>
  40a616:	f3cb 000b 	ubfx	r0, fp, #0, #12
  40a61a:	2800      	cmp	r0, #0
  40a61c:	f47f aeb9 	bne.w	40a392 <_malloc_r+0x23a>
  40a620:	4442      	add	r2, r8
  40a622:	68bb      	ldr	r3, [r7, #8]
  40a624:	f042 0201 	orr.w	r2, r2, #1
  40a628:	605a      	str	r2, [r3, #4]
  40a62a:	e6fd      	b.n	40a428 <_malloc_r+0x2d0>
  40a62c:	21fc      	movs	r1, #252	; 0xfc
  40a62e:	207e      	movs	r0, #126	; 0x7e
  40a630:	e5d2      	b.n	40a1d8 <_malloc_r+0x80>
  40a632:	2201      	movs	r2, #1
  40a634:	f04f 0a00 	mov.w	sl, #0
  40a638:	e6d4      	b.n	40a3e4 <_malloc_r+0x28c>
  40a63a:	f104 0108 	add.w	r1, r4, #8
  40a63e:	4630      	mov	r0, r6
  40a640:	f001 fb70 	bl	40bd24 <_free_r>
  40a644:	f8da 1000 	ldr.w	r1, [sl]
  40a648:	e6ee      	b.n	40a428 <_malloc_r+0x2d0>
  40a64a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a64e:	d804      	bhi.n	40a65a <_malloc_r+0x502>
  40a650:	0bda      	lsrs	r2, r3, #15
  40a652:	3277      	adds	r2, #119	; 0x77
  40a654:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40a658:	e72d      	b.n	40a4b6 <_malloc_r+0x35e>
  40a65a:	f240 5154 	movw	r1, #1364	; 0x554
  40a65e:	428a      	cmp	r2, r1
  40a660:	d804      	bhi.n	40a66c <_malloc_r+0x514>
  40a662:	0c9a      	lsrs	r2, r3, #18
  40a664:	327c      	adds	r2, #124	; 0x7c
  40a666:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40a66a:	e724      	b.n	40a4b6 <_malloc_r+0x35e>
  40a66c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  40a670:	227e      	movs	r2, #126	; 0x7e
  40a672:	e720      	b.n	40a4b6 <_malloc_r+0x35e>
  40a674:	687b      	ldr	r3, [r7, #4]
  40a676:	e78b      	b.n	40a590 <_malloc_r+0x438>
  40a678:	2000058c 	.word	0x2000058c

0040a67c <memcmp>:
  40a67c:	2a03      	cmp	r2, #3
  40a67e:	b470      	push	{r4, r5, r6}
  40a680:	d926      	bls.n	40a6d0 <memcmp+0x54>
  40a682:	ea40 0301 	orr.w	r3, r0, r1
  40a686:	079b      	lsls	r3, r3, #30
  40a688:	d011      	beq.n	40a6ae <memcmp+0x32>
  40a68a:	7804      	ldrb	r4, [r0, #0]
  40a68c:	780d      	ldrb	r5, [r1, #0]
  40a68e:	42ac      	cmp	r4, r5
  40a690:	d122      	bne.n	40a6d8 <memcmp+0x5c>
  40a692:	4402      	add	r2, r0
  40a694:	1c43      	adds	r3, r0, #1
  40a696:	e005      	b.n	40a6a4 <memcmp+0x28>
  40a698:	f813 4b01 	ldrb.w	r4, [r3], #1
  40a69c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40a6a0:	42ac      	cmp	r4, r5
  40a6a2:	d119      	bne.n	40a6d8 <memcmp+0x5c>
  40a6a4:	4293      	cmp	r3, r2
  40a6a6:	d1f7      	bne.n	40a698 <memcmp+0x1c>
  40a6a8:	2000      	movs	r0, #0
  40a6aa:	bc70      	pop	{r4, r5, r6}
  40a6ac:	4770      	bx	lr
  40a6ae:	460c      	mov	r4, r1
  40a6b0:	4603      	mov	r3, r0
  40a6b2:	681e      	ldr	r6, [r3, #0]
  40a6b4:	6825      	ldr	r5, [r4, #0]
  40a6b6:	42ae      	cmp	r6, r5
  40a6b8:	4618      	mov	r0, r3
  40a6ba:	4621      	mov	r1, r4
  40a6bc:	f103 0304 	add.w	r3, r3, #4
  40a6c0:	f104 0404 	add.w	r4, r4, #4
  40a6c4:	d104      	bne.n	40a6d0 <memcmp+0x54>
  40a6c6:	3a04      	subs	r2, #4
  40a6c8:	2a03      	cmp	r2, #3
  40a6ca:	4618      	mov	r0, r3
  40a6cc:	4621      	mov	r1, r4
  40a6ce:	d8f0      	bhi.n	40a6b2 <memcmp+0x36>
  40a6d0:	2a00      	cmp	r2, #0
  40a6d2:	d1da      	bne.n	40a68a <memcmp+0xe>
  40a6d4:	4610      	mov	r0, r2
  40a6d6:	e7e8      	b.n	40a6aa <memcmp+0x2e>
  40a6d8:	1b60      	subs	r0, r4, r5
  40a6da:	bc70      	pop	{r4, r5, r6}
  40a6dc:	4770      	bx	lr
  40a6de:	bf00      	nop

0040a6e0 <memcpy>:
  40a6e0:	4684      	mov	ip, r0
  40a6e2:	ea41 0300 	orr.w	r3, r1, r0
  40a6e6:	f013 0303 	ands.w	r3, r3, #3
  40a6ea:	d16d      	bne.n	40a7c8 <memcpy+0xe8>
  40a6ec:	3a40      	subs	r2, #64	; 0x40
  40a6ee:	d341      	bcc.n	40a774 <memcpy+0x94>
  40a6f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a6f4:	f840 3b04 	str.w	r3, [r0], #4
  40a6f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a6fc:	f840 3b04 	str.w	r3, [r0], #4
  40a700:	f851 3b04 	ldr.w	r3, [r1], #4
  40a704:	f840 3b04 	str.w	r3, [r0], #4
  40a708:	f851 3b04 	ldr.w	r3, [r1], #4
  40a70c:	f840 3b04 	str.w	r3, [r0], #4
  40a710:	f851 3b04 	ldr.w	r3, [r1], #4
  40a714:	f840 3b04 	str.w	r3, [r0], #4
  40a718:	f851 3b04 	ldr.w	r3, [r1], #4
  40a71c:	f840 3b04 	str.w	r3, [r0], #4
  40a720:	f851 3b04 	ldr.w	r3, [r1], #4
  40a724:	f840 3b04 	str.w	r3, [r0], #4
  40a728:	f851 3b04 	ldr.w	r3, [r1], #4
  40a72c:	f840 3b04 	str.w	r3, [r0], #4
  40a730:	f851 3b04 	ldr.w	r3, [r1], #4
  40a734:	f840 3b04 	str.w	r3, [r0], #4
  40a738:	f851 3b04 	ldr.w	r3, [r1], #4
  40a73c:	f840 3b04 	str.w	r3, [r0], #4
  40a740:	f851 3b04 	ldr.w	r3, [r1], #4
  40a744:	f840 3b04 	str.w	r3, [r0], #4
  40a748:	f851 3b04 	ldr.w	r3, [r1], #4
  40a74c:	f840 3b04 	str.w	r3, [r0], #4
  40a750:	f851 3b04 	ldr.w	r3, [r1], #4
  40a754:	f840 3b04 	str.w	r3, [r0], #4
  40a758:	f851 3b04 	ldr.w	r3, [r1], #4
  40a75c:	f840 3b04 	str.w	r3, [r0], #4
  40a760:	f851 3b04 	ldr.w	r3, [r1], #4
  40a764:	f840 3b04 	str.w	r3, [r0], #4
  40a768:	f851 3b04 	ldr.w	r3, [r1], #4
  40a76c:	f840 3b04 	str.w	r3, [r0], #4
  40a770:	3a40      	subs	r2, #64	; 0x40
  40a772:	d2bd      	bcs.n	40a6f0 <memcpy+0x10>
  40a774:	3230      	adds	r2, #48	; 0x30
  40a776:	d311      	bcc.n	40a79c <memcpy+0xbc>
  40a778:	f851 3b04 	ldr.w	r3, [r1], #4
  40a77c:	f840 3b04 	str.w	r3, [r0], #4
  40a780:	f851 3b04 	ldr.w	r3, [r1], #4
  40a784:	f840 3b04 	str.w	r3, [r0], #4
  40a788:	f851 3b04 	ldr.w	r3, [r1], #4
  40a78c:	f840 3b04 	str.w	r3, [r0], #4
  40a790:	f851 3b04 	ldr.w	r3, [r1], #4
  40a794:	f840 3b04 	str.w	r3, [r0], #4
  40a798:	3a10      	subs	r2, #16
  40a79a:	d2ed      	bcs.n	40a778 <memcpy+0x98>
  40a79c:	320c      	adds	r2, #12
  40a79e:	d305      	bcc.n	40a7ac <memcpy+0xcc>
  40a7a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a7a4:	f840 3b04 	str.w	r3, [r0], #4
  40a7a8:	3a04      	subs	r2, #4
  40a7aa:	d2f9      	bcs.n	40a7a0 <memcpy+0xc0>
  40a7ac:	3204      	adds	r2, #4
  40a7ae:	d008      	beq.n	40a7c2 <memcpy+0xe2>
  40a7b0:	07d2      	lsls	r2, r2, #31
  40a7b2:	bf1c      	itt	ne
  40a7b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a7b8:	f800 3b01 	strbne.w	r3, [r0], #1
  40a7bc:	d301      	bcc.n	40a7c2 <memcpy+0xe2>
  40a7be:	880b      	ldrh	r3, [r1, #0]
  40a7c0:	8003      	strh	r3, [r0, #0]
  40a7c2:	4660      	mov	r0, ip
  40a7c4:	4770      	bx	lr
  40a7c6:	bf00      	nop
  40a7c8:	2a08      	cmp	r2, #8
  40a7ca:	d313      	bcc.n	40a7f4 <memcpy+0x114>
  40a7cc:	078b      	lsls	r3, r1, #30
  40a7ce:	d08d      	beq.n	40a6ec <memcpy+0xc>
  40a7d0:	f010 0303 	ands.w	r3, r0, #3
  40a7d4:	d08a      	beq.n	40a6ec <memcpy+0xc>
  40a7d6:	f1c3 0304 	rsb	r3, r3, #4
  40a7da:	1ad2      	subs	r2, r2, r3
  40a7dc:	07db      	lsls	r3, r3, #31
  40a7de:	bf1c      	itt	ne
  40a7e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a7e4:	f800 3b01 	strbne.w	r3, [r0], #1
  40a7e8:	d380      	bcc.n	40a6ec <memcpy+0xc>
  40a7ea:	f831 3b02 	ldrh.w	r3, [r1], #2
  40a7ee:	f820 3b02 	strh.w	r3, [r0], #2
  40a7f2:	e77b      	b.n	40a6ec <memcpy+0xc>
  40a7f4:	3a04      	subs	r2, #4
  40a7f6:	d3d9      	bcc.n	40a7ac <memcpy+0xcc>
  40a7f8:	3a01      	subs	r2, #1
  40a7fa:	f811 3b01 	ldrb.w	r3, [r1], #1
  40a7fe:	f800 3b01 	strb.w	r3, [r0], #1
  40a802:	d2f9      	bcs.n	40a7f8 <memcpy+0x118>
  40a804:	780b      	ldrb	r3, [r1, #0]
  40a806:	7003      	strb	r3, [r0, #0]
  40a808:	784b      	ldrb	r3, [r1, #1]
  40a80a:	7043      	strb	r3, [r0, #1]
  40a80c:	788b      	ldrb	r3, [r1, #2]
  40a80e:	7083      	strb	r3, [r0, #2]
  40a810:	4660      	mov	r0, ip
  40a812:	4770      	bx	lr

0040a814 <memset>:
  40a814:	b470      	push	{r4, r5, r6}
  40a816:	0784      	lsls	r4, r0, #30
  40a818:	d046      	beq.n	40a8a8 <memset+0x94>
  40a81a:	1e54      	subs	r4, r2, #1
  40a81c:	2a00      	cmp	r2, #0
  40a81e:	d041      	beq.n	40a8a4 <memset+0x90>
  40a820:	b2cd      	uxtb	r5, r1
  40a822:	4603      	mov	r3, r0
  40a824:	e002      	b.n	40a82c <memset+0x18>
  40a826:	1e62      	subs	r2, r4, #1
  40a828:	b3e4      	cbz	r4, 40a8a4 <memset+0x90>
  40a82a:	4614      	mov	r4, r2
  40a82c:	f803 5b01 	strb.w	r5, [r3], #1
  40a830:	079a      	lsls	r2, r3, #30
  40a832:	d1f8      	bne.n	40a826 <memset+0x12>
  40a834:	2c03      	cmp	r4, #3
  40a836:	d92e      	bls.n	40a896 <memset+0x82>
  40a838:	b2cd      	uxtb	r5, r1
  40a83a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40a83e:	2c0f      	cmp	r4, #15
  40a840:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40a844:	d919      	bls.n	40a87a <memset+0x66>
  40a846:	f103 0210 	add.w	r2, r3, #16
  40a84a:	4626      	mov	r6, r4
  40a84c:	3e10      	subs	r6, #16
  40a84e:	2e0f      	cmp	r6, #15
  40a850:	f842 5c10 	str.w	r5, [r2, #-16]
  40a854:	f842 5c0c 	str.w	r5, [r2, #-12]
  40a858:	f842 5c08 	str.w	r5, [r2, #-8]
  40a85c:	f842 5c04 	str.w	r5, [r2, #-4]
  40a860:	f102 0210 	add.w	r2, r2, #16
  40a864:	d8f2      	bhi.n	40a84c <memset+0x38>
  40a866:	f1a4 0210 	sub.w	r2, r4, #16
  40a86a:	f022 020f 	bic.w	r2, r2, #15
  40a86e:	f004 040f 	and.w	r4, r4, #15
  40a872:	3210      	adds	r2, #16
  40a874:	2c03      	cmp	r4, #3
  40a876:	4413      	add	r3, r2
  40a878:	d90d      	bls.n	40a896 <memset+0x82>
  40a87a:	461e      	mov	r6, r3
  40a87c:	4622      	mov	r2, r4
  40a87e:	3a04      	subs	r2, #4
  40a880:	2a03      	cmp	r2, #3
  40a882:	f846 5b04 	str.w	r5, [r6], #4
  40a886:	d8fa      	bhi.n	40a87e <memset+0x6a>
  40a888:	1f22      	subs	r2, r4, #4
  40a88a:	f022 0203 	bic.w	r2, r2, #3
  40a88e:	3204      	adds	r2, #4
  40a890:	4413      	add	r3, r2
  40a892:	f004 0403 	and.w	r4, r4, #3
  40a896:	b12c      	cbz	r4, 40a8a4 <memset+0x90>
  40a898:	b2c9      	uxtb	r1, r1
  40a89a:	441c      	add	r4, r3
  40a89c:	f803 1b01 	strb.w	r1, [r3], #1
  40a8a0:	42a3      	cmp	r3, r4
  40a8a2:	d1fb      	bne.n	40a89c <memset+0x88>
  40a8a4:	bc70      	pop	{r4, r5, r6}
  40a8a6:	4770      	bx	lr
  40a8a8:	4614      	mov	r4, r2
  40a8aa:	4603      	mov	r3, r0
  40a8ac:	e7c2      	b.n	40a834 <memset+0x20>
  40a8ae:	bf00      	nop

0040a8b0 <__malloc_lock>:
  40a8b0:	4770      	bx	lr
  40a8b2:	bf00      	nop

0040a8b4 <__malloc_unlock>:
  40a8b4:	4770      	bx	lr
  40a8b6:	bf00      	nop

0040a8b8 <_puts_r>:
  40a8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a8ba:	4604      	mov	r4, r0
  40a8bc:	b089      	sub	sp, #36	; 0x24
  40a8be:	4608      	mov	r0, r1
  40a8c0:	460d      	mov	r5, r1
  40a8c2:	f000 f8c5 	bl	40aa50 <strlen>
  40a8c6:	68a3      	ldr	r3, [r4, #8]
  40a8c8:	4f11      	ldr	r7, [pc, #68]	; (40a910 <_puts_r+0x58>)
  40a8ca:	899a      	ldrh	r2, [r3, #12]
  40a8cc:	9504      	str	r5, [sp, #16]
  40a8ce:	2102      	movs	r1, #2
  40a8d0:	f100 0e01 	add.w	lr, r0, #1
  40a8d4:	2601      	movs	r6, #1
  40a8d6:	ad04      	add	r5, sp, #16
  40a8d8:	9102      	str	r1, [sp, #8]
  40a8da:	0491      	lsls	r1, r2, #18
  40a8dc:	9005      	str	r0, [sp, #20]
  40a8de:	f8cd e00c 	str.w	lr, [sp, #12]
  40a8e2:	9706      	str	r7, [sp, #24]
  40a8e4:	9607      	str	r6, [sp, #28]
  40a8e6:	9501      	str	r5, [sp, #4]
  40a8e8:	d406      	bmi.n	40a8f8 <_puts_r+0x40>
  40a8ea:	6e59      	ldr	r1, [r3, #100]	; 0x64
  40a8ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a8f0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a8f4:	819a      	strh	r2, [r3, #12]
  40a8f6:	6659      	str	r1, [r3, #100]	; 0x64
  40a8f8:	4620      	mov	r0, r4
  40a8fa:	4619      	mov	r1, r3
  40a8fc:	aa01      	add	r2, sp, #4
  40a8fe:	f001 fae9 	bl	40bed4 <__sfvwrite_r>
  40a902:	2800      	cmp	r0, #0
  40a904:	bf14      	ite	ne
  40a906:	f04f 30ff 	movne.w	r0, #4294967295
  40a90a:	200a      	moveq	r0, #10
  40a90c:	b009      	add	sp, #36	; 0x24
  40a90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a910:	0040d5ac 	.word	0x0040d5ac

0040a914 <puts>:
  40a914:	4b02      	ldr	r3, [pc, #8]	; (40a920 <puts+0xc>)
  40a916:	4601      	mov	r1, r0
  40a918:	6818      	ldr	r0, [r3, #0]
  40a91a:	f7ff bfcd 	b.w	40a8b8 <_puts_r>
  40a91e:	bf00      	nop
  40a920:	20000588 	.word	0x20000588

0040a924 <_sbrk_r>:
  40a924:	b538      	push	{r3, r4, r5, lr}
  40a926:	4c07      	ldr	r4, [pc, #28]	; (40a944 <_sbrk_r+0x20>)
  40a928:	2300      	movs	r3, #0
  40a92a:	4605      	mov	r5, r0
  40a92c:	4608      	mov	r0, r1
  40a92e:	6023      	str	r3, [r4, #0]
  40a930:	f7fe fa96 	bl	408e60 <_sbrk>
  40a934:	1c43      	adds	r3, r0, #1
  40a936:	d000      	beq.n	40a93a <_sbrk_r+0x16>
  40a938:	bd38      	pop	{r3, r4, r5, pc}
  40a93a:	6823      	ldr	r3, [r4, #0]
  40a93c:	2b00      	cmp	r3, #0
  40a93e:	d0fb      	beq.n	40a938 <_sbrk_r+0x14>
  40a940:	602b      	str	r3, [r5, #0]
  40a942:	bd38      	pop	{r3, r4, r5, pc}
  40a944:	2001c404 	.word	0x2001c404

0040a948 <setbuf>:
  40a948:	2900      	cmp	r1, #0
  40a94a:	bf0c      	ite	eq
  40a94c:	2202      	moveq	r2, #2
  40a94e:	2200      	movne	r2, #0
  40a950:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a954:	f000 b800 	b.w	40a958 <setvbuf>

0040a958 <setvbuf>:
  40a958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a95c:	4c3a      	ldr	r4, [pc, #232]	; (40aa48 <setvbuf+0xf0>)
  40a95e:	6826      	ldr	r6, [r4, #0]
  40a960:	460d      	mov	r5, r1
  40a962:	4604      	mov	r4, r0
  40a964:	4690      	mov	r8, r2
  40a966:	461f      	mov	r7, r3
  40a968:	b116      	cbz	r6, 40a970 <setvbuf+0x18>
  40a96a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  40a96c:	2b00      	cmp	r3, #0
  40a96e:	d03c      	beq.n	40a9ea <setvbuf+0x92>
  40a970:	f1b8 0f02 	cmp.w	r8, #2
  40a974:	d82f      	bhi.n	40a9d6 <setvbuf+0x7e>
  40a976:	2f00      	cmp	r7, #0
  40a978:	db2d      	blt.n	40a9d6 <setvbuf+0x7e>
  40a97a:	4621      	mov	r1, r4
  40a97c:	4630      	mov	r0, r6
  40a97e:	f001 f865 	bl	40ba4c <_fflush_r>
  40a982:	89a1      	ldrh	r1, [r4, #12]
  40a984:	2300      	movs	r3, #0
  40a986:	6063      	str	r3, [r4, #4]
  40a988:	61a3      	str	r3, [r4, #24]
  40a98a:	060b      	lsls	r3, r1, #24
  40a98c:	d427      	bmi.n	40a9de <setvbuf+0x86>
  40a98e:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  40a992:	b289      	uxth	r1, r1
  40a994:	f1b8 0f02 	cmp.w	r8, #2
  40a998:	81a1      	strh	r1, [r4, #12]
  40a99a:	d02a      	beq.n	40a9f2 <setvbuf+0x9a>
  40a99c:	2d00      	cmp	r5, #0
  40a99e:	d036      	beq.n	40aa0e <setvbuf+0xb6>
  40a9a0:	f1b8 0f01 	cmp.w	r8, #1
  40a9a4:	d011      	beq.n	40a9ca <setvbuf+0x72>
  40a9a6:	b289      	uxth	r1, r1
  40a9a8:	f001 0008 	and.w	r0, r1, #8
  40a9ac:	4b27      	ldr	r3, [pc, #156]	; (40aa4c <setvbuf+0xf4>)
  40a9ae:	63f3      	str	r3, [r6, #60]	; 0x3c
  40a9b0:	b280      	uxth	r0, r0
  40a9b2:	6025      	str	r5, [r4, #0]
  40a9b4:	6125      	str	r5, [r4, #16]
  40a9b6:	6167      	str	r7, [r4, #20]
  40a9b8:	b178      	cbz	r0, 40a9da <setvbuf+0x82>
  40a9ba:	f011 0f03 	tst.w	r1, #3
  40a9be:	bf18      	it	ne
  40a9c0:	2700      	movne	r7, #0
  40a9c2:	60a7      	str	r7, [r4, #8]
  40a9c4:	2000      	movs	r0, #0
  40a9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a9ca:	f041 0101 	orr.w	r1, r1, #1
  40a9ce:	427b      	negs	r3, r7
  40a9d0:	81a1      	strh	r1, [r4, #12]
  40a9d2:	61a3      	str	r3, [r4, #24]
  40a9d4:	e7e7      	b.n	40a9a6 <setvbuf+0x4e>
  40a9d6:	f04f 30ff 	mov.w	r0, #4294967295
  40a9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a9de:	6921      	ldr	r1, [r4, #16]
  40a9e0:	4630      	mov	r0, r6
  40a9e2:	f001 f99f 	bl	40bd24 <_free_r>
  40a9e6:	89a1      	ldrh	r1, [r4, #12]
  40a9e8:	e7d1      	b.n	40a98e <setvbuf+0x36>
  40a9ea:	4630      	mov	r0, r6
  40a9ec:	f001 f8c2 	bl	40bb74 <__sinit>
  40a9f0:	e7be      	b.n	40a970 <setvbuf+0x18>
  40a9f2:	2000      	movs	r0, #0
  40a9f4:	f104 0343 	add.w	r3, r4, #67	; 0x43
  40a9f8:	f041 0102 	orr.w	r1, r1, #2
  40a9fc:	2500      	movs	r5, #0
  40a9fe:	2201      	movs	r2, #1
  40aa00:	81a1      	strh	r1, [r4, #12]
  40aa02:	60a5      	str	r5, [r4, #8]
  40aa04:	6023      	str	r3, [r4, #0]
  40aa06:	6123      	str	r3, [r4, #16]
  40aa08:	6162      	str	r2, [r4, #20]
  40aa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40aa0e:	2f00      	cmp	r7, #0
  40aa10:	bf08      	it	eq
  40aa12:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40aa16:	4638      	mov	r0, r7
  40aa18:	f7ff fb8e 	bl	40a138 <malloc>
  40aa1c:	4605      	mov	r5, r0
  40aa1e:	b128      	cbz	r0, 40aa2c <setvbuf+0xd4>
  40aa20:	89a1      	ldrh	r1, [r4, #12]
  40aa22:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40aa26:	b289      	uxth	r1, r1
  40aa28:	81a1      	strh	r1, [r4, #12]
  40aa2a:	e7b9      	b.n	40a9a0 <setvbuf+0x48>
  40aa2c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40aa30:	f7ff fb82 	bl	40a138 <malloc>
  40aa34:	4605      	mov	r5, r0
  40aa36:	b918      	cbnz	r0, 40aa40 <setvbuf+0xe8>
  40aa38:	89a1      	ldrh	r1, [r4, #12]
  40aa3a:	f04f 30ff 	mov.w	r0, #4294967295
  40aa3e:	e7d9      	b.n	40a9f4 <setvbuf+0x9c>
  40aa40:	f44f 6780 	mov.w	r7, #1024	; 0x400
  40aa44:	e7ec      	b.n	40aa20 <setvbuf+0xc8>
  40aa46:	bf00      	nop
  40aa48:	20000588 	.word	0x20000588
  40aa4c:	0040ba79 	.word	0x0040ba79

0040aa50 <strlen>:
  40aa50:	f020 0103 	bic.w	r1, r0, #3
  40aa54:	f010 0003 	ands.w	r0, r0, #3
  40aa58:	f1c0 0000 	rsb	r0, r0, #0
  40aa5c:	f851 3b04 	ldr.w	r3, [r1], #4
  40aa60:	f100 0c04 	add.w	ip, r0, #4
  40aa64:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40aa68:	f06f 0200 	mvn.w	r2, #0
  40aa6c:	bf1c      	itt	ne
  40aa6e:	fa22 f20c 	lsrne.w	r2, r2, ip
  40aa72:	4313      	orrne	r3, r2
  40aa74:	f04f 0c01 	mov.w	ip, #1
  40aa78:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40aa7c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40aa80:	eba3 020c 	sub.w	r2, r3, ip
  40aa84:	ea22 0203 	bic.w	r2, r2, r3
  40aa88:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40aa8c:	bf04      	itt	eq
  40aa8e:	f851 3b04 	ldreq.w	r3, [r1], #4
  40aa92:	3004      	addeq	r0, #4
  40aa94:	d0f4      	beq.n	40aa80 <strlen+0x30>
  40aa96:	f1c2 0100 	rsb	r1, r2, #0
  40aa9a:	ea02 0201 	and.w	r2, r2, r1
  40aa9e:	fab2 f282 	clz	r2, r2
  40aaa2:	f1c2 021f 	rsb	r2, r2, #31
  40aaa6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40aaaa:	4770      	bx	lr

0040aaac <strncpy>:
  40aaac:	ea40 0301 	orr.w	r3, r0, r1
  40aab0:	079b      	lsls	r3, r3, #30
  40aab2:	b470      	push	{r4, r5, r6}
  40aab4:	d12b      	bne.n	40ab0e <strncpy+0x62>
  40aab6:	2a03      	cmp	r2, #3
  40aab8:	d929      	bls.n	40ab0e <strncpy+0x62>
  40aaba:	460c      	mov	r4, r1
  40aabc:	4603      	mov	r3, r0
  40aabe:	4621      	mov	r1, r4
  40aac0:	f854 6b04 	ldr.w	r6, [r4], #4
  40aac4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  40aac8:	ea25 0506 	bic.w	r5, r5, r6
  40aacc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  40aad0:	d105      	bne.n	40aade <strncpy+0x32>
  40aad2:	3a04      	subs	r2, #4
  40aad4:	2a03      	cmp	r2, #3
  40aad6:	f843 6b04 	str.w	r6, [r3], #4
  40aada:	4621      	mov	r1, r4
  40aadc:	d8ef      	bhi.n	40aabe <strncpy+0x12>
  40aade:	b1a2      	cbz	r2, 40ab0a <strncpy+0x5e>
  40aae0:	780c      	ldrb	r4, [r1, #0]
  40aae2:	701c      	strb	r4, [r3, #0]
  40aae4:	3a01      	subs	r2, #1
  40aae6:	3301      	adds	r3, #1
  40aae8:	3101      	adds	r1, #1
  40aaea:	b13c      	cbz	r4, 40aafc <strncpy+0x50>
  40aaec:	b16a      	cbz	r2, 40ab0a <strncpy+0x5e>
  40aaee:	f811 4b01 	ldrb.w	r4, [r1], #1
  40aaf2:	f803 4b01 	strb.w	r4, [r3], #1
  40aaf6:	3a01      	subs	r2, #1
  40aaf8:	2c00      	cmp	r4, #0
  40aafa:	d1f7      	bne.n	40aaec <strncpy+0x40>
  40aafc:	b12a      	cbz	r2, 40ab0a <strncpy+0x5e>
  40aafe:	441a      	add	r2, r3
  40ab00:	2100      	movs	r1, #0
  40ab02:	f803 1b01 	strb.w	r1, [r3], #1
  40ab06:	4293      	cmp	r3, r2
  40ab08:	d1fb      	bne.n	40ab02 <strncpy+0x56>
  40ab0a:	bc70      	pop	{r4, r5, r6}
  40ab0c:	4770      	bx	lr
  40ab0e:	4603      	mov	r3, r0
  40ab10:	e7e5      	b.n	40aade <strncpy+0x32>
  40ab12:	bf00      	nop

0040ab14 <__sprint_r.part.0>:
  40ab14:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40ab16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ab1a:	049c      	lsls	r4, r3, #18
  40ab1c:	460f      	mov	r7, r1
  40ab1e:	4692      	mov	sl, r2
  40ab20:	d52b      	bpl.n	40ab7a <__sprint_r.part.0+0x66>
  40ab22:	6893      	ldr	r3, [r2, #8]
  40ab24:	6812      	ldr	r2, [r2, #0]
  40ab26:	b333      	cbz	r3, 40ab76 <__sprint_r.part.0+0x62>
  40ab28:	4680      	mov	r8, r0
  40ab2a:	f102 0908 	add.w	r9, r2, #8
  40ab2e:	e919 0060 	ldmdb	r9, {r5, r6}
  40ab32:	08b6      	lsrs	r6, r6, #2
  40ab34:	d017      	beq.n	40ab66 <__sprint_r.part.0+0x52>
  40ab36:	3d04      	subs	r5, #4
  40ab38:	2400      	movs	r4, #0
  40ab3a:	e001      	b.n	40ab40 <__sprint_r.part.0+0x2c>
  40ab3c:	42a6      	cmp	r6, r4
  40ab3e:	d010      	beq.n	40ab62 <__sprint_r.part.0+0x4e>
  40ab40:	4640      	mov	r0, r8
  40ab42:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40ab46:	463a      	mov	r2, r7
  40ab48:	f001 f88c 	bl	40bc64 <_fputwc_r>
  40ab4c:	1c43      	adds	r3, r0, #1
  40ab4e:	f104 0401 	add.w	r4, r4, #1
  40ab52:	d1f3      	bne.n	40ab3c <__sprint_r.part.0+0x28>
  40ab54:	2300      	movs	r3, #0
  40ab56:	f8ca 3008 	str.w	r3, [sl, #8]
  40ab5a:	f8ca 3004 	str.w	r3, [sl, #4]
  40ab5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab62:	f8da 3008 	ldr.w	r3, [sl, #8]
  40ab66:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40ab6a:	f8ca 3008 	str.w	r3, [sl, #8]
  40ab6e:	f109 0908 	add.w	r9, r9, #8
  40ab72:	2b00      	cmp	r3, #0
  40ab74:	d1db      	bne.n	40ab2e <__sprint_r.part.0+0x1a>
  40ab76:	2000      	movs	r0, #0
  40ab78:	e7ec      	b.n	40ab54 <__sprint_r.part.0+0x40>
  40ab7a:	f001 f9ab 	bl	40bed4 <__sfvwrite_r>
  40ab7e:	2300      	movs	r3, #0
  40ab80:	f8ca 3008 	str.w	r3, [sl, #8]
  40ab84:	f8ca 3004 	str.w	r3, [sl, #4]
  40ab88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040ab8c <_vfiprintf_r>:
  40ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ab90:	b0ab      	sub	sp, #172	; 0xac
  40ab92:	461c      	mov	r4, r3
  40ab94:	9100      	str	r1, [sp, #0]
  40ab96:	4693      	mov	fp, r2
  40ab98:	9304      	str	r3, [sp, #16]
  40ab9a:	9001      	str	r0, [sp, #4]
  40ab9c:	b118      	cbz	r0, 40aba6 <_vfiprintf_r+0x1a>
  40ab9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40aba0:	2b00      	cmp	r3, #0
  40aba2:	f000 80e3 	beq.w	40ad6c <_vfiprintf_r+0x1e0>
  40aba6:	9b00      	ldr	r3, [sp, #0]
  40aba8:	8999      	ldrh	r1, [r3, #12]
  40abaa:	b28a      	uxth	r2, r1
  40abac:	0490      	lsls	r0, r2, #18
  40abae:	d408      	bmi.n	40abc2 <_vfiprintf_r+0x36>
  40abb0:	4618      	mov	r0, r3
  40abb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  40abb4:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  40abb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40abbc:	8182      	strh	r2, [r0, #12]
  40abbe:	6643      	str	r3, [r0, #100]	; 0x64
  40abc0:	b292      	uxth	r2, r2
  40abc2:	0711      	lsls	r1, r2, #28
  40abc4:	f140 80b2 	bpl.w	40ad2c <_vfiprintf_r+0x1a0>
  40abc8:	9b00      	ldr	r3, [sp, #0]
  40abca:	691b      	ldr	r3, [r3, #16]
  40abcc:	2b00      	cmp	r3, #0
  40abce:	f000 80ad 	beq.w	40ad2c <_vfiprintf_r+0x1a0>
  40abd2:	f002 021a 	and.w	r2, r2, #26
  40abd6:	2a0a      	cmp	r2, #10
  40abd8:	f000 80b4 	beq.w	40ad44 <_vfiprintf_r+0x1b8>
  40abdc:	2300      	movs	r3, #0
  40abde:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  40abe2:	9309      	str	r3, [sp, #36]	; 0x24
  40abe4:	930f      	str	r3, [sp, #60]	; 0x3c
  40abe6:	930e      	str	r3, [sp, #56]	; 0x38
  40abe8:	9302      	str	r3, [sp, #8]
  40abea:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40abee:	4654      	mov	r4, sl
  40abf0:	f89b 3000 	ldrb.w	r3, [fp]
  40abf4:	2b00      	cmp	r3, #0
  40abf6:	f000 84a3 	beq.w	40b540 <_vfiprintf_r+0x9b4>
  40abfa:	2b25      	cmp	r3, #37	; 0x25
  40abfc:	f000 84a0 	beq.w	40b540 <_vfiprintf_r+0x9b4>
  40ac00:	465a      	mov	r2, fp
  40ac02:	e001      	b.n	40ac08 <_vfiprintf_r+0x7c>
  40ac04:	2b25      	cmp	r3, #37	; 0x25
  40ac06:	d003      	beq.n	40ac10 <_vfiprintf_r+0x84>
  40ac08:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40ac0c:	2b00      	cmp	r3, #0
  40ac0e:	d1f9      	bne.n	40ac04 <_vfiprintf_r+0x78>
  40ac10:	ebcb 0602 	rsb	r6, fp, r2
  40ac14:	4615      	mov	r5, r2
  40ac16:	b196      	cbz	r6, 40ac3e <_vfiprintf_r+0xb2>
  40ac18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ac1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ac1c:	f8c4 b000 	str.w	fp, [r4]
  40ac20:	3301      	adds	r3, #1
  40ac22:	4432      	add	r2, r6
  40ac24:	2b07      	cmp	r3, #7
  40ac26:	6066      	str	r6, [r4, #4]
  40ac28:	920f      	str	r2, [sp, #60]	; 0x3c
  40ac2a:	930e      	str	r3, [sp, #56]	; 0x38
  40ac2c:	dd79      	ble.n	40ad22 <_vfiprintf_r+0x196>
  40ac2e:	2a00      	cmp	r2, #0
  40ac30:	f040 84af 	bne.w	40b592 <_vfiprintf_r+0xa06>
  40ac34:	9b02      	ldr	r3, [sp, #8]
  40ac36:	920e      	str	r2, [sp, #56]	; 0x38
  40ac38:	4433      	add	r3, r6
  40ac3a:	4654      	mov	r4, sl
  40ac3c:	9302      	str	r3, [sp, #8]
  40ac3e:	782b      	ldrb	r3, [r5, #0]
  40ac40:	2b00      	cmp	r3, #0
  40ac42:	f000 8360 	beq.w	40b306 <_vfiprintf_r+0x77a>
  40ac46:	2100      	movs	r1, #0
  40ac48:	f04f 0300 	mov.w	r3, #0
  40ac4c:	f04f 3cff 	mov.w	ip, #4294967295
  40ac50:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40ac54:	1c68      	adds	r0, r5, #1
  40ac56:	786b      	ldrb	r3, [r5, #1]
  40ac58:	4688      	mov	r8, r1
  40ac5a:	460d      	mov	r5, r1
  40ac5c:	4666      	mov	r6, ip
  40ac5e:	f100 0b01 	add.w	fp, r0, #1
  40ac62:	f1a3 0220 	sub.w	r2, r3, #32
  40ac66:	2a58      	cmp	r2, #88	; 0x58
  40ac68:	f200 82ab 	bhi.w	40b1c2 <_vfiprintf_r+0x636>
  40ac6c:	e8df f012 	tbh	[pc, r2, lsl #1]
  40ac70:	02a9029b 	.word	0x02a9029b
  40ac74:	02a302a9 	.word	0x02a302a9
  40ac78:	02a902a9 	.word	0x02a902a9
  40ac7c:	02a902a9 	.word	0x02a902a9
  40ac80:	02a902a9 	.word	0x02a902a9
  40ac84:	02620255 	.word	0x02620255
  40ac88:	010d02a9 	.word	0x010d02a9
  40ac8c:	02a9026e 	.word	0x02a9026e
  40ac90:	012f0129 	.word	0x012f0129
  40ac94:	012f012f 	.word	0x012f012f
  40ac98:	012f012f 	.word	0x012f012f
  40ac9c:	012f012f 	.word	0x012f012f
  40aca0:	012f012f 	.word	0x012f012f
  40aca4:	02a902a9 	.word	0x02a902a9
  40aca8:	02a902a9 	.word	0x02a902a9
  40acac:	02a902a9 	.word	0x02a902a9
  40acb0:	02a902a9 	.word	0x02a902a9
  40acb4:	02a902a9 	.word	0x02a902a9
  40acb8:	02a9013d 	.word	0x02a9013d
  40acbc:	02a902a9 	.word	0x02a902a9
  40acc0:	02a902a9 	.word	0x02a902a9
  40acc4:	02a902a9 	.word	0x02a902a9
  40acc8:	02a902a9 	.word	0x02a902a9
  40accc:	017402a9 	.word	0x017402a9
  40acd0:	02a902a9 	.word	0x02a902a9
  40acd4:	02a902a9 	.word	0x02a902a9
  40acd8:	018b02a9 	.word	0x018b02a9
  40acdc:	02a902a9 	.word	0x02a902a9
  40ace0:	02a901a3 	.word	0x02a901a3
  40ace4:	02a902a9 	.word	0x02a902a9
  40ace8:	02a902a9 	.word	0x02a902a9
  40acec:	02a902a9 	.word	0x02a902a9
  40acf0:	02a902a9 	.word	0x02a902a9
  40acf4:	01c702a9 	.word	0x01c702a9
  40acf8:	02a901da 	.word	0x02a901da
  40acfc:	02a902a9 	.word	0x02a902a9
  40ad00:	01da0123 	.word	0x01da0123
  40ad04:	02a902a9 	.word	0x02a902a9
  40ad08:	02a9024c 	.word	0x02a9024c
  40ad0c:	0113028a 	.word	0x0113028a
  40ad10:	020701f3 	.word	0x020701f3
  40ad14:	020d02a9 	.word	0x020d02a9
  40ad18:	008102a9 	.word	0x008102a9
  40ad1c:	02a902a9 	.word	0x02a902a9
  40ad20:	0233      	.short	0x0233
  40ad22:	3408      	adds	r4, #8
  40ad24:	9b02      	ldr	r3, [sp, #8]
  40ad26:	4433      	add	r3, r6
  40ad28:	9302      	str	r3, [sp, #8]
  40ad2a:	e788      	b.n	40ac3e <_vfiprintf_r+0xb2>
  40ad2c:	9801      	ldr	r0, [sp, #4]
  40ad2e:	9900      	ldr	r1, [sp, #0]
  40ad30:	f000 fd70 	bl	40b814 <__swsetup_r>
  40ad34:	b9a8      	cbnz	r0, 40ad62 <_vfiprintf_r+0x1d6>
  40ad36:	9b00      	ldr	r3, [sp, #0]
  40ad38:	899a      	ldrh	r2, [r3, #12]
  40ad3a:	f002 021a 	and.w	r2, r2, #26
  40ad3e:	2a0a      	cmp	r2, #10
  40ad40:	f47f af4c 	bne.w	40abdc <_vfiprintf_r+0x50>
  40ad44:	9b00      	ldr	r3, [sp, #0]
  40ad46:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  40ad4a:	2b00      	cmp	r3, #0
  40ad4c:	f6ff af46 	blt.w	40abdc <_vfiprintf_r+0x50>
  40ad50:	9801      	ldr	r0, [sp, #4]
  40ad52:	9900      	ldr	r1, [sp, #0]
  40ad54:	465a      	mov	r2, fp
  40ad56:	4623      	mov	r3, r4
  40ad58:	f000 fd20 	bl	40b79c <__sbprintf>
  40ad5c:	b02b      	add	sp, #172	; 0xac
  40ad5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ad62:	f04f 30ff 	mov.w	r0, #4294967295
  40ad66:	b02b      	add	sp, #172	; 0xac
  40ad68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ad6c:	f000 ff02 	bl	40bb74 <__sinit>
  40ad70:	e719      	b.n	40aba6 <_vfiprintf_r+0x1a>
  40ad72:	f018 0f20 	tst.w	r8, #32
  40ad76:	9503      	str	r5, [sp, #12]
  40ad78:	46b4      	mov	ip, r6
  40ad7a:	f000 810c 	beq.w	40af96 <_vfiprintf_r+0x40a>
  40ad7e:	9b04      	ldr	r3, [sp, #16]
  40ad80:	3307      	adds	r3, #7
  40ad82:	f023 0307 	bic.w	r3, r3, #7
  40ad86:	f103 0208 	add.w	r2, r3, #8
  40ad8a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40ad8e:	9204      	str	r2, [sp, #16]
  40ad90:	2301      	movs	r3, #1
  40ad92:	f04f 0200 	mov.w	r2, #0
  40ad96:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40ad9a:	46e1      	mov	r9, ip
  40ad9c:	2500      	movs	r5, #0
  40ad9e:	f1bc 0f00 	cmp.w	ip, #0
  40ada2:	bfa8      	it	ge
  40ada4:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40ada8:	ea56 0207 	orrs.w	r2, r6, r7
  40adac:	f040 80c4 	bne.w	40af38 <_vfiprintf_r+0x3ac>
  40adb0:	f1bc 0f00 	cmp.w	ip, #0
  40adb4:	f000 8381 	beq.w	40b4ba <_vfiprintf_r+0x92e>
  40adb8:	2b01      	cmp	r3, #1
  40adba:	f000 80c5 	beq.w	40af48 <_vfiprintf_r+0x3bc>
  40adbe:	2b02      	cmp	r3, #2
  40adc0:	f000 8387 	beq.w	40b4d2 <_vfiprintf_r+0x946>
  40adc4:	4651      	mov	r1, sl
  40adc6:	08f2      	lsrs	r2, r6, #3
  40adc8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40adcc:	08f8      	lsrs	r0, r7, #3
  40adce:	f006 0307 	and.w	r3, r6, #7
  40add2:	4607      	mov	r7, r0
  40add4:	4616      	mov	r6, r2
  40add6:	3330      	adds	r3, #48	; 0x30
  40add8:	ea56 0207 	orrs.w	r2, r6, r7
  40addc:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40ade0:	d1f1      	bne.n	40adc6 <_vfiprintf_r+0x23a>
  40ade2:	f018 0f01 	tst.w	r8, #1
  40ade6:	9107      	str	r1, [sp, #28]
  40ade8:	f040 83fc 	bne.w	40b5e4 <_vfiprintf_r+0xa58>
  40adec:	ebc1 090a 	rsb	r9, r1, sl
  40adf0:	45e1      	cmp	r9, ip
  40adf2:	464e      	mov	r6, r9
  40adf4:	bfb8      	it	lt
  40adf6:	4666      	movlt	r6, ip
  40adf8:	b105      	cbz	r5, 40adfc <_vfiprintf_r+0x270>
  40adfa:	3601      	adds	r6, #1
  40adfc:	f018 0302 	ands.w	r3, r8, #2
  40ae00:	9305      	str	r3, [sp, #20]
  40ae02:	bf18      	it	ne
  40ae04:	3602      	addne	r6, #2
  40ae06:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  40ae0a:	9306      	str	r3, [sp, #24]
  40ae0c:	f040 81fa 	bne.w	40b204 <_vfiprintf_r+0x678>
  40ae10:	9b03      	ldr	r3, [sp, #12]
  40ae12:	1b9d      	subs	r5, r3, r6
  40ae14:	2d00      	cmp	r5, #0
  40ae16:	f340 81f5 	ble.w	40b204 <_vfiprintf_r+0x678>
  40ae1a:	2d10      	cmp	r5, #16
  40ae1c:	f340 848c 	ble.w	40b738 <_vfiprintf_r+0xbac>
  40ae20:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  40ae24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ae26:	4fc6      	ldr	r7, [pc, #792]	; (40b140 <_vfiprintf_r+0x5b4>)
  40ae28:	4620      	mov	r0, r4
  40ae2a:	2310      	movs	r3, #16
  40ae2c:	4664      	mov	r4, ip
  40ae2e:	4671      	mov	r1, lr
  40ae30:	4684      	mov	ip, r0
  40ae32:	e007      	b.n	40ae44 <_vfiprintf_r+0x2b8>
  40ae34:	f101 0e02 	add.w	lr, r1, #2
  40ae38:	f10c 0c08 	add.w	ip, ip, #8
  40ae3c:	4601      	mov	r1, r0
  40ae3e:	3d10      	subs	r5, #16
  40ae40:	2d10      	cmp	r5, #16
  40ae42:	dd13      	ble.n	40ae6c <_vfiprintf_r+0x2e0>
  40ae44:	1c48      	adds	r0, r1, #1
  40ae46:	3210      	adds	r2, #16
  40ae48:	2807      	cmp	r0, #7
  40ae4a:	920f      	str	r2, [sp, #60]	; 0x3c
  40ae4c:	f8cc 7000 	str.w	r7, [ip]
  40ae50:	f8cc 3004 	str.w	r3, [ip, #4]
  40ae54:	900e      	str	r0, [sp, #56]	; 0x38
  40ae56:	dded      	ble.n	40ae34 <_vfiprintf_r+0x2a8>
  40ae58:	2a00      	cmp	r2, #0
  40ae5a:	f040 81c3 	bne.w	40b1e4 <_vfiprintf_r+0x658>
  40ae5e:	3d10      	subs	r5, #16
  40ae60:	2d10      	cmp	r5, #16
  40ae62:	4611      	mov	r1, r2
  40ae64:	f04f 0e01 	mov.w	lr, #1
  40ae68:	46d4      	mov	ip, sl
  40ae6a:	dceb      	bgt.n	40ae44 <_vfiprintf_r+0x2b8>
  40ae6c:	4663      	mov	r3, ip
  40ae6e:	4671      	mov	r1, lr
  40ae70:	46a4      	mov	ip, r4
  40ae72:	461c      	mov	r4, r3
  40ae74:	442a      	add	r2, r5
  40ae76:	2907      	cmp	r1, #7
  40ae78:	920f      	str	r2, [sp, #60]	; 0x3c
  40ae7a:	6027      	str	r7, [r4, #0]
  40ae7c:	6065      	str	r5, [r4, #4]
  40ae7e:	910e      	str	r1, [sp, #56]	; 0x38
  40ae80:	f300 8346 	bgt.w	40b510 <_vfiprintf_r+0x984>
  40ae84:	3408      	adds	r4, #8
  40ae86:	1c48      	adds	r0, r1, #1
  40ae88:	e1bf      	b.n	40b20a <_vfiprintf_r+0x67e>
  40ae8a:	4658      	mov	r0, fp
  40ae8c:	f048 0804 	orr.w	r8, r8, #4
  40ae90:	f89b 3000 	ldrb.w	r3, [fp]
  40ae94:	e6e3      	b.n	40ac5e <_vfiprintf_r+0xd2>
  40ae96:	f018 0320 	ands.w	r3, r8, #32
  40ae9a:	9503      	str	r5, [sp, #12]
  40ae9c:	46b4      	mov	ip, r6
  40ae9e:	d062      	beq.n	40af66 <_vfiprintf_r+0x3da>
  40aea0:	9b04      	ldr	r3, [sp, #16]
  40aea2:	3307      	adds	r3, #7
  40aea4:	f023 0307 	bic.w	r3, r3, #7
  40aea8:	f103 0208 	add.w	r2, r3, #8
  40aeac:	e9d3 6700 	ldrd	r6, r7, [r3]
  40aeb0:	9204      	str	r2, [sp, #16]
  40aeb2:	2300      	movs	r3, #0
  40aeb4:	e76d      	b.n	40ad92 <_vfiprintf_r+0x206>
  40aeb6:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  40aeba:	f89b 3000 	ldrb.w	r3, [fp]
  40aebe:	4658      	mov	r0, fp
  40aec0:	e6cd      	b.n	40ac5e <_vfiprintf_r+0xd2>
  40aec2:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  40aec6:	f89b 3000 	ldrb.w	r3, [fp]
  40aeca:	4658      	mov	r0, fp
  40aecc:	e6c7      	b.n	40ac5e <_vfiprintf_r+0xd2>
  40aece:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40aed2:	2500      	movs	r5, #0
  40aed4:	f81b 3b01 	ldrb.w	r3, [fp], #1
  40aed8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40aedc:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40aee0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40aee4:	2a09      	cmp	r2, #9
  40aee6:	d9f5      	bls.n	40aed4 <_vfiprintf_r+0x348>
  40aee8:	e6bb      	b.n	40ac62 <_vfiprintf_r+0xd6>
  40aeea:	f048 0810 	orr.w	r8, r8, #16
  40aeee:	f018 0f20 	tst.w	r8, #32
  40aef2:	9503      	str	r5, [sp, #12]
  40aef4:	46b4      	mov	ip, r6
  40aef6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40aefa:	f000 809b 	beq.w	40b034 <_vfiprintf_r+0x4a8>
  40aefe:	9904      	ldr	r1, [sp, #16]
  40af00:	3107      	adds	r1, #7
  40af02:	f021 0107 	bic.w	r1, r1, #7
  40af06:	e9d1 2300 	ldrd	r2, r3, [r1]
  40af0a:	3108      	adds	r1, #8
  40af0c:	9104      	str	r1, [sp, #16]
  40af0e:	4616      	mov	r6, r2
  40af10:	461f      	mov	r7, r3
  40af12:	2a00      	cmp	r2, #0
  40af14:	f173 0300 	sbcs.w	r3, r3, #0
  40af18:	f2c0 83a6 	blt.w	40b668 <_vfiprintf_r+0xadc>
  40af1c:	f1bc 0f00 	cmp.w	ip, #0
  40af20:	bfa8      	it	ge
  40af22:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40af26:	ea56 0207 	orrs.w	r2, r6, r7
  40af2a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40af2e:	46e1      	mov	r9, ip
  40af30:	f04f 0301 	mov.w	r3, #1
  40af34:	f43f af3c 	beq.w	40adb0 <_vfiprintf_r+0x224>
  40af38:	2b01      	cmp	r3, #1
  40af3a:	f47f af40 	bne.w	40adbe <_vfiprintf_r+0x232>
  40af3e:	2f00      	cmp	r7, #0
  40af40:	bf08      	it	eq
  40af42:	2e0a      	cmpeq	r6, #10
  40af44:	f080 8334 	bcs.w	40b5b0 <_vfiprintf_r+0xa24>
  40af48:	ab2a      	add	r3, sp, #168	; 0xa8
  40af4a:	3630      	adds	r6, #48	; 0x30
  40af4c:	f803 6d41 	strb.w	r6, [r3, #-65]!
  40af50:	ebc3 090a 	rsb	r9, r3, sl
  40af54:	9307      	str	r3, [sp, #28]
  40af56:	e74b      	b.n	40adf0 <_vfiprintf_r+0x264>
  40af58:	f048 0810 	orr.w	r8, r8, #16
  40af5c:	f018 0320 	ands.w	r3, r8, #32
  40af60:	9503      	str	r5, [sp, #12]
  40af62:	46b4      	mov	ip, r6
  40af64:	d19c      	bne.n	40aea0 <_vfiprintf_r+0x314>
  40af66:	f018 0210 	ands.w	r2, r8, #16
  40af6a:	f040 82f7 	bne.w	40b55c <_vfiprintf_r+0x9d0>
  40af6e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  40af72:	f000 82f3 	beq.w	40b55c <_vfiprintf_r+0x9d0>
  40af76:	9904      	ldr	r1, [sp, #16]
  40af78:	4613      	mov	r3, r2
  40af7a:	460a      	mov	r2, r1
  40af7c:	3204      	adds	r2, #4
  40af7e:	880e      	ldrh	r6, [r1, #0]
  40af80:	9204      	str	r2, [sp, #16]
  40af82:	2700      	movs	r7, #0
  40af84:	e705      	b.n	40ad92 <_vfiprintf_r+0x206>
  40af86:	f048 0810 	orr.w	r8, r8, #16
  40af8a:	f018 0f20 	tst.w	r8, #32
  40af8e:	9503      	str	r5, [sp, #12]
  40af90:	46b4      	mov	ip, r6
  40af92:	f47f aef4 	bne.w	40ad7e <_vfiprintf_r+0x1f2>
  40af96:	9a04      	ldr	r2, [sp, #16]
  40af98:	f018 0f10 	tst.w	r8, #16
  40af9c:	4613      	mov	r3, r2
  40af9e:	f040 82e4 	bne.w	40b56a <_vfiprintf_r+0x9de>
  40afa2:	f018 0f40 	tst.w	r8, #64	; 0x40
  40afa6:	f000 82e0 	beq.w	40b56a <_vfiprintf_r+0x9de>
  40afaa:	8816      	ldrh	r6, [r2, #0]
  40afac:	3204      	adds	r2, #4
  40afae:	2700      	movs	r7, #0
  40afb0:	2301      	movs	r3, #1
  40afb2:	9204      	str	r2, [sp, #16]
  40afb4:	e6ed      	b.n	40ad92 <_vfiprintf_r+0x206>
  40afb6:	4a63      	ldr	r2, [pc, #396]	; (40b144 <_vfiprintf_r+0x5b8>)
  40afb8:	9503      	str	r5, [sp, #12]
  40afba:	f018 0f20 	tst.w	r8, #32
  40afbe:	46b4      	mov	ip, r6
  40afc0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40afc4:	9209      	str	r2, [sp, #36]	; 0x24
  40afc6:	f000 8090 	beq.w	40b0ea <_vfiprintf_r+0x55e>
  40afca:	9a04      	ldr	r2, [sp, #16]
  40afcc:	3207      	adds	r2, #7
  40afce:	f022 0207 	bic.w	r2, r2, #7
  40afd2:	e9d2 6700 	ldrd	r6, r7, [r2]
  40afd6:	f102 0108 	add.w	r1, r2, #8
  40afda:	9104      	str	r1, [sp, #16]
  40afdc:	f018 0f01 	tst.w	r8, #1
  40afe0:	f000 8290 	beq.w	40b504 <_vfiprintf_r+0x978>
  40afe4:	ea56 0207 	orrs.w	r2, r6, r7
  40afe8:	f000 828c 	beq.w	40b504 <_vfiprintf_r+0x978>
  40afec:	2230      	movs	r2, #48	; 0x30
  40afee:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40aff2:	f048 0802 	orr.w	r8, r8, #2
  40aff6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  40affa:	2302      	movs	r3, #2
  40affc:	e6c9      	b.n	40ad92 <_vfiprintf_r+0x206>
  40affe:	9a04      	ldr	r2, [sp, #16]
  40b000:	9503      	str	r5, [sp, #12]
  40b002:	6813      	ldr	r3, [r2, #0]
  40b004:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40b008:	4613      	mov	r3, r2
  40b00a:	3304      	adds	r3, #4
  40b00c:	2601      	movs	r6, #1
  40b00e:	f04f 0100 	mov.w	r1, #0
  40b012:	9304      	str	r3, [sp, #16]
  40b014:	ab10      	add	r3, sp, #64	; 0x40
  40b016:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b01a:	46b1      	mov	r9, r6
  40b01c:	9307      	str	r3, [sp, #28]
  40b01e:	f04f 0c00 	mov.w	ip, #0
  40b022:	e6eb      	b.n	40adfc <_vfiprintf_r+0x270>
  40b024:	f018 0f20 	tst.w	r8, #32
  40b028:	9503      	str	r5, [sp, #12]
  40b02a:	46b4      	mov	ip, r6
  40b02c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b030:	f47f af65 	bne.w	40aefe <_vfiprintf_r+0x372>
  40b034:	f018 0f10 	tst.w	r8, #16
  40b038:	f040 82a2 	bne.w	40b580 <_vfiprintf_r+0x9f4>
  40b03c:	f018 0f40 	tst.w	r8, #64	; 0x40
  40b040:	f000 829e 	beq.w	40b580 <_vfiprintf_r+0x9f4>
  40b044:	9904      	ldr	r1, [sp, #16]
  40b046:	f9b1 6000 	ldrsh.w	r6, [r1]
  40b04a:	3104      	adds	r1, #4
  40b04c:	17f7      	asrs	r7, r6, #31
  40b04e:	4632      	mov	r2, r6
  40b050:	463b      	mov	r3, r7
  40b052:	9104      	str	r1, [sp, #16]
  40b054:	e75d      	b.n	40af12 <_vfiprintf_r+0x386>
  40b056:	9904      	ldr	r1, [sp, #16]
  40b058:	9503      	str	r5, [sp, #12]
  40b05a:	2330      	movs	r3, #48	; 0x30
  40b05c:	460a      	mov	r2, r1
  40b05e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  40b062:	2378      	movs	r3, #120	; 0x78
  40b064:	3204      	adds	r2, #4
  40b066:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40b06a:	4b37      	ldr	r3, [pc, #220]	; (40b148 <_vfiprintf_r+0x5bc>)
  40b06c:	9309      	str	r3, [sp, #36]	; 0x24
  40b06e:	46b4      	mov	ip, r6
  40b070:	f048 0802 	orr.w	r8, r8, #2
  40b074:	680e      	ldr	r6, [r1, #0]
  40b076:	9204      	str	r2, [sp, #16]
  40b078:	2700      	movs	r7, #0
  40b07a:	2302      	movs	r3, #2
  40b07c:	e689      	b.n	40ad92 <_vfiprintf_r+0x206>
  40b07e:	f048 0820 	orr.w	r8, r8, #32
  40b082:	f89b 3000 	ldrb.w	r3, [fp]
  40b086:	4658      	mov	r0, fp
  40b088:	e5e9      	b.n	40ac5e <_vfiprintf_r+0xd2>
  40b08a:	9a04      	ldr	r2, [sp, #16]
  40b08c:	9503      	str	r5, [sp, #12]
  40b08e:	6813      	ldr	r3, [r2, #0]
  40b090:	9307      	str	r3, [sp, #28]
  40b092:	f04f 0100 	mov.w	r1, #0
  40b096:	46b4      	mov	ip, r6
  40b098:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b09c:	1d16      	adds	r6, r2, #4
  40b09e:	2b00      	cmp	r3, #0
  40b0a0:	f000 8350 	beq.w	40b744 <_vfiprintf_r+0xbb8>
  40b0a4:	f1bc 0f00 	cmp.w	ip, #0
  40b0a8:	f2c0 832a 	blt.w	40b700 <_vfiprintf_r+0xb74>
  40b0ac:	9d07      	ldr	r5, [sp, #28]
  40b0ae:	f8cd c010 	str.w	ip, [sp, #16]
  40b0b2:	4662      	mov	r2, ip
  40b0b4:	4628      	mov	r0, r5
  40b0b6:	2100      	movs	r1, #0
  40b0b8:	f001 f93c 	bl	40c334 <memchr>
  40b0bc:	f8dd c010 	ldr.w	ip, [sp, #16]
  40b0c0:	2800      	cmp	r0, #0
  40b0c2:	f000 8350 	beq.w	40b766 <_vfiprintf_r+0xbda>
  40b0c6:	ebc5 0900 	rsb	r9, r5, r0
  40b0ca:	9604      	str	r6, [sp, #16]
  40b0cc:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40b0d0:	f04f 0c00 	mov.w	ip, #0
  40b0d4:	e68c      	b.n	40adf0 <_vfiprintf_r+0x264>
  40b0d6:	4a1c      	ldr	r2, [pc, #112]	; (40b148 <_vfiprintf_r+0x5bc>)
  40b0d8:	9503      	str	r5, [sp, #12]
  40b0da:	f018 0f20 	tst.w	r8, #32
  40b0de:	46b4      	mov	ip, r6
  40b0e0:	9209      	str	r2, [sp, #36]	; 0x24
  40b0e2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b0e6:	f47f af70 	bne.w	40afca <_vfiprintf_r+0x43e>
  40b0ea:	9904      	ldr	r1, [sp, #16]
  40b0ec:	f018 0f10 	tst.w	r8, #16
  40b0f0:	460a      	mov	r2, r1
  40b0f2:	f040 8240 	bne.w	40b576 <_vfiprintf_r+0x9ea>
  40b0f6:	f018 0f40 	tst.w	r8, #64	; 0x40
  40b0fa:	f000 823c 	beq.w	40b576 <_vfiprintf_r+0x9ea>
  40b0fe:	3204      	adds	r2, #4
  40b100:	880e      	ldrh	r6, [r1, #0]
  40b102:	9204      	str	r2, [sp, #16]
  40b104:	2700      	movs	r7, #0
  40b106:	e769      	b.n	40afdc <_vfiprintf_r+0x450>
  40b108:	f89b 3000 	ldrb.w	r3, [fp]
  40b10c:	2b6c      	cmp	r3, #108	; 0x6c
  40b10e:	f000 82ea 	beq.w	40b6e6 <_vfiprintf_r+0xb5a>
  40b112:	f048 0810 	orr.w	r8, r8, #16
  40b116:	4658      	mov	r0, fp
  40b118:	e5a1      	b.n	40ac5e <_vfiprintf_r+0xd2>
  40b11a:	9a04      	ldr	r2, [sp, #16]
  40b11c:	6815      	ldr	r5, [r2, #0]
  40b11e:	4613      	mov	r3, r2
  40b120:	2d00      	cmp	r5, #0
  40b122:	f103 0304 	add.w	r3, r3, #4
  40b126:	f2c0 82e6 	blt.w	40b6f6 <_vfiprintf_r+0xb6a>
  40b12a:	9304      	str	r3, [sp, #16]
  40b12c:	f89b 3000 	ldrb.w	r3, [fp]
  40b130:	4658      	mov	r0, fp
  40b132:	e594      	b.n	40ac5e <_vfiprintf_r+0xd2>
  40b134:	f89b 3000 	ldrb.w	r3, [fp]
  40b138:	4658      	mov	r0, fp
  40b13a:	212b      	movs	r1, #43	; 0x2b
  40b13c:	e58f      	b.n	40ac5e <_vfiprintf_r+0xd2>
  40b13e:	bf00      	nop
  40b140:	0040d5f0 	.word	0x0040d5f0
  40b144:	0040d5c0 	.word	0x0040d5c0
  40b148:	0040d5d4 	.word	0x0040d5d4
  40b14c:	f89b 3000 	ldrb.w	r3, [fp]
  40b150:	2b2a      	cmp	r3, #42	; 0x2a
  40b152:	f10b 0001 	add.w	r0, fp, #1
  40b156:	f000 830f 	beq.w	40b778 <_vfiprintf_r+0xbec>
  40b15a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b15e:	2a09      	cmp	r2, #9
  40b160:	4683      	mov	fp, r0
  40b162:	f04f 0600 	mov.w	r6, #0
  40b166:	f63f ad7c 	bhi.w	40ac62 <_vfiprintf_r+0xd6>
  40b16a:	f81b 3b01 	ldrb.w	r3, [fp], #1
  40b16e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40b172:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  40b176:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b17a:	2a09      	cmp	r2, #9
  40b17c:	d9f5      	bls.n	40b16a <_vfiprintf_r+0x5de>
  40b17e:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40b182:	e56e      	b.n	40ac62 <_vfiprintf_r+0xd6>
  40b184:	f018 0f20 	tst.w	r8, #32
  40b188:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b18c:	f000 8283 	beq.w	40b696 <_vfiprintf_r+0xb0a>
  40b190:	9a04      	ldr	r2, [sp, #16]
  40b192:	9902      	ldr	r1, [sp, #8]
  40b194:	6813      	ldr	r3, [r2, #0]
  40b196:	17cf      	asrs	r7, r1, #31
  40b198:	4608      	mov	r0, r1
  40b19a:	3204      	adds	r2, #4
  40b19c:	4639      	mov	r1, r7
  40b19e:	9204      	str	r2, [sp, #16]
  40b1a0:	e9c3 0100 	strd	r0, r1, [r3]
  40b1a4:	e524      	b.n	40abf0 <_vfiprintf_r+0x64>
  40b1a6:	4658      	mov	r0, fp
  40b1a8:	f89b 3000 	ldrb.w	r3, [fp]
  40b1ac:	2900      	cmp	r1, #0
  40b1ae:	f47f ad56 	bne.w	40ac5e <_vfiprintf_r+0xd2>
  40b1b2:	2120      	movs	r1, #32
  40b1b4:	e553      	b.n	40ac5e <_vfiprintf_r+0xd2>
  40b1b6:	f048 0801 	orr.w	r8, r8, #1
  40b1ba:	4658      	mov	r0, fp
  40b1bc:	f89b 3000 	ldrb.w	r3, [fp]
  40b1c0:	e54d      	b.n	40ac5e <_vfiprintf_r+0xd2>
  40b1c2:	9503      	str	r5, [sp, #12]
  40b1c4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b1c8:	2b00      	cmp	r3, #0
  40b1ca:	f000 809c 	beq.w	40b306 <_vfiprintf_r+0x77a>
  40b1ce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40b1d2:	f04f 0300 	mov.w	r3, #0
  40b1d6:	2601      	movs	r6, #1
  40b1d8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40b1dc:	ab10      	add	r3, sp, #64	; 0x40
  40b1de:	46b1      	mov	r9, r6
  40b1e0:	9307      	str	r3, [sp, #28]
  40b1e2:	e71c      	b.n	40b01e <_vfiprintf_r+0x492>
  40b1e4:	9801      	ldr	r0, [sp, #4]
  40b1e6:	9900      	ldr	r1, [sp, #0]
  40b1e8:	9308      	str	r3, [sp, #32]
  40b1ea:	aa0d      	add	r2, sp, #52	; 0x34
  40b1ec:	f7ff fc92 	bl	40ab14 <__sprint_r.part.0>
  40b1f0:	2800      	cmp	r0, #0
  40b1f2:	f040 808f 	bne.w	40b314 <_vfiprintf_r+0x788>
  40b1f6:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b1f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b1fa:	9b08      	ldr	r3, [sp, #32]
  40b1fc:	f101 0e01 	add.w	lr, r1, #1
  40b200:	46d4      	mov	ip, sl
  40b202:	e61c      	b.n	40ae3e <_vfiprintf_r+0x2b2>
  40b204:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b208:	1c48      	adds	r0, r1, #1
  40b20a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40b20e:	b16b      	cbz	r3, 40b22c <_vfiprintf_r+0x6a0>
  40b210:	3201      	adds	r2, #1
  40b212:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  40b216:	2101      	movs	r1, #1
  40b218:	2807      	cmp	r0, #7
  40b21a:	920f      	str	r2, [sp, #60]	; 0x3c
  40b21c:	900e      	str	r0, [sp, #56]	; 0x38
  40b21e:	6023      	str	r3, [r4, #0]
  40b220:	6061      	str	r1, [r4, #4]
  40b222:	f300 8134 	bgt.w	40b48e <_vfiprintf_r+0x902>
  40b226:	4601      	mov	r1, r0
  40b228:	3408      	adds	r4, #8
  40b22a:	3001      	adds	r0, #1
  40b22c:	9b05      	ldr	r3, [sp, #20]
  40b22e:	b163      	cbz	r3, 40b24a <_vfiprintf_r+0x6be>
  40b230:	3202      	adds	r2, #2
  40b232:	a90c      	add	r1, sp, #48	; 0x30
  40b234:	2302      	movs	r3, #2
  40b236:	2807      	cmp	r0, #7
  40b238:	920f      	str	r2, [sp, #60]	; 0x3c
  40b23a:	900e      	str	r0, [sp, #56]	; 0x38
  40b23c:	e884 000a 	stmia.w	r4, {r1, r3}
  40b240:	f300 8134 	bgt.w	40b4ac <_vfiprintf_r+0x920>
  40b244:	4601      	mov	r1, r0
  40b246:	3408      	adds	r4, #8
  40b248:	3001      	adds	r0, #1
  40b24a:	9b06      	ldr	r3, [sp, #24]
  40b24c:	2b80      	cmp	r3, #128	; 0x80
  40b24e:	f000 80d4 	beq.w	40b3fa <_vfiprintf_r+0x86e>
  40b252:	ebc9 070c 	rsb	r7, r9, ip
  40b256:	2f00      	cmp	r7, #0
  40b258:	dd2b      	ble.n	40b2b2 <_vfiprintf_r+0x726>
  40b25a:	2f10      	cmp	r7, #16
  40b25c:	4daa      	ldr	r5, [pc, #680]	; (40b508 <_vfiprintf_r+0x97c>)
  40b25e:	dd1f      	ble.n	40b2a0 <_vfiprintf_r+0x714>
  40b260:	46a6      	mov	lr, r4
  40b262:	2310      	movs	r3, #16
  40b264:	9c01      	ldr	r4, [sp, #4]
  40b266:	e007      	b.n	40b278 <_vfiprintf_r+0x6ec>
  40b268:	f101 0c02 	add.w	ip, r1, #2
  40b26c:	f10e 0e08 	add.w	lr, lr, #8
  40b270:	4601      	mov	r1, r0
  40b272:	3f10      	subs	r7, #16
  40b274:	2f10      	cmp	r7, #16
  40b276:	dd11      	ble.n	40b29c <_vfiprintf_r+0x710>
  40b278:	1c48      	adds	r0, r1, #1
  40b27a:	3210      	adds	r2, #16
  40b27c:	2807      	cmp	r0, #7
  40b27e:	920f      	str	r2, [sp, #60]	; 0x3c
  40b280:	f8ce 5000 	str.w	r5, [lr]
  40b284:	f8ce 3004 	str.w	r3, [lr, #4]
  40b288:	900e      	str	r0, [sp, #56]	; 0x38
  40b28a:	dded      	ble.n	40b268 <_vfiprintf_r+0x6dc>
  40b28c:	bb6a      	cbnz	r2, 40b2ea <_vfiprintf_r+0x75e>
  40b28e:	3f10      	subs	r7, #16
  40b290:	2f10      	cmp	r7, #16
  40b292:	f04f 0c01 	mov.w	ip, #1
  40b296:	4611      	mov	r1, r2
  40b298:	46d6      	mov	lr, sl
  40b29a:	dced      	bgt.n	40b278 <_vfiprintf_r+0x6ec>
  40b29c:	4674      	mov	r4, lr
  40b29e:	4660      	mov	r0, ip
  40b2a0:	443a      	add	r2, r7
  40b2a2:	2807      	cmp	r0, #7
  40b2a4:	920f      	str	r2, [sp, #60]	; 0x3c
  40b2a6:	e884 00a0 	stmia.w	r4, {r5, r7}
  40b2aa:	900e      	str	r0, [sp, #56]	; 0x38
  40b2ac:	dc3b      	bgt.n	40b326 <_vfiprintf_r+0x79a>
  40b2ae:	3408      	adds	r4, #8
  40b2b0:	3001      	adds	r0, #1
  40b2b2:	eb02 0309 	add.w	r3, r2, r9
  40b2b6:	9a07      	ldr	r2, [sp, #28]
  40b2b8:	930f      	str	r3, [sp, #60]	; 0x3c
  40b2ba:	2807      	cmp	r0, #7
  40b2bc:	e884 0204 	stmia.w	r4, {r2, r9}
  40b2c0:	900e      	str	r0, [sp, #56]	; 0x38
  40b2c2:	dd3d      	ble.n	40b340 <_vfiprintf_r+0x7b4>
  40b2c4:	2b00      	cmp	r3, #0
  40b2c6:	f040 813e 	bne.w	40b546 <_vfiprintf_r+0x9ba>
  40b2ca:	f018 0f04 	tst.w	r8, #4
  40b2ce:	930e      	str	r3, [sp, #56]	; 0x38
  40b2d0:	f040 812f 	bne.w	40b532 <_vfiprintf_r+0x9a6>
  40b2d4:	9b02      	ldr	r3, [sp, #8]
  40b2d6:	9a03      	ldr	r2, [sp, #12]
  40b2d8:	4296      	cmp	r6, r2
  40b2da:	bfac      	ite	ge
  40b2dc:	199b      	addge	r3, r3, r6
  40b2de:	189b      	addlt	r3, r3, r2
  40b2e0:	9302      	str	r3, [sp, #8]
  40b2e2:	2300      	movs	r3, #0
  40b2e4:	930e      	str	r3, [sp, #56]	; 0x38
  40b2e6:	4654      	mov	r4, sl
  40b2e8:	e482      	b.n	40abf0 <_vfiprintf_r+0x64>
  40b2ea:	4620      	mov	r0, r4
  40b2ec:	9900      	ldr	r1, [sp, #0]
  40b2ee:	9305      	str	r3, [sp, #20]
  40b2f0:	aa0d      	add	r2, sp, #52	; 0x34
  40b2f2:	f7ff fc0f 	bl	40ab14 <__sprint_r.part.0>
  40b2f6:	b968      	cbnz	r0, 40b314 <_vfiprintf_r+0x788>
  40b2f8:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b2fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b2fc:	9b05      	ldr	r3, [sp, #20]
  40b2fe:	f101 0c01 	add.w	ip, r1, #1
  40b302:	46d6      	mov	lr, sl
  40b304:	e7b5      	b.n	40b272 <_vfiprintf_r+0x6e6>
  40b306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b308:	b123      	cbz	r3, 40b314 <_vfiprintf_r+0x788>
  40b30a:	9801      	ldr	r0, [sp, #4]
  40b30c:	9900      	ldr	r1, [sp, #0]
  40b30e:	aa0d      	add	r2, sp, #52	; 0x34
  40b310:	f7ff fc00 	bl	40ab14 <__sprint_r.part.0>
  40b314:	9b00      	ldr	r3, [sp, #0]
  40b316:	899b      	ldrh	r3, [r3, #12]
  40b318:	065b      	lsls	r3, r3, #25
  40b31a:	f53f ad22 	bmi.w	40ad62 <_vfiprintf_r+0x1d6>
  40b31e:	9802      	ldr	r0, [sp, #8]
  40b320:	b02b      	add	sp, #172	; 0xac
  40b322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b326:	2a00      	cmp	r2, #0
  40b328:	f040 8191 	bne.w	40b64e <_vfiprintf_r+0xac2>
  40b32c:	2201      	movs	r2, #1
  40b32e:	9907      	ldr	r1, [sp, #28]
  40b330:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  40b334:	464b      	mov	r3, r9
  40b336:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40b33a:	911a      	str	r1, [sp, #104]	; 0x68
  40b33c:	920e      	str	r2, [sp, #56]	; 0x38
  40b33e:	4654      	mov	r4, sl
  40b340:	f104 0208 	add.w	r2, r4, #8
  40b344:	f018 0f04 	tst.w	r8, #4
  40b348:	d039      	beq.n	40b3be <_vfiprintf_r+0x832>
  40b34a:	9903      	ldr	r1, [sp, #12]
  40b34c:	1b8d      	subs	r5, r1, r6
  40b34e:	2d00      	cmp	r5, #0
  40b350:	dd35      	ble.n	40b3be <_vfiprintf_r+0x832>
  40b352:	2d10      	cmp	r5, #16
  40b354:	f340 8202 	ble.w	40b75c <_vfiprintf_r+0xbd0>
  40b358:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b35a:	4f6c      	ldr	r7, [pc, #432]	; (40b50c <_vfiprintf_r+0x980>)
  40b35c:	f8dd 8004 	ldr.w	r8, [sp, #4]
  40b360:	f8dd 9000 	ldr.w	r9, [sp]
  40b364:	2410      	movs	r4, #16
  40b366:	e006      	b.n	40b376 <_vfiprintf_r+0x7ea>
  40b368:	f100 0e02 	add.w	lr, r0, #2
  40b36c:	3208      	adds	r2, #8
  40b36e:	4608      	mov	r0, r1
  40b370:	3d10      	subs	r5, #16
  40b372:	2d10      	cmp	r5, #16
  40b374:	dd10      	ble.n	40b398 <_vfiprintf_r+0x80c>
  40b376:	1c41      	adds	r1, r0, #1
  40b378:	3310      	adds	r3, #16
  40b37a:	2907      	cmp	r1, #7
  40b37c:	930f      	str	r3, [sp, #60]	; 0x3c
  40b37e:	6017      	str	r7, [r2, #0]
  40b380:	6054      	str	r4, [r2, #4]
  40b382:	910e      	str	r1, [sp, #56]	; 0x38
  40b384:	ddf0      	ble.n	40b368 <_vfiprintf_r+0x7dc>
  40b386:	2b00      	cmp	r3, #0
  40b388:	d12a      	bne.n	40b3e0 <_vfiprintf_r+0x854>
  40b38a:	3d10      	subs	r5, #16
  40b38c:	2d10      	cmp	r5, #16
  40b38e:	f04f 0e01 	mov.w	lr, #1
  40b392:	4618      	mov	r0, r3
  40b394:	4652      	mov	r2, sl
  40b396:	dcee      	bgt.n	40b376 <_vfiprintf_r+0x7ea>
  40b398:	442b      	add	r3, r5
  40b39a:	f1be 0f07 	cmp.w	lr, #7
  40b39e:	930f      	str	r3, [sp, #60]	; 0x3c
  40b3a0:	6017      	str	r7, [r2, #0]
  40b3a2:	6055      	str	r5, [r2, #4]
  40b3a4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40b3a8:	dd09      	ble.n	40b3be <_vfiprintf_r+0x832>
  40b3aa:	2b00      	cmp	r3, #0
  40b3ac:	d092      	beq.n	40b2d4 <_vfiprintf_r+0x748>
  40b3ae:	9801      	ldr	r0, [sp, #4]
  40b3b0:	9900      	ldr	r1, [sp, #0]
  40b3b2:	aa0d      	add	r2, sp, #52	; 0x34
  40b3b4:	f7ff fbae 	bl	40ab14 <__sprint_r.part.0>
  40b3b8:	2800      	cmp	r0, #0
  40b3ba:	d1ab      	bne.n	40b314 <_vfiprintf_r+0x788>
  40b3bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b3be:	9a02      	ldr	r2, [sp, #8]
  40b3c0:	9903      	ldr	r1, [sp, #12]
  40b3c2:	428e      	cmp	r6, r1
  40b3c4:	bfac      	ite	ge
  40b3c6:	1992      	addge	r2, r2, r6
  40b3c8:	1852      	addlt	r2, r2, r1
  40b3ca:	9202      	str	r2, [sp, #8]
  40b3cc:	2b00      	cmp	r3, #0
  40b3ce:	d088      	beq.n	40b2e2 <_vfiprintf_r+0x756>
  40b3d0:	9801      	ldr	r0, [sp, #4]
  40b3d2:	9900      	ldr	r1, [sp, #0]
  40b3d4:	aa0d      	add	r2, sp, #52	; 0x34
  40b3d6:	f7ff fb9d 	bl	40ab14 <__sprint_r.part.0>
  40b3da:	2800      	cmp	r0, #0
  40b3dc:	d081      	beq.n	40b2e2 <_vfiprintf_r+0x756>
  40b3de:	e799      	b.n	40b314 <_vfiprintf_r+0x788>
  40b3e0:	4640      	mov	r0, r8
  40b3e2:	4649      	mov	r1, r9
  40b3e4:	aa0d      	add	r2, sp, #52	; 0x34
  40b3e6:	f7ff fb95 	bl	40ab14 <__sprint_r.part.0>
  40b3ea:	2800      	cmp	r0, #0
  40b3ec:	d192      	bne.n	40b314 <_vfiprintf_r+0x788>
  40b3ee:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b3f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b3f2:	f100 0e01 	add.w	lr, r0, #1
  40b3f6:	4652      	mov	r2, sl
  40b3f8:	e7ba      	b.n	40b370 <_vfiprintf_r+0x7e4>
  40b3fa:	9b03      	ldr	r3, [sp, #12]
  40b3fc:	1b9f      	subs	r7, r3, r6
  40b3fe:	2f00      	cmp	r7, #0
  40b400:	f77f af27 	ble.w	40b252 <_vfiprintf_r+0x6c6>
  40b404:	2f10      	cmp	r7, #16
  40b406:	4d40      	ldr	r5, [pc, #256]	; (40b508 <_vfiprintf_r+0x97c>)
  40b408:	f340 81b4 	ble.w	40b774 <_vfiprintf_r+0xbe8>
  40b40c:	4620      	mov	r0, r4
  40b40e:	2310      	movs	r3, #16
  40b410:	4664      	mov	r4, ip
  40b412:	4684      	mov	ip, r0
  40b414:	e007      	b.n	40b426 <_vfiprintf_r+0x89a>
  40b416:	f101 0e02 	add.w	lr, r1, #2
  40b41a:	f10c 0c08 	add.w	ip, ip, #8
  40b41e:	4601      	mov	r1, r0
  40b420:	3f10      	subs	r7, #16
  40b422:	2f10      	cmp	r7, #16
  40b424:	dd11      	ble.n	40b44a <_vfiprintf_r+0x8be>
  40b426:	1c48      	adds	r0, r1, #1
  40b428:	3210      	adds	r2, #16
  40b42a:	2807      	cmp	r0, #7
  40b42c:	920f      	str	r2, [sp, #60]	; 0x3c
  40b42e:	f8cc 5000 	str.w	r5, [ip]
  40b432:	f8cc 3004 	str.w	r3, [ip, #4]
  40b436:	900e      	str	r0, [sp, #56]	; 0x38
  40b438:	dded      	ble.n	40b416 <_vfiprintf_r+0x88a>
  40b43a:	b9c2      	cbnz	r2, 40b46e <_vfiprintf_r+0x8e2>
  40b43c:	3f10      	subs	r7, #16
  40b43e:	2f10      	cmp	r7, #16
  40b440:	f04f 0e01 	mov.w	lr, #1
  40b444:	4611      	mov	r1, r2
  40b446:	46d4      	mov	ip, sl
  40b448:	dced      	bgt.n	40b426 <_vfiprintf_r+0x89a>
  40b44a:	4663      	mov	r3, ip
  40b44c:	46a4      	mov	ip, r4
  40b44e:	461c      	mov	r4, r3
  40b450:	443a      	add	r2, r7
  40b452:	f1be 0f07 	cmp.w	lr, #7
  40b456:	920f      	str	r2, [sp, #60]	; 0x3c
  40b458:	e884 00a0 	stmia.w	r4, {r5, r7}
  40b45c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40b460:	f300 80ef 	bgt.w	40b642 <_vfiprintf_r+0xab6>
  40b464:	3408      	adds	r4, #8
  40b466:	f10e 0001 	add.w	r0, lr, #1
  40b46a:	4671      	mov	r1, lr
  40b46c:	e6f1      	b.n	40b252 <_vfiprintf_r+0x6c6>
  40b46e:	9801      	ldr	r0, [sp, #4]
  40b470:	9900      	ldr	r1, [sp, #0]
  40b472:	9305      	str	r3, [sp, #20]
  40b474:	aa0d      	add	r2, sp, #52	; 0x34
  40b476:	f7ff fb4d 	bl	40ab14 <__sprint_r.part.0>
  40b47a:	2800      	cmp	r0, #0
  40b47c:	f47f af4a 	bne.w	40b314 <_vfiprintf_r+0x788>
  40b480:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b482:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b484:	9b05      	ldr	r3, [sp, #20]
  40b486:	f101 0e01 	add.w	lr, r1, #1
  40b48a:	46d4      	mov	ip, sl
  40b48c:	e7c8      	b.n	40b420 <_vfiprintf_r+0x894>
  40b48e:	2a00      	cmp	r2, #0
  40b490:	f040 80c6 	bne.w	40b620 <_vfiprintf_r+0xa94>
  40b494:	9b05      	ldr	r3, [sp, #20]
  40b496:	2b00      	cmp	r3, #0
  40b498:	f000 8086 	beq.w	40b5a8 <_vfiprintf_r+0xa1c>
  40b49c:	aa0c      	add	r2, sp, #48	; 0x30
  40b49e:	2302      	movs	r3, #2
  40b4a0:	921a      	str	r2, [sp, #104]	; 0x68
  40b4a2:	4608      	mov	r0, r1
  40b4a4:	931b      	str	r3, [sp, #108]	; 0x6c
  40b4a6:	461a      	mov	r2, r3
  40b4a8:	4654      	mov	r4, sl
  40b4aa:	e6cb      	b.n	40b244 <_vfiprintf_r+0x6b8>
  40b4ac:	2a00      	cmp	r2, #0
  40b4ae:	f040 80a6 	bne.w	40b5fe <_vfiprintf_r+0xa72>
  40b4b2:	2001      	movs	r0, #1
  40b4b4:	4611      	mov	r1, r2
  40b4b6:	4654      	mov	r4, sl
  40b4b8:	e6c7      	b.n	40b24a <_vfiprintf_r+0x6be>
  40b4ba:	bb03      	cbnz	r3, 40b4fe <_vfiprintf_r+0x972>
  40b4bc:	f018 0f01 	tst.w	r8, #1
  40b4c0:	d01d      	beq.n	40b4fe <_vfiprintf_r+0x972>
  40b4c2:	ab2a      	add	r3, sp, #168	; 0xa8
  40b4c4:	2230      	movs	r2, #48	; 0x30
  40b4c6:	f803 2d41 	strb.w	r2, [r3, #-65]!
  40b4ca:	ebc3 090a 	rsb	r9, r3, sl
  40b4ce:	9307      	str	r3, [sp, #28]
  40b4d0:	e48e      	b.n	40adf0 <_vfiprintf_r+0x264>
  40b4d2:	9809      	ldr	r0, [sp, #36]	; 0x24
  40b4d4:	46d1      	mov	r9, sl
  40b4d6:	0933      	lsrs	r3, r6, #4
  40b4d8:	f006 010f 	and.w	r1, r6, #15
  40b4dc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40b4e0:	093a      	lsrs	r2, r7, #4
  40b4e2:	461e      	mov	r6, r3
  40b4e4:	4617      	mov	r7, r2
  40b4e6:	5c43      	ldrb	r3, [r0, r1]
  40b4e8:	f809 3d01 	strb.w	r3, [r9, #-1]!
  40b4ec:	ea56 0307 	orrs.w	r3, r6, r7
  40b4f0:	d1f1      	bne.n	40b4d6 <_vfiprintf_r+0x94a>
  40b4f2:	464b      	mov	r3, r9
  40b4f4:	f8cd 901c 	str.w	r9, [sp, #28]
  40b4f8:	ebc3 090a 	rsb	r9, r3, sl
  40b4fc:	e478      	b.n	40adf0 <_vfiprintf_r+0x264>
  40b4fe:	f8cd a01c 	str.w	sl, [sp, #28]
  40b502:	e475      	b.n	40adf0 <_vfiprintf_r+0x264>
  40b504:	2302      	movs	r3, #2
  40b506:	e444      	b.n	40ad92 <_vfiprintf_r+0x206>
  40b508:	0040d5b0 	.word	0x0040d5b0
  40b50c:	0040d5f0 	.word	0x0040d5f0
  40b510:	2a00      	cmp	r2, #0
  40b512:	f040 80d7 	bne.w	40b6c4 <_vfiprintf_r+0xb38>
  40b516:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40b51a:	2b00      	cmp	r3, #0
  40b51c:	f000 80ae 	beq.w	40b67c <_vfiprintf_r+0xaf0>
  40b520:	2301      	movs	r3, #1
  40b522:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40b526:	4618      	mov	r0, r3
  40b528:	931b      	str	r3, [sp, #108]	; 0x6c
  40b52a:	461a      	mov	r2, r3
  40b52c:	911a      	str	r1, [sp, #104]	; 0x68
  40b52e:	4654      	mov	r4, sl
  40b530:	e679      	b.n	40b226 <_vfiprintf_r+0x69a>
  40b532:	9a03      	ldr	r2, [sp, #12]
  40b534:	1b95      	subs	r5, r2, r6
  40b536:	2d00      	cmp	r5, #0
  40b538:	4652      	mov	r2, sl
  40b53a:	f73f af0a 	bgt.w	40b352 <_vfiprintf_r+0x7c6>
  40b53e:	e6c9      	b.n	40b2d4 <_vfiprintf_r+0x748>
  40b540:	465d      	mov	r5, fp
  40b542:	f7ff bb7c 	b.w	40ac3e <_vfiprintf_r+0xb2>
  40b546:	9801      	ldr	r0, [sp, #4]
  40b548:	9900      	ldr	r1, [sp, #0]
  40b54a:	aa0d      	add	r2, sp, #52	; 0x34
  40b54c:	f7ff fae2 	bl	40ab14 <__sprint_r.part.0>
  40b550:	2800      	cmp	r0, #0
  40b552:	f47f aedf 	bne.w	40b314 <_vfiprintf_r+0x788>
  40b556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b558:	4652      	mov	r2, sl
  40b55a:	e6f3      	b.n	40b344 <_vfiprintf_r+0x7b8>
  40b55c:	9904      	ldr	r1, [sp, #16]
  40b55e:	460a      	mov	r2, r1
  40b560:	3204      	adds	r2, #4
  40b562:	680e      	ldr	r6, [r1, #0]
  40b564:	9204      	str	r2, [sp, #16]
  40b566:	2700      	movs	r7, #0
  40b568:	e413      	b.n	40ad92 <_vfiprintf_r+0x206>
  40b56a:	3204      	adds	r2, #4
  40b56c:	681e      	ldr	r6, [r3, #0]
  40b56e:	9204      	str	r2, [sp, #16]
  40b570:	2301      	movs	r3, #1
  40b572:	2700      	movs	r7, #0
  40b574:	e40d      	b.n	40ad92 <_vfiprintf_r+0x206>
  40b576:	6816      	ldr	r6, [r2, #0]
  40b578:	3204      	adds	r2, #4
  40b57a:	9204      	str	r2, [sp, #16]
  40b57c:	2700      	movs	r7, #0
  40b57e:	e52d      	b.n	40afdc <_vfiprintf_r+0x450>
  40b580:	9a04      	ldr	r2, [sp, #16]
  40b582:	6816      	ldr	r6, [r2, #0]
  40b584:	4613      	mov	r3, r2
  40b586:	3304      	adds	r3, #4
  40b588:	17f7      	asrs	r7, r6, #31
  40b58a:	9304      	str	r3, [sp, #16]
  40b58c:	4632      	mov	r2, r6
  40b58e:	463b      	mov	r3, r7
  40b590:	e4bf      	b.n	40af12 <_vfiprintf_r+0x386>
  40b592:	9801      	ldr	r0, [sp, #4]
  40b594:	9900      	ldr	r1, [sp, #0]
  40b596:	aa0d      	add	r2, sp, #52	; 0x34
  40b598:	f7ff fabc 	bl	40ab14 <__sprint_r.part.0>
  40b59c:	2800      	cmp	r0, #0
  40b59e:	f47f aeb9 	bne.w	40b314 <_vfiprintf_r+0x788>
  40b5a2:	4654      	mov	r4, sl
  40b5a4:	f7ff bbbe 	b.w	40ad24 <_vfiprintf_r+0x198>
  40b5a8:	4608      	mov	r0, r1
  40b5aa:	4654      	mov	r4, sl
  40b5ac:	4611      	mov	r1, r2
  40b5ae:	e64c      	b.n	40b24a <_vfiprintf_r+0x6be>
  40b5b0:	46d1      	mov	r9, sl
  40b5b2:	f8cd c014 	str.w	ip, [sp, #20]
  40b5b6:	4630      	mov	r0, r6
  40b5b8:	4639      	mov	r1, r7
  40b5ba:	220a      	movs	r2, #10
  40b5bc:	2300      	movs	r3, #0
  40b5be:	f7fe fab1 	bl	409b24 <__aeabi_uldivmod>
  40b5c2:	3230      	adds	r2, #48	; 0x30
  40b5c4:	4630      	mov	r0, r6
  40b5c6:	4639      	mov	r1, r7
  40b5c8:	f809 2d01 	strb.w	r2, [r9, #-1]!
  40b5cc:	2300      	movs	r3, #0
  40b5ce:	220a      	movs	r2, #10
  40b5d0:	f7fe faa8 	bl	409b24 <__aeabi_uldivmod>
  40b5d4:	4606      	mov	r6, r0
  40b5d6:	460f      	mov	r7, r1
  40b5d8:	ea56 0307 	orrs.w	r3, r6, r7
  40b5dc:	d1eb      	bne.n	40b5b6 <_vfiprintf_r+0xa2a>
  40b5de:	f8dd c014 	ldr.w	ip, [sp, #20]
  40b5e2:	e786      	b.n	40b4f2 <_vfiprintf_r+0x966>
  40b5e4:	2b30      	cmp	r3, #48	; 0x30
  40b5e6:	9b07      	ldr	r3, [sp, #28]
  40b5e8:	d086      	beq.n	40b4f8 <_vfiprintf_r+0x96c>
  40b5ea:	3b01      	subs	r3, #1
  40b5ec:	461a      	mov	r2, r3
  40b5ee:	9307      	str	r3, [sp, #28]
  40b5f0:	2330      	movs	r3, #48	; 0x30
  40b5f2:	ebc2 090a 	rsb	r9, r2, sl
  40b5f6:	f801 3c01 	strb.w	r3, [r1, #-1]
  40b5fa:	f7ff bbf9 	b.w	40adf0 <_vfiprintf_r+0x264>
  40b5fe:	9801      	ldr	r0, [sp, #4]
  40b600:	9900      	ldr	r1, [sp, #0]
  40b602:	f8cd c014 	str.w	ip, [sp, #20]
  40b606:	aa0d      	add	r2, sp, #52	; 0x34
  40b608:	f7ff fa84 	bl	40ab14 <__sprint_r.part.0>
  40b60c:	2800      	cmp	r0, #0
  40b60e:	f47f ae81 	bne.w	40b314 <_vfiprintf_r+0x788>
  40b612:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b614:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b616:	f8dd c014 	ldr.w	ip, [sp, #20]
  40b61a:	1c48      	adds	r0, r1, #1
  40b61c:	4654      	mov	r4, sl
  40b61e:	e614      	b.n	40b24a <_vfiprintf_r+0x6be>
  40b620:	9801      	ldr	r0, [sp, #4]
  40b622:	9900      	ldr	r1, [sp, #0]
  40b624:	f8cd c020 	str.w	ip, [sp, #32]
  40b628:	aa0d      	add	r2, sp, #52	; 0x34
  40b62a:	f7ff fa73 	bl	40ab14 <__sprint_r.part.0>
  40b62e:	2800      	cmp	r0, #0
  40b630:	f47f ae70 	bne.w	40b314 <_vfiprintf_r+0x788>
  40b634:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b636:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b638:	f8dd c020 	ldr.w	ip, [sp, #32]
  40b63c:	1c48      	adds	r0, r1, #1
  40b63e:	4654      	mov	r4, sl
  40b640:	e5f4      	b.n	40b22c <_vfiprintf_r+0x6a0>
  40b642:	2a00      	cmp	r2, #0
  40b644:	d167      	bne.n	40b716 <_vfiprintf_r+0xb8a>
  40b646:	2001      	movs	r0, #1
  40b648:	4611      	mov	r1, r2
  40b64a:	4654      	mov	r4, sl
  40b64c:	e601      	b.n	40b252 <_vfiprintf_r+0x6c6>
  40b64e:	9801      	ldr	r0, [sp, #4]
  40b650:	9900      	ldr	r1, [sp, #0]
  40b652:	aa0d      	add	r2, sp, #52	; 0x34
  40b654:	f7ff fa5e 	bl	40ab14 <__sprint_r.part.0>
  40b658:	2800      	cmp	r0, #0
  40b65a:	f47f ae5b 	bne.w	40b314 <_vfiprintf_r+0x788>
  40b65e:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b662:	3001      	adds	r0, #1
  40b664:	4654      	mov	r4, sl
  40b666:	e624      	b.n	40b2b2 <_vfiprintf_r+0x726>
  40b668:	252d      	movs	r5, #45	; 0x2d
  40b66a:	4276      	negs	r6, r6
  40b66c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40b670:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  40b674:	46e1      	mov	r9, ip
  40b676:	2301      	movs	r3, #1
  40b678:	f7ff bb91 	b.w	40ad9e <_vfiprintf_r+0x212>
  40b67c:	9b05      	ldr	r3, [sp, #20]
  40b67e:	4611      	mov	r1, r2
  40b680:	2001      	movs	r0, #1
  40b682:	4654      	mov	r4, sl
  40b684:	2b00      	cmp	r3, #0
  40b686:	f43f ade4 	beq.w	40b252 <_vfiprintf_r+0x6c6>
  40b68a:	aa0c      	add	r2, sp, #48	; 0x30
  40b68c:	2302      	movs	r3, #2
  40b68e:	e88a 000c 	stmia.w	sl, {r2, r3}
  40b692:	461a      	mov	r2, r3
  40b694:	e5d6      	b.n	40b244 <_vfiprintf_r+0x6b8>
  40b696:	f018 0f10 	tst.w	r8, #16
  40b69a:	d10b      	bne.n	40b6b4 <_vfiprintf_r+0xb28>
  40b69c:	f018 0f40 	tst.w	r8, #64	; 0x40
  40b6a0:	d008      	beq.n	40b6b4 <_vfiprintf_r+0xb28>
  40b6a2:	9a04      	ldr	r2, [sp, #16]
  40b6a4:	6813      	ldr	r3, [r2, #0]
  40b6a6:	3204      	adds	r2, #4
  40b6a8:	9204      	str	r2, [sp, #16]
  40b6aa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40b6ae:	801a      	strh	r2, [r3, #0]
  40b6b0:	f7ff ba9e 	b.w	40abf0 <_vfiprintf_r+0x64>
  40b6b4:	9a04      	ldr	r2, [sp, #16]
  40b6b6:	6813      	ldr	r3, [r2, #0]
  40b6b8:	3204      	adds	r2, #4
  40b6ba:	9204      	str	r2, [sp, #16]
  40b6bc:	9a02      	ldr	r2, [sp, #8]
  40b6be:	601a      	str	r2, [r3, #0]
  40b6c0:	f7ff ba96 	b.w	40abf0 <_vfiprintf_r+0x64>
  40b6c4:	9801      	ldr	r0, [sp, #4]
  40b6c6:	9900      	ldr	r1, [sp, #0]
  40b6c8:	f8cd c020 	str.w	ip, [sp, #32]
  40b6cc:	aa0d      	add	r2, sp, #52	; 0x34
  40b6ce:	f7ff fa21 	bl	40ab14 <__sprint_r.part.0>
  40b6d2:	2800      	cmp	r0, #0
  40b6d4:	f47f ae1e 	bne.w	40b314 <_vfiprintf_r+0x788>
  40b6d8:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b6da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b6dc:	f8dd c020 	ldr.w	ip, [sp, #32]
  40b6e0:	1c48      	adds	r0, r1, #1
  40b6e2:	4654      	mov	r4, sl
  40b6e4:	e591      	b.n	40b20a <_vfiprintf_r+0x67e>
  40b6e6:	f048 0820 	orr.w	r8, r8, #32
  40b6ea:	f10b 0001 	add.w	r0, fp, #1
  40b6ee:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40b6f2:	f7ff bab4 	b.w	40ac5e <_vfiprintf_r+0xd2>
  40b6f6:	426d      	negs	r5, r5
  40b6f8:	9304      	str	r3, [sp, #16]
  40b6fa:	4658      	mov	r0, fp
  40b6fc:	f7ff bbc6 	b.w	40ae8c <_vfiprintf_r+0x300>
  40b700:	9807      	ldr	r0, [sp, #28]
  40b702:	9604      	str	r6, [sp, #16]
  40b704:	f7ff f9a4 	bl	40aa50 <strlen>
  40b708:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40b70c:	4681      	mov	r9, r0
  40b70e:	f04f 0c00 	mov.w	ip, #0
  40b712:	f7ff bb6d 	b.w	40adf0 <_vfiprintf_r+0x264>
  40b716:	9801      	ldr	r0, [sp, #4]
  40b718:	9900      	ldr	r1, [sp, #0]
  40b71a:	f8cd c014 	str.w	ip, [sp, #20]
  40b71e:	aa0d      	add	r2, sp, #52	; 0x34
  40b720:	f7ff f9f8 	bl	40ab14 <__sprint_r.part.0>
  40b724:	2800      	cmp	r0, #0
  40b726:	f47f adf5 	bne.w	40b314 <_vfiprintf_r+0x788>
  40b72a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b72c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b72e:	f8dd c014 	ldr.w	ip, [sp, #20]
  40b732:	1c48      	adds	r0, r1, #1
  40b734:	4654      	mov	r4, sl
  40b736:	e58c      	b.n	40b252 <_vfiprintf_r+0x6c6>
  40b738:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b73a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b73c:	4f15      	ldr	r7, [pc, #84]	; (40b794 <_vfiprintf_r+0xc08>)
  40b73e:	3101      	adds	r1, #1
  40b740:	f7ff bb98 	b.w	40ae74 <_vfiprintf_r+0x2e8>
  40b744:	f1bc 0f06 	cmp.w	ip, #6
  40b748:	bf28      	it	cs
  40b74a:	f04f 0c06 	movcs.w	ip, #6
  40b74e:	4b12      	ldr	r3, [pc, #72]	; (40b798 <_vfiprintf_r+0xc0c>)
  40b750:	9604      	str	r6, [sp, #16]
  40b752:	46e1      	mov	r9, ip
  40b754:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  40b758:	9307      	str	r3, [sp, #28]
  40b75a:	e460      	b.n	40b01e <_vfiprintf_r+0x492>
  40b75c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b75e:	4f0d      	ldr	r7, [pc, #52]	; (40b794 <_vfiprintf_r+0xc08>)
  40b760:	f101 0e01 	add.w	lr, r1, #1
  40b764:	e618      	b.n	40b398 <_vfiprintf_r+0x80c>
  40b766:	46e1      	mov	r9, ip
  40b768:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40b76c:	9604      	str	r6, [sp, #16]
  40b76e:	4684      	mov	ip, r0
  40b770:	f7ff bb3e 	b.w	40adf0 <_vfiprintf_r+0x264>
  40b774:	4686      	mov	lr, r0
  40b776:	e66b      	b.n	40b450 <_vfiprintf_r+0x8c4>
  40b778:	9a04      	ldr	r2, [sp, #16]
  40b77a:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40b77e:	6816      	ldr	r6, [r2, #0]
  40b780:	3204      	adds	r2, #4
  40b782:	2e00      	cmp	r6, #0
  40b784:	9204      	str	r2, [sp, #16]
  40b786:	f6bf aa6a 	bge.w	40ac5e <_vfiprintf_r+0xd2>
  40b78a:	f04f 36ff 	mov.w	r6, #4294967295
  40b78e:	f7ff ba66 	b.w	40ac5e <_vfiprintf_r+0xd2>
  40b792:	bf00      	nop
  40b794:	0040d5f0 	.word	0x0040d5f0
  40b798:	0040d5e8 	.word	0x0040d5e8

0040b79c <__sbprintf>:
  40b79c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  40b7a0:	460c      	mov	r4, r1
  40b7a2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40b7a6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40b7aa:	69e7      	ldr	r7, [r4, #28]
  40b7ac:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40b7ae:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  40b7b2:	9119      	str	r1, [sp, #100]	; 0x64
  40b7b4:	ad1a      	add	r5, sp, #104	; 0x68
  40b7b6:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40b7ba:	f02e 0e02 	bic.w	lr, lr, #2
  40b7be:	f04f 0c00 	mov.w	ip, #0
  40b7c2:	9707      	str	r7, [sp, #28]
  40b7c4:	4669      	mov	r1, sp
  40b7c6:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40b7c8:	9500      	str	r5, [sp, #0]
  40b7ca:	9504      	str	r5, [sp, #16]
  40b7cc:	9602      	str	r6, [sp, #8]
  40b7ce:	9605      	str	r6, [sp, #20]
  40b7d0:	f8ad e00c 	strh.w	lr, [sp, #12]
  40b7d4:	f8ad 900e 	strh.w	r9, [sp, #14]
  40b7d8:	9709      	str	r7, [sp, #36]	; 0x24
  40b7da:	f8cd c018 	str.w	ip, [sp, #24]
  40b7de:	4606      	mov	r6, r0
  40b7e0:	f7ff f9d4 	bl	40ab8c <_vfiprintf_r>
  40b7e4:	1e05      	subs	r5, r0, #0
  40b7e6:	db07      	blt.n	40b7f8 <__sbprintf+0x5c>
  40b7e8:	4630      	mov	r0, r6
  40b7ea:	4669      	mov	r1, sp
  40b7ec:	f000 f92e 	bl	40ba4c <_fflush_r>
  40b7f0:	2800      	cmp	r0, #0
  40b7f2:	bf18      	it	ne
  40b7f4:	f04f 35ff 	movne.w	r5, #4294967295
  40b7f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40b7fc:	065b      	lsls	r3, r3, #25
  40b7fe:	d503      	bpl.n	40b808 <__sbprintf+0x6c>
  40b800:	89a3      	ldrh	r3, [r4, #12]
  40b802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b806:	81a3      	strh	r3, [r4, #12]
  40b808:	4628      	mov	r0, r5
  40b80a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40b80e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  40b812:	bf00      	nop

0040b814 <__swsetup_r>:
  40b814:	b538      	push	{r3, r4, r5, lr}
  40b816:	4b2f      	ldr	r3, [pc, #188]	; (40b8d4 <__swsetup_r+0xc0>)
  40b818:	681b      	ldr	r3, [r3, #0]
  40b81a:	4605      	mov	r5, r0
  40b81c:	460c      	mov	r4, r1
  40b81e:	b113      	cbz	r3, 40b826 <__swsetup_r+0x12>
  40b820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40b822:	2a00      	cmp	r2, #0
  40b824:	d036      	beq.n	40b894 <__swsetup_r+0x80>
  40b826:	89a2      	ldrh	r2, [r4, #12]
  40b828:	b293      	uxth	r3, r2
  40b82a:	0718      	lsls	r0, r3, #28
  40b82c:	d50c      	bpl.n	40b848 <__swsetup_r+0x34>
  40b82e:	6920      	ldr	r0, [r4, #16]
  40b830:	b1a8      	cbz	r0, 40b85e <__swsetup_r+0x4a>
  40b832:	f013 0201 	ands.w	r2, r3, #1
  40b836:	d01e      	beq.n	40b876 <__swsetup_r+0x62>
  40b838:	6963      	ldr	r3, [r4, #20]
  40b83a:	2200      	movs	r2, #0
  40b83c:	425b      	negs	r3, r3
  40b83e:	61a3      	str	r3, [r4, #24]
  40b840:	60a2      	str	r2, [r4, #8]
  40b842:	b1f0      	cbz	r0, 40b882 <__swsetup_r+0x6e>
  40b844:	2000      	movs	r0, #0
  40b846:	bd38      	pop	{r3, r4, r5, pc}
  40b848:	06d9      	lsls	r1, r3, #27
  40b84a:	d53b      	bpl.n	40b8c4 <__swsetup_r+0xb0>
  40b84c:	0758      	lsls	r0, r3, #29
  40b84e:	d425      	bmi.n	40b89c <__swsetup_r+0x88>
  40b850:	6920      	ldr	r0, [r4, #16]
  40b852:	f042 0308 	orr.w	r3, r2, #8
  40b856:	81a3      	strh	r3, [r4, #12]
  40b858:	b29b      	uxth	r3, r3
  40b85a:	2800      	cmp	r0, #0
  40b85c:	d1e9      	bne.n	40b832 <__swsetup_r+0x1e>
  40b85e:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40b862:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40b866:	d0e4      	beq.n	40b832 <__swsetup_r+0x1e>
  40b868:	4628      	mov	r0, r5
  40b86a:	4621      	mov	r1, r4
  40b86c:	f000 fcf2 	bl	40c254 <__smakebuf_r>
  40b870:	89a3      	ldrh	r3, [r4, #12]
  40b872:	6920      	ldr	r0, [r4, #16]
  40b874:	e7dd      	b.n	40b832 <__swsetup_r+0x1e>
  40b876:	0799      	lsls	r1, r3, #30
  40b878:	bf58      	it	pl
  40b87a:	6962      	ldrpl	r2, [r4, #20]
  40b87c:	60a2      	str	r2, [r4, #8]
  40b87e:	2800      	cmp	r0, #0
  40b880:	d1e0      	bne.n	40b844 <__swsetup_r+0x30>
  40b882:	89a3      	ldrh	r3, [r4, #12]
  40b884:	061a      	lsls	r2, r3, #24
  40b886:	d5de      	bpl.n	40b846 <__swsetup_r+0x32>
  40b888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b88c:	81a3      	strh	r3, [r4, #12]
  40b88e:	f04f 30ff 	mov.w	r0, #4294967295
  40b892:	bd38      	pop	{r3, r4, r5, pc}
  40b894:	4618      	mov	r0, r3
  40b896:	f000 f96d 	bl	40bb74 <__sinit>
  40b89a:	e7c4      	b.n	40b826 <__swsetup_r+0x12>
  40b89c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40b89e:	b149      	cbz	r1, 40b8b4 <__swsetup_r+0xa0>
  40b8a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40b8a4:	4299      	cmp	r1, r3
  40b8a6:	d003      	beq.n	40b8b0 <__swsetup_r+0x9c>
  40b8a8:	4628      	mov	r0, r5
  40b8aa:	f000 fa3b 	bl	40bd24 <_free_r>
  40b8ae:	89a2      	ldrh	r2, [r4, #12]
  40b8b0:	2300      	movs	r3, #0
  40b8b2:	6323      	str	r3, [r4, #48]	; 0x30
  40b8b4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40b8b8:	2300      	movs	r3, #0
  40b8ba:	6920      	ldr	r0, [r4, #16]
  40b8bc:	6063      	str	r3, [r4, #4]
  40b8be:	b292      	uxth	r2, r2
  40b8c0:	6020      	str	r0, [r4, #0]
  40b8c2:	e7c6      	b.n	40b852 <__swsetup_r+0x3e>
  40b8c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40b8c8:	2309      	movs	r3, #9
  40b8ca:	602b      	str	r3, [r5, #0]
  40b8cc:	f04f 30ff 	mov.w	r0, #4294967295
  40b8d0:	81a2      	strh	r2, [r4, #12]
  40b8d2:	bd38      	pop	{r3, r4, r5, pc}
  40b8d4:	20000588 	.word	0x20000588

0040b8d8 <register_fini>:
  40b8d8:	4b02      	ldr	r3, [pc, #8]	; (40b8e4 <register_fini+0xc>)
  40b8da:	b113      	cbz	r3, 40b8e2 <register_fini+0xa>
  40b8dc:	4802      	ldr	r0, [pc, #8]	; (40b8e8 <register_fini+0x10>)
  40b8de:	f000 b805 	b.w	40b8ec <atexit>
  40b8e2:	4770      	bx	lr
  40b8e4:	00000000 	.word	0x00000000
  40b8e8:	0040bb89 	.word	0x0040bb89

0040b8ec <atexit>:
  40b8ec:	4601      	mov	r1, r0
  40b8ee:	2000      	movs	r0, #0
  40b8f0:	4602      	mov	r2, r0
  40b8f2:	4603      	mov	r3, r0
  40b8f4:	f001 b8a4 	b.w	40ca40 <__register_exitproc>

0040b8f8 <__sflush_r>:
  40b8f8:	898b      	ldrh	r3, [r1, #12]
  40b8fa:	b29a      	uxth	r2, r3
  40b8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b900:	460d      	mov	r5, r1
  40b902:	0711      	lsls	r1, r2, #28
  40b904:	4680      	mov	r8, r0
  40b906:	d43c      	bmi.n	40b982 <__sflush_r+0x8a>
  40b908:	686a      	ldr	r2, [r5, #4]
  40b90a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40b90e:	2a00      	cmp	r2, #0
  40b910:	81ab      	strh	r3, [r5, #12]
  40b912:	dd65      	ble.n	40b9e0 <__sflush_r+0xe8>
  40b914:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40b916:	2e00      	cmp	r6, #0
  40b918:	d04b      	beq.n	40b9b2 <__sflush_r+0xba>
  40b91a:	b29b      	uxth	r3, r3
  40b91c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40b920:	2100      	movs	r1, #0
  40b922:	b292      	uxth	r2, r2
  40b924:	f8d8 4000 	ldr.w	r4, [r8]
  40b928:	f8c8 1000 	str.w	r1, [r8]
  40b92c:	2a00      	cmp	r2, #0
  40b92e:	d05b      	beq.n	40b9e8 <__sflush_r+0xf0>
  40b930:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40b932:	075f      	lsls	r7, r3, #29
  40b934:	d505      	bpl.n	40b942 <__sflush_r+0x4a>
  40b936:	6869      	ldr	r1, [r5, #4]
  40b938:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40b93a:	1a52      	subs	r2, r2, r1
  40b93c:	b10b      	cbz	r3, 40b942 <__sflush_r+0x4a>
  40b93e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40b940:	1ad2      	subs	r2, r2, r3
  40b942:	4640      	mov	r0, r8
  40b944:	69e9      	ldr	r1, [r5, #28]
  40b946:	2300      	movs	r3, #0
  40b948:	47b0      	blx	r6
  40b94a:	1c46      	adds	r6, r0, #1
  40b94c:	d056      	beq.n	40b9fc <__sflush_r+0x104>
  40b94e:	89ab      	ldrh	r3, [r5, #12]
  40b950:	692a      	ldr	r2, [r5, #16]
  40b952:	602a      	str	r2, [r5, #0]
  40b954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40b958:	b29b      	uxth	r3, r3
  40b95a:	2200      	movs	r2, #0
  40b95c:	606a      	str	r2, [r5, #4]
  40b95e:	04da      	lsls	r2, r3, #19
  40b960:	81ab      	strh	r3, [r5, #12]
  40b962:	d43b      	bmi.n	40b9dc <__sflush_r+0xe4>
  40b964:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40b966:	f8c8 4000 	str.w	r4, [r8]
  40b96a:	b311      	cbz	r1, 40b9b2 <__sflush_r+0xba>
  40b96c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40b970:	4299      	cmp	r1, r3
  40b972:	d002      	beq.n	40b97a <__sflush_r+0x82>
  40b974:	4640      	mov	r0, r8
  40b976:	f000 f9d5 	bl	40bd24 <_free_r>
  40b97a:	2000      	movs	r0, #0
  40b97c:	6328      	str	r0, [r5, #48]	; 0x30
  40b97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b982:	692e      	ldr	r6, [r5, #16]
  40b984:	b1ae      	cbz	r6, 40b9b2 <__sflush_r+0xba>
  40b986:	682c      	ldr	r4, [r5, #0]
  40b988:	602e      	str	r6, [r5, #0]
  40b98a:	0791      	lsls	r1, r2, #30
  40b98c:	bf0c      	ite	eq
  40b98e:	696b      	ldreq	r3, [r5, #20]
  40b990:	2300      	movne	r3, #0
  40b992:	1ba4      	subs	r4, r4, r6
  40b994:	60ab      	str	r3, [r5, #8]
  40b996:	e00a      	b.n	40b9ae <__sflush_r+0xb6>
  40b998:	4632      	mov	r2, r6
  40b99a:	4623      	mov	r3, r4
  40b99c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40b99e:	69e9      	ldr	r1, [r5, #28]
  40b9a0:	4640      	mov	r0, r8
  40b9a2:	47b8      	blx	r7
  40b9a4:	2800      	cmp	r0, #0
  40b9a6:	eba4 0400 	sub.w	r4, r4, r0
  40b9aa:	4406      	add	r6, r0
  40b9ac:	dd04      	ble.n	40b9b8 <__sflush_r+0xc0>
  40b9ae:	2c00      	cmp	r4, #0
  40b9b0:	dcf2      	bgt.n	40b998 <__sflush_r+0xa0>
  40b9b2:	2000      	movs	r0, #0
  40b9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b9b8:	89ab      	ldrh	r3, [r5, #12]
  40b9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b9be:	81ab      	strh	r3, [r5, #12]
  40b9c0:	f04f 30ff 	mov.w	r0, #4294967295
  40b9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b9c8:	89ab      	ldrh	r3, [r5, #12]
  40b9ca:	692a      	ldr	r2, [r5, #16]
  40b9cc:	6069      	str	r1, [r5, #4]
  40b9ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40b9d2:	b29b      	uxth	r3, r3
  40b9d4:	81ab      	strh	r3, [r5, #12]
  40b9d6:	04db      	lsls	r3, r3, #19
  40b9d8:	602a      	str	r2, [r5, #0]
  40b9da:	d5c3      	bpl.n	40b964 <__sflush_r+0x6c>
  40b9dc:	6528      	str	r0, [r5, #80]	; 0x50
  40b9de:	e7c1      	b.n	40b964 <__sflush_r+0x6c>
  40b9e0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40b9e2:	2a00      	cmp	r2, #0
  40b9e4:	dc96      	bgt.n	40b914 <__sflush_r+0x1c>
  40b9e6:	e7e4      	b.n	40b9b2 <__sflush_r+0xba>
  40b9e8:	2301      	movs	r3, #1
  40b9ea:	4640      	mov	r0, r8
  40b9ec:	69e9      	ldr	r1, [r5, #28]
  40b9ee:	47b0      	blx	r6
  40b9f0:	1c43      	adds	r3, r0, #1
  40b9f2:	4602      	mov	r2, r0
  40b9f4:	d019      	beq.n	40ba2a <__sflush_r+0x132>
  40b9f6:	89ab      	ldrh	r3, [r5, #12]
  40b9f8:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40b9fa:	e79a      	b.n	40b932 <__sflush_r+0x3a>
  40b9fc:	f8d8 1000 	ldr.w	r1, [r8]
  40ba00:	2900      	cmp	r1, #0
  40ba02:	d0e1      	beq.n	40b9c8 <__sflush_r+0xd0>
  40ba04:	291d      	cmp	r1, #29
  40ba06:	d007      	beq.n	40ba18 <__sflush_r+0x120>
  40ba08:	2916      	cmp	r1, #22
  40ba0a:	d005      	beq.n	40ba18 <__sflush_r+0x120>
  40ba0c:	89ab      	ldrh	r3, [r5, #12]
  40ba0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ba12:	81ab      	strh	r3, [r5, #12]
  40ba14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ba18:	89ab      	ldrh	r3, [r5, #12]
  40ba1a:	692a      	ldr	r2, [r5, #16]
  40ba1c:	602a      	str	r2, [r5, #0]
  40ba1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40ba22:	2200      	movs	r2, #0
  40ba24:	81ab      	strh	r3, [r5, #12]
  40ba26:	606a      	str	r2, [r5, #4]
  40ba28:	e79c      	b.n	40b964 <__sflush_r+0x6c>
  40ba2a:	f8d8 3000 	ldr.w	r3, [r8]
  40ba2e:	2b00      	cmp	r3, #0
  40ba30:	d0e1      	beq.n	40b9f6 <__sflush_r+0xfe>
  40ba32:	2b1d      	cmp	r3, #29
  40ba34:	d007      	beq.n	40ba46 <__sflush_r+0x14e>
  40ba36:	2b16      	cmp	r3, #22
  40ba38:	d005      	beq.n	40ba46 <__sflush_r+0x14e>
  40ba3a:	89ab      	ldrh	r3, [r5, #12]
  40ba3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ba40:	81ab      	strh	r3, [r5, #12]
  40ba42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ba46:	f8c8 4000 	str.w	r4, [r8]
  40ba4a:	e7b2      	b.n	40b9b2 <__sflush_r+0xba>

0040ba4c <_fflush_r>:
  40ba4c:	b510      	push	{r4, lr}
  40ba4e:	4604      	mov	r4, r0
  40ba50:	b082      	sub	sp, #8
  40ba52:	b108      	cbz	r0, 40ba58 <_fflush_r+0xc>
  40ba54:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ba56:	b153      	cbz	r3, 40ba6e <_fflush_r+0x22>
  40ba58:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40ba5c:	b908      	cbnz	r0, 40ba62 <_fflush_r+0x16>
  40ba5e:	b002      	add	sp, #8
  40ba60:	bd10      	pop	{r4, pc}
  40ba62:	4620      	mov	r0, r4
  40ba64:	b002      	add	sp, #8
  40ba66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40ba6a:	f7ff bf45 	b.w	40b8f8 <__sflush_r>
  40ba6e:	9101      	str	r1, [sp, #4]
  40ba70:	f000 f880 	bl	40bb74 <__sinit>
  40ba74:	9901      	ldr	r1, [sp, #4]
  40ba76:	e7ef      	b.n	40ba58 <_fflush_r+0xc>

0040ba78 <_cleanup_r>:
  40ba78:	4901      	ldr	r1, [pc, #4]	; (40ba80 <_cleanup_r+0x8>)
  40ba7a:	f000 bbb7 	b.w	40c1ec <_fwalk_reent>
  40ba7e:	bf00      	nop
  40ba80:	0040cb09 	.word	0x0040cb09

0040ba84 <__sinit.part.1>:
  40ba84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ba88:	4b35      	ldr	r3, [pc, #212]	; (40bb60 <__sinit.part.1+0xdc>)
  40ba8a:	6845      	ldr	r5, [r0, #4]
  40ba8c:	63c3      	str	r3, [r0, #60]	; 0x3c
  40ba8e:	2400      	movs	r4, #0
  40ba90:	4607      	mov	r7, r0
  40ba92:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40ba96:	2304      	movs	r3, #4
  40ba98:	2103      	movs	r1, #3
  40ba9a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40ba9e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40baa2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40baa6:	b083      	sub	sp, #12
  40baa8:	602c      	str	r4, [r5, #0]
  40baaa:	606c      	str	r4, [r5, #4]
  40baac:	60ac      	str	r4, [r5, #8]
  40baae:	666c      	str	r4, [r5, #100]	; 0x64
  40bab0:	81ec      	strh	r4, [r5, #14]
  40bab2:	612c      	str	r4, [r5, #16]
  40bab4:	616c      	str	r4, [r5, #20]
  40bab6:	61ac      	str	r4, [r5, #24]
  40bab8:	81ab      	strh	r3, [r5, #12]
  40baba:	4621      	mov	r1, r4
  40babc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40bac0:	2208      	movs	r2, #8
  40bac2:	f7fe fea7 	bl	40a814 <memset>
  40bac6:	68be      	ldr	r6, [r7, #8]
  40bac8:	f8df b098 	ldr.w	fp, [pc, #152]	; 40bb64 <__sinit.part.1+0xe0>
  40bacc:	f8df a098 	ldr.w	sl, [pc, #152]	; 40bb68 <__sinit.part.1+0xe4>
  40bad0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40bb6c <__sinit.part.1+0xe8>
  40bad4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40bb70 <__sinit.part.1+0xec>
  40bad8:	f8c5 b020 	str.w	fp, [r5, #32]
  40badc:	2301      	movs	r3, #1
  40bade:	2209      	movs	r2, #9
  40bae0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40bae4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40bae8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40baec:	61ed      	str	r5, [r5, #28]
  40baee:	4621      	mov	r1, r4
  40baf0:	81f3      	strh	r3, [r6, #14]
  40baf2:	81b2      	strh	r2, [r6, #12]
  40baf4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40baf8:	6034      	str	r4, [r6, #0]
  40bafa:	6074      	str	r4, [r6, #4]
  40bafc:	60b4      	str	r4, [r6, #8]
  40bafe:	6674      	str	r4, [r6, #100]	; 0x64
  40bb00:	6134      	str	r4, [r6, #16]
  40bb02:	6174      	str	r4, [r6, #20]
  40bb04:	61b4      	str	r4, [r6, #24]
  40bb06:	2208      	movs	r2, #8
  40bb08:	9301      	str	r3, [sp, #4]
  40bb0a:	f7fe fe83 	bl	40a814 <memset>
  40bb0e:	68fd      	ldr	r5, [r7, #12]
  40bb10:	61f6      	str	r6, [r6, #28]
  40bb12:	2012      	movs	r0, #18
  40bb14:	2202      	movs	r2, #2
  40bb16:	f8c6 b020 	str.w	fp, [r6, #32]
  40bb1a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40bb1e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40bb22:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40bb26:	4621      	mov	r1, r4
  40bb28:	81a8      	strh	r0, [r5, #12]
  40bb2a:	81ea      	strh	r2, [r5, #14]
  40bb2c:	602c      	str	r4, [r5, #0]
  40bb2e:	606c      	str	r4, [r5, #4]
  40bb30:	60ac      	str	r4, [r5, #8]
  40bb32:	666c      	str	r4, [r5, #100]	; 0x64
  40bb34:	612c      	str	r4, [r5, #16]
  40bb36:	616c      	str	r4, [r5, #20]
  40bb38:	61ac      	str	r4, [r5, #24]
  40bb3a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40bb3e:	2208      	movs	r2, #8
  40bb40:	f7fe fe68 	bl	40a814 <memset>
  40bb44:	9b01      	ldr	r3, [sp, #4]
  40bb46:	61ed      	str	r5, [r5, #28]
  40bb48:	f8c5 b020 	str.w	fp, [r5, #32]
  40bb4c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40bb50:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40bb54:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40bb58:	63bb      	str	r3, [r7, #56]	; 0x38
  40bb5a:	b003      	add	sp, #12
  40bb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bb60:	0040ba79 	.word	0x0040ba79
  40bb64:	0040c87d 	.word	0x0040c87d
  40bb68:	0040c8a1 	.word	0x0040c8a1
  40bb6c:	0040c8d9 	.word	0x0040c8d9
  40bb70:	0040c8f9 	.word	0x0040c8f9

0040bb74 <__sinit>:
  40bb74:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bb76:	b103      	cbz	r3, 40bb7a <__sinit+0x6>
  40bb78:	4770      	bx	lr
  40bb7a:	f7ff bf83 	b.w	40ba84 <__sinit.part.1>
  40bb7e:	bf00      	nop

0040bb80 <__sfp_lock_acquire>:
  40bb80:	4770      	bx	lr
  40bb82:	bf00      	nop

0040bb84 <__sfp_lock_release>:
  40bb84:	4770      	bx	lr
  40bb86:	bf00      	nop

0040bb88 <__libc_fini_array>:
  40bb88:	b538      	push	{r3, r4, r5, lr}
  40bb8a:	4b08      	ldr	r3, [pc, #32]	; (40bbac <__libc_fini_array+0x24>)
  40bb8c:	4d08      	ldr	r5, [pc, #32]	; (40bbb0 <__libc_fini_array+0x28>)
  40bb8e:	1aed      	subs	r5, r5, r3
  40bb90:	10ac      	asrs	r4, r5, #2
  40bb92:	bf18      	it	ne
  40bb94:	18ed      	addne	r5, r5, r3
  40bb96:	d005      	beq.n	40bba4 <__libc_fini_array+0x1c>
  40bb98:	3c01      	subs	r4, #1
  40bb9a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40bb9e:	4798      	blx	r3
  40bba0:	2c00      	cmp	r4, #0
  40bba2:	d1f9      	bne.n	40bb98 <__libc_fini_array+0x10>
  40bba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40bba8:	f001 bd34 	b.w	40d614 <_fini>
  40bbac:	0040d620 	.word	0x0040d620
  40bbb0:	0040d624 	.word	0x0040d624

0040bbb4 <__fputwc>:
  40bbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bbb8:	b082      	sub	sp, #8
  40bbba:	4607      	mov	r7, r0
  40bbbc:	460e      	mov	r6, r1
  40bbbe:	4614      	mov	r4, r2
  40bbc0:	f000 fb42 	bl	40c248 <__locale_mb_cur_max>
  40bbc4:	2801      	cmp	r0, #1
  40bbc6:	d041      	beq.n	40bc4c <__fputwc+0x98>
  40bbc8:	4638      	mov	r0, r7
  40bbca:	a901      	add	r1, sp, #4
  40bbcc:	4632      	mov	r2, r6
  40bbce:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40bbd2:	f000 fee9 	bl	40c9a8 <_wcrtomb_r>
  40bbd6:	f1b0 3fff 	cmp.w	r0, #4294967295
  40bbda:	4680      	mov	r8, r0
  40bbdc:	d02f      	beq.n	40bc3e <__fputwc+0x8a>
  40bbde:	2800      	cmp	r0, #0
  40bbe0:	d03c      	beq.n	40bc5c <__fputwc+0xa8>
  40bbe2:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40bbe6:	2500      	movs	r5, #0
  40bbe8:	e009      	b.n	40bbfe <__fputwc+0x4a>
  40bbea:	6823      	ldr	r3, [r4, #0]
  40bbec:	7019      	strb	r1, [r3, #0]
  40bbee:	6823      	ldr	r3, [r4, #0]
  40bbf0:	3301      	adds	r3, #1
  40bbf2:	6023      	str	r3, [r4, #0]
  40bbf4:	3501      	adds	r5, #1
  40bbf6:	45a8      	cmp	r8, r5
  40bbf8:	d930      	bls.n	40bc5c <__fputwc+0xa8>
  40bbfa:	ab01      	add	r3, sp, #4
  40bbfc:	5d59      	ldrb	r1, [r3, r5]
  40bbfe:	68a3      	ldr	r3, [r4, #8]
  40bc00:	3b01      	subs	r3, #1
  40bc02:	2b00      	cmp	r3, #0
  40bc04:	60a3      	str	r3, [r4, #8]
  40bc06:	daf0      	bge.n	40bbea <__fputwc+0x36>
  40bc08:	69a2      	ldr	r2, [r4, #24]
  40bc0a:	4293      	cmp	r3, r2
  40bc0c:	db07      	blt.n	40bc1e <__fputwc+0x6a>
  40bc0e:	6823      	ldr	r3, [r4, #0]
  40bc10:	7019      	strb	r1, [r3, #0]
  40bc12:	6823      	ldr	r3, [r4, #0]
  40bc14:	7819      	ldrb	r1, [r3, #0]
  40bc16:	290a      	cmp	r1, #10
  40bc18:	f103 0301 	add.w	r3, r3, #1
  40bc1c:	d1e9      	bne.n	40bbf2 <__fputwc+0x3e>
  40bc1e:	4638      	mov	r0, r7
  40bc20:	4622      	mov	r2, r4
  40bc22:	f000 fe6d 	bl	40c900 <__swbuf_r>
  40bc26:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  40bc2a:	fab0 f080 	clz	r0, r0
  40bc2e:	0940      	lsrs	r0, r0, #5
  40bc30:	2800      	cmp	r0, #0
  40bc32:	d0df      	beq.n	40bbf4 <__fputwc+0x40>
  40bc34:	f04f 30ff 	mov.w	r0, #4294967295
  40bc38:	b002      	add	sp, #8
  40bc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bc3e:	89a3      	ldrh	r3, [r4, #12]
  40bc40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40bc44:	81a3      	strh	r3, [r4, #12]
  40bc46:	b002      	add	sp, #8
  40bc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bc4c:	1e73      	subs	r3, r6, #1
  40bc4e:	2bfe      	cmp	r3, #254	; 0xfe
  40bc50:	d8ba      	bhi.n	40bbc8 <__fputwc+0x14>
  40bc52:	b2f1      	uxtb	r1, r6
  40bc54:	4680      	mov	r8, r0
  40bc56:	f88d 1004 	strb.w	r1, [sp, #4]
  40bc5a:	e7c4      	b.n	40bbe6 <__fputwc+0x32>
  40bc5c:	4630      	mov	r0, r6
  40bc5e:	b002      	add	sp, #8
  40bc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040bc64 <_fputwc_r>:
  40bc64:	8993      	ldrh	r3, [r2, #12]
  40bc66:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40bc6a:	d10b      	bne.n	40bc84 <_fputwc_r+0x20>
  40bc6c:	b410      	push	{r4}
  40bc6e:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40bc70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40bc74:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40bc78:	6654      	str	r4, [r2, #100]	; 0x64
  40bc7a:	8193      	strh	r3, [r2, #12]
  40bc7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  40bc80:	f7ff bf98 	b.w	40bbb4 <__fputwc>
  40bc84:	f7ff bf96 	b.w	40bbb4 <__fputwc>

0040bc88 <_malloc_trim_r>:
  40bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bc8a:	4f23      	ldr	r7, [pc, #140]	; (40bd18 <_malloc_trim_r+0x90>)
  40bc8c:	460c      	mov	r4, r1
  40bc8e:	4606      	mov	r6, r0
  40bc90:	f7fe fe0e 	bl	40a8b0 <__malloc_lock>
  40bc94:	68bb      	ldr	r3, [r7, #8]
  40bc96:	685d      	ldr	r5, [r3, #4]
  40bc98:	f025 0503 	bic.w	r5, r5, #3
  40bc9c:	1b29      	subs	r1, r5, r4
  40bc9e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40bca2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40bca6:	f021 010f 	bic.w	r1, r1, #15
  40bcaa:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40bcae:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40bcb2:	db07      	blt.n	40bcc4 <_malloc_trim_r+0x3c>
  40bcb4:	4630      	mov	r0, r6
  40bcb6:	2100      	movs	r1, #0
  40bcb8:	f7fe fe34 	bl	40a924 <_sbrk_r>
  40bcbc:	68bb      	ldr	r3, [r7, #8]
  40bcbe:	442b      	add	r3, r5
  40bcc0:	4298      	cmp	r0, r3
  40bcc2:	d004      	beq.n	40bcce <_malloc_trim_r+0x46>
  40bcc4:	4630      	mov	r0, r6
  40bcc6:	f7fe fdf5 	bl	40a8b4 <__malloc_unlock>
  40bcca:	2000      	movs	r0, #0
  40bccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bcce:	4630      	mov	r0, r6
  40bcd0:	4261      	negs	r1, r4
  40bcd2:	f7fe fe27 	bl	40a924 <_sbrk_r>
  40bcd6:	3001      	adds	r0, #1
  40bcd8:	d00d      	beq.n	40bcf6 <_malloc_trim_r+0x6e>
  40bcda:	4b10      	ldr	r3, [pc, #64]	; (40bd1c <_malloc_trim_r+0x94>)
  40bcdc:	68ba      	ldr	r2, [r7, #8]
  40bcde:	6819      	ldr	r1, [r3, #0]
  40bce0:	1b2d      	subs	r5, r5, r4
  40bce2:	f045 0501 	orr.w	r5, r5, #1
  40bce6:	4630      	mov	r0, r6
  40bce8:	1b09      	subs	r1, r1, r4
  40bcea:	6055      	str	r5, [r2, #4]
  40bcec:	6019      	str	r1, [r3, #0]
  40bcee:	f7fe fde1 	bl	40a8b4 <__malloc_unlock>
  40bcf2:	2001      	movs	r0, #1
  40bcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bcf6:	4630      	mov	r0, r6
  40bcf8:	2100      	movs	r1, #0
  40bcfa:	f7fe fe13 	bl	40a924 <_sbrk_r>
  40bcfe:	68ba      	ldr	r2, [r7, #8]
  40bd00:	1a83      	subs	r3, r0, r2
  40bd02:	2b0f      	cmp	r3, #15
  40bd04:	ddde      	ble.n	40bcc4 <_malloc_trim_r+0x3c>
  40bd06:	4c06      	ldr	r4, [pc, #24]	; (40bd20 <_malloc_trim_r+0x98>)
  40bd08:	4904      	ldr	r1, [pc, #16]	; (40bd1c <_malloc_trim_r+0x94>)
  40bd0a:	6824      	ldr	r4, [r4, #0]
  40bd0c:	f043 0301 	orr.w	r3, r3, #1
  40bd10:	1b00      	subs	r0, r0, r4
  40bd12:	6053      	str	r3, [r2, #4]
  40bd14:	6008      	str	r0, [r1, #0]
  40bd16:	e7d5      	b.n	40bcc4 <_malloc_trim_r+0x3c>
  40bd18:	2000058c 	.word	0x2000058c
  40bd1c:	20019dd4 	.word	0x20019dd4
  40bd20:	20000998 	.word	0x20000998

0040bd24 <_free_r>:
  40bd24:	2900      	cmp	r1, #0
  40bd26:	d04e      	beq.n	40bdc6 <_free_r+0xa2>
  40bd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bd2c:	460c      	mov	r4, r1
  40bd2e:	4680      	mov	r8, r0
  40bd30:	f7fe fdbe 	bl	40a8b0 <__malloc_lock>
  40bd34:	f854 7c04 	ldr.w	r7, [r4, #-4]
  40bd38:	4962      	ldr	r1, [pc, #392]	; (40bec4 <_free_r+0x1a0>)
  40bd3a:	f027 0201 	bic.w	r2, r7, #1
  40bd3e:	f1a4 0508 	sub.w	r5, r4, #8
  40bd42:	18ab      	adds	r3, r5, r2
  40bd44:	688e      	ldr	r6, [r1, #8]
  40bd46:	6858      	ldr	r0, [r3, #4]
  40bd48:	429e      	cmp	r6, r3
  40bd4a:	f020 0003 	bic.w	r0, r0, #3
  40bd4e:	d05a      	beq.n	40be06 <_free_r+0xe2>
  40bd50:	07fe      	lsls	r6, r7, #31
  40bd52:	6058      	str	r0, [r3, #4]
  40bd54:	d40b      	bmi.n	40bd6e <_free_r+0x4a>
  40bd56:	f854 7c08 	ldr.w	r7, [r4, #-8]
  40bd5a:	1bed      	subs	r5, r5, r7
  40bd5c:	f101 0e08 	add.w	lr, r1, #8
  40bd60:	68ac      	ldr	r4, [r5, #8]
  40bd62:	4574      	cmp	r4, lr
  40bd64:	443a      	add	r2, r7
  40bd66:	d067      	beq.n	40be38 <_free_r+0x114>
  40bd68:	68ef      	ldr	r7, [r5, #12]
  40bd6a:	60e7      	str	r7, [r4, #12]
  40bd6c:	60bc      	str	r4, [r7, #8]
  40bd6e:	181c      	adds	r4, r3, r0
  40bd70:	6864      	ldr	r4, [r4, #4]
  40bd72:	07e4      	lsls	r4, r4, #31
  40bd74:	d40c      	bmi.n	40bd90 <_free_r+0x6c>
  40bd76:	4f54      	ldr	r7, [pc, #336]	; (40bec8 <_free_r+0x1a4>)
  40bd78:	689c      	ldr	r4, [r3, #8]
  40bd7a:	42bc      	cmp	r4, r7
  40bd7c:	4402      	add	r2, r0
  40bd7e:	d07c      	beq.n	40be7a <_free_r+0x156>
  40bd80:	68d8      	ldr	r0, [r3, #12]
  40bd82:	60e0      	str	r0, [r4, #12]
  40bd84:	f042 0301 	orr.w	r3, r2, #1
  40bd88:	6084      	str	r4, [r0, #8]
  40bd8a:	606b      	str	r3, [r5, #4]
  40bd8c:	50aa      	str	r2, [r5, r2]
  40bd8e:	e003      	b.n	40bd98 <_free_r+0x74>
  40bd90:	f042 0301 	orr.w	r3, r2, #1
  40bd94:	606b      	str	r3, [r5, #4]
  40bd96:	50aa      	str	r2, [r5, r2]
  40bd98:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40bd9c:	d214      	bcs.n	40bdc8 <_free_r+0xa4>
  40bd9e:	08d2      	lsrs	r2, r2, #3
  40bda0:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  40bda4:	6848      	ldr	r0, [r1, #4]
  40bda6:	689f      	ldr	r7, [r3, #8]
  40bda8:	60af      	str	r7, [r5, #8]
  40bdaa:	1092      	asrs	r2, r2, #2
  40bdac:	2401      	movs	r4, #1
  40bdae:	fa04 f202 	lsl.w	r2, r4, r2
  40bdb2:	4310      	orrs	r0, r2
  40bdb4:	60eb      	str	r3, [r5, #12]
  40bdb6:	6048      	str	r0, [r1, #4]
  40bdb8:	609d      	str	r5, [r3, #8]
  40bdba:	60fd      	str	r5, [r7, #12]
  40bdbc:	4640      	mov	r0, r8
  40bdbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40bdc2:	f7fe bd77 	b.w	40a8b4 <__malloc_unlock>
  40bdc6:	4770      	bx	lr
  40bdc8:	0a53      	lsrs	r3, r2, #9
  40bdca:	2b04      	cmp	r3, #4
  40bdcc:	d847      	bhi.n	40be5e <_free_r+0x13a>
  40bdce:	0993      	lsrs	r3, r2, #6
  40bdd0:	f103 0438 	add.w	r4, r3, #56	; 0x38
  40bdd4:	0060      	lsls	r0, r4, #1
  40bdd6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  40bdda:	493a      	ldr	r1, [pc, #232]	; (40bec4 <_free_r+0x1a0>)
  40bddc:	6883      	ldr	r3, [r0, #8]
  40bdde:	4283      	cmp	r3, r0
  40bde0:	d043      	beq.n	40be6a <_free_r+0x146>
  40bde2:	6859      	ldr	r1, [r3, #4]
  40bde4:	f021 0103 	bic.w	r1, r1, #3
  40bde8:	4291      	cmp	r1, r2
  40bdea:	d902      	bls.n	40bdf2 <_free_r+0xce>
  40bdec:	689b      	ldr	r3, [r3, #8]
  40bdee:	4298      	cmp	r0, r3
  40bdf0:	d1f7      	bne.n	40bde2 <_free_r+0xbe>
  40bdf2:	68da      	ldr	r2, [r3, #12]
  40bdf4:	60ea      	str	r2, [r5, #12]
  40bdf6:	60ab      	str	r3, [r5, #8]
  40bdf8:	4640      	mov	r0, r8
  40bdfa:	6095      	str	r5, [r2, #8]
  40bdfc:	60dd      	str	r5, [r3, #12]
  40bdfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40be02:	f7fe bd57 	b.w	40a8b4 <__malloc_unlock>
  40be06:	07ff      	lsls	r7, r7, #31
  40be08:	4402      	add	r2, r0
  40be0a:	d407      	bmi.n	40be1c <_free_r+0xf8>
  40be0c:	f854 3c08 	ldr.w	r3, [r4, #-8]
  40be10:	1aed      	subs	r5, r5, r3
  40be12:	441a      	add	r2, r3
  40be14:	68a8      	ldr	r0, [r5, #8]
  40be16:	68eb      	ldr	r3, [r5, #12]
  40be18:	60c3      	str	r3, [r0, #12]
  40be1a:	6098      	str	r0, [r3, #8]
  40be1c:	4b2b      	ldr	r3, [pc, #172]	; (40becc <_free_r+0x1a8>)
  40be1e:	681b      	ldr	r3, [r3, #0]
  40be20:	f042 0001 	orr.w	r0, r2, #1
  40be24:	429a      	cmp	r2, r3
  40be26:	6068      	str	r0, [r5, #4]
  40be28:	608d      	str	r5, [r1, #8]
  40be2a:	d3c7      	bcc.n	40bdbc <_free_r+0x98>
  40be2c:	4b28      	ldr	r3, [pc, #160]	; (40bed0 <_free_r+0x1ac>)
  40be2e:	4640      	mov	r0, r8
  40be30:	6819      	ldr	r1, [r3, #0]
  40be32:	f7ff ff29 	bl	40bc88 <_malloc_trim_r>
  40be36:	e7c1      	b.n	40bdbc <_free_r+0x98>
  40be38:	1819      	adds	r1, r3, r0
  40be3a:	6849      	ldr	r1, [r1, #4]
  40be3c:	07c9      	lsls	r1, r1, #31
  40be3e:	d409      	bmi.n	40be54 <_free_r+0x130>
  40be40:	68d9      	ldr	r1, [r3, #12]
  40be42:	689b      	ldr	r3, [r3, #8]
  40be44:	4402      	add	r2, r0
  40be46:	f042 0001 	orr.w	r0, r2, #1
  40be4a:	60d9      	str	r1, [r3, #12]
  40be4c:	608b      	str	r3, [r1, #8]
  40be4e:	6068      	str	r0, [r5, #4]
  40be50:	50aa      	str	r2, [r5, r2]
  40be52:	e7b3      	b.n	40bdbc <_free_r+0x98>
  40be54:	f042 0301 	orr.w	r3, r2, #1
  40be58:	606b      	str	r3, [r5, #4]
  40be5a:	50aa      	str	r2, [r5, r2]
  40be5c:	e7ae      	b.n	40bdbc <_free_r+0x98>
  40be5e:	2b14      	cmp	r3, #20
  40be60:	d814      	bhi.n	40be8c <_free_r+0x168>
  40be62:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  40be66:	0060      	lsls	r0, r4, #1
  40be68:	e7b5      	b.n	40bdd6 <_free_r+0xb2>
  40be6a:	684a      	ldr	r2, [r1, #4]
  40be6c:	10a4      	asrs	r4, r4, #2
  40be6e:	2001      	movs	r0, #1
  40be70:	40a0      	lsls	r0, r4
  40be72:	4302      	orrs	r2, r0
  40be74:	604a      	str	r2, [r1, #4]
  40be76:	461a      	mov	r2, r3
  40be78:	e7bc      	b.n	40bdf4 <_free_r+0xd0>
  40be7a:	f042 0301 	orr.w	r3, r2, #1
  40be7e:	614d      	str	r5, [r1, #20]
  40be80:	610d      	str	r5, [r1, #16]
  40be82:	60ec      	str	r4, [r5, #12]
  40be84:	60ac      	str	r4, [r5, #8]
  40be86:	606b      	str	r3, [r5, #4]
  40be88:	50aa      	str	r2, [r5, r2]
  40be8a:	e797      	b.n	40bdbc <_free_r+0x98>
  40be8c:	2b54      	cmp	r3, #84	; 0x54
  40be8e:	d804      	bhi.n	40be9a <_free_r+0x176>
  40be90:	0b13      	lsrs	r3, r2, #12
  40be92:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  40be96:	0060      	lsls	r0, r4, #1
  40be98:	e79d      	b.n	40bdd6 <_free_r+0xb2>
  40be9a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40be9e:	d804      	bhi.n	40beaa <_free_r+0x186>
  40bea0:	0bd3      	lsrs	r3, r2, #15
  40bea2:	f103 0477 	add.w	r4, r3, #119	; 0x77
  40bea6:	0060      	lsls	r0, r4, #1
  40bea8:	e795      	b.n	40bdd6 <_free_r+0xb2>
  40beaa:	f240 5054 	movw	r0, #1364	; 0x554
  40beae:	4283      	cmp	r3, r0
  40beb0:	d804      	bhi.n	40bebc <_free_r+0x198>
  40beb2:	0c93      	lsrs	r3, r2, #18
  40beb4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  40beb8:	0060      	lsls	r0, r4, #1
  40beba:	e78c      	b.n	40bdd6 <_free_r+0xb2>
  40bebc:	20fc      	movs	r0, #252	; 0xfc
  40bebe:	247e      	movs	r4, #126	; 0x7e
  40bec0:	e789      	b.n	40bdd6 <_free_r+0xb2>
  40bec2:	bf00      	nop
  40bec4:	2000058c 	.word	0x2000058c
  40bec8:	20000594 	.word	0x20000594
  40becc:	20000994 	.word	0x20000994
  40bed0:	20019dd0 	.word	0x20019dd0

0040bed4 <__sfvwrite_r>:
  40bed4:	6893      	ldr	r3, [r2, #8]
  40bed6:	2b00      	cmp	r3, #0
  40bed8:	d07a      	beq.n	40bfd0 <__sfvwrite_r+0xfc>
  40beda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bede:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40bee2:	f01e 0f08 	tst.w	lr, #8
  40bee6:	b083      	sub	sp, #12
  40bee8:	460c      	mov	r4, r1
  40beea:	4681      	mov	r9, r0
  40beec:	4616      	mov	r6, r2
  40beee:	d026      	beq.n	40bf3e <__sfvwrite_r+0x6a>
  40bef0:	690b      	ldr	r3, [r1, #16]
  40bef2:	b323      	cbz	r3, 40bf3e <__sfvwrite_r+0x6a>
  40bef4:	f00e 0802 	and.w	r8, lr, #2
  40bef8:	fa1f f088 	uxth.w	r0, r8
  40befc:	6835      	ldr	r5, [r6, #0]
  40befe:	b370      	cbz	r0, 40bf5e <__sfvwrite_r+0x8a>
  40bf00:	f04f 0a00 	mov.w	sl, #0
  40bf04:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 40c1e8 <__sfvwrite_r+0x314>
  40bf08:	46d0      	mov	r8, sl
  40bf0a:	45d8      	cmp	r8, fp
  40bf0c:	4643      	mov	r3, r8
  40bf0e:	4652      	mov	r2, sl
  40bf10:	bf28      	it	cs
  40bf12:	465b      	movcs	r3, fp
  40bf14:	4648      	mov	r0, r9
  40bf16:	f1b8 0f00 	cmp.w	r8, #0
  40bf1a:	d053      	beq.n	40bfc4 <__sfvwrite_r+0xf0>
  40bf1c:	69e1      	ldr	r1, [r4, #28]
  40bf1e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40bf20:	47b8      	blx	r7
  40bf22:	2800      	cmp	r0, #0
  40bf24:	dd73      	ble.n	40c00e <__sfvwrite_r+0x13a>
  40bf26:	68b3      	ldr	r3, [r6, #8]
  40bf28:	1a1b      	subs	r3, r3, r0
  40bf2a:	4482      	add	sl, r0
  40bf2c:	ebc0 0808 	rsb	r8, r0, r8
  40bf30:	60b3      	str	r3, [r6, #8]
  40bf32:	2b00      	cmp	r3, #0
  40bf34:	d1e9      	bne.n	40bf0a <__sfvwrite_r+0x36>
  40bf36:	2000      	movs	r0, #0
  40bf38:	b003      	add	sp, #12
  40bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bf3e:	4648      	mov	r0, r9
  40bf40:	4621      	mov	r1, r4
  40bf42:	f7ff fc67 	bl	40b814 <__swsetup_r>
  40bf46:	2800      	cmp	r0, #0
  40bf48:	f040 8145 	bne.w	40c1d6 <__sfvwrite_r+0x302>
  40bf4c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40bf50:	6835      	ldr	r5, [r6, #0]
  40bf52:	f00e 0802 	and.w	r8, lr, #2
  40bf56:	fa1f f088 	uxth.w	r0, r8
  40bf5a:	2800      	cmp	r0, #0
  40bf5c:	d1d0      	bne.n	40bf00 <__sfvwrite_r+0x2c>
  40bf5e:	f01e 0b01 	ands.w	fp, lr, #1
  40bf62:	d15d      	bne.n	40c020 <__sfvwrite_r+0x14c>
  40bf64:	46d8      	mov	r8, fp
  40bf66:	f1b8 0f00 	cmp.w	r8, #0
  40bf6a:	d025      	beq.n	40bfb8 <__sfvwrite_r+0xe4>
  40bf6c:	f41e 7f00 	tst.w	lr, #512	; 0x200
  40bf70:	68a7      	ldr	r7, [r4, #8]
  40bf72:	d02f      	beq.n	40bfd4 <__sfvwrite_r+0x100>
  40bf74:	45b8      	cmp	r8, r7
  40bf76:	46ba      	mov	sl, r7
  40bf78:	f0c0 80a9 	bcc.w	40c0ce <__sfvwrite_r+0x1fa>
  40bf7c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40bf80:	f040 80b6 	bne.w	40c0f0 <__sfvwrite_r+0x21c>
  40bf84:	6820      	ldr	r0, [r4, #0]
  40bf86:	4652      	mov	r2, sl
  40bf88:	4659      	mov	r1, fp
  40bf8a:	f000 fa1d 	bl	40c3c8 <memmove>
  40bf8e:	68a0      	ldr	r0, [r4, #8]
  40bf90:	6822      	ldr	r2, [r4, #0]
  40bf92:	1bc0      	subs	r0, r0, r7
  40bf94:	eb02 030a 	add.w	r3, r2, sl
  40bf98:	60a0      	str	r0, [r4, #8]
  40bf9a:	6023      	str	r3, [r4, #0]
  40bf9c:	4640      	mov	r0, r8
  40bf9e:	68b3      	ldr	r3, [r6, #8]
  40bfa0:	1a1b      	subs	r3, r3, r0
  40bfa2:	4483      	add	fp, r0
  40bfa4:	ebc0 0808 	rsb	r8, r0, r8
  40bfa8:	60b3      	str	r3, [r6, #8]
  40bfaa:	2b00      	cmp	r3, #0
  40bfac:	d0c3      	beq.n	40bf36 <__sfvwrite_r+0x62>
  40bfae:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40bfb2:	f1b8 0f00 	cmp.w	r8, #0
  40bfb6:	d1d9      	bne.n	40bf6c <__sfvwrite_r+0x98>
  40bfb8:	f8d5 b000 	ldr.w	fp, [r5]
  40bfbc:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40bfc0:	3508      	adds	r5, #8
  40bfc2:	e7d0      	b.n	40bf66 <__sfvwrite_r+0x92>
  40bfc4:	f8d5 a000 	ldr.w	sl, [r5]
  40bfc8:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40bfcc:	3508      	adds	r5, #8
  40bfce:	e79c      	b.n	40bf0a <__sfvwrite_r+0x36>
  40bfd0:	2000      	movs	r0, #0
  40bfd2:	4770      	bx	lr
  40bfd4:	6820      	ldr	r0, [r4, #0]
  40bfd6:	6923      	ldr	r3, [r4, #16]
  40bfd8:	4298      	cmp	r0, r3
  40bfda:	d803      	bhi.n	40bfe4 <__sfvwrite_r+0x110>
  40bfdc:	6962      	ldr	r2, [r4, #20]
  40bfde:	4590      	cmp	r8, r2
  40bfe0:	f080 80b9 	bcs.w	40c156 <__sfvwrite_r+0x282>
  40bfe4:	4547      	cmp	r7, r8
  40bfe6:	bf28      	it	cs
  40bfe8:	4647      	movcs	r7, r8
  40bfea:	463a      	mov	r2, r7
  40bfec:	4659      	mov	r1, fp
  40bfee:	f000 f9eb 	bl	40c3c8 <memmove>
  40bff2:	68a3      	ldr	r3, [r4, #8]
  40bff4:	6822      	ldr	r2, [r4, #0]
  40bff6:	1bdb      	subs	r3, r3, r7
  40bff8:	443a      	add	r2, r7
  40bffa:	60a3      	str	r3, [r4, #8]
  40bffc:	6022      	str	r2, [r4, #0]
  40bffe:	2b00      	cmp	r3, #0
  40c000:	d14a      	bne.n	40c098 <__sfvwrite_r+0x1c4>
  40c002:	4648      	mov	r0, r9
  40c004:	4621      	mov	r1, r4
  40c006:	f7ff fd21 	bl	40ba4c <_fflush_r>
  40c00a:	2800      	cmp	r0, #0
  40c00c:	d044      	beq.n	40c098 <__sfvwrite_r+0x1c4>
  40c00e:	89a3      	ldrh	r3, [r4, #12]
  40c010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c014:	f04f 30ff 	mov.w	r0, #4294967295
  40c018:	81a3      	strh	r3, [r4, #12]
  40c01a:	b003      	add	sp, #12
  40c01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c020:	4680      	mov	r8, r0
  40c022:	9000      	str	r0, [sp, #0]
  40c024:	4683      	mov	fp, r0
  40c026:	4682      	mov	sl, r0
  40c028:	f1ba 0f00 	cmp.w	sl, #0
  40c02c:	d02c      	beq.n	40c088 <__sfvwrite_r+0x1b4>
  40c02e:	9b00      	ldr	r3, [sp, #0]
  40c030:	2b00      	cmp	r3, #0
  40c032:	d050      	beq.n	40c0d6 <__sfvwrite_r+0x202>
  40c034:	6820      	ldr	r0, [r4, #0]
  40c036:	6921      	ldr	r1, [r4, #16]
  40c038:	f8d4 e008 	ldr.w	lr, [r4, #8]
  40c03c:	6962      	ldr	r2, [r4, #20]
  40c03e:	45d0      	cmp	r8, sl
  40c040:	4643      	mov	r3, r8
  40c042:	bf28      	it	cs
  40c044:	4653      	movcs	r3, sl
  40c046:	4288      	cmp	r0, r1
  40c048:	461f      	mov	r7, r3
  40c04a:	d904      	bls.n	40c056 <__sfvwrite_r+0x182>
  40c04c:	eb0e 0c02 	add.w	ip, lr, r2
  40c050:	4563      	cmp	r3, ip
  40c052:	f300 8092 	bgt.w	40c17a <__sfvwrite_r+0x2a6>
  40c056:	4293      	cmp	r3, r2
  40c058:	db20      	blt.n	40c09c <__sfvwrite_r+0x1c8>
  40c05a:	4613      	mov	r3, r2
  40c05c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40c05e:	69e1      	ldr	r1, [r4, #28]
  40c060:	4648      	mov	r0, r9
  40c062:	465a      	mov	r2, fp
  40c064:	47b8      	blx	r7
  40c066:	1e07      	subs	r7, r0, #0
  40c068:	ddd1      	ble.n	40c00e <__sfvwrite_r+0x13a>
  40c06a:	ebb8 0807 	subs.w	r8, r8, r7
  40c06e:	d025      	beq.n	40c0bc <__sfvwrite_r+0x1e8>
  40c070:	68b3      	ldr	r3, [r6, #8]
  40c072:	1bdb      	subs	r3, r3, r7
  40c074:	44bb      	add	fp, r7
  40c076:	ebc7 0a0a 	rsb	sl, r7, sl
  40c07a:	60b3      	str	r3, [r6, #8]
  40c07c:	2b00      	cmp	r3, #0
  40c07e:	f43f af5a 	beq.w	40bf36 <__sfvwrite_r+0x62>
  40c082:	f1ba 0f00 	cmp.w	sl, #0
  40c086:	d1d2      	bne.n	40c02e <__sfvwrite_r+0x15a>
  40c088:	2300      	movs	r3, #0
  40c08a:	f8d5 b000 	ldr.w	fp, [r5]
  40c08e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  40c092:	9300      	str	r3, [sp, #0]
  40c094:	3508      	adds	r5, #8
  40c096:	e7c7      	b.n	40c028 <__sfvwrite_r+0x154>
  40c098:	4638      	mov	r0, r7
  40c09a:	e780      	b.n	40bf9e <__sfvwrite_r+0xca>
  40c09c:	461a      	mov	r2, r3
  40c09e:	4659      	mov	r1, fp
  40c0a0:	9301      	str	r3, [sp, #4]
  40c0a2:	f000 f991 	bl	40c3c8 <memmove>
  40c0a6:	68a2      	ldr	r2, [r4, #8]
  40c0a8:	6821      	ldr	r1, [r4, #0]
  40c0aa:	9b01      	ldr	r3, [sp, #4]
  40c0ac:	ebb8 0807 	subs.w	r8, r8, r7
  40c0b0:	eba2 0203 	sub.w	r2, r2, r3
  40c0b4:	440b      	add	r3, r1
  40c0b6:	60a2      	str	r2, [r4, #8]
  40c0b8:	6023      	str	r3, [r4, #0]
  40c0ba:	d1d9      	bne.n	40c070 <__sfvwrite_r+0x19c>
  40c0bc:	4648      	mov	r0, r9
  40c0be:	4621      	mov	r1, r4
  40c0c0:	f7ff fcc4 	bl	40ba4c <_fflush_r>
  40c0c4:	2800      	cmp	r0, #0
  40c0c6:	d1a2      	bne.n	40c00e <__sfvwrite_r+0x13a>
  40c0c8:	f8cd 8000 	str.w	r8, [sp]
  40c0cc:	e7d0      	b.n	40c070 <__sfvwrite_r+0x19c>
  40c0ce:	6820      	ldr	r0, [r4, #0]
  40c0d0:	4647      	mov	r7, r8
  40c0d2:	46c2      	mov	sl, r8
  40c0d4:	e757      	b.n	40bf86 <__sfvwrite_r+0xb2>
  40c0d6:	4658      	mov	r0, fp
  40c0d8:	210a      	movs	r1, #10
  40c0da:	4652      	mov	r2, sl
  40c0dc:	f000 f92a 	bl	40c334 <memchr>
  40c0e0:	2800      	cmp	r0, #0
  40c0e2:	d073      	beq.n	40c1cc <__sfvwrite_r+0x2f8>
  40c0e4:	3001      	adds	r0, #1
  40c0e6:	2301      	movs	r3, #1
  40c0e8:	ebcb 0800 	rsb	r8, fp, r0
  40c0ec:	9300      	str	r3, [sp, #0]
  40c0ee:	e7a1      	b.n	40c034 <__sfvwrite_r+0x160>
  40c0f0:	6967      	ldr	r7, [r4, #20]
  40c0f2:	6921      	ldr	r1, [r4, #16]
  40c0f4:	6823      	ldr	r3, [r4, #0]
  40c0f6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40c0fa:	1a5b      	subs	r3, r3, r1
  40c0fc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40c100:	1c58      	adds	r0, r3, #1
  40c102:	107f      	asrs	r7, r7, #1
  40c104:	4440      	add	r0, r8
  40c106:	4287      	cmp	r7, r0
  40c108:	463a      	mov	r2, r7
  40c10a:	bf3c      	itt	cc
  40c10c:	4607      	movcc	r7, r0
  40c10e:	463a      	movcc	r2, r7
  40c110:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40c114:	9300      	str	r3, [sp, #0]
  40c116:	d046      	beq.n	40c1a6 <__sfvwrite_r+0x2d2>
  40c118:	4611      	mov	r1, r2
  40c11a:	4648      	mov	r0, r9
  40c11c:	f7fe f81c 	bl	40a158 <_malloc_r>
  40c120:	9b00      	ldr	r3, [sp, #0]
  40c122:	4682      	mov	sl, r0
  40c124:	2800      	cmp	r0, #0
  40c126:	d059      	beq.n	40c1dc <__sfvwrite_r+0x308>
  40c128:	461a      	mov	r2, r3
  40c12a:	6921      	ldr	r1, [r4, #16]
  40c12c:	9300      	str	r3, [sp, #0]
  40c12e:	f7fe fad7 	bl	40a6e0 <memcpy>
  40c132:	89a2      	ldrh	r2, [r4, #12]
  40c134:	9b00      	ldr	r3, [sp, #0]
  40c136:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40c13a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40c13e:	81a2      	strh	r2, [r4, #12]
  40c140:	eb0a 0003 	add.w	r0, sl, r3
  40c144:	1afb      	subs	r3, r7, r3
  40c146:	f8c4 a010 	str.w	sl, [r4, #16]
  40c14a:	6167      	str	r7, [r4, #20]
  40c14c:	6020      	str	r0, [r4, #0]
  40c14e:	60a3      	str	r3, [r4, #8]
  40c150:	4647      	mov	r7, r8
  40c152:	46c2      	mov	sl, r8
  40c154:	e717      	b.n	40bf86 <__sfvwrite_r+0xb2>
  40c156:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40c15a:	4543      	cmp	r3, r8
  40c15c:	bf28      	it	cs
  40c15e:	4643      	movcs	r3, r8
  40c160:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40c162:	fb93 f3f2 	sdiv	r3, r3, r2
  40c166:	4648      	mov	r0, r9
  40c168:	fb03 f302 	mul.w	r3, r3, r2
  40c16c:	69e1      	ldr	r1, [r4, #28]
  40c16e:	465a      	mov	r2, fp
  40c170:	47b8      	blx	r7
  40c172:	2800      	cmp	r0, #0
  40c174:	f73f af13 	bgt.w	40bf9e <__sfvwrite_r+0xca>
  40c178:	e749      	b.n	40c00e <__sfvwrite_r+0x13a>
  40c17a:	4662      	mov	r2, ip
  40c17c:	4659      	mov	r1, fp
  40c17e:	f8cd c004 	str.w	ip, [sp, #4]
  40c182:	f000 f921 	bl	40c3c8 <memmove>
  40c186:	6823      	ldr	r3, [r4, #0]
  40c188:	f8dd c004 	ldr.w	ip, [sp, #4]
  40c18c:	4463      	add	r3, ip
  40c18e:	6023      	str	r3, [r4, #0]
  40c190:	4648      	mov	r0, r9
  40c192:	4621      	mov	r1, r4
  40c194:	f7ff fc5a 	bl	40ba4c <_fflush_r>
  40c198:	f8dd c004 	ldr.w	ip, [sp, #4]
  40c19c:	2800      	cmp	r0, #0
  40c19e:	f47f af36 	bne.w	40c00e <__sfvwrite_r+0x13a>
  40c1a2:	4667      	mov	r7, ip
  40c1a4:	e761      	b.n	40c06a <__sfvwrite_r+0x196>
  40c1a6:	4648      	mov	r0, r9
  40c1a8:	f000 f972 	bl	40c490 <_realloc_r>
  40c1ac:	9b00      	ldr	r3, [sp, #0]
  40c1ae:	4682      	mov	sl, r0
  40c1b0:	2800      	cmp	r0, #0
  40c1b2:	d1c5      	bne.n	40c140 <__sfvwrite_r+0x26c>
  40c1b4:	4648      	mov	r0, r9
  40c1b6:	6921      	ldr	r1, [r4, #16]
  40c1b8:	f7ff fdb4 	bl	40bd24 <_free_r>
  40c1bc:	89a3      	ldrh	r3, [r4, #12]
  40c1be:	220c      	movs	r2, #12
  40c1c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40c1c4:	b29b      	uxth	r3, r3
  40c1c6:	f8c9 2000 	str.w	r2, [r9]
  40c1ca:	e721      	b.n	40c010 <__sfvwrite_r+0x13c>
  40c1cc:	2301      	movs	r3, #1
  40c1ce:	f10a 0801 	add.w	r8, sl, #1
  40c1d2:	9300      	str	r3, [sp, #0]
  40c1d4:	e72e      	b.n	40c034 <__sfvwrite_r+0x160>
  40c1d6:	f04f 30ff 	mov.w	r0, #4294967295
  40c1da:	e6ad      	b.n	40bf38 <__sfvwrite_r+0x64>
  40c1dc:	230c      	movs	r3, #12
  40c1de:	f8c9 3000 	str.w	r3, [r9]
  40c1e2:	89a3      	ldrh	r3, [r4, #12]
  40c1e4:	e714      	b.n	40c010 <__sfvwrite_r+0x13c>
  40c1e6:	bf00      	nop
  40c1e8:	7ffffc00 	.word	0x7ffffc00

0040c1ec <_fwalk_reent>:
  40c1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c1f0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40c1f4:	d01f      	beq.n	40c236 <_fwalk_reent+0x4a>
  40c1f6:	4688      	mov	r8, r1
  40c1f8:	4606      	mov	r6, r0
  40c1fa:	f04f 0900 	mov.w	r9, #0
  40c1fe:	687d      	ldr	r5, [r7, #4]
  40c200:	68bc      	ldr	r4, [r7, #8]
  40c202:	3d01      	subs	r5, #1
  40c204:	d411      	bmi.n	40c22a <_fwalk_reent+0x3e>
  40c206:	89a3      	ldrh	r3, [r4, #12]
  40c208:	2b01      	cmp	r3, #1
  40c20a:	f105 35ff 	add.w	r5, r5, #4294967295
  40c20e:	d908      	bls.n	40c222 <_fwalk_reent+0x36>
  40c210:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40c214:	3301      	adds	r3, #1
  40c216:	4621      	mov	r1, r4
  40c218:	4630      	mov	r0, r6
  40c21a:	d002      	beq.n	40c222 <_fwalk_reent+0x36>
  40c21c:	47c0      	blx	r8
  40c21e:	ea49 0900 	orr.w	r9, r9, r0
  40c222:	1c6b      	adds	r3, r5, #1
  40c224:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40c228:	d1ed      	bne.n	40c206 <_fwalk_reent+0x1a>
  40c22a:	683f      	ldr	r7, [r7, #0]
  40c22c:	2f00      	cmp	r7, #0
  40c22e:	d1e6      	bne.n	40c1fe <_fwalk_reent+0x12>
  40c230:	4648      	mov	r0, r9
  40c232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c236:	46b9      	mov	r9, r7
  40c238:	4648      	mov	r0, r9
  40c23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c23e:	bf00      	nop

0040c240 <__locale_charset>:
  40c240:	4800      	ldr	r0, [pc, #0]	; (40c244 <__locale_charset+0x4>)
  40c242:	4770      	bx	lr
  40c244:	2000099c 	.word	0x2000099c

0040c248 <__locale_mb_cur_max>:
  40c248:	4b01      	ldr	r3, [pc, #4]	; (40c250 <__locale_mb_cur_max+0x8>)
  40c24a:	6818      	ldr	r0, [r3, #0]
  40c24c:	4770      	bx	lr
  40c24e:	bf00      	nop
  40c250:	200009bc 	.word	0x200009bc

0040c254 <__smakebuf_r>:
  40c254:	898b      	ldrh	r3, [r1, #12]
  40c256:	b29a      	uxth	r2, r3
  40c258:	f012 0f02 	tst.w	r2, #2
  40c25c:	d13c      	bne.n	40c2d8 <__smakebuf_r+0x84>
  40c25e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c260:	460c      	mov	r4, r1
  40c262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c266:	2900      	cmp	r1, #0
  40c268:	b091      	sub	sp, #68	; 0x44
  40c26a:	4605      	mov	r5, r0
  40c26c:	db19      	blt.n	40c2a2 <__smakebuf_r+0x4e>
  40c26e:	aa01      	add	r2, sp, #4
  40c270:	f000 fc8c 	bl	40cb8c <_fstat_r>
  40c274:	2800      	cmp	r0, #0
  40c276:	db12      	blt.n	40c29e <__smakebuf_r+0x4a>
  40c278:	9b02      	ldr	r3, [sp, #8]
  40c27a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  40c27e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  40c282:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  40c286:	fab7 f787 	clz	r7, r7
  40c28a:	ea4f 1757 	mov.w	r7, r7, lsr #5
  40c28e:	d02a      	beq.n	40c2e6 <__smakebuf_r+0x92>
  40c290:	89a3      	ldrh	r3, [r4, #12]
  40c292:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40c296:	81a3      	strh	r3, [r4, #12]
  40c298:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40c29c:	e00b      	b.n	40c2b6 <__smakebuf_r+0x62>
  40c29e:	89a3      	ldrh	r3, [r4, #12]
  40c2a0:	b29a      	uxth	r2, r3
  40c2a2:	f012 0f80 	tst.w	r2, #128	; 0x80
  40c2a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40c2aa:	81a3      	strh	r3, [r4, #12]
  40c2ac:	bf0c      	ite	eq
  40c2ae:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40c2b2:	2640      	movne	r6, #64	; 0x40
  40c2b4:	2700      	movs	r7, #0
  40c2b6:	4628      	mov	r0, r5
  40c2b8:	4631      	mov	r1, r6
  40c2ba:	f7fd ff4d 	bl	40a158 <_malloc_r>
  40c2be:	89a3      	ldrh	r3, [r4, #12]
  40c2c0:	b340      	cbz	r0, 40c314 <__smakebuf_r+0xc0>
  40c2c2:	4a1a      	ldr	r2, [pc, #104]	; (40c32c <__smakebuf_r+0xd8>)
  40c2c4:	63ea      	str	r2, [r5, #60]	; 0x3c
  40c2c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40c2ca:	81a3      	strh	r3, [r4, #12]
  40c2cc:	6020      	str	r0, [r4, #0]
  40c2ce:	6120      	str	r0, [r4, #16]
  40c2d0:	6166      	str	r6, [r4, #20]
  40c2d2:	b99f      	cbnz	r7, 40c2fc <__smakebuf_r+0xa8>
  40c2d4:	b011      	add	sp, #68	; 0x44
  40c2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c2d8:	f101 0343 	add.w	r3, r1, #67	; 0x43
  40c2dc:	2201      	movs	r2, #1
  40c2de:	600b      	str	r3, [r1, #0]
  40c2e0:	610b      	str	r3, [r1, #16]
  40c2e2:	614a      	str	r2, [r1, #20]
  40c2e4:	4770      	bx	lr
  40c2e6:	4b12      	ldr	r3, [pc, #72]	; (40c330 <__smakebuf_r+0xdc>)
  40c2e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40c2ea:	429a      	cmp	r2, r3
  40c2ec:	d1d0      	bne.n	40c290 <__smakebuf_r+0x3c>
  40c2ee:	89a3      	ldrh	r3, [r4, #12]
  40c2f0:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40c2f4:	4333      	orrs	r3, r6
  40c2f6:	81a3      	strh	r3, [r4, #12]
  40c2f8:	64e6      	str	r6, [r4, #76]	; 0x4c
  40c2fa:	e7dc      	b.n	40c2b6 <__smakebuf_r+0x62>
  40c2fc:	4628      	mov	r0, r5
  40c2fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40c302:	f000 fc57 	bl	40cbb4 <_isatty_r>
  40c306:	2800      	cmp	r0, #0
  40c308:	d0e4      	beq.n	40c2d4 <__smakebuf_r+0x80>
  40c30a:	89a3      	ldrh	r3, [r4, #12]
  40c30c:	f043 0301 	orr.w	r3, r3, #1
  40c310:	81a3      	strh	r3, [r4, #12]
  40c312:	e7df      	b.n	40c2d4 <__smakebuf_r+0x80>
  40c314:	059a      	lsls	r2, r3, #22
  40c316:	d4dd      	bmi.n	40c2d4 <__smakebuf_r+0x80>
  40c318:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40c31c:	f043 0302 	orr.w	r3, r3, #2
  40c320:	2101      	movs	r1, #1
  40c322:	81a3      	strh	r3, [r4, #12]
  40c324:	6022      	str	r2, [r4, #0]
  40c326:	6122      	str	r2, [r4, #16]
  40c328:	6161      	str	r1, [r4, #20]
  40c32a:	e7d3      	b.n	40c2d4 <__smakebuf_r+0x80>
  40c32c:	0040ba79 	.word	0x0040ba79
  40c330:	0040c8d9 	.word	0x0040c8d9

0040c334 <memchr>:
  40c334:	0783      	lsls	r3, r0, #30
  40c336:	b470      	push	{r4, r5, r6}
  40c338:	b2c9      	uxtb	r1, r1
  40c33a:	d040      	beq.n	40c3be <memchr+0x8a>
  40c33c:	1e54      	subs	r4, r2, #1
  40c33e:	2a00      	cmp	r2, #0
  40c340:	d03f      	beq.n	40c3c2 <memchr+0x8e>
  40c342:	7803      	ldrb	r3, [r0, #0]
  40c344:	428b      	cmp	r3, r1
  40c346:	bf18      	it	ne
  40c348:	1c43      	addne	r3, r0, #1
  40c34a:	d106      	bne.n	40c35a <memchr+0x26>
  40c34c:	e01d      	b.n	40c38a <memchr+0x56>
  40c34e:	b1f4      	cbz	r4, 40c38e <memchr+0x5a>
  40c350:	7802      	ldrb	r2, [r0, #0]
  40c352:	428a      	cmp	r2, r1
  40c354:	f104 34ff 	add.w	r4, r4, #4294967295
  40c358:	d017      	beq.n	40c38a <memchr+0x56>
  40c35a:	f013 0f03 	tst.w	r3, #3
  40c35e:	4618      	mov	r0, r3
  40c360:	f103 0301 	add.w	r3, r3, #1
  40c364:	d1f3      	bne.n	40c34e <memchr+0x1a>
  40c366:	2c03      	cmp	r4, #3
  40c368:	d814      	bhi.n	40c394 <memchr+0x60>
  40c36a:	b184      	cbz	r4, 40c38e <memchr+0x5a>
  40c36c:	7803      	ldrb	r3, [r0, #0]
  40c36e:	428b      	cmp	r3, r1
  40c370:	d00b      	beq.n	40c38a <memchr+0x56>
  40c372:	1905      	adds	r5, r0, r4
  40c374:	1c43      	adds	r3, r0, #1
  40c376:	e002      	b.n	40c37e <memchr+0x4a>
  40c378:	7802      	ldrb	r2, [r0, #0]
  40c37a:	428a      	cmp	r2, r1
  40c37c:	d005      	beq.n	40c38a <memchr+0x56>
  40c37e:	42ab      	cmp	r3, r5
  40c380:	4618      	mov	r0, r3
  40c382:	f103 0301 	add.w	r3, r3, #1
  40c386:	d1f7      	bne.n	40c378 <memchr+0x44>
  40c388:	2000      	movs	r0, #0
  40c38a:	bc70      	pop	{r4, r5, r6}
  40c38c:	4770      	bx	lr
  40c38e:	4620      	mov	r0, r4
  40c390:	bc70      	pop	{r4, r5, r6}
  40c392:	4770      	bx	lr
  40c394:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40c398:	4602      	mov	r2, r0
  40c39a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40c39e:	4610      	mov	r0, r2
  40c3a0:	3204      	adds	r2, #4
  40c3a2:	6803      	ldr	r3, [r0, #0]
  40c3a4:	4073      	eors	r3, r6
  40c3a6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40c3aa:	ea25 0303 	bic.w	r3, r5, r3
  40c3ae:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40c3b2:	d1da      	bne.n	40c36a <memchr+0x36>
  40c3b4:	3c04      	subs	r4, #4
  40c3b6:	2c03      	cmp	r4, #3
  40c3b8:	4610      	mov	r0, r2
  40c3ba:	d8f0      	bhi.n	40c39e <memchr+0x6a>
  40c3bc:	e7d5      	b.n	40c36a <memchr+0x36>
  40c3be:	4614      	mov	r4, r2
  40c3c0:	e7d1      	b.n	40c366 <memchr+0x32>
  40c3c2:	4610      	mov	r0, r2
  40c3c4:	e7e1      	b.n	40c38a <memchr+0x56>
  40c3c6:	bf00      	nop

0040c3c8 <memmove>:
  40c3c8:	4288      	cmp	r0, r1
  40c3ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c3cc:	d90d      	bls.n	40c3ea <memmove+0x22>
  40c3ce:	188b      	adds	r3, r1, r2
  40c3d0:	4298      	cmp	r0, r3
  40c3d2:	d20a      	bcs.n	40c3ea <memmove+0x22>
  40c3d4:	1881      	adds	r1, r0, r2
  40c3d6:	2a00      	cmp	r2, #0
  40c3d8:	d054      	beq.n	40c484 <memmove+0xbc>
  40c3da:	1a9a      	subs	r2, r3, r2
  40c3dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40c3e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40c3e4:	4293      	cmp	r3, r2
  40c3e6:	d1f9      	bne.n	40c3dc <memmove+0x14>
  40c3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c3ea:	2a0f      	cmp	r2, #15
  40c3ec:	d948      	bls.n	40c480 <memmove+0xb8>
  40c3ee:	ea40 0301 	orr.w	r3, r0, r1
  40c3f2:	079b      	lsls	r3, r3, #30
  40c3f4:	d147      	bne.n	40c486 <memmove+0xbe>
  40c3f6:	f100 0410 	add.w	r4, r0, #16
  40c3fa:	f101 0310 	add.w	r3, r1, #16
  40c3fe:	4615      	mov	r5, r2
  40c400:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40c404:	f844 6c10 	str.w	r6, [r4, #-16]
  40c408:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40c40c:	f844 6c0c 	str.w	r6, [r4, #-12]
  40c410:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40c414:	f844 6c08 	str.w	r6, [r4, #-8]
  40c418:	3d10      	subs	r5, #16
  40c41a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40c41e:	f844 6c04 	str.w	r6, [r4, #-4]
  40c422:	2d0f      	cmp	r5, #15
  40c424:	f103 0310 	add.w	r3, r3, #16
  40c428:	f104 0410 	add.w	r4, r4, #16
  40c42c:	d8e8      	bhi.n	40c400 <memmove+0x38>
  40c42e:	f1a2 0310 	sub.w	r3, r2, #16
  40c432:	f023 030f 	bic.w	r3, r3, #15
  40c436:	f002 0e0f 	and.w	lr, r2, #15
  40c43a:	3310      	adds	r3, #16
  40c43c:	f1be 0f03 	cmp.w	lr, #3
  40c440:	4419      	add	r1, r3
  40c442:	4403      	add	r3, r0
  40c444:	d921      	bls.n	40c48a <memmove+0xc2>
  40c446:	1f1e      	subs	r6, r3, #4
  40c448:	460d      	mov	r5, r1
  40c44a:	4674      	mov	r4, lr
  40c44c:	3c04      	subs	r4, #4
  40c44e:	f855 7b04 	ldr.w	r7, [r5], #4
  40c452:	f846 7f04 	str.w	r7, [r6, #4]!
  40c456:	2c03      	cmp	r4, #3
  40c458:	d8f8      	bhi.n	40c44c <memmove+0x84>
  40c45a:	f1ae 0404 	sub.w	r4, lr, #4
  40c45e:	f024 0403 	bic.w	r4, r4, #3
  40c462:	3404      	adds	r4, #4
  40c464:	4423      	add	r3, r4
  40c466:	4421      	add	r1, r4
  40c468:	f002 0203 	and.w	r2, r2, #3
  40c46c:	b152      	cbz	r2, 40c484 <memmove+0xbc>
  40c46e:	3b01      	subs	r3, #1
  40c470:	440a      	add	r2, r1
  40c472:	f811 4b01 	ldrb.w	r4, [r1], #1
  40c476:	f803 4f01 	strb.w	r4, [r3, #1]!
  40c47a:	4291      	cmp	r1, r2
  40c47c:	d1f9      	bne.n	40c472 <memmove+0xaa>
  40c47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c480:	4603      	mov	r3, r0
  40c482:	e7f3      	b.n	40c46c <memmove+0xa4>
  40c484:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c486:	4603      	mov	r3, r0
  40c488:	e7f1      	b.n	40c46e <memmove+0xa6>
  40c48a:	4672      	mov	r2, lr
  40c48c:	e7ee      	b.n	40c46c <memmove+0xa4>
  40c48e:	bf00      	nop

0040c490 <_realloc_r>:
  40c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c494:	4617      	mov	r7, r2
  40c496:	b083      	sub	sp, #12
  40c498:	460e      	mov	r6, r1
  40c49a:	2900      	cmp	r1, #0
  40c49c:	f000 80e7 	beq.w	40c66e <_realloc_r+0x1de>
  40c4a0:	4681      	mov	r9, r0
  40c4a2:	f107 050b 	add.w	r5, r7, #11
  40c4a6:	f7fe fa03 	bl	40a8b0 <__malloc_lock>
  40c4aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40c4ae:	2d16      	cmp	r5, #22
  40c4b0:	f023 0403 	bic.w	r4, r3, #3
  40c4b4:	f1a6 0808 	sub.w	r8, r6, #8
  40c4b8:	d84c      	bhi.n	40c554 <_realloc_r+0xc4>
  40c4ba:	2210      	movs	r2, #16
  40c4bc:	4615      	mov	r5, r2
  40c4be:	42af      	cmp	r7, r5
  40c4c0:	d84d      	bhi.n	40c55e <_realloc_r+0xce>
  40c4c2:	4294      	cmp	r4, r2
  40c4c4:	f280 8084 	bge.w	40c5d0 <_realloc_r+0x140>
  40c4c8:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 40c878 <_realloc_r+0x3e8>
  40c4cc:	f8db 0008 	ldr.w	r0, [fp, #8]
  40c4d0:	eb08 0104 	add.w	r1, r8, r4
  40c4d4:	4288      	cmp	r0, r1
  40c4d6:	f000 80d6 	beq.w	40c686 <_realloc_r+0x1f6>
  40c4da:	6848      	ldr	r0, [r1, #4]
  40c4dc:	f020 0e01 	bic.w	lr, r0, #1
  40c4e0:	448e      	add	lr, r1
  40c4e2:	f8de e004 	ldr.w	lr, [lr, #4]
  40c4e6:	f01e 0f01 	tst.w	lr, #1
  40c4ea:	d13f      	bne.n	40c56c <_realloc_r+0xdc>
  40c4ec:	f020 0003 	bic.w	r0, r0, #3
  40c4f0:	4420      	add	r0, r4
  40c4f2:	4290      	cmp	r0, r2
  40c4f4:	f280 80c1 	bge.w	40c67a <_realloc_r+0x1ea>
  40c4f8:	07db      	lsls	r3, r3, #31
  40c4fa:	f100 808f 	bmi.w	40c61c <_realloc_r+0x18c>
  40c4fe:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40c502:	ebc3 0a08 	rsb	sl, r3, r8
  40c506:	f8da 3004 	ldr.w	r3, [sl, #4]
  40c50a:	f023 0303 	bic.w	r3, r3, #3
  40c50e:	eb00 0e03 	add.w	lr, r0, r3
  40c512:	4596      	cmp	lr, r2
  40c514:	db34      	blt.n	40c580 <_realloc_r+0xf0>
  40c516:	68cb      	ldr	r3, [r1, #12]
  40c518:	688a      	ldr	r2, [r1, #8]
  40c51a:	4657      	mov	r7, sl
  40c51c:	60d3      	str	r3, [r2, #12]
  40c51e:	609a      	str	r2, [r3, #8]
  40c520:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40c524:	f8da 300c 	ldr.w	r3, [sl, #12]
  40c528:	60cb      	str	r3, [r1, #12]
  40c52a:	1f22      	subs	r2, r4, #4
  40c52c:	2a24      	cmp	r2, #36	; 0x24
  40c52e:	6099      	str	r1, [r3, #8]
  40c530:	f200 8136 	bhi.w	40c7a0 <_realloc_r+0x310>
  40c534:	2a13      	cmp	r2, #19
  40c536:	f240 80fd 	bls.w	40c734 <_realloc_r+0x2a4>
  40c53a:	6833      	ldr	r3, [r6, #0]
  40c53c:	f8ca 3008 	str.w	r3, [sl, #8]
  40c540:	6873      	ldr	r3, [r6, #4]
  40c542:	f8ca 300c 	str.w	r3, [sl, #12]
  40c546:	2a1b      	cmp	r2, #27
  40c548:	f200 8140 	bhi.w	40c7cc <_realloc_r+0x33c>
  40c54c:	3608      	adds	r6, #8
  40c54e:	f10a 0310 	add.w	r3, sl, #16
  40c552:	e0f0      	b.n	40c736 <_realloc_r+0x2a6>
  40c554:	f025 0507 	bic.w	r5, r5, #7
  40c558:	2d00      	cmp	r5, #0
  40c55a:	462a      	mov	r2, r5
  40c55c:	daaf      	bge.n	40c4be <_realloc_r+0x2e>
  40c55e:	230c      	movs	r3, #12
  40c560:	2000      	movs	r0, #0
  40c562:	f8c9 3000 	str.w	r3, [r9]
  40c566:	b003      	add	sp, #12
  40c568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c56c:	07d9      	lsls	r1, r3, #31
  40c56e:	d455      	bmi.n	40c61c <_realloc_r+0x18c>
  40c570:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40c574:	ebc3 0a08 	rsb	sl, r3, r8
  40c578:	f8da 3004 	ldr.w	r3, [sl, #4]
  40c57c:	f023 0303 	bic.w	r3, r3, #3
  40c580:	4423      	add	r3, r4
  40c582:	4293      	cmp	r3, r2
  40c584:	db4a      	blt.n	40c61c <_realloc_r+0x18c>
  40c586:	4657      	mov	r7, sl
  40c588:	f8da 100c 	ldr.w	r1, [sl, #12]
  40c58c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40c590:	1f22      	subs	r2, r4, #4
  40c592:	2a24      	cmp	r2, #36	; 0x24
  40c594:	60c1      	str	r1, [r0, #12]
  40c596:	6088      	str	r0, [r1, #8]
  40c598:	f200 810e 	bhi.w	40c7b8 <_realloc_r+0x328>
  40c59c:	2a13      	cmp	r2, #19
  40c59e:	f240 8109 	bls.w	40c7b4 <_realloc_r+0x324>
  40c5a2:	6831      	ldr	r1, [r6, #0]
  40c5a4:	f8ca 1008 	str.w	r1, [sl, #8]
  40c5a8:	6871      	ldr	r1, [r6, #4]
  40c5aa:	f8ca 100c 	str.w	r1, [sl, #12]
  40c5ae:	2a1b      	cmp	r2, #27
  40c5b0:	f200 8121 	bhi.w	40c7f6 <_realloc_r+0x366>
  40c5b4:	3608      	adds	r6, #8
  40c5b6:	f10a 0210 	add.w	r2, sl, #16
  40c5ba:	6831      	ldr	r1, [r6, #0]
  40c5bc:	6011      	str	r1, [r2, #0]
  40c5be:	6871      	ldr	r1, [r6, #4]
  40c5c0:	6051      	str	r1, [r2, #4]
  40c5c2:	68b1      	ldr	r1, [r6, #8]
  40c5c4:	6091      	str	r1, [r2, #8]
  40c5c6:	461c      	mov	r4, r3
  40c5c8:	f8da 3004 	ldr.w	r3, [sl, #4]
  40c5cc:	463e      	mov	r6, r7
  40c5ce:	46d0      	mov	r8, sl
  40c5d0:	1b62      	subs	r2, r4, r5
  40c5d2:	2a0f      	cmp	r2, #15
  40c5d4:	f003 0301 	and.w	r3, r3, #1
  40c5d8:	d80e      	bhi.n	40c5f8 <_realloc_r+0x168>
  40c5da:	4323      	orrs	r3, r4
  40c5dc:	4444      	add	r4, r8
  40c5de:	f8c8 3004 	str.w	r3, [r8, #4]
  40c5e2:	6863      	ldr	r3, [r4, #4]
  40c5e4:	f043 0301 	orr.w	r3, r3, #1
  40c5e8:	6063      	str	r3, [r4, #4]
  40c5ea:	4648      	mov	r0, r9
  40c5ec:	f7fe f962 	bl	40a8b4 <__malloc_unlock>
  40c5f0:	4630      	mov	r0, r6
  40c5f2:	b003      	add	sp, #12
  40c5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c5f8:	eb08 0105 	add.w	r1, r8, r5
  40c5fc:	431d      	orrs	r5, r3
  40c5fe:	f042 0301 	orr.w	r3, r2, #1
  40c602:	440a      	add	r2, r1
  40c604:	f8c8 5004 	str.w	r5, [r8, #4]
  40c608:	604b      	str	r3, [r1, #4]
  40c60a:	6853      	ldr	r3, [r2, #4]
  40c60c:	f043 0301 	orr.w	r3, r3, #1
  40c610:	3108      	adds	r1, #8
  40c612:	6053      	str	r3, [r2, #4]
  40c614:	4648      	mov	r0, r9
  40c616:	f7ff fb85 	bl	40bd24 <_free_r>
  40c61a:	e7e6      	b.n	40c5ea <_realloc_r+0x15a>
  40c61c:	4639      	mov	r1, r7
  40c61e:	4648      	mov	r0, r9
  40c620:	f7fd fd9a 	bl	40a158 <_malloc_r>
  40c624:	4607      	mov	r7, r0
  40c626:	b1d8      	cbz	r0, 40c660 <_realloc_r+0x1d0>
  40c628:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40c62c:	f023 0201 	bic.w	r2, r3, #1
  40c630:	4442      	add	r2, r8
  40c632:	f1a0 0108 	sub.w	r1, r0, #8
  40c636:	4291      	cmp	r1, r2
  40c638:	f000 80ac 	beq.w	40c794 <_realloc_r+0x304>
  40c63c:	1f22      	subs	r2, r4, #4
  40c63e:	2a24      	cmp	r2, #36	; 0x24
  40c640:	f200 8099 	bhi.w	40c776 <_realloc_r+0x2e6>
  40c644:	2a13      	cmp	r2, #19
  40c646:	d86a      	bhi.n	40c71e <_realloc_r+0x28e>
  40c648:	4603      	mov	r3, r0
  40c64a:	4632      	mov	r2, r6
  40c64c:	6811      	ldr	r1, [r2, #0]
  40c64e:	6019      	str	r1, [r3, #0]
  40c650:	6851      	ldr	r1, [r2, #4]
  40c652:	6059      	str	r1, [r3, #4]
  40c654:	6892      	ldr	r2, [r2, #8]
  40c656:	609a      	str	r2, [r3, #8]
  40c658:	4631      	mov	r1, r6
  40c65a:	4648      	mov	r0, r9
  40c65c:	f7ff fb62 	bl	40bd24 <_free_r>
  40c660:	4648      	mov	r0, r9
  40c662:	f7fe f927 	bl	40a8b4 <__malloc_unlock>
  40c666:	4638      	mov	r0, r7
  40c668:	b003      	add	sp, #12
  40c66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c66e:	4611      	mov	r1, r2
  40c670:	b003      	add	sp, #12
  40c672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c676:	f7fd bd6f 	b.w	40a158 <_malloc_r>
  40c67a:	68ca      	ldr	r2, [r1, #12]
  40c67c:	6889      	ldr	r1, [r1, #8]
  40c67e:	4604      	mov	r4, r0
  40c680:	60ca      	str	r2, [r1, #12]
  40c682:	6091      	str	r1, [r2, #8]
  40c684:	e7a4      	b.n	40c5d0 <_realloc_r+0x140>
  40c686:	6841      	ldr	r1, [r0, #4]
  40c688:	f021 0103 	bic.w	r1, r1, #3
  40c68c:	4421      	add	r1, r4
  40c68e:	f105 0010 	add.w	r0, r5, #16
  40c692:	4281      	cmp	r1, r0
  40c694:	da5b      	bge.n	40c74e <_realloc_r+0x2be>
  40c696:	07db      	lsls	r3, r3, #31
  40c698:	d4c0      	bmi.n	40c61c <_realloc_r+0x18c>
  40c69a:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40c69e:	ebc3 0a08 	rsb	sl, r3, r8
  40c6a2:	f8da 3004 	ldr.w	r3, [sl, #4]
  40c6a6:	f023 0303 	bic.w	r3, r3, #3
  40c6aa:	eb01 0c03 	add.w	ip, r1, r3
  40c6ae:	4560      	cmp	r0, ip
  40c6b0:	f73f af66 	bgt.w	40c580 <_realloc_r+0xf0>
  40c6b4:	4657      	mov	r7, sl
  40c6b6:	f8da 300c 	ldr.w	r3, [sl, #12]
  40c6ba:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40c6be:	1f22      	subs	r2, r4, #4
  40c6c0:	2a24      	cmp	r2, #36	; 0x24
  40c6c2:	60cb      	str	r3, [r1, #12]
  40c6c4:	6099      	str	r1, [r3, #8]
  40c6c6:	f200 80b8 	bhi.w	40c83a <_realloc_r+0x3aa>
  40c6ca:	2a13      	cmp	r2, #19
  40c6cc:	f240 80a9 	bls.w	40c822 <_realloc_r+0x392>
  40c6d0:	6833      	ldr	r3, [r6, #0]
  40c6d2:	f8ca 3008 	str.w	r3, [sl, #8]
  40c6d6:	6873      	ldr	r3, [r6, #4]
  40c6d8:	f8ca 300c 	str.w	r3, [sl, #12]
  40c6dc:	2a1b      	cmp	r2, #27
  40c6de:	f200 80b5 	bhi.w	40c84c <_realloc_r+0x3bc>
  40c6e2:	3608      	adds	r6, #8
  40c6e4:	f10a 0310 	add.w	r3, sl, #16
  40c6e8:	6832      	ldr	r2, [r6, #0]
  40c6ea:	601a      	str	r2, [r3, #0]
  40c6ec:	6872      	ldr	r2, [r6, #4]
  40c6ee:	605a      	str	r2, [r3, #4]
  40c6f0:	68b2      	ldr	r2, [r6, #8]
  40c6f2:	609a      	str	r2, [r3, #8]
  40c6f4:	eb0a 0205 	add.w	r2, sl, r5
  40c6f8:	ebc5 030c 	rsb	r3, r5, ip
  40c6fc:	f043 0301 	orr.w	r3, r3, #1
  40c700:	f8cb 2008 	str.w	r2, [fp, #8]
  40c704:	6053      	str	r3, [r2, #4]
  40c706:	f8da 3004 	ldr.w	r3, [sl, #4]
  40c70a:	f003 0301 	and.w	r3, r3, #1
  40c70e:	431d      	orrs	r5, r3
  40c710:	4648      	mov	r0, r9
  40c712:	f8ca 5004 	str.w	r5, [sl, #4]
  40c716:	f7fe f8cd 	bl	40a8b4 <__malloc_unlock>
  40c71a:	4638      	mov	r0, r7
  40c71c:	e769      	b.n	40c5f2 <_realloc_r+0x162>
  40c71e:	6833      	ldr	r3, [r6, #0]
  40c720:	6003      	str	r3, [r0, #0]
  40c722:	6873      	ldr	r3, [r6, #4]
  40c724:	6043      	str	r3, [r0, #4]
  40c726:	2a1b      	cmp	r2, #27
  40c728:	d829      	bhi.n	40c77e <_realloc_r+0x2ee>
  40c72a:	f100 0308 	add.w	r3, r0, #8
  40c72e:	f106 0208 	add.w	r2, r6, #8
  40c732:	e78b      	b.n	40c64c <_realloc_r+0x1bc>
  40c734:	463b      	mov	r3, r7
  40c736:	6832      	ldr	r2, [r6, #0]
  40c738:	601a      	str	r2, [r3, #0]
  40c73a:	6872      	ldr	r2, [r6, #4]
  40c73c:	605a      	str	r2, [r3, #4]
  40c73e:	68b2      	ldr	r2, [r6, #8]
  40c740:	609a      	str	r2, [r3, #8]
  40c742:	463e      	mov	r6, r7
  40c744:	4674      	mov	r4, lr
  40c746:	f8da 3004 	ldr.w	r3, [sl, #4]
  40c74a:	46d0      	mov	r8, sl
  40c74c:	e740      	b.n	40c5d0 <_realloc_r+0x140>
  40c74e:	eb08 0205 	add.w	r2, r8, r5
  40c752:	1b4b      	subs	r3, r1, r5
  40c754:	f043 0301 	orr.w	r3, r3, #1
  40c758:	f8cb 2008 	str.w	r2, [fp, #8]
  40c75c:	6053      	str	r3, [r2, #4]
  40c75e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40c762:	f003 0301 	and.w	r3, r3, #1
  40c766:	431d      	orrs	r5, r3
  40c768:	4648      	mov	r0, r9
  40c76a:	f846 5c04 	str.w	r5, [r6, #-4]
  40c76e:	f7fe f8a1 	bl	40a8b4 <__malloc_unlock>
  40c772:	4630      	mov	r0, r6
  40c774:	e73d      	b.n	40c5f2 <_realloc_r+0x162>
  40c776:	4631      	mov	r1, r6
  40c778:	f7ff fe26 	bl	40c3c8 <memmove>
  40c77c:	e76c      	b.n	40c658 <_realloc_r+0x1c8>
  40c77e:	68b3      	ldr	r3, [r6, #8]
  40c780:	6083      	str	r3, [r0, #8]
  40c782:	68f3      	ldr	r3, [r6, #12]
  40c784:	60c3      	str	r3, [r0, #12]
  40c786:	2a24      	cmp	r2, #36	; 0x24
  40c788:	d02c      	beq.n	40c7e4 <_realloc_r+0x354>
  40c78a:	f100 0310 	add.w	r3, r0, #16
  40c78e:	f106 0210 	add.w	r2, r6, #16
  40c792:	e75b      	b.n	40c64c <_realloc_r+0x1bc>
  40c794:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40c798:	f022 0203 	bic.w	r2, r2, #3
  40c79c:	4414      	add	r4, r2
  40c79e:	e717      	b.n	40c5d0 <_realloc_r+0x140>
  40c7a0:	4631      	mov	r1, r6
  40c7a2:	4638      	mov	r0, r7
  40c7a4:	4674      	mov	r4, lr
  40c7a6:	463e      	mov	r6, r7
  40c7a8:	f7ff fe0e 	bl	40c3c8 <memmove>
  40c7ac:	46d0      	mov	r8, sl
  40c7ae:	f8da 3004 	ldr.w	r3, [sl, #4]
  40c7b2:	e70d      	b.n	40c5d0 <_realloc_r+0x140>
  40c7b4:	463a      	mov	r2, r7
  40c7b6:	e700      	b.n	40c5ba <_realloc_r+0x12a>
  40c7b8:	4631      	mov	r1, r6
  40c7ba:	4638      	mov	r0, r7
  40c7bc:	461c      	mov	r4, r3
  40c7be:	463e      	mov	r6, r7
  40c7c0:	f7ff fe02 	bl	40c3c8 <memmove>
  40c7c4:	46d0      	mov	r8, sl
  40c7c6:	f8da 3004 	ldr.w	r3, [sl, #4]
  40c7ca:	e701      	b.n	40c5d0 <_realloc_r+0x140>
  40c7cc:	68b3      	ldr	r3, [r6, #8]
  40c7ce:	f8ca 3010 	str.w	r3, [sl, #16]
  40c7d2:	68f3      	ldr	r3, [r6, #12]
  40c7d4:	f8ca 3014 	str.w	r3, [sl, #20]
  40c7d8:	2a24      	cmp	r2, #36	; 0x24
  40c7da:	d018      	beq.n	40c80e <_realloc_r+0x37e>
  40c7dc:	3610      	adds	r6, #16
  40c7de:	f10a 0318 	add.w	r3, sl, #24
  40c7e2:	e7a8      	b.n	40c736 <_realloc_r+0x2a6>
  40c7e4:	6933      	ldr	r3, [r6, #16]
  40c7e6:	6103      	str	r3, [r0, #16]
  40c7e8:	6973      	ldr	r3, [r6, #20]
  40c7ea:	6143      	str	r3, [r0, #20]
  40c7ec:	f106 0218 	add.w	r2, r6, #24
  40c7f0:	f100 0318 	add.w	r3, r0, #24
  40c7f4:	e72a      	b.n	40c64c <_realloc_r+0x1bc>
  40c7f6:	68b1      	ldr	r1, [r6, #8]
  40c7f8:	f8ca 1010 	str.w	r1, [sl, #16]
  40c7fc:	68f1      	ldr	r1, [r6, #12]
  40c7fe:	f8ca 1014 	str.w	r1, [sl, #20]
  40c802:	2a24      	cmp	r2, #36	; 0x24
  40c804:	d00f      	beq.n	40c826 <_realloc_r+0x396>
  40c806:	3610      	adds	r6, #16
  40c808:	f10a 0218 	add.w	r2, sl, #24
  40c80c:	e6d5      	b.n	40c5ba <_realloc_r+0x12a>
  40c80e:	6933      	ldr	r3, [r6, #16]
  40c810:	f8ca 3018 	str.w	r3, [sl, #24]
  40c814:	6973      	ldr	r3, [r6, #20]
  40c816:	f8ca 301c 	str.w	r3, [sl, #28]
  40c81a:	3618      	adds	r6, #24
  40c81c:	f10a 0320 	add.w	r3, sl, #32
  40c820:	e789      	b.n	40c736 <_realloc_r+0x2a6>
  40c822:	463b      	mov	r3, r7
  40c824:	e760      	b.n	40c6e8 <_realloc_r+0x258>
  40c826:	6932      	ldr	r2, [r6, #16]
  40c828:	f8ca 2018 	str.w	r2, [sl, #24]
  40c82c:	6972      	ldr	r2, [r6, #20]
  40c82e:	f8ca 201c 	str.w	r2, [sl, #28]
  40c832:	3618      	adds	r6, #24
  40c834:	f10a 0220 	add.w	r2, sl, #32
  40c838:	e6bf      	b.n	40c5ba <_realloc_r+0x12a>
  40c83a:	4631      	mov	r1, r6
  40c83c:	4638      	mov	r0, r7
  40c83e:	f8cd c004 	str.w	ip, [sp, #4]
  40c842:	f7ff fdc1 	bl	40c3c8 <memmove>
  40c846:	f8dd c004 	ldr.w	ip, [sp, #4]
  40c84a:	e753      	b.n	40c6f4 <_realloc_r+0x264>
  40c84c:	68b3      	ldr	r3, [r6, #8]
  40c84e:	f8ca 3010 	str.w	r3, [sl, #16]
  40c852:	68f3      	ldr	r3, [r6, #12]
  40c854:	f8ca 3014 	str.w	r3, [sl, #20]
  40c858:	2a24      	cmp	r2, #36	; 0x24
  40c85a:	d003      	beq.n	40c864 <_realloc_r+0x3d4>
  40c85c:	3610      	adds	r6, #16
  40c85e:	f10a 0318 	add.w	r3, sl, #24
  40c862:	e741      	b.n	40c6e8 <_realloc_r+0x258>
  40c864:	6933      	ldr	r3, [r6, #16]
  40c866:	f8ca 3018 	str.w	r3, [sl, #24]
  40c86a:	6973      	ldr	r3, [r6, #20]
  40c86c:	f8ca 301c 	str.w	r3, [sl, #28]
  40c870:	3618      	adds	r6, #24
  40c872:	f10a 0320 	add.w	r3, sl, #32
  40c876:	e737      	b.n	40c6e8 <_realloc_r+0x258>
  40c878:	2000058c 	.word	0x2000058c

0040c87c <__sread>:
  40c87c:	b510      	push	{r4, lr}
  40c87e:	460c      	mov	r4, r1
  40c880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c884:	f000 f9bc 	bl	40cc00 <_read_r>
  40c888:	2800      	cmp	r0, #0
  40c88a:	db03      	blt.n	40c894 <__sread+0x18>
  40c88c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40c88e:	4403      	add	r3, r0
  40c890:	6523      	str	r3, [r4, #80]	; 0x50
  40c892:	bd10      	pop	{r4, pc}
  40c894:	89a3      	ldrh	r3, [r4, #12]
  40c896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40c89a:	81a3      	strh	r3, [r4, #12]
  40c89c:	bd10      	pop	{r4, pc}
  40c89e:	bf00      	nop

0040c8a0 <__swrite>:
  40c8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c8a4:	4616      	mov	r6, r2
  40c8a6:	898a      	ldrh	r2, [r1, #12]
  40c8a8:	461d      	mov	r5, r3
  40c8aa:	05d3      	lsls	r3, r2, #23
  40c8ac:	460c      	mov	r4, r1
  40c8ae:	4607      	mov	r7, r0
  40c8b0:	d506      	bpl.n	40c8c0 <__swrite+0x20>
  40c8b2:	2200      	movs	r2, #0
  40c8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c8b8:	2302      	movs	r3, #2
  40c8ba:	f000 f98d 	bl	40cbd8 <_lseek_r>
  40c8be:	89a2      	ldrh	r2, [r4, #12]
  40c8c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40c8c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40c8c8:	81a2      	strh	r2, [r4, #12]
  40c8ca:	4638      	mov	r0, r7
  40c8cc:	4632      	mov	r2, r6
  40c8ce:	462b      	mov	r3, r5
  40c8d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40c8d4:	f000 b8a0 	b.w	40ca18 <_write_r>

0040c8d8 <__sseek>:
  40c8d8:	b510      	push	{r4, lr}
  40c8da:	460c      	mov	r4, r1
  40c8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c8e0:	f000 f97a 	bl	40cbd8 <_lseek_r>
  40c8e4:	89a3      	ldrh	r3, [r4, #12]
  40c8e6:	1c42      	adds	r2, r0, #1
  40c8e8:	bf0e      	itee	eq
  40c8ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40c8ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40c8f2:	6520      	strne	r0, [r4, #80]	; 0x50
  40c8f4:	81a3      	strh	r3, [r4, #12]
  40c8f6:	bd10      	pop	{r4, pc}

0040c8f8 <__sclose>:
  40c8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c8fc:	f000 b8f2 	b.w	40cae4 <_close_r>

0040c900 <__swbuf_r>:
  40c900:	b570      	push	{r4, r5, r6, lr}
  40c902:	460d      	mov	r5, r1
  40c904:	4614      	mov	r4, r2
  40c906:	4606      	mov	r6, r0
  40c908:	b110      	cbz	r0, 40c910 <__swbuf_r+0x10>
  40c90a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c90c:	2b00      	cmp	r3, #0
  40c90e:	d048      	beq.n	40c9a2 <__swbuf_r+0xa2>
  40c910:	89a2      	ldrh	r2, [r4, #12]
  40c912:	69a3      	ldr	r3, [r4, #24]
  40c914:	60a3      	str	r3, [r4, #8]
  40c916:	b291      	uxth	r1, r2
  40c918:	0708      	lsls	r0, r1, #28
  40c91a:	d538      	bpl.n	40c98e <__swbuf_r+0x8e>
  40c91c:	6923      	ldr	r3, [r4, #16]
  40c91e:	2b00      	cmp	r3, #0
  40c920:	d035      	beq.n	40c98e <__swbuf_r+0x8e>
  40c922:	0489      	lsls	r1, r1, #18
  40c924:	b2ed      	uxtb	r5, r5
  40c926:	d515      	bpl.n	40c954 <__swbuf_r+0x54>
  40c928:	6822      	ldr	r2, [r4, #0]
  40c92a:	6961      	ldr	r1, [r4, #20]
  40c92c:	1ad3      	subs	r3, r2, r3
  40c92e:	428b      	cmp	r3, r1
  40c930:	da1c      	bge.n	40c96c <__swbuf_r+0x6c>
  40c932:	3301      	adds	r3, #1
  40c934:	68a1      	ldr	r1, [r4, #8]
  40c936:	1c50      	adds	r0, r2, #1
  40c938:	3901      	subs	r1, #1
  40c93a:	60a1      	str	r1, [r4, #8]
  40c93c:	6020      	str	r0, [r4, #0]
  40c93e:	7015      	strb	r5, [r2, #0]
  40c940:	6962      	ldr	r2, [r4, #20]
  40c942:	429a      	cmp	r2, r3
  40c944:	d01a      	beq.n	40c97c <__swbuf_r+0x7c>
  40c946:	89a3      	ldrh	r3, [r4, #12]
  40c948:	07db      	lsls	r3, r3, #31
  40c94a:	d501      	bpl.n	40c950 <__swbuf_r+0x50>
  40c94c:	2d0a      	cmp	r5, #10
  40c94e:	d015      	beq.n	40c97c <__swbuf_r+0x7c>
  40c950:	4628      	mov	r0, r5
  40c952:	bd70      	pop	{r4, r5, r6, pc}
  40c954:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40c956:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40c95a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40c95e:	81a2      	strh	r2, [r4, #12]
  40c960:	6822      	ldr	r2, [r4, #0]
  40c962:	6661      	str	r1, [r4, #100]	; 0x64
  40c964:	6961      	ldr	r1, [r4, #20]
  40c966:	1ad3      	subs	r3, r2, r3
  40c968:	428b      	cmp	r3, r1
  40c96a:	dbe2      	blt.n	40c932 <__swbuf_r+0x32>
  40c96c:	4630      	mov	r0, r6
  40c96e:	4621      	mov	r1, r4
  40c970:	f7ff f86c 	bl	40ba4c <_fflush_r>
  40c974:	b940      	cbnz	r0, 40c988 <__swbuf_r+0x88>
  40c976:	6822      	ldr	r2, [r4, #0]
  40c978:	2301      	movs	r3, #1
  40c97a:	e7db      	b.n	40c934 <__swbuf_r+0x34>
  40c97c:	4630      	mov	r0, r6
  40c97e:	4621      	mov	r1, r4
  40c980:	f7ff f864 	bl	40ba4c <_fflush_r>
  40c984:	2800      	cmp	r0, #0
  40c986:	d0e3      	beq.n	40c950 <__swbuf_r+0x50>
  40c988:	f04f 30ff 	mov.w	r0, #4294967295
  40c98c:	bd70      	pop	{r4, r5, r6, pc}
  40c98e:	4630      	mov	r0, r6
  40c990:	4621      	mov	r1, r4
  40c992:	f7fe ff3f 	bl	40b814 <__swsetup_r>
  40c996:	2800      	cmp	r0, #0
  40c998:	d1f6      	bne.n	40c988 <__swbuf_r+0x88>
  40c99a:	89a2      	ldrh	r2, [r4, #12]
  40c99c:	6923      	ldr	r3, [r4, #16]
  40c99e:	b291      	uxth	r1, r2
  40c9a0:	e7bf      	b.n	40c922 <__swbuf_r+0x22>
  40c9a2:	f7ff f8e7 	bl	40bb74 <__sinit>
  40c9a6:	e7b3      	b.n	40c910 <__swbuf_r+0x10>

0040c9a8 <_wcrtomb_r>:
  40c9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c9ac:	4605      	mov	r5, r0
  40c9ae:	b086      	sub	sp, #24
  40c9b0:	461e      	mov	r6, r3
  40c9b2:	460c      	mov	r4, r1
  40c9b4:	b1a1      	cbz	r1, 40c9e0 <_wcrtomb_r+0x38>
  40c9b6:	4b10      	ldr	r3, [pc, #64]	; (40c9f8 <_wcrtomb_r+0x50>)
  40c9b8:	4617      	mov	r7, r2
  40c9ba:	f8d3 8000 	ldr.w	r8, [r3]
  40c9be:	f7ff fc3f 	bl	40c240 <__locale_charset>
  40c9c2:	9600      	str	r6, [sp, #0]
  40c9c4:	4603      	mov	r3, r0
  40c9c6:	4621      	mov	r1, r4
  40c9c8:	463a      	mov	r2, r7
  40c9ca:	4628      	mov	r0, r5
  40c9cc:	47c0      	blx	r8
  40c9ce:	1c43      	adds	r3, r0, #1
  40c9d0:	d103      	bne.n	40c9da <_wcrtomb_r+0x32>
  40c9d2:	2200      	movs	r2, #0
  40c9d4:	238a      	movs	r3, #138	; 0x8a
  40c9d6:	6032      	str	r2, [r6, #0]
  40c9d8:	602b      	str	r3, [r5, #0]
  40c9da:	b006      	add	sp, #24
  40c9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c9e0:	4b05      	ldr	r3, [pc, #20]	; (40c9f8 <_wcrtomb_r+0x50>)
  40c9e2:	681f      	ldr	r7, [r3, #0]
  40c9e4:	f7ff fc2c 	bl	40c240 <__locale_charset>
  40c9e8:	9600      	str	r6, [sp, #0]
  40c9ea:	4603      	mov	r3, r0
  40c9ec:	4622      	mov	r2, r4
  40c9ee:	4628      	mov	r0, r5
  40c9f0:	a903      	add	r1, sp, #12
  40c9f2:	47b8      	blx	r7
  40c9f4:	e7eb      	b.n	40c9ce <_wcrtomb_r+0x26>
  40c9f6:	bf00      	nop
  40c9f8:	200009c0 	.word	0x200009c0

0040c9fc <__ascii_wctomb>:
  40c9fc:	b121      	cbz	r1, 40ca08 <__ascii_wctomb+0xc>
  40c9fe:	2aff      	cmp	r2, #255	; 0xff
  40ca00:	d804      	bhi.n	40ca0c <__ascii_wctomb+0x10>
  40ca02:	700a      	strb	r2, [r1, #0]
  40ca04:	2001      	movs	r0, #1
  40ca06:	4770      	bx	lr
  40ca08:	4608      	mov	r0, r1
  40ca0a:	4770      	bx	lr
  40ca0c:	238a      	movs	r3, #138	; 0x8a
  40ca0e:	6003      	str	r3, [r0, #0]
  40ca10:	f04f 30ff 	mov.w	r0, #4294967295
  40ca14:	4770      	bx	lr
  40ca16:	bf00      	nop

0040ca18 <_write_r>:
  40ca18:	b570      	push	{r4, r5, r6, lr}
  40ca1a:	4c08      	ldr	r4, [pc, #32]	; (40ca3c <_write_r+0x24>)
  40ca1c:	4606      	mov	r6, r0
  40ca1e:	2500      	movs	r5, #0
  40ca20:	4608      	mov	r0, r1
  40ca22:	4611      	mov	r1, r2
  40ca24:	461a      	mov	r2, r3
  40ca26:	6025      	str	r5, [r4, #0]
  40ca28:	f7f4 fca6 	bl	401378 <_write>
  40ca2c:	1c43      	adds	r3, r0, #1
  40ca2e:	d000      	beq.n	40ca32 <_write_r+0x1a>
  40ca30:	bd70      	pop	{r4, r5, r6, pc}
  40ca32:	6823      	ldr	r3, [r4, #0]
  40ca34:	2b00      	cmp	r3, #0
  40ca36:	d0fb      	beq.n	40ca30 <_write_r+0x18>
  40ca38:	6033      	str	r3, [r6, #0]
  40ca3a:	bd70      	pop	{r4, r5, r6, pc}
  40ca3c:	2001c404 	.word	0x2001c404

0040ca40 <__register_exitproc>:
  40ca40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ca44:	4c25      	ldr	r4, [pc, #148]	; (40cadc <__register_exitproc+0x9c>)
  40ca46:	6825      	ldr	r5, [r4, #0]
  40ca48:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40ca4c:	4606      	mov	r6, r0
  40ca4e:	4688      	mov	r8, r1
  40ca50:	4692      	mov	sl, r2
  40ca52:	4699      	mov	r9, r3
  40ca54:	b3cc      	cbz	r4, 40caca <__register_exitproc+0x8a>
  40ca56:	6860      	ldr	r0, [r4, #4]
  40ca58:	281f      	cmp	r0, #31
  40ca5a:	dc18      	bgt.n	40ca8e <__register_exitproc+0x4e>
  40ca5c:	1c43      	adds	r3, r0, #1
  40ca5e:	b17e      	cbz	r6, 40ca80 <__register_exitproc+0x40>
  40ca60:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40ca64:	2101      	movs	r1, #1
  40ca66:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40ca6a:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  40ca6e:	fa01 f200 	lsl.w	r2, r1, r0
  40ca72:	4317      	orrs	r7, r2
  40ca74:	2e02      	cmp	r6, #2
  40ca76:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40ca7a:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40ca7e:	d01e      	beq.n	40cabe <__register_exitproc+0x7e>
  40ca80:	3002      	adds	r0, #2
  40ca82:	6063      	str	r3, [r4, #4]
  40ca84:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40ca88:	2000      	movs	r0, #0
  40ca8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ca8e:	4b14      	ldr	r3, [pc, #80]	; (40cae0 <__register_exitproc+0xa0>)
  40ca90:	b303      	cbz	r3, 40cad4 <__register_exitproc+0x94>
  40ca92:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40ca96:	f7fd fb4f 	bl	40a138 <malloc>
  40ca9a:	4604      	mov	r4, r0
  40ca9c:	b1d0      	cbz	r0, 40cad4 <__register_exitproc+0x94>
  40ca9e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40caa2:	2700      	movs	r7, #0
  40caa4:	e880 0088 	stmia.w	r0, {r3, r7}
  40caa8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40caac:	4638      	mov	r0, r7
  40caae:	2301      	movs	r3, #1
  40cab0:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40cab4:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40cab8:	2e00      	cmp	r6, #0
  40caba:	d0e1      	beq.n	40ca80 <__register_exitproc+0x40>
  40cabc:	e7d0      	b.n	40ca60 <__register_exitproc+0x20>
  40cabe:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40cac2:	430a      	orrs	r2, r1
  40cac4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40cac8:	e7da      	b.n	40ca80 <__register_exitproc+0x40>
  40caca:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40cace:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40cad2:	e7c0      	b.n	40ca56 <__register_exitproc+0x16>
  40cad4:	f04f 30ff 	mov.w	r0, #4294967295
  40cad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cadc:	0040d5a8 	.word	0x0040d5a8
  40cae0:	0040a139 	.word	0x0040a139

0040cae4 <_close_r>:
  40cae4:	b538      	push	{r3, r4, r5, lr}
  40cae6:	4c07      	ldr	r4, [pc, #28]	; (40cb04 <_close_r+0x20>)
  40cae8:	2300      	movs	r3, #0
  40caea:	4605      	mov	r5, r0
  40caec:	4608      	mov	r0, r1
  40caee:	6023      	str	r3, [r4, #0]
  40caf0:	f7fc f9e2 	bl	408eb8 <_close>
  40caf4:	1c43      	adds	r3, r0, #1
  40caf6:	d000      	beq.n	40cafa <_close_r+0x16>
  40caf8:	bd38      	pop	{r3, r4, r5, pc}
  40cafa:	6823      	ldr	r3, [r4, #0]
  40cafc:	2b00      	cmp	r3, #0
  40cafe:	d0fb      	beq.n	40caf8 <_close_r+0x14>
  40cb00:	602b      	str	r3, [r5, #0]
  40cb02:	bd38      	pop	{r3, r4, r5, pc}
  40cb04:	2001c404 	.word	0x2001c404

0040cb08 <_fclose_r>:
  40cb08:	2900      	cmp	r1, #0
  40cb0a:	d03d      	beq.n	40cb88 <_fclose_r+0x80>
  40cb0c:	b570      	push	{r4, r5, r6, lr}
  40cb0e:	4605      	mov	r5, r0
  40cb10:	460c      	mov	r4, r1
  40cb12:	b108      	cbz	r0, 40cb18 <_fclose_r+0x10>
  40cb14:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40cb16:	b37b      	cbz	r3, 40cb78 <_fclose_r+0x70>
  40cb18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40cb1c:	b90b      	cbnz	r3, 40cb22 <_fclose_r+0x1a>
  40cb1e:	2000      	movs	r0, #0
  40cb20:	bd70      	pop	{r4, r5, r6, pc}
  40cb22:	4628      	mov	r0, r5
  40cb24:	4621      	mov	r1, r4
  40cb26:	f7fe fee7 	bl	40b8f8 <__sflush_r>
  40cb2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40cb2c:	4606      	mov	r6, r0
  40cb2e:	b133      	cbz	r3, 40cb3e <_fclose_r+0x36>
  40cb30:	4628      	mov	r0, r5
  40cb32:	69e1      	ldr	r1, [r4, #28]
  40cb34:	4798      	blx	r3
  40cb36:	2800      	cmp	r0, #0
  40cb38:	bfb8      	it	lt
  40cb3a:	f04f 36ff 	movlt.w	r6, #4294967295
  40cb3e:	89a3      	ldrh	r3, [r4, #12]
  40cb40:	061b      	lsls	r3, r3, #24
  40cb42:	d41c      	bmi.n	40cb7e <_fclose_r+0x76>
  40cb44:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40cb46:	b141      	cbz	r1, 40cb5a <_fclose_r+0x52>
  40cb48:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40cb4c:	4299      	cmp	r1, r3
  40cb4e:	d002      	beq.n	40cb56 <_fclose_r+0x4e>
  40cb50:	4628      	mov	r0, r5
  40cb52:	f7ff f8e7 	bl	40bd24 <_free_r>
  40cb56:	2300      	movs	r3, #0
  40cb58:	6323      	str	r3, [r4, #48]	; 0x30
  40cb5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40cb5c:	b121      	cbz	r1, 40cb68 <_fclose_r+0x60>
  40cb5e:	4628      	mov	r0, r5
  40cb60:	f7ff f8e0 	bl	40bd24 <_free_r>
  40cb64:	2300      	movs	r3, #0
  40cb66:	6463      	str	r3, [r4, #68]	; 0x44
  40cb68:	f7ff f80a 	bl	40bb80 <__sfp_lock_acquire>
  40cb6c:	2300      	movs	r3, #0
  40cb6e:	81a3      	strh	r3, [r4, #12]
  40cb70:	f7ff f808 	bl	40bb84 <__sfp_lock_release>
  40cb74:	4630      	mov	r0, r6
  40cb76:	bd70      	pop	{r4, r5, r6, pc}
  40cb78:	f7fe fffc 	bl	40bb74 <__sinit>
  40cb7c:	e7cc      	b.n	40cb18 <_fclose_r+0x10>
  40cb7e:	4628      	mov	r0, r5
  40cb80:	6921      	ldr	r1, [r4, #16]
  40cb82:	f7ff f8cf 	bl	40bd24 <_free_r>
  40cb86:	e7dd      	b.n	40cb44 <_fclose_r+0x3c>
  40cb88:	2000      	movs	r0, #0
  40cb8a:	4770      	bx	lr

0040cb8c <_fstat_r>:
  40cb8c:	b538      	push	{r3, r4, r5, lr}
  40cb8e:	4c08      	ldr	r4, [pc, #32]	; (40cbb0 <_fstat_r+0x24>)
  40cb90:	2300      	movs	r3, #0
  40cb92:	4605      	mov	r5, r0
  40cb94:	4608      	mov	r0, r1
  40cb96:	4611      	mov	r1, r2
  40cb98:	6023      	str	r3, [r4, #0]
  40cb9a:	f7fc f999 	bl	408ed0 <_fstat>
  40cb9e:	1c43      	adds	r3, r0, #1
  40cba0:	d000      	beq.n	40cba4 <_fstat_r+0x18>
  40cba2:	bd38      	pop	{r3, r4, r5, pc}
  40cba4:	6823      	ldr	r3, [r4, #0]
  40cba6:	2b00      	cmp	r3, #0
  40cba8:	d0fb      	beq.n	40cba2 <_fstat_r+0x16>
  40cbaa:	602b      	str	r3, [r5, #0]
  40cbac:	bd38      	pop	{r3, r4, r5, pc}
  40cbae:	bf00      	nop
  40cbb0:	2001c404 	.word	0x2001c404

0040cbb4 <_isatty_r>:
  40cbb4:	b538      	push	{r3, r4, r5, lr}
  40cbb6:	4c07      	ldr	r4, [pc, #28]	; (40cbd4 <_isatty_r+0x20>)
  40cbb8:	2300      	movs	r3, #0
  40cbba:	4605      	mov	r5, r0
  40cbbc:	4608      	mov	r0, r1
  40cbbe:	6023      	str	r3, [r4, #0]
  40cbc0:	f7fc f996 	bl	408ef0 <_isatty>
  40cbc4:	1c43      	adds	r3, r0, #1
  40cbc6:	d000      	beq.n	40cbca <_isatty_r+0x16>
  40cbc8:	bd38      	pop	{r3, r4, r5, pc}
  40cbca:	6823      	ldr	r3, [r4, #0]
  40cbcc:	2b00      	cmp	r3, #0
  40cbce:	d0fb      	beq.n	40cbc8 <_isatty_r+0x14>
  40cbd0:	602b      	str	r3, [r5, #0]
  40cbd2:	bd38      	pop	{r3, r4, r5, pc}
  40cbd4:	2001c404 	.word	0x2001c404

0040cbd8 <_lseek_r>:
  40cbd8:	b570      	push	{r4, r5, r6, lr}
  40cbda:	4c08      	ldr	r4, [pc, #32]	; (40cbfc <_lseek_r+0x24>)
  40cbdc:	4606      	mov	r6, r0
  40cbde:	2500      	movs	r5, #0
  40cbe0:	4608      	mov	r0, r1
  40cbe2:	4611      	mov	r1, r2
  40cbe4:	461a      	mov	r2, r3
  40cbe6:	6025      	str	r5, [r4, #0]
  40cbe8:	f7fc f98e 	bl	408f08 <_lseek>
  40cbec:	1c43      	adds	r3, r0, #1
  40cbee:	d000      	beq.n	40cbf2 <_lseek_r+0x1a>
  40cbf0:	bd70      	pop	{r4, r5, r6, pc}
  40cbf2:	6823      	ldr	r3, [r4, #0]
  40cbf4:	2b00      	cmp	r3, #0
  40cbf6:	d0fb      	beq.n	40cbf0 <_lseek_r+0x18>
  40cbf8:	6033      	str	r3, [r6, #0]
  40cbfa:	bd70      	pop	{r4, r5, r6, pc}
  40cbfc:	2001c404 	.word	0x2001c404

0040cc00 <_read_r>:
  40cc00:	b570      	push	{r4, r5, r6, lr}
  40cc02:	4c08      	ldr	r4, [pc, #32]	; (40cc24 <_read_r+0x24>)
  40cc04:	4606      	mov	r6, r0
  40cc06:	2500      	movs	r5, #0
  40cc08:	4608      	mov	r0, r1
  40cc0a:	4611      	mov	r1, r2
  40cc0c:	461a      	mov	r2, r3
  40cc0e:	6025      	str	r5, [r4, #0]
  40cc10:	f7f4 fb86 	bl	401320 <_read>
  40cc14:	1c43      	adds	r3, r0, #1
  40cc16:	d000      	beq.n	40cc1a <_read_r+0x1a>
  40cc18:	bd70      	pop	{r4, r5, r6, pc}
  40cc1a:	6823      	ldr	r3, [r4, #0]
  40cc1c:	2b00      	cmp	r3, #0
  40cc1e:	d0fb      	beq.n	40cc18 <_read_r+0x18>
  40cc20:	6033      	str	r3, [r6, #0]
  40cc22:	bd70      	pop	{r4, r5, r6, pc}
  40cc24:	2001c404 	.word	0x2001c404
  40cc28:	33323130 	.word	0x33323130
  40cc2c:	37363534 	.word	0x37363534
  40cc30:	62613938 	.word	0x62613938
  40cc34:	66656463 	.word	0x66656463
  40cc38:	00000000 	.word	0x00000000
  40cc3c:	2e2e2e2e 	.word	0x2e2e2e2e
  40cc40:	2e2e2e2e 	.word	0x2e2e2e2e
  40cc44:	72646e65 	.word	0x72646e65
  40cc48:	000a0d78 	.word	0x000a0d78
  40cc4c:	33444b34 	.word	0x33444b34
  40cc50:	00004352 	.word	0x00004352
  40cc54:	65636552 	.word	0x65636552
  40cc58:	20657669 	.word	0x20657669
  40cc5c:	20746567 	.word	0x20746567
  40cc60:	70616e73 	.word	0x70616e73
  40cc64:	746f6873 	.word	0x746f6873
  40cc68:	6d6f6320 	.word	0x6d6f6320
  40cc6c:	646e616d 	.word	0x646e616d
  40cc70:	000a0d2e 	.word	0x000a0d2e
  40cc74:	462d6957 	.word	0x462d6957
  40cc78:	6f4d2069 	.word	0x6f4d2069
  40cc7c:	656c7564 	.word	0x656c7564
  40cc80:	61655220 	.word	0x61655220
  40cc84:	0d217964 	.word	0x0d217964
  40cc88:	0000000a 	.word	0x0000000a
  40cc8c:	20746547 	.word	0x20746547
  40cc90:	656d6163 	.word	0x656d6163
  40cc94:	73206172 	.word	0x73206172
  40cc98:	69636570 	.word	0x69636570
  40cc9c:	20636966 	.word	0x20636966
  40cca0:	636f6c62 	.word	0x636f6c62
  40cca4:	2d2d2d6b 	.word	0x2d2d2d6b
  40cca8:	0a0d6425 	.word	0x0a0d6425
  40ccac:	00000000 	.word	0x00000000
  40ccb0:	65636552 	.word	0x65636552
  40ccb4:	20657669 	.word	0x20657669
  40ccb8:	6b636170 	.word	0x6b636170
  40ccbc:	65207465 	.word	0x65207465
  40ccc0:	726f7272 	.word	0x726f7272
  40ccc4:	73657220 	.word	0x73657220
  40ccc8:	736e6f70 	.word	0x736e6f70
  40cccc:	65202c65 	.word	0x65202c65
  40ccd0:	25287272 	.word	0x25287272
  40ccd4:	0d2e2964 	.word	0x0d2e2964
  40ccd8:	0000000a 	.word	0x0000000a
  40ccdc:	69666957 	.word	0x69666957
  40cce0:	73696420 	.word	0x73696420
  40cce4:	6e6e6f63 	.word	0x6e6e6f63
  40cce8:	2e746365 	.word	0x2e746365
  40ccec:	00000a0d 	.word	0x00000a0d
  40ccf0:	69666957 	.word	0x69666957
  40ccf4:	646f6d20 	.word	0x646f6d20
  40ccf8:	20656c75 	.word	0x20656c75
  40ccfc:	73206e69 	.word	0x73206e69
  40cd00:	6666696e 	.word	0x6666696e
  40cd04:	6d207265 	.word	0x6d207265
  40cd08:	2e65646f 	.word	0x2e65646f
  40cd0c:	00000a0d 	.word	0x00000a0d
  40cd10:	69666957 	.word	0x69666957
  40cd14:	646f6d20 	.word	0x646f6d20
  40cd18:	20656c75 	.word	0x20656c75
  40cd1c:	6e6e6f63 	.word	0x6e6e6f63
  40cd20:	20746365 	.word	0x20746365
  40cd24:	77206f74 	.word	0x77206f74
  40cd28:	20696669 	.word	0x20696669
  40cd2c:	74756f72 	.word	0x74756f72
  40cd30:	0d2e7265 	.word	0x0d2e7265
  40cd34:	0000000a 	.word	0x0000000a
  40cd38:	69666957 	.word	0x69666957
  40cd3c:	646f6d20 	.word	0x646f6d20
  40cd40:	20656c75 	.word	0x20656c75
  40cd44:	6e6e6f63 	.word	0x6e6e6f63
  40cd48:	20746365 	.word	0x20746365
  40cd4c:	4a206f74 	.word	0x4a206f74
  40cd50:	65732044 	.word	0x65732044
  40cd54:	72657672 	.word	0x72657672
  40cd58:	000a0d2e 	.word	0x000a0d2e
  40cd5c:	6e6e6f43 	.word	0x6e6e6f43
  40cd60:	20746365 	.word	0x20746365
  40cd64:	52206f74 	.word	0x52206f74
  40cd68:	746f6d65 	.word	0x746f6d65
  40cd6c:	65532065 	.word	0x65532065
  40cd70:	72657672 	.word	0x72657672
  40cd74:	2e4b4f20 	.word	0x2e4b4f20
  40cd78:	00000a0d 	.word	0x00000a0d
  40cd7c:	6e6e6f43 	.word	0x6e6e6f43
  40cd80:	69746365 	.word	0x69746365
  40cd84:	62206e6f 	.word	0x62206e6f
  40cd88:	68746165 	.word	0x68746165
  40cd8c:	74726165 	.word	0x74726165
  40cd90:	000a0d2e 	.word	0x000a0d2e
  40cd94:	61647055 	.word	0x61647055
  40cd98:	44206574 	.word	0x44206574
  40cd9c:	20617461 	.word	0x20617461
  40cda0:	0d2e4b4f 	.word	0x0d2e4b4f
  40cda4:	0000000a 	.word	0x0000000a
  40cda8:	65736552 	.word	0x65736552
  40cdac:	6f742074 	.word	0x6f742074
  40cdb0:	63614620 	.word	0x63614620
  40cdb4:	79726f74 	.word	0x79726f74
  40cdb8:	2077654e 	.word	0x2077654e
  40cdbc:	0d2e4b4f 	.word	0x0d2e4b4f
  40cdc0:	0000000a 	.word	0x0000000a
  40cdc4:	44495555 	.word	0x44495555
  40cdc8:	53455220 	.word	0x53455220
  40cdcc:	4b4f2050 	.word	0x4b4f2050
  40cdd0:	000a0d2e 	.word	0x000a0d2e
  40cdd4:	44495555 	.word	0x44495555
  40cdd8:	53455220 	.word	0x53455220
  40cddc:	72452050 	.word	0x72452050
  40cde0:	2e726f72 	.word	0x2e726f72
  40cde4:	00000a0d 	.word	0x00000a0d
  40cde8:	72617453 	.word	0x72617453
  40cdec:	6e732074 	.word	0x6e732074
  40cdf0:	65666669 	.word	0x65666669
  40cdf4:	6f6d2072 	.word	0x6f6d2072
  40cdf8:	2e2e6564 	.word	0x2e2e6564
  40cdfc:	000a0d2e 	.word	0x000a0d2e
  40ce00:	20746f47 	.word	0x20746f47
  40ce04:	69666977 	.word	0x69666977
  40ce08:	69737320 	.word	0x69737320
  40ce0c:	25203a64 	.word	0x25203a64
  40ce10:	70202c73 	.word	0x70202c73
  40ce14:	203a6b73 	.word	0x203a6b73
  40ce18:	0a0d7325 	.word	0x0a0d7325
  40ce1c:	00000000 	.word	0x00000000
  40ce20:	72617453 	.word	0x72617453
  40ce24:	69772074 	.word	0x69772074
  40ce28:	63206966 	.word	0x63206966
  40ce2c:	656e6e6f 	.word	0x656e6e6f
  40ce30:	73207463 	.word	0x73207463
  40ce34:	28646973 	.word	0x28646973
  40ce38:	2c297325 	.word	0x2c297325
  40ce3c:	6b737020 	.word	0x6b737020
  40ce40:	29732528 	.word	0x29732528
  40ce44:	000a0d2e 	.word	0x000a0d2e
  40ce48:	462d6957 	.word	0x462d6957
  40ce4c:	6f632069 	.word	0x6f632069
  40ce50:	63656e6e 	.word	0x63656e6e
  40ce54:	6f742074 	.word	0x6f742074
  40ce58:	6f6c4320 	.word	0x6f6c4320
  40ce5c:	4f206475 	.word	0x4f206475
  40ce60:	000a0d4b 	.word	0x000a0d4b
  40ce64:	462d6957 	.word	0x462d6957
  40ce68:	65722069 	.word	0x65722069
  40ce6c:	6e727574 	.word	0x6e727574
  40ce70:	74656720 	.word	0x74656720
  40ce74:	72617520 	.word	0x72617520
  40ce78:	66632074 	.word	0x66632074
  40ce7c:	4b4f2067 	.word	0x4b4f2067
  40ce80:	00000a0d 	.word	0x00000a0d
  40ce84:	20504455 	.word	0x20504455
  40ce88:	6b636170 	.word	0x6b636170
  40ce8c:	75207465 	.word	0x75207465
  40ce90:	6f6e6b6e 	.word	0x6f6e6b6e
  40ce94:	70206e77 	.word	0x70206e77
  40ce98:	656b6361 	.word	0x656b6361
  40ce9c:	0a0d2e74 	.word	0x0a0d2e74
  40cea0:	00000000 	.word	0x00000000
  40cea4:	6f727245 	.word	0x6f727245
  40cea8:	6f203a72 	.word	0x6f203a72
  40ceac:	6f207475 	.word	0x6f207475
  40ceb0:	656d2066 	.word	0x656d2066
  40ceb4:	79726f6d 	.word	0x79726f6d
  40ceb8:	000a0d2e 	.word	0x000a0d2e
  40cebc:	63205041 	.word	0x63205041
  40cec0:	46206e61 	.word	0x46206e61
  40cec4:	646e756f 	.word	0x646e756f
  40cec8:	000a0d2e 	.word	0x000a0d2e
  40cecc:	6e205041 	.word	0x6e205041
  40ced0:	4620746f 	.word	0x4620746f
  40ced4:	646e756f 	.word	0x646e756f
  40ced8:	000a0d2e 	.word	0x000a0d2e
  40cedc:	6f727245 	.word	0x6f727245
  40cee0:	55203a72 	.word	0x55203a72
  40cee4:	20545241 	.word	0x20545241
  40cee8:	656d6974 	.word	0x656d6974
  40ceec:	2e74756f 	.word	0x2e74756f
  40cef0:	00000a0d 	.word	0x00000a0d
  40cef4:	75736e55 	.word	0x75736e55
  40cef8:	726f7070 	.word	0x726f7070
  40cefc:	20646574 	.word	0x20646574
  40cf00:	6d6d6f63 	.word	0x6d6d6f63
  40cf04:	28646e61 	.word	0x28646e61
  40cf08:	2e296425 	.word	0x2e296425
  40cf0c:	00000a0d 	.word	0x00000a0d
  40cf10:	69726553 	.word	0x69726553
  40cf14:	49206c61 	.word	0x49206c61
  40cf18:	6425284e 	.word	0x6425284e
  40cf1c:	25203a29 	.word	0x25203a29
  40cf20:	000a0d73 	.word	0x000a0d73
  40cf24:	61766e49 	.word	0x61766e49
  40cf28:	2064696c 	.word	0x2064696c
  40cf2c:	64616568 	.word	0x64616568
  40cf30:	72207265 	.word	0x72207265
  40cf34:	69656365 	.word	0x69656365
  40cf38:	20646576 	.word	0x20646576
  40cf3c:	25783028 	.word	0x25783028
  40cf40:	0d2e2978 	.word	0x0d2e2978
  40cf44:	0000000a 	.word	0x0000000a
  40cf48:	61766e49 	.word	0x61766e49
  40cf4c:	2064696c 	.word	0x2064696c
  40cf50:	2c435243 	.word	0x2c435243
  40cf54:	63655220 	.word	0x63655220
  40cf58:	65766965 	.word	0x65766965
  40cf5c:	52432064 	.word	0x52432064
  40cf60:	78302843 	.word	0x78302843
  40cf64:	2c297825 	.word	0x2c297825
  40cf68:	6c614320 	.word	0x6c614320
  40cf6c:	616c7563 	.word	0x616c7563
  40cf70:	20646574 	.word	0x20646574
  40cf74:	28435243 	.word	0x28435243
  40cf78:	78257830 	.word	0x78257830
  40cf7c:	0a0d2e29 	.word	0x0a0d2e29
  40cf80:	00000000 	.word	0x00000000
  40cf84:	69666977 	.word	0x69666977
  40cf88:	206e695f 	.word	0x206e695f
  40cf8c:	6b736174 	.word	0x6b736174
  40cf90:	61747320 	.word	0x61747320
  40cf94:	64657472 	.word	0x64657472
  40cf98:	00000a0d 	.word	0x00000a0d
  40cf9c:	65746e65 	.word	0x65746e65
  40cfa0:	6f632072 	.word	0x6f632072
  40cfa4:	6769666e 	.word	0x6769666e
  40cfa8:	646f6d20 	.word	0x646f6d20
  40cfac:	000a0d65 	.word	0x000a0d65
  40cfb0:	65746e65 	.word	0x65746e65
  40cfb4:	65742072 	.word	0x65742072
  40cfb8:	63207473 	.word	0x63207473
  40cfbc:	616d6d6f 	.word	0x616d6d6f
  40cfc0:	6d20646e 	.word	0x6d20646e
  40cfc4:	0d65646f 	.word	0x0d65646f
  40cfc8:	0000000a 	.word	0x0000000a
  40cfcc:	66726570 	.word	0x66726570
  40cfd0:	206d726f 	.word	0x206d726f
  40cfd4:	666e6f63 	.word	0x666e6f63
  40cfd8:	6d206769 	.word	0x6d206769
  40cfdc:	0d65646f 	.word	0x0d65646f
  40cfe0:	0000000a 	.word	0x0000000a
  40cfe4:	66726570 	.word	0x66726570
  40cfe8:	206d726f 	.word	0x206d726f
  40cfec:	74736574 	.word	0x74736574
  40cff0:	6d6f6320 	.word	0x6d6f6320
  40cff4:	646e616d 	.word	0x646e616d
  40cff8:	646f6d20 	.word	0x646f6d20
  40cffc:	000a0d65 	.word	0x000a0d65
  40d000:	6e6f4378 	.word	0x6e6f4378
  40d004:	54676966 	.word	0x54676966
  40d008:	72656d69 	.word	0x72656d69
  40d00c:	00000000 	.word	0x00000000
  40d010:	6e6f4378 	.word	0x6e6f4378
  40d014:	54676966 	.word	0x54676966
  40d018:	72656d69 	.word	0x72656d69
  40d01c:	65726320 	.word	0x65726320
  40d020:	20657461 	.word	0x20657461
  40d024:	6c696166 	.word	0x6c696166
  40d028:	0d2e6465 	.word	0x0d2e6465
  40d02c:	0000000a 	.word	0x0000000a
  40d030:	64654c78 	.word	0x64654c78
  40d034:	656d6954 	.word	0x656d6954
  40d038:	00000072 	.word	0x00000072
  40d03c:	64654c78 	.word	0x64654c78
  40d040:	65646f4d 	.word	0x65646f4d
  40d044:	656d6954 	.word	0x656d6954
  40d048:	72632072 	.word	0x72632072
  40d04c:	65746165 	.word	0x65746165
  40d050:	69616620 	.word	0x69616620
  40d054:	2e64656c 	.word	0x2e64656c
  40d058:	00000a0d 	.word	0x00000a0d
  40d05c:	69726573 	.word	0x69726573
  40d060:	6f5f6c61 	.word	0x6f5f6c61
  40d064:	74207475 	.word	0x74207475
  40d068:	206b7361 	.word	0x206b7361
  40d06c:	72617473 	.word	0x72617473
  40d070:	0d646574 	.word	0x0d646574
  40d074:	0000000a 	.word	0x0000000a
  40d078:	69726553 	.word	0x69726553
  40d07c:	51206c61 	.word	0x51206c61
  40d080:	65756575 	.word	0x65756575
  40d084:	206e4920 	.word	0x206e4920
  40d088:	61657263 	.word	0x61657263
  40d08c:	66206574 	.word	0x66206574
  40d090:	656c6961 	.word	0x656c6961
  40d094:	000a0d64 	.word	0x000a0d64
  40d098:	69726553 	.word	0x69726553
  40d09c:	51206c61 	.word	0x51206c61
  40d0a0:	65756575 	.word	0x65756575
  40d0a4:	74754f20 	.word	0x74754f20
  40d0a8:	65726320 	.word	0x65726320
  40d0ac:	20657461 	.word	0x20657461
  40d0b0:	6c696166 	.word	0x6c696166
  40d0b4:	0a0d6465 	.word	0x0a0d6465
  40d0b8:	00000000 	.word	0x00000000
  40d0bc:	69666977 	.word	0x69666977
  40d0c0:	006e695f 	.word	0x006e695f
  40d0c4:	69726553 	.word	0x69726553
  40d0c8:	4f206c61 	.word	0x4f206c61
  40d0cc:	25285455 	.word	0x25285455
  40d0d0:	0a0d2964 	.word	0x0a0d2964
  40d0d4:	00000000 	.word	0x00000000
  40d0d8:	732f2e2e 	.word	0x732f2e2e
  40d0dc:	412f6372 	.word	0x412f6372
  40d0e0:	742f4653 	.word	0x742f4653
  40d0e4:	64726968 	.word	0x64726968
  40d0e8:	74726170 	.word	0x74726170
  40d0ec:	72662f79 	.word	0x72662f79
  40d0f0:	74726565 	.word	0x74726565
  40d0f4:	662f736f 	.word	0x662f736f
  40d0f8:	72656572 	.word	0x72656572
  40d0fc:	2d736f74 	.word	0x2d736f74
  40d100:	2e332e37 	.word	0x2e332e37
  40d104:	6f732f30 	.word	0x6f732f30
  40d108:	65637275 	.word	0x65637275
  40d10c:	726f702f 	.word	0x726f702f
  40d110:	6c626174 	.word	0x6c626174
  40d114:	656d2f65 	.word	0x656d2f65
  40d118:	6e616d6d 	.word	0x6e616d6d
  40d11c:	65682f67 	.word	0x65682f67
  40d120:	345f7061 	.word	0x345f7061
  40d124:	0000632e 	.word	0x0000632e
  40d128:	732f2e2e 	.word	0x732f2e2e
  40d12c:	412f6372 	.word	0x412f6372
  40d130:	742f4653 	.word	0x742f4653
  40d134:	64726968 	.word	0x64726968
  40d138:	74726170 	.word	0x74726170
  40d13c:	72662f79 	.word	0x72662f79
  40d140:	74726565 	.word	0x74726565
  40d144:	662f736f 	.word	0x662f736f
  40d148:	72656572 	.word	0x72656572
  40d14c:	2d736f74 	.word	0x2d736f74
  40d150:	2e332e37 	.word	0x2e332e37
  40d154:	6f732f30 	.word	0x6f732f30
  40d158:	65637275 	.word	0x65637275
  40d15c:	6575712f 	.word	0x6575712f
  40d160:	632e6575 	.word	0x632e6575
  40d164:	00000000 	.word	0x00000000
  40d168:	732f2e2e 	.word	0x732f2e2e
  40d16c:	412f6372 	.word	0x412f6372
  40d170:	742f4653 	.word	0x742f4653
  40d174:	64726968 	.word	0x64726968
  40d178:	74726170 	.word	0x74726170
  40d17c:	72662f79 	.word	0x72662f79
  40d180:	74726565 	.word	0x74726565
  40d184:	662f736f 	.word	0x662f736f
  40d188:	72656572 	.word	0x72656572
  40d18c:	2d736f74 	.word	0x2d736f74
  40d190:	2e332e37 	.word	0x2e332e37
  40d194:	6f732f30 	.word	0x6f732f30
  40d198:	65637275 	.word	0x65637275
  40d19c:	7361742f 	.word	0x7361742f
  40d1a0:	632e736b 	.word	0x632e736b
  40d1a4:	00000000 	.word	0x00000000
  40d1a8:	454c4449 	.word	0x454c4449
  40d1ac:	00000000 	.word	0x00000000
  40d1b0:	00000a0d 	.word	0x00000a0d
  40d1b4:	09097325 	.word	0x09097325
  40d1b8:	25096325 	.word	0x25096325
  40d1bc:	75250975 	.word	0x75250975
  40d1c0:	0d752509 	.word	0x0d752509
  40d1c4:	0000000a 	.word	0x0000000a
  40d1c8:	09097325 	.word	0x09097325
  40d1cc:	30090930 	.word	0x30090930
  40d1d0:	0a0d2525 	.word	0x0a0d2525
  40d1d4:	00000000 	.word	0x00000000
  40d1d8:	09097325 	.word	0x09097325
  40d1dc:	09097525 	.word	0x09097525
  40d1e0:	25257525 	.word	0x25257525
  40d1e4:	00000a0d 	.word	0x00000a0d
  40d1e8:	09097325 	.word	0x09097325
  40d1ec:	09097525 	.word	0x09097525
  40d1f0:	2525313c 	.word	0x2525313c
  40d1f4:	00000a0d 	.word	0x00000a0d

0040d1f8 <ucExpectedStackBytes.6044>:
  40d1f8:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
  40d208:	a5a5a5a5 20726d54 00637653 732f2e2e     ....Tmr Svc.../s
  40d218:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
  40d228:	72662f79 74726565 662f736f 72656572     y/freertos/freer
  40d238:	2d736f74 2e332e37 6f732f30 65637275     tos-7.3.0/source
  40d248:	6d69742f 2e737265 00000063 78323025     /timers.c...%02x
  40d258:	00000020 78323025 00000a0d 6c696146      ...%02x....Fail
  40d268:	74206465 7263206f 65746165 6d655320     ed to create Sem
  40d278:	6f687061 203a6572 72617473 6d614374     aphore: startCam
  40d288:	50617265 65636f72 6e697373 0a0d2067     eraProcessing ..
  40d298:	00000000 65636552 20657669 61746164     ....Receive data
  40d2a8:	6e656c20 0d64253d 0000000a 00000a0d      len=%d.........
  40d2b8:	204b4341 6d617266 6e692065 4f207469     ACK frame init O
  40d2c8:	000a0d4b 204b4341 6d617266 65672065     K...ACK frame ge
  40d2d8:	6e732074 68737061 4f20746f 000a0d4b     t snapshot OK...
  40d2e8:	20746547 61746164 6f6c6220 69206b63     Get data block i
  40d2f8:	4b4f2073 7a697320 64253d65 00000a0d     s OK size=%d....
  40d308:	73696854 6f6c6220 64206b63 20617461     This block data 
  40d318:	6e207369 6620746f 0d6c6c75 0000000a     is not full.....
  40d328:	646e6573 74616420 6c622061 206b636f     send data block 
  40d338:	0d74756f 0000000a 69207469 20612073     out.....it is a 
  40d348:	68676968 65707320 64206465 63697665     high speed devic
  40d358:	000a0d65 69207469 20612073 6c6c7566     e...it is a full
  40d368:	65707320 64206465 63697665 000a0d65      speed device...
  40d378:	69207469 20612073 20776f6c 65657073     it is a low spee
  40d388:	65642064 65636976 00000a0d 0001c200     d device........
  40d398:	00080000 635f6975 725f6d6f 74735f78     ....ui_com_rx_st
  40d3a8:	0d747261 0000000a 635f6975 745f6d6f     art.....ui_com_t
  40d3b8:	74735f78 0d747261 0000000a              x_start.....

0040d3c4 <p_CRCtbl>:
  40d3c4:	aa7fd500 54812bfe 8356fc29 7da802d7     .....+.T).V....}
  40d3d4:	f82d8752 06d379ac d104ae7b 2ffa5085     R.-..y..{....P./
  40d3e4:	0edb71a4 f0258f5a 27f2588d d90ca673     .q..Z.%..X.'s...
  40d3f4:	5c8923f6 a277dd08 75a00adf 8b5ef421     .#.\..w....u!.^.
  40d404:	37e2489d c91cb663 1ecb61b4 e0359f4a     .H.7c....a..J.5.
  40d414:	65b01acf 9b4ee431 4c9933e6 b267cd18     ...e1.N..3.L..g.
  40d424:	9346ec39 6db812c7 ba6fc510 44913bee     9.F....m..o..;.D
  40d434:	c114be6b 3fea4095 e83d9742 16c369bc     k....@.?B.=..i..
  40d444:	45903aef bb6ec411 6cb913c6 9247ed38     .:.E..n....l8.G.
  40d454:	17c268bd e93c9643 3eeb4194 c015bf6a     .h..C.<..A.>j...
  40d464:	e1349e4b 1fca60b5 c81db762 36e3499c     K.4..`..b....I.6
  40d474:	b366cc19 4d9832e7 9a4fe530 64b11bce     ..f..2.M0.O....d
  40d484:	d80da772 26f3598c f1248e5b 0fda70a5     r....Y.&[.$..p..
  40d494:	8a5ff520 74a10bde a376dc09 5d8822f7      ._....t..v..".]
  40d4a4:	7ca903d6 8257fd28 55802aff ab7ed401     ...|(.W..*.U..~.
  40d4b4:	2efb5184 d005af7a 07d278ad f92c8653     .Q..z....x..S.,.
  40d4c4:	63617473 766f206b 6c667265 0a0d776f     stack overflow..
  40d4d4:	00000000 732f2e2e 6d2f6372 2e6e6961     ....../src/main.
  40d4e4:	00000063 0001c200 000000c0 00000800     c...............
  40d4f4:	00000000 6f492d2d 61442054 6e696b61     ....--IoT Daakin
  40d504:	20315620 0a0d2d2d 53202d2d 35474d41      V1 --..-- SAMG5
  40d514:	50585f35 4e49414c 505f4445 2d204f52     5_XPLAINED_PRO -
  40d524:	2d0a0d2d 6f43202d 6c69706d 203a6465     -..-- Compiled: 
  40d534:	20636544 32203432 20363130 313a3032     Dec 24 2016 20:1
  40d544:	34343a35 0d2d2d20 00000000 69666957     5:44 --.....Wifi
  40d554:	00000000 6c696146 74206465 7263206f     ....Failed to cr
  40d564:	65746165 73617420 6669576b 61742069     eate taskWifi ta
  40d574:	0a0d6b73 00000000 656d6143 00006172     sk......Camera..
  40d584:	6c696146 74206465 7263206f 65746165     Failed to create
  40d594:	6e6f4d20 726f7469 73617420 000a0d6b      Monitor task...
  40d5a4:	00000043                                C...

0040d5a8 <_global_impure_ptr>:
  40d5a8:	20000160 0000000a                       `.. ....

0040d5b0 <zeroes.6869>:
  40d5b0:	30303030 30303030 30303030 30303030     0000000000000000
  40d5c0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40d5d0:	00000000 33323130 37363534 62613938     ....0123456789ab
  40d5e0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

0040d5f0 <blanks.6868>:
  40d5f0:	20202020 20202020 20202020 20202020                     

0040d600 <_init>:
  40d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d602:	bf00      	nop
  40d604:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40d606:	bc08      	pop	{r3}
  40d608:	469e      	mov	lr, r3
  40d60a:	4770      	bx	lr

0040d60c <__init_array_start>:
  40d60c:	0040b8d9 	.word	0x0040b8d9

0040d610 <__frame_dummy_init_array_entry>:
  40d610:	0040016d                                m.@.

0040d614 <_fini>:
  40d614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d616:	bf00      	nop
  40d618:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40d61a:	bc08      	pop	{r3}
  40d61c:	469e      	mov	lr, r3
  40d61e:	4770      	bx	lr

0040d620 <__fini_array_start>:
  40d620:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:

// Delay loop is put to SRAM so that FWS will not affect delay time
OPTIMIZE_HIGH
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
20000000:	b480      	push	{r7}
20000002:	b083      	sub	sp, #12
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]

20000008 <loop>:
	UNUSED(n);

	__asm (
20000008:	f3bf 8f5f 	dmb	sy
2000000c:	3801      	subs	r0, #1
2000000e:	d1fb      	bne.n	20000008 <loop>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000010:	370c      	adds	r7, #12
20000012:	46bd      	mov	sp, r7
20000014:	f85d 7b04 	ldr.w	r7, [sp], #4
20000018:	4770      	bx	lr
2000001a:	bf00      	nop

2000001c <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2000001c:	b480      	push	{r7}
2000001e:	b089      	sub	sp, #36	; 0x24
20000020:	af00      	add	r7, sp, #0
20000022:	60f8      	str	r0, [r7, #12]
20000024:	60b9      	str	r1, [r7, #8]
20000026:	607a      	str	r2, [r7, #4]
20000028:	603b      	str	r3, [r7, #0]
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || \
	   SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAMS70 || SAME70)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000002a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000002e:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000030:	683b      	ldr	r3, [r7, #0]
20000032:	2b00      	cmp	r3, #0
20000034:	d101      	bne.n	2000003a <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
20000036:	2302      	movs	r3, #2
20000038:	e03c      	b.n	200000b4 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000003a:	68fb      	ldr	r3, [r7, #12]
2000003c:	681b      	ldr	r3, [r3, #0]
2000003e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000042:	68fb      	ldr	r3, [r7, #12]
20000044:	601a      	str	r2, [r3, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000046:	68bb      	ldr	r3, [r7, #8]
20000048:	b2db      	uxtb	r3, r3
2000004a:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
2000004e:	68fb      	ldr	r3, [r7, #12]
20000050:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000052:	68fb      	ldr	r3, [r7, #12]
20000054:	689b      	ldr	r3, [r3, #8]
20000056:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000058:	697b      	ldr	r3, [r7, #20]
2000005a:	f003 0301 	and.w	r3, r3, #1
2000005e:	2b00      	cmp	r3, #0
20000060:	d1f7      	bne.n	20000052 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000062:	2300      	movs	r3, #0
20000064:	61fb      	str	r3, [r7, #28]
20000066:	e00c      	b.n	20000082 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000068:	69fb      	ldr	r3, [r7, #28]
2000006a:	009b      	lsls	r3, r3, #2
2000006c:	683a      	ldr	r2, [r7, #0]
2000006e:	4413      	add	r3, r2
20000070:	69fa      	ldr	r2, [r7, #28]
20000072:	0092      	lsls	r2, r2, #2
20000074:	69b9      	ldr	r1, [r7, #24]
20000076:	440a      	add	r2, r1
20000078:	6812      	ldr	r2, [r2, #0]
2000007a:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000007c:	69fb      	ldr	r3, [r7, #28]
2000007e:	3301      	adds	r3, #1
20000080:	61fb      	str	r3, [r7, #28]
20000082:	69fa      	ldr	r2, [r7, #28]
20000084:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000086:	429a      	cmp	r2, r3
20000088:	d3ee      	bcc.n	20000068 <efc_perform_read_sequence+0x4c>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000008a:	687b      	ldr	r3, [r7, #4]
2000008c:	b2db      	uxtb	r3, r3

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000008e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000096:	68fb      	ldr	r3, [r7, #12]
20000098:	689b      	ldr	r3, [r3, #8]
2000009a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000009c:	697b      	ldr	r3, [r7, #20]
2000009e:	f003 0301 	and.w	r3, r3, #1
200000a2:	2b00      	cmp	r3, #0
200000a4:	d0f7      	beq.n	20000096 <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
200000a6:	68fb      	ldr	r3, [r7, #12]
200000a8:	681b      	ldr	r3, [r3, #0]
200000aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200000ae:	68fb      	ldr	r3, [r7, #12]
200000b0:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200000b2:	2300      	movs	r3, #0
}
200000b4:	4618      	mov	r0, r3
200000b6:	3724      	adds	r7, #36	; 0x24
200000b8:	46bd      	mov	sp, r7
200000ba:	f85d 7b04 	ldr.w	r7, [sp], #4
200000be:	4770      	bx	lr

200000c0 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000c0:	b480      	push	{r7}
200000c2:	b083      	sub	sp, #12
200000c4:	af00      	add	r7, sp, #0
200000c6:	6078      	str	r0, [r7, #4]
200000c8:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	683a      	ldr	r2, [r7, #0]
200000ce:	601a      	str	r2, [r3, #0]
}
200000d0:	370c      	adds	r7, #12
200000d2:	46bd      	mov	sp, r7
200000d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200000d8:	4770      	bx	lr
200000da:	bf00      	nop

200000dc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000dc:	b480      	push	{r7}
200000de:	b085      	sub	sp, #20
200000e0:	af00      	add	r7, sp, #0
200000e2:	6078      	str	r0, [r7, #4]
200000e4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000e6:	687b      	ldr	r3, [r7, #4]
200000e8:	683a      	ldr	r2, [r7, #0]
200000ea:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000ec:	687b      	ldr	r3, [r7, #4]
200000ee:	689b      	ldr	r3, [r3, #8]
200000f0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000f2:	68fb      	ldr	r3, [r7, #12]
200000f4:	f003 0301 	and.w	r3, r3, #1
200000f8:	2b00      	cmp	r3, #0
200000fa:	d0f7      	beq.n	200000ec <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000fc:	68fb      	ldr	r3, [r7, #12]
200000fe:	f003 030e 	and.w	r3, r3, #14
}
20000102:	4618      	mov	r0, r3
20000104:	3714      	adds	r7, #20
20000106:	46bd      	mov	sp, r7
20000108:	f85d 7b04 	ldr.w	r7, [sp], #4
2000010c:	4770      	bx	lr
2000010e:	bf00      	nop

20000110 <led_blinking_mode>:
20000110:	0002 0000                                   ....

20000114 <resp_out_data.9520>:
20000114:	1258 2000                                   X.. 

20000118 <button_mode.9630>:
20000118:	0001 0000                                   ....

2000011c <uxCriticalNesting>:
2000011c:	aaaa aaaa                                   ....

20000120 <xFreeBytesRemaining>:
20000120:	8000 0001                                   ....

20000124 <xNextTaskUnblockTime>:
20000124:	ffff ffff                                   ....

20000128 <ui_enum_status>:
20000128:	0007 0000                                   ....

2000012c <uhc_uhis>:
2000012c:	42ed 0040 4709 0040 4739 0040 4765 0040     .B@..G@.9G@.eG@.

2000013c <g_interrupt_enabled>:
2000013c:	0001 0000                                   ....

20000140 <SystemCoreClock>:
20000140:	1200 007a                                   ..z.

20000144 <usart_options>:
20000144:	c200 0001 00c0 0000 0800 0000 0000 0000     ................
	...

20000160 <impure_data>:
20000160:	0000 0000 044c 2000 04b4 2000 051c 2000     ....L.. ... ... 
	...
20000194:	d5a4 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
20000208:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000218:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000588 <_impure_ptr>:
20000588:	0160 2000                                   `.. 

2000058c <__malloc_av_>:
	...
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 

20000994 <__malloc_trim_threshold>:
20000994:	0000 0002                                   ....

20000998 <__malloc_sbrk_base>:
20000998:	ffff ffff                                   ....

2000099c <lc_ctype_charset>:
2000099c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200009bc <__mb_cur_max>:
200009bc:	0001 0000                                   ....

200009c0 <__wctomb>:
200009c0:	c9fd 0040                                   ..@.
