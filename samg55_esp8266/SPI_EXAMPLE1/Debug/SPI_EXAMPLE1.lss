
SPI_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005fe0  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405fe0  00405fe0  0000dfe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000904  20000000  00405fe8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000128  20000904  004068ec  00010904  2**2
                  ALLOC
  4 .stack        00003004  20000a2c  00406a14  00010904  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00010904  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010932  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000a7c5  00000000  00000000  0001098d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f8a  00000000  00000000  0001b152  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003e2a  00000000  00000000  0001d0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000878  00000000  00000000  00020f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000790  00000000  00000000  0002177e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00014368  00000000  00000000  00021f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000aaf5  00000000  00000000  00036276  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000515d1  00000000  00000000  00040d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002360  00000000  00000000  0009233c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003a30 	.word	0x20003a30
  400004:	00400961 	.word	0x00400961
  400008:	0040095d 	.word	0x0040095d
  40000c:	0040095d 	.word	0x0040095d
  400010:	0040095d 	.word	0x0040095d
  400014:	0040095d 	.word	0x0040095d
  400018:	0040095d 	.word	0x0040095d
	...
  40002c:	0040095d 	.word	0x0040095d
  400030:	0040095d 	.word	0x0040095d
  400034:	00000000 	.word	0x00000000
  400038:	0040095d 	.word	0x0040095d
  40003c:	0040095d 	.word	0x0040095d
  400040:	0040095d 	.word	0x0040095d
  400044:	0040095d 	.word	0x0040095d
  400048:	0040095d 	.word	0x0040095d
  40004c:	0040095d 	.word	0x0040095d
  400050:	0040095d 	.word	0x0040095d
  400054:	0040095d 	.word	0x0040095d
  400058:	0040095d 	.word	0x0040095d
  40005c:	0040095d 	.word	0x0040095d
  400060:	0040095d 	.word	0x0040095d
  400064:	0040095d 	.word	0x0040095d
  400068:	00000000 	.word	0x00000000
  40006c:	0040095d 	.word	0x0040095d
  400070:	0040095d 	.word	0x0040095d
  400074:	0040095d 	.word	0x0040095d
  400078:	0040095d 	.word	0x0040095d
  40007c:	0040095d 	.word	0x0040095d
  400080:	0040095d 	.word	0x0040095d
  400084:	0040095d 	.word	0x0040095d
  400088:	0040095d 	.word	0x0040095d
  40008c:	0040095d 	.word	0x0040095d
  400090:	0040095d 	.word	0x0040095d
  400094:	00400f69 	.word	0x00400f69
  400098:	0040095d 	.word	0x0040095d
  40009c:	0040095d 	.word	0x0040095d
  4000a0:	0040095d 	.word	0x0040095d
  4000a4:	0040095d 	.word	0x0040095d
  4000a8:	0040095d 	.word	0x0040095d
  4000ac:	0040095d 	.word	0x0040095d
  4000b0:	0040095d 	.word	0x0040095d
  4000b4:	0040095d 	.word	0x0040095d
  4000b8:	0040095d 	.word	0x0040095d
	...
  4000fc:	0040095d 	.word	0x0040095d
  400100:	0040095d 	.word	0x0040095d
  400104:	0040095d 	.word	0x0040095d
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20000904 	.word	0x20000904
  400164:	00000000 	.word	0x00000000
  400168:	00405fe8 	.word	0x00405fe8

0040016c <frame_dummy>:
  40016c:	4b08      	ldr	r3, [pc, #32]	; (400190 <frame_dummy+0x24>)
  40016e:	b510      	push	{r4, lr}
  400170:	b11b      	cbz	r3, 40017a <frame_dummy+0xe>
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x28>)
  400174:	4908      	ldr	r1, [pc, #32]	; (400198 <frame_dummy+0x2c>)
  400176:	f3af 8000 	nop.w
  40017a:	4808      	ldr	r0, [pc, #32]	; (40019c <frame_dummy+0x30>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b903      	cbnz	r3, 400182 <frame_dummy+0x16>
  400180:	bd10      	pop	{r4, pc}
  400182:	4b07      	ldr	r3, [pc, #28]	; (4001a0 <frame_dummy+0x34>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0fb      	beq.n	400180 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	bf00      	nop
  400190:	00000000 	.word	0x00000000
  400194:	00405fe8 	.word	0x00405fe8
  400198:	20000908 	.word	0x20000908
  40019c:	00405fe8 	.word	0x00405fe8
  4001a0:	00000000 	.word	0x00000000

004001a4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  4001a4:	b510      	push	{r4, lr}
  4001a6:	b0a2      	sub	sp, #136	; 0x88
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001a8:	4818      	ldr	r0, [pc, #96]	; (40020c <sysclk_init+0x68>)
  4001aa:	4b19      	ldr	r3, [pc, #100]	; (400210 <sysclk_init+0x6c>)
  4001ac:	4798      	blx	r3
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001ae:	2000      	movs	r0, #0
  4001b0:	4b18      	ldr	r3, [pc, #96]	; (400214 <sysclk_init+0x70>)
  4001b2:	4798      	blx	r3
	case OSC_SLCK_32K_RC:
		return 1;

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4001b4:	4c18      	ldr	r4, [pc, #96]	; (400218 <sysclk_init+0x74>)
  4001b6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001b8:	2800      	cmp	r0, #0
  4001ba:	d0fc      	beq.n	4001b6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001bc:	4b17      	ldr	r3, [pc, #92]	; (40021c <sysclk_init+0x78>)
  4001be:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  4001c0:	4a17      	ldr	r2, [pc, #92]	; (400220 <sysclk_init+0x7c>)
  4001c2:	4b18      	ldr	r3, [pc, #96]	; (400224 <sysclk_init+0x80>)
  4001c4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4001c6:	4c18      	ldr	r4, [pc, #96]	; (400228 <sysclk_init+0x84>)
  4001c8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001ca:	2800      	cmp	r0, #0
  4001cc:	d0fc      	beq.n	4001c8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001ce:	2000      	movs	r0, #0
  4001d0:	4b16      	ldr	r3, [pc, #88]	; (40022c <sysclk_init+0x88>)
  4001d2:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001d4:	4b16      	ldr	r3, [pc, #88]	; (400230 <sysclk_init+0x8c>)
  4001d6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001d8:	4816      	ldr	r0, [pc, #88]	; (400234 <sysclk_init+0x90>)
  4001da:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x6c>)
  4001dc:	4798      	blx	r3
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  4001de:	4b16      	ldr	r3, [pc, #88]	; (400238 <sysclk_init+0x94>)
  4001e0:	681a      	ldr	r2, [r3, #0]
  4001e2:	4b16      	ldr	r3, [pc, #88]	; (40023c <sysclk_init+0x98>)
  4001e4:	4413      	add	r3, r2
  4001e6:	4a16      	ldr	r2, [pc, #88]	; (400240 <sysclk_init+0x9c>)
  4001e8:	4293      	cmp	r3, r2
  4001ea:	d80c      	bhi.n	400206 <sysclk_init+0x62>
	(SystemCoreClock >= (CHIP_FREQ_CPU_MAX - (CHIP_FREQ_CPU_MAX >> 3)))) {
		/* Get the trim value from unique ID area */
		efc_perform_read_sequence(EFC, EFC_FCMD_STUI, EFC_FCMD_SPUI,
  4001ec:	2320      	movs	r3, #32
  4001ee:	9300      	str	r3, [sp, #0]
  4001f0:	4814      	ldr	r0, [pc, #80]	; (400244 <sysclk_init+0xa0>)
  4001f2:	210e      	movs	r1, #14
  4001f4:	220f      	movs	r2, #15
  4001f6:	ab02      	add	r3, sp, #8
  4001f8:	4c13      	ldr	r4, [pc, #76]	; (400248 <sysclk_init+0xa4>)
  4001fa:	47a0      	blx	r4
		unique_id, 32);

		trim_value = unique_id[16] & 0x0000FFFF;
		supc_set_regulator_trim_user(SUPC, trim_value);
  4001fc:	4813      	ldr	r0, [pc, #76]	; (40024c <sysclk_init+0xa8>)
  4001fe:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
  400202:	4b13      	ldr	r3, [pc, #76]	; (400250 <sysclk_init+0xac>)
  400204:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400206:	b022      	add	sp, #136	; 0x88
  400208:	bd10      	pop	{r4, pc}
  40020a:	bf00      	nop
  40020c:	07270e00 	.word	0x07270e00
  400210:	00400b2d 	.word	0x00400b2d
  400214:	004005f1 	.word	0x004005f1
  400218:	00400615 	.word	0x00400615
  40021c:	00400635 	.word	0x00400635
  400220:	0e4d3f01 	.word	0x0e4d3f01
  400224:	400e0400 	.word	0x400e0400
  400228:	00400641 	.word	0x00400641
  40022c:	00400589 	.word	0x00400589
  400230:	00400a45 	.word	0x00400a45
  400234:	07270000 	.word	0x07270000
  400238:	2000008c 	.word	0x2000008c
  40023c:	f9bdd3c0 	.word	0xf9bdd3c0
  400240:	01c9c380 	.word	0x01c9c380
  400244:	400e0a00 	.word	0x400e0a00
  400248:	20000001 	.word	0x20000001
  40024c:	400e1410 	.word	0x400e1410
  400250:	00400825 	.word	0x00400825

00400254 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400254:	b9a8      	cbnz	r0, 400282 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40025a:	460c      	mov	r4, r1
  40025c:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40025e:	2a00      	cmp	r2, #0
  400260:	dd0a      	ble.n	400278 <_read+0x24>
  400262:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400264:	4e08      	ldr	r6, [pc, #32]	; (400288 <_read+0x34>)
  400266:	4d09      	ldr	r5, [pc, #36]	; (40028c <_read+0x38>)
  400268:	6830      	ldr	r0, [r6, #0]
  40026a:	4621      	mov	r1, r4
  40026c:	682b      	ldr	r3, [r5, #0]
  40026e:	4798      	blx	r3
		ptr++;
  400270:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400272:	42bc      	cmp	r4, r7
  400274:	d1f8      	bne.n	400268 <_read+0x14>
  400276:	e001      	b.n	40027c <_read+0x28>
  400278:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  40027c:	4640      	mov	r0, r8
  40027e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400282:	f04f 30ff 	mov.w	r0, #4294967295
  400286:	4770      	bx	lr
  400288:	20000a24 	.word	0x20000a24
  40028c:	20000a1c 	.word	0x20000a1c

00400290 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400290:	3801      	subs	r0, #1
  400292:	2802      	cmp	r0, #2
  400294:	d818      	bhi.n	4002c8 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40029a:	460e      	mov	r6, r1
  40029c:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40029e:	b182      	cbz	r2, 4002c2 <_write+0x32>
  4002a0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4002a2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002dc <_write+0x4c>
  4002a6:	4f0c      	ldr	r7, [pc, #48]	; (4002d8 <_write+0x48>)
  4002a8:	f8d8 0000 	ldr.w	r0, [r8]
  4002ac:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002b0:	683b      	ldr	r3, [r7, #0]
  4002b2:	4798      	blx	r3
  4002b4:	2800      	cmp	r0, #0
  4002b6:	db0a      	blt.n	4002ce <_write+0x3e>
  4002b8:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4002ba:	3c01      	subs	r4, #1
  4002bc:	d1f4      	bne.n	4002a8 <_write+0x18>
  4002be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c2:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4002c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4002c8:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4002cc:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4002ce:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002d6:	bf00      	nop
  4002d8:	20000a20 	.word	0x20000a20
  4002dc:	20000a24 	.word	0x20000a24

004002e0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
  4002e0:	b538      	push	{r3, r4, r5, lr}

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002e2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  4002e6:	4b44      	ldr	r3, [pc, #272]	; (4003f8 <system_board_init+0x118>)
  4002e8:	605c      	str	r4, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002ea:	200b      	movs	r0, #11
  4002ec:	4d43      	ldr	r5, [pc, #268]	; (4003fc <system_board_init+0x11c>)
  4002ee:	47a8      	blx	r5
  4002f0:	200c      	movs	r0, #12
  4002f2:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002f4:	4b42      	ldr	r3, [pc, #264]	; (400400 <system_board_init+0x120>)
  4002f6:	2240      	movs	r2, #64	; 0x40
  4002f8:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002fe:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400300:	2204      	movs	r2, #4
  400302:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400304:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400308:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40030a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40030e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400310:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400316:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400318:	f022 0204 	bic.w	r2, r2, #4
  40031c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40031e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400320:	f022 0204 	bic.w	r2, r2, #4
  400324:	675a      	str	r2, [r3, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400326:	2202      	movs	r2, #2
  400328:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40032a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40032c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400330:	4934      	ldr	r1, [pc, #208]	; (400404 <system_board_init+0x124>)
  400332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400336:	630a      	str	r2, [r1, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400338:	610a      	str	r2, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40033a:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40033e:	630c      	str	r4, [r1, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400340:	610c      	str	r4, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400342:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400346:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40034a:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40034c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400350:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400352:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400354:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  400358:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40035a:	4308      	orrs	r0, r1
  40035c:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40035e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400360:	f020 50c0 	bic.w	r0, r0, #402653184	; 0x18000000
  400364:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400366:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400368:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40036c:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40036e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400372:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400374:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400376:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40037a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40037c:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
  400380:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400382:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400384:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
  400388:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40038a:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40038c:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40038e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400392:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400394:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40039a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40039c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4003a0:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003a2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003a4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4003a8:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003aa:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4003b0:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003b6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003b8:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003be:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003c0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  4003c4:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003c6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003c8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  4003cc:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ce:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003d4:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003da:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003dc:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003e4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003e8:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003ea:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003ec:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003f0:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f2:	605a      	str	r2, [r3, #4]
  4003f4:	bd38      	pop	{r3, r4, r5, pc}
  4003f6:	bf00      	nop
  4003f8:	400e1450 	.word	0x400e1450
  4003fc:	00400651 	.word	0x00400651
  400400:	400e0e00 	.word	0x400e0e00
  400404:	400e1000 	.word	0x400e1000

00400408 <flexcom_enable>:
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  400408:	b508      	push	{r3, lr}
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40040a:	4b50      	ldr	r3, [pc, #320]	; (40054c <flexcom_enable+0x144>)
  40040c:	781b      	ldrb	r3, [r3, #0]
  40040e:	2bff      	cmp	r3, #255	; 0xff
  400410:	d100      	bne.n	400414 <flexcom_enable+0xc>
  400412:	e7fe      	b.n	400412 <flexcom_enable+0xa>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400414:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400418:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40041a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40041e:	2100      	movs	r1, #0
  400420:	4a4b      	ldr	r2, [pc, #300]	; (400550 <flexcom_enable+0x148>)
  400422:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400424:	4949      	ldr	r1, [pc, #292]	; (40054c <flexcom_enable+0x144>)
  400426:	780a      	ldrb	r2, [r1, #0]
  400428:	3201      	adds	r2, #1
  40042a:	700a      	strb	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40042c:	b92b      	cbnz	r3, 40043a <flexcom_enable+0x32>
		cpu_irq_enable();
  40042e:	2201      	movs	r2, #1
  400430:	4b47      	ldr	r3, [pc, #284]	; (400550 <flexcom_enable+0x148>)
  400432:	701a      	strb	r2, [r3, #0]
  400434:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400438:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  40043a:	4a46      	ldr	r2, [pc, #280]	; (400554 <flexcom_enable+0x14c>)
  40043c:	4290      	cmp	r0, r2
  40043e:	d10d      	bne.n	40045c <flexcom_enable+0x54>
  400440:	2007      	movs	r0, #7
  400442:	4b45      	ldr	r3, [pc, #276]	; (400558 <flexcom_enable+0x150>)
  400444:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  400446:	2007      	movs	r0, #7
  400448:	4b44      	ldr	r3, [pc, #272]	; (40055c <flexcom_enable+0x154>)
  40044a:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  40044c:	2007      	movs	r0, #7
  40044e:	2100      	movs	r1, #0
  400450:	4b43      	ldr	r3, [pc, #268]	; (400560 <flexcom_enable+0x158>)
  400452:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  400454:	2007      	movs	r0, #7
  400456:	4b43      	ldr	r3, [pc, #268]	; (400564 <flexcom_enable+0x15c>)
  400458:	4798      	blx	r3
  40045a:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM6
	if (p_flexcom == FLEXCOM6) {
  40045c:	4a42      	ldr	r2, [pc, #264]	; (400568 <flexcom_enable+0x160>)
  40045e:	4290      	cmp	r0, r2
  400460:	d10d      	bne.n	40047e <flexcom_enable+0x76>
  400462:	2016      	movs	r0, #22
  400464:	4b3c      	ldr	r3, [pc, #240]	; (400558 <flexcom_enable+0x150>)
  400466:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  400468:	2007      	movs	r0, #7
  40046a:	4b3c      	ldr	r3, [pc, #240]	; (40055c <flexcom_enable+0x154>)
  40046c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  40046e:	2007      	movs	r0, #7
  400470:	2100      	movs	r1, #0
  400472:	4b3b      	ldr	r3, [pc, #236]	; (400560 <flexcom_enable+0x158>)
  400474:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  400476:	2007      	movs	r0, #7
  400478:	4b3a      	ldr	r3, [pc, #232]	; (400564 <flexcom_enable+0x15c>)
  40047a:	4798      	blx	r3
  40047c:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM5
	if (p_flexcom == FLEXCOM5) {
  40047e:	4a3b      	ldr	r2, [pc, #236]	; (40056c <flexcom_enable+0x164>)
  400480:	4290      	cmp	r0, r2
  400482:	d10d      	bne.n	4004a0 <flexcom_enable+0x98>
  400484:	2015      	movs	r0, #21
  400486:	4b34      	ldr	r3, [pc, #208]	; (400558 <flexcom_enable+0x150>)
  400488:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  40048a:	2007      	movs	r0, #7
  40048c:	4b33      	ldr	r3, [pc, #204]	; (40055c <flexcom_enable+0x154>)
  40048e:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  400490:	2007      	movs	r0, #7
  400492:	2100      	movs	r1, #0
  400494:	4b32      	ldr	r3, [pc, #200]	; (400560 <flexcom_enable+0x158>)
  400496:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  400498:	2007      	movs	r0, #7
  40049a:	4b32      	ldr	r3, [pc, #200]	; (400564 <flexcom_enable+0x15c>)
  40049c:	4798      	blx	r3
  40049e:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM4
	if (p_flexcom == FLEXCOM4) {
  4004a0:	4a33      	ldr	r2, [pc, #204]	; (400570 <flexcom_enable+0x168>)
  4004a2:	4290      	cmp	r0, r2
  4004a4:	d10d      	bne.n	4004c2 <flexcom_enable+0xba>
  4004a6:	2014      	movs	r0, #20
  4004a8:	4b2b      	ldr	r3, [pc, #172]	; (400558 <flexcom_enable+0x150>)
  4004aa:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  4004ac:	2007      	movs	r0, #7
  4004ae:	4b2b      	ldr	r3, [pc, #172]	; (40055c <flexcom_enable+0x154>)
  4004b0:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4004b2:	2007      	movs	r0, #7
  4004b4:	2100      	movs	r1, #0
  4004b6:	4b2a      	ldr	r3, [pc, #168]	; (400560 <flexcom_enable+0x158>)
  4004b8:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4004ba:	2007      	movs	r0, #7
  4004bc:	4b29      	ldr	r3, [pc, #164]	; (400564 <flexcom_enable+0x15c>)
  4004be:	4798      	blx	r3
  4004c0:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM3
	if (p_flexcom == FLEXCOM3) {
  4004c2:	4a2c      	ldr	r2, [pc, #176]	; (400574 <flexcom_enable+0x16c>)
  4004c4:	4290      	cmp	r0, r2
  4004c6:	d10d      	bne.n	4004e4 <flexcom_enable+0xdc>
  4004c8:	2013      	movs	r0, #19
  4004ca:	4b23      	ldr	r3, [pc, #140]	; (400558 <flexcom_enable+0x150>)
  4004cc:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  4004ce:	2006      	movs	r0, #6
  4004d0:	4b22      	ldr	r3, [pc, #136]	; (40055c <flexcom_enable+0x154>)
  4004d2:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4004d4:	2006      	movs	r0, #6
  4004d6:	2100      	movs	r1, #0
  4004d8:	4b21      	ldr	r3, [pc, #132]	; (400560 <flexcom_enable+0x158>)
  4004da:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4004dc:	2006      	movs	r0, #6
  4004de:	4b21      	ldr	r3, [pc, #132]	; (400564 <flexcom_enable+0x15c>)
  4004e0:	4798      	blx	r3
  4004e2:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM2
	if (p_flexcom == FLEXCOM2) {
  4004e4:	4a24      	ldr	r2, [pc, #144]	; (400578 <flexcom_enable+0x170>)
  4004e6:	4290      	cmp	r0, r2
  4004e8:	d10d      	bne.n	400506 <flexcom_enable+0xfe>
  4004ea:	200e      	movs	r0, #14
  4004ec:	4b1a      	ldr	r3, [pc, #104]	; (400558 <flexcom_enable+0x150>)
  4004ee:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  4004f0:	2006      	movs	r0, #6
  4004f2:	4b1a      	ldr	r3, [pc, #104]	; (40055c <flexcom_enable+0x154>)
  4004f4:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4004f6:	2006      	movs	r0, #6
  4004f8:	2100      	movs	r1, #0
  4004fa:	4b19      	ldr	r3, [pc, #100]	; (400560 <flexcom_enable+0x158>)
  4004fc:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4004fe:	2006      	movs	r0, #6
  400500:	4b18      	ldr	r3, [pc, #96]	; (400564 <flexcom_enable+0x15c>)
  400502:	4798      	blx	r3
  400504:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM1
	if (p_flexcom == FLEXCOM1) {
  400506:	4a1d      	ldr	r2, [pc, #116]	; (40057c <flexcom_enable+0x174>)
  400508:	4290      	cmp	r0, r2
  40050a:	d10d      	bne.n	400528 <flexcom_enable+0x120>
  40050c:	2009      	movs	r0, #9
  40050e:	4b12      	ldr	r3, [pc, #72]	; (400558 <flexcom_enable+0x150>)
  400510:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  400512:	2006      	movs	r0, #6
  400514:	4b11      	ldr	r3, [pc, #68]	; (40055c <flexcom_enable+0x154>)
  400516:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  400518:	2006      	movs	r0, #6
  40051a:	2100      	movs	r1, #0
  40051c:	4b10      	ldr	r3, [pc, #64]	; (400560 <flexcom_enable+0x158>)
  40051e:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400520:	2006      	movs	r0, #6
  400522:	4b10      	ldr	r3, [pc, #64]	; (400564 <flexcom_enable+0x15c>)
  400524:	4798      	blx	r3
  400526:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM0
	if (p_flexcom == FLEXCOM0) {
  400528:	4a15      	ldr	r2, [pc, #84]	; (400580 <flexcom_enable+0x178>)
  40052a:	4290      	cmp	r0, r2
  40052c:	d10c      	bne.n	400548 <flexcom_enable+0x140>
  40052e:	2008      	movs	r0, #8
  400530:	4b09      	ldr	r3, [pc, #36]	; (400558 <flexcom_enable+0x150>)
  400532:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  400534:	2006      	movs	r0, #6
  400536:	4b09      	ldr	r3, [pc, #36]	; (40055c <flexcom_enable+0x154>)
  400538:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40053a:	2006      	movs	r0, #6
  40053c:	2100      	movs	r1, #0
  40053e:	4b08      	ldr	r3, [pc, #32]	; (400560 <flexcom_enable+0x158>)
  400540:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400542:	2006      	movs	r0, #6
  400544:	4b07      	ldr	r3, [pc, #28]	; (400564 <flexcom_enable+0x15c>)
  400546:	4798      	blx	r3
  400548:	bd08      	pop	{r3, pc}
  40054a:	bf00      	nop
  40054c:	20000a14 	.word	0x20000a14
  400550:	20000088 	.word	0x20000088
  400554:	40034000 	.word	0x40034000
  400558:	00400651 	.word	0x00400651
  40055c:	004006f9 	.word	0x004006f9
  400560:	004006a5 	.word	0x004006a5
  400564:	004006e9 	.word	0x004006e9
  400568:	40040000 	.word	0x40040000
  40056c:	40008000 	.word	0x40008000
  400570:	4001c000 	.word	0x4001c000
  400574:	40018000 	.word	0x40018000
  400578:	40024000 	.word	0x40024000
  40057c:	40020000 	.word	0x40020000
  400580:	4000c000 	.word	0x4000c000

00400584 <flexcom_set_opmode>:
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
	p_flexcom->FLEXCOM_MR = opmode;
  400584:	6001      	str	r1, [r0, #0]
  400586:	4770      	bx	lr

00400588 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400588:	4a18      	ldr	r2, [pc, #96]	; (4005ec <pmc_switch_mck_to_pllack+0x64>)
  40058a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40058c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400590:	4318      	orrs	r0, r3
  400592:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400594:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400596:	f013 0f08 	tst.w	r3, #8
  40059a:	d003      	beq.n	4005a4 <pmc_switch_mck_to_pllack+0x1c>
  40059c:	e009      	b.n	4005b2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40059e:	3b01      	subs	r3, #1
  4005a0:	d103      	bne.n	4005aa <pmc_switch_mck_to_pllack+0x22>
  4005a2:	e01e      	b.n	4005e2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005a8:	4910      	ldr	r1, [pc, #64]	; (4005ec <pmc_switch_mck_to_pllack+0x64>)
  4005aa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005ac:	f012 0f08 	tst.w	r2, #8
  4005b0:	d0f5      	beq.n	40059e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4005b2:	4a0e      	ldr	r2, [pc, #56]	; (4005ec <pmc_switch_mck_to_pllack+0x64>)
  4005b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005b6:	f023 0303 	bic.w	r3, r3, #3
  4005ba:	f043 0302 	orr.w	r3, r3, #2
  4005be:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005c0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4005c2:	f010 0008 	ands.w	r0, r0, #8
  4005c6:	d004      	beq.n	4005d2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4005c8:	2000      	movs	r0, #0
  4005ca:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005cc:	3b01      	subs	r3, #1
  4005ce:	d103      	bne.n	4005d8 <pmc_switch_mck_to_pllack+0x50>
  4005d0:	e009      	b.n	4005e6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005d6:	4905      	ldr	r1, [pc, #20]	; (4005ec <pmc_switch_mck_to_pllack+0x64>)
  4005d8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005da:	f012 0f08 	tst.w	r2, #8
  4005de:	d0f5      	beq.n	4005cc <pmc_switch_mck_to_pllack+0x44>
  4005e0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4005e2:	2001      	movs	r0, #1
  4005e4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4005e6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4005e8:	4770      	bx	lr
  4005ea:	bf00      	nop
  4005ec:	400e0400 	.word	0x400e0400

004005f0 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4005f0:	2801      	cmp	r0, #1
  4005f2:	d106      	bne.n	400602 <pmc_switch_sclk_to_32kxtal+0x12>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4005f4:	4a05      	ldr	r2, [pc, #20]	; (40060c <pmc_switch_sclk_to_32kxtal+0x1c>)
  4005f6:	6893      	ldr	r3, [r2, #8]
  4005f8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4005fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400600:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400602:	4a03      	ldr	r2, [pc, #12]	; (400610 <pmc_switch_sclk_to_32kxtal+0x20>)
  400604:	4b01      	ldr	r3, [pc, #4]	; (40060c <pmc_switch_sclk_to_32kxtal+0x1c>)
  400606:	601a      	str	r2, [r3, #0]
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	400e1410 	.word	0x400e1410
  400610:	a5000008 	.word	0xa5000008

00400614 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400614:	4b05      	ldr	r3, [pc, #20]	; (40062c <pmc_osc_is_ready_32kxtal+0x18>)
  400616:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400618:	f013 0f80 	tst.w	r3, #128	; 0x80
  40061c:	bf1d      	ittte	ne
  40061e:	4b04      	ldrne	r3, [pc, #16]	; (400630 <pmc_osc_is_ready_32kxtal+0x1c>)
  400620:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  400622:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  400626:	2000      	moveq	r0, #0
}
  400628:	4770      	bx	lr
  40062a:	bf00      	nop
  40062c:	400e1410 	.word	0x400e1410
  400630:	400e0400 	.word	0x400e0400

00400634 <pmc_disable_pllack>:
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  400634:	2200      	movs	r2, #0
  400636:	4b01      	ldr	r3, [pc, #4]	; (40063c <pmc_disable_pllack+0x8>)
  400638:	629a      	str	r2, [r3, #40]	; 0x28
  40063a:	4770      	bx	lr
  40063c:	400e0400 	.word	0x400e0400

00400640 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400640:	4b02      	ldr	r3, [pc, #8]	; (40064c <pmc_is_locked_pllack+0xc>)
  400642:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400644:	f000 0002 	and.w	r0, r0, #2
  400648:	4770      	bx	lr
  40064a:	bf00      	nop
  40064c:	400e0400 	.word	0x400e0400

00400650 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400650:	2832      	cmp	r0, #50	; 0x32
  400652:	d81e      	bhi.n	400692 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400654:	281f      	cmp	r0, #31
  400656:	d80c      	bhi.n	400672 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400658:	4b11      	ldr	r3, [pc, #68]	; (4006a0 <pmc_enable_periph_clk+0x50>)
  40065a:	699a      	ldr	r2, [r3, #24]
  40065c:	2301      	movs	r3, #1
  40065e:	4083      	lsls	r3, r0
  400660:	401a      	ands	r2, r3
  400662:	4293      	cmp	r3, r2
  400664:	d017      	beq.n	400696 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400666:	2301      	movs	r3, #1
  400668:	4083      	lsls	r3, r0
  40066a:	4a0d      	ldr	r2, [pc, #52]	; (4006a0 <pmc_enable_periph_clk+0x50>)
  40066c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40066e:	2000      	movs	r0, #0
  400670:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400672:	4b0b      	ldr	r3, [pc, #44]	; (4006a0 <pmc_enable_periph_clk+0x50>)
  400674:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400678:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40067a:	2301      	movs	r3, #1
  40067c:	4083      	lsls	r3, r0
  40067e:	401a      	ands	r2, r3
  400680:	4293      	cmp	r3, r2
  400682:	d00a      	beq.n	40069a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400684:	2301      	movs	r3, #1
  400686:	4083      	lsls	r3, r0
  400688:	4a05      	ldr	r2, [pc, #20]	; (4006a0 <pmc_enable_periph_clk+0x50>)
  40068a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40068e:	2000      	movs	r0, #0
  400690:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400692:	2001      	movs	r0, #1
  400694:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400696:	2000      	movs	r0, #0
  400698:	4770      	bx	lr
  40069a:	2000      	movs	r0, #0
}
  40069c:	4770      	bx	lr
  40069e:	bf00      	nop
  4006a0:	400e0400 	.word	0x400e0400

004006a4 <pmc_switch_pck_to_mck>:
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  4006a4:	f041 0104 	orr.w	r1, r1, #4
  4006a8:	4b0e      	ldr	r3, [pc, #56]	; (4006e4 <pmc_switch_pck_to_mck+0x40>)
  4006aa:	f100 0210 	add.w	r2, r0, #16
  4006ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4006b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
  4006b8:	4081      	lsls	r1, r0
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  4006ba:	ea11 0003 	ands.w	r0, r1, r3
  4006be:	d004      	beq.n	4006ca <pmc_switch_pck_to_mck+0x26>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4006c0:	2000      	movs	r0, #0
}
  4006c2:	4770      	bx	lr
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  4006c4:	3b01      	subs	r3, #1
  4006c6:	d104      	bne.n	4006d2 <pmc_switch_pck_to_mck+0x2e>
  4006c8:	e007      	b.n	4006da <pmc_switch_pck_to_mck+0x36>
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
  4006ca:	b410      	push	{r4}
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  4006cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4006d0:	4c04      	ldr	r4, [pc, #16]	; (4006e4 <pmc_switch_pck_to_mck+0x40>)
  4006d2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  4006d4:	4211      	tst	r1, r2
  4006d6:	d0f5      	beq.n	4006c4 <pmc_switch_pck_to_mck+0x20>
  4006d8:	e000      	b.n	4006dc <pmc_switch_pck_to_mck+0x38>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4006da:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4006dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006e0:	4770      	bx	lr
  4006e2:	bf00      	nop
  4006e4:	400e0400 	.word	0x400e0400

004006e8 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4006e8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4006ec:	4083      	lsls	r3, r0
  4006ee:	4a01      	ldr	r2, [pc, #4]	; (4006f4 <pmc_enable_pck+0xc>)
  4006f0:	6013      	str	r3, [r2, #0]
  4006f2:	4770      	bx	lr
  4006f4:	400e0400 	.word	0x400e0400

004006f8 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  4006f8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4006fc:	4083      	lsls	r3, r0
  4006fe:	4a01      	ldr	r2, [pc, #4]	; (400704 <pmc_disable_pck+0xc>)
  400700:	6053      	str	r3, [r2, #4]
  400702:	4770      	bx	lr
  400704:	400e0400 	.word	0x400e0400

00400708 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400708:	6843      	ldr	r3, [r0, #4]
  40070a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  40070e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400710:	6843      	ldr	r3, [r0, #4]
  400712:	0409      	lsls	r1, r1, #16
  400714:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  400718:	430b      	orrs	r3, r1
  40071a:	6043      	str	r3, [r0, #4]
  40071c:	4770      	bx	lr
  40071e:	bf00      	nop

00400720 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  400720:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  400722:	f643 2399 	movw	r3, #15001	; 0x3a99
  400726:	e001      	b.n	40072c <spi_read+0xc>
		if (!timeout--) {
  400728:	3b01      	subs	r3, #1
  40072a:	d012      	beq.n	400752 <spi_read+0x32>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  40072c:	6904      	ldr	r4, [r0, #16]
  40072e:	f014 0f01 	tst.w	r4, #1
  400732:	d0f9      	beq.n	400728 <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  400734:	6883      	ldr	r3, [r0, #8]
  400736:	4c09      	ldr	r4, [pc, #36]	; (40075c <spi_read+0x3c>)
  400738:	6023      	str	r3, [r4, #0]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40073a:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  40073c:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  400740:	bf1c      	itt	ne
  400742:	f3c3 4303 	ubfxne	r3, r3, #16, #4
  400746:	7013      	strbne	r3, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  400748:	4b04      	ldr	r3, [pc, #16]	; (40075c <spi_read+0x3c>)
  40074a:	681b      	ldr	r3, [r3, #0]
  40074c:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  40074e:	2000      	movs	r0, #0
  400750:	e000      	b.n	400754 <spi_read+0x34>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  400752:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  400754:	f85d 4b04 	ldr.w	r4, [sp], #4
  400758:	4770      	bx	lr
  40075a:	bf00      	nop
  40075c:	20000920 	.word	0x20000920

00400760 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400760:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400762:	f643 2499 	movw	r4, #15001	; 0x3a99
  400766:	e001      	b.n	40076c <spi_write+0xc>
		if (!timeout--) {
  400768:	3c01      	subs	r4, #1
  40076a:	d011      	beq.n	400790 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40076c:	6905      	ldr	r5, [r0, #16]
  40076e:	f015 0f02 	tst.w	r5, #2
  400772:	d0f9      	beq.n	400768 <spi_write+0x8>
  400774:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400776:	f014 0f02 	tst.w	r4, #2
  40077a:	d006      	beq.n	40078a <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40077c:	0412      	lsls	r2, r2, #16
  40077e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400782:	4311      	orrs	r1, r2
		if (uc_last) {
  400784:	b10b      	cbz	r3, 40078a <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  400786:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40078a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40078c:	2000      	movs	r0, #0
  40078e:	e000      	b.n	400792 <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  400790:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  400792:	bc30      	pop	{r4, r5}
  400794:	4770      	bx	lr
  400796:	bf00      	nop

00400798 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400798:	b132      	cbz	r2, 4007a8 <spi_set_clock_polarity+0x10>
  40079a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40079e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007a0:	f043 0301 	orr.w	r3, r3, #1
  4007a4:	6303      	str	r3, [r0, #48]	; 0x30
  4007a6:	4770      	bx	lr
  4007a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4007ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007ae:	f023 0301 	bic.w	r3, r3, #1
  4007b2:	6303      	str	r3, [r0, #48]	; 0x30
  4007b4:	4770      	bx	lr
  4007b6:	bf00      	nop

004007b8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4007b8:	b132      	cbz	r2, 4007c8 <spi_set_clock_phase+0x10>
  4007ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4007be:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007c0:	f043 0302 	orr.w	r3, r3, #2
  4007c4:	6303      	str	r3, [r0, #48]	; 0x30
  4007c6:	4770      	bx	lr
  4007c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4007cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007ce:	f023 0302 	bic.w	r3, r3, #2
  4007d2:	6303      	str	r3, [r0, #48]	; 0x30
  4007d4:	4770      	bx	lr
  4007d6:	bf00      	nop

004007d8 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4007d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4007dc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4007de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4007e2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4007e4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4007e6:	431a      	orrs	r2, r3
  4007e8:	630a      	str	r2, [r1, #48]	; 0x30
  4007ea:	4770      	bx	lr

004007ec <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4007ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4007f0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4007f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4007f6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4007f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4007fa:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4007fe:	630a      	str	r2, [r1, #48]	; 0x30
  400800:	4770      	bx	lr
  400802:	bf00      	nop

00400804 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  400804:	b410      	push	{r4}
  400806:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40080a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  40080c:	b280      	uxth	r0, r0
  40080e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400810:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  400812:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  400816:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40081a:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  40081c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400820:	4770      	bx	lr
  400822:	bf00      	nop

00400824 <supc_set_regulator_trim_user>:
#if SAMG54
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  400824:	69c3      	ldr	r3, [r0, #28]
  400826:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
  40082a:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  40082e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
		| ((value & 0xFu) << 9);
  400832:	f001 010f 	and.w	r1, r1, #15
  400836:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
  40083a:	61c3      	str	r3, [r0, #28]
  40083c:	4770      	bx	lr
  40083e:	bf00      	nop

00400840 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400840:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400842:	010b      	lsls	r3, r1, #4
  400844:	4293      	cmp	r3, r2
  400846:	d90f      	bls.n	400868 <usart_set_async_baudrate+0x28>
  400848:	e01c      	b.n	400884 <usart_set_async_baudrate+0x44>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
  40084a:	f002 0207 	and.w	r2, r2, #7
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40084e:	6841      	ldr	r1, [r0, #4]
  400850:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400854:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400856:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40085a:	6202      	str	r2, [r0, #32]

	return 0;
  40085c:	2000      	movs	r0, #0
  40085e:	e01e      	b.n	40089e <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  400860:	2001      	movs	r0, #1
  400862:	e01c      	b.n	40089e <usart_set_async_baudrate+0x5e>
  400864:	2001      	movs	r0, #1
  400866:	e01a      	b.n	40089e <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400868:	00d2      	lsls	r2, r2, #3
  40086a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
  40086e:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400872:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400874:	1e5c      	subs	r4, r3, #1
  400876:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40087a:	428c      	cmp	r4, r1
  40087c:	d8f0      	bhi.n	400860 <usart_set_async_baudrate+0x20>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
  40087e:	f002 0207 	and.w	r2, r2, #7
  400882:	e7e8      	b.n	400856 <usart_set_async_baudrate+0x16>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400884:	00c9      	lsls	r1, r1, #3
  400886:	00d2      	lsls	r2, r2, #3
  400888:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  40088c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400890:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400892:	1e5c      	subs	r4, r3, #1
  400894:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400898:	428c      	cmp	r4, r1
  40089a:	d9d6      	bls.n	40084a <usart_set_async_baudrate+0xa>
  40089c:	e7e2      	b.n	400864 <usart_set_async_baudrate+0x24>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  40089e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008a2:	4770      	bx	lr

004008a4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4008a4:	4b08      	ldr	r3, [pc, #32]	; (4008c8 <usart_reset+0x24>)
  4008a6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4008aa:	2300      	movs	r3, #0
  4008ac:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4008ae:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4008b0:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4008b2:	2388      	movs	r3, #136	; 0x88
  4008b4:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4008b6:	2324      	movs	r3, #36	; 0x24
  4008b8:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  4008ba:	f44f 7380 	mov.w	r3, #256	; 0x100
  4008be:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  4008c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4008c4:	6003      	str	r3, [r0, #0]
  4008c6:	4770      	bx	lr
  4008c8:	55534100 	.word	0x55534100

004008cc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4008cc:	b570      	push	{r4, r5, r6, lr}
  4008ce:	4605      	mov	r5, r0
  4008d0:	460c      	mov	r4, r1
  4008d2:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4008d4:	4b0f      	ldr	r3, [pc, #60]	; (400914 <usart_init_rs232+0x48>)
  4008d6:	4798      	blx	r3

	ul_reg_val = 0;
  4008d8:	2200      	movs	r2, #0
  4008da:	4b0f      	ldr	r3, [pc, #60]	; (400918 <usart_init_rs232+0x4c>)
  4008dc:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4008de:	b19c      	cbz	r4, 400908 <usart_init_rs232+0x3c>
  4008e0:	4628      	mov	r0, r5
  4008e2:	6821      	ldr	r1, [r4, #0]
  4008e4:	4632      	mov	r2, r6
  4008e6:	4b0d      	ldr	r3, [pc, #52]	; (40091c <usart_init_rs232+0x50>)
  4008e8:	4798      	blx	r3
  4008ea:	4602      	mov	r2, r0
  4008ec:	b970      	cbnz	r0, 40090c <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4008ee:	68a1      	ldr	r1, [r4, #8]
  4008f0:	6863      	ldr	r3, [r4, #4]
  4008f2:	4319      	orrs	r1, r3
  4008f4:	6923      	ldr	r3, [r4, #16]
  4008f6:	4319      	orrs	r1, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4008f8:	68e3      	ldr	r3, [r4, #12]
  4008fa:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4008fc:	4906      	ldr	r1, [pc, #24]	; (400918 <usart_init_rs232+0x4c>)
  4008fe:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  400900:	6869      	ldr	r1, [r5, #4]
  400902:	430b      	orrs	r3, r1
  400904:	606b      	str	r3, [r5, #4]

	return 0;
  400906:	e002      	b.n	40090e <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400908:	2201      	movs	r2, #1
  40090a:	e000      	b.n	40090e <usart_init_rs232+0x42>
  40090c:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  40090e:	4610      	mov	r0, r2
  400910:	bd70      	pop	{r4, r5, r6, pc}
  400912:	bf00      	nop
  400914:	004008a5 	.word	0x004008a5
  400918:	20000924 	.word	0x20000924
  40091c:	00400841 	.word	0x00400841

00400920 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  400920:	2340      	movs	r3, #64	; 0x40
  400922:	6003      	str	r3, [r0, #0]
  400924:	4770      	bx	lr
  400926:	bf00      	nop

00400928 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  400928:	2310      	movs	r3, #16
  40092a:	6003      	str	r3, [r0, #0]
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop

00400930 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400930:	6943      	ldr	r3, [r0, #20]
  400932:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400936:	bf1d      	ittte	ne
  400938:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  40093c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40093e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400940:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400942:	4770      	bx	lr

00400944 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400944:	6943      	ldr	r3, [r0, #20]
  400946:	f013 0f01 	tst.w	r3, #1
  40094a:	d005      	beq.n	400958 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40094c:	6983      	ldr	r3, [r0, #24]
  40094e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400952:	600b      	str	r3, [r1, #0]

	return 0;
  400954:	2000      	movs	r0, #0
  400956:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400958:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  40095a:	4770      	bx	lr

0040095c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  40095c:	e7fe      	b.n	40095c <Dummy_Handler>
  40095e:	bf00      	nop

00400960 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400960:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  400962:	4b2a      	ldr	r3, [pc, #168]	; (400a0c <Reset_Handler+0xac>)
  400964:	4a2a      	ldr	r2, [pc, #168]	; (400a10 <Reset_Handler+0xb0>)
  400966:	429a      	cmp	r2, r3
  400968:	d003      	beq.n	400972 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  40096a:	4b2a      	ldr	r3, [pc, #168]	; (400a14 <Reset_Handler+0xb4>)
  40096c:	4a27      	ldr	r2, [pc, #156]	; (400a0c <Reset_Handler+0xac>)
  40096e:	429a      	cmp	r2, r3
  400970:	d304      	bcc.n	40097c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400972:	4b29      	ldr	r3, [pc, #164]	; (400a18 <Reset_Handler+0xb8>)
  400974:	4a29      	ldr	r2, [pc, #164]	; (400a1c <Reset_Handler+0xbc>)
  400976:	429a      	cmp	r2, r3
  400978:	d310      	bcc.n	40099c <Reset_Handler+0x3c>
  40097a:	e01b      	b.n	4009b4 <Reset_Handler+0x54>
  40097c:	4923      	ldr	r1, [pc, #140]	; (400a0c <Reset_Handler+0xac>)
  40097e:	1d0a      	adds	r2, r1, #4
  400980:	4b27      	ldr	r3, [pc, #156]	; (400a20 <Reset_Handler+0xc0>)
  400982:	1a9b      	subs	r3, r3, r2
  400984:	f023 0303 	bic.w	r3, r3, #3
  400988:	3304      	adds	r3, #4
  40098a:	4a21      	ldr	r2, [pc, #132]	; (400a10 <Reset_Handler+0xb0>)
  40098c:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  40098e:	f852 0b04 	ldr.w	r0, [r2], #4
  400992:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400996:	429a      	cmp	r2, r3
  400998:	d1f9      	bne.n	40098e <Reset_Handler+0x2e>
  40099a:	e7ea      	b.n	400972 <Reset_Handler+0x12>
  40099c:	4b21      	ldr	r3, [pc, #132]	; (400a24 <Reset_Handler+0xc4>)
  40099e:	4a22      	ldr	r2, [pc, #136]	; (400a28 <Reset_Handler+0xc8>)
  4009a0:	1ad2      	subs	r2, r2, r3
  4009a2:	f022 0203 	bic.w	r2, r2, #3
  4009a6:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4009a8:	3b04      	subs	r3, #4
                *pDest++ = 0;
  4009aa:	2100      	movs	r1, #0
  4009ac:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4009b0:	4293      	cmp	r3, r2
  4009b2:	d1fb      	bne.n	4009ac <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4009b4:	4b1d      	ldr	r3, [pc, #116]	; (400a2c <Reset_Handler+0xcc>)
  4009b6:	f023 017f 	bic.w	r1, r3, #127	; 0x7f
  4009ba:	4a1d      	ldr	r2, [pc, #116]	; (400a30 <Reset_Handler+0xd0>)
  4009bc:	6091      	str	r1, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4009be:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4009c2:	b672      	cpsid	i
  4009c4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4009c8:	2000      	movs	r0, #0
  4009ca:	491a      	ldr	r1, [pc, #104]	; (400a34 <Reset_Handler+0xd4>)
  4009cc:	7008      	strb	r0, [r1, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4009ce:	481a      	ldr	r0, [pc, #104]	; (400a38 <Reset_Handler+0xd8>)
  4009d0:	6801      	ldr	r1, [r0, #0]
  4009d2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4009d6:	6001      	str	r1, [r0, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4009d8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4009dc:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4009e0:	b92a      	cbnz	r2, 4009ee <Reset_Handler+0x8e>
		cpu_irq_enable();
  4009e2:	2101      	movs	r1, #1
  4009e4:	4a13      	ldr	r2, [pc, #76]	; (400a34 <Reset_Handler+0xd4>)
  4009e6:	7011      	strb	r1, [r2, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4009e8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4009ec:	b662      	cpsie	i

#if __FPU_USED
	fpu_enable();
#endif

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  4009ee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  4009f2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
  4009f6:	d204      	bcs.n	400a02 <Reset_Handler+0xa2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  4009f8:	4a0d      	ldr	r2, [pc, #52]	; (400a30 <Reset_Handler+0xd0>)
  4009fa:	6893      	ldr	r3, [r2, #8]
  4009fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400a00:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  400a02:	4b0e      	ldr	r3, [pc, #56]	; (400a3c <Reset_Handler+0xdc>)
  400a04:	4798      	blx	r3

        /* Branch to main function */
        main();
  400a06:	4b0e      	ldr	r3, [pc, #56]	; (400a40 <Reset_Handler+0xe0>)
  400a08:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400a0a:	e7fe      	b.n	400a0a <Reset_Handler+0xaa>
  400a0c:	20000000 	.word	0x20000000
  400a10:	00405fe8 	.word	0x00405fe8
  400a14:	20000904 	.word	0x20000904
  400a18:	20000a2c 	.word	0x20000a2c
  400a1c:	20000904 	.word	0x20000904
  400a20:	20000907 	.word	0x20000907
  400a24:	20000908 	.word	0x20000908
  400a28:	20000a2f 	.word	0x20000a2f
  400a2c:	00400000 	.word	0x00400000
  400a30:	e000ed00 	.word	0xe000ed00
  400a34:	20000088 	.word	0x20000088
  400a38:	e000ed88 	.word	0xe000ed88
  400a3c:	004014f5 	.word	0x004014f5
  400a40:	004010f1 	.word	0x004010f1

00400a44 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400a44:	4b31      	ldr	r3, [pc, #196]	; (400b0c <SystemCoreClockUpdate+0xc8>)
  400a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a48:	f003 0303 	and.w	r3, r3, #3
  400a4c:	2b01      	cmp	r3, #1
  400a4e:	d00f      	beq.n	400a70 <SystemCoreClockUpdate+0x2c>
  400a50:	b113      	cbz	r3, 400a58 <SystemCoreClockUpdate+0x14>
  400a52:	2b02      	cmp	r3, #2
  400a54:	d029      	beq.n	400aaa <SystemCoreClockUpdate+0x66>
  400a56:	e042      	b.n	400ade <SystemCoreClockUpdate+0x9a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400a58:	4b2d      	ldr	r3, [pc, #180]	; (400b10 <SystemCoreClockUpdate+0xcc>)
  400a5a:	695b      	ldr	r3, [r3, #20]
  400a5c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a60:	bf14      	ite	ne
  400a62:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a66:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a6a:	4b2a      	ldr	r3, [pc, #168]	; (400b14 <SystemCoreClockUpdate+0xd0>)
  400a6c:	601a      	str	r2, [r3, #0]
  400a6e:	e036      	b.n	400ade <SystemCoreClockUpdate+0x9a>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400a70:	4b26      	ldr	r3, [pc, #152]	; (400b0c <SystemCoreClockUpdate+0xc8>)
  400a72:	6a1b      	ldr	r3, [r3, #32]
  400a74:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a78:	d003      	beq.n	400a82 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400a7a:	4a27      	ldr	r2, [pc, #156]	; (400b18 <SystemCoreClockUpdate+0xd4>)
  400a7c:	4b25      	ldr	r3, [pc, #148]	; (400b14 <SystemCoreClockUpdate+0xd0>)
  400a7e:	601a      	str	r2, [r3, #0]
  400a80:	e02d      	b.n	400ade <SystemCoreClockUpdate+0x9a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400a82:	4a26      	ldr	r2, [pc, #152]	; (400b1c <SystemCoreClockUpdate+0xd8>)
  400a84:	4b23      	ldr	r3, [pc, #140]	; (400b14 <SystemCoreClockUpdate+0xd0>)
  400a86:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400a88:	4b20      	ldr	r3, [pc, #128]	; (400b0c <SystemCoreClockUpdate+0xc8>)
  400a8a:	6a1b      	ldr	r3, [r3, #32]
  400a8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a90:	2b10      	cmp	r3, #16
  400a92:	d002      	beq.n	400a9a <SystemCoreClockUpdate+0x56>
  400a94:	2b20      	cmp	r3, #32
  400a96:	d004      	beq.n	400aa2 <SystemCoreClockUpdate+0x5e>
  400a98:	e021      	b.n	400ade <SystemCoreClockUpdate+0x9a>
			case CKGR_MOR_MOSCRCF_8_MHz:
				break;
			case CKGR_MOR_MOSCRCF_16_MHz:
				SystemCoreClock *= 2U;
  400a9a:	4a21      	ldr	r2, [pc, #132]	; (400b20 <SystemCoreClockUpdate+0xdc>)
  400a9c:	4b1d      	ldr	r3, [pc, #116]	; (400b14 <SystemCoreClockUpdate+0xd0>)
  400a9e:	601a      	str	r2, [r3, #0]
				break;
  400aa0:	e01d      	b.n	400ade <SystemCoreClockUpdate+0x9a>
			case CKGR_MOR_MOSCRCF_24_MHz:
				SystemCoreClock *= 3U;
  400aa2:	4a20      	ldr	r2, [pc, #128]	; (400b24 <SystemCoreClockUpdate+0xe0>)
  400aa4:	4b1b      	ldr	r3, [pc, #108]	; (400b14 <SystemCoreClockUpdate+0xd0>)
  400aa6:	601a      	str	r2, [r3, #0]
				break;
  400aa8:	e019      	b.n	400ade <SystemCoreClockUpdate+0x9a>
				break;
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400aaa:	4b19      	ldr	r3, [pc, #100]	; (400b10 <SystemCoreClockUpdate+0xcc>)
  400aac:	695b      	ldr	r3, [r3, #20]
  400aae:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ab2:	bf14      	ite	ne
  400ab4:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ab8:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400abc:	4b15      	ldr	r3, [pc, #84]	; (400b14 <SystemCoreClockUpdate+0xd0>)
  400abe:	601a      	str	r2, [r3, #0]
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  400ac0:	4b12      	ldr	r3, [pc, #72]	; (400b0c <SystemCoreClockUpdate+0xc8>)
  400ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ac4:	f003 0303 	and.w	r3, r3, #3
  400ac8:	2b02      	cmp	r3, #2
  400aca:	d108      	bne.n	400ade <SystemCoreClockUpdate+0x9a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  400acc:	4b0f      	ldr	r3, [pc, #60]	; (400b0c <SystemCoreClockUpdate+0xc8>)
  400ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400ad0:	4910      	ldr	r1, [pc, #64]	; (400b14 <SystemCoreClockUpdate+0xd0>)
  400ad2:	f3c3 420c 	ubfx	r2, r3, #16, #13
  400ad6:	680b      	ldr	r3, [r1, #0]
  400ad8:	fb02 3303 	mla	r3, r2, r3, r3
  400adc:	600b      	str	r3, [r1, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400ade:	4b0b      	ldr	r3, [pc, #44]	; (400b0c <SystemCoreClockUpdate+0xc8>)
  400ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ae6:	2b70      	cmp	r3, #112	; 0x70
  400ae8:	d107      	bne.n	400afa <SystemCoreClockUpdate+0xb6>
		SystemCoreClock /= 3U;
  400aea:	4a0a      	ldr	r2, [pc, #40]	; (400b14 <SystemCoreClockUpdate+0xd0>)
  400aec:	6813      	ldr	r3, [r2, #0]
  400aee:	490e      	ldr	r1, [pc, #56]	; (400b28 <SystemCoreClockUpdate+0xe4>)
  400af0:	fba1 1303 	umull	r1, r3, r1, r3
  400af4:	085b      	lsrs	r3, r3, #1
  400af6:	6013      	str	r3, [r2, #0]
  400af8:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400afa:	4b04      	ldr	r3, [pc, #16]	; (400b0c <SystemCoreClockUpdate+0xc8>)
  400afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400afe:	4905      	ldr	r1, [pc, #20]	; (400b14 <SystemCoreClockUpdate+0xd0>)
  400b00:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400b04:	680b      	ldr	r3, [r1, #0]
  400b06:	40d3      	lsrs	r3, r2
  400b08:	600b      	str	r3, [r1, #0]
  400b0a:	4770      	bx	lr
  400b0c:	400e0400 	.word	0x400e0400
  400b10:	400e1410 	.word	0x400e1410
  400b14:	2000008c 	.word	0x2000008c
  400b18:	00b71b00 	.word	0x00b71b00
  400b1c:	007a1200 	.word	0x007a1200
  400b20:	00f42400 	.word	0x00f42400
  400b24:	016e3600 	.word	0x016e3600
  400b28:	aaaaaaab 	.word	0xaaaaaaab

00400b2c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  400b2c:	4b12      	ldr	r3, [pc, #72]	; (400b78 <system_init_flash+0x4c>)
  400b2e:	4298      	cmp	r0, r3
  400b30:	d804      	bhi.n	400b3c <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400b36:	4b11      	ldr	r3, [pc, #68]	; (400b7c <system_init_flash+0x50>)
  400b38:	601a      	str	r2, [r3, #0]
  400b3a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  400b3c:	4b10      	ldr	r3, [pc, #64]	; (400b80 <system_init_flash+0x54>)
  400b3e:	4298      	cmp	r0, r3
  400b40:	d803      	bhi.n	400b4a <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400b42:	4a10      	ldr	r2, [pc, #64]	; (400b84 <system_init_flash+0x58>)
  400b44:	4b0d      	ldr	r3, [pc, #52]	; (400b7c <system_init_flash+0x50>)
  400b46:	601a      	str	r2, [r3, #0]
  400b48:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  400b4a:	4b0f      	ldr	r3, [pc, #60]	; (400b88 <system_init_flash+0x5c>)
  400b4c:	4298      	cmp	r0, r3
  400b4e:	d803      	bhi.n	400b58 <system_init_flash+0x2c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400b50:	4a0e      	ldr	r2, [pc, #56]	; (400b8c <system_init_flash+0x60>)
  400b52:	4b0a      	ldr	r3, [pc, #40]	; (400b7c <system_init_flash+0x50>)
  400b54:	601a      	str	r2, [r3, #0]
  400b56:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  400b58:	4b0d      	ldr	r3, [pc, #52]	; (400b90 <system_init_flash+0x64>)
  400b5a:	4298      	cmp	r0, r3
  400b5c:	d803      	bhi.n	400b66 <system_init_flash+0x3a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400b5e:	4a0d      	ldr	r2, [pc, #52]	; (400b94 <system_init_flash+0x68>)
  400b60:	4b06      	ldr	r3, [pc, #24]	; (400b7c <system_init_flash+0x50>)
  400b62:	601a      	str	r2, [r3, #0]
  400b64:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  400b66:	4b0c      	ldr	r3, [pc, #48]	; (400b98 <system_init_flash+0x6c>)
  400b68:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b6a:	bf94      	ite	ls
  400b6c:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b70:	4a0a      	ldrhi	r2, [pc, #40]	; (400b9c <system_init_flash+0x70>)
  400b72:	4b02      	ldr	r3, [pc, #8]	; (400b7c <system_init_flash+0x50>)
  400b74:	601a      	str	r2, [r3, #0]
  400b76:	4770      	bx	lr
  400b78:	01312cff 	.word	0x01312cff
  400b7c:	400e0a00 	.word	0x400e0a00
  400b80:	026259ff 	.word	0x026259ff
  400b84:	04000100 	.word	0x04000100
  400b88:	039386ff 	.word	0x039386ff
  400b8c:	04000200 	.word	0x04000200
  400b90:	04c4b3ff 	.word	0x04c4b3ff
  400b94:	04000300 	.word	0x04000300
  400b98:	05f5e0ff 	.word	0x05f5e0ff
  400b9c:	04000500 	.word	0x04000500

00400ba0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400ba0:	4b09      	ldr	r3, [pc, #36]	; (400bc8 <_sbrk+0x28>)
  400ba2:	681b      	ldr	r3, [r3, #0]
  400ba4:	b913      	cbnz	r3, 400bac <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400ba6:	4a09      	ldr	r2, [pc, #36]	; (400bcc <_sbrk+0x2c>)
  400ba8:	4b07      	ldr	r3, [pc, #28]	; (400bc8 <_sbrk+0x28>)
  400baa:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400bac:	4b06      	ldr	r3, [pc, #24]	; (400bc8 <_sbrk+0x28>)
  400bae:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400bb0:	181a      	adds	r2, r3, r0
  400bb2:	4907      	ldr	r1, [pc, #28]	; (400bd0 <_sbrk+0x30>)
  400bb4:	4291      	cmp	r1, r2
  400bb6:	db04      	blt.n	400bc2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400bb8:	4610      	mov	r0, r2
  400bba:	4a03      	ldr	r2, [pc, #12]	; (400bc8 <_sbrk+0x28>)
  400bbc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400bbe:	4618      	mov	r0, r3
  400bc0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400bc2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400bc6:	4770      	bx	lr
  400bc8:	20000928 	.word	0x20000928
  400bcc:	20003a30 	.word	0x20003a30
  400bd0:	20027ffc 	.word	0x20027ffc

00400bd4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400bd4:	f04f 30ff 	mov.w	r0, #4294967295
  400bd8:	4770      	bx	lr
  400bda:	bf00      	nop

00400bdc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400be0:	604b      	str	r3, [r1, #4]

	return 0;
}
  400be2:	2000      	movs	r0, #0
  400be4:	4770      	bx	lr
  400be6:	bf00      	nop

00400be8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400be8:	2001      	movs	r0, #1
  400bea:	4770      	bx	lr

00400bec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400bec:	2000      	movs	r0, #0
  400bee:	4770      	bx	lr

00400bf0 <spi_slave_transfer>:
 *
 * \param p_buf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
static void spi_slave_transfer(void *p_buf, uint32_t size)
{
  400bf0:	b510      	push	{r4, lr}
  400bf2:	4602      	mov	r2, r0
	gs_puc_transfer_buffer = p_buf;
  400bf4:	4b06      	ldr	r3, [pc, #24]	; (400c10 <spi_slave_transfer+0x20>)
  400bf6:	6018      	str	r0, [r3, #0]
	gs_ul_transfer_length = size;
  400bf8:	4b06      	ldr	r3, [pc, #24]	; (400c14 <spi_slave_transfer+0x24>)
  400bfa:	6019      	str	r1, [r3, #0]
	gs_ul_transfer_index = 0;
  400bfc:	2300      	movs	r3, #0
  400bfe:	4906      	ldr	r1, [pc, #24]	; (400c18 <spi_slave_transfer+0x28>)
  400c00:	600b      	str	r3, [r1, #0]
	spi_write(SPI_SLAVE_BASE, gs_puc_transfer_buffer[gs_ul_transfer_index], 0,
  400c02:	4806      	ldr	r0, [pc, #24]	; (400c1c <spi_slave_transfer+0x2c>)
  400c04:	7811      	ldrb	r1, [r2, #0]
  400c06:	461a      	mov	r2, r3
  400c08:	4c05      	ldr	r4, [pc, #20]	; (400c20 <spi_slave_transfer+0x30>)
  400c0a:	47a0      	blx	r4
  400c0c:	bd10      	pop	{r4, pc}
  400c0e:	bf00      	nop
  400c10:	20000980 	.word	0x20000980
  400c14:	20000938 	.word	0x20000938
  400c18:	200009dc 	.word	0x200009dc
  400c1c:	40008400 	.word	0x40008400
  400c20:	00400761 	.word	0x00400761

00400c24 <spi_master_transfer>:

	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
  400c24:	b309      	cbz	r1, 400c6a <spi_master_transfer+0x46>
 *
 * \param pbuf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
static void spi_master_transfer(void *p_buf, uint32_t size)
{
  400c26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400c2a:	b083      	sub	sp, #12
  400c2c:	4688      	mov	r8, r1
  400c2e:	4605      	mov	r5, r0
  400c30:	4480      	add	r8, r0
	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
		spi_write(SPI_MASTER_BASE, p_buffer[i], 0, 0);
  400c32:	4c0e      	ldr	r4, [pc, #56]	; (400c6c <spi_master_transfer+0x48>)
  400c34:	f8df 9040 	ldr.w	r9, [pc, #64]	; 400c78 <spi_master_transfer+0x54>
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
  400c38:	4e0d      	ldr	r6, [pc, #52]	; (400c70 <spi_master_transfer+0x4c>)
  400c3a:	462f      	mov	r7, r5
	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
		spi_write(SPI_MASTER_BASE, p_buffer[i], 0, 0);
  400c3c:	4620      	mov	r0, r4
  400c3e:	7829      	ldrb	r1, [r5, #0]
  400c40:	2200      	movs	r2, #0
  400c42:	4613      	mov	r3, r2
  400c44:	47c8      	blx	r9
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  400c46:	6923      	ldr	r3, [r4, #16]
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
  400c48:	f013 0f01 	tst.w	r3, #1
  400c4c:	d0fb      	beq.n	400c46 <spi_master_transfer+0x22>
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
  400c4e:	4620      	mov	r0, r4
  400c50:	4631      	mov	r1, r6
  400c52:	f10d 0207 	add.w	r2, sp, #7
  400c56:	4b07      	ldr	r3, [pc, #28]	; (400c74 <spi_master_transfer+0x50>)
  400c58:	4798      	blx	r3
		p_buffer[i] = data;
  400c5a:	8833      	ldrh	r3, [r6, #0]
  400c5c:	703b      	strb	r3, [r7, #0]
  400c5e:	3501      	adds	r5, #1

	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
  400c60:	4545      	cmp	r5, r8
  400c62:	d1ea      	bne.n	400c3a <spi_master_transfer+0x16>
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
		p_buffer[i] = data;
	}
}
  400c64:	b003      	add	sp, #12
  400c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400c6a:	4770      	bx	lr
  400c6c:	40008400 	.word	0x40008400
  400c70:	2000097c 	.word	0x2000097c
  400c74:	00400721 	.word	0x00400721
  400c78:	00400761 	.word	0x00400761

00400c7c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c7e:	b083      	sub	sp, #12
  400c80:	4604      	mov	r4, r0
  400c82:	460e      	mov	r6, r1
	uint32_t val = 0;
  400c84:	2300      	movs	r3, #0
  400c86:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c88:	4b34      	ldr	r3, [pc, #208]	; (400d5c <usart_serial_getchar+0xe0>)
  400c8a:	4298      	cmp	r0, r3
  400c8c:	d109      	bne.n	400ca2 <usart_serial_getchar+0x26>
		while (usart_read(p_usart, &val));
  400c8e:	461f      	mov	r7, r3
  400c90:	4d33      	ldr	r5, [pc, #204]	; (400d60 <usart_serial_getchar+0xe4>)
  400c92:	4638      	mov	r0, r7
  400c94:	a901      	add	r1, sp, #4
  400c96:	47a8      	blx	r5
  400c98:	2800      	cmp	r0, #0
  400c9a:	d1fa      	bne.n	400c92 <usart_serial_getchar+0x16>
		*data = (uint8_t)(val & 0xFF);
  400c9c:	9b01      	ldr	r3, [sp, #4]
  400c9e:	7033      	strb	r3, [r6, #0]
  400ca0:	e019      	b.n	400cd6 <usart_serial_getchar+0x5a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400ca2:	4b30      	ldr	r3, [pc, #192]	; (400d64 <usart_serial_getchar+0xe8>)
  400ca4:	4298      	cmp	r0, r3
  400ca6:	d109      	bne.n	400cbc <usart_serial_getchar+0x40>
		while (usart_read(p_usart, &val));
  400ca8:	461f      	mov	r7, r3
  400caa:	4d2d      	ldr	r5, [pc, #180]	; (400d60 <usart_serial_getchar+0xe4>)
  400cac:	4638      	mov	r0, r7
  400cae:	a901      	add	r1, sp, #4
  400cb0:	47a8      	blx	r5
  400cb2:	2800      	cmp	r0, #0
  400cb4:	d1fa      	bne.n	400cac <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
  400cb6:	9b01      	ldr	r3, [sp, #4]
  400cb8:	7033      	strb	r3, [r6, #0]
  400cba:	e019      	b.n	400cf0 <usart_serial_getchar+0x74>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400cbc:	4b2a      	ldr	r3, [pc, #168]	; (400d68 <usart_serial_getchar+0xec>)
  400cbe:	4298      	cmp	r0, r3
  400cc0:	d109      	bne.n	400cd6 <usart_serial_getchar+0x5a>
		while (usart_read(p_usart, &val));
  400cc2:	461f      	mov	r7, r3
  400cc4:	4d26      	ldr	r5, [pc, #152]	; (400d60 <usart_serial_getchar+0xe4>)
  400cc6:	4638      	mov	r0, r7
  400cc8:	a901      	add	r1, sp, #4
  400cca:	47a8      	blx	r5
  400ccc:	2800      	cmp	r0, #0
  400cce:	d1fa      	bne.n	400cc6 <usart_serial_getchar+0x4a>
		*data = (uint8_t)(val & 0xFF);
  400cd0:	9b01      	ldr	r3, [sp, #4]
  400cd2:	7033      	strb	r3, [r6, #0]
  400cd4:	e019      	b.n	400d0a <usart_serial_getchar+0x8e>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  400cd6:	4b25      	ldr	r3, [pc, #148]	; (400d6c <usart_serial_getchar+0xf0>)
  400cd8:	429c      	cmp	r4, r3
  400cda:	d109      	bne.n	400cf0 <usart_serial_getchar+0x74>
		while (usart_read(p_usart, &val));
  400cdc:	461f      	mov	r7, r3
  400cde:	4d20      	ldr	r5, [pc, #128]	; (400d60 <usart_serial_getchar+0xe4>)
  400ce0:	4638      	mov	r0, r7
  400ce2:	a901      	add	r1, sp, #4
  400ce4:	47a8      	blx	r5
  400ce6:	2800      	cmp	r0, #0
  400ce8:	d1fa      	bne.n	400ce0 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
  400cea:	9b01      	ldr	r3, [sp, #4]
  400cec:	7033      	strb	r3, [r6, #0]
  400cee:	e019      	b.n	400d24 <usart_serial_getchar+0xa8>
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  400cf0:	4b1f      	ldr	r3, [pc, #124]	; (400d70 <usart_serial_getchar+0xf4>)
  400cf2:	429c      	cmp	r4, r3
  400cf4:	d109      	bne.n	400d0a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
  400cf6:	461f      	mov	r7, r3
  400cf8:	4d19      	ldr	r5, [pc, #100]	; (400d60 <usart_serial_getchar+0xe4>)
  400cfa:	4638      	mov	r0, r7
  400cfc:	a901      	add	r1, sp, #4
  400cfe:	47a8      	blx	r5
  400d00:	2800      	cmp	r0, #0
  400d02:	d1fa      	bne.n	400cfa <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400d04:	9b01      	ldr	r3, [sp, #4]
  400d06:	7033      	strb	r3, [r6, #0]
  400d08:	e019      	b.n	400d3e <usart_serial_getchar+0xc2>
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  400d0a:	4b1a      	ldr	r3, [pc, #104]	; (400d74 <usart_serial_getchar+0xf8>)
  400d0c:	429c      	cmp	r4, r3
  400d0e:	d109      	bne.n	400d24 <usart_serial_getchar+0xa8>
		while (usart_read(p_usart, &val));
  400d10:	461d      	mov	r5, r3
  400d12:	4c13      	ldr	r4, [pc, #76]	; (400d60 <usart_serial_getchar+0xe4>)
  400d14:	4628      	mov	r0, r5
  400d16:	a901      	add	r1, sp, #4
  400d18:	47a0      	blx	r4
  400d1a:	2800      	cmp	r0, #0
  400d1c:	d1fa      	bne.n	400d14 <usart_serial_getchar+0x98>
		*data = (uint8_t)(val & 0xFF);
  400d1e:	9b01      	ldr	r3, [sp, #4]
  400d20:	7033      	strb	r3, [r6, #0]
  400d22:	e018      	b.n	400d56 <usart_serial_getchar+0xda>
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  400d24:	4b14      	ldr	r3, [pc, #80]	; (400d78 <usart_serial_getchar+0xfc>)
  400d26:	429c      	cmp	r4, r3
  400d28:	d109      	bne.n	400d3e <usart_serial_getchar+0xc2>
		while (usart_read(p_usart, &val));
  400d2a:	461d      	mov	r5, r3
  400d2c:	4c0c      	ldr	r4, [pc, #48]	; (400d60 <usart_serial_getchar+0xe4>)
  400d2e:	4628      	mov	r0, r5
  400d30:	a901      	add	r1, sp, #4
  400d32:	47a0      	blx	r4
  400d34:	2800      	cmp	r0, #0
  400d36:	d1fa      	bne.n	400d2e <usart_serial_getchar+0xb2>
		*data = (uint8_t)(val & 0xFF);
  400d38:	9b01      	ldr	r3, [sp, #4]
  400d3a:	7033      	strb	r3, [r6, #0]
  400d3c:	e00b      	b.n	400d56 <usart_serial_getchar+0xda>
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  400d3e:	4b0f      	ldr	r3, [pc, #60]	; (400d7c <usart_serial_getchar+0x100>)
  400d40:	429c      	cmp	r4, r3
  400d42:	d108      	bne.n	400d56 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  400d44:	461d      	mov	r5, r3
  400d46:	4c06      	ldr	r4, [pc, #24]	; (400d60 <usart_serial_getchar+0xe4>)
  400d48:	4628      	mov	r0, r5
  400d4a:	a901      	add	r1, sp, #4
  400d4c:	47a0      	blx	r4
  400d4e:	2800      	cmp	r0, #0
  400d50:	d1fa      	bne.n	400d48 <usart_serial_getchar+0xcc>
		*data = (uint8_t)(val & 0xFF);
  400d52:	9b01      	ldr	r3, [sp, #4]
  400d54:	7033      	strb	r3, [r6, #0]
	}
# endif
#endif /* ifdef USART */

}
  400d56:	b003      	add	sp, #12
  400d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400d5a:	bf00      	nop
  400d5c:	4000c200 	.word	0x4000c200
  400d60:	00400945 	.word	0x00400945
  400d64:	40020200 	.word	0x40020200
  400d68:	40024200 	.word	0x40024200
  400d6c:	40018200 	.word	0x40018200
  400d70:	4001c200 	.word	0x4001c200
  400d74:	40008200 	.word	0x40008200
  400d78:	40040200 	.word	0x40040200
  400d7c:	40034200 	.word	0x40034200

00400d80 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400d80:	b570      	push	{r4, r5, r6, lr}
  400d82:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400d84:	4b30      	ldr	r3, [pc, #192]	; (400e48 <usart_serial_putchar+0xc8>)
  400d86:	4298      	cmp	r0, r3
  400d88:	d108      	bne.n	400d9c <usart_serial_putchar+0x1c>
		while (usart_write(p_usart, c)!=0);
  400d8a:	461e      	mov	r6, r3
  400d8c:	4d2f      	ldr	r5, [pc, #188]	; (400e4c <usart_serial_putchar+0xcc>)
  400d8e:	4630      	mov	r0, r6
  400d90:	4621      	mov	r1, r4
  400d92:	47a8      	blx	r5
  400d94:	2800      	cmp	r0, #0
  400d96:	d1fa      	bne.n	400d8e <usart_serial_putchar+0xe>
		return 1;
  400d98:	2001      	movs	r0, #1
  400d9a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400d9c:	4b2c      	ldr	r3, [pc, #176]	; (400e50 <usart_serial_putchar+0xd0>)
  400d9e:	4298      	cmp	r0, r3
  400da0:	d108      	bne.n	400db4 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
  400da2:	461e      	mov	r6, r3
  400da4:	4d29      	ldr	r5, [pc, #164]	; (400e4c <usart_serial_putchar+0xcc>)
  400da6:	4630      	mov	r0, r6
  400da8:	4621      	mov	r1, r4
  400daa:	47a8      	blx	r5
  400dac:	2800      	cmp	r0, #0
  400dae:	d1fa      	bne.n	400da6 <usart_serial_putchar+0x26>
		return 1;
  400db0:	2001      	movs	r0, #1
  400db2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400db4:	4b27      	ldr	r3, [pc, #156]	; (400e54 <usart_serial_putchar+0xd4>)
  400db6:	4298      	cmp	r0, r3
  400db8:	d108      	bne.n	400dcc <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400dba:	461e      	mov	r6, r3
  400dbc:	4d23      	ldr	r5, [pc, #140]	; (400e4c <usart_serial_putchar+0xcc>)
  400dbe:	4630      	mov	r0, r6
  400dc0:	4621      	mov	r1, r4
  400dc2:	47a8      	blx	r5
  400dc4:	2800      	cmp	r0, #0
  400dc6:	d1fa      	bne.n	400dbe <usart_serial_putchar+0x3e>
		return 1;
  400dc8:	2001      	movs	r0, #1
  400dca:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  400dcc:	4b22      	ldr	r3, [pc, #136]	; (400e58 <usart_serial_putchar+0xd8>)
  400dce:	4298      	cmp	r0, r3
  400dd0:	d108      	bne.n	400de4 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400dd2:	461e      	mov	r6, r3
  400dd4:	4d1d      	ldr	r5, [pc, #116]	; (400e4c <usart_serial_putchar+0xcc>)
  400dd6:	4630      	mov	r0, r6
  400dd8:	4621      	mov	r1, r4
  400dda:	47a8      	blx	r5
  400ddc:	2800      	cmp	r0, #0
  400dde:	d1fa      	bne.n	400dd6 <usart_serial_putchar+0x56>
		return 1;
  400de0:	2001      	movs	r0, #1
  400de2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  400de4:	4b1d      	ldr	r3, [pc, #116]	; (400e5c <usart_serial_putchar+0xdc>)
  400de6:	4298      	cmp	r0, r3
  400de8:	d108      	bne.n	400dfc <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  400dea:	461e      	mov	r6, r3
  400dec:	4d17      	ldr	r5, [pc, #92]	; (400e4c <usart_serial_putchar+0xcc>)
  400dee:	4630      	mov	r0, r6
  400df0:	4621      	mov	r1, r4
  400df2:	47a8      	blx	r5
  400df4:	2800      	cmp	r0, #0
  400df6:	d1fa      	bne.n	400dee <usart_serial_putchar+0x6e>
		return 1;
  400df8:	2001      	movs	r0, #1
  400dfa:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  400dfc:	4b18      	ldr	r3, [pc, #96]	; (400e60 <usart_serial_putchar+0xe0>)
  400dfe:	4298      	cmp	r0, r3
  400e00:	d108      	bne.n	400e14 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  400e02:	461e      	mov	r6, r3
  400e04:	4d11      	ldr	r5, [pc, #68]	; (400e4c <usart_serial_putchar+0xcc>)
  400e06:	4630      	mov	r0, r6
  400e08:	4621      	mov	r1, r4
  400e0a:	47a8      	blx	r5
  400e0c:	2800      	cmp	r0, #0
  400e0e:	d1fa      	bne.n	400e06 <usart_serial_putchar+0x86>
		return 1;
  400e10:	2001      	movs	r0, #1
  400e12:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  400e14:	4b13      	ldr	r3, [pc, #76]	; (400e64 <usart_serial_putchar+0xe4>)
  400e16:	4298      	cmp	r0, r3
  400e18:	d108      	bne.n	400e2c <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  400e1a:	461e      	mov	r6, r3
  400e1c:	4d0b      	ldr	r5, [pc, #44]	; (400e4c <usart_serial_putchar+0xcc>)
  400e1e:	4630      	mov	r0, r6
  400e20:	4621      	mov	r1, r4
  400e22:	47a8      	blx	r5
  400e24:	2800      	cmp	r0, #0
  400e26:	d1fa      	bne.n	400e1e <usart_serial_putchar+0x9e>
		return 1;
  400e28:	2001      	movs	r0, #1
  400e2a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  400e2c:	4b0e      	ldr	r3, [pc, #56]	; (400e68 <usart_serial_putchar+0xe8>)
  400e2e:	4298      	cmp	r0, r3
  400e30:	d108      	bne.n	400e44 <usart_serial_putchar+0xc4>
		while (usart_write(p_usart, c)!=0);
  400e32:	461e      	mov	r6, r3
  400e34:	4d05      	ldr	r5, [pc, #20]	; (400e4c <usart_serial_putchar+0xcc>)
  400e36:	4630      	mov	r0, r6
  400e38:	4621      	mov	r1, r4
  400e3a:	47a8      	blx	r5
  400e3c:	2800      	cmp	r0, #0
  400e3e:	d1fa      	bne.n	400e36 <usart_serial_putchar+0xb6>
		return 1;
  400e40:	2001      	movs	r0, #1
  400e42:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
#endif /* ifdef USART */

	return 0;
  400e44:	2000      	movs	r0, #0
}
  400e46:	bd70      	pop	{r4, r5, r6, pc}
  400e48:	4000c200 	.word	0x4000c200
  400e4c:	00400931 	.word	0x00400931
  400e50:	40020200 	.word	0x40020200
  400e54:	40024200 	.word	0x40024200
  400e58:	40018200 	.word	0x40018200
  400e5c:	4001c200 	.word	0x4001c200
  400e60:	40008200 	.word	0x40008200
  400e64:	40040200 	.word	0x40040200
  400e68:	40034200 	.word	0x40034200

00400e6c <display_menu>:

/**
 * \brief Display the user menu on the terminal.
 */
static void display_menu(void)
{
  400e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t i;

	puts("\n\rMenu :\n\r"
  400e6e:	4809      	ldr	r0, [pc, #36]	; (400e94 <display_menu+0x28>)
  400e70:	4b09      	ldr	r3, [pc, #36]	; (400e98 <display_menu+0x2c>)
  400e72:	4798      	blx	r3
  400e74:	4d09      	ldr	r5, [pc, #36]	; (400e9c <display_menu+0x30>)
			"------\r");

	for (i = 0; i < NUM_SPCK_CONFIGURATIONS; i++) {
  400e76:	2400      	movs	r4, #0
		printf("  %u: Set SPCK = %7lu Hz\n\r", (unsigned)i,
  400e78:	4f09      	ldr	r7, [pc, #36]	; (400ea0 <display_menu+0x34>)
  400e7a:	4e0a      	ldr	r6, [pc, #40]	; (400ea4 <display_menu+0x38>)
  400e7c:	4638      	mov	r0, r7
  400e7e:	4621      	mov	r1, r4
  400e80:	f855 2b04 	ldr.w	r2, [r5], #4
  400e84:	47b0      	blx	r6
	uint32_t i;

	puts("\n\rMenu :\n\r"
			"------\r");

	for (i = 0; i < NUM_SPCK_CONFIGURATIONS; i++) {
  400e86:	3401      	adds	r4, #1
  400e88:	2c04      	cmp	r4, #4
  400e8a:	d1f7      	bne.n	400e7c <display_menu+0x10>
		printf("  %u: Set SPCK = %7lu Hz\n\r", (unsigned)i,
			(unsigned long)gs_ul_clock_configurations[i]);
	}
	puts("  t: Perform SPI master\n\r"
  400e8c:	4806      	ldr	r0, [pc, #24]	; (400ea8 <display_menu+0x3c>)
  400e8e:	4b02      	ldr	r3, [pc, #8]	; (400e98 <display_menu+0x2c>)
  400e90:	4798      	blx	r3
  400e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e94:	00405a74 	.word	0x00405a74
  400e98:	0040168d 	.word	0x0040168d
  400e9c:	00405e28 	.word	0x00405e28
  400ea0:	00405a88 	.word	0x00405a88
  400ea4:	00401545 	.word	0x00401545
  400ea8:	00405aa4 	.word	0x00405aa4

00400eac <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
static void spi_master_initialize(void)
{
  400eac:	b538      	push	{r3, r4, r5, lr}
	puts("-I- Initialize SPI as master\r");
  400eae:	4821      	ldr	r0, [pc, #132]	; (400f34 <spi_master_initialize+0x88>)
  400eb0:	4b21      	ldr	r3, [pc, #132]	; (400f38 <spi_master_initialize+0x8c>)
  400eb2:	4798      	blx	r3

#if (SAMG55)
	/* Enable the peripheral and set SPI mode. */
	flexcom_enable(BOARD_FLEXCOM_SPI);
  400eb4:	4c21      	ldr	r4, [pc, #132]	; (400f3c <spi_master_initialize+0x90>)
  400eb6:	4620      	mov	r0, r4
  400eb8:	4b21      	ldr	r3, [pc, #132]	; (400f40 <spi_master_initialize+0x94>)
  400eba:	4798      	blx	r3
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
  400ebc:	4620      	mov	r0, r4
  400ebe:	2102      	movs	r1, #2
  400ec0:	4b20      	ldr	r3, [pc, #128]	; (400f44 <spi_master_initialize+0x98>)
  400ec2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400ec4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  400ec8:	2302      	movs	r3, #2
  400eca:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400ecc:	2380      	movs	r3, #128	; 0x80
  400ece:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  400ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400ed4:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400ed6:	6863      	ldr	r3, [r4, #4]
  400ed8:	f043 0301 	orr.w	r3, r3, #1
  400edc:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400ede:	6863      	ldr	r3, [r4, #4]
  400ee0:	f043 0310 	orr.w	r3, r3, #16
  400ee4:	6063      	str	r3, [r4, #4]
	spi_disable(SPI_MASTER_BASE);
	spi_reset(SPI_MASTER_BASE);
	spi_set_lastxfer(SPI_MASTER_BASE);
	spi_set_master_mode(SPI_MASTER_BASE);
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
  400ee6:	4620      	mov	r0, r4
  400ee8:	210e      	movs	r1, #14
  400eea:	4b17      	ldr	r3, [pc, #92]	; (400f48 <spi_master_initialize+0x9c>)
  400eec:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  400eee:	4620      	mov	r0, r4
  400ef0:	2100      	movs	r1, #0
  400ef2:	460a      	mov	r2, r1
  400ef4:	4b15      	ldr	r3, [pc, #84]	; (400f4c <spi_master_initialize+0xa0>)
  400ef6:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  400ef8:	4620      	mov	r0, r4
  400efa:	2100      	movs	r1, #0
  400efc:	460a      	mov	r2, r1
  400efe:	4b14      	ldr	r3, [pc, #80]	; (400f50 <spi_master_initialize+0xa4>)
  400f00:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_MASTER_BASE, SPI_CHIP_SEL,
  400f02:	4620      	mov	r0, r4
  400f04:	2100      	movs	r1, #0
  400f06:	460a      	mov	r2, r1
  400f08:	4b12      	ldr	r3, [pc, #72]	; (400f54 <spi_master_initialize+0xa8>)
  400f0a:	4798      	blx	r3
			SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(SPI_MASTER_BASE, SPI_CHIP_SEL,
			(sysclk_get_cpu_hz() / gs_ul_spi_clock));
  400f0c:	4b12      	ldr	r3, [pc, #72]	; (400f58 <spi_master_initialize+0xac>)
  400f0e:	681a      	ldr	r2, [r3, #0]
  400f10:	4b12      	ldr	r3, [pc, #72]	; (400f5c <spi_master_initialize+0xb0>)
  400f12:	fbb3 f2f2 	udiv	r2, r3, r2
	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
	spi_set_clock_polarity(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
	spi_set_clock_phase(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, SPI_CHIP_SEL,
			SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(SPI_MASTER_BASE, SPI_CHIP_SEL,
  400f16:	4620      	mov	r0, r4
  400f18:	2100      	movs	r1, #0
  400f1a:	b2d2      	uxtb	r2, r2
  400f1c:	4b10      	ldr	r3, [pc, #64]	; (400f60 <spi_master_initialize+0xb4>)
  400f1e:	4798      	blx	r3
			(sysclk_get_cpu_hz() / gs_ul_spi_clock));
	spi_set_transfer_delay(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_DLYBS,
  400f20:	4620      	mov	r0, r4
  400f22:	2100      	movs	r1, #0
  400f24:	2240      	movs	r2, #64	; 0x40
  400f26:	2310      	movs	r3, #16
  400f28:	4d0e      	ldr	r5, [pc, #56]	; (400f64 <spi_master_initialize+0xb8>)
  400f2a:	47a8      	blx	r5
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400f2c:	2301      	movs	r3, #1
  400f2e:	6023      	str	r3, [r4, #0]
  400f30:	bd38      	pop	{r3, r4, r5, pc}
  400f32:	bf00      	nop
  400f34:	00405ae0 	.word	0x00405ae0
  400f38:	0040168d 	.word	0x0040168d
  400f3c:	40008000 	.word	0x40008000
  400f40:	00400409 	.word	0x00400409
  400f44:	00400585 	.word	0x00400585
  400f48:	00400709 	.word	0x00400709
  400f4c:	00400799 	.word	0x00400799
  400f50:	004007b9 	.word	0x004007b9
  400f54:	004007d9 	.word	0x004007d9
  400f58:	20000090 	.word	0x20000090
  400f5c:	07270000 	.word	0x07270000
  400f60:	004007ed 	.word	0x004007ed
  400f64:	00400805 	.word	0x00400805

00400f68 <FLEXCOM5_Handler>:
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  400f68:	4b50      	ldr	r3, [pc, #320]	; (4010ac <FLEXCOM5_Handler+0x144>)
  400f6a:	691b      	ldr	r3, [r3, #16]
{
	uint32_t new_cmd = 0;
	static uint16_t data;
	uint8_t uc_pcs;

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) {
  400f6c:	f013 0f01 	tst.w	r3, #1
  400f70:	f000 809a 	beq.w	4010a8 <FLEXCOM5_Handler+0x140>

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
  400f74:	b530      	push	{r4, r5, lr}
  400f76:	b083      	sub	sp, #12
	uint32_t new_cmd = 0;
	static uint16_t data;
	uint8_t uc_pcs;

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) {
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);
  400f78:	4c4d      	ldr	r4, [pc, #308]	; (4010b0 <FLEXCOM5_Handler+0x148>)
  400f7a:	484c      	ldr	r0, [pc, #304]	; (4010ac <FLEXCOM5_Handler+0x144>)
  400f7c:	4621      	mov	r1, r4
  400f7e:	f10d 0207 	add.w	r2, sp, #7
  400f82:	4b4c      	ldr	r3, [pc, #304]	; (4010b4 <FLEXCOM5_Handler+0x14c>)
  400f84:	4798      	blx	r3
		gs_puc_transfer_buffer[gs_ul_transfer_index] = data;
  400f86:	4b4c      	ldr	r3, [pc, #304]	; (4010b8 <FLEXCOM5_Handler+0x150>)
  400f88:	681d      	ldr	r5, [r3, #0]
  400f8a:	4a4c      	ldr	r2, [pc, #304]	; (4010bc <FLEXCOM5_Handler+0x154>)
  400f8c:	6813      	ldr	r3, [r2, #0]
  400f8e:	8821      	ldrh	r1, [r4, #0]
  400f90:	54e9      	strb	r1, [r5, r3]
		gs_ul_transfer_index++;
  400f92:	3301      	adds	r3, #1
  400f94:	6013      	str	r3, [r2, #0]
		gs_ul_transfer_length--;
  400f96:	494a      	ldr	r1, [pc, #296]	; (4010c0 <FLEXCOM5_Handler+0x158>)
  400f98:	680a      	ldr	r2, [r1, #0]
  400f9a:	3a01      	subs	r2, #1
  400f9c:	600a      	str	r2, [r1, #0]
		if (gs_ul_transfer_length) {
  400f9e:	b14a      	cbz	r2, 400fb4 <FLEXCOM5_Handler+0x4c>
			spi_write(SPI_SLAVE_BASE,
  400fa0:	4842      	ldr	r0, [pc, #264]	; (4010ac <FLEXCOM5_Handler+0x144>)
  400fa2:	5ce9      	ldrb	r1, [r5, r3]
  400fa4:	2200      	movs	r2, #0
  400fa6:	4613      	mov	r3, r2
  400fa8:	4c46      	ldr	r4, [pc, #280]	; (4010c4 <FLEXCOM5_Handler+0x15c>)
  400faa:	47a0      	blx	r4
					gs_puc_transfer_buffer[gs_ul_transfer_index], 0, 0);
		}

		if (!gs_ul_transfer_length) {
  400fac:	4b44      	ldr	r3, [pc, #272]	; (4010c0 <FLEXCOM5_Handler+0x158>)
  400fae:	681b      	ldr	r3, [r3, #0]
  400fb0:	2b00      	cmp	r3, #0
  400fb2:	d177      	bne.n	4010a4 <FLEXCOM5_Handler+0x13c>
/**
 * \brief  SPI command block process.
 */
static void spi_slave_command_process(void)
{
	if (gs_ul_spi_cmd == CMD_END) {
  400fb4:	4b44      	ldr	r3, [pc, #272]	; (4010c8 <FLEXCOM5_Handler+0x160>)
  400fb6:	681b      	ldr	r3, [r3, #0]
  400fb8:	4a44      	ldr	r2, [pc, #272]	; (4010cc <FLEXCOM5_Handler+0x164>)
  400fba:	4293      	cmp	r3, r2
  400fbc:	d106      	bne.n	400fcc <FLEXCOM5_Handler+0x64>
		gs_ul_spi_state = SLAVE_STATE_IDLE;
  400fbe:	2300      	movs	r3, #0
  400fc0:	4a43      	ldr	r2, [pc, #268]	; (4010d0 <FLEXCOM5_Handler+0x168>)
  400fc2:	6013      	str	r3, [r2, #0]
		gs_spi_status.ul_total_block_number = 0;
  400fc4:	4a43      	ldr	r2, [pc, #268]	; (4010d4 <FLEXCOM5_Handler+0x16c>)
  400fc6:	6013      	str	r3, [r2, #0]
		gs_spi_status.ul_total_command_number = 0;
  400fc8:	6053      	str	r3, [r2, #4]
  400fca:	e029      	b.n	401020 <FLEXCOM5_Handler+0xb8>
	} else {
		switch (gs_ul_spi_state) {
  400fcc:	4a40      	ldr	r2, [pc, #256]	; (4010d0 <FLEXCOM5_Handler+0x168>)
  400fce:	6812      	ldr	r2, [r2, #0]
  400fd0:	2a03      	cmp	r2, #3
  400fd2:	d825      	bhi.n	401020 <FLEXCOM5_Handler+0xb8>
  400fd4:	e8df f002 	tbb	[pc, r2]
  400fd8:	21150902 	.word	0x21150902
		case SLAVE_STATE_IDLE:
			/* Only CMD_TEST accepted. */
			if (gs_ul_spi_cmd == CMD_TEST) {
  400fdc:	f1b3 3f10 	cmp.w	r3, #269488144	; 0x10101010
  400fe0:	d11e      	bne.n	401020 <FLEXCOM5_Handler+0xb8>
				gs_ul_spi_state = SLAVE_STATE_TEST;
  400fe2:	2201      	movs	r2, #1
  400fe4:	4b3a      	ldr	r3, [pc, #232]	; (4010d0 <FLEXCOM5_Handler+0x168>)
  400fe6:	601a      	str	r2, [r3, #0]
  400fe8:	e01a      	b.n	401020 <FLEXCOM5_Handler+0xb8>
			}
			break;

		case SLAVE_STATE_TEST:
			/* Only CMD_DATA accepted. */
			if ((gs_ul_spi_cmd & CMD_DATA_MSK) == CMD_DATA) {
  400fea:	0c1a      	lsrs	r2, r3, #16
  400fec:	0412      	lsls	r2, r2, #16
  400fee:	493a      	ldr	r1, [pc, #232]	; (4010d8 <FLEXCOM5_Handler+0x170>)
  400ff0:	428a      	cmp	r2, r1
  400ff2:	d102      	bne.n	400ffa <FLEXCOM5_Handler+0x92>
				gs_ul_spi_state = SLAVE_STATE_DATA;
  400ff4:	2102      	movs	r1, #2
  400ff6:	4a36      	ldr	r2, [pc, #216]	; (4010d0 <FLEXCOM5_Handler+0x168>)
  400ff8:	6011      	str	r1, [r2, #0]
			}
			gs_ul_test_block_number = gs_ul_spi_cmd & DATA_BLOCK_MSK;
  400ffa:	b29b      	uxth	r3, r3
  400ffc:	4a37      	ldr	r2, [pc, #220]	; (4010dc <FLEXCOM5_Handler+0x174>)
  400ffe:	6013      	str	r3, [r2, #0]
  401000:	e00e      	b.n	401020 <FLEXCOM5_Handler+0xb8>
			break;

		case SLAVE_STATE_DATA:
			gs_spi_status.ul_total_block_number++;
  401002:	4a34      	ldr	r2, [pc, #208]	; (4010d4 <FLEXCOM5_Handler+0x16c>)
  401004:	6813      	ldr	r3, [r2, #0]
  401006:	3301      	adds	r3, #1
  401008:	6013      	str	r3, [r2, #0]

			if (gs_spi_status.ul_total_block_number == 
  40100a:	4a34      	ldr	r2, [pc, #208]	; (4010dc <FLEXCOM5_Handler+0x174>)
  40100c:	6812      	ldr	r2, [r2, #0]
  40100e:	4293      	cmp	r3, r2
  401010:	d106      	bne.n	401020 <FLEXCOM5_Handler+0xb8>
					gs_ul_test_block_number) {
				gs_ul_spi_state = SLAVE_STATE_STATUS_ENTRY;
  401012:	2203      	movs	r2, #3
  401014:	4b2e      	ldr	r3, [pc, #184]	; (4010d0 <FLEXCOM5_Handler+0x168>)
  401016:	601a      	str	r2, [r3, #0]
  401018:	e002      	b.n	401020 <FLEXCOM5_Handler+0xb8>
			}
			break;

		case SLAVE_STATE_STATUS_ENTRY:
			gs_ul_spi_state = SLAVE_STATE_STATUS;
  40101a:	2204      	movs	r2, #4
  40101c:	4b2c      	ldr	r3, [pc, #176]	; (4010d0 <FLEXCOM5_Handler+0x168>)
  40101e:	601a      	str	r2, [r3, #0]
			spi_slave_command_process();
			new_cmd = 1;
		}

		if (new_cmd) {
			if (gs_ul_spi_cmd != CMD_END) {
  401020:	4b29      	ldr	r3, [pc, #164]	; (4010c8 <FLEXCOM5_Handler+0x160>)
  401022:	6819      	ldr	r1, [r3, #0]
  401024:	4b29      	ldr	r3, [pc, #164]	; (4010cc <FLEXCOM5_Handler+0x164>)
  401026:	4299      	cmp	r1, r3
  401028:	d006      	beq.n	401038 <FLEXCOM5_Handler+0xd0>
				gs_spi_status.ul_cmd_list[gs_spi_status.ul_total_command_number]
  40102a:	4a2a      	ldr	r2, [pc, #168]	; (4010d4 <FLEXCOM5_Handler+0x16c>)
  40102c:	6853      	ldr	r3, [r2, #4]
						= gs_ul_spi_cmd;
  40102e:	1c98      	adds	r0, r3, #2
  401030:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
				gs_spi_status.ul_total_command_number++;
  401034:	3301      	adds	r3, #1
  401036:	6053      	str	r3, [r2, #4]
/**
 * \brief  Start waiting new command.
 */
static void spi_slave_new_command(void)
{
	switch (gs_ul_spi_state) {
  401038:	4b25      	ldr	r3, [pc, #148]	; (4010d0 <FLEXCOM5_Handler+0x168>)
  40103a:	681b      	ldr	r3, [r3, #0]
  40103c:	2b05      	cmp	r3, #5
  40103e:	d831      	bhi.n	4010a4 <FLEXCOM5_Handler+0x13c>
  401040:	e8df f003 	tbb	[pc, r3]
  401044:	1c110a03 	.word	0x1c110a03
  401048:	0326      	.short	0x0326
	case SLAVE_STATE_IDLE:
	case SLAVE_STATE_END:
		gs_ul_spi_cmd = RC_SYN;
  40104a:	481f      	ldr	r0, [pc, #124]	; (4010c8 <FLEXCOM5_Handler+0x160>)
  40104c:	4b24      	ldr	r3, [pc, #144]	; (4010e0 <FLEXCOM5_Handler+0x178>)
  40104e:	6003      	str	r3, [r0, #0]
		spi_slave_transfer(&gs_ul_spi_cmd, sizeof(gs_ul_spi_cmd));
  401050:	2104      	movs	r1, #4
  401052:	4b24      	ldr	r3, [pc, #144]	; (4010e4 <FLEXCOM5_Handler+0x17c>)
  401054:	4798      	blx	r3
  401056:	e025      	b.n	4010a4 <FLEXCOM5_Handler+0x13c>
		break;

	case SLAVE_STATE_TEST:
		gs_ul_spi_cmd = RC_RDY;
  401058:	481b      	ldr	r0, [pc, #108]	; (4010c8 <FLEXCOM5_Handler+0x160>)
  40105a:	4b23      	ldr	r3, [pc, #140]	; (4010e8 <FLEXCOM5_Handler+0x180>)
  40105c:	6003      	str	r3, [r0, #0]
		spi_slave_transfer(&gs_ul_spi_cmd, sizeof(gs_ul_spi_cmd));
  40105e:	2104      	movs	r1, #4
  401060:	4b20      	ldr	r3, [pc, #128]	; (4010e4 <FLEXCOM5_Handler+0x17c>)
  401062:	4798      	blx	r3
  401064:	e01e      	b.n	4010a4 <FLEXCOM5_Handler+0x13c>
		break;

	case SLAVE_STATE_DATA:
		if (gs_spi_status.ul_total_block_number < gs_ul_test_block_number) {
  401066:	4b1b      	ldr	r3, [pc, #108]	; (4010d4 <FLEXCOM5_Handler+0x16c>)
  401068:	681a      	ldr	r2, [r3, #0]
  40106a:	4b1c      	ldr	r3, [pc, #112]	; (4010dc <FLEXCOM5_Handler+0x174>)
  40106c:	681b      	ldr	r3, [r3, #0]
  40106e:	429a      	cmp	r2, r3
  401070:	d218      	bcs.n	4010a4 <FLEXCOM5_Handler+0x13c>
			spi_slave_transfer(gs_uc_spi_buffer, COMM_BUFFER_SIZE);
  401072:	481e      	ldr	r0, [pc, #120]	; (4010ec <FLEXCOM5_Handler+0x184>)
  401074:	2140      	movs	r1, #64	; 0x40
  401076:	4b1b      	ldr	r3, [pc, #108]	; (4010e4 <FLEXCOM5_Handler+0x17c>)
  401078:	4798      	blx	r3
  40107a:	e013      	b.n	4010a4 <FLEXCOM5_Handler+0x13c>
		}
		break;

	case SLAVE_STATE_STATUS_ENTRY:
		gs_ul_spi_cmd = RC_RDY;
  40107c:	4812      	ldr	r0, [pc, #72]	; (4010c8 <FLEXCOM5_Handler+0x160>)
  40107e:	4b1a      	ldr	r3, [pc, #104]	; (4010e8 <FLEXCOM5_Handler+0x180>)
  401080:	6003      	str	r3, [r0, #0]
		spi_slave_transfer(&gs_ul_spi_cmd, sizeof(gs_ul_spi_cmd));
  401082:	2104      	movs	r1, #4
  401084:	4b17      	ldr	r3, [pc, #92]	; (4010e4 <FLEXCOM5_Handler+0x17c>)
  401086:	4798      	blx	r3
		gs_ul_spi_state = SLAVE_STATE_STATUS;
  401088:	2204      	movs	r2, #4
  40108a:	4b11      	ldr	r3, [pc, #68]	; (4010d0 <FLEXCOM5_Handler+0x168>)
  40108c:	601a      	str	r2, [r3, #0]
  40108e:	e009      	b.n	4010a4 <FLEXCOM5_Handler+0x13c>
		break;

	case SLAVE_STATE_STATUS:
		gs_ul_spi_cmd = RC_SYN;
  401090:	4a13      	ldr	r2, [pc, #76]	; (4010e0 <FLEXCOM5_Handler+0x178>)
  401092:	4b0d      	ldr	r3, [pc, #52]	; (4010c8 <FLEXCOM5_Handler+0x160>)
  401094:	601a      	str	r2, [r3, #0]
		spi_slave_transfer(&gs_spi_status, sizeof(struct status_block_t));
  401096:	480f      	ldr	r0, [pc, #60]	; (4010d4 <FLEXCOM5_Handler+0x16c>)
  401098:	2158      	movs	r1, #88	; 0x58
  40109a:	4b12      	ldr	r3, [pc, #72]	; (4010e4 <FLEXCOM5_Handler+0x17c>)
  40109c:	4798      	blx	r3
		gs_ul_spi_state = SLAVE_STATE_END;
  40109e:	2205      	movs	r2, #5
  4010a0:	4b0b      	ldr	r3, [pc, #44]	; (4010d0 <FLEXCOM5_Handler+0x168>)
  4010a2:	601a      	str	r2, [r3, #0]
				gs_spi_status.ul_total_command_number++;
			}
			spi_slave_new_command();
		}
	}
}
  4010a4:	b003      	add	sp, #12
  4010a6:	bd30      	pop	{r4, r5, pc}
  4010a8:	4770      	bx	lr
  4010aa:	bf00      	nop
  4010ac:	40008400 	.word	0x40008400
  4010b0:	2000092c 	.word	0x2000092c
  4010b4:	00400721 	.word	0x00400721
  4010b8:	20000980 	.word	0x20000980
  4010bc:	200009dc 	.word	0x200009dc
  4010c0:	20000938 	.word	0x20000938
  4010c4:	00400761 	.word	0x00400761
  4010c8:	20000094 	.word	0x20000094
  4010cc:	68390484 	.word	0x68390484
  4010d0:	20000934 	.word	0x20000934
  4010d4:	20000984 	.word	0x20000984
  4010d8:	29380000 	.word	0x29380000
  4010dc:	20000930 	.word	0x20000930
  4010e0:	55aa55aa 	.word	0x55aa55aa
  4010e4:	00400bf1 	.word	0x00400bf1
  4010e8:	12345678 	.word	0x12345678
  4010ec:	2000093c 	.word	0x2000093c

004010f0 <main>:
 * \brief Application entry point for SPI example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  4010f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010f4:	b08b      	sub	sp, #44	; 0x2c
	uint8_t uc_key;

	/* Initialize the SAM system. */
	sysclk_init();
  4010f6:	4b9b      	ldr	r3, [pc, #620]	; (401364 <main+0x274>)
  4010f8:	4798      	blx	r3
	board_init();
  4010fa:	4b9b      	ldr	r3, [pc, #620]	; (401368 <main+0x278>)
  4010fc:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4010fe:	4d9b      	ldr	r5, [pc, #620]	; (40136c <main+0x27c>)
  401100:	4b9b      	ldr	r3, [pc, #620]	; (401370 <main+0x280>)
  401102:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401104:	4a9b      	ldr	r2, [pc, #620]	; (401374 <main+0x284>)
  401106:	4b9c      	ldr	r3, [pc, #624]	; (401378 <main+0x288>)
  401108:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40110a:	4a9c      	ldr	r2, [pc, #624]	; (40137c <main+0x28c>)
  40110c:	4b9c      	ldr	r3, [pc, #624]	; (401380 <main+0x290>)
  40110e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401110:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401114:	9303      	str	r3, [sp, #12]
	usart_settings.char_length = opt->charlength;
  401116:	23c0      	movs	r3, #192	; 0xc0
  401118:	9304      	str	r3, [sp, #16]
	usart_settings.parity_type = opt->paritytype;
  40111a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40111e:	9305      	str	r3, [sp, #20]
	usart_settings.stop_bits= opt->stopbits;
  401120:	2400      	movs	r4, #0
  401122:	9406      	str	r4, [sp, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401124:	9407      	str	r4, [sp, #28]
# endif
# ifdef USART7
	if (USART7 == p_usart) {
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM7);
  401126:	4e97      	ldr	r6, [pc, #604]	; (401384 <main+0x294>)
  401128:	4630      	mov	r0, r6
  40112a:	4b97      	ldr	r3, [pc, #604]	; (401388 <main+0x298>)
  40112c:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM7, FLEXCOM_USART);
  40112e:	4630      	mov	r0, r6
  401130:	2101      	movs	r1, #1
  401132:	4b96      	ldr	r3, [pc, #600]	; (40138c <main+0x29c>)
  401134:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART7);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401136:	4628      	mov	r0, r5
  401138:	a903      	add	r1, sp, #12
  40113a:	4a95      	ldr	r2, [pc, #596]	; (401390 <main+0x2a0>)
  40113c:	4b95      	ldr	r3, [pc, #596]	; (401394 <main+0x2a4>)
  40113e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401140:	4628      	mov	r0, r5
  401142:	4b95      	ldr	r3, [pc, #596]	; (401398 <main+0x2a8>)
  401144:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401146:	4628      	mov	r0, r5
  401148:	4b94      	ldr	r3, [pc, #592]	; (40139c <main+0x2ac>)
  40114a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40114c:	4e94      	ldr	r6, [pc, #592]	; (4013a0 <main+0x2b0>)
  40114e:	6833      	ldr	r3, [r6, #0]
  401150:	6898      	ldr	r0, [r3, #8]
  401152:	4621      	mov	r1, r4
  401154:	4d93      	ldr	r5, [pc, #588]	; (4013a4 <main+0x2b4>)
  401156:	47a8      	blx	r5
	setbuf(stdin, NULL);
  401158:	6833      	ldr	r3, [r6, #0]
  40115a:	6858      	ldr	r0, [r3, #4]
  40115c:	4621      	mov	r1, r4
  40115e:	47a8      	blx	r5

	/* Initialize the console UART. */
	configure_console();

	/* Output example information. */
	puts(STRING_HEADER);
  401160:	4891      	ldr	r0, [pc, #580]	; (4013a8 <main+0x2b8>)
  401162:	4b92      	ldr	r3, [pc, #584]	; (4013ac <main+0x2bc>)
  401164:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401166:	4b92      	ldr	r3, [pc, #584]	; (4013b0 <main+0x2c0>)
  401168:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40116c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401170:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401174:	f883 4315 	strb.w	r4, [r3, #789]	; 0x315
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401178:	601a      	str	r2, [r3, #0]
static void spi_slave_initialize(void)
{
	uint32_t i;

	/* Reset status */
	gs_spi_status.ul_total_block_number = 0;
  40117a:	4b8e      	ldr	r3, [pc, #568]	; (4013b4 <main+0x2c4>)
  40117c:	601c      	str	r4, [r3, #0]
	gs_spi_status.ul_total_command_number = 0;
  40117e:	461a      	mov	r2, r3
  401180:	f842 4f04 	str.w	r4, [r2, #4]!
  401184:	9201      	str	r2, [sp, #4]
  401186:	3354      	adds	r3, #84	; 0x54
	for (i = 0; i < NB_STATUS_CMD; i++) {
		gs_spi_status.ul_cmd_list[i] = 0;
  401188:	4621      	mov	r1, r4
  40118a:	f842 1f04 	str.w	r1, [r2, #4]!
	uint32_t i;

	/* Reset status */
	gs_spi_status.ul_total_block_number = 0;
	gs_spi_status.ul_total_command_number = 0;
	for (i = 0; i < NB_STATUS_CMD; i++) {
  40118e:	429a      	cmp	r2, r3
  401190:	d1fb      	bne.n	40118a <main+0x9a>
		gs_spi_status.ul_cmd_list[i] = 0;
	}
	gs_ul_spi_state = SLAVE_STATE_IDLE;
  401192:	2500      	movs	r5, #0
  401194:	4b88      	ldr	r3, [pc, #544]	; (4013b8 <main+0x2c8>)
  401196:	601d      	str	r5, [r3, #0]
	gs_ul_spi_cmd = RC_SYN;
  401198:	4e88      	ldr	r6, [pc, #544]	; (4013bc <main+0x2cc>)
  40119a:	4b89      	ldr	r3, [pc, #548]	; (4013c0 <main+0x2d0>)
  40119c:	6033      	str	r3, [r6, #0]

	puts("-I- Initialize SPI as slave \r");
  40119e:	4889      	ldr	r0, [pc, #548]	; (4013c4 <main+0x2d4>)
  4011a0:	4b82      	ldr	r3, [pc, #520]	; (4013ac <main+0x2bc>)
  4011a2:	4798      	blx	r3
#if (SAMG55)
	/* Enable the peripheral and set SPI mode. */
	flexcom_enable(BOARD_FLEXCOM_SPI);
  4011a4:	4c88      	ldr	r4, [pc, #544]	; (4013c8 <main+0x2d8>)
  4011a6:	4620      	mov	r0, r4
  4011a8:	4b77      	ldr	r3, [pc, #476]	; (401388 <main+0x298>)
  4011aa:	4798      	blx	r3
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
  4011ac:	4620      	mov	r0, r4
  4011ae:	2102      	movs	r1, #2
  4011b0:	4b76      	ldr	r3, [pc, #472]	; (40138c <main+0x29c>)
  4011b2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4011b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  4011b8:	2302      	movs	r3, #2
  4011ba:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4011bc:	2380      	movs	r3, #128	; 0x80
  4011be:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
  4011c0:	6863      	ldr	r3, [r4, #4]
  4011c2:	f023 0301 	bic.w	r3, r3, #1
  4011c6:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4011c8:	6863      	ldr	r3, [r4, #4]
  4011ca:	f043 0310 	orr.w	r3, r3, #16
  4011ce:	6063      	str	r3, [r4, #4]
#endif
	spi_disable(SPI_SLAVE_BASE);
	spi_reset(SPI_SLAVE_BASE);
	spi_set_slave_mode(SPI_SLAVE_BASE);
	spi_disable_mode_fault_detect(SPI_SLAVE_BASE);
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_PCS);
  4011d0:	4620      	mov	r0, r4
  4011d2:	210e      	movs	r1, #14
  4011d4:	4b7d      	ldr	r3, [pc, #500]	; (4013cc <main+0x2dc>)
  4011d6:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  4011d8:	4620      	mov	r0, r4
  4011da:	4629      	mov	r1, r5
  4011dc:	462a      	mov	r2, r5
  4011de:	4b7c      	ldr	r3, [pc, #496]	; (4013d0 <main+0x2e0>)
  4011e0:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  4011e2:	4620      	mov	r0, r4
  4011e4:	4629      	mov	r1, r5
  4011e6:	462a      	mov	r2, r5
  4011e8:	4b7a      	ldr	r3, [pc, #488]	; (4013d4 <main+0x2e4>)
  4011ea:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
  4011ec:	4620      	mov	r0, r4
  4011ee:	4629      	mov	r1, r5
  4011f0:	462a      	mov	r2, r5
  4011f2:	4b79      	ldr	r3, [pc, #484]	; (4013d8 <main+0x2e8>)
  4011f4:	4798      	blx	r3
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  4011f6:	2301      	movs	r3, #1
  4011f8:	6163      	str	r3, [r4, #20]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4011fa:	6023      	str	r3, [r4, #0]
	spi_enable_interrupt(SPI_SLAVE_BASE, SPI_IER_RDRF);
	spi_enable(SPI_SLAVE_BASE);

	/* Start waiting command. */
	spi_slave_transfer(&gs_ul_spi_cmd, sizeof(gs_ul_spi_cmd));
  4011fc:	4630      	mov	r0, r6
  4011fe:	2104      	movs	r1, #4
  401200:	4b76      	ldr	r3, [pc, #472]	; (4013dc <main+0x2ec>)
  401202:	4798      	blx	r3
	NVIC_EnableIRQ(SPI_IRQn);

	spi_slave_initialize();

	/* Display menu. */
	display_menu();
  401204:	4b76      	ldr	r3, [pc, #472]	; (4013e0 <main+0x2f0>)
  401206:	4798      	blx	r3
	 */
	while (1) {
		cmd = CMD_TEST;
		puts("-> Master sending CMD_TEST... \r");
		spi_master_transfer(&cmd, sizeof(cmd));
		if (cmd == RC_RDY) {
  401208:	4d76      	ldr	r5, [pc, #472]	; (4013e4 <main+0x2f4>)
			}
		}
	}

	for (i = 0; i < MAX_RETRY; i++) {
		cmd = CMD_STATUS;
  40120a:	f8df a22c 	ldr.w	sl, [pc, #556]	; 401438 <main+0x348>
	printf(" \n\r-I- Received  %lu data blocks \n\r",
			(unsigned long)gs_spi_status.ul_total_block_number);

	for (i = 0; i < MAX_RETRY; i++) {
		puts("-> Master sending CMD_END... \r");
		cmd = CMD_END;
  40120e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 40143c <main+0x34c>

	/* Display menu. */
	display_menu();

	while (1) {
		scanf("%c", (char *)&uc_key);
  401212:	4875      	ldr	r0, [pc, #468]	; (4013e8 <main+0x2f8>)
  401214:	f10d 0127 	add.w	r1, sp, #39	; 0x27
  401218:	4b74      	ldr	r3, [pc, #464]	; (4013ec <main+0x2fc>)
  40121a:	4798      	blx	r3

		switch (uc_key) {
  40121c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  401220:	2b68      	cmp	r3, #104	; 0x68
  401222:	d002      	beq.n	40122a <main+0x13a>
  401224:	2b74      	cmp	r3, #116	; 0x74
  401226:	d003      	beq.n	401230 <main+0x140>
  401228:	e11d      	b.n	401466 <main+0x376>
		case 'h':
			display_menu();
  40122a:	4b6d      	ldr	r3, [pc, #436]	; (4013e0 <main+0x2f0>)
  40122c:	4798      	blx	r3
			break;
  40122e:	e7f0      	b.n	401212 <main+0x122>
	uint32_t cmd;
	uint32_t block;
	uint32_t i;

	/* Configure SPI as master, set up SPI clock. */
	spi_master_initialize();
  401230:	4b6f      	ldr	r3, [pc, #444]	; (4013f0 <main+0x300>)
  401232:	4798      	blx	r3
	 * Send CMD_TEST to indicate the start of test, and device shall return
	 * RC_RDY.
	 */
	while (1) {
		cmd = CMD_TEST;
		puts("-> Master sending CMD_TEST... \r");
  401234:	4f6f      	ldr	r7, [pc, #444]	; (4013f4 <main+0x304>)
  401236:	4e5d      	ldr	r6, [pc, #372]	; (4013ac <main+0x2bc>)
	/*
	 * Send CMD_TEST to indicate the start of test, and device shall return
	 * RC_RDY.
	 */
	while (1) {
		cmd = CMD_TEST;
  401238:	ac0a      	add	r4, sp, #40	; 0x28
  40123a:	f04f 3310 	mov.w	r3, #269488144	; 0x10101010
  40123e:	f844 3d1c 	str.w	r3, [r4, #-28]!
		puts("-> Master sending CMD_TEST... \r");
  401242:	4638      	mov	r0, r7
  401244:	47b0      	blx	r6
		spi_master_transfer(&cmd, sizeof(cmd));
  401246:	4620      	mov	r0, r4
  401248:	2104      	movs	r1, #4
  40124a:	4b6b      	ldr	r3, [pc, #428]	; (4013f8 <main+0x308>)
  40124c:	4798      	blx	r3
		if (cmd == RC_RDY) {
  40124e:	9903      	ldr	r1, [sp, #12]
  401250:	42a9      	cmp	r1, r5
  401252:	d117      	bne.n	401284 <main+0x194>
			puts("   <- Slave response RC_SYN, RC_RDY \r");
  401254:	4869      	ldr	r0, [pc, #420]	; (4013fc <main+0x30c>)
  401256:	4c55      	ldr	r4, [pc, #340]	; (4013ac <main+0x2bc>)
  401258:	47a0      	blx	r4
			printf("-E- Response unexpected: 0x%x \n\r", (unsigned)cmd);
			return;
		}
	}
	/* Send CMD_DATA with 4 blocks (64 bytes per page). */
	puts("-> Master sending CMD_DATA... \r");
  40125a:	4869      	ldr	r0, [pc, #420]	; (401400 <main+0x310>)
  40125c:	47a0      	blx	r4
	cmd = CMD_DATA | MAX_DATA_BLOCK_NUMBER;
  40125e:	a80a      	add	r0, sp, #40	; 0x28
  401260:	4b68      	ldr	r3, [pc, #416]	; (401404 <main+0x314>)
  401262:	f840 3d1c 	str.w	r3, [r0, #-28]!
	spi_master_transfer(&cmd, sizeof(cmd));
  401266:	2104      	movs	r1, #4
  401268:	4b63      	ldr	r3, [pc, #396]	; (4013f8 <main+0x308>)
  40126a:	4798      	blx	r3
	puts("                                <---- Slave response RC_RDY \r");
  40126c:	4866      	ldr	r0, [pc, #408]	; (401408 <main+0x318>)
  40126e:	47a0      	blx	r4
  401270:	f04f 37ff 	mov.w	r7, #4294967295
	for (block = 0; block < MAX_DATA_BLOCK_NUMBER; block++) {
  401274:	2600      	movs	r6, #0
  401276:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 401440 <main+0x350>
  40127a:	f108 043f 	add.w	r4, r8, #63	; 0x3f
		for (i = 0; i < COMM_BUFFER_SIZE; i++) {
			gs_uc_spi_buffer[i] = block;
		}
		printf("-> Master sending block %u ... \n\r", (unsigned)block);
  40127e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 401444 <main+0x354>
  401282:	e017      	b.n	4012b4 <main+0x1c4>
		spi_master_transfer(&cmd, sizeof(cmd));
		if (cmd == RC_RDY) {
			puts("   <- Slave response RC_SYN, RC_RDY \r");
			break;
		}
		if (cmd != RC_SYN) {
  401284:	4b4e      	ldr	r3, [pc, #312]	; (4013c0 <main+0x2d0>)
  401286:	4299      	cmp	r1, r3
  401288:	d0d6      	beq.n	401238 <main+0x148>
			printf("-E- Response unexpected: 0x%x \n\r", (unsigned)cmd);
  40128a:	4860      	ldr	r0, [pc, #384]	; (40140c <main+0x31c>)
  40128c:	4b60      	ldr	r3, [pc, #384]	; (401410 <main+0x320>)
  40128e:	4798      	blx	r3
  401290:	e7bf      	b.n	401212 <main+0x122>
	cmd = CMD_DATA | MAX_DATA_BLOCK_NUMBER;
	spi_master_transfer(&cmd, sizeof(cmd));
	puts("                                <---- Slave response RC_RDY \r");
	for (block = 0; block < MAX_DATA_BLOCK_NUMBER; block++) {
		for (i = 0; i < COMM_BUFFER_SIZE; i++) {
			gs_uc_spi_buffer[i] = block;
  401292:	f803 6f01 	strb.w	r6, [r3, #1]!
	puts("-> Master sending CMD_DATA... \r");
	cmd = CMD_DATA | MAX_DATA_BLOCK_NUMBER;
	spi_master_transfer(&cmd, sizeof(cmd));
	puts("                                <---- Slave response RC_RDY \r");
	for (block = 0; block < MAX_DATA_BLOCK_NUMBER; block++) {
		for (i = 0; i < COMM_BUFFER_SIZE; i++) {
  401296:	42a3      	cmp	r3, r4
  401298:	d1fb      	bne.n	401292 <main+0x1a2>
  40129a:	e0fa      	b.n	401492 <main+0x3a2>
		}
		printf("-> Master sending block %u ... \n\r", (unsigned)block);
		spi_master_transfer(gs_uc_spi_buffer, COMM_BUFFER_SIZE);
		if (block) {
			for (i = 0; i < COMM_BUFFER_SIZE; i++) {
				if (gs_uc_spi_buffer[i] != (block - 1)) {
  40129c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  4012a0:	4297      	cmp	r7, r2
  4012a2:	f040 8106 	bne.w	4014b2 <main+0x3c2>
			gs_uc_spi_buffer[i] = block;
		}
		printf("-> Master sending block %u ... \n\r", (unsigned)block);
		spi_master_transfer(gs_uc_spi_buffer, COMM_BUFFER_SIZE);
		if (block) {
			for (i = 0; i < COMM_BUFFER_SIZE; i++) {
  4012a6:	42a3      	cmp	r3, r4
  4012a8:	d1f8      	bne.n	40129c <main+0x1ac>
  4012aa:	e0fd      	b.n	4014a8 <main+0x3b8>
	/* Send CMD_DATA with 4 blocks (64 bytes per page). */
	puts("-> Master sending CMD_DATA... \r");
	cmd = CMD_DATA | MAX_DATA_BLOCK_NUMBER;
	spi_master_transfer(&cmd, sizeof(cmd));
	puts("                                <---- Slave response RC_RDY \r");
	for (block = 0; block < MAX_DATA_BLOCK_NUMBER; block++) {
  4012ac:	3601      	adds	r6, #1
  4012ae:	3701      	adds	r7, #1
  4012b0:	2e04      	cmp	r6, #4
  4012b2:	d002      	beq.n	4012ba <main+0x1ca>
  4012b4:	f108 33ff 	add.w	r3, r8, #4294967295
  4012b8:	e7eb      	b.n	401292 <main+0x1a2>
  4012ba:	2600      	movs	r6, #0
		}
	}

	for (i = 0; i < MAX_RETRY; i++) {
		cmd = CMD_STATUS;
		puts("-> Master sending CMD_STATUS... \r");
  4012bc:	4f55      	ldr	r7, [pc, #340]	; (401414 <main+0x324>)
			}
		}
	}

	for (i = 0; i < MAX_RETRY; i++) {
		cmd = CMD_STATUS;
  4012be:	ac0a      	add	r4, sp, #40	; 0x28
  4012c0:	f844 ad1c 	str.w	sl, [r4, #-28]!
		puts("-> Master sending CMD_STATUS... \r");
  4012c4:	4638      	mov	r0, r7
  4012c6:	4b39      	ldr	r3, [pc, #228]	; (4013ac <main+0x2bc>)
  4012c8:	4798      	blx	r3
		spi_master_transfer(&cmd, sizeof(cmd));
  4012ca:	4620      	mov	r0, r4
  4012cc:	2104      	movs	r1, #4
  4012ce:	4b4a      	ldr	r3, [pc, #296]	; (4013f8 <main+0x308>)
  4012d0:	4798      	blx	r3
		if (cmd == RC_RDY) {
  4012d2:	9b03      	ldr	r3, [sp, #12]
  4012d4:	42ab      	cmp	r3, r5
  4012d6:	d105      	bne.n	4012e4 <main+0x1f4>
			puts("   <- Slave response RC_RDY \r");
  4012d8:	484f      	ldr	r0, [pc, #316]	; (401418 <main+0x328>)
  4012da:	4b34      	ldr	r3, [pc, #208]	; (4013ac <main+0x2bc>)
  4012dc:	4798      	blx	r3
			break;
		}
	}
	if (i >= MAX_RETRY) {
  4012de:	2e03      	cmp	r6, #3
  4012e0:	d907      	bls.n	4012f2 <main+0x202>
  4012e2:	e002      	b.n	4012ea <main+0x1fa>
					(unsigned)(block - 1));
			}
		}
	}

	for (i = 0; i < MAX_RETRY; i++) {
  4012e4:	3601      	adds	r6, #1
  4012e6:	2e04      	cmp	r6, #4
  4012e8:	d1e9      	bne.n	4012be <main+0x1ce>
			puts("   <- Slave response RC_RDY \r");
			break;
		}
	}
	if (i >= MAX_RETRY) {
		puts("   <- Slave no response \r");
  4012ea:	484c      	ldr	r0, [pc, #304]	; (40141c <main+0x32c>)
  4012ec:	4b2f      	ldr	r3, [pc, #188]	; (4013ac <main+0x2bc>)
  4012ee:	4798      	blx	r3
  4012f0:	e78f      	b.n	401212 <main+0x122>
		return;
	}

	puts("-> Master request slave status... \r");
  4012f2:	484b      	ldr	r0, [pc, #300]	; (401420 <main+0x330>)
  4012f4:	4e2d      	ldr	r6, [pc, #180]	; (4013ac <main+0x2bc>)
  4012f6:	47b0      	blx	r6
	spi_master_transfer(&gs_spi_status, sizeof(struct status_block_t));
  4012f8:	4c2e      	ldr	r4, [pc, #184]	; (4013b4 <main+0x2c4>)
  4012fa:	4620      	mov	r0, r4
  4012fc:	2158      	movs	r1, #88	; 0x58
  4012fe:	4b3e      	ldr	r3, [pc, #248]	; (4013f8 <main+0x308>)
  401300:	4798      	blx	r3

	puts("   <- Slave reports status...\r");
  401302:	4848      	ldr	r0, [pc, #288]	; (401424 <main+0x334>)
  401304:	47b0      	blx	r6
	printf("-I- Received  %u commands:",
  401306:	4848      	ldr	r0, [pc, #288]	; (401428 <main+0x338>)
  401308:	6861      	ldr	r1, [r4, #4]
  40130a:	4b41      	ldr	r3, [pc, #260]	; (401410 <main+0x320>)
  40130c:	4798      	blx	r3
		(unsigned)gs_spi_status.ul_total_command_number);

	for (i = 0; i < gs_spi_status.ul_total_command_number; i++) {
  40130e:	6863      	ldr	r3, [r4, #4]
  401310:	b173      	cbz	r3, 401330 <main+0x240>
  401312:	9e01      	ldr	r6, [sp, #4]
  401314:	2400      	movs	r4, #0
		printf(" 0x%08x", (unsigned)gs_spi_status.ul_cmd_list[i]);
  401316:	f8df 9130 	ldr.w	r9, [pc, #304]	; 401448 <main+0x358>
  40131a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 401410 <main+0x320>

	puts("   <- Slave reports status...\r");
	printf("-I- Received  %u commands:",
		(unsigned)gs_spi_status.ul_total_command_number);

	for (i = 0; i < gs_spi_status.ul_total_command_number; i++) {
  40131e:	4f25      	ldr	r7, [pc, #148]	; (4013b4 <main+0x2c4>)
		printf(" 0x%08x", (unsigned)gs_spi_status.ul_cmd_list[i]);
  401320:	4648      	mov	r0, r9
  401322:	f856 1f04 	ldr.w	r1, [r6, #4]!
  401326:	47c0      	blx	r8

	puts("   <- Slave reports status...\r");
	printf("-I- Received  %u commands:",
		(unsigned)gs_spi_status.ul_total_command_number);

	for (i = 0; i < gs_spi_status.ul_total_command_number; i++) {
  401328:	3401      	adds	r4, #1
  40132a:	687b      	ldr	r3, [r7, #4]
  40132c:	429c      	cmp	r4, r3
  40132e:	d3f7      	bcc.n	401320 <main+0x230>
		printf(" 0x%08x", (unsigned)gs_spi_status.ul_cmd_list[i]);
	}
	printf(" \n\r-I- Received  %lu data blocks \n\r",
  401330:	483e      	ldr	r0, [pc, #248]	; (40142c <main+0x33c>)
  401332:	4b20      	ldr	r3, [pc, #128]	; (4013b4 <main+0x2c4>)
  401334:	6819      	ldr	r1, [r3, #0]
  401336:	4b36      	ldr	r3, [pc, #216]	; (401410 <main+0x320>)
  401338:	4798      	blx	r3
			(unsigned long)gs_spi_status.ul_total_block_number);

	for (i = 0; i < MAX_RETRY; i++) {
  40133a:	2400      	movs	r4, #0
		puts("-> Master sending CMD_END... \r");
  40133c:	4f3c      	ldr	r7, [pc, #240]	; (401430 <main+0x340>)
  40133e:	4e1b      	ldr	r6, [pc, #108]	; (4013ac <main+0x2bc>)
  401340:	4638      	mov	r0, r7
  401342:	47b0      	blx	r6
		cmd = CMD_END;
  401344:	a80a      	add	r0, sp, #40	; 0x28
  401346:	f840 bd1c 	str.w	fp, [r0, #-28]!
		spi_master_transfer(&cmd, sizeof(cmd));
  40134a:	2104      	movs	r1, #4
  40134c:	4b2a      	ldr	r3, [pc, #168]	; (4013f8 <main+0x308>)
  40134e:	4798      	blx	r3

		if (cmd == RC_SYN) {
  401350:	9a03      	ldr	r2, [sp, #12]
  401352:	4b1b      	ldr	r3, [pc, #108]	; (4013c0 <main+0x2d0>)
  401354:	429a      	cmp	r2, r3
  401356:	d179      	bne.n	40144c <main+0x35c>
			puts("   <- Slave response RC_SYN \r");
  401358:	4836      	ldr	r0, [pc, #216]	; (401434 <main+0x344>)
  40135a:	4b14      	ldr	r3, [pc, #80]	; (4013ac <main+0x2bc>)
  40135c:	4798      	blx	r3
			break;
		}
	}

	if (i >= MAX_RETRY) {
  40135e:	2c03      	cmp	r4, #3
  401360:	d97b      	bls.n	40145a <main+0x36a>
  401362:	e077      	b.n	401454 <main+0x364>
  401364:	004001a5 	.word	0x004001a5
  401368:	004002e1 	.word	0x004002e1
  40136c:	40034200 	.word	0x40034200
  401370:	20000a24 	.word	0x20000a24
  401374:	00400d81 	.word	0x00400d81
  401378:	20000a20 	.word	0x20000a20
  40137c:	00400c7d 	.word	0x00400c7d
  401380:	20000a1c 	.word	0x20000a1c
  401384:	40034000 	.word	0x40034000
  401388:	00400409 	.word	0x00400409
  40138c:	00400585 	.word	0x00400585
  401390:	07270000 	.word	0x07270000
  401394:	004008cd 	.word	0x004008cd
  401398:	00400921 	.word	0x00400921
  40139c:	00400929 	.word	0x00400929
  4013a0:	200004c0 	.word	0x200004c0
  4013a4:	0040169d 	.word	0x0040169d
  4013a8:	00405b00 	.word	0x00405b00
  4013ac:	0040168d 	.word	0x0040168d
  4013b0:	e000e100 	.word	0xe000e100
  4013b4:	20000984 	.word	0x20000984
  4013b8:	20000934 	.word	0x20000934
  4013bc:	20000094 	.word	0x20000094
  4013c0:	55aa55aa 	.word	0x55aa55aa
  4013c4:	00405b54 	.word	0x00405b54
  4013c8:	40008000 	.word	0x40008000
  4013cc:	00400709 	.word	0x00400709
  4013d0:	00400799 	.word	0x00400799
  4013d4:	004007b9 	.word	0x004007b9
  4013d8:	004007d9 	.word	0x004007d9
  4013dc:	00400bf1 	.word	0x00400bf1
  4013e0:	00400e6d 	.word	0x00400e6d
  4013e4:	12345678 	.word	0x12345678
  4013e8:	00405b74 	.word	0x00405b74
  4013ec:	0040156d 	.word	0x0040156d
  4013f0:	00400ead 	.word	0x00400ead
  4013f4:	00405b78 	.word	0x00405b78
  4013f8:	00400c25 	.word	0x00400c25
  4013fc:	00405b98 	.word	0x00405b98
  401400:	00405bc0 	.word	0x00405bc0
  401404:	29380004 	.word	0x29380004
  401408:	00405be0 	.word	0x00405be0
  40140c:	00405c20 	.word	0x00405c20
  401410:	00401545 	.word	0x00401545
  401414:	00405c44 	.word	0x00405c44
  401418:	00405c68 	.word	0x00405c68
  40141c:	00405c88 	.word	0x00405c88
  401420:	00405ca4 	.word	0x00405ca4
  401424:	00405cc8 	.word	0x00405cc8
  401428:	00405ce8 	.word	0x00405ce8
  40142c:	00405d0c 	.word	0x00405d0c
  401430:	00405d30 	.word	0x00405d30
  401434:	00405d50 	.word	0x00405d50
  401438:	68390384 	.word	0x68390384
  40143c:	68390484 	.word	0x68390484
  401440:	2000093c 	.word	0x2000093c
  401444:	00405db0 	.word	0x00405db0
  401448:	00405d04 	.word	0x00405d04
		printf(" 0x%08x", (unsigned)gs_spi_status.ul_cmd_list[i]);
	}
	printf(" \n\r-I- Received  %lu data blocks \n\r",
			(unsigned long)gs_spi_status.ul_total_block_number);

	for (i = 0; i < MAX_RETRY; i++) {
  40144c:	3401      	adds	r4, #1
  40144e:	2c04      	cmp	r4, #4
  401450:	f47f af76 	bne.w	401340 <main+0x250>
			break;
		}
	}

	if (i >= MAX_RETRY) {
		puts("   <- Slave no response \r");
  401454:	481b      	ldr	r0, [pc, #108]	; (4014c4 <main+0x3d4>)
  401456:	4b1c      	ldr	r3, [pc, #112]	; (4014c8 <main+0x3d8>)
  401458:	4798      	blx	r3
	}

	puts("\r");
  40145a:	481c      	ldr	r0, [pc, #112]	; (4014cc <main+0x3dc>)
  40145c:	4c1a      	ldr	r4, [pc, #104]	; (4014c8 <main+0x3d8>)
  40145e:	47a0      	blx	r4
	puts("SPI transfer test finished! \r");
  401460:	481b      	ldr	r0, [pc, #108]	; (4014d0 <main+0x3e0>)
  401462:	47a0      	blx	r4
  401464:	e6d5      	b.n	401212 <main+0x122>
			break;

		default:
			/* Set configuration #n. */
			if ((uc_key >= '0')
					&& (uc_key <= ('0' + NUM_SPCK_CONFIGURATIONS - 1))) {
  401466:	3b30      	subs	r3, #48	; 0x30
  401468:	b2db      	uxtb	r3, r3
			spi_master_go();
			break;

		default:
			/* Set configuration #n. */
			if ((uc_key >= '0')
  40146a:	2b03      	cmp	r3, #3
  40146c:	f63f aed1 	bhi.w	401212 <main+0x122>
 *
 * \param configuration  Index of the configuration to set.
 */
static void spi_set_clock_configuration(uint8_t configuration)
{
	gs_ul_spi_clock = gs_ul_clock_configurations[configuration];
  401470:	4a18      	ldr	r2, [pc, #96]	; (4014d4 <main+0x3e4>)
  401472:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
  401476:	4b18      	ldr	r3, [pc, #96]	; (4014d8 <main+0x3e8>)
  401478:	6019      	str	r1, [r3, #0]
	printf("Setting SPI clock #%lu ... \n\r", (unsigned long)gs_ul_spi_clock);
  40147a:	4818      	ldr	r0, [pc, #96]	; (4014dc <main+0x3ec>)
  40147c:	4b18      	ldr	r3, [pc, #96]	; (4014e0 <main+0x3f0>)
  40147e:	4798      	blx	r3
	spi_master_initialize();
  401480:	4b18      	ldr	r3, [pc, #96]	; (4014e4 <main+0x3f4>)
  401482:	4798      	blx	r3
  401484:	e6c5      	b.n	401212 <main+0x122>
		}
		printf("-> Master sending block %u ... \n\r", (unsigned)block);
		spi_master_transfer(gs_uc_spi_buffer, COMM_BUFFER_SIZE);
		if (block) {
			for (i = 0; i < COMM_BUFFER_SIZE; i++) {
				if (gs_uc_spi_buffer[i] != (block - 1)) {
  401486:	f898 3000 	ldrb.w	r3, [r8]
  40148a:	429f      	cmp	r7, r3
  40148c:	d111      	bne.n	4014b2 <main+0x3c2>
  40148e:	4643      	mov	r3, r8
  401490:	e704      	b.n	40129c <main+0x1ac>
	puts("                                <---- Slave response RC_RDY \r");
	for (block = 0; block < MAX_DATA_BLOCK_NUMBER; block++) {
		for (i = 0; i < COMM_BUFFER_SIZE; i++) {
			gs_uc_spi_buffer[i] = block;
		}
		printf("-> Master sending block %u ... \n\r", (unsigned)block);
  401492:	4648      	mov	r0, r9
  401494:	4631      	mov	r1, r6
  401496:	4b12      	ldr	r3, [pc, #72]	; (4014e0 <main+0x3f0>)
  401498:	4798      	blx	r3
		spi_master_transfer(gs_uc_spi_buffer, COMM_BUFFER_SIZE);
  40149a:	4640      	mov	r0, r8
  40149c:	2140      	movs	r1, #64	; 0x40
  40149e:	4b12      	ldr	r3, [pc, #72]	; (4014e8 <main+0x3f8>)
  4014a0:	4798      	blx	r3
		if (block) {
  4014a2:	2e00      	cmp	r6, #0
  4014a4:	d1ef      	bne.n	401486 <main+0x396>
  4014a6:	e009      	b.n	4014bc <main+0x3cc>
			}
			if (i < COMM_BUFFER_SIZE) {
				printf("-E- block %u contains unexpected data \n\r",
					(unsigned)block);
			} else {
				printf("   <- Slave response last block %x \n\r",
  4014a8:	4810      	ldr	r0, [pc, #64]	; (4014ec <main+0x3fc>)
  4014aa:	4639      	mov	r1, r7
  4014ac:	4b0c      	ldr	r3, [pc, #48]	; (4014e0 <main+0x3f0>)
  4014ae:	4798      	blx	r3
  4014b0:	e6fc      	b.n	4012ac <main+0x1bc>
				if (gs_uc_spi_buffer[i] != (block - 1)) {
					break;
				}
			}
			if (i < COMM_BUFFER_SIZE) {
				printf("-E- block %u contains unexpected data \n\r",
  4014b2:	480f      	ldr	r0, [pc, #60]	; (4014f0 <main+0x400>)
  4014b4:	4631      	mov	r1, r6
  4014b6:	4b0a      	ldr	r3, [pc, #40]	; (4014e0 <main+0x3f0>)
  4014b8:	4798      	blx	r3
  4014ba:	e6f7      	b.n	4012ac <main+0x1bc>
	/* Send CMD_DATA with 4 blocks (64 bytes per page). */
	puts("-> Master sending CMD_DATA... \r");
	cmd = CMD_DATA | MAX_DATA_BLOCK_NUMBER;
	spi_master_transfer(&cmd, sizeof(cmd));
	puts("                                <---- Slave response RC_RDY \r");
	for (block = 0; block < MAX_DATA_BLOCK_NUMBER; block++) {
  4014bc:	3601      	adds	r6, #1
  4014be:	3701      	adds	r7, #1
  4014c0:	e6f8      	b.n	4012b4 <main+0x1c4>
  4014c2:	bf00      	nop
  4014c4:	00405c88 	.word	0x00405c88
  4014c8:	0040168d 	.word	0x0040168d
  4014cc:	00405dd0 	.word	0x00405dd0
  4014d0:	00405d70 	.word	0x00405d70
  4014d4:	00405e28 	.word	0x00405e28
  4014d8:	20000090 	.word	0x20000090
  4014dc:	00405d90 	.word	0x00405d90
  4014e0:	00401545 	.word	0x00401545
  4014e4:	00400ead 	.word	0x00400ead
  4014e8:	00400c25 	.word	0x00400c25
  4014ec:	00405dd4 	.word	0x00405dd4
  4014f0:	00405dfc 	.word	0x00405dfc

004014f4 <__libc_init_array>:
  4014f4:	b570      	push	{r4, r5, r6, lr}
  4014f6:	4e0f      	ldr	r6, [pc, #60]	; (401534 <__libc_init_array+0x40>)
  4014f8:	4d0f      	ldr	r5, [pc, #60]	; (401538 <__libc_init_array+0x44>)
  4014fa:	1b76      	subs	r6, r6, r5
  4014fc:	10b6      	asrs	r6, r6, #2
  4014fe:	bf18      	it	ne
  401500:	2400      	movne	r4, #0
  401502:	d005      	beq.n	401510 <__libc_init_array+0x1c>
  401504:	3401      	adds	r4, #1
  401506:	f855 3b04 	ldr.w	r3, [r5], #4
  40150a:	4798      	blx	r3
  40150c:	42a6      	cmp	r6, r4
  40150e:	d1f9      	bne.n	401504 <__libc_init_array+0x10>
  401510:	4e0a      	ldr	r6, [pc, #40]	; (40153c <__libc_init_array+0x48>)
  401512:	4d0b      	ldr	r5, [pc, #44]	; (401540 <__libc_init_array+0x4c>)
  401514:	1b76      	subs	r6, r6, r5
  401516:	f004 fd51 	bl	405fbc <_init>
  40151a:	10b6      	asrs	r6, r6, #2
  40151c:	bf18      	it	ne
  40151e:	2400      	movne	r4, #0
  401520:	d006      	beq.n	401530 <__libc_init_array+0x3c>
  401522:	3401      	adds	r4, #1
  401524:	f855 3b04 	ldr.w	r3, [r5], #4
  401528:	4798      	blx	r3
  40152a:	42a6      	cmp	r6, r4
  40152c:	d1f9      	bne.n	401522 <__libc_init_array+0x2e>
  40152e:	bd70      	pop	{r4, r5, r6, pc}
  401530:	bd70      	pop	{r4, r5, r6, pc}
  401532:	bf00      	nop
  401534:	00405fc8 	.word	0x00405fc8
  401538:	00405fc8 	.word	0x00405fc8
  40153c:	00405fd0 	.word	0x00405fd0
  401540:	00405fc8 	.word	0x00405fc8

00401544 <iprintf>:
  401544:	b40f      	push	{r0, r1, r2, r3}
  401546:	b500      	push	{lr}
  401548:	4907      	ldr	r1, [pc, #28]	; (401568 <iprintf+0x24>)
  40154a:	b083      	sub	sp, #12
  40154c:	ab04      	add	r3, sp, #16
  40154e:	6808      	ldr	r0, [r1, #0]
  401550:	f853 2b04 	ldr.w	r2, [r3], #4
  401554:	6881      	ldr	r1, [r0, #8]
  401556:	9301      	str	r3, [sp, #4]
  401558:	f000 f98e 	bl	401878 <_vfiprintf_r>
  40155c:	b003      	add	sp, #12
  40155e:	f85d eb04 	ldr.w	lr, [sp], #4
  401562:	b004      	add	sp, #16
  401564:	4770      	bx	lr
  401566:	bf00      	nop
  401568:	200004c0 	.word	0x200004c0

0040156c <iscanf>:
  40156c:	b40f      	push	{r0, r1, r2, r3}
  40156e:	b500      	push	{lr}
  401570:	4907      	ldr	r1, [pc, #28]	; (401590 <iscanf+0x24>)
  401572:	b083      	sub	sp, #12
  401574:	ab04      	add	r3, sp, #16
  401576:	6808      	ldr	r0, [r1, #0]
  401578:	f853 2b04 	ldr.w	r2, [r3], #4
  40157c:	6841      	ldr	r1, [r0, #4]
  40157e:	9301      	str	r3, [sp, #4]
  401580:	f000 ffbe 	bl	402500 <__svfiscanf_r>
  401584:	b003      	add	sp, #12
  401586:	f85d eb04 	ldr.w	lr, [sp], #4
  40158a:	b004      	add	sp, #16
  40158c:	4770      	bx	lr
  40158e:	bf00      	nop
  401590:	200004c0 	.word	0x200004c0

00401594 <memset>:
  401594:	b470      	push	{r4, r5, r6}
  401596:	0784      	lsls	r4, r0, #30
  401598:	d046      	beq.n	401628 <memset+0x94>
  40159a:	1e54      	subs	r4, r2, #1
  40159c:	2a00      	cmp	r2, #0
  40159e:	d041      	beq.n	401624 <memset+0x90>
  4015a0:	b2cd      	uxtb	r5, r1
  4015a2:	4603      	mov	r3, r0
  4015a4:	e002      	b.n	4015ac <memset+0x18>
  4015a6:	1e62      	subs	r2, r4, #1
  4015a8:	b3e4      	cbz	r4, 401624 <memset+0x90>
  4015aa:	4614      	mov	r4, r2
  4015ac:	f803 5b01 	strb.w	r5, [r3], #1
  4015b0:	079a      	lsls	r2, r3, #30
  4015b2:	d1f8      	bne.n	4015a6 <memset+0x12>
  4015b4:	2c03      	cmp	r4, #3
  4015b6:	d92e      	bls.n	401616 <memset+0x82>
  4015b8:	b2cd      	uxtb	r5, r1
  4015ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4015be:	2c0f      	cmp	r4, #15
  4015c0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4015c4:	d919      	bls.n	4015fa <memset+0x66>
  4015c6:	f103 0210 	add.w	r2, r3, #16
  4015ca:	4626      	mov	r6, r4
  4015cc:	3e10      	subs	r6, #16
  4015ce:	2e0f      	cmp	r6, #15
  4015d0:	f842 5c10 	str.w	r5, [r2, #-16]
  4015d4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4015d8:	f842 5c08 	str.w	r5, [r2, #-8]
  4015dc:	f842 5c04 	str.w	r5, [r2, #-4]
  4015e0:	f102 0210 	add.w	r2, r2, #16
  4015e4:	d8f2      	bhi.n	4015cc <memset+0x38>
  4015e6:	f1a4 0210 	sub.w	r2, r4, #16
  4015ea:	f022 020f 	bic.w	r2, r2, #15
  4015ee:	f004 040f 	and.w	r4, r4, #15
  4015f2:	3210      	adds	r2, #16
  4015f4:	2c03      	cmp	r4, #3
  4015f6:	4413      	add	r3, r2
  4015f8:	d90d      	bls.n	401616 <memset+0x82>
  4015fa:	461e      	mov	r6, r3
  4015fc:	4622      	mov	r2, r4
  4015fe:	3a04      	subs	r2, #4
  401600:	2a03      	cmp	r2, #3
  401602:	f846 5b04 	str.w	r5, [r6], #4
  401606:	d8fa      	bhi.n	4015fe <memset+0x6a>
  401608:	1f22      	subs	r2, r4, #4
  40160a:	f022 0203 	bic.w	r2, r2, #3
  40160e:	3204      	adds	r2, #4
  401610:	4413      	add	r3, r2
  401612:	f004 0403 	and.w	r4, r4, #3
  401616:	b12c      	cbz	r4, 401624 <memset+0x90>
  401618:	b2c9      	uxtb	r1, r1
  40161a:	441c      	add	r4, r3
  40161c:	f803 1b01 	strb.w	r1, [r3], #1
  401620:	42a3      	cmp	r3, r4
  401622:	d1fb      	bne.n	40161c <memset+0x88>
  401624:	bc70      	pop	{r4, r5, r6}
  401626:	4770      	bx	lr
  401628:	4614      	mov	r4, r2
  40162a:	4603      	mov	r3, r0
  40162c:	e7c2      	b.n	4015b4 <memset+0x20>
  40162e:	bf00      	nop

00401630 <_puts_r>:
  401630:	b5f0      	push	{r4, r5, r6, r7, lr}
  401632:	4604      	mov	r4, r0
  401634:	b089      	sub	sp, #36	; 0x24
  401636:	4608      	mov	r0, r1
  401638:	460d      	mov	r5, r1
  40163a:	f000 f8b3 	bl	4017a4 <strlen>
  40163e:	68a3      	ldr	r3, [r4, #8]
  401640:	4f11      	ldr	r7, [pc, #68]	; (401688 <_puts_r+0x58>)
  401642:	899a      	ldrh	r2, [r3, #12]
  401644:	9504      	str	r5, [sp, #16]
  401646:	2102      	movs	r1, #2
  401648:	f100 0e01 	add.w	lr, r0, #1
  40164c:	2601      	movs	r6, #1
  40164e:	ad04      	add	r5, sp, #16
  401650:	9102      	str	r1, [sp, #8]
  401652:	0491      	lsls	r1, r2, #18
  401654:	9005      	str	r0, [sp, #20]
  401656:	f8cd e00c 	str.w	lr, [sp, #12]
  40165a:	9706      	str	r7, [sp, #24]
  40165c:	9607      	str	r6, [sp, #28]
  40165e:	9501      	str	r5, [sp, #4]
  401660:	d406      	bmi.n	401670 <_puts_r+0x40>
  401662:	6e59      	ldr	r1, [r3, #100]	; 0x64
  401664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  401668:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40166c:	819a      	strh	r2, [r3, #12]
  40166e:	6659      	str	r1, [r3, #100]	; 0x64
  401670:	4620      	mov	r0, r4
  401672:	4619      	mov	r1, r3
  401674:	aa01      	add	r2, sp, #4
  401676:	f002 f85b 	bl	403730 <__sfvwrite_r>
  40167a:	2800      	cmp	r0, #0
  40167c:	bf14      	ite	ne
  40167e:	f04f 30ff 	movne.w	r0, #4294967295
  401682:	200a      	moveq	r0, #10
  401684:	b009      	add	sp, #36	; 0x24
  401686:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401688:	00405e40 	.word	0x00405e40

0040168c <puts>:
  40168c:	4b02      	ldr	r3, [pc, #8]	; (401698 <puts+0xc>)
  40168e:	4601      	mov	r1, r0
  401690:	6818      	ldr	r0, [r3, #0]
  401692:	f7ff bfcd 	b.w	401630 <_puts_r>
  401696:	bf00      	nop
  401698:	200004c0 	.word	0x200004c0

0040169c <setbuf>:
  40169c:	2900      	cmp	r1, #0
  40169e:	bf0c      	ite	eq
  4016a0:	2202      	moveq	r2, #2
  4016a2:	2200      	movne	r2, #0
  4016a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4016a8:	f000 b800 	b.w	4016ac <setvbuf>

004016ac <setvbuf>:
  4016ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4016b0:	4c3a      	ldr	r4, [pc, #232]	; (40179c <setvbuf+0xf0>)
  4016b2:	6826      	ldr	r6, [r4, #0]
  4016b4:	460d      	mov	r5, r1
  4016b6:	4604      	mov	r4, r0
  4016b8:	4690      	mov	r8, r2
  4016ba:	461f      	mov	r7, r3
  4016bc:	b116      	cbz	r6, 4016c4 <setvbuf+0x18>
  4016be:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  4016c0:	2b00      	cmp	r3, #0
  4016c2:	d03c      	beq.n	40173e <setvbuf+0x92>
  4016c4:	f1b8 0f02 	cmp.w	r8, #2
  4016c8:	d82f      	bhi.n	40172a <setvbuf+0x7e>
  4016ca:	2f00      	cmp	r7, #0
  4016cc:	db2d      	blt.n	40172a <setvbuf+0x7e>
  4016ce:	4621      	mov	r1, r4
  4016d0:	4630      	mov	r0, r6
  4016d2:	f001 fd0d 	bl	4030f0 <_fflush_r>
  4016d6:	89a1      	ldrh	r1, [r4, #12]
  4016d8:	2300      	movs	r3, #0
  4016da:	6063      	str	r3, [r4, #4]
  4016dc:	61a3      	str	r3, [r4, #24]
  4016de:	060b      	lsls	r3, r1, #24
  4016e0:	d427      	bmi.n	401732 <setvbuf+0x86>
  4016e2:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  4016e6:	b289      	uxth	r1, r1
  4016e8:	f1b8 0f02 	cmp.w	r8, #2
  4016ec:	81a1      	strh	r1, [r4, #12]
  4016ee:	d02a      	beq.n	401746 <setvbuf+0x9a>
  4016f0:	2d00      	cmp	r5, #0
  4016f2:	d036      	beq.n	401762 <setvbuf+0xb6>
  4016f4:	f1b8 0f01 	cmp.w	r8, #1
  4016f8:	d011      	beq.n	40171e <setvbuf+0x72>
  4016fa:	b289      	uxth	r1, r1
  4016fc:	f001 0008 	and.w	r0, r1, #8
  401700:	4b27      	ldr	r3, [pc, #156]	; (4017a0 <setvbuf+0xf4>)
  401702:	63f3      	str	r3, [r6, #60]	; 0x3c
  401704:	b280      	uxth	r0, r0
  401706:	6025      	str	r5, [r4, #0]
  401708:	6125      	str	r5, [r4, #16]
  40170a:	6167      	str	r7, [r4, #20]
  40170c:	b178      	cbz	r0, 40172e <setvbuf+0x82>
  40170e:	f011 0f03 	tst.w	r1, #3
  401712:	bf18      	it	ne
  401714:	2700      	movne	r7, #0
  401716:	60a7      	str	r7, [r4, #8]
  401718:	2000      	movs	r0, #0
  40171a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40171e:	f041 0101 	orr.w	r1, r1, #1
  401722:	427b      	negs	r3, r7
  401724:	81a1      	strh	r1, [r4, #12]
  401726:	61a3      	str	r3, [r4, #24]
  401728:	e7e7      	b.n	4016fa <setvbuf+0x4e>
  40172a:	f04f 30ff 	mov.w	r0, #4294967295
  40172e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401732:	6921      	ldr	r1, [r4, #16]
  401734:	4630      	mov	r0, r6
  401736:	f001 ff23 	bl	403580 <_free_r>
  40173a:	89a1      	ldrh	r1, [r4, #12]
  40173c:	e7d1      	b.n	4016e2 <setvbuf+0x36>
  40173e:	4630      	mov	r0, r6
  401740:	f001 fd7c 	bl	40323c <__sinit>
  401744:	e7be      	b.n	4016c4 <setvbuf+0x18>
  401746:	2000      	movs	r0, #0
  401748:	f104 0343 	add.w	r3, r4, #67	; 0x43
  40174c:	f041 0102 	orr.w	r1, r1, #2
  401750:	2500      	movs	r5, #0
  401752:	2201      	movs	r2, #1
  401754:	81a1      	strh	r1, [r4, #12]
  401756:	60a5      	str	r5, [r4, #8]
  401758:	6023      	str	r3, [r4, #0]
  40175a:	6123      	str	r3, [r4, #16]
  40175c:	6162      	str	r2, [r4, #20]
  40175e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401762:	2f00      	cmp	r7, #0
  401764:	bf08      	it	eq
  401766:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40176a:	4638      	mov	r0, r7
  40176c:	f002 fa44 	bl	403bf8 <malloc>
  401770:	4605      	mov	r5, r0
  401772:	b128      	cbz	r0, 401780 <setvbuf+0xd4>
  401774:	89a1      	ldrh	r1, [r4, #12]
  401776:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40177a:	b289      	uxth	r1, r1
  40177c:	81a1      	strh	r1, [r4, #12]
  40177e:	e7b9      	b.n	4016f4 <setvbuf+0x48>
  401780:	f44f 6080 	mov.w	r0, #1024	; 0x400
  401784:	f002 fa38 	bl	403bf8 <malloc>
  401788:	4605      	mov	r5, r0
  40178a:	b918      	cbnz	r0, 401794 <setvbuf+0xe8>
  40178c:	89a1      	ldrh	r1, [r4, #12]
  40178e:	f04f 30ff 	mov.w	r0, #4294967295
  401792:	e7d9      	b.n	401748 <setvbuf+0x9c>
  401794:	f44f 6780 	mov.w	r7, #1024	; 0x400
  401798:	e7ec      	b.n	401774 <setvbuf+0xc8>
  40179a:	bf00      	nop
  40179c:	200004c0 	.word	0x200004c0
  4017a0:	00403141 	.word	0x00403141

004017a4 <strlen>:
  4017a4:	f020 0103 	bic.w	r1, r0, #3
  4017a8:	f010 0003 	ands.w	r0, r0, #3
  4017ac:	f1c0 0000 	rsb	r0, r0, #0
  4017b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4017b4:	f100 0c04 	add.w	ip, r0, #4
  4017b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4017bc:	f06f 0200 	mvn.w	r2, #0
  4017c0:	bf1c      	itt	ne
  4017c2:	fa22 f20c 	lsrne.w	r2, r2, ip
  4017c6:	4313      	orrne	r3, r2
  4017c8:	f04f 0c01 	mov.w	ip, #1
  4017cc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4017d0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4017d4:	eba3 020c 	sub.w	r2, r3, ip
  4017d8:	ea22 0203 	bic.w	r2, r2, r3
  4017dc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4017e0:	bf04      	itt	eq
  4017e2:	f851 3b04 	ldreq.w	r3, [r1], #4
  4017e6:	3004      	addeq	r0, #4
  4017e8:	d0f4      	beq.n	4017d4 <strlen+0x30>
  4017ea:	f1c2 0100 	rsb	r1, r2, #0
  4017ee:	ea02 0201 	and.w	r2, r2, r1
  4017f2:	fab2 f282 	clz	r2, r2
  4017f6:	f1c2 021f 	rsb	r2, r2, #31
  4017fa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4017fe:	4770      	bx	lr

00401800 <__sprint_r.part.0>:
  401800:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401806:	049c      	lsls	r4, r3, #18
  401808:	460f      	mov	r7, r1
  40180a:	4692      	mov	sl, r2
  40180c:	d52b      	bpl.n	401866 <__sprint_r.part.0+0x66>
  40180e:	6893      	ldr	r3, [r2, #8]
  401810:	6812      	ldr	r2, [r2, #0]
  401812:	b333      	cbz	r3, 401862 <__sprint_r.part.0+0x62>
  401814:	4680      	mov	r8, r0
  401816:	f102 0908 	add.w	r9, r2, #8
  40181a:	e919 0060 	ldmdb	r9, {r5, r6}
  40181e:	08b6      	lsrs	r6, r6, #2
  401820:	d017      	beq.n	401852 <__sprint_r.part.0+0x52>
  401822:	3d04      	subs	r5, #4
  401824:	2400      	movs	r4, #0
  401826:	e001      	b.n	40182c <__sprint_r.part.0+0x2c>
  401828:	42a6      	cmp	r6, r4
  40182a:	d010      	beq.n	40184e <__sprint_r.part.0+0x4e>
  40182c:	4640      	mov	r0, r8
  40182e:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401832:	463a      	mov	r2, r7
  401834:	f001 fd7a 	bl	40332c <_fputwc_r>
  401838:	1c43      	adds	r3, r0, #1
  40183a:	f104 0401 	add.w	r4, r4, #1
  40183e:	d1f3      	bne.n	401828 <__sprint_r.part.0+0x28>
  401840:	2300      	movs	r3, #0
  401842:	f8ca 3008 	str.w	r3, [sl, #8]
  401846:	f8ca 3004 	str.w	r3, [sl, #4]
  40184a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40184e:	f8da 3008 	ldr.w	r3, [sl, #8]
  401852:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  401856:	f8ca 3008 	str.w	r3, [sl, #8]
  40185a:	f109 0908 	add.w	r9, r9, #8
  40185e:	2b00      	cmp	r3, #0
  401860:	d1db      	bne.n	40181a <__sprint_r.part.0+0x1a>
  401862:	2000      	movs	r0, #0
  401864:	e7ec      	b.n	401840 <__sprint_r.part.0+0x40>
  401866:	f001 ff63 	bl	403730 <__sfvwrite_r>
  40186a:	2300      	movs	r3, #0
  40186c:	f8ca 3008 	str.w	r3, [sl, #8]
  401870:	f8ca 3004 	str.w	r3, [sl, #4]
  401874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401878 <_vfiprintf_r>:
  401878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40187c:	b0ab      	sub	sp, #172	; 0xac
  40187e:	461c      	mov	r4, r3
  401880:	9100      	str	r1, [sp, #0]
  401882:	4693      	mov	fp, r2
  401884:	9304      	str	r3, [sp, #16]
  401886:	9001      	str	r0, [sp, #4]
  401888:	b118      	cbz	r0, 401892 <_vfiprintf_r+0x1a>
  40188a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40188c:	2b00      	cmp	r3, #0
  40188e:	f000 80e3 	beq.w	401a58 <_vfiprintf_r+0x1e0>
  401892:	9b00      	ldr	r3, [sp, #0]
  401894:	8999      	ldrh	r1, [r3, #12]
  401896:	b28a      	uxth	r2, r1
  401898:	0490      	lsls	r0, r2, #18
  40189a:	d408      	bmi.n	4018ae <_vfiprintf_r+0x36>
  40189c:	4618      	mov	r0, r3
  40189e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  4018a0:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  4018a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4018a8:	8182      	strh	r2, [r0, #12]
  4018aa:	6643      	str	r3, [r0, #100]	; 0x64
  4018ac:	b292      	uxth	r2, r2
  4018ae:	0711      	lsls	r1, r2, #28
  4018b0:	f140 80b2 	bpl.w	401a18 <_vfiprintf_r+0x1a0>
  4018b4:	9b00      	ldr	r3, [sp, #0]
  4018b6:	691b      	ldr	r3, [r3, #16]
  4018b8:	2b00      	cmp	r3, #0
  4018ba:	f000 80ad 	beq.w	401a18 <_vfiprintf_r+0x1a0>
  4018be:	f002 021a 	and.w	r2, r2, #26
  4018c2:	2a0a      	cmp	r2, #10
  4018c4:	f000 80b4 	beq.w	401a30 <_vfiprintf_r+0x1b8>
  4018c8:	2300      	movs	r3, #0
  4018ca:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  4018ce:	9309      	str	r3, [sp, #36]	; 0x24
  4018d0:	930f      	str	r3, [sp, #60]	; 0x3c
  4018d2:	930e      	str	r3, [sp, #56]	; 0x38
  4018d4:	9302      	str	r3, [sp, #8]
  4018d6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  4018da:	4654      	mov	r4, sl
  4018dc:	f89b 3000 	ldrb.w	r3, [fp]
  4018e0:	2b00      	cmp	r3, #0
  4018e2:	f000 84a3 	beq.w	40222c <_vfiprintf_r+0x9b4>
  4018e6:	2b25      	cmp	r3, #37	; 0x25
  4018e8:	f000 84a0 	beq.w	40222c <_vfiprintf_r+0x9b4>
  4018ec:	465a      	mov	r2, fp
  4018ee:	e001      	b.n	4018f4 <_vfiprintf_r+0x7c>
  4018f0:	2b25      	cmp	r3, #37	; 0x25
  4018f2:	d003      	beq.n	4018fc <_vfiprintf_r+0x84>
  4018f4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4018f8:	2b00      	cmp	r3, #0
  4018fa:	d1f9      	bne.n	4018f0 <_vfiprintf_r+0x78>
  4018fc:	ebcb 0602 	rsb	r6, fp, r2
  401900:	4615      	mov	r5, r2
  401902:	b196      	cbz	r6, 40192a <_vfiprintf_r+0xb2>
  401904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401906:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401908:	f8c4 b000 	str.w	fp, [r4]
  40190c:	3301      	adds	r3, #1
  40190e:	4432      	add	r2, r6
  401910:	2b07      	cmp	r3, #7
  401912:	6066      	str	r6, [r4, #4]
  401914:	920f      	str	r2, [sp, #60]	; 0x3c
  401916:	930e      	str	r3, [sp, #56]	; 0x38
  401918:	dd79      	ble.n	401a0e <_vfiprintf_r+0x196>
  40191a:	2a00      	cmp	r2, #0
  40191c:	f040 84af 	bne.w	40227e <_vfiprintf_r+0xa06>
  401920:	9b02      	ldr	r3, [sp, #8]
  401922:	920e      	str	r2, [sp, #56]	; 0x38
  401924:	4433      	add	r3, r6
  401926:	4654      	mov	r4, sl
  401928:	9302      	str	r3, [sp, #8]
  40192a:	782b      	ldrb	r3, [r5, #0]
  40192c:	2b00      	cmp	r3, #0
  40192e:	f000 8360 	beq.w	401ff2 <_vfiprintf_r+0x77a>
  401932:	2100      	movs	r1, #0
  401934:	f04f 0300 	mov.w	r3, #0
  401938:	f04f 3cff 	mov.w	ip, #4294967295
  40193c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401940:	1c68      	adds	r0, r5, #1
  401942:	786b      	ldrb	r3, [r5, #1]
  401944:	4688      	mov	r8, r1
  401946:	460d      	mov	r5, r1
  401948:	4666      	mov	r6, ip
  40194a:	f100 0b01 	add.w	fp, r0, #1
  40194e:	f1a3 0220 	sub.w	r2, r3, #32
  401952:	2a58      	cmp	r2, #88	; 0x58
  401954:	f200 82ab 	bhi.w	401eae <_vfiprintf_r+0x636>
  401958:	e8df f012 	tbh	[pc, r2, lsl #1]
  40195c:	02a9029b 	.word	0x02a9029b
  401960:	02a302a9 	.word	0x02a302a9
  401964:	02a902a9 	.word	0x02a902a9
  401968:	02a902a9 	.word	0x02a902a9
  40196c:	02a902a9 	.word	0x02a902a9
  401970:	02620255 	.word	0x02620255
  401974:	010d02a9 	.word	0x010d02a9
  401978:	02a9026e 	.word	0x02a9026e
  40197c:	012f0129 	.word	0x012f0129
  401980:	012f012f 	.word	0x012f012f
  401984:	012f012f 	.word	0x012f012f
  401988:	012f012f 	.word	0x012f012f
  40198c:	012f012f 	.word	0x012f012f
  401990:	02a902a9 	.word	0x02a902a9
  401994:	02a902a9 	.word	0x02a902a9
  401998:	02a902a9 	.word	0x02a902a9
  40199c:	02a902a9 	.word	0x02a902a9
  4019a0:	02a902a9 	.word	0x02a902a9
  4019a4:	02a9013d 	.word	0x02a9013d
  4019a8:	02a902a9 	.word	0x02a902a9
  4019ac:	02a902a9 	.word	0x02a902a9
  4019b0:	02a902a9 	.word	0x02a902a9
  4019b4:	02a902a9 	.word	0x02a902a9
  4019b8:	017402a9 	.word	0x017402a9
  4019bc:	02a902a9 	.word	0x02a902a9
  4019c0:	02a902a9 	.word	0x02a902a9
  4019c4:	018b02a9 	.word	0x018b02a9
  4019c8:	02a902a9 	.word	0x02a902a9
  4019cc:	02a901a3 	.word	0x02a901a3
  4019d0:	02a902a9 	.word	0x02a902a9
  4019d4:	02a902a9 	.word	0x02a902a9
  4019d8:	02a902a9 	.word	0x02a902a9
  4019dc:	02a902a9 	.word	0x02a902a9
  4019e0:	01c702a9 	.word	0x01c702a9
  4019e4:	02a901da 	.word	0x02a901da
  4019e8:	02a902a9 	.word	0x02a902a9
  4019ec:	01da0123 	.word	0x01da0123
  4019f0:	02a902a9 	.word	0x02a902a9
  4019f4:	02a9024c 	.word	0x02a9024c
  4019f8:	0113028a 	.word	0x0113028a
  4019fc:	020701f3 	.word	0x020701f3
  401a00:	020d02a9 	.word	0x020d02a9
  401a04:	008102a9 	.word	0x008102a9
  401a08:	02a902a9 	.word	0x02a902a9
  401a0c:	0233      	.short	0x0233
  401a0e:	3408      	adds	r4, #8
  401a10:	9b02      	ldr	r3, [sp, #8]
  401a12:	4433      	add	r3, r6
  401a14:	9302      	str	r3, [sp, #8]
  401a16:	e788      	b.n	40192a <_vfiprintf_r+0xb2>
  401a18:	9801      	ldr	r0, [sp, #4]
  401a1a:	9900      	ldr	r1, [sp, #0]
  401a1c:	f001 fa4c 	bl	402eb8 <__swsetup_r>
  401a20:	b9a8      	cbnz	r0, 401a4e <_vfiprintf_r+0x1d6>
  401a22:	9b00      	ldr	r3, [sp, #0]
  401a24:	899a      	ldrh	r2, [r3, #12]
  401a26:	f002 021a 	and.w	r2, r2, #26
  401a2a:	2a0a      	cmp	r2, #10
  401a2c:	f47f af4c 	bne.w	4018c8 <_vfiprintf_r+0x50>
  401a30:	9b00      	ldr	r3, [sp, #0]
  401a32:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  401a36:	2b00      	cmp	r3, #0
  401a38:	f6ff af46 	blt.w	4018c8 <_vfiprintf_r+0x50>
  401a3c:	9801      	ldr	r0, [sp, #4]
  401a3e:	9900      	ldr	r1, [sp, #0]
  401a40:	465a      	mov	r2, fp
  401a42:	4623      	mov	r3, r4
  401a44:	f000 fd20 	bl	402488 <__sbprintf>
  401a48:	b02b      	add	sp, #172	; 0xac
  401a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a4e:	f04f 30ff 	mov.w	r0, #4294967295
  401a52:	b02b      	add	sp, #172	; 0xac
  401a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a58:	f001 fbf0 	bl	40323c <__sinit>
  401a5c:	e719      	b.n	401892 <_vfiprintf_r+0x1a>
  401a5e:	f018 0f20 	tst.w	r8, #32
  401a62:	9503      	str	r5, [sp, #12]
  401a64:	46b4      	mov	ip, r6
  401a66:	f000 810c 	beq.w	401c82 <_vfiprintf_r+0x40a>
  401a6a:	9b04      	ldr	r3, [sp, #16]
  401a6c:	3307      	adds	r3, #7
  401a6e:	f023 0307 	bic.w	r3, r3, #7
  401a72:	f103 0208 	add.w	r2, r3, #8
  401a76:	e9d3 6700 	ldrd	r6, r7, [r3]
  401a7a:	9204      	str	r2, [sp, #16]
  401a7c:	2301      	movs	r3, #1
  401a7e:	f04f 0200 	mov.w	r2, #0
  401a82:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401a86:	46e1      	mov	r9, ip
  401a88:	2500      	movs	r5, #0
  401a8a:	f1bc 0f00 	cmp.w	ip, #0
  401a8e:	bfa8      	it	ge
  401a90:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  401a94:	ea56 0207 	orrs.w	r2, r6, r7
  401a98:	f040 80c4 	bne.w	401c24 <_vfiprintf_r+0x3ac>
  401a9c:	f1bc 0f00 	cmp.w	ip, #0
  401aa0:	f000 8381 	beq.w	4021a6 <_vfiprintf_r+0x92e>
  401aa4:	2b01      	cmp	r3, #1
  401aa6:	f000 80c5 	beq.w	401c34 <_vfiprintf_r+0x3bc>
  401aaa:	2b02      	cmp	r3, #2
  401aac:	f000 8387 	beq.w	4021be <_vfiprintf_r+0x946>
  401ab0:	4651      	mov	r1, sl
  401ab2:	08f2      	lsrs	r2, r6, #3
  401ab4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401ab8:	08f8      	lsrs	r0, r7, #3
  401aba:	f006 0307 	and.w	r3, r6, #7
  401abe:	4607      	mov	r7, r0
  401ac0:	4616      	mov	r6, r2
  401ac2:	3330      	adds	r3, #48	; 0x30
  401ac4:	ea56 0207 	orrs.w	r2, r6, r7
  401ac8:	f801 3d01 	strb.w	r3, [r1, #-1]!
  401acc:	d1f1      	bne.n	401ab2 <_vfiprintf_r+0x23a>
  401ace:	f018 0f01 	tst.w	r8, #1
  401ad2:	9107      	str	r1, [sp, #28]
  401ad4:	f040 83fc 	bne.w	4022d0 <_vfiprintf_r+0xa58>
  401ad8:	ebc1 090a 	rsb	r9, r1, sl
  401adc:	45e1      	cmp	r9, ip
  401ade:	464e      	mov	r6, r9
  401ae0:	bfb8      	it	lt
  401ae2:	4666      	movlt	r6, ip
  401ae4:	b105      	cbz	r5, 401ae8 <_vfiprintf_r+0x270>
  401ae6:	3601      	adds	r6, #1
  401ae8:	f018 0302 	ands.w	r3, r8, #2
  401aec:	9305      	str	r3, [sp, #20]
  401aee:	bf18      	it	ne
  401af0:	3602      	addne	r6, #2
  401af2:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  401af6:	9306      	str	r3, [sp, #24]
  401af8:	f040 81fa 	bne.w	401ef0 <_vfiprintf_r+0x678>
  401afc:	9b03      	ldr	r3, [sp, #12]
  401afe:	1b9d      	subs	r5, r3, r6
  401b00:	2d00      	cmp	r5, #0
  401b02:	f340 81f5 	ble.w	401ef0 <_vfiprintf_r+0x678>
  401b06:	2d10      	cmp	r5, #16
  401b08:	f340 848c 	ble.w	402424 <_vfiprintf_r+0xbac>
  401b0c:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  401b10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401b12:	4fc6      	ldr	r7, [pc, #792]	; (401e2c <_vfiprintf_r+0x5b4>)
  401b14:	4620      	mov	r0, r4
  401b16:	2310      	movs	r3, #16
  401b18:	4664      	mov	r4, ip
  401b1a:	4671      	mov	r1, lr
  401b1c:	4684      	mov	ip, r0
  401b1e:	e007      	b.n	401b30 <_vfiprintf_r+0x2b8>
  401b20:	f101 0e02 	add.w	lr, r1, #2
  401b24:	f10c 0c08 	add.w	ip, ip, #8
  401b28:	4601      	mov	r1, r0
  401b2a:	3d10      	subs	r5, #16
  401b2c:	2d10      	cmp	r5, #16
  401b2e:	dd13      	ble.n	401b58 <_vfiprintf_r+0x2e0>
  401b30:	1c48      	adds	r0, r1, #1
  401b32:	3210      	adds	r2, #16
  401b34:	2807      	cmp	r0, #7
  401b36:	920f      	str	r2, [sp, #60]	; 0x3c
  401b38:	f8cc 7000 	str.w	r7, [ip]
  401b3c:	f8cc 3004 	str.w	r3, [ip, #4]
  401b40:	900e      	str	r0, [sp, #56]	; 0x38
  401b42:	dded      	ble.n	401b20 <_vfiprintf_r+0x2a8>
  401b44:	2a00      	cmp	r2, #0
  401b46:	f040 81c3 	bne.w	401ed0 <_vfiprintf_r+0x658>
  401b4a:	3d10      	subs	r5, #16
  401b4c:	2d10      	cmp	r5, #16
  401b4e:	4611      	mov	r1, r2
  401b50:	f04f 0e01 	mov.w	lr, #1
  401b54:	46d4      	mov	ip, sl
  401b56:	dceb      	bgt.n	401b30 <_vfiprintf_r+0x2b8>
  401b58:	4663      	mov	r3, ip
  401b5a:	4671      	mov	r1, lr
  401b5c:	46a4      	mov	ip, r4
  401b5e:	461c      	mov	r4, r3
  401b60:	442a      	add	r2, r5
  401b62:	2907      	cmp	r1, #7
  401b64:	920f      	str	r2, [sp, #60]	; 0x3c
  401b66:	6027      	str	r7, [r4, #0]
  401b68:	6065      	str	r5, [r4, #4]
  401b6a:	910e      	str	r1, [sp, #56]	; 0x38
  401b6c:	f300 8346 	bgt.w	4021fc <_vfiprintf_r+0x984>
  401b70:	3408      	adds	r4, #8
  401b72:	1c48      	adds	r0, r1, #1
  401b74:	e1bf      	b.n	401ef6 <_vfiprintf_r+0x67e>
  401b76:	4658      	mov	r0, fp
  401b78:	f048 0804 	orr.w	r8, r8, #4
  401b7c:	f89b 3000 	ldrb.w	r3, [fp]
  401b80:	e6e3      	b.n	40194a <_vfiprintf_r+0xd2>
  401b82:	f018 0320 	ands.w	r3, r8, #32
  401b86:	9503      	str	r5, [sp, #12]
  401b88:	46b4      	mov	ip, r6
  401b8a:	d062      	beq.n	401c52 <_vfiprintf_r+0x3da>
  401b8c:	9b04      	ldr	r3, [sp, #16]
  401b8e:	3307      	adds	r3, #7
  401b90:	f023 0307 	bic.w	r3, r3, #7
  401b94:	f103 0208 	add.w	r2, r3, #8
  401b98:	e9d3 6700 	ldrd	r6, r7, [r3]
  401b9c:	9204      	str	r2, [sp, #16]
  401b9e:	2300      	movs	r3, #0
  401ba0:	e76d      	b.n	401a7e <_vfiprintf_r+0x206>
  401ba2:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  401ba6:	f89b 3000 	ldrb.w	r3, [fp]
  401baa:	4658      	mov	r0, fp
  401bac:	e6cd      	b.n	40194a <_vfiprintf_r+0xd2>
  401bae:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  401bb2:	f89b 3000 	ldrb.w	r3, [fp]
  401bb6:	4658      	mov	r0, fp
  401bb8:	e6c7      	b.n	40194a <_vfiprintf_r+0xd2>
  401bba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401bbe:	2500      	movs	r5, #0
  401bc0:	f81b 3b01 	ldrb.w	r3, [fp], #1
  401bc4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401bc8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  401bcc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401bd0:	2a09      	cmp	r2, #9
  401bd2:	d9f5      	bls.n	401bc0 <_vfiprintf_r+0x348>
  401bd4:	e6bb      	b.n	40194e <_vfiprintf_r+0xd6>
  401bd6:	f048 0810 	orr.w	r8, r8, #16
  401bda:	f018 0f20 	tst.w	r8, #32
  401bde:	9503      	str	r5, [sp, #12]
  401be0:	46b4      	mov	ip, r6
  401be2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401be6:	f000 809b 	beq.w	401d20 <_vfiprintf_r+0x4a8>
  401bea:	9904      	ldr	r1, [sp, #16]
  401bec:	3107      	adds	r1, #7
  401bee:	f021 0107 	bic.w	r1, r1, #7
  401bf2:	e9d1 2300 	ldrd	r2, r3, [r1]
  401bf6:	3108      	adds	r1, #8
  401bf8:	9104      	str	r1, [sp, #16]
  401bfa:	4616      	mov	r6, r2
  401bfc:	461f      	mov	r7, r3
  401bfe:	2a00      	cmp	r2, #0
  401c00:	f173 0300 	sbcs.w	r3, r3, #0
  401c04:	f2c0 83a6 	blt.w	402354 <_vfiprintf_r+0xadc>
  401c08:	f1bc 0f00 	cmp.w	ip, #0
  401c0c:	bfa8      	it	ge
  401c0e:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  401c12:	ea56 0207 	orrs.w	r2, r6, r7
  401c16:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401c1a:	46e1      	mov	r9, ip
  401c1c:	f04f 0301 	mov.w	r3, #1
  401c20:	f43f af3c 	beq.w	401a9c <_vfiprintf_r+0x224>
  401c24:	2b01      	cmp	r3, #1
  401c26:	f47f af40 	bne.w	401aaa <_vfiprintf_r+0x232>
  401c2a:	2f00      	cmp	r7, #0
  401c2c:	bf08      	it	eq
  401c2e:	2e0a      	cmpeq	r6, #10
  401c30:	f080 8334 	bcs.w	40229c <_vfiprintf_r+0xa24>
  401c34:	ab2a      	add	r3, sp, #168	; 0xa8
  401c36:	3630      	adds	r6, #48	; 0x30
  401c38:	f803 6d41 	strb.w	r6, [r3, #-65]!
  401c3c:	ebc3 090a 	rsb	r9, r3, sl
  401c40:	9307      	str	r3, [sp, #28]
  401c42:	e74b      	b.n	401adc <_vfiprintf_r+0x264>
  401c44:	f048 0810 	orr.w	r8, r8, #16
  401c48:	f018 0320 	ands.w	r3, r8, #32
  401c4c:	9503      	str	r5, [sp, #12]
  401c4e:	46b4      	mov	ip, r6
  401c50:	d19c      	bne.n	401b8c <_vfiprintf_r+0x314>
  401c52:	f018 0210 	ands.w	r2, r8, #16
  401c56:	f040 82f7 	bne.w	402248 <_vfiprintf_r+0x9d0>
  401c5a:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  401c5e:	f000 82f3 	beq.w	402248 <_vfiprintf_r+0x9d0>
  401c62:	9904      	ldr	r1, [sp, #16]
  401c64:	4613      	mov	r3, r2
  401c66:	460a      	mov	r2, r1
  401c68:	3204      	adds	r2, #4
  401c6a:	880e      	ldrh	r6, [r1, #0]
  401c6c:	9204      	str	r2, [sp, #16]
  401c6e:	2700      	movs	r7, #0
  401c70:	e705      	b.n	401a7e <_vfiprintf_r+0x206>
  401c72:	f048 0810 	orr.w	r8, r8, #16
  401c76:	f018 0f20 	tst.w	r8, #32
  401c7a:	9503      	str	r5, [sp, #12]
  401c7c:	46b4      	mov	ip, r6
  401c7e:	f47f aef4 	bne.w	401a6a <_vfiprintf_r+0x1f2>
  401c82:	9a04      	ldr	r2, [sp, #16]
  401c84:	f018 0f10 	tst.w	r8, #16
  401c88:	4613      	mov	r3, r2
  401c8a:	f040 82e4 	bne.w	402256 <_vfiprintf_r+0x9de>
  401c8e:	f018 0f40 	tst.w	r8, #64	; 0x40
  401c92:	f000 82e0 	beq.w	402256 <_vfiprintf_r+0x9de>
  401c96:	8816      	ldrh	r6, [r2, #0]
  401c98:	3204      	adds	r2, #4
  401c9a:	2700      	movs	r7, #0
  401c9c:	2301      	movs	r3, #1
  401c9e:	9204      	str	r2, [sp, #16]
  401ca0:	e6ed      	b.n	401a7e <_vfiprintf_r+0x206>
  401ca2:	4a63      	ldr	r2, [pc, #396]	; (401e30 <_vfiprintf_r+0x5b8>)
  401ca4:	9503      	str	r5, [sp, #12]
  401ca6:	f018 0f20 	tst.w	r8, #32
  401caa:	46b4      	mov	ip, r6
  401cac:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401cb0:	9209      	str	r2, [sp, #36]	; 0x24
  401cb2:	f000 8090 	beq.w	401dd6 <_vfiprintf_r+0x55e>
  401cb6:	9a04      	ldr	r2, [sp, #16]
  401cb8:	3207      	adds	r2, #7
  401cba:	f022 0207 	bic.w	r2, r2, #7
  401cbe:	e9d2 6700 	ldrd	r6, r7, [r2]
  401cc2:	f102 0108 	add.w	r1, r2, #8
  401cc6:	9104      	str	r1, [sp, #16]
  401cc8:	f018 0f01 	tst.w	r8, #1
  401ccc:	f000 8290 	beq.w	4021f0 <_vfiprintf_r+0x978>
  401cd0:	ea56 0207 	orrs.w	r2, r6, r7
  401cd4:	f000 828c 	beq.w	4021f0 <_vfiprintf_r+0x978>
  401cd8:	2230      	movs	r2, #48	; 0x30
  401cda:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  401cde:	f048 0802 	orr.w	r8, r8, #2
  401ce2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  401ce6:	2302      	movs	r3, #2
  401ce8:	e6c9      	b.n	401a7e <_vfiprintf_r+0x206>
  401cea:	9a04      	ldr	r2, [sp, #16]
  401cec:	9503      	str	r5, [sp, #12]
  401cee:	6813      	ldr	r3, [r2, #0]
  401cf0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401cf4:	4613      	mov	r3, r2
  401cf6:	3304      	adds	r3, #4
  401cf8:	2601      	movs	r6, #1
  401cfa:	f04f 0100 	mov.w	r1, #0
  401cfe:	9304      	str	r3, [sp, #16]
  401d00:	ab10      	add	r3, sp, #64	; 0x40
  401d02:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401d06:	46b1      	mov	r9, r6
  401d08:	9307      	str	r3, [sp, #28]
  401d0a:	f04f 0c00 	mov.w	ip, #0
  401d0e:	e6eb      	b.n	401ae8 <_vfiprintf_r+0x270>
  401d10:	f018 0f20 	tst.w	r8, #32
  401d14:	9503      	str	r5, [sp, #12]
  401d16:	46b4      	mov	ip, r6
  401d18:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401d1c:	f47f af65 	bne.w	401bea <_vfiprintf_r+0x372>
  401d20:	f018 0f10 	tst.w	r8, #16
  401d24:	f040 82a2 	bne.w	40226c <_vfiprintf_r+0x9f4>
  401d28:	f018 0f40 	tst.w	r8, #64	; 0x40
  401d2c:	f000 829e 	beq.w	40226c <_vfiprintf_r+0x9f4>
  401d30:	9904      	ldr	r1, [sp, #16]
  401d32:	f9b1 6000 	ldrsh.w	r6, [r1]
  401d36:	3104      	adds	r1, #4
  401d38:	17f7      	asrs	r7, r6, #31
  401d3a:	4632      	mov	r2, r6
  401d3c:	463b      	mov	r3, r7
  401d3e:	9104      	str	r1, [sp, #16]
  401d40:	e75d      	b.n	401bfe <_vfiprintf_r+0x386>
  401d42:	9904      	ldr	r1, [sp, #16]
  401d44:	9503      	str	r5, [sp, #12]
  401d46:	2330      	movs	r3, #48	; 0x30
  401d48:	460a      	mov	r2, r1
  401d4a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  401d4e:	2378      	movs	r3, #120	; 0x78
  401d50:	3204      	adds	r2, #4
  401d52:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  401d56:	4b37      	ldr	r3, [pc, #220]	; (401e34 <_vfiprintf_r+0x5bc>)
  401d58:	9309      	str	r3, [sp, #36]	; 0x24
  401d5a:	46b4      	mov	ip, r6
  401d5c:	f048 0802 	orr.w	r8, r8, #2
  401d60:	680e      	ldr	r6, [r1, #0]
  401d62:	9204      	str	r2, [sp, #16]
  401d64:	2700      	movs	r7, #0
  401d66:	2302      	movs	r3, #2
  401d68:	e689      	b.n	401a7e <_vfiprintf_r+0x206>
  401d6a:	f048 0820 	orr.w	r8, r8, #32
  401d6e:	f89b 3000 	ldrb.w	r3, [fp]
  401d72:	4658      	mov	r0, fp
  401d74:	e5e9      	b.n	40194a <_vfiprintf_r+0xd2>
  401d76:	9a04      	ldr	r2, [sp, #16]
  401d78:	9503      	str	r5, [sp, #12]
  401d7a:	6813      	ldr	r3, [r2, #0]
  401d7c:	9307      	str	r3, [sp, #28]
  401d7e:	f04f 0100 	mov.w	r1, #0
  401d82:	46b4      	mov	ip, r6
  401d84:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401d88:	1d16      	adds	r6, r2, #4
  401d8a:	2b00      	cmp	r3, #0
  401d8c:	f000 8350 	beq.w	402430 <_vfiprintf_r+0xbb8>
  401d90:	f1bc 0f00 	cmp.w	ip, #0
  401d94:	f2c0 832a 	blt.w	4023ec <_vfiprintf_r+0xb74>
  401d98:	9d07      	ldr	r5, [sp, #28]
  401d9a:	f8cd c010 	str.w	ip, [sp, #16]
  401d9e:	4662      	mov	r2, ip
  401da0:	4628      	mov	r0, r5
  401da2:	2100      	movs	r1, #0
  401da4:	f002 fa06 	bl	4041b4 <memchr>
  401da8:	f8dd c010 	ldr.w	ip, [sp, #16]
  401dac:	2800      	cmp	r0, #0
  401dae:	f000 8350 	beq.w	402452 <_vfiprintf_r+0xbda>
  401db2:	ebc5 0900 	rsb	r9, r5, r0
  401db6:	9604      	str	r6, [sp, #16]
  401db8:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401dbc:	f04f 0c00 	mov.w	ip, #0
  401dc0:	e68c      	b.n	401adc <_vfiprintf_r+0x264>
  401dc2:	4a1c      	ldr	r2, [pc, #112]	; (401e34 <_vfiprintf_r+0x5bc>)
  401dc4:	9503      	str	r5, [sp, #12]
  401dc6:	f018 0f20 	tst.w	r8, #32
  401dca:	46b4      	mov	ip, r6
  401dcc:	9209      	str	r2, [sp, #36]	; 0x24
  401dce:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401dd2:	f47f af70 	bne.w	401cb6 <_vfiprintf_r+0x43e>
  401dd6:	9904      	ldr	r1, [sp, #16]
  401dd8:	f018 0f10 	tst.w	r8, #16
  401ddc:	460a      	mov	r2, r1
  401dde:	f040 8240 	bne.w	402262 <_vfiprintf_r+0x9ea>
  401de2:	f018 0f40 	tst.w	r8, #64	; 0x40
  401de6:	f000 823c 	beq.w	402262 <_vfiprintf_r+0x9ea>
  401dea:	3204      	adds	r2, #4
  401dec:	880e      	ldrh	r6, [r1, #0]
  401dee:	9204      	str	r2, [sp, #16]
  401df0:	2700      	movs	r7, #0
  401df2:	e769      	b.n	401cc8 <_vfiprintf_r+0x450>
  401df4:	f89b 3000 	ldrb.w	r3, [fp]
  401df8:	2b6c      	cmp	r3, #108	; 0x6c
  401dfa:	f000 82ea 	beq.w	4023d2 <_vfiprintf_r+0xb5a>
  401dfe:	f048 0810 	orr.w	r8, r8, #16
  401e02:	4658      	mov	r0, fp
  401e04:	e5a1      	b.n	40194a <_vfiprintf_r+0xd2>
  401e06:	9a04      	ldr	r2, [sp, #16]
  401e08:	6815      	ldr	r5, [r2, #0]
  401e0a:	4613      	mov	r3, r2
  401e0c:	2d00      	cmp	r5, #0
  401e0e:	f103 0304 	add.w	r3, r3, #4
  401e12:	f2c0 82e6 	blt.w	4023e2 <_vfiprintf_r+0xb6a>
  401e16:	9304      	str	r3, [sp, #16]
  401e18:	f89b 3000 	ldrb.w	r3, [fp]
  401e1c:	4658      	mov	r0, fp
  401e1e:	e594      	b.n	40194a <_vfiprintf_r+0xd2>
  401e20:	f89b 3000 	ldrb.w	r3, [fp]
  401e24:	4658      	mov	r0, fp
  401e26:	212b      	movs	r1, #43	; 0x2b
  401e28:	e58f      	b.n	40194a <_vfiprintf_r+0xd2>
  401e2a:	bf00      	nop
  401e2c:	00405e84 	.word	0x00405e84
  401e30:	00405e54 	.word	0x00405e54
  401e34:	00405e68 	.word	0x00405e68
  401e38:	f89b 3000 	ldrb.w	r3, [fp]
  401e3c:	2b2a      	cmp	r3, #42	; 0x2a
  401e3e:	f10b 0001 	add.w	r0, fp, #1
  401e42:	f000 830f 	beq.w	402464 <_vfiprintf_r+0xbec>
  401e46:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401e4a:	2a09      	cmp	r2, #9
  401e4c:	4683      	mov	fp, r0
  401e4e:	f04f 0600 	mov.w	r6, #0
  401e52:	f63f ad7c 	bhi.w	40194e <_vfiprintf_r+0xd6>
  401e56:	f81b 3b01 	ldrb.w	r3, [fp], #1
  401e5a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401e5e:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  401e62:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401e66:	2a09      	cmp	r2, #9
  401e68:	d9f5      	bls.n	401e56 <_vfiprintf_r+0x5de>
  401e6a:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  401e6e:	e56e      	b.n	40194e <_vfiprintf_r+0xd6>
  401e70:	f018 0f20 	tst.w	r8, #32
  401e74:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401e78:	f000 8283 	beq.w	402382 <_vfiprintf_r+0xb0a>
  401e7c:	9a04      	ldr	r2, [sp, #16]
  401e7e:	9902      	ldr	r1, [sp, #8]
  401e80:	6813      	ldr	r3, [r2, #0]
  401e82:	17cf      	asrs	r7, r1, #31
  401e84:	4608      	mov	r0, r1
  401e86:	3204      	adds	r2, #4
  401e88:	4639      	mov	r1, r7
  401e8a:	9204      	str	r2, [sp, #16]
  401e8c:	e9c3 0100 	strd	r0, r1, [r3]
  401e90:	e524      	b.n	4018dc <_vfiprintf_r+0x64>
  401e92:	4658      	mov	r0, fp
  401e94:	f89b 3000 	ldrb.w	r3, [fp]
  401e98:	2900      	cmp	r1, #0
  401e9a:	f47f ad56 	bne.w	40194a <_vfiprintf_r+0xd2>
  401e9e:	2120      	movs	r1, #32
  401ea0:	e553      	b.n	40194a <_vfiprintf_r+0xd2>
  401ea2:	f048 0801 	orr.w	r8, r8, #1
  401ea6:	4658      	mov	r0, fp
  401ea8:	f89b 3000 	ldrb.w	r3, [fp]
  401eac:	e54d      	b.n	40194a <_vfiprintf_r+0xd2>
  401eae:	9503      	str	r5, [sp, #12]
  401eb0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401eb4:	2b00      	cmp	r3, #0
  401eb6:	f000 809c 	beq.w	401ff2 <_vfiprintf_r+0x77a>
  401eba:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401ebe:	f04f 0300 	mov.w	r3, #0
  401ec2:	2601      	movs	r6, #1
  401ec4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401ec8:	ab10      	add	r3, sp, #64	; 0x40
  401eca:	46b1      	mov	r9, r6
  401ecc:	9307      	str	r3, [sp, #28]
  401ece:	e71c      	b.n	401d0a <_vfiprintf_r+0x492>
  401ed0:	9801      	ldr	r0, [sp, #4]
  401ed2:	9900      	ldr	r1, [sp, #0]
  401ed4:	9308      	str	r3, [sp, #32]
  401ed6:	aa0d      	add	r2, sp, #52	; 0x34
  401ed8:	f7ff fc92 	bl	401800 <__sprint_r.part.0>
  401edc:	2800      	cmp	r0, #0
  401ede:	f040 808f 	bne.w	402000 <_vfiprintf_r+0x788>
  401ee2:	990e      	ldr	r1, [sp, #56]	; 0x38
  401ee4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401ee6:	9b08      	ldr	r3, [sp, #32]
  401ee8:	f101 0e01 	add.w	lr, r1, #1
  401eec:	46d4      	mov	ip, sl
  401eee:	e61c      	b.n	401b2a <_vfiprintf_r+0x2b2>
  401ef0:	990e      	ldr	r1, [sp, #56]	; 0x38
  401ef2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401ef4:	1c48      	adds	r0, r1, #1
  401ef6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401efa:	b16b      	cbz	r3, 401f18 <_vfiprintf_r+0x6a0>
  401efc:	3201      	adds	r2, #1
  401efe:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  401f02:	2101      	movs	r1, #1
  401f04:	2807      	cmp	r0, #7
  401f06:	920f      	str	r2, [sp, #60]	; 0x3c
  401f08:	900e      	str	r0, [sp, #56]	; 0x38
  401f0a:	6023      	str	r3, [r4, #0]
  401f0c:	6061      	str	r1, [r4, #4]
  401f0e:	f300 8134 	bgt.w	40217a <_vfiprintf_r+0x902>
  401f12:	4601      	mov	r1, r0
  401f14:	3408      	adds	r4, #8
  401f16:	3001      	adds	r0, #1
  401f18:	9b05      	ldr	r3, [sp, #20]
  401f1a:	b163      	cbz	r3, 401f36 <_vfiprintf_r+0x6be>
  401f1c:	3202      	adds	r2, #2
  401f1e:	a90c      	add	r1, sp, #48	; 0x30
  401f20:	2302      	movs	r3, #2
  401f22:	2807      	cmp	r0, #7
  401f24:	920f      	str	r2, [sp, #60]	; 0x3c
  401f26:	900e      	str	r0, [sp, #56]	; 0x38
  401f28:	e884 000a 	stmia.w	r4, {r1, r3}
  401f2c:	f300 8134 	bgt.w	402198 <_vfiprintf_r+0x920>
  401f30:	4601      	mov	r1, r0
  401f32:	3408      	adds	r4, #8
  401f34:	3001      	adds	r0, #1
  401f36:	9b06      	ldr	r3, [sp, #24]
  401f38:	2b80      	cmp	r3, #128	; 0x80
  401f3a:	f000 80d4 	beq.w	4020e6 <_vfiprintf_r+0x86e>
  401f3e:	ebc9 070c 	rsb	r7, r9, ip
  401f42:	2f00      	cmp	r7, #0
  401f44:	dd2b      	ble.n	401f9e <_vfiprintf_r+0x726>
  401f46:	2f10      	cmp	r7, #16
  401f48:	4daa      	ldr	r5, [pc, #680]	; (4021f4 <_vfiprintf_r+0x97c>)
  401f4a:	dd1f      	ble.n	401f8c <_vfiprintf_r+0x714>
  401f4c:	46a6      	mov	lr, r4
  401f4e:	2310      	movs	r3, #16
  401f50:	9c01      	ldr	r4, [sp, #4]
  401f52:	e007      	b.n	401f64 <_vfiprintf_r+0x6ec>
  401f54:	f101 0c02 	add.w	ip, r1, #2
  401f58:	f10e 0e08 	add.w	lr, lr, #8
  401f5c:	4601      	mov	r1, r0
  401f5e:	3f10      	subs	r7, #16
  401f60:	2f10      	cmp	r7, #16
  401f62:	dd11      	ble.n	401f88 <_vfiprintf_r+0x710>
  401f64:	1c48      	adds	r0, r1, #1
  401f66:	3210      	adds	r2, #16
  401f68:	2807      	cmp	r0, #7
  401f6a:	920f      	str	r2, [sp, #60]	; 0x3c
  401f6c:	f8ce 5000 	str.w	r5, [lr]
  401f70:	f8ce 3004 	str.w	r3, [lr, #4]
  401f74:	900e      	str	r0, [sp, #56]	; 0x38
  401f76:	dded      	ble.n	401f54 <_vfiprintf_r+0x6dc>
  401f78:	bb6a      	cbnz	r2, 401fd6 <_vfiprintf_r+0x75e>
  401f7a:	3f10      	subs	r7, #16
  401f7c:	2f10      	cmp	r7, #16
  401f7e:	f04f 0c01 	mov.w	ip, #1
  401f82:	4611      	mov	r1, r2
  401f84:	46d6      	mov	lr, sl
  401f86:	dced      	bgt.n	401f64 <_vfiprintf_r+0x6ec>
  401f88:	4674      	mov	r4, lr
  401f8a:	4660      	mov	r0, ip
  401f8c:	443a      	add	r2, r7
  401f8e:	2807      	cmp	r0, #7
  401f90:	920f      	str	r2, [sp, #60]	; 0x3c
  401f92:	e884 00a0 	stmia.w	r4, {r5, r7}
  401f96:	900e      	str	r0, [sp, #56]	; 0x38
  401f98:	dc3b      	bgt.n	402012 <_vfiprintf_r+0x79a>
  401f9a:	3408      	adds	r4, #8
  401f9c:	3001      	adds	r0, #1
  401f9e:	eb02 0309 	add.w	r3, r2, r9
  401fa2:	9a07      	ldr	r2, [sp, #28]
  401fa4:	930f      	str	r3, [sp, #60]	; 0x3c
  401fa6:	2807      	cmp	r0, #7
  401fa8:	e884 0204 	stmia.w	r4, {r2, r9}
  401fac:	900e      	str	r0, [sp, #56]	; 0x38
  401fae:	dd3d      	ble.n	40202c <_vfiprintf_r+0x7b4>
  401fb0:	2b00      	cmp	r3, #0
  401fb2:	f040 813e 	bne.w	402232 <_vfiprintf_r+0x9ba>
  401fb6:	f018 0f04 	tst.w	r8, #4
  401fba:	930e      	str	r3, [sp, #56]	; 0x38
  401fbc:	f040 812f 	bne.w	40221e <_vfiprintf_r+0x9a6>
  401fc0:	9b02      	ldr	r3, [sp, #8]
  401fc2:	9a03      	ldr	r2, [sp, #12]
  401fc4:	4296      	cmp	r6, r2
  401fc6:	bfac      	ite	ge
  401fc8:	199b      	addge	r3, r3, r6
  401fca:	189b      	addlt	r3, r3, r2
  401fcc:	9302      	str	r3, [sp, #8]
  401fce:	2300      	movs	r3, #0
  401fd0:	930e      	str	r3, [sp, #56]	; 0x38
  401fd2:	4654      	mov	r4, sl
  401fd4:	e482      	b.n	4018dc <_vfiprintf_r+0x64>
  401fd6:	4620      	mov	r0, r4
  401fd8:	9900      	ldr	r1, [sp, #0]
  401fda:	9305      	str	r3, [sp, #20]
  401fdc:	aa0d      	add	r2, sp, #52	; 0x34
  401fde:	f7ff fc0f 	bl	401800 <__sprint_r.part.0>
  401fe2:	b968      	cbnz	r0, 402000 <_vfiprintf_r+0x788>
  401fe4:	990e      	ldr	r1, [sp, #56]	; 0x38
  401fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401fe8:	9b05      	ldr	r3, [sp, #20]
  401fea:	f101 0c01 	add.w	ip, r1, #1
  401fee:	46d6      	mov	lr, sl
  401ff0:	e7b5      	b.n	401f5e <_vfiprintf_r+0x6e6>
  401ff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401ff4:	b123      	cbz	r3, 402000 <_vfiprintf_r+0x788>
  401ff6:	9801      	ldr	r0, [sp, #4]
  401ff8:	9900      	ldr	r1, [sp, #0]
  401ffa:	aa0d      	add	r2, sp, #52	; 0x34
  401ffc:	f7ff fc00 	bl	401800 <__sprint_r.part.0>
  402000:	9b00      	ldr	r3, [sp, #0]
  402002:	899b      	ldrh	r3, [r3, #12]
  402004:	065b      	lsls	r3, r3, #25
  402006:	f53f ad22 	bmi.w	401a4e <_vfiprintf_r+0x1d6>
  40200a:	9802      	ldr	r0, [sp, #8]
  40200c:	b02b      	add	sp, #172	; 0xac
  40200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402012:	2a00      	cmp	r2, #0
  402014:	f040 8191 	bne.w	40233a <_vfiprintf_r+0xac2>
  402018:	2201      	movs	r2, #1
  40201a:	9907      	ldr	r1, [sp, #28]
  40201c:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  402020:	464b      	mov	r3, r9
  402022:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402026:	911a      	str	r1, [sp, #104]	; 0x68
  402028:	920e      	str	r2, [sp, #56]	; 0x38
  40202a:	4654      	mov	r4, sl
  40202c:	f104 0208 	add.w	r2, r4, #8
  402030:	f018 0f04 	tst.w	r8, #4
  402034:	d039      	beq.n	4020aa <_vfiprintf_r+0x832>
  402036:	9903      	ldr	r1, [sp, #12]
  402038:	1b8d      	subs	r5, r1, r6
  40203a:	2d00      	cmp	r5, #0
  40203c:	dd35      	ble.n	4020aa <_vfiprintf_r+0x832>
  40203e:	2d10      	cmp	r5, #16
  402040:	f340 8202 	ble.w	402448 <_vfiprintf_r+0xbd0>
  402044:	980e      	ldr	r0, [sp, #56]	; 0x38
  402046:	4f6c      	ldr	r7, [pc, #432]	; (4021f8 <_vfiprintf_r+0x980>)
  402048:	f8dd 8004 	ldr.w	r8, [sp, #4]
  40204c:	f8dd 9000 	ldr.w	r9, [sp]
  402050:	2410      	movs	r4, #16
  402052:	e006      	b.n	402062 <_vfiprintf_r+0x7ea>
  402054:	f100 0e02 	add.w	lr, r0, #2
  402058:	3208      	adds	r2, #8
  40205a:	4608      	mov	r0, r1
  40205c:	3d10      	subs	r5, #16
  40205e:	2d10      	cmp	r5, #16
  402060:	dd10      	ble.n	402084 <_vfiprintf_r+0x80c>
  402062:	1c41      	adds	r1, r0, #1
  402064:	3310      	adds	r3, #16
  402066:	2907      	cmp	r1, #7
  402068:	930f      	str	r3, [sp, #60]	; 0x3c
  40206a:	6017      	str	r7, [r2, #0]
  40206c:	6054      	str	r4, [r2, #4]
  40206e:	910e      	str	r1, [sp, #56]	; 0x38
  402070:	ddf0      	ble.n	402054 <_vfiprintf_r+0x7dc>
  402072:	2b00      	cmp	r3, #0
  402074:	d12a      	bne.n	4020cc <_vfiprintf_r+0x854>
  402076:	3d10      	subs	r5, #16
  402078:	2d10      	cmp	r5, #16
  40207a:	f04f 0e01 	mov.w	lr, #1
  40207e:	4618      	mov	r0, r3
  402080:	4652      	mov	r2, sl
  402082:	dcee      	bgt.n	402062 <_vfiprintf_r+0x7ea>
  402084:	442b      	add	r3, r5
  402086:	f1be 0f07 	cmp.w	lr, #7
  40208a:	930f      	str	r3, [sp, #60]	; 0x3c
  40208c:	6017      	str	r7, [r2, #0]
  40208e:	6055      	str	r5, [r2, #4]
  402090:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402094:	dd09      	ble.n	4020aa <_vfiprintf_r+0x832>
  402096:	2b00      	cmp	r3, #0
  402098:	d092      	beq.n	401fc0 <_vfiprintf_r+0x748>
  40209a:	9801      	ldr	r0, [sp, #4]
  40209c:	9900      	ldr	r1, [sp, #0]
  40209e:	aa0d      	add	r2, sp, #52	; 0x34
  4020a0:	f7ff fbae 	bl	401800 <__sprint_r.part.0>
  4020a4:	2800      	cmp	r0, #0
  4020a6:	d1ab      	bne.n	402000 <_vfiprintf_r+0x788>
  4020a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4020aa:	9a02      	ldr	r2, [sp, #8]
  4020ac:	9903      	ldr	r1, [sp, #12]
  4020ae:	428e      	cmp	r6, r1
  4020b0:	bfac      	ite	ge
  4020b2:	1992      	addge	r2, r2, r6
  4020b4:	1852      	addlt	r2, r2, r1
  4020b6:	9202      	str	r2, [sp, #8]
  4020b8:	2b00      	cmp	r3, #0
  4020ba:	d088      	beq.n	401fce <_vfiprintf_r+0x756>
  4020bc:	9801      	ldr	r0, [sp, #4]
  4020be:	9900      	ldr	r1, [sp, #0]
  4020c0:	aa0d      	add	r2, sp, #52	; 0x34
  4020c2:	f7ff fb9d 	bl	401800 <__sprint_r.part.0>
  4020c6:	2800      	cmp	r0, #0
  4020c8:	d081      	beq.n	401fce <_vfiprintf_r+0x756>
  4020ca:	e799      	b.n	402000 <_vfiprintf_r+0x788>
  4020cc:	4640      	mov	r0, r8
  4020ce:	4649      	mov	r1, r9
  4020d0:	aa0d      	add	r2, sp, #52	; 0x34
  4020d2:	f7ff fb95 	bl	401800 <__sprint_r.part.0>
  4020d6:	2800      	cmp	r0, #0
  4020d8:	d192      	bne.n	402000 <_vfiprintf_r+0x788>
  4020da:	980e      	ldr	r0, [sp, #56]	; 0x38
  4020dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4020de:	f100 0e01 	add.w	lr, r0, #1
  4020e2:	4652      	mov	r2, sl
  4020e4:	e7ba      	b.n	40205c <_vfiprintf_r+0x7e4>
  4020e6:	9b03      	ldr	r3, [sp, #12]
  4020e8:	1b9f      	subs	r7, r3, r6
  4020ea:	2f00      	cmp	r7, #0
  4020ec:	f77f af27 	ble.w	401f3e <_vfiprintf_r+0x6c6>
  4020f0:	2f10      	cmp	r7, #16
  4020f2:	4d40      	ldr	r5, [pc, #256]	; (4021f4 <_vfiprintf_r+0x97c>)
  4020f4:	f340 81b4 	ble.w	402460 <_vfiprintf_r+0xbe8>
  4020f8:	4620      	mov	r0, r4
  4020fa:	2310      	movs	r3, #16
  4020fc:	4664      	mov	r4, ip
  4020fe:	4684      	mov	ip, r0
  402100:	e007      	b.n	402112 <_vfiprintf_r+0x89a>
  402102:	f101 0e02 	add.w	lr, r1, #2
  402106:	f10c 0c08 	add.w	ip, ip, #8
  40210a:	4601      	mov	r1, r0
  40210c:	3f10      	subs	r7, #16
  40210e:	2f10      	cmp	r7, #16
  402110:	dd11      	ble.n	402136 <_vfiprintf_r+0x8be>
  402112:	1c48      	adds	r0, r1, #1
  402114:	3210      	adds	r2, #16
  402116:	2807      	cmp	r0, #7
  402118:	920f      	str	r2, [sp, #60]	; 0x3c
  40211a:	f8cc 5000 	str.w	r5, [ip]
  40211e:	f8cc 3004 	str.w	r3, [ip, #4]
  402122:	900e      	str	r0, [sp, #56]	; 0x38
  402124:	dded      	ble.n	402102 <_vfiprintf_r+0x88a>
  402126:	b9c2      	cbnz	r2, 40215a <_vfiprintf_r+0x8e2>
  402128:	3f10      	subs	r7, #16
  40212a:	2f10      	cmp	r7, #16
  40212c:	f04f 0e01 	mov.w	lr, #1
  402130:	4611      	mov	r1, r2
  402132:	46d4      	mov	ip, sl
  402134:	dced      	bgt.n	402112 <_vfiprintf_r+0x89a>
  402136:	4663      	mov	r3, ip
  402138:	46a4      	mov	ip, r4
  40213a:	461c      	mov	r4, r3
  40213c:	443a      	add	r2, r7
  40213e:	f1be 0f07 	cmp.w	lr, #7
  402142:	920f      	str	r2, [sp, #60]	; 0x3c
  402144:	e884 00a0 	stmia.w	r4, {r5, r7}
  402148:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40214c:	f300 80ef 	bgt.w	40232e <_vfiprintf_r+0xab6>
  402150:	3408      	adds	r4, #8
  402152:	f10e 0001 	add.w	r0, lr, #1
  402156:	4671      	mov	r1, lr
  402158:	e6f1      	b.n	401f3e <_vfiprintf_r+0x6c6>
  40215a:	9801      	ldr	r0, [sp, #4]
  40215c:	9900      	ldr	r1, [sp, #0]
  40215e:	9305      	str	r3, [sp, #20]
  402160:	aa0d      	add	r2, sp, #52	; 0x34
  402162:	f7ff fb4d 	bl	401800 <__sprint_r.part.0>
  402166:	2800      	cmp	r0, #0
  402168:	f47f af4a 	bne.w	402000 <_vfiprintf_r+0x788>
  40216c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40216e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402170:	9b05      	ldr	r3, [sp, #20]
  402172:	f101 0e01 	add.w	lr, r1, #1
  402176:	46d4      	mov	ip, sl
  402178:	e7c8      	b.n	40210c <_vfiprintf_r+0x894>
  40217a:	2a00      	cmp	r2, #0
  40217c:	f040 80c6 	bne.w	40230c <_vfiprintf_r+0xa94>
  402180:	9b05      	ldr	r3, [sp, #20]
  402182:	2b00      	cmp	r3, #0
  402184:	f000 8086 	beq.w	402294 <_vfiprintf_r+0xa1c>
  402188:	aa0c      	add	r2, sp, #48	; 0x30
  40218a:	2302      	movs	r3, #2
  40218c:	921a      	str	r2, [sp, #104]	; 0x68
  40218e:	4608      	mov	r0, r1
  402190:	931b      	str	r3, [sp, #108]	; 0x6c
  402192:	461a      	mov	r2, r3
  402194:	4654      	mov	r4, sl
  402196:	e6cb      	b.n	401f30 <_vfiprintf_r+0x6b8>
  402198:	2a00      	cmp	r2, #0
  40219a:	f040 80a6 	bne.w	4022ea <_vfiprintf_r+0xa72>
  40219e:	2001      	movs	r0, #1
  4021a0:	4611      	mov	r1, r2
  4021a2:	4654      	mov	r4, sl
  4021a4:	e6c7      	b.n	401f36 <_vfiprintf_r+0x6be>
  4021a6:	bb03      	cbnz	r3, 4021ea <_vfiprintf_r+0x972>
  4021a8:	f018 0f01 	tst.w	r8, #1
  4021ac:	d01d      	beq.n	4021ea <_vfiprintf_r+0x972>
  4021ae:	ab2a      	add	r3, sp, #168	; 0xa8
  4021b0:	2230      	movs	r2, #48	; 0x30
  4021b2:	f803 2d41 	strb.w	r2, [r3, #-65]!
  4021b6:	ebc3 090a 	rsb	r9, r3, sl
  4021ba:	9307      	str	r3, [sp, #28]
  4021bc:	e48e      	b.n	401adc <_vfiprintf_r+0x264>
  4021be:	9809      	ldr	r0, [sp, #36]	; 0x24
  4021c0:	46d1      	mov	r9, sl
  4021c2:	0933      	lsrs	r3, r6, #4
  4021c4:	f006 010f 	and.w	r1, r6, #15
  4021c8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4021cc:	093a      	lsrs	r2, r7, #4
  4021ce:	461e      	mov	r6, r3
  4021d0:	4617      	mov	r7, r2
  4021d2:	5c43      	ldrb	r3, [r0, r1]
  4021d4:	f809 3d01 	strb.w	r3, [r9, #-1]!
  4021d8:	ea56 0307 	orrs.w	r3, r6, r7
  4021dc:	d1f1      	bne.n	4021c2 <_vfiprintf_r+0x94a>
  4021de:	464b      	mov	r3, r9
  4021e0:	f8cd 901c 	str.w	r9, [sp, #28]
  4021e4:	ebc3 090a 	rsb	r9, r3, sl
  4021e8:	e478      	b.n	401adc <_vfiprintf_r+0x264>
  4021ea:	f8cd a01c 	str.w	sl, [sp, #28]
  4021ee:	e475      	b.n	401adc <_vfiprintf_r+0x264>
  4021f0:	2302      	movs	r3, #2
  4021f2:	e444      	b.n	401a7e <_vfiprintf_r+0x206>
  4021f4:	00405e44 	.word	0x00405e44
  4021f8:	00405e84 	.word	0x00405e84
  4021fc:	2a00      	cmp	r2, #0
  4021fe:	f040 80d7 	bne.w	4023b0 <_vfiprintf_r+0xb38>
  402202:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402206:	2b00      	cmp	r3, #0
  402208:	f000 80ae 	beq.w	402368 <_vfiprintf_r+0xaf0>
  40220c:	2301      	movs	r3, #1
  40220e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  402212:	4618      	mov	r0, r3
  402214:	931b      	str	r3, [sp, #108]	; 0x6c
  402216:	461a      	mov	r2, r3
  402218:	911a      	str	r1, [sp, #104]	; 0x68
  40221a:	4654      	mov	r4, sl
  40221c:	e679      	b.n	401f12 <_vfiprintf_r+0x69a>
  40221e:	9a03      	ldr	r2, [sp, #12]
  402220:	1b95      	subs	r5, r2, r6
  402222:	2d00      	cmp	r5, #0
  402224:	4652      	mov	r2, sl
  402226:	f73f af0a 	bgt.w	40203e <_vfiprintf_r+0x7c6>
  40222a:	e6c9      	b.n	401fc0 <_vfiprintf_r+0x748>
  40222c:	465d      	mov	r5, fp
  40222e:	f7ff bb7c 	b.w	40192a <_vfiprintf_r+0xb2>
  402232:	9801      	ldr	r0, [sp, #4]
  402234:	9900      	ldr	r1, [sp, #0]
  402236:	aa0d      	add	r2, sp, #52	; 0x34
  402238:	f7ff fae2 	bl	401800 <__sprint_r.part.0>
  40223c:	2800      	cmp	r0, #0
  40223e:	f47f aedf 	bne.w	402000 <_vfiprintf_r+0x788>
  402242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402244:	4652      	mov	r2, sl
  402246:	e6f3      	b.n	402030 <_vfiprintf_r+0x7b8>
  402248:	9904      	ldr	r1, [sp, #16]
  40224a:	460a      	mov	r2, r1
  40224c:	3204      	adds	r2, #4
  40224e:	680e      	ldr	r6, [r1, #0]
  402250:	9204      	str	r2, [sp, #16]
  402252:	2700      	movs	r7, #0
  402254:	e413      	b.n	401a7e <_vfiprintf_r+0x206>
  402256:	3204      	adds	r2, #4
  402258:	681e      	ldr	r6, [r3, #0]
  40225a:	9204      	str	r2, [sp, #16]
  40225c:	2301      	movs	r3, #1
  40225e:	2700      	movs	r7, #0
  402260:	e40d      	b.n	401a7e <_vfiprintf_r+0x206>
  402262:	6816      	ldr	r6, [r2, #0]
  402264:	3204      	adds	r2, #4
  402266:	9204      	str	r2, [sp, #16]
  402268:	2700      	movs	r7, #0
  40226a:	e52d      	b.n	401cc8 <_vfiprintf_r+0x450>
  40226c:	9a04      	ldr	r2, [sp, #16]
  40226e:	6816      	ldr	r6, [r2, #0]
  402270:	4613      	mov	r3, r2
  402272:	3304      	adds	r3, #4
  402274:	17f7      	asrs	r7, r6, #31
  402276:	9304      	str	r3, [sp, #16]
  402278:	4632      	mov	r2, r6
  40227a:	463b      	mov	r3, r7
  40227c:	e4bf      	b.n	401bfe <_vfiprintf_r+0x386>
  40227e:	9801      	ldr	r0, [sp, #4]
  402280:	9900      	ldr	r1, [sp, #0]
  402282:	aa0d      	add	r2, sp, #52	; 0x34
  402284:	f7ff fabc 	bl	401800 <__sprint_r.part.0>
  402288:	2800      	cmp	r0, #0
  40228a:	f47f aeb9 	bne.w	402000 <_vfiprintf_r+0x788>
  40228e:	4654      	mov	r4, sl
  402290:	f7ff bbbe 	b.w	401a10 <_vfiprintf_r+0x198>
  402294:	4608      	mov	r0, r1
  402296:	4654      	mov	r4, sl
  402298:	4611      	mov	r1, r2
  40229a:	e64c      	b.n	401f36 <_vfiprintf_r+0x6be>
  40229c:	46d1      	mov	r9, sl
  40229e:	f8cd c014 	str.w	ip, [sp, #20]
  4022a2:	4630      	mov	r0, r6
  4022a4:	4639      	mov	r1, r7
  4022a6:	220a      	movs	r2, #10
  4022a8:	2300      	movs	r3, #0
  4022aa:	f003 f915 	bl	4054d8 <__aeabi_uldivmod>
  4022ae:	3230      	adds	r2, #48	; 0x30
  4022b0:	4630      	mov	r0, r6
  4022b2:	4639      	mov	r1, r7
  4022b4:	f809 2d01 	strb.w	r2, [r9, #-1]!
  4022b8:	2300      	movs	r3, #0
  4022ba:	220a      	movs	r2, #10
  4022bc:	f003 f90c 	bl	4054d8 <__aeabi_uldivmod>
  4022c0:	4606      	mov	r6, r0
  4022c2:	460f      	mov	r7, r1
  4022c4:	ea56 0307 	orrs.w	r3, r6, r7
  4022c8:	d1eb      	bne.n	4022a2 <_vfiprintf_r+0xa2a>
  4022ca:	f8dd c014 	ldr.w	ip, [sp, #20]
  4022ce:	e786      	b.n	4021de <_vfiprintf_r+0x966>
  4022d0:	2b30      	cmp	r3, #48	; 0x30
  4022d2:	9b07      	ldr	r3, [sp, #28]
  4022d4:	d086      	beq.n	4021e4 <_vfiprintf_r+0x96c>
  4022d6:	3b01      	subs	r3, #1
  4022d8:	461a      	mov	r2, r3
  4022da:	9307      	str	r3, [sp, #28]
  4022dc:	2330      	movs	r3, #48	; 0x30
  4022de:	ebc2 090a 	rsb	r9, r2, sl
  4022e2:	f801 3c01 	strb.w	r3, [r1, #-1]
  4022e6:	f7ff bbf9 	b.w	401adc <_vfiprintf_r+0x264>
  4022ea:	9801      	ldr	r0, [sp, #4]
  4022ec:	9900      	ldr	r1, [sp, #0]
  4022ee:	f8cd c014 	str.w	ip, [sp, #20]
  4022f2:	aa0d      	add	r2, sp, #52	; 0x34
  4022f4:	f7ff fa84 	bl	401800 <__sprint_r.part.0>
  4022f8:	2800      	cmp	r0, #0
  4022fa:	f47f ae81 	bne.w	402000 <_vfiprintf_r+0x788>
  4022fe:	990e      	ldr	r1, [sp, #56]	; 0x38
  402300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402302:	f8dd c014 	ldr.w	ip, [sp, #20]
  402306:	1c48      	adds	r0, r1, #1
  402308:	4654      	mov	r4, sl
  40230a:	e614      	b.n	401f36 <_vfiprintf_r+0x6be>
  40230c:	9801      	ldr	r0, [sp, #4]
  40230e:	9900      	ldr	r1, [sp, #0]
  402310:	f8cd c020 	str.w	ip, [sp, #32]
  402314:	aa0d      	add	r2, sp, #52	; 0x34
  402316:	f7ff fa73 	bl	401800 <__sprint_r.part.0>
  40231a:	2800      	cmp	r0, #0
  40231c:	f47f ae70 	bne.w	402000 <_vfiprintf_r+0x788>
  402320:	990e      	ldr	r1, [sp, #56]	; 0x38
  402322:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402324:	f8dd c020 	ldr.w	ip, [sp, #32]
  402328:	1c48      	adds	r0, r1, #1
  40232a:	4654      	mov	r4, sl
  40232c:	e5f4      	b.n	401f18 <_vfiprintf_r+0x6a0>
  40232e:	2a00      	cmp	r2, #0
  402330:	d167      	bne.n	402402 <_vfiprintf_r+0xb8a>
  402332:	2001      	movs	r0, #1
  402334:	4611      	mov	r1, r2
  402336:	4654      	mov	r4, sl
  402338:	e601      	b.n	401f3e <_vfiprintf_r+0x6c6>
  40233a:	9801      	ldr	r0, [sp, #4]
  40233c:	9900      	ldr	r1, [sp, #0]
  40233e:	aa0d      	add	r2, sp, #52	; 0x34
  402340:	f7ff fa5e 	bl	401800 <__sprint_r.part.0>
  402344:	2800      	cmp	r0, #0
  402346:	f47f ae5b 	bne.w	402000 <_vfiprintf_r+0x788>
  40234a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40234c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40234e:	3001      	adds	r0, #1
  402350:	4654      	mov	r4, sl
  402352:	e624      	b.n	401f9e <_vfiprintf_r+0x726>
  402354:	252d      	movs	r5, #45	; 0x2d
  402356:	4276      	negs	r6, r6
  402358:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40235c:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  402360:	46e1      	mov	r9, ip
  402362:	2301      	movs	r3, #1
  402364:	f7ff bb91 	b.w	401a8a <_vfiprintf_r+0x212>
  402368:	9b05      	ldr	r3, [sp, #20]
  40236a:	4611      	mov	r1, r2
  40236c:	2001      	movs	r0, #1
  40236e:	4654      	mov	r4, sl
  402370:	2b00      	cmp	r3, #0
  402372:	f43f ade4 	beq.w	401f3e <_vfiprintf_r+0x6c6>
  402376:	aa0c      	add	r2, sp, #48	; 0x30
  402378:	2302      	movs	r3, #2
  40237a:	e88a 000c 	stmia.w	sl, {r2, r3}
  40237e:	461a      	mov	r2, r3
  402380:	e5d6      	b.n	401f30 <_vfiprintf_r+0x6b8>
  402382:	f018 0f10 	tst.w	r8, #16
  402386:	d10b      	bne.n	4023a0 <_vfiprintf_r+0xb28>
  402388:	f018 0f40 	tst.w	r8, #64	; 0x40
  40238c:	d008      	beq.n	4023a0 <_vfiprintf_r+0xb28>
  40238e:	9a04      	ldr	r2, [sp, #16]
  402390:	6813      	ldr	r3, [r2, #0]
  402392:	3204      	adds	r2, #4
  402394:	9204      	str	r2, [sp, #16]
  402396:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40239a:	801a      	strh	r2, [r3, #0]
  40239c:	f7ff ba9e 	b.w	4018dc <_vfiprintf_r+0x64>
  4023a0:	9a04      	ldr	r2, [sp, #16]
  4023a2:	6813      	ldr	r3, [r2, #0]
  4023a4:	3204      	adds	r2, #4
  4023a6:	9204      	str	r2, [sp, #16]
  4023a8:	9a02      	ldr	r2, [sp, #8]
  4023aa:	601a      	str	r2, [r3, #0]
  4023ac:	f7ff ba96 	b.w	4018dc <_vfiprintf_r+0x64>
  4023b0:	9801      	ldr	r0, [sp, #4]
  4023b2:	9900      	ldr	r1, [sp, #0]
  4023b4:	f8cd c020 	str.w	ip, [sp, #32]
  4023b8:	aa0d      	add	r2, sp, #52	; 0x34
  4023ba:	f7ff fa21 	bl	401800 <__sprint_r.part.0>
  4023be:	2800      	cmp	r0, #0
  4023c0:	f47f ae1e 	bne.w	402000 <_vfiprintf_r+0x788>
  4023c4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4023c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4023c8:	f8dd c020 	ldr.w	ip, [sp, #32]
  4023cc:	1c48      	adds	r0, r1, #1
  4023ce:	4654      	mov	r4, sl
  4023d0:	e591      	b.n	401ef6 <_vfiprintf_r+0x67e>
  4023d2:	f048 0820 	orr.w	r8, r8, #32
  4023d6:	f10b 0001 	add.w	r0, fp, #1
  4023da:	f89b 3001 	ldrb.w	r3, [fp, #1]
  4023de:	f7ff bab4 	b.w	40194a <_vfiprintf_r+0xd2>
  4023e2:	426d      	negs	r5, r5
  4023e4:	9304      	str	r3, [sp, #16]
  4023e6:	4658      	mov	r0, fp
  4023e8:	f7ff bbc6 	b.w	401b78 <_vfiprintf_r+0x300>
  4023ec:	9807      	ldr	r0, [sp, #28]
  4023ee:	9604      	str	r6, [sp, #16]
  4023f0:	f7ff f9d8 	bl	4017a4 <strlen>
  4023f4:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  4023f8:	4681      	mov	r9, r0
  4023fa:	f04f 0c00 	mov.w	ip, #0
  4023fe:	f7ff bb6d 	b.w	401adc <_vfiprintf_r+0x264>
  402402:	9801      	ldr	r0, [sp, #4]
  402404:	9900      	ldr	r1, [sp, #0]
  402406:	f8cd c014 	str.w	ip, [sp, #20]
  40240a:	aa0d      	add	r2, sp, #52	; 0x34
  40240c:	f7ff f9f8 	bl	401800 <__sprint_r.part.0>
  402410:	2800      	cmp	r0, #0
  402412:	f47f adf5 	bne.w	402000 <_vfiprintf_r+0x788>
  402416:	990e      	ldr	r1, [sp, #56]	; 0x38
  402418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40241a:	f8dd c014 	ldr.w	ip, [sp, #20]
  40241e:	1c48      	adds	r0, r1, #1
  402420:	4654      	mov	r4, sl
  402422:	e58c      	b.n	401f3e <_vfiprintf_r+0x6c6>
  402424:	990e      	ldr	r1, [sp, #56]	; 0x38
  402426:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402428:	4f15      	ldr	r7, [pc, #84]	; (402480 <_vfiprintf_r+0xc08>)
  40242a:	3101      	adds	r1, #1
  40242c:	f7ff bb98 	b.w	401b60 <_vfiprintf_r+0x2e8>
  402430:	f1bc 0f06 	cmp.w	ip, #6
  402434:	bf28      	it	cs
  402436:	f04f 0c06 	movcs.w	ip, #6
  40243a:	4b12      	ldr	r3, [pc, #72]	; (402484 <_vfiprintf_r+0xc0c>)
  40243c:	9604      	str	r6, [sp, #16]
  40243e:	46e1      	mov	r9, ip
  402440:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  402444:	9307      	str	r3, [sp, #28]
  402446:	e460      	b.n	401d0a <_vfiprintf_r+0x492>
  402448:	990e      	ldr	r1, [sp, #56]	; 0x38
  40244a:	4f0d      	ldr	r7, [pc, #52]	; (402480 <_vfiprintf_r+0xc08>)
  40244c:	f101 0e01 	add.w	lr, r1, #1
  402450:	e618      	b.n	402084 <_vfiprintf_r+0x80c>
  402452:	46e1      	mov	r9, ip
  402454:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  402458:	9604      	str	r6, [sp, #16]
  40245a:	4684      	mov	ip, r0
  40245c:	f7ff bb3e 	b.w	401adc <_vfiprintf_r+0x264>
  402460:	4686      	mov	lr, r0
  402462:	e66b      	b.n	40213c <_vfiprintf_r+0x8c4>
  402464:	9a04      	ldr	r2, [sp, #16]
  402466:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40246a:	6816      	ldr	r6, [r2, #0]
  40246c:	3204      	adds	r2, #4
  40246e:	2e00      	cmp	r6, #0
  402470:	9204      	str	r2, [sp, #16]
  402472:	f6bf aa6a 	bge.w	40194a <_vfiprintf_r+0xd2>
  402476:	f04f 36ff 	mov.w	r6, #4294967295
  40247a:	f7ff ba66 	b.w	40194a <_vfiprintf_r+0xd2>
  40247e:	bf00      	nop
  402480:	00405e84 	.word	0x00405e84
  402484:	00405e7c 	.word	0x00405e7c

00402488 <__sbprintf>:
  402488:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  40248c:	460c      	mov	r4, r1
  40248e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402492:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  402496:	69e7      	ldr	r7, [r4, #28]
  402498:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40249a:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  40249e:	9119      	str	r1, [sp, #100]	; 0x64
  4024a0:	ad1a      	add	r5, sp, #104	; 0x68
  4024a2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4024a6:	f02e 0e02 	bic.w	lr, lr, #2
  4024aa:	f04f 0c00 	mov.w	ip, #0
  4024ae:	9707      	str	r7, [sp, #28]
  4024b0:	4669      	mov	r1, sp
  4024b2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4024b4:	9500      	str	r5, [sp, #0]
  4024b6:	9504      	str	r5, [sp, #16]
  4024b8:	9602      	str	r6, [sp, #8]
  4024ba:	9605      	str	r6, [sp, #20]
  4024bc:	f8ad e00c 	strh.w	lr, [sp, #12]
  4024c0:	f8ad 900e 	strh.w	r9, [sp, #14]
  4024c4:	9709      	str	r7, [sp, #36]	; 0x24
  4024c6:	f8cd c018 	str.w	ip, [sp, #24]
  4024ca:	4606      	mov	r6, r0
  4024cc:	f7ff f9d4 	bl	401878 <_vfiprintf_r>
  4024d0:	1e05      	subs	r5, r0, #0
  4024d2:	db07      	blt.n	4024e4 <__sbprintf+0x5c>
  4024d4:	4630      	mov	r0, r6
  4024d6:	4669      	mov	r1, sp
  4024d8:	f000 fe0a 	bl	4030f0 <_fflush_r>
  4024dc:	2800      	cmp	r0, #0
  4024de:	bf18      	it	ne
  4024e0:	f04f 35ff 	movne.w	r5, #4294967295
  4024e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4024e8:	065b      	lsls	r3, r3, #25
  4024ea:	d503      	bpl.n	4024f4 <__sbprintf+0x6c>
  4024ec:	89a3      	ldrh	r3, [r4, #12]
  4024ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024f2:	81a3      	strh	r3, [r4, #12]
  4024f4:	4628      	mov	r0, r5
  4024f6:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4024fa:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  4024fe:	bf00      	nop

00402500 <__svfiscanf_r>:
  402500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402504:	460c      	mov	r4, r1
  402506:	8989      	ldrh	r1, [r1, #12]
  402508:	b0db      	sub	sp, #364	; 0x16c
  40250a:	048d      	lsls	r5, r1, #18
  40250c:	9305      	str	r3, [sp, #20]
  40250e:	d406      	bmi.n	40251e <__svfiscanf_r+0x1e>
  402510:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402512:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  402516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40251a:	81a1      	strh	r1, [r4, #12]
  40251c:	6663      	str	r3, [r4, #100]	; 0x64
  40251e:	4617      	mov	r7, r2
  402520:	2300      	movs	r3, #0
  402522:	f817 1b01 	ldrb.w	r1, [r7], #1
  402526:	9306      	str	r3, [sp, #24]
  402528:	9304      	str	r3, [sp, #16]
  40252a:	461d      	mov	r5, r3
  40252c:	9308      	str	r3, [sp, #32]
  40252e:	f8df b3e8 	ldr.w	fp, [pc, #1000]	; 402918 <__svfiscanf_r+0x418>
  402532:	910d      	str	r1, [sp, #52]	; 0x34
  402534:	4680      	mov	r8, r0
  402536:	b339      	cbz	r1, 402588 <__svfiscanf_r+0x88>
  402538:	f8db 0000 	ldr.w	r0, [fp]
  40253c:	1843      	adds	r3, r0, r1
  40253e:	785b      	ldrb	r3, [r3, #1]
  402540:	f003 0308 	and.w	r3, r3, #8
  402544:	f003 09ff 	and.w	r9, r3, #255	; 0xff
  402548:	b313      	cbz	r3, 402590 <__svfiscanf_r+0x90>
  40254a:	6863      	ldr	r3, [r4, #4]
  40254c:	e00d      	b.n	40256a <__svfiscanf_r+0x6a>
  40254e:	6823      	ldr	r3, [r4, #0]
  402550:	f8db 1000 	ldr.w	r1, [fp]
  402554:	781a      	ldrb	r2, [r3, #0]
  402556:	440a      	add	r2, r1
  402558:	3301      	adds	r3, #1
  40255a:	7852      	ldrb	r2, [r2, #1]
  40255c:	0711      	lsls	r1, r2, #28
  40255e:	d50c      	bpl.n	40257a <__svfiscanf_r+0x7a>
  402560:	6862      	ldr	r2, [r4, #4]
  402562:	6023      	str	r3, [r4, #0]
  402564:	1e53      	subs	r3, r2, #1
  402566:	3501      	adds	r5, #1
  402568:	6063      	str	r3, [r4, #4]
  40256a:	2b00      	cmp	r3, #0
  40256c:	dcef      	bgt.n	40254e <__svfiscanf_r+0x4e>
  40256e:	4640      	mov	r0, r8
  402570:	4621      	mov	r1, r4
  402572:	f002 f96b 	bl	40484c <__srefill_r>
  402576:	2800      	cmp	r0, #0
  402578:	d0e9      	beq.n	40254e <__svfiscanf_r+0x4e>
  40257a:	463a      	mov	r2, r7
  40257c:	4617      	mov	r7, r2
  40257e:	f817 1b01 	ldrb.w	r1, [r7], #1
  402582:	910d      	str	r1, [sp, #52]	; 0x34
  402584:	2900      	cmp	r1, #0
  402586:	d1d7      	bne.n	402538 <__svfiscanf_r+0x38>
  402588:	9808      	ldr	r0, [sp, #32]
  40258a:	b05b      	add	sp, #364	; 0x16c
  40258c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402590:	2925      	cmp	r1, #37	; 0x25
  402592:	f040 8087 	bne.w	4026a4 <__svfiscanf_r+0x1a4>
  402596:	7853      	ldrb	r3, [r2, #1]
  402598:	46ca      	mov	sl, r9
  40259a:	1c79      	adds	r1, r7, #1
  40259c:	2b78      	cmp	r3, #120	; 0x78
  40259e:	f200 814a 	bhi.w	402836 <__svfiscanf_r+0x336>
  4025a2:	e8df f013 	tbh	[pc, r3, lsl #1]
  4025a6:	0079      	.short	0x0079
  4025a8:	01480148 	.word	0x01480148
  4025ac:	01480148 	.word	0x01480148
  4025b0:	01480148 	.word	0x01480148
  4025b4:	01480148 	.word	0x01480148
  4025b8:	01480148 	.word	0x01480148
  4025bc:	01480148 	.word	0x01480148
  4025c0:	01480148 	.word	0x01480148
  4025c4:	01480148 	.word	0x01480148
  4025c8:	01480148 	.word	0x01480148
  4025cc:	01480148 	.word	0x01480148
  4025d0:	01480148 	.word	0x01480148
  4025d4:	01480148 	.word	0x01480148
  4025d8:	01480148 	.word	0x01480148
  4025dc:	01480148 	.word	0x01480148
  4025e0:	01480148 	.word	0x01480148
  4025e4:	01480148 	.word	0x01480148
  4025e8:	01480148 	.word	0x01480148
  4025ec:	01480148 	.word	0x01480148
  4025f0:	0148007e 	.word	0x0148007e
  4025f4:	01480148 	.word	0x01480148
  4025f8:	01430148 	.word	0x01430148
  4025fc:	01480148 	.word	0x01480148
  402600:	01480148 	.word	0x01480148
  402604:	013a0148 	.word	0x013a0148
  402608:	013a013a 	.word	0x013a013a
  40260c:	013a013a 	.word	0x013a013a
  402610:	013a013a 	.word	0x013a013a
  402614:	013a013a 	.word	0x013a013a
  402618:	0148013a 	.word	0x0148013a
  40261c:	01480148 	.word	0x01480148
  402620:	01480148 	.word	0x01480148
  402624:	01480148 	.word	0x01480148
  402628:	01480148 	.word	0x01480148
  40262c:	01360148 	.word	0x01360148
  402630:	01480148 	.word	0x01480148
  402634:	01480148 	.word	0x01480148
  402638:	01480148 	.word	0x01480148
  40263c:	01310148 	.word	0x01310148
  402640:	01480148 	.word	0x01480148
  402644:	0148012d 	.word	0x0148012d
  402648:	01480148 	.word	0x01480148
  40264c:	01480148 	.word	0x01480148
  402650:	01480148 	.word	0x01480148
  402654:	01290148 	.word	0x01290148
  402658:	01480148 	.word	0x01480148
  40265c:	01480120 	.word	0x01480120
  402660:	01480148 	.word	0x01480148
  402664:	01480148 	.word	0x01480148
  402668:	01480148 	.word	0x01480148
  40266c:	0112011a 	.word	0x0112011a
  402670:	01480148 	.word	0x01480148
  402674:	010d0148 	.word	0x010d0148
  402678:	01480105 	.word	0x01480105
  40267c:	00fd0148 	.word	0x00fd0148
  402680:	00e30148 	.word	0x00e30148
  402684:	00f300db 	.word	0x00f300db
  402688:	01480148 	.word	0x01480148
  40268c:	014800be 	.word	0x014800be
  402690:	01480092 	.word	0x01480092
  402694:	01290148 	.word	0x01290148
  402698:	f04f 30ff 	mov.w	r0, #4294967295
  40269c:	b05b      	add	sp, #364	; 0x16c
  40269e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026a2:	460f      	mov	r7, r1
  4026a4:	6863      	ldr	r3, [r4, #4]
  4026a6:	2b00      	cmp	r3, #0
  4026a8:	f340 834f 	ble.w	402d4a <__svfiscanf_r+0x84a>
  4026ac:	6823      	ldr	r3, [r4, #0]
  4026ae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
  4026b2:	7819      	ldrb	r1, [r3, #0]
  4026b4:	4291      	cmp	r1, r2
  4026b6:	f47f af67 	bne.w	402588 <__svfiscanf_r+0x88>
  4026ba:	6862      	ldr	r2, [r4, #4]
  4026bc:	3301      	adds	r3, #1
  4026be:	3a01      	subs	r2, #1
  4026c0:	6062      	str	r2, [r4, #4]
  4026c2:	6023      	str	r3, [r4, #0]
  4026c4:	3501      	adds	r5, #1
  4026c6:	463a      	mov	r2, r7
  4026c8:	e758      	b.n	40257c <__svfiscanf_r+0x7c>
  4026ca:	4b91      	ldr	r3, [pc, #580]	; (402910 <__svfiscanf_r+0x410>)
  4026cc:	9306      	str	r3, [sp, #24]
  4026ce:	230a      	movs	r3, #10
  4026d0:	9304      	str	r3, [sp, #16]
  4026d2:	460f      	mov	r7, r1
  4026d4:	4656      	mov	r6, sl
  4026d6:	2303      	movs	r3, #3
  4026d8:	6862      	ldr	r2, [r4, #4]
  4026da:	2a00      	cmp	r2, #0
  4026dc:	dd28      	ble.n	402730 <__svfiscanf_r+0x230>
  4026de:	f019 0f40 	tst.w	r9, #64	; 0x40
  4026e2:	f040 80b6 	bne.w	402852 <__svfiscanf_r+0x352>
  4026e6:	f8db 0000 	ldr.w	r0, [fp]
  4026ea:	6821      	ldr	r1, [r4, #0]
  4026ec:	e000      	b.n	4026f0 <__svfiscanf_r+0x1f0>
  4026ee:	6021      	str	r1, [r4, #0]
  4026f0:	780a      	ldrb	r2, [r1, #0]
  4026f2:	4402      	add	r2, r0
  4026f4:	3101      	adds	r1, #1
  4026f6:	7852      	ldrb	r2, [r2, #1]
  4026f8:	0712      	lsls	r2, r2, #28
  4026fa:	f140 80aa 	bpl.w	402852 <__svfiscanf_r+0x352>
  4026fe:	6862      	ldr	r2, [r4, #4]
  402700:	3a01      	subs	r2, #1
  402702:	2a00      	cmp	r2, #0
  402704:	f105 0501 	add.w	r5, r5, #1
  402708:	6062      	str	r2, [r4, #4]
  40270a:	dcf0      	bgt.n	4026ee <__svfiscanf_r+0x1ee>
  40270c:	4640      	mov	r0, r8
  40270e:	4621      	mov	r1, r4
  402710:	9303      	str	r3, [sp, #12]
  402712:	f002 f89b 	bl	40484c <__srefill_r>
  402716:	b998      	cbnz	r0, 402740 <__svfiscanf_r+0x240>
  402718:	f8db 0000 	ldr.w	r0, [fp]
  40271c:	6821      	ldr	r1, [r4, #0]
  40271e:	9b03      	ldr	r3, [sp, #12]
  402720:	e7e6      	b.n	4026f0 <__svfiscanf_r+0x1f0>
  402722:	6862      	ldr	r2, [r4, #4]
  402724:	2a00      	cmp	r2, #0
  402726:	460f      	mov	r7, r1
  402728:	4656      	mov	r6, sl
  40272a:	f04f 0302 	mov.w	r3, #2
  40272e:	dcd6      	bgt.n	4026de <__svfiscanf_r+0x1de>
  402730:	4640      	mov	r0, r8
  402732:	4621      	mov	r1, r4
  402734:	9303      	str	r3, [sp, #12]
  402736:	f002 f889 	bl	40484c <__srefill_r>
  40273a:	9b03      	ldr	r3, [sp, #12]
  40273c:	2800      	cmp	r0, #0
  40273e:	d0ce      	beq.n	4026de <__svfiscanf_r+0x1de>
  402740:	9a08      	ldr	r2, [sp, #32]
  402742:	2a00      	cmp	r2, #0
  402744:	d0a8      	beq.n	402698 <__svfiscanf_r+0x198>
  402746:	89a3      	ldrh	r3, [r4, #12]
  402748:	f013 0f40 	tst.w	r3, #64	; 0x40
  40274c:	4613      	mov	r3, r2
  40274e:	bf18      	it	ne
  402750:	f04f 33ff 	movne.w	r3, #4294967295
  402754:	4618      	mov	r0, r3
  402756:	b05b      	add	sp, #364	; 0x16c
  402758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40275c:	460f      	mov	r7, r1
  40275e:	4b6c      	ldr	r3, [pc, #432]	; (402910 <__svfiscanf_r+0x410>)
  402760:	9306      	str	r3, [sp, #24]
  402762:	2308      	movs	r3, #8
  402764:	9304      	str	r3, [sp, #16]
  402766:	4656      	mov	r6, sl
  402768:	2303      	movs	r3, #3
  40276a:	e7b5      	b.n	4026d8 <__svfiscanf_r+0x1d8>
  40276c:	f019 0f10 	tst.w	r9, #16
  402770:	460f      	mov	r7, r1
  402772:	f47f af02 	bne.w	40257a <__svfiscanf_r+0x7a>
  402776:	f019 0f04 	tst.w	r9, #4
  40277a:	f000 8300 	beq.w	402d7e <__svfiscanf_r+0x87e>
  40277e:	9a05      	ldr	r2, [sp, #20]
  402780:	6813      	ldr	r3, [r2, #0]
  402782:	3204      	adds	r2, #4
  402784:	9205      	str	r2, [sp, #20]
  402786:	801d      	strh	r5, [r3, #0]
  402788:	463a      	mov	r2, r7
  40278a:	e6f7      	b.n	40257c <__svfiscanf_r+0x7c>
  40278c:	460f      	mov	r7, r1
  40278e:	f449 7908 	orr.w	r9, r9, #544	; 0x220
  402792:	4b5f      	ldr	r3, [pc, #380]	; (402910 <__svfiscanf_r+0x410>)
  402794:	9306      	str	r3, [sp, #24]
  402796:	2310      	movs	r3, #16
  402798:	9304      	str	r3, [sp, #16]
  40279a:	4656      	mov	r6, sl
  40279c:	2303      	movs	r3, #3
  40279e:	e79b      	b.n	4026d8 <__svfiscanf_r+0x1d8>
  4027a0:	787b      	ldrb	r3, [r7, #1]
  4027a2:	2b6c      	cmp	r3, #108	; 0x6c
  4027a4:	f000 82e6 	beq.w	402d74 <__svfiscanf_r+0x874>
  4027a8:	f049 0901 	orr.w	r9, r9, #1
  4027ac:	460f      	mov	r7, r1
  4027ae:	e6f4      	b.n	40259a <__svfiscanf_r+0x9a>
  4027b0:	4b58      	ldr	r3, [pc, #352]	; (402914 <__svfiscanf_r+0x414>)
  4027b2:	9306      	str	r3, [sp, #24]
  4027b4:	2300      	movs	r3, #0
  4027b6:	9304      	str	r3, [sp, #16]
  4027b8:	460f      	mov	r7, r1
  4027ba:	4656      	mov	r6, sl
  4027bc:	2303      	movs	r3, #3
  4027be:	e78b      	b.n	4026d8 <__svfiscanf_r+0x1d8>
  4027c0:	787b      	ldrb	r3, [r7, #1]
  4027c2:	f049 0904 	orr.w	r9, r9, #4
  4027c6:	460f      	mov	r7, r1
  4027c8:	e6e7      	b.n	40259a <__svfiscanf_r+0x9a>
  4027ca:	460f      	mov	r7, r1
  4027cc:	4b51      	ldr	r3, [pc, #324]	; (402914 <__svfiscanf_r+0x414>)
  4027ce:	9306      	str	r3, [sp, #24]
  4027d0:	230a      	movs	r3, #10
  4027d2:	9304      	str	r3, [sp, #16]
  4027d4:	4656      	mov	r6, sl
  4027d6:	2303      	movs	r3, #3
  4027d8:	e77e      	b.n	4026d8 <__svfiscanf_r+0x1d8>
  4027da:	460f      	mov	r7, r1
  4027dc:	f049 0940 	orr.w	r9, r9, #64	; 0x40
  4027e0:	4656      	mov	r6, sl
  4027e2:	2300      	movs	r3, #0
  4027e4:	e778      	b.n	4026d8 <__svfiscanf_r+0x1d8>
  4027e6:	a81a      	add	r0, sp, #104	; 0x68
  4027e8:	f002 f8ca 	bl	404980 <__sccl>
  4027ec:	f049 0940 	orr.w	r9, r9, #64	; 0x40
  4027f0:	4607      	mov	r7, r0
  4027f2:	4656      	mov	r6, sl
  4027f4:	2301      	movs	r3, #1
  4027f6:	e76f      	b.n	4026d8 <__svfiscanf_r+0x1d8>
  4027f8:	460f      	mov	r7, r1
  4027fa:	f449 7900 	orr.w	r9, r9, #512	; 0x200
  4027fe:	e7c8      	b.n	402792 <__svfiscanf_r+0x292>
  402800:	460f      	mov	r7, r1
  402802:	f049 0901 	orr.w	r9, r9, #1
  402806:	e7aa      	b.n	40275e <__svfiscanf_r+0x25e>
  402808:	787b      	ldrb	r3, [r7, #1]
  40280a:	f049 0902 	orr.w	r9, r9, #2
  40280e:	460f      	mov	r7, r1
  402810:	e6c3      	b.n	40259a <__svfiscanf_r+0x9a>
  402812:	460f      	mov	r7, r1
  402814:	f049 0901 	orr.w	r9, r9, #1
  402818:	e7d8      	b.n	4027cc <__svfiscanf_r+0x2cc>
  40281a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
  40281e:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
  402822:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
  402826:	787b      	ldrb	r3, [r7, #1]
  402828:	460f      	mov	r7, r1
  40282a:	e6b6      	b.n	40259a <__svfiscanf_r+0x9a>
  40282c:	787b      	ldrb	r3, [r7, #1]
  40282e:	f049 0910 	orr.w	r9, r9, #16
  402832:	460f      	mov	r7, r1
  402834:	e6b1      	b.n	40259a <__svfiscanf_r+0x9a>
  402836:	4403      	add	r3, r0
  402838:	460f      	mov	r7, r1
  40283a:	785b      	ldrb	r3, [r3, #1]
  40283c:	f003 0303 	and.w	r3, r3, #3
  402840:	2b01      	cmp	r3, #1
  402842:	d0e7      	beq.n	402814 <__svfiscanf_r+0x314>
  402844:	4b33      	ldr	r3, [pc, #204]	; (402914 <__svfiscanf_r+0x414>)
  402846:	9306      	str	r3, [sp, #24]
  402848:	230a      	movs	r3, #10
  40284a:	9304      	str	r3, [sp, #16]
  40284c:	4656      	mov	r6, sl
  40284e:	2303      	movs	r3, #3
  402850:	e742      	b.n	4026d8 <__svfiscanf_r+0x1d8>
  402852:	2b02      	cmp	r3, #2
  402854:	f000 8115 	beq.w	402a82 <__svfiscanf_r+0x582>
  402858:	2b03      	cmp	r3, #3
  40285a:	d05f      	beq.n	40291c <__svfiscanf_r+0x41c>
  40285c:	2b01      	cmp	r3, #1
  40285e:	d025      	beq.n	4028ac <__svfiscanf_r+0x3ac>
  402860:	f1ba 0f00 	cmp.w	sl, #0
  402864:	bf14      	ite	ne
  402866:	4656      	movne	r6, sl
  402868:	2601      	moveq	r6, #1
  40286a:	f019 0301 	ands.w	r3, r9, #1
  40286e:	f040 81d3 	bne.w	402c18 <__svfiscanf_r+0x718>
  402872:	f019 0f10 	tst.w	r9, #16
  402876:	f000 8252 	beq.w	402d1e <__svfiscanf_r+0x81e>
  40287a:	4699      	mov	r9, r3
  40287c:	e008      	b.n	402890 <__svfiscanf_r+0x390>
  40287e:	4413      	add	r3, r2
  402880:	6023      	str	r3, [r4, #0]
  402882:	4491      	add	r9, r2
  402884:	1ab6      	subs	r6, r6, r2
  402886:	f001 ffe1 	bl	40484c <__srefill_r>
  40288a:	2800      	cmp	r0, #0
  40288c:	f040 8241 	bne.w	402d12 <__svfiscanf_r+0x812>
  402890:	6862      	ldr	r2, [r4, #4]
  402892:	6823      	ldr	r3, [r4, #0]
  402894:	42b2      	cmp	r2, r6
  402896:	4640      	mov	r0, r8
  402898:	4621      	mov	r1, r4
  40289a:	dbf0      	blt.n	40287e <__svfiscanf_r+0x37e>
  40289c:	1b92      	subs	r2, r2, r6
  40289e:	4433      	add	r3, r6
  4028a0:	6062      	str	r2, [r4, #4]
  4028a2:	44b1      	add	r9, r6
  4028a4:	6023      	str	r3, [r4, #0]
  4028a6:	444d      	add	r5, r9
  4028a8:	463a      	mov	r2, r7
  4028aa:	e667      	b.n	40257c <__svfiscanf_r+0x7c>
  4028ac:	f1ba 0f00 	cmp.w	sl, #0
  4028b0:	bf14      	ite	ne
  4028b2:	4656      	movne	r6, sl
  4028b4:	f04f 36ff 	moveq.w	r6, #4294967295
  4028b8:	f019 0f10 	tst.w	r9, #16
  4028bc:	f000 810f 	beq.w	402ade <__svfiscanf_r+0x5de>
  4028c0:	aa1a      	add	r2, sp, #104	; 0x68
  4028c2:	6821      	ldr	r1, [r4, #0]
  4028c4:	f04f 0900 	mov.w	r9, #0
  4028c8:	4692      	mov	sl, r2
  4028ca:	780b      	ldrb	r3, [r1, #0]
  4028cc:	f81a 3003 	ldrb.w	r3, [sl, r3]
  4028d0:	3101      	adds	r1, #1
  4028d2:	b1b3      	cbz	r3, 402902 <__svfiscanf_r+0x402>
  4028d4:	6863      	ldr	r3, [r4, #4]
  4028d6:	6021      	str	r1, [r4, #0]
  4028d8:	f109 0901 	add.w	r9, r9, #1
  4028dc:	3b01      	subs	r3, #1
  4028de:	454e      	cmp	r6, r9
  4028e0:	6063      	str	r3, [r4, #4]
  4028e2:	d0e0      	beq.n	4028a6 <__svfiscanf_r+0x3a6>
  4028e4:	2b00      	cmp	r3, #0
  4028e6:	dcf0      	bgt.n	4028ca <__svfiscanf_r+0x3ca>
  4028e8:	4640      	mov	r0, r8
  4028ea:	4621      	mov	r1, r4
  4028ec:	f001 ffae 	bl	40484c <__srefill_r>
  4028f0:	2800      	cmp	r0, #0
  4028f2:	d1d8      	bne.n	4028a6 <__svfiscanf_r+0x3a6>
  4028f4:	6821      	ldr	r1, [r4, #0]
  4028f6:	780b      	ldrb	r3, [r1, #0]
  4028f8:	f81a 3003 	ldrb.w	r3, [sl, r3]
  4028fc:	3101      	adds	r1, #1
  4028fe:	2b00      	cmp	r3, #0
  402900:	d1e8      	bne.n	4028d4 <__svfiscanf_r+0x3d4>
  402902:	f1b9 0f00 	cmp.w	r9, #0
  402906:	f43f ae3f 	beq.w	402588 <__svfiscanf_r+0x88>
  40290a:	444d      	add	r5, r9
  40290c:	e7cc      	b.n	4028a8 <__svfiscanf_r+0x3a8>
  40290e:	bf00      	nop
  402910:	00404d65 	.word	0x00404d65
  402914:	00404a7d 	.word	0x00404a7d
  402918:	200004c4 	.word	0x200004c4
  40291c:	f10a 33ff 	add.w	r3, sl, #4294967295
  402920:	2b26      	cmp	r3, #38	; 0x26
  402922:	bf8c      	ite	hi
  402924:	f1aa 0327 	subhi.w	r3, sl, #39	; 0x27
  402928:	2300      	movls	r3, #0
  40292a:	f04f 0200 	mov.w	r2, #0
  40292e:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
  402932:	9307      	str	r3, [sp, #28]
  402934:	462b      	mov	r3, r5
  402936:	9d04      	ldr	r5, [sp, #16]
  402938:	9203      	str	r2, [sp, #12]
  40293a:	bf88      	it	hi
  40293c:	2627      	movhi	r6, #39	; 0x27
  40293e:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
  402942:	46e2      	mov	sl, ip
  402944:	463a      	mov	r2, r7
  402946:	6820      	ldr	r0, [r4, #0]
  402948:	f890 e000 	ldrb.w	lr, [r0]
  40294c:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
  402950:	294d      	cmp	r1, #77	; 0x4d
  402952:	d83f      	bhi.n	4029d4 <__svfiscanf_r+0x4d4>
  402954:	e8df f001 	tbb	[pc, r1]
  402958:	3e8f3e8f 	.word	0x3e8f3e8f
  40295c:	6060663e 	.word	0x6060663e
  402960:	60606060 	.word	0x60606060
  402964:	3e5a5a60 	.word	0x3e5a5a60
  402968:	3e3e3e3e 	.word	0x3e3e3e3e
  40296c:	55553e3e 	.word	0x55553e3e
  402970:	55555555 	.word	0x55555555
  402974:	3e3e3e3e 	.word	0x3e3e3e3e
  402978:	3e3e3e3e 	.word	0x3e3e3e3e
  40297c:	3e3e3e3e 	.word	0x3e3e3e3e
  402980:	3e3e3e3e 	.word	0x3e3e3e3e
  402984:	3e3e273e 	.word	0x3e3e273e
  402988:	3e3e3e3e 	.word	0x3e3e3e3e
  40298c:	55553e3e 	.word	0x55553e3e
  402990:	55555555 	.word	0x55555555
  402994:	3e3e3e3e 	.word	0x3e3e3e3e
  402998:	3e3e3e3e 	.word	0x3e3e3e3e
  40299c:	3e3e3e3e 	.word	0x3e3e3e3e
  4029a0:	3e3e3e3e 	.word	0x3e3e3e3e
  4029a4:	273e      	.short	0x273e
  4029a6:	f409 61c0 	and.w	r1, r9, #1536	; 0x600
  4029aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  4029ae:	d111      	bne.n	4029d4 <__svfiscanf_r+0x4d4>
  4029b0:	f429 7900 	bic.w	r9, r9, #512	; 0x200
  4029b4:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
  4029b8:	2510      	movs	r5, #16
  4029ba:	6861      	ldr	r1, [r4, #4]
  4029bc:	f88a e000 	strb.w	lr, [sl]
  4029c0:	3901      	subs	r1, #1
  4029c2:	2900      	cmp	r1, #0
  4029c4:	f10a 0a01 	add.w	sl, sl, #1
  4029c8:	6061      	str	r1, [r4, #4]
  4029ca:	dd45      	ble.n	402a58 <__svfiscanf_r+0x558>
  4029cc:	3001      	adds	r0, #1
  4029ce:	6020      	str	r0, [r4, #0]
  4029d0:	3e01      	subs	r6, #1
  4029d2:	d1b8      	bne.n	402946 <__svfiscanf_r+0x446>
  4029d4:	f419 7f80 	tst.w	r9, #256	; 0x100
  4029d8:	9504      	str	r5, [sp, #16]
  4029da:	4617      	mov	r7, r2
  4029dc:	461d      	mov	r5, r3
  4029de:	d005      	beq.n	4029ec <__svfiscanf_r+0x4ec>
  4029e0:	45e2      	cmp	sl, ip
  4029e2:	f200 81ba 	bhi.w	402d5a <__svfiscanf_r+0x85a>
  4029e6:	45e2      	cmp	sl, ip
  4029e8:	f43f adce 	beq.w	402588 <__svfiscanf_r+0x88>
  4029ec:	f019 0610 	ands.w	r6, r9, #16
  4029f0:	f000 80fa 	beq.w	402be8 <__svfiscanf_r+0x6e8>
  4029f4:	9b03      	ldr	r3, [sp, #12]
  4029f6:	ebcc 0c0a 	rsb	ip, ip, sl
  4029fa:	449c      	add	ip, r3
  4029fc:	4465      	add	r5, ip
  4029fe:	463a      	mov	r2, r7
  402a00:	e5bc      	b.n	40257c <__svfiscanf_r+0x7c>
  402a02:	2d0a      	cmp	r5, #10
  402a04:	dde6      	ble.n	4029d4 <__svfiscanf_r+0x4d4>
  402a06:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
  402a0a:	e7d6      	b.n	4029ba <__svfiscanf_r+0x4ba>
  402a0c:	49ad      	ldr	r1, [pc, #692]	; (402cc4 <__svfiscanf_r+0x7c4>)
  402a0e:	f931 5015 	ldrsh.w	r5, [r1, r5, lsl #1]
  402a12:	2d08      	cmp	r5, #8
  402a14:	dcf7      	bgt.n	402a06 <__svfiscanf_r+0x506>
  402a16:	e7dd      	b.n	4029d4 <__svfiscanf_r+0x4d4>
  402a18:	49aa      	ldr	r1, [pc, #680]	; (402cc4 <__svfiscanf_r+0x7c4>)
  402a1a:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
  402a1e:	f931 5015 	ldrsh.w	r5, [r1, r5, lsl #1]
  402a22:	e7ca      	b.n	4029ba <__svfiscanf_r+0x4ba>
  402a24:	f419 6f00 	tst.w	r9, #2048	; 0x800
  402a28:	d0c7      	beq.n	4029ba <__svfiscanf_r+0x4ba>
  402a2a:	b915      	cbnz	r5, 402a32 <__svfiscanf_r+0x532>
  402a2c:	f449 7900 	orr.w	r9, r9, #512	; 0x200
  402a30:	2508      	movs	r5, #8
  402a32:	f419 6f80 	tst.w	r9, #1024	; 0x400
  402a36:	f040 813b 	bne.w	402cb0 <__svfiscanf_r+0x7b0>
  402a3a:	9907      	ldr	r1, [sp, #28]
  402a3c:	f429 7960 	bic.w	r9, r9, #896	; 0x380
  402a40:	b111      	cbz	r1, 402a48 <__svfiscanf_r+0x548>
  402a42:	3901      	subs	r1, #1
  402a44:	9107      	str	r1, [sp, #28]
  402a46:	3601      	adds	r6, #1
  402a48:	9903      	ldr	r1, [sp, #12]
  402a4a:	3101      	adds	r1, #1
  402a4c:	9103      	str	r1, [sp, #12]
  402a4e:	6861      	ldr	r1, [r4, #4]
  402a50:	3901      	subs	r1, #1
  402a52:	2900      	cmp	r1, #0
  402a54:	6061      	str	r1, [r4, #4]
  402a56:	dcb9      	bgt.n	4029cc <__svfiscanf_r+0x4cc>
  402a58:	4640      	mov	r0, r8
  402a5a:	4621      	mov	r1, r4
  402a5c:	920a      	str	r2, [sp, #40]	; 0x28
  402a5e:	9309      	str	r3, [sp, #36]	; 0x24
  402a60:	f8cd c010 	str.w	ip, [sp, #16]
  402a64:	f001 fef2 	bl	40484c <__srefill_r>
  402a68:	f8dd c010 	ldr.w	ip, [sp, #16]
  402a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402a70:	2800      	cmp	r0, #0
  402a72:	d0ad      	beq.n	4029d0 <__svfiscanf_r+0x4d0>
  402a74:	e7ae      	b.n	4029d4 <__svfiscanf_r+0x4d4>
  402a76:	f019 0f80 	tst.w	r9, #128	; 0x80
  402a7a:	d0ab      	beq.n	4029d4 <__svfiscanf_r+0x4d4>
  402a7c:	f029 0980 	bic.w	r9, r9, #128	; 0x80
  402a80:	e79b      	b.n	4029ba <__svfiscanf_r+0x4ba>
  402a82:	f1ba 0f00 	cmp.w	sl, #0
  402a86:	bf14      	ite	ne
  402a88:	4656      	movne	r6, sl
  402a8a:	f04f 36ff 	moveq.w	r6, #4294967295
  402a8e:	f019 0301 	ands.w	r3, r9, #1
  402a92:	f040 8083 	bne.w	402b9c <__svfiscanf_r+0x69c>
  402a96:	f019 0f10 	tst.w	r9, #16
  402a9a:	d050      	beq.n	402b3e <__svfiscanf_r+0x63e>
  402a9c:	f8db 1000 	ldr.w	r1, [fp]
  402aa0:	6822      	ldr	r2, [r4, #0]
  402aa2:	4699      	mov	r9, r3
  402aa4:	7813      	ldrb	r3, [r2, #0]
  402aa6:	440b      	add	r3, r1
  402aa8:	3201      	adds	r2, #1
  402aaa:	785b      	ldrb	r3, [r3, #1]
  402aac:	0718      	lsls	r0, r3, #28
  402aae:	f53f aefa 	bmi.w	4028a6 <__svfiscanf_r+0x3a6>
  402ab2:	6863      	ldr	r3, [r4, #4]
  402ab4:	6022      	str	r2, [r4, #0]
  402ab6:	f109 0901 	add.w	r9, r9, #1
  402aba:	3b01      	subs	r3, #1
  402abc:	454e      	cmp	r6, r9
  402abe:	6063      	str	r3, [r4, #4]
  402ac0:	f43f aef1 	beq.w	4028a6 <__svfiscanf_r+0x3a6>
  402ac4:	2b00      	cmp	r3, #0
  402ac6:	dced      	bgt.n	402aa4 <__svfiscanf_r+0x5a4>
  402ac8:	4640      	mov	r0, r8
  402aca:	4621      	mov	r1, r4
  402acc:	f001 febe 	bl	40484c <__srefill_r>
  402ad0:	2800      	cmp	r0, #0
  402ad2:	f47f aee8 	bne.w	4028a6 <__svfiscanf_r+0x3a6>
  402ad6:	f8db 1000 	ldr.w	r1, [fp]
  402ada:	6822      	ldr	r2, [r4, #0]
  402adc:	e7e2      	b.n	402aa4 <__svfiscanf_r+0x5a4>
  402ade:	9a05      	ldr	r2, [sp, #20]
  402ae0:	4613      	mov	r3, r2
  402ae2:	f8d2 9000 	ldr.w	r9, [r2]
  402ae6:	3304      	adds	r3, #4
  402ae8:	9305      	str	r3, [sp, #20]
  402aea:	46ca      	mov	sl, r9
  402aec:	aa1a      	add	r2, sp, #104	; 0x68
  402aee:	6823      	ldr	r3, [r4, #0]
  402af0:	7819      	ldrb	r1, [r3, #0]
  402af2:	5c51      	ldrb	r1, [r2, r1]
  402af4:	1c58      	adds	r0, r3, #1
  402af6:	b1b1      	cbz	r1, 402b26 <__svfiscanf_r+0x626>
  402af8:	6861      	ldr	r1, [r4, #4]
  402afa:	6020      	str	r0, [r4, #0]
  402afc:	3901      	subs	r1, #1
  402afe:	6061      	str	r1, [r4, #4]
  402b00:	781b      	ldrb	r3, [r3, #0]
  402b02:	f80a 3b01 	strb.w	r3, [sl], #1
  402b06:	3e01      	subs	r6, #1
  402b08:	d00d      	beq.n	402b26 <__svfiscanf_r+0x626>
  402b0a:	6863      	ldr	r3, [r4, #4]
  402b0c:	2b00      	cmp	r3, #0
  402b0e:	dcee      	bgt.n	402aee <__svfiscanf_r+0x5ee>
  402b10:	4640      	mov	r0, r8
  402b12:	4621      	mov	r1, r4
  402b14:	9203      	str	r2, [sp, #12]
  402b16:	f001 fe99 	bl	40484c <__srefill_r>
  402b1a:	9a03      	ldr	r2, [sp, #12]
  402b1c:	2800      	cmp	r0, #0
  402b1e:	d0e6      	beq.n	402aee <__svfiscanf_r+0x5ee>
  402b20:	45ca      	cmp	sl, r9
  402b22:	f43f ae0d 	beq.w	402740 <__svfiscanf_r+0x240>
  402b26:	ebba 0909 	subs.w	r9, sl, r9
  402b2a:	f43f ad2d 	beq.w	402588 <__svfiscanf_r+0x88>
  402b2e:	9b08      	ldr	r3, [sp, #32]
  402b30:	2200      	movs	r2, #0
  402b32:	3301      	adds	r3, #1
  402b34:	9308      	str	r3, [sp, #32]
  402b36:	f88a 2000 	strb.w	r2, [sl]
  402b3a:	444d      	add	r5, r9
  402b3c:	e6b4      	b.n	4028a8 <__svfiscanf_r+0x3a8>
  402b3e:	9a05      	ldr	r2, [sp, #20]
  402b40:	4613      	mov	r3, r2
  402b42:	f8d2 9000 	ldr.w	r9, [r2]
  402b46:	3304      	adds	r3, #4
  402b48:	9303      	str	r3, [sp, #12]
  402b4a:	46ca      	mov	sl, r9
  402b4c:	6821      	ldr	r1, [r4, #0]
  402b4e:	f8db 2000 	ldr.w	r2, [fp]
  402b52:	780b      	ldrb	r3, [r1, #0]
  402b54:	4413      	add	r3, r2
  402b56:	1c4a      	adds	r2, r1, #1
  402b58:	785b      	ldrb	r3, [r3, #1]
  402b5a:	071b      	lsls	r3, r3, #28
  402b5c:	d411      	bmi.n	402b82 <__svfiscanf_r+0x682>
  402b5e:	6863      	ldr	r3, [r4, #4]
  402b60:	6022      	str	r2, [r4, #0]
  402b62:	3b01      	subs	r3, #1
  402b64:	6063      	str	r3, [r4, #4]
  402b66:	780b      	ldrb	r3, [r1, #0]
  402b68:	f80a 3b01 	strb.w	r3, [sl], #1
  402b6c:	3e01      	subs	r6, #1
  402b6e:	d008      	beq.n	402b82 <__svfiscanf_r+0x682>
  402b70:	6863      	ldr	r3, [r4, #4]
  402b72:	2b00      	cmp	r3, #0
  402b74:	dcea      	bgt.n	402b4c <__svfiscanf_r+0x64c>
  402b76:	4640      	mov	r0, r8
  402b78:	4621      	mov	r1, r4
  402b7a:	f001 fe67 	bl	40484c <__srefill_r>
  402b7e:	2800      	cmp	r0, #0
  402b80:	d0e4      	beq.n	402b4c <__svfiscanf_r+0x64c>
  402b82:	9a08      	ldr	r2, [sp, #32]
  402b84:	3201      	adds	r2, #1
  402b86:	ebc9 090a 	rsb	r9, r9, sl
  402b8a:	2300      	movs	r3, #0
  402b8c:	9208      	str	r2, [sp, #32]
  402b8e:	9a03      	ldr	r2, [sp, #12]
  402b90:	9205      	str	r2, [sp, #20]
  402b92:	444d      	add	r5, r9
  402b94:	f88a 3000 	strb.w	r3, [sl]
  402b98:	463a      	mov	r2, r7
  402b9a:	e4ef      	b.n	40257c <__svfiscanf_r+0x7c>
  402b9c:	ab0e      	add	r3, sp, #56	; 0x38
  402b9e:	4618      	mov	r0, r3
  402ba0:	2100      	movs	r1, #0
  402ba2:	2208      	movs	r2, #8
  402ba4:	9309      	str	r3, [sp, #36]	; 0x24
  402ba6:	f7fe fcf5 	bl	401594 <memset>
  402baa:	f019 0310 	ands.w	r3, r9, #16
  402bae:	9303      	str	r3, [sp, #12]
  402bb0:	f000 8081 	beq.w	402cb6 <__svfiscanf_r+0x7b6>
  402bb4:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
  402bb8:	2200      	movs	r2, #0
  402bba:	4691      	mov	r9, r2
  402bbc:	6823      	ldr	r3, [r4, #0]
  402bbe:	f8db 2000 	ldr.w	r2, [fp]
  402bc2:	781b      	ldrb	r3, [r3, #0]
  402bc4:	4413      	add	r3, r2
  402bc6:	785b      	ldrb	r3, [r3, #1]
  402bc8:	071b      	lsls	r3, r3, #28
  402bca:	d402      	bmi.n	402bd2 <__svfiscanf_r+0x6d2>
  402bcc:	2e00      	cmp	r6, #0
  402bce:	f040 810b 	bne.w	402de8 <__svfiscanf_r+0x8e8>
  402bd2:	9b03      	ldr	r3, [sp, #12]
  402bd4:	2b00      	cmp	r3, #0
  402bd6:	f47f acd0 	bne.w	40257a <__svfiscanf_r+0x7a>
  402bda:	f8ca 3000 	str.w	r3, [sl]
  402bde:	9b08      	ldr	r3, [sp, #32]
  402be0:	3301      	adds	r3, #1
  402be2:	9308      	str	r3, [sp, #32]
  402be4:	463a      	mov	r2, r7
  402be6:	e4c9      	b.n	40257c <__svfiscanf_r+0x7c>
  402be8:	4632      	mov	r2, r6
  402bea:	4661      	mov	r1, ip
  402bec:	f88a 6000 	strb.w	r6, [sl]
  402bf0:	4640      	mov	r0, r8
  402bf2:	9b04      	ldr	r3, [sp, #16]
  402bf4:	9e06      	ldr	r6, [sp, #24]
  402bf6:	f8cd c01c 	str.w	ip, [sp, #28]
  402bfa:	47b0      	blx	r6
  402bfc:	f019 0f20 	tst.w	r9, #32
  402c00:	f8dd c01c 	ldr.w	ip, [sp, #28]
  402c04:	d075      	beq.n	402cf2 <__svfiscanf_r+0x7f2>
  402c06:	9a05      	ldr	r2, [sp, #20]
  402c08:	6813      	ldr	r3, [r2, #0]
  402c0a:	3204      	adds	r2, #4
  402c0c:	9205      	str	r2, [sp, #20]
  402c0e:	6018      	str	r0, [r3, #0]
  402c10:	9b08      	ldr	r3, [sp, #32]
  402c12:	3301      	adds	r3, #1
  402c14:	9308      	str	r3, [sp, #32]
  402c16:	e6ed      	b.n	4029f4 <__svfiscanf_r+0x4f4>
  402c18:	ab0e      	add	r3, sp, #56	; 0x38
  402c1a:	4618      	mov	r0, r3
  402c1c:	2100      	movs	r1, #0
  402c1e:	2208      	movs	r2, #8
  402c20:	9309      	str	r3, [sp, #36]	; 0x24
  402c22:	f7fe fcb7 	bl	401594 <memset>
  402c26:	f019 0310 	ands.w	r3, r9, #16
  402c2a:	930a      	str	r3, [sp, #40]	; 0x28
  402c2c:	d05a      	beq.n	402ce4 <__svfiscanf_r+0x7e4>
  402c2e:	2300      	movs	r3, #0
  402c30:	4619      	mov	r1, r3
  402c32:	9503      	str	r5, [sp, #12]
  402c34:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402c36:	970b      	str	r7, [sp, #44]	; 0x2c
  402c38:	f04f 0a00 	mov.w	sl, #0
  402c3c:	f10d 0940 	add.w	r9, sp, #64	; 0x40
  402c40:	460f      	mov	r7, r1
  402c42:	f8cd 801c 	str.w	r8, [sp, #28]
  402c46:	f000 ff61 	bl	403b0c <__locale_mb_cur_max>
  402c4a:	4550      	cmp	r0, sl
  402c4c:	f43f ad78 	beq.w	402740 <__svfiscanf_r+0x240>
  402c50:	e894 000a 	ldmia.w	r4, {r1, r3}
  402c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402c56:	f811 eb01 	ldrb.w	lr, [r1], #1
  402c5a:	6021      	str	r1, [r4, #0]
  402c5c:	3b01      	subs	r3, #1
  402c5e:	f10a 0801 	add.w	r8, sl, #1
  402c62:	9200      	str	r2, [sp, #0]
  402c64:	4639      	mov	r1, r7
  402c66:	6063      	str	r3, [r4, #4]
  402c68:	9807      	ldr	r0, [sp, #28]
  402c6a:	f809 e00a 	strb.w	lr, [r9, sl]
  402c6e:	4643      	mov	r3, r8
  402c70:	464a      	mov	r2, r9
  402c72:	f001 fa5b 	bl	40412c <_mbrtowc_r>
  402c76:	1c41      	adds	r1, r0, #1
  402c78:	f43f ad62 	beq.w	402740 <__svfiscanf_r+0x240>
  402c7c:	2800      	cmp	r0, #0
  402c7e:	d141      	bne.n	402d04 <__svfiscanf_r+0x804>
  402c80:	b905      	cbnz	r5, 402c84 <__svfiscanf_r+0x784>
  402c82:	603d      	str	r5, [r7, #0]
  402c84:	9b03      	ldr	r3, [sp, #12]
  402c86:	4443      	add	r3, r8
  402c88:	9303      	str	r3, [sp, #12]
  402c8a:	3e01      	subs	r6, #1
  402c8c:	2d00      	cmp	r5, #0
  402c8e:	d13d      	bne.n	402d0c <__svfiscanf_r+0x80c>
  402c90:	3704      	adds	r7, #4
  402c92:	46aa      	mov	sl, r5
  402c94:	6863      	ldr	r3, [r4, #4]
  402c96:	2b00      	cmp	r3, #0
  402c98:	dd16      	ble.n	402cc8 <__svfiscanf_r+0x7c8>
  402c9a:	2e00      	cmp	r6, #0
  402c9c:	d1d3      	bne.n	402c46 <__svfiscanf_r+0x746>
  402c9e:	9d03      	ldr	r5, [sp, #12]
  402ca0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  402ca2:	f8dd 801c 	ldr.w	r8, [sp, #28]
  402ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402ca8:	2b00      	cmp	r3, #0
  402caa:	d098      	beq.n	402bde <__svfiscanf_r+0x6de>
  402cac:	463a      	mov	r2, r7
  402cae:	e465      	b.n	40257c <__svfiscanf_r+0x7c>
  402cb0:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
  402cb4:	e681      	b.n	4029ba <__svfiscanf_r+0x4ba>
  402cb6:	9a05      	ldr	r2, [sp, #20]
  402cb8:	4613      	mov	r3, r2
  402cba:	3304      	adds	r3, #4
  402cbc:	f8d2 a000 	ldr.w	sl, [r2]
  402cc0:	9305      	str	r3, [sp, #20]
  402cc2:	e779      	b.n	402bb8 <__svfiscanf_r+0x6b8>
  402cc4:	00405e94 	.word	0x00405e94
  402cc8:	9807      	ldr	r0, [sp, #28]
  402cca:	4621      	mov	r1, r4
  402ccc:	f001 fdbe 	bl	40484c <__srefill_r>
  402cd0:	2800      	cmp	r0, #0
  402cd2:	d0e2      	beq.n	402c9a <__svfiscanf_r+0x79a>
  402cd4:	9d03      	ldr	r5, [sp, #12]
  402cd6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  402cd8:	f8dd 801c 	ldr.w	r8, [sp, #28]
  402cdc:	f1ba 0f00 	cmp.w	sl, #0
  402ce0:	d0e1      	beq.n	402ca6 <__svfiscanf_r+0x7a6>
  402ce2:	e52d      	b.n	402740 <__svfiscanf_r+0x240>
  402ce4:	9a05      	ldr	r2, [sp, #20]
  402ce6:	6813      	ldr	r3, [r2, #0]
  402ce8:	4619      	mov	r1, r3
  402cea:	4613      	mov	r3, r2
  402cec:	3304      	adds	r3, #4
  402cee:	9305      	str	r3, [sp, #20]
  402cf0:	e79f      	b.n	402c32 <__svfiscanf_r+0x732>
  402cf2:	f019 0f04 	tst.w	r9, #4
  402cf6:	d05b      	beq.n	402db0 <__svfiscanf_r+0x8b0>
  402cf8:	9a05      	ldr	r2, [sp, #20]
  402cfa:	6813      	ldr	r3, [r2, #0]
  402cfc:	3204      	adds	r2, #4
  402cfe:	9205      	str	r2, [sp, #20]
  402d00:	8018      	strh	r0, [r3, #0]
  402d02:	e785      	b.n	402c10 <__svfiscanf_r+0x710>
  402d04:	3002      	adds	r0, #2
  402d06:	d1bd      	bne.n	402c84 <__svfiscanf_r+0x784>
  402d08:	46c2      	mov	sl, r8
  402d0a:	e7c3      	b.n	402c94 <__svfiscanf_r+0x794>
  402d0c:	f04f 0a00 	mov.w	sl, #0
  402d10:	e7c0      	b.n	402c94 <__svfiscanf_r+0x794>
  402d12:	f1b9 0f00 	cmp.w	r9, #0
  402d16:	f43f ad13 	beq.w	402740 <__svfiscanf_r+0x240>
  402d1a:	444d      	add	r5, r9
  402d1c:	e5c4      	b.n	4028a8 <__svfiscanf_r+0x3a8>
  402d1e:	9b05      	ldr	r3, [sp, #20]
  402d20:	4640      	mov	r0, r8
  402d22:	6819      	ldr	r1, [r3, #0]
  402d24:	9400      	str	r4, [sp, #0]
  402d26:	4633      	mov	r3, r6
  402d28:	2201      	movs	r2, #1
  402d2a:	f000 fb11 	bl	403350 <_fread_r>
  402d2e:	9b05      	ldr	r3, [sp, #20]
  402d30:	f103 0a04 	add.w	sl, r3, #4
  402d34:	2800      	cmp	r0, #0
  402d36:	f43f ad03 	beq.w	402740 <__svfiscanf_r+0x240>
  402d3a:	9b08      	ldr	r3, [sp, #32]
  402d3c:	f8cd a014 	str.w	sl, [sp, #20]
  402d40:	3301      	adds	r3, #1
  402d42:	4405      	add	r5, r0
  402d44:	9308      	str	r3, [sp, #32]
  402d46:	463a      	mov	r2, r7
  402d48:	e418      	b.n	40257c <__svfiscanf_r+0x7c>
  402d4a:	4640      	mov	r0, r8
  402d4c:	4621      	mov	r1, r4
  402d4e:	f001 fd7d 	bl	40484c <__srefill_r>
  402d52:	2800      	cmp	r0, #0
  402d54:	f43f acaa 	beq.w	4026ac <__svfiscanf_r+0x1ac>
  402d58:	e4f2      	b.n	402740 <__svfiscanf_r+0x240>
  402d5a:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
  402d5e:	f8cd c01c 	str.w	ip, [sp, #28]
  402d62:	4640      	mov	r0, r8
  402d64:	4622      	mov	r2, r4
  402d66:	f002 f9b9 	bl	4050dc <_ungetc_r>
  402d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
  402d6e:	f8dd c01c 	ldr.w	ip, [sp, #28]
  402d72:	e638      	b.n	4029e6 <__svfiscanf_r+0x4e6>
  402d74:	78bb      	ldrb	r3, [r7, #2]
  402d76:	f049 0902 	orr.w	r9, r9, #2
  402d7a:	3702      	adds	r7, #2
  402d7c:	e40d      	b.n	40259a <__svfiscanf_r+0x9a>
  402d7e:	f019 0f01 	tst.w	r9, #1
  402d82:	d10d      	bne.n	402da0 <__svfiscanf_r+0x8a0>
  402d84:	f019 0f02 	tst.w	r9, #2
  402d88:	d00a      	beq.n	402da0 <__svfiscanf_r+0x8a0>
  402d8a:	9a05      	ldr	r2, [sp, #20]
  402d8c:	6813      	ldr	r3, [r2, #0]
  402d8e:	4628      	mov	r0, r5
  402d90:	3204      	adds	r2, #4
  402d92:	17e9      	asrs	r1, r5, #31
  402d94:	9205      	str	r2, [sp, #20]
  402d96:	e9c3 0100 	strd	r0, r1, [r3]
  402d9a:	463a      	mov	r2, r7
  402d9c:	f7ff bbee 	b.w	40257c <__svfiscanf_r+0x7c>
  402da0:	9a05      	ldr	r2, [sp, #20]
  402da2:	6813      	ldr	r3, [r2, #0]
  402da4:	3204      	adds	r2, #4
  402da6:	9205      	str	r2, [sp, #20]
  402da8:	601d      	str	r5, [r3, #0]
  402daa:	463a      	mov	r2, r7
  402dac:	f7ff bbe6 	b.w	40257c <__svfiscanf_r+0x7c>
  402db0:	f019 0201 	ands.w	r2, r9, #1
  402db4:	f47f af27 	bne.w	402c06 <__svfiscanf_r+0x706>
  402db8:	f019 0f02 	tst.w	r9, #2
  402dbc:	f43f af23 	beq.w	402c06 <__svfiscanf_r+0x706>
  402dc0:	4b3c      	ldr	r3, [pc, #240]	; (402eb4 <__svfiscanf_r+0x9b4>)
  402dc2:	9906      	ldr	r1, [sp, #24]
  402dc4:	f8cd c01c 	str.w	ip, [sp, #28]
  402dc8:	4299      	cmp	r1, r3
  402dca:	4640      	mov	r0, r8
  402dcc:	4661      	mov	r1, ip
  402dce:	9b04      	ldr	r3, [sp, #16]
  402dd0:	d067      	beq.n	402ea2 <__svfiscanf_r+0x9a2>
  402dd2:	f001 fee1 	bl	404b98 <_strtoll_r>
  402dd6:	f8dd c01c 	ldr.w	ip, [sp, #28]
  402dda:	9a05      	ldr	r2, [sp, #20]
  402ddc:	6813      	ldr	r3, [r2, #0]
  402dde:	3204      	adds	r2, #4
  402de0:	9205      	str	r2, [sp, #20]
  402de2:	e9c3 0100 	strd	r0, r1, [r3]
  402de6:	e713      	b.n	402c10 <__svfiscanf_r+0x710>
  402de8:	f000 fe90 	bl	403b0c <__locale_mb_cur_max>
  402dec:	4548      	cmp	r0, r9
  402dee:	f43f aca7 	beq.w	402740 <__svfiscanf_r+0x240>
  402df2:	e894 000a 	ldmia.w	r4, {r1, r3}
  402df6:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
  402dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
  402dfe:	6021      	str	r1, [r4, #0]
  402e00:	f109 0c01 	add.w	ip, r9, #1
  402e04:	9909      	ldr	r1, [sp, #36]	; 0x24
  402e06:	9100      	str	r1, [sp, #0]
  402e08:	3b01      	subs	r3, #1
  402e0a:	6063      	str	r3, [r4, #4]
  402e0c:	f80e 2009 	strb.w	r2, [lr, r9]
  402e10:	4663      	mov	r3, ip
  402e12:	4672      	mov	r2, lr
  402e14:	4640      	mov	r0, r8
  402e16:	4651      	mov	r1, sl
  402e18:	f8cd c01c 	str.w	ip, [sp, #28]
  402e1c:	f001 f986 	bl	40412c <_mbrtowc_r>
  402e20:	1c42      	adds	r2, r0, #1
  402e22:	f43f ac8d 	beq.w	402740 <__svfiscanf_r+0x240>
  402e26:	f8dd c01c 	ldr.w	ip, [sp, #28]
  402e2a:	b198      	cbz	r0, 402e54 <__svfiscanf_r+0x954>
  402e2c:	3002      	adds	r0, #2
  402e2e:	bf08      	it	eq
  402e30:	46e1      	moveq	r9, ip
  402e32:	d13b      	bne.n	402eac <__svfiscanf_r+0x9ac>
  402e34:	6863      	ldr	r3, [r4, #4]
  402e36:	2b00      	cmp	r3, #0
  402e38:	f73f aec0 	bgt.w	402bbc <__svfiscanf_r+0x6bc>
  402e3c:	4640      	mov	r0, r8
  402e3e:	4621      	mov	r1, r4
  402e40:	f001 fd04 	bl	40484c <__srefill_r>
  402e44:	2800      	cmp	r0, #0
  402e46:	f43f aeb9 	beq.w	402bbc <__svfiscanf_r+0x6bc>
  402e4a:	464a      	mov	r2, r9
  402e4c:	2a00      	cmp	r2, #0
  402e4e:	f47f ac77 	bne.w	402740 <__svfiscanf_r+0x240>
  402e52:	e6be      	b.n	402bd2 <__svfiscanf_r+0x6d2>
  402e54:	f8ca 0000 	str.w	r0, [sl]
  402e58:	f8cd c01c 	str.w	ip, [sp, #28]
  402e5c:	f000 fe44 	bl	403ae8 <iswspace>
  402e60:	f8dd c01c 	ldr.w	ip, [sp, #28]
  402e64:	b198      	cbz	r0, 402e8e <__svfiscanf_r+0x98e>
  402e66:	46e1      	mov	r9, ip
  402e68:	f1bc 0f00 	cmp.w	ip, #0
  402e6c:	f43f aeb1 	beq.w	402bd2 <__svfiscanf_r+0x6d2>
  402e70:	ab10      	add	r3, sp, #64	; 0x40
  402e72:	eb03 060c 	add.w	r6, r3, ip
  402e76:	f109 39ff 	add.w	r9, r9, #4294967295
  402e7a:	4640      	mov	r0, r8
  402e7c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
  402e80:	4622      	mov	r2, r4
  402e82:	f002 f92b 	bl	4050dc <_ungetc_r>
  402e86:	f1b9 0f00 	cmp.w	r9, #0
  402e8a:	d1f4      	bne.n	402e76 <__svfiscanf_r+0x976>
  402e8c:	e6a1      	b.n	402bd2 <__svfiscanf_r+0x6d2>
  402e8e:	9b03      	ldr	r3, [sp, #12]
  402e90:	4465      	add	r5, ip
  402e92:	3e01      	subs	r6, #1
  402e94:	b91b      	cbnz	r3, 402e9e <__svfiscanf_r+0x99e>
  402e96:	f10a 0a04 	add.w	sl, sl, #4
  402e9a:	4699      	mov	r9, r3
  402e9c:	e7ca      	b.n	402e34 <__svfiscanf_r+0x934>
  402e9e:	4681      	mov	r9, r0
  402ea0:	e7c8      	b.n	402e34 <__svfiscanf_r+0x934>
  402ea2:	f001 fff3 	bl	404e8c <_strtoull_r>
  402ea6:	f8dd c01c 	ldr.w	ip, [sp, #28]
  402eaa:	e796      	b.n	402dda <__svfiscanf_r+0x8da>
  402eac:	f8da 0000 	ldr.w	r0, [sl]
  402eb0:	e7d2      	b.n	402e58 <__svfiscanf_r+0x958>
  402eb2:	bf00      	nop
  402eb4:	00404d65 	.word	0x00404d65

00402eb8 <__swsetup_r>:
  402eb8:	b538      	push	{r3, r4, r5, lr}
  402eba:	4b2f      	ldr	r3, [pc, #188]	; (402f78 <__swsetup_r+0xc0>)
  402ebc:	681b      	ldr	r3, [r3, #0]
  402ebe:	4605      	mov	r5, r0
  402ec0:	460c      	mov	r4, r1
  402ec2:	b113      	cbz	r3, 402eca <__swsetup_r+0x12>
  402ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402ec6:	2a00      	cmp	r2, #0
  402ec8:	d036      	beq.n	402f38 <__swsetup_r+0x80>
  402eca:	89a2      	ldrh	r2, [r4, #12]
  402ecc:	b293      	uxth	r3, r2
  402ece:	0718      	lsls	r0, r3, #28
  402ed0:	d50c      	bpl.n	402eec <__swsetup_r+0x34>
  402ed2:	6920      	ldr	r0, [r4, #16]
  402ed4:	b1a8      	cbz	r0, 402f02 <__swsetup_r+0x4a>
  402ed6:	f013 0201 	ands.w	r2, r3, #1
  402eda:	d01e      	beq.n	402f1a <__swsetup_r+0x62>
  402edc:	6963      	ldr	r3, [r4, #20]
  402ede:	2200      	movs	r2, #0
  402ee0:	425b      	negs	r3, r3
  402ee2:	61a3      	str	r3, [r4, #24]
  402ee4:	60a2      	str	r2, [r4, #8]
  402ee6:	b1f0      	cbz	r0, 402f26 <__swsetup_r+0x6e>
  402ee8:	2000      	movs	r0, #0
  402eea:	bd38      	pop	{r3, r4, r5, pc}
  402eec:	06d9      	lsls	r1, r3, #27
  402eee:	d53b      	bpl.n	402f68 <__swsetup_r+0xb0>
  402ef0:	0758      	lsls	r0, r3, #29
  402ef2:	d425      	bmi.n	402f40 <__swsetup_r+0x88>
  402ef4:	6920      	ldr	r0, [r4, #16]
  402ef6:	f042 0308 	orr.w	r3, r2, #8
  402efa:	81a3      	strh	r3, [r4, #12]
  402efc:	b29b      	uxth	r3, r3
  402efe:	2800      	cmp	r0, #0
  402f00:	d1e9      	bne.n	402ed6 <__swsetup_r+0x1e>
  402f02:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402f06:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402f0a:	d0e4      	beq.n	402ed6 <__swsetup_r+0x1e>
  402f0c:	4628      	mov	r0, r5
  402f0e:	4621      	mov	r1, r4
  402f10:	f000 fe02 	bl	403b18 <__smakebuf_r>
  402f14:	89a3      	ldrh	r3, [r4, #12]
  402f16:	6920      	ldr	r0, [r4, #16]
  402f18:	e7dd      	b.n	402ed6 <__swsetup_r+0x1e>
  402f1a:	0799      	lsls	r1, r3, #30
  402f1c:	bf58      	it	pl
  402f1e:	6962      	ldrpl	r2, [r4, #20]
  402f20:	60a2      	str	r2, [r4, #8]
  402f22:	2800      	cmp	r0, #0
  402f24:	d1e0      	bne.n	402ee8 <__swsetup_r+0x30>
  402f26:	89a3      	ldrh	r3, [r4, #12]
  402f28:	061a      	lsls	r2, r3, #24
  402f2a:	d5de      	bpl.n	402eea <__swsetup_r+0x32>
  402f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402f30:	81a3      	strh	r3, [r4, #12]
  402f32:	f04f 30ff 	mov.w	r0, #4294967295
  402f36:	bd38      	pop	{r3, r4, r5, pc}
  402f38:	4618      	mov	r0, r3
  402f3a:	f000 f97f 	bl	40323c <__sinit>
  402f3e:	e7c4      	b.n	402eca <__swsetup_r+0x12>
  402f40:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402f42:	b149      	cbz	r1, 402f58 <__swsetup_r+0xa0>
  402f44:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402f48:	4299      	cmp	r1, r3
  402f4a:	d003      	beq.n	402f54 <__swsetup_r+0x9c>
  402f4c:	4628      	mov	r0, r5
  402f4e:	f000 fb17 	bl	403580 <_free_r>
  402f52:	89a2      	ldrh	r2, [r4, #12]
  402f54:	2300      	movs	r3, #0
  402f56:	6323      	str	r3, [r4, #48]	; 0x30
  402f58:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402f5c:	2300      	movs	r3, #0
  402f5e:	6920      	ldr	r0, [r4, #16]
  402f60:	6063      	str	r3, [r4, #4]
  402f62:	b292      	uxth	r2, r2
  402f64:	6020      	str	r0, [r4, #0]
  402f66:	e7c6      	b.n	402ef6 <__swsetup_r+0x3e>
  402f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402f6c:	2309      	movs	r3, #9
  402f6e:	602b      	str	r3, [r5, #0]
  402f70:	f04f 30ff 	mov.w	r0, #4294967295
  402f74:	81a2      	strh	r2, [r4, #12]
  402f76:	bd38      	pop	{r3, r4, r5, pc}
  402f78:	200004c0 	.word	0x200004c0

00402f7c <register_fini>:
  402f7c:	4b02      	ldr	r3, [pc, #8]	; (402f88 <register_fini+0xc>)
  402f7e:	b113      	cbz	r3, 402f86 <register_fini+0xa>
  402f80:	4802      	ldr	r0, [pc, #8]	; (402f8c <register_fini+0x10>)
  402f82:	f000 b805 	b.w	402f90 <atexit>
  402f86:	4770      	bx	lr
  402f88:	00000000 	.word	0x00000000
  402f8c:	00403251 	.word	0x00403251

00402f90 <atexit>:
  402f90:	4601      	mov	r1, r0
  402f92:	2000      	movs	r0, #0
  402f94:	4602      	mov	r2, r0
  402f96:	4603      	mov	r3, r0
  402f98:	f002 b9aa 	b.w	4052f0 <__register_exitproc>

00402f9c <__sflush_r>:
  402f9c:	898b      	ldrh	r3, [r1, #12]
  402f9e:	b29a      	uxth	r2, r3
  402fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402fa4:	460d      	mov	r5, r1
  402fa6:	0711      	lsls	r1, r2, #28
  402fa8:	4680      	mov	r8, r0
  402faa:	d43c      	bmi.n	403026 <__sflush_r+0x8a>
  402fac:	686a      	ldr	r2, [r5, #4]
  402fae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402fb2:	2a00      	cmp	r2, #0
  402fb4:	81ab      	strh	r3, [r5, #12]
  402fb6:	dd65      	ble.n	403084 <__sflush_r+0xe8>
  402fb8:	6aae      	ldr	r6, [r5, #40]	; 0x28
  402fba:	2e00      	cmp	r6, #0
  402fbc:	d04b      	beq.n	403056 <__sflush_r+0xba>
  402fbe:	b29b      	uxth	r3, r3
  402fc0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  402fc4:	2100      	movs	r1, #0
  402fc6:	b292      	uxth	r2, r2
  402fc8:	f8d8 4000 	ldr.w	r4, [r8]
  402fcc:	f8c8 1000 	str.w	r1, [r8]
  402fd0:	2a00      	cmp	r2, #0
  402fd2:	d05b      	beq.n	40308c <__sflush_r+0xf0>
  402fd4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402fd6:	075f      	lsls	r7, r3, #29
  402fd8:	d505      	bpl.n	402fe6 <__sflush_r+0x4a>
  402fda:	6869      	ldr	r1, [r5, #4]
  402fdc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402fde:	1a52      	subs	r2, r2, r1
  402fe0:	b10b      	cbz	r3, 402fe6 <__sflush_r+0x4a>
  402fe2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402fe4:	1ad2      	subs	r2, r2, r3
  402fe6:	4640      	mov	r0, r8
  402fe8:	69e9      	ldr	r1, [r5, #28]
  402fea:	2300      	movs	r3, #0
  402fec:	47b0      	blx	r6
  402fee:	1c46      	adds	r6, r0, #1
  402ff0:	d056      	beq.n	4030a0 <__sflush_r+0x104>
  402ff2:	89ab      	ldrh	r3, [r5, #12]
  402ff4:	692a      	ldr	r2, [r5, #16]
  402ff6:	602a      	str	r2, [r5, #0]
  402ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402ffc:	b29b      	uxth	r3, r3
  402ffe:	2200      	movs	r2, #0
  403000:	606a      	str	r2, [r5, #4]
  403002:	04da      	lsls	r2, r3, #19
  403004:	81ab      	strh	r3, [r5, #12]
  403006:	d43b      	bmi.n	403080 <__sflush_r+0xe4>
  403008:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40300a:	f8c8 4000 	str.w	r4, [r8]
  40300e:	b311      	cbz	r1, 403056 <__sflush_r+0xba>
  403010:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403014:	4299      	cmp	r1, r3
  403016:	d002      	beq.n	40301e <__sflush_r+0x82>
  403018:	4640      	mov	r0, r8
  40301a:	f000 fab1 	bl	403580 <_free_r>
  40301e:	2000      	movs	r0, #0
  403020:	6328      	str	r0, [r5, #48]	; 0x30
  403022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403026:	692e      	ldr	r6, [r5, #16]
  403028:	b1ae      	cbz	r6, 403056 <__sflush_r+0xba>
  40302a:	682c      	ldr	r4, [r5, #0]
  40302c:	602e      	str	r6, [r5, #0]
  40302e:	0791      	lsls	r1, r2, #30
  403030:	bf0c      	ite	eq
  403032:	696b      	ldreq	r3, [r5, #20]
  403034:	2300      	movne	r3, #0
  403036:	1ba4      	subs	r4, r4, r6
  403038:	60ab      	str	r3, [r5, #8]
  40303a:	e00a      	b.n	403052 <__sflush_r+0xb6>
  40303c:	4632      	mov	r2, r6
  40303e:	4623      	mov	r3, r4
  403040:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403042:	69e9      	ldr	r1, [r5, #28]
  403044:	4640      	mov	r0, r8
  403046:	47b8      	blx	r7
  403048:	2800      	cmp	r0, #0
  40304a:	eba4 0400 	sub.w	r4, r4, r0
  40304e:	4406      	add	r6, r0
  403050:	dd04      	ble.n	40305c <__sflush_r+0xc0>
  403052:	2c00      	cmp	r4, #0
  403054:	dcf2      	bgt.n	40303c <__sflush_r+0xa0>
  403056:	2000      	movs	r0, #0
  403058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40305c:	89ab      	ldrh	r3, [r5, #12]
  40305e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403062:	81ab      	strh	r3, [r5, #12]
  403064:	f04f 30ff 	mov.w	r0, #4294967295
  403068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40306c:	89ab      	ldrh	r3, [r5, #12]
  40306e:	692a      	ldr	r2, [r5, #16]
  403070:	6069      	str	r1, [r5, #4]
  403072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403076:	b29b      	uxth	r3, r3
  403078:	81ab      	strh	r3, [r5, #12]
  40307a:	04db      	lsls	r3, r3, #19
  40307c:	602a      	str	r2, [r5, #0]
  40307e:	d5c3      	bpl.n	403008 <__sflush_r+0x6c>
  403080:	6528      	str	r0, [r5, #80]	; 0x50
  403082:	e7c1      	b.n	403008 <__sflush_r+0x6c>
  403084:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403086:	2a00      	cmp	r2, #0
  403088:	dc96      	bgt.n	402fb8 <__sflush_r+0x1c>
  40308a:	e7e4      	b.n	403056 <__sflush_r+0xba>
  40308c:	2301      	movs	r3, #1
  40308e:	4640      	mov	r0, r8
  403090:	69e9      	ldr	r1, [r5, #28]
  403092:	47b0      	blx	r6
  403094:	1c43      	adds	r3, r0, #1
  403096:	4602      	mov	r2, r0
  403098:	d019      	beq.n	4030ce <__sflush_r+0x132>
  40309a:	89ab      	ldrh	r3, [r5, #12]
  40309c:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40309e:	e79a      	b.n	402fd6 <__sflush_r+0x3a>
  4030a0:	f8d8 1000 	ldr.w	r1, [r8]
  4030a4:	2900      	cmp	r1, #0
  4030a6:	d0e1      	beq.n	40306c <__sflush_r+0xd0>
  4030a8:	291d      	cmp	r1, #29
  4030aa:	d007      	beq.n	4030bc <__sflush_r+0x120>
  4030ac:	2916      	cmp	r1, #22
  4030ae:	d005      	beq.n	4030bc <__sflush_r+0x120>
  4030b0:	89ab      	ldrh	r3, [r5, #12]
  4030b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030b6:	81ab      	strh	r3, [r5, #12]
  4030b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4030bc:	89ab      	ldrh	r3, [r5, #12]
  4030be:	692a      	ldr	r2, [r5, #16]
  4030c0:	602a      	str	r2, [r5, #0]
  4030c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4030c6:	2200      	movs	r2, #0
  4030c8:	81ab      	strh	r3, [r5, #12]
  4030ca:	606a      	str	r2, [r5, #4]
  4030cc:	e79c      	b.n	403008 <__sflush_r+0x6c>
  4030ce:	f8d8 3000 	ldr.w	r3, [r8]
  4030d2:	2b00      	cmp	r3, #0
  4030d4:	d0e1      	beq.n	40309a <__sflush_r+0xfe>
  4030d6:	2b1d      	cmp	r3, #29
  4030d8:	d007      	beq.n	4030ea <__sflush_r+0x14e>
  4030da:	2b16      	cmp	r3, #22
  4030dc:	d005      	beq.n	4030ea <__sflush_r+0x14e>
  4030de:	89ab      	ldrh	r3, [r5, #12]
  4030e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030e4:	81ab      	strh	r3, [r5, #12]
  4030e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4030ea:	f8c8 4000 	str.w	r4, [r8]
  4030ee:	e7b2      	b.n	403056 <__sflush_r+0xba>

004030f0 <_fflush_r>:
  4030f0:	b510      	push	{r4, lr}
  4030f2:	4604      	mov	r4, r0
  4030f4:	b082      	sub	sp, #8
  4030f6:	b108      	cbz	r0, 4030fc <_fflush_r+0xc>
  4030f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4030fa:	b153      	cbz	r3, 403112 <_fflush_r+0x22>
  4030fc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  403100:	b908      	cbnz	r0, 403106 <_fflush_r+0x16>
  403102:	b002      	add	sp, #8
  403104:	bd10      	pop	{r4, pc}
  403106:	4620      	mov	r0, r4
  403108:	b002      	add	sp, #8
  40310a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40310e:	f7ff bf45 	b.w	402f9c <__sflush_r>
  403112:	9101      	str	r1, [sp, #4]
  403114:	f000 f892 	bl	40323c <__sinit>
  403118:	9901      	ldr	r1, [sp, #4]
  40311a:	e7ef      	b.n	4030fc <_fflush_r+0xc>

0040311c <fflush>:
  40311c:	b120      	cbz	r0, 403128 <fflush+0xc>
  40311e:	4b05      	ldr	r3, [pc, #20]	; (403134 <fflush+0x18>)
  403120:	4601      	mov	r1, r0
  403122:	6818      	ldr	r0, [r3, #0]
  403124:	f7ff bfe4 	b.w	4030f0 <_fflush_r>
  403128:	4b03      	ldr	r3, [pc, #12]	; (403138 <fflush+0x1c>)
  40312a:	4904      	ldr	r1, [pc, #16]	; (40313c <fflush+0x20>)
  40312c:	6818      	ldr	r0, [r3, #0]
  40312e:	f000 bcb1 	b.w	403a94 <_fwalk_reent>
  403132:	bf00      	nop
  403134:	200004c0 	.word	0x200004c0
  403138:	00405e3c 	.word	0x00405e3c
  40313c:	004030f1 	.word	0x004030f1

00403140 <_cleanup_r>:
  403140:	4901      	ldr	r1, [pc, #4]	; (403148 <_cleanup_r+0x8>)
  403142:	f000 bca7 	b.w	403a94 <_fwalk_reent>
  403146:	bf00      	nop
  403148:	004053b9 	.word	0x004053b9

0040314c <__sinit.part.1>:
  40314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403150:	4b35      	ldr	r3, [pc, #212]	; (403228 <__sinit.part.1+0xdc>)
  403152:	6845      	ldr	r5, [r0, #4]
  403154:	63c3      	str	r3, [r0, #60]	; 0x3c
  403156:	2400      	movs	r4, #0
  403158:	4607      	mov	r7, r0
  40315a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40315e:	2304      	movs	r3, #4
  403160:	2103      	movs	r1, #3
  403162:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  403166:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40316a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40316e:	b083      	sub	sp, #12
  403170:	602c      	str	r4, [r5, #0]
  403172:	606c      	str	r4, [r5, #4]
  403174:	60ac      	str	r4, [r5, #8]
  403176:	666c      	str	r4, [r5, #100]	; 0x64
  403178:	81ec      	strh	r4, [r5, #14]
  40317a:	612c      	str	r4, [r5, #16]
  40317c:	616c      	str	r4, [r5, #20]
  40317e:	61ac      	str	r4, [r5, #24]
  403180:	81ab      	strh	r3, [r5, #12]
  403182:	4621      	mov	r1, r4
  403184:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403188:	2208      	movs	r2, #8
  40318a:	f7fe fa03 	bl	401594 <memset>
  40318e:	68be      	ldr	r6, [r7, #8]
  403190:	f8df b098 	ldr.w	fp, [pc, #152]	; 40322c <__sinit.part.1+0xe0>
  403194:	f8df a098 	ldr.w	sl, [pc, #152]	; 403230 <__sinit.part.1+0xe4>
  403198:	f8df 9098 	ldr.w	r9, [pc, #152]	; 403234 <__sinit.part.1+0xe8>
  40319c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 403238 <__sinit.part.1+0xec>
  4031a0:	f8c5 b020 	str.w	fp, [r5, #32]
  4031a4:	2301      	movs	r3, #1
  4031a6:	2209      	movs	r2, #9
  4031a8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4031ac:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4031b0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4031b4:	61ed      	str	r5, [r5, #28]
  4031b6:	4621      	mov	r1, r4
  4031b8:	81f3      	strh	r3, [r6, #14]
  4031ba:	81b2      	strh	r2, [r6, #12]
  4031bc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4031c0:	6034      	str	r4, [r6, #0]
  4031c2:	6074      	str	r4, [r6, #4]
  4031c4:	60b4      	str	r4, [r6, #8]
  4031c6:	6674      	str	r4, [r6, #100]	; 0x64
  4031c8:	6134      	str	r4, [r6, #16]
  4031ca:	6174      	str	r4, [r6, #20]
  4031cc:	61b4      	str	r4, [r6, #24]
  4031ce:	2208      	movs	r2, #8
  4031d0:	9301      	str	r3, [sp, #4]
  4031d2:	f7fe f9df 	bl	401594 <memset>
  4031d6:	68fd      	ldr	r5, [r7, #12]
  4031d8:	61f6      	str	r6, [r6, #28]
  4031da:	2012      	movs	r0, #18
  4031dc:	2202      	movs	r2, #2
  4031de:	f8c6 b020 	str.w	fp, [r6, #32]
  4031e2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4031e6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4031ea:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4031ee:	4621      	mov	r1, r4
  4031f0:	81a8      	strh	r0, [r5, #12]
  4031f2:	81ea      	strh	r2, [r5, #14]
  4031f4:	602c      	str	r4, [r5, #0]
  4031f6:	606c      	str	r4, [r5, #4]
  4031f8:	60ac      	str	r4, [r5, #8]
  4031fa:	666c      	str	r4, [r5, #100]	; 0x64
  4031fc:	612c      	str	r4, [r5, #16]
  4031fe:	616c      	str	r4, [r5, #20]
  403200:	61ac      	str	r4, [r5, #24]
  403202:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403206:	2208      	movs	r2, #8
  403208:	f7fe f9c4 	bl	401594 <memset>
  40320c:	9b01      	ldr	r3, [sp, #4]
  40320e:	61ed      	str	r5, [r5, #28]
  403210:	f8c5 b020 	str.w	fp, [r5, #32]
  403214:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403218:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40321c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  403220:	63bb      	str	r3, [r7, #56]	; 0x38
  403222:	b003      	add	sp, #12
  403224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403228:	00403141 	.word	0x00403141
  40322c:	004049f9 	.word	0x004049f9
  403230:	00404a1d 	.word	0x00404a1d
  403234:	00404a55 	.word	0x00404a55
  403238:	00404a75 	.word	0x00404a75

0040323c <__sinit>:
  40323c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40323e:	b103      	cbz	r3, 403242 <__sinit+0x6>
  403240:	4770      	bx	lr
  403242:	f7ff bf83 	b.w	40314c <__sinit.part.1>
  403246:	bf00      	nop

00403248 <__sfp_lock_acquire>:
  403248:	4770      	bx	lr
  40324a:	bf00      	nop

0040324c <__sfp_lock_release>:
  40324c:	4770      	bx	lr
  40324e:	bf00      	nop

00403250 <__libc_fini_array>:
  403250:	b538      	push	{r3, r4, r5, lr}
  403252:	4b08      	ldr	r3, [pc, #32]	; (403274 <__libc_fini_array+0x24>)
  403254:	4d08      	ldr	r5, [pc, #32]	; (403278 <__libc_fini_array+0x28>)
  403256:	1aed      	subs	r5, r5, r3
  403258:	10ac      	asrs	r4, r5, #2
  40325a:	bf18      	it	ne
  40325c:	18ed      	addne	r5, r5, r3
  40325e:	d005      	beq.n	40326c <__libc_fini_array+0x1c>
  403260:	3c01      	subs	r4, #1
  403262:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403266:	4798      	blx	r3
  403268:	2c00      	cmp	r4, #0
  40326a:	d1f9      	bne.n	403260 <__libc_fini_array+0x10>
  40326c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403270:	f002 beae 	b.w	405fd0 <_fini>
  403274:	00405fdc 	.word	0x00405fdc
  403278:	00405fe0 	.word	0x00405fe0

0040327c <__fputwc>:
  40327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403280:	b082      	sub	sp, #8
  403282:	4607      	mov	r7, r0
  403284:	460e      	mov	r6, r1
  403286:	4614      	mov	r4, r2
  403288:	f000 fc40 	bl	403b0c <__locale_mb_cur_max>
  40328c:	2801      	cmp	r0, #1
  40328e:	d041      	beq.n	403314 <__fputwc+0x98>
  403290:	4638      	mov	r0, r7
  403292:	a901      	add	r1, sp, #4
  403294:	4632      	mov	r2, r6
  403296:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40329a:	f001 ffdd 	bl	405258 <_wcrtomb_r>
  40329e:	f1b0 3fff 	cmp.w	r0, #4294967295
  4032a2:	4680      	mov	r8, r0
  4032a4:	d02f      	beq.n	403306 <__fputwc+0x8a>
  4032a6:	2800      	cmp	r0, #0
  4032a8:	d03c      	beq.n	403324 <__fputwc+0xa8>
  4032aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
  4032ae:	2500      	movs	r5, #0
  4032b0:	e009      	b.n	4032c6 <__fputwc+0x4a>
  4032b2:	6823      	ldr	r3, [r4, #0]
  4032b4:	7019      	strb	r1, [r3, #0]
  4032b6:	6823      	ldr	r3, [r4, #0]
  4032b8:	3301      	adds	r3, #1
  4032ba:	6023      	str	r3, [r4, #0]
  4032bc:	3501      	adds	r5, #1
  4032be:	45a8      	cmp	r8, r5
  4032c0:	d930      	bls.n	403324 <__fputwc+0xa8>
  4032c2:	ab01      	add	r3, sp, #4
  4032c4:	5d59      	ldrb	r1, [r3, r5]
  4032c6:	68a3      	ldr	r3, [r4, #8]
  4032c8:	3b01      	subs	r3, #1
  4032ca:	2b00      	cmp	r3, #0
  4032cc:	60a3      	str	r3, [r4, #8]
  4032ce:	daf0      	bge.n	4032b2 <__fputwc+0x36>
  4032d0:	69a2      	ldr	r2, [r4, #24]
  4032d2:	4293      	cmp	r3, r2
  4032d4:	db07      	blt.n	4032e6 <__fputwc+0x6a>
  4032d6:	6823      	ldr	r3, [r4, #0]
  4032d8:	7019      	strb	r1, [r3, #0]
  4032da:	6823      	ldr	r3, [r4, #0]
  4032dc:	7819      	ldrb	r1, [r3, #0]
  4032de:	290a      	cmp	r1, #10
  4032e0:	f103 0301 	add.w	r3, r3, #1
  4032e4:	d1e9      	bne.n	4032ba <__fputwc+0x3e>
  4032e6:	4638      	mov	r0, r7
  4032e8:	4622      	mov	r2, r4
  4032ea:	f001 ff61 	bl	4051b0 <__swbuf_r>
  4032ee:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  4032f2:	fab0 f080 	clz	r0, r0
  4032f6:	0940      	lsrs	r0, r0, #5
  4032f8:	2800      	cmp	r0, #0
  4032fa:	d0df      	beq.n	4032bc <__fputwc+0x40>
  4032fc:	f04f 30ff 	mov.w	r0, #4294967295
  403300:	b002      	add	sp, #8
  403302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403306:	89a3      	ldrh	r3, [r4, #12]
  403308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40330c:	81a3      	strh	r3, [r4, #12]
  40330e:	b002      	add	sp, #8
  403310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403314:	1e73      	subs	r3, r6, #1
  403316:	2bfe      	cmp	r3, #254	; 0xfe
  403318:	d8ba      	bhi.n	403290 <__fputwc+0x14>
  40331a:	b2f1      	uxtb	r1, r6
  40331c:	4680      	mov	r8, r0
  40331e:	f88d 1004 	strb.w	r1, [sp, #4]
  403322:	e7c4      	b.n	4032ae <__fputwc+0x32>
  403324:	4630      	mov	r0, r6
  403326:	b002      	add	sp, #8
  403328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040332c <_fputwc_r>:
  40332c:	8993      	ldrh	r3, [r2, #12]
  40332e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  403332:	d10b      	bne.n	40334c <_fputwc_r+0x20>
  403334:	b410      	push	{r4}
  403336:	6e54      	ldr	r4, [r2, #100]	; 0x64
  403338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40333c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  403340:	6654      	str	r4, [r2, #100]	; 0x64
  403342:	8193      	strh	r3, [r2, #12]
  403344:	f85d 4b04 	ldr.w	r4, [sp], #4
  403348:	f7ff bf98 	b.w	40327c <__fputwc>
  40334c:	f7ff bf96 	b.w	40327c <__fputwc>

00403350 <_fread_r>:
  403350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403354:	b085      	sub	sp, #20
  403356:	fb02 f503 	mul.w	r5, r2, r3
  40335a:	4690      	mov	r8, r2
  40335c:	9303      	str	r3, [sp, #12]
  40335e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  403362:	2d00      	cmp	r5, #0
  403364:	d048      	beq.n	4033f8 <_fread_r+0xa8>
  403366:	4689      	mov	r9, r1
  403368:	4604      	mov	r4, r0
  40336a:	b118      	cbz	r0, 403374 <_fread_r+0x24>
  40336c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  40336e:	2a00      	cmp	r2, #0
  403370:	f000 80a8 	beq.w	4034c4 <_fread_r+0x174>
  403374:	f8bb 200c 	ldrh.w	r2, [fp, #12]
  403378:	b291      	uxth	r1, r2
  40337a:	0488      	lsls	r0, r1, #18
  40337c:	d40a      	bmi.n	403394 <_fread_r+0x44>
  40337e:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
  403382:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403386:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
  40338a:	f8ab 200c 	strh.w	r2, [fp, #12]
  40338e:	b291      	uxth	r1, r2
  403390:	f8cb 0064 	str.w	r0, [fp, #100]	; 0x64
  403394:	f8db 6004 	ldr.w	r6, [fp, #4]
  403398:	2e00      	cmp	r6, #0
  40339a:	db38      	blt.n	40340e <_fread_r+0xbe>
  40339c:	078b      	lsls	r3, r1, #30
  40339e:	4632      	mov	r2, r6
  4033a0:	d43c      	bmi.n	40341c <_fread_r+0xcc>
  4033a2:	46aa      	mov	sl, r5
  4033a4:	e010      	b.n	4033c8 <_fread_r+0x78>
  4033a6:	f000 ff4f 	bl	404248 <memcpy>
  4033aa:	f8db 2000 	ldr.w	r2, [fp]
  4033ae:	4432      	add	r2, r6
  4033b0:	f8cb 2000 	str.w	r2, [fp]
  4033b4:	4620      	mov	r0, r4
  4033b6:	4659      	mov	r1, fp
  4033b8:	44b1      	add	r9, r6
  4033ba:	ebc6 0a0a 	rsb	sl, r6, sl
  4033be:	f001 fa45 	bl	40484c <__srefill_r>
  4033c2:	b9e8      	cbnz	r0, 403400 <_fread_r+0xb0>
  4033c4:	f8db 6004 	ldr.w	r6, [fp, #4]
  4033c8:	f8db 1000 	ldr.w	r1, [fp]
  4033cc:	45b2      	cmp	sl, r6
  4033ce:	4632      	mov	r2, r6
  4033d0:	4648      	mov	r0, r9
  4033d2:	d8e8      	bhi.n	4033a6 <_fread_r+0x56>
  4033d4:	4652      	mov	r2, sl
  4033d6:	f000 ff37 	bl	404248 <memcpy>
  4033da:	f8db 1004 	ldr.w	r1, [fp, #4]
  4033de:	f8db 2000 	ldr.w	r2, [fp]
  4033e2:	9803      	ldr	r0, [sp, #12]
  4033e4:	ebca 0101 	rsb	r1, sl, r1
  4033e8:	4452      	add	r2, sl
  4033ea:	f8cb 1004 	str.w	r1, [fp, #4]
  4033ee:	f8cb 2000 	str.w	r2, [fp]
  4033f2:	b005      	add	sp, #20
  4033f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033f8:	4628      	mov	r0, r5
  4033fa:	b005      	add	sp, #20
  4033fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403400:	ebca 0505 	rsb	r5, sl, r5
  403404:	fbb5 f0f8 	udiv	r0, r5, r8
  403408:	b005      	add	sp, #20
  40340a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40340e:	2000      	movs	r0, #0
  403410:	078b      	lsls	r3, r1, #30
  403412:	4602      	mov	r2, r0
  403414:	f8cb 0004 	str.w	r0, [fp, #4]
  403418:	4606      	mov	r6, r0
  40341a:	d5c2      	bpl.n	4033a2 <_fread_r+0x52>
  40341c:	42aa      	cmp	r2, r5
  40341e:	bf28      	it	cs
  403420:	462a      	movcs	r2, r5
  403422:	f8db 1000 	ldr.w	r1, [fp]
  403426:	4648      	mov	r0, r9
  403428:	4692      	mov	sl, r2
  40342a:	f000 ff0d 	bl	404248 <memcpy>
  40342e:	f8db 6000 	ldr.w	r6, [fp]
  403432:	f8db 2004 	ldr.w	r2, [fp, #4]
  403436:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
  40343a:	eb06 030a 	add.w	r3, r6, sl
  40343e:	ebca 0202 	rsb	r2, sl, r2
  403442:	9301      	str	r3, [sp, #4]
  403444:	eb09 070a 	add.w	r7, r9, sl
  403448:	f8cb 3000 	str.w	r3, [fp]
  40344c:	f8cb 2004 	str.w	r2, [fp, #4]
  403450:	ebca 0605 	rsb	r6, sl, r5
  403454:	2900      	cmp	r1, #0
  403456:	d03e      	beq.n	4034d6 <_fread_r+0x186>
  403458:	2e00      	cmp	r6, #0
  40345a:	d03e      	beq.n	4034da <_fread_r+0x18a>
  40345c:	f10b 0040 	add.w	r0, fp, #64	; 0x40
  403460:	4281      	cmp	r1, r0
  403462:	d005      	beq.n	403470 <_fread_r+0x120>
  403464:	4620      	mov	r0, r4
  403466:	f000 f88b 	bl	403580 <_free_r>
  40346a:	f8db 3000 	ldr.w	r3, [fp]
  40346e:	9301      	str	r3, [sp, #4]
  403470:	2100      	movs	r1, #0
  403472:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
  403476:	f8db 3010 	ldr.w	r3, [fp, #16]
  40347a:	9302      	str	r3, [sp, #8]
  40347c:	f8db a014 	ldr.w	sl, [fp, #20]
  403480:	f04f 0900 	mov.w	r9, #0
  403484:	e000      	b.n	403488 <_fread_r+0x138>
  403486:	b346      	cbz	r6, 4034da <_fread_r+0x18a>
  403488:	f8cb 7010 	str.w	r7, [fp, #16]
  40348c:	f8cb 6014 	str.w	r6, [fp, #20]
  403490:	f8cb 7000 	str.w	r7, [fp]
  403494:	4659      	mov	r1, fp
  403496:	4620      	mov	r0, r4
  403498:	f001 f9d8 	bl	40484c <__srefill_r>
  40349c:	f8db 1004 	ldr.w	r1, [fp, #4]
  4034a0:	9b02      	ldr	r3, [sp, #8]
  4034a2:	f8cb 3010 	str.w	r3, [fp, #16]
  4034a6:	9b01      	ldr	r3, [sp, #4]
  4034a8:	f8cb a014 	str.w	sl, [fp, #20]
  4034ac:	f8cb 3000 	str.w	r3, [fp]
  4034b0:	1a76      	subs	r6, r6, r1
  4034b2:	440f      	add	r7, r1
  4034b4:	f8cb 9004 	str.w	r9, [fp, #4]
  4034b8:	2800      	cmp	r0, #0
  4034ba:	d0e4      	beq.n	403486 <_fread_r+0x136>
  4034bc:	1bad      	subs	r5, r5, r6
  4034be:	fbb5 f0f8 	udiv	r0, r5, r8
  4034c2:	e796      	b.n	4033f2 <_fread_r+0xa2>
  4034c4:	f7ff feba 	bl	40323c <__sinit>
  4034c8:	f8bb 200c 	ldrh.w	r2, [fp, #12]
  4034cc:	b291      	uxth	r1, r2
  4034ce:	0488      	lsls	r0, r1, #18
  4034d0:	f53f af60 	bmi.w	403394 <_fread_r+0x44>
  4034d4:	e753      	b.n	40337e <_fread_r+0x2e>
  4034d6:	2e00      	cmp	r6, #0
  4034d8:	d1cd      	bne.n	403476 <_fread_r+0x126>
  4034da:	9803      	ldr	r0, [sp, #12]
  4034dc:	b005      	add	sp, #20
  4034de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034e2:	bf00      	nop

004034e4 <_malloc_trim_r>:
  4034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4034e6:	4f23      	ldr	r7, [pc, #140]	; (403574 <_malloc_trim_r+0x90>)
  4034e8:	460c      	mov	r4, r1
  4034ea:	4606      	mov	r6, r0
  4034ec:	f000 ffaa 	bl	404444 <__malloc_lock>
  4034f0:	68bb      	ldr	r3, [r7, #8]
  4034f2:	685d      	ldr	r5, [r3, #4]
  4034f4:	f025 0503 	bic.w	r5, r5, #3
  4034f8:	1b29      	subs	r1, r5, r4
  4034fa:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4034fe:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403502:	f021 010f 	bic.w	r1, r1, #15
  403506:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40350a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40350e:	db07      	blt.n	403520 <_malloc_trim_r+0x3c>
  403510:	4630      	mov	r0, r6
  403512:	2100      	movs	r1, #0
  403514:	f001 fa22 	bl	40495c <_sbrk_r>
  403518:	68bb      	ldr	r3, [r7, #8]
  40351a:	442b      	add	r3, r5
  40351c:	4298      	cmp	r0, r3
  40351e:	d004      	beq.n	40352a <_malloc_trim_r+0x46>
  403520:	4630      	mov	r0, r6
  403522:	f000 ff91 	bl	404448 <__malloc_unlock>
  403526:	2000      	movs	r0, #0
  403528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40352a:	4630      	mov	r0, r6
  40352c:	4261      	negs	r1, r4
  40352e:	f001 fa15 	bl	40495c <_sbrk_r>
  403532:	3001      	adds	r0, #1
  403534:	d00d      	beq.n	403552 <_malloc_trim_r+0x6e>
  403536:	4b10      	ldr	r3, [pc, #64]	; (403578 <_malloc_trim_r+0x94>)
  403538:	68ba      	ldr	r2, [r7, #8]
  40353a:	6819      	ldr	r1, [r3, #0]
  40353c:	1b2d      	subs	r5, r5, r4
  40353e:	f045 0501 	orr.w	r5, r5, #1
  403542:	4630      	mov	r0, r6
  403544:	1b09      	subs	r1, r1, r4
  403546:	6055      	str	r5, [r2, #4]
  403548:	6019      	str	r1, [r3, #0]
  40354a:	f000 ff7d 	bl	404448 <__malloc_unlock>
  40354e:	2001      	movs	r0, #1
  403550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403552:	4630      	mov	r0, r6
  403554:	2100      	movs	r1, #0
  403556:	f001 fa01 	bl	40495c <_sbrk_r>
  40355a:	68ba      	ldr	r2, [r7, #8]
  40355c:	1a83      	subs	r3, r0, r2
  40355e:	2b0f      	cmp	r3, #15
  403560:	ddde      	ble.n	403520 <_malloc_trim_r+0x3c>
  403562:	4c06      	ldr	r4, [pc, #24]	; (40357c <_malloc_trim_r+0x98>)
  403564:	4904      	ldr	r1, [pc, #16]	; (403578 <_malloc_trim_r+0x94>)
  403566:	6824      	ldr	r4, [r4, #0]
  403568:	f043 0301 	orr.w	r3, r3, #1
  40356c:	1b00      	subs	r0, r0, r4
  40356e:	6053      	str	r3, [r2, #4]
  403570:	6008      	str	r0, [r1, #0]
  403572:	e7d5      	b.n	403520 <_malloc_trim_r+0x3c>
  403574:	200004ec 	.word	0x200004ec
  403578:	200009ec 	.word	0x200009ec
  40357c:	200008f8 	.word	0x200008f8

00403580 <_free_r>:
  403580:	2900      	cmp	r1, #0
  403582:	d04e      	beq.n	403622 <_free_r+0xa2>
  403584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403588:	460c      	mov	r4, r1
  40358a:	4680      	mov	r8, r0
  40358c:	f000 ff5a 	bl	404444 <__malloc_lock>
  403590:	f854 7c04 	ldr.w	r7, [r4, #-4]
  403594:	4962      	ldr	r1, [pc, #392]	; (403720 <_free_r+0x1a0>)
  403596:	f027 0201 	bic.w	r2, r7, #1
  40359a:	f1a4 0508 	sub.w	r5, r4, #8
  40359e:	18ab      	adds	r3, r5, r2
  4035a0:	688e      	ldr	r6, [r1, #8]
  4035a2:	6858      	ldr	r0, [r3, #4]
  4035a4:	429e      	cmp	r6, r3
  4035a6:	f020 0003 	bic.w	r0, r0, #3
  4035aa:	d05a      	beq.n	403662 <_free_r+0xe2>
  4035ac:	07fe      	lsls	r6, r7, #31
  4035ae:	6058      	str	r0, [r3, #4]
  4035b0:	d40b      	bmi.n	4035ca <_free_r+0x4a>
  4035b2:	f854 7c08 	ldr.w	r7, [r4, #-8]
  4035b6:	1bed      	subs	r5, r5, r7
  4035b8:	f101 0e08 	add.w	lr, r1, #8
  4035bc:	68ac      	ldr	r4, [r5, #8]
  4035be:	4574      	cmp	r4, lr
  4035c0:	443a      	add	r2, r7
  4035c2:	d067      	beq.n	403694 <_free_r+0x114>
  4035c4:	68ef      	ldr	r7, [r5, #12]
  4035c6:	60e7      	str	r7, [r4, #12]
  4035c8:	60bc      	str	r4, [r7, #8]
  4035ca:	181c      	adds	r4, r3, r0
  4035cc:	6864      	ldr	r4, [r4, #4]
  4035ce:	07e4      	lsls	r4, r4, #31
  4035d0:	d40c      	bmi.n	4035ec <_free_r+0x6c>
  4035d2:	4f54      	ldr	r7, [pc, #336]	; (403724 <_free_r+0x1a4>)
  4035d4:	689c      	ldr	r4, [r3, #8]
  4035d6:	42bc      	cmp	r4, r7
  4035d8:	4402      	add	r2, r0
  4035da:	d07c      	beq.n	4036d6 <_free_r+0x156>
  4035dc:	68d8      	ldr	r0, [r3, #12]
  4035de:	60e0      	str	r0, [r4, #12]
  4035e0:	f042 0301 	orr.w	r3, r2, #1
  4035e4:	6084      	str	r4, [r0, #8]
  4035e6:	606b      	str	r3, [r5, #4]
  4035e8:	50aa      	str	r2, [r5, r2]
  4035ea:	e003      	b.n	4035f4 <_free_r+0x74>
  4035ec:	f042 0301 	orr.w	r3, r2, #1
  4035f0:	606b      	str	r3, [r5, #4]
  4035f2:	50aa      	str	r2, [r5, r2]
  4035f4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4035f8:	d214      	bcs.n	403624 <_free_r+0xa4>
  4035fa:	08d2      	lsrs	r2, r2, #3
  4035fc:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  403600:	6848      	ldr	r0, [r1, #4]
  403602:	689f      	ldr	r7, [r3, #8]
  403604:	60af      	str	r7, [r5, #8]
  403606:	1092      	asrs	r2, r2, #2
  403608:	2401      	movs	r4, #1
  40360a:	fa04 f202 	lsl.w	r2, r4, r2
  40360e:	4310      	orrs	r0, r2
  403610:	60eb      	str	r3, [r5, #12]
  403612:	6048      	str	r0, [r1, #4]
  403614:	609d      	str	r5, [r3, #8]
  403616:	60fd      	str	r5, [r7, #12]
  403618:	4640      	mov	r0, r8
  40361a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40361e:	f000 bf13 	b.w	404448 <__malloc_unlock>
  403622:	4770      	bx	lr
  403624:	0a53      	lsrs	r3, r2, #9
  403626:	2b04      	cmp	r3, #4
  403628:	d847      	bhi.n	4036ba <_free_r+0x13a>
  40362a:	0993      	lsrs	r3, r2, #6
  40362c:	f103 0438 	add.w	r4, r3, #56	; 0x38
  403630:	0060      	lsls	r0, r4, #1
  403632:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  403636:	493a      	ldr	r1, [pc, #232]	; (403720 <_free_r+0x1a0>)
  403638:	6883      	ldr	r3, [r0, #8]
  40363a:	4283      	cmp	r3, r0
  40363c:	d043      	beq.n	4036c6 <_free_r+0x146>
  40363e:	6859      	ldr	r1, [r3, #4]
  403640:	f021 0103 	bic.w	r1, r1, #3
  403644:	4291      	cmp	r1, r2
  403646:	d902      	bls.n	40364e <_free_r+0xce>
  403648:	689b      	ldr	r3, [r3, #8]
  40364a:	4298      	cmp	r0, r3
  40364c:	d1f7      	bne.n	40363e <_free_r+0xbe>
  40364e:	68da      	ldr	r2, [r3, #12]
  403650:	60ea      	str	r2, [r5, #12]
  403652:	60ab      	str	r3, [r5, #8]
  403654:	4640      	mov	r0, r8
  403656:	6095      	str	r5, [r2, #8]
  403658:	60dd      	str	r5, [r3, #12]
  40365a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40365e:	f000 bef3 	b.w	404448 <__malloc_unlock>
  403662:	07ff      	lsls	r7, r7, #31
  403664:	4402      	add	r2, r0
  403666:	d407      	bmi.n	403678 <_free_r+0xf8>
  403668:	f854 3c08 	ldr.w	r3, [r4, #-8]
  40366c:	1aed      	subs	r5, r5, r3
  40366e:	441a      	add	r2, r3
  403670:	68a8      	ldr	r0, [r5, #8]
  403672:	68eb      	ldr	r3, [r5, #12]
  403674:	60c3      	str	r3, [r0, #12]
  403676:	6098      	str	r0, [r3, #8]
  403678:	4b2b      	ldr	r3, [pc, #172]	; (403728 <_free_r+0x1a8>)
  40367a:	681b      	ldr	r3, [r3, #0]
  40367c:	f042 0001 	orr.w	r0, r2, #1
  403680:	429a      	cmp	r2, r3
  403682:	6068      	str	r0, [r5, #4]
  403684:	608d      	str	r5, [r1, #8]
  403686:	d3c7      	bcc.n	403618 <_free_r+0x98>
  403688:	4b28      	ldr	r3, [pc, #160]	; (40372c <_free_r+0x1ac>)
  40368a:	4640      	mov	r0, r8
  40368c:	6819      	ldr	r1, [r3, #0]
  40368e:	f7ff ff29 	bl	4034e4 <_malloc_trim_r>
  403692:	e7c1      	b.n	403618 <_free_r+0x98>
  403694:	1819      	adds	r1, r3, r0
  403696:	6849      	ldr	r1, [r1, #4]
  403698:	07c9      	lsls	r1, r1, #31
  40369a:	d409      	bmi.n	4036b0 <_free_r+0x130>
  40369c:	68d9      	ldr	r1, [r3, #12]
  40369e:	689b      	ldr	r3, [r3, #8]
  4036a0:	4402      	add	r2, r0
  4036a2:	f042 0001 	orr.w	r0, r2, #1
  4036a6:	60d9      	str	r1, [r3, #12]
  4036a8:	608b      	str	r3, [r1, #8]
  4036aa:	6068      	str	r0, [r5, #4]
  4036ac:	50aa      	str	r2, [r5, r2]
  4036ae:	e7b3      	b.n	403618 <_free_r+0x98>
  4036b0:	f042 0301 	orr.w	r3, r2, #1
  4036b4:	606b      	str	r3, [r5, #4]
  4036b6:	50aa      	str	r2, [r5, r2]
  4036b8:	e7ae      	b.n	403618 <_free_r+0x98>
  4036ba:	2b14      	cmp	r3, #20
  4036bc:	d814      	bhi.n	4036e8 <_free_r+0x168>
  4036be:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  4036c2:	0060      	lsls	r0, r4, #1
  4036c4:	e7b5      	b.n	403632 <_free_r+0xb2>
  4036c6:	684a      	ldr	r2, [r1, #4]
  4036c8:	10a4      	asrs	r4, r4, #2
  4036ca:	2001      	movs	r0, #1
  4036cc:	40a0      	lsls	r0, r4
  4036ce:	4302      	orrs	r2, r0
  4036d0:	604a      	str	r2, [r1, #4]
  4036d2:	461a      	mov	r2, r3
  4036d4:	e7bc      	b.n	403650 <_free_r+0xd0>
  4036d6:	f042 0301 	orr.w	r3, r2, #1
  4036da:	614d      	str	r5, [r1, #20]
  4036dc:	610d      	str	r5, [r1, #16]
  4036de:	60ec      	str	r4, [r5, #12]
  4036e0:	60ac      	str	r4, [r5, #8]
  4036e2:	606b      	str	r3, [r5, #4]
  4036e4:	50aa      	str	r2, [r5, r2]
  4036e6:	e797      	b.n	403618 <_free_r+0x98>
  4036e8:	2b54      	cmp	r3, #84	; 0x54
  4036ea:	d804      	bhi.n	4036f6 <_free_r+0x176>
  4036ec:	0b13      	lsrs	r3, r2, #12
  4036ee:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  4036f2:	0060      	lsls	r0, r4, #1
  4036f4:	e79d      	b.n	403632 <_free_r+0xb2>
  4036f6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4036fa:	d804      	bhi.n	403706 <_free_r+0x186>
  4036fc:	0bd3      	lsrs	r3, r2, #15
  4036fe:	f103 0477 	add.w	r4, r3, #119	; 0x77
  403702:	0060      	lsls	r0, r4, #1
  403704:	e795      	b.n	403632 <_free_r+0xb2>
  403706:	f240 5054 	movw	r0, #1364	; 0x554
  40370a:	4283      	cmp	r3, r0
  40370c:	d804      	bhi.n	403718 <_free_r+0x198>
  40370e:	0c93      	lsrs	r3, r2, #18
  403710:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  403714:	0060      	lsls	r0, r4, #1
  403716:	e78c      	b.n	403632 <_free_r+0xb2>
  403718:	20fc      	movs	r0, #252	; 0xfc
  40371a:	247e      	movs	r4, #126	; 0x7e
  40371c:	e789      	b.n	403632 <_free_r+0xb2>
  40371e:	bf00      	nop
  403720:	200004ec 	.word	0x200004ec
  403724:	200004f4 	.word	0x200004f4
  403728:	200008f4 	.word	0x200008f4
  40372c:	200009e8 	.word	0x200009e8

00403730 <__sfvwrite_r>:
  403730:	6893      	ldr	r3, [r2, #8]
  403732:	2b00      	cmp	r3, #0
  403734:	d07a      	beq.n	40382c <__sfvwrite_r+0xfc>
  403736:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40373a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40373e:	f01e 0f08 	tst.w	lr, #8
  403742:	b083      	sub	sp, #12
  403744:	460c      	mov	r4, r1
  403746:	4681      	mov	r9, r0
  403748:	4616      	mov	r6, r2
  40374a:	d026      	beq.n	40379a <__sfvwrite_r+0x6a>
  40374c:	690b      	ldr	r3, [r1, #16]
  40374e:	b323      	cbz	r3, 40379a <__sfvwrite_r+0x6a>
  403750:	f00e 0802 	and.w	r8, lr, #2
  403754:	fa1f f088 	uxth.w	r0, r8
  403758:	6835      	ldr	r5, [r6, #0]
  40375a:	b370      	cbz	r0, 4037ba <__sfvwrite_r+0x8a>
  40375c:	f04f 0a00 	mov.w	sl, #0
  403760:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 403a44 <__sfvwrite_r+0x314>
  403764:	46d0      	mov	r8, sl
  403766:	45d8      	cmp	r8, fp
  403768:	4643      	mov	r3, r8
  40376a:	4652      	mov	r2, sl
  40376c:	bf28      	it	cs
  40376e:	465b      	movcs	r3, fp
  403770:	4648      	mov	r0, r9
  403772:	f1b8 0f00 	cmp.w	r8, #0
  403776:	d053      	beq.n	403820 <__sfvwrite_r+0xf0>
  403778:	69e1      	ldr	r1, [r4, #28]
  40377a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40377c:	47b8      	blx	r7
  40377e:	2800      	cmp	r0, #0
  403780:	dd73      	ble.n	40386a <__sfvwrite_r+0x13a>
  403782:	68b3      	ldr	r3, [r6, #8]
  403784:	1a1b      	subs	r3, r3, r0
  403786:	4482      	add	sl, r0
  403788:	ebc0 0808 	rsb	r8, r0, r8
  40378c:	60b3      	str	r3, [r6, #8]
  40378e:	2b00      	cmp	r3, #0
  403790:	d1e9      	bne.n	403766 <__sfvwrite_r+0x36>
  403792:	2000      	movs	r0, #0
  403794:	b003      	add	sp, #12
  403796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40379a:	4648      	mov	r0, r9
  40379c:	4621      	mov	r1, r4
  40379e:	f7ff fb8b 	bl	402eb8 <__swsetup_r>
  4037a2:	2800      	cmp	r0, #0
  4037a4:	f040 8145 	bne.w	403a32 <__sfvwrite_r+0x302>
  4037a8:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4037ac:	6835      	ldr	r5, [r6, #0]
  4037ae:	f00e 0802 	and.w	r8, lr, #2
  4037b2:	fa1f f088 	uxth.w	r0, r8
  4037b6:	2800      	cmp	r0, #0
  4037b8:	d1d0      	bne.n	40375c <__sfvwrite_r+0x2c>
  4037ba:	f01e 0b01 	ands.w	fp, lr, #1
  4037be:	d15d      	bne.n	40387c <__sfvwrite_r+0x14c>
  4037c0:	46d8      	mov	r8, fp
  4037c2:	f1b8 0f00 	cmp.w	r8, #0
  4037c6:	d025      	beq.n	403814 <__sfvwrite_r+0xe4>
  4037c8:	f41e 7f00 	tst.w	lr, #512	; 0x200
  4037cc:	68a7      	ldr	r7, [r4, #8]
  4037ce:	d02f      	beq.n	403830 <__sfvwrite_r+0x100>
  4037d0:	45b8      	cmp	r8, r7
  4037d2:	46ba      	mov	sl, r7
  4037d4:	f0c0 80a9 	bcc.w	40392a <__sfvwrite_r+0x1fa>
  4037d8:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  4037dc:	f040 80b6 	bne.w	40394c <__sfvwrite_r+0x21c>
  4037e0:	6820      	ldr	r0, [r4, #0]
  4037e2:	4652      	mov	r2, sl
  4037e4:	4659      	mov	r1, fp
  4037e6:	f000 fdc9 	bl	40437c <memmove>
  4037ea:	68a0      	ldr	r0, [r4, #8]
  4037ec:	6822      	ldr	r2, [r4, #0]
  4037ee:	1bc0      	subs	r0, r0, r7
  4037f0:	eb02 030a 	add.w	r3, r2, sl
  4037f4:	60a0      	str	r0, [r4, #8]
  4037f6:	6023      	str	r3, [r4, #0]
  4037f8:	4640      	mov	r0, r8
  4037fa:	68b3      	ldr	r3, [r6, #8]
  4037fc:	1a1b      	subs	r3, r3, r0
  4037fe:	4483      	add	fp, r0
  403800:	ebc0 0808 	rsb	r8, r0, r8
  403804:	60b3      	str	r3, [r6, #8]
  403806:	2b00      	cmp	r3, #0
  403808:	d0c3      	beq.n	403792 <__sfvwrite_r+0x62>
  40380a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40380e:	f1b8 0f00 	cmp.w	r8, #0
  403812:	d1d9      	bne.n	4037c8 <__sfvwrite_r+0x98>
  403814:	f8d5 b000 	ldr.w	fp, [r5]
  403818:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40381c:	3508      	adds	r5, #8
  40381e:	e7d0      	b.n	4037c2 <__sfvwrite_r+0x92>
  403820:	f8d5 a000 	ldr.w	sl, [r5]
  403824:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403828:	3508      	adds	r5, #8
  40382a:	e79c      	b.n	403766 <__sfvwrite_r+0x36>
  40382c:	2000      	movs	r0, #0
  40382e:	4770      	bx	lr
  403830:	6820      	ldr	r0, [r4, #0]
  403832:	6923      	ldr	r3, [r4, #16]
  403834:	4298      	cmp	r0, r3
  403836:	d803      	bhi.n	403840 <__sfvwrite_r+0x110>
  403838:	6962      	ldr	r2, [r4, #20]
  40383a:	4590      	cmp	r8, r2
  40383c:	f080 80b9 	bcs.w	4039b2 <__sfvwrite_r+0x282>
  403840:	4547      	cmp	r7, r8
  403842:	bf28      	it	cs
  403844:	4647      	movcs	r7, r8
  403846:	463a      	mov	r2, r7
  403848:	4659      	mov	r1, fp
  40384a:	f000 fd97 	bl	40437c <memmove>
  40384e:	68a3      	ldr	r3, [r4, #8]
  403850:	6822      	ldr	r2, [r4, #0]
  403852:	1bdb      	subs	r3, r3, r7
  403854:	443a      	add	r2, r7
  403856:	60a3      	str	r3, [r4, #8]
  403858:	6022      	str	r2, [r4, #0]
  40385a:	2b00      	cmp	r3, #0
  40385c:	d14a      	bne.n	4038f4 <__sfvwrite_r+0x1c4>
  40385e:	4648      	mov	r0, r9
  403860:	4621      	mov	r1, r4
  403862:	f7ff fc45 	bl	4030f0 <_fflush_r>
  403866:	2800      	cmp	r0, #0
  403868:	d044      	beq.n	4038f4 <__sfvwrite_r+0x1c4>
  40386a:	89a3      	ldrh	r3, [r4, #12]
  40386c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403870:	f04f 30ff 	mov.w	r0, #4294967295
  403874:	81a3      	strh	r3, [r4, #12]
  403876:	b003      	add	sp, #12
  403878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40387c:	4680      	mov	r8, r0
  40387e:	9000      	str	r0, [sp, #0]
  403880:	4683      	mov	fp, r0
  403882:	4682      	mov	sl, r0
  403884:	f1ba 0f00 	cmp.w	sl, #0
  403888:	d02c      	beq.n	4038e4 <__sfvwrite_r+0x1b4>
  40388a:	9b00      	ldr	r3, [sp, #0]
  40388c:	2b00      	cmp	r3, #0
  40388e:	d050      	beq.n	403932 <__sfvwrite_r+0x202>
  403890:	6820      	ldr	r0, [r4, #0]
  403892:	6921      	ldr	r1, [r4, #16]
  403894:	f8d4 e008 	ldr.w	lr, [r4, #8]
  403898:	6962      	ldr	r2, [r4, #20]
  40389a:	45d0      	cmp	r8, sl
  40389c:	4643      	mov	r3, r8
  40389e:	bf28      	it	cs
  4038a0:	4653      	movcs	r3, sl
  4038a2:	4288      	cmp	r0, r1
  4038a4:	461f      	mov	r7, r3
  4038a6:	d904      	bls.n	4038b2 <__sfvwrite_r+0x182>
  4038a8:	eb0e 0c02 	add.w	ip, lr, r2
  4038ac:	4563      	cmp	r3, ip
  4038ae:	f300 8092 	bgt.w	4039d6 <__sfvwrite_r+0x2a6>
  4038b2:	4293      	cmp	r3, r2
  4038b4:	db20      	blt.n	4038f8 <__sfvwrite_r+0x1c8>
  4038b6:	4613      	mov	r3, r2
  4038b8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4038ba:	69e1      	ldr	r1, [r4, #28]
  4038bc:	4648      	mov	r0, r9
  4038be:	465a      	mov	r2, fp
  4038c0:	47b8      	blx	r7
  4038c2:	1e07      	subs	r7, r0, #0
  4038c4:	ddd1      	ble.n	40386a <__sfvwrite_r+0x13a>
  4038c6:	ebb8 0807 	subs.w	r8, r8, r7
  4038ca:	d025      	beq.n	403918 <__sfvwrite_r+0x1e8>
  4038cc:	68b3      	ldr	r3, [r6, #8]
  4038ce:	1bdb      	subs	r3, r3, r7
  4038d0:	44bb      	add	fp, r7
  4038d2:	ebc7 0a0a 	rsb	sl, r7, sl
  4038d6:	60b3      	str	r3, [r6, #8]
  4038d8:	2b00      	cmp	r3, #0
  4038da:	f43f af5a 	beq.w	403792 <__sfvwrite_r+0x62>
  4038de:	f1ba 0f00 	cmp.w	sl, #0
  4038e2:	d1d2      	bne.n	40388a <__sfvwrite_r+0x15a>
  4038e4:	2300      	movs	r3, #0
  4038e6:	f8d5 b000 	ldr.w	fp, [r5]
  4038ea:	f8d5 a004 	ldr.w	sl, [r5, #4]
  4038ee:	9300      	str	r3, [sp, #0]
  4038f0:	3508      	adds	r5, #8
  4038f2:	e7c7      	b.n	403884 <__sfvwrite_r+0x154>
  4038f4:	4638      	mov	r0, r7
  4038f6:	e780      	b.n	4037fa <__sfvwrite_r+0xca>
  4038f8:	461a      	mov	r2, r3
  4038fa:	4659      	mov	r1, fp
  4038fc:	9301      	str	r3, [sp, #4]
  4038fe:	f000 fd3d 	bl	40437c <memmove>
  403902:	68a2      	ldr	r2, [r4, #8]
  403904:	6821      	ldr	r1, [r4, #0]
  403906:	9b01      	ldr	r3, [sp, #4]
  403908:	ebb8 0807 	subs.w	r8, r8, r7
  40390c:	eba2 0203 	sub.w	r2, r2, r3
  403910:	440b      	add	r3, r1
  403912:	60a2      	str	r2, [r4, #8]
  403914:	6023      	str	r3, [r4, #0]
  403916:	d1d9      	bne.n	4038cc <__sfvwrite_r+0x19c>
  403918:	4648      	mov	r0, r9
  40391a:	4621      	mov	r1, r4
  40391c:	f7ff fbe8 	bl	4030f0 <_fflush_r>
  403920:	2800      	cmp	r0, #0
  403922:	d1a2      	bne.n	40386a <__sfvwrite_r+0x13a>
  403924:	f8cd 8000 	str.w	r8, [sp]
  403928:	e7d0      	b.n	4038cc <__sfvwrite_r+0x19c>
  40392a:	6820      	ldr	r0, [r4, #0]
  40392c:	4647      	mov	r7, r8
  40392e:	46c2      	mov	sl, r8
  403930:	e757      	b.n	4037e2 <__sfvwrite_r+0xb2>
  403932:	4658      	mov	r0, fp
  403934:	210a      	movs	r1, #10
  403936:	4652      	mov	r2, sl
  403938:	f000 fc3c 	bl	4041b4 <memchr>
  40393c:	2800      	cmp	r0, #0
  40393e:	d073      	beq.n	403a28 <__sfvwrite_r+0x2f8>
  403940:	3001      	adds	r0, #1
  403942:	2301      	movs	r3, #1
  403944:	ebcb 0800 	rsb	r8, fp, r0
  403948:	9300      	str	r3, [sp, #0]
  40394a:	e7a1      	b.n	403890 <__sfvwrite_r+0x160>
  40394c:	6967      	ldr	r7, [r4, #20]
  40394e:	6921      	ldr	r1, [r4, #16]
  403950:	6823      	ldr	r3, [r4, #0]
  403952:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  403956:	1a5b      	subs	r3, r3, r1
  403958:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40395c:	1c58      	adds	r0, r3, #1
  40395e:	107f      	asrs	r7, r7, #1
  403960:	4440      	add	r0, r8
  403962:	4287      	cmp	r7, r0
  403964:	463a      	mov	r2, r7
  403966:	bf3c      	itt	cc
  403968:	4607      	movcc	r7, r0
  40396a:	463a      	movcc	r2, r7
  40396c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  403970:	9300      	str	r3, [sp, #0]
  403972:	d046      	beq.n	403a02 <__sfvwrite_r+0x2d2>
  403974:	4611      	mov	r1, r2
  403976:	4648      	mov	r0, r9
  403978:	f000 f946 	bl	403c08 <_malloc_r>
  40397c:	9b00      	ldr	r3, [sp, #0]
  40397e:	4682      	mov	sl, r0
  403980:	2800      	cmp	r0, #0
  403982:	d059      	beq.n	403a38 <__sfvwrite_r+0x308>
  403984:	461a      	mov	r2, r3
  403986:	6921      	ldr	r1, [r4, #16]
  403988:	9300      	str	r3, [sp, #0]
  40398a:	f000 fc5d 	bl	404248 <memcpy>
  40398e:	89a2      	ldrh	r2, [r4, #12]
  403990:	9b00      	ldr	r3, [sp, #0]
  403992:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  403996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40399a:	81a2      	strh	r2, [r4, #12]
  40399c:	eb0a 0003 	add.w	r0, sl, r3
  4039a0:	1afb      	subs	r3, r7, r3
  4039a2:	f8c4 a010 	str.w	sl, [r4, #16]
  4039a6:	6167      	str	r7, [r4, #20]
  4039a8:	6020      	str	r0, [r4, #0]
  4039aa:	60a3      	str	r3, [r4, #8]
  4039ac:	4647      	mov	r7, r8
  4039ae:	46c2      	mov	sl, r8
  4039b0:	e717      	b.n	4037e2 <__sfvwrite_r+0xb2>
  4039b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4039b6:	4543      	cmp	r3, r8
  4039b8:	bf28      	it	cs
  4039ba:	4643      	movcs	r3, r8
  4039bc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4039be:	fb93 f3f2 	sdiv	r3, r3, r2
  4039c2:	4648      	mov	r0, r9
  4039c4:	fb03 f302 	mul.w	r3, r3, r2
  4039c8:	69e1      	ldr	r1, [r4, #28]
  4039ca:	465a      	mov	r2, fp
  4039cc:	47b8      	blx	r7
  4039ce:	2800      	cmp	r0, #0
  4039d0:	f73f af13 	bgt.w	4037fa <__sfvwrite_r+0xca>
  4039d4:	e749      	b.n	40386a <__sfvwrite_r+0x13a>
  4039d6:	4662      	mov	r2, ip
  4039d8:	4659      	mov	r1, fp
  4039da:	f8cd c004 	str.w	ip, [sp, #4]
  4039de:	f000 fccd 	bl	40437c <memmove>
  4039e2:	6823      	ldr	r3, [r4, #0]
  4039e4:	f8dd c004 	ldr.w	ip, [sp, #4]
  4039e8:	4463      	add	r3, ip
  4039ea:	6023      	str	r3, [r4, #0]
  4039ec:	4648      	mov	r0, r9
  4039ee:	4621      	mov	r1, r4
  4039f0:	f7ff fb7e 	bl	4030f0 <_fflush_r>
  4039f4:	f8dd c004 	ldr.w	ip, [sp, #4]
  4039f8:	2800      	cmp	r0, #0
  4039fa:	f47f af36 	bne.w	40386a <__sfvwrite_r+0x13a>
  4039fe:	4667      	mov	r7, ip
  403a00:	e761      	b.n	4038c6 <__sfvwrite_r+0x196>
  403a02:	4648      	mov	r0, r9
  403a04:	f000 fd22 	bl	40444c <_realloc_r>
  403a08:	9b00      	ldr	r3, [sp, #0]
  403a0a:	4682      	mov	sl, r0
  403a0c:	2800      	cmp	r0, #0
  403a0e:	d1c5      	bne.n	40399c <__sfvwrite_r+0x26c>
  403a10:	4648      	mov	r0, r9
  403a12:	6921      	ldr	r1, [r4, #16]
  403a14:	f7ff fdb4 	bl	403580 <_free_r>
  403a18:	89a3      	ldrh	r3, [r4, #12]
  403a1a:	220c      	movs	r2, #12
  403a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403a20:	b29b      	uxth	r3, r3
  403a22:	f8c9 2000 	str.w	r2, [r9]
  403a26:	e721      	b.n	40386c <__sfvwrite_r+0x13c>
  403a28:	2301      	movs	r3, #1
  403a2a:	f10a 0801 	add.w	r8, sl, #1
  403a2e:	9300      	str	r3, [sp, #0]
  403a30:	e72e      	b.n	403890 <__sfvwrite_r+0x160>
  403a32:	f04f 30ff 	mov.w	r0, #4294967295
  403a36:	e6ad      	b.n	403794 <__sfvwrite_r+0x64>
  403a38:	230c      	movs	r3, #12
  403a3a:	f8c9 3000 	str.w	r3, [r9]
  403a3e:	89a3      	ldrh	r3, [r4, #12]
  403a40:	e714      	b.n	40386c <__sfvwrite_r+0x13c>
  403a42:	bf00      	nop
  403a44:	7ffffc00 	.word	0x7ffffc00

00403a48 <_fwalk>:
  403a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a4c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403a50:	d01b      	beq.n	403a8a <_fwalk+0x42>
  403a52:	4688      	mov	r8, r1
  403a54:	2600      	movs	r6, #0
  403a56:	687d      	ldr	r5, [r7, #4]
  403a58:	68bc      	ldr	r4, [r7, #8]
  403a5a:	3d01      	subs	r5, #1
  403a5c:	d40f      	bmi.n	403a7e <_fwalk+0x36>
  403a5e:	89a3      	ldrh	r3, [r4, #12]
  403a60:	2b01      	cmp	r3, #1
  403a62:	f105 35ff 	add.w	r5, r5, #4294967295
  403a66:	d906      	bls.n	403a76 <_fwalk+0x2e>
  403a68:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403a6c:	3301      	adds	r3, #1
  403a6e:	4620      	mov	r0, r4
  403a70:	d001      	beq.n	403a76 <_fwalk+0x2e>
  403a72:	47c0      	blx	r8
  403a74:	4306      	orrs	r6, r0
  403a76:	1c6b      	adds	r3, r5, #1
  403a78:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403a7c:	d1ef      	bne.n	403a5e <_fwalk+0x16>
  403a7e:	683f      	ldr	r7, [r7, #0]
  403a80:	2f00      	cmp	r7, #0
  403a82:	d1e8      	bne.n	403a56 <_fwalk+0xe>
  403a84:	4630      	mov	r0, r6
  403a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a8a:	463e      	mov	r6, r7
  403a8c:	4630      	mov	r0, r6
  403a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a92:	bf00      	nop

00403a94 <_fwalk_reent>:
  403a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403a98:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403a9c:	d01f      	beq.n	403ade <_fwalk_reent+0x4a>
  403a9e:	4688      	mov	r8, r1
  403aa0:	4606      	mov	r6, r0
  403aa2:	f04f 0900 	mov.w	r9, #0
  403aa6:	687d      	ldr	r5, [r7, #4]
  403aa8:	68bc      	ldr	r4, [r7, #8]
  403aaa:	3d01      	subs	r5, #1
  403aac:	d411      	bmi.n	403ad2 <_fwalk_reent+0x3e>
  403aae:	89a3      	ldrh	r3, [r4, #12]
  403ab0:	2b01      	cmp	r3, #1
  403ab2:	f105 35ff 	add.w	r5, r5, #4294967295
  403ab6:	d908      	bls.n	403aca <_fwalk_reent+0x36>
  403ab8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403abc:	3301      	adds	r3, #1
  403abe:	4621      	mov	r1, r4
  403ac0:	4630      	mov	r0, r6
  403ac2:	d002      	beq.n	403aca <_fwalk_reent+0x36>
  403ac4:	47c0      	blx	r8
  403ac6:	ea49 0900 	orr.w	r9, r9, r0
  403aca:	1c6b      	adds	r3, r5, #1
  403acc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403ad0:	d1ed      	bne.n	403aae <_fwalk_reent+0x1a>
  403ad2:	683f      	ldr	r7, [r7, #0]
  403ad4:	2f00      	cmp	r7, #0
  403ad6:	d1e6      	bne.n	403aa6 <_fwalk_reent+0x12>
  403ad8:	4648      	mov	r0, r9
  403ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403ade:	46b9      	mov	r9, r7
  403ae0:	4648      	mov	r0, r9
  403ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403ae6:	bf00      	nop

00403ae8 <iswspace>:
  403ae8:	28ff      	cmp	r0, #255	; 0xff
  403aea:	d807      	bhi.n	403afc <iswspace+0x14>
  403aec:	4b04      	ldr	r3, [pc, #16]	; (403b00 <iswspace+0x18>)
  403aee:	681b      	ldr	r3, [r3, #0]
  403af0:	4418      	add	r0, r3
  403af2:	7840      	ldrb	r0, [r0, #1]
  403af4:	f000 0008 	and.w	r0, r0, #8
  403af8:	b2c0      	uxtb	r0, r0
  403afa:	4770      	bx	lr
  403afc:	2000      	movs	r0, #0
  403afe:	4770      	bx	lr
  403b00:	200004c4 	.word	0x200004c4

00403b04 <__locale_charset>:
  403b04:	4800      	ldr	r0, [pc, #0]	; (403b08 <__locale_charset+0x4>)
  403b06:	4770      	bx	lr
  403b08:	200004c8 	.word	0x200004c8

00403b0c <__locale_mb_cur_max>:
  403b0c:	4b01      	ldr	r3, [pc, #4]	; (403b14 <__locale_mb_cur_max+0x8>)
  403b0e:	6818      	ldr	r0, [r3, #0]
  403b10:	4770      	bx	lr
  403b12:	bf00      	nop
  403b14:	200004e8 	.word	0x200004e8

00403b18 <__smakebuf_r>:
  403b18:	898b      	ldrh	r3, [r1, #12]
  403b1a:	b29a      	uxth	r2, r3
  403b1c:	f012 0f02 	tst.w	r2, #2
  403b20:	d13c      	bne.n	403b9c <__smakebuf_r+0x84>
  403b22:	b5f0      	push	{r4, r5, r6, r7, lr}
  403b24:	460c      	mov	r4, r1
  403b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403b2a:	2900      	cmp	r1, #0
  403b2c:	b091      	sub	sp, #68	; 0x44
  403b2e:	4605      	mov	r5, r0
  403b30:	db19      	blt.n	403b66 <__smakebuf_r+0x4e>
  403b32:	aa01      	add	r2, sp, #4
  403b34:	f001 fc82 	bl	40543c <_fstat_r>
  403b38:	2800      	cmp	r0, #0
  403b3a:	db12      	blt.n	403b62 <__smakebuf_r+0x4a>
  403b3c:	9b02      	ldr	r3, [sp, #8]
  403b3e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  403b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  403b46:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  403b4a:	fab7 f787 	clz	r7, r7
  403b4e:	ea4f 1757 	mov.w	r7, r7, lsr #5
  403b52:	d02a      	beq.n	403baa <__smakebuf_r+0x92>
  403b54:	89a3      	ldrh	r3, [r4, #12]
  403b56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403b5a:	81a3      	strh	r3, [r4, #12]
  403b5c:	f44f 6680 	mov.w	r6, #1024	; 0x400
  403b60:	e00b      	b.n	403b7a <__smakebuf_r+0x62>
  403b62:	89a3      	ldrh	r3, [r4, #12]
  403b64:	b29a      	uxth	r2, r3
  403b66:	f012 0f80 	tst.w	r2, #128	; 0x80
  403b6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403b6e:	81a3      	strh	r3, [r4, #12]
  403b70:	bf0c      	ite	eq
  403b72:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  403b76:	2640      	movne	r6, #64	; 0x40
  403b78:	2700      	movs	r7, #0
  403b7a:	4628      	mov	r0, r5
  403b7c:	4631      	mov	r1, r6
  403b7e:	f000 f843 	bl	403c08 <_malloc_r>
  403b82:	89a3      	ldrh	r3, [r4, #12]
  403b84:	b340      	cbz	r0, 403bd8 <__smakebuf_r+0xc0>
  403b86:	4a1a      	ldr	r2, [pc, #104]	; (403bf0 <__smakebuf_r+0xd8>)
  403b88:	63ea      	str	r2, [r5, #60]	; 0x3c
  403b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403b8e:	81a3      	strh	r3, [r4, #12]
  403b90:	6020      	str	r0, [r4, #0]
  403b92:	6120      	str	r0, [r4, #16]
  403b94:	6166      	str	r6, [r4, #20]
  403b96:	b99f      	cbnz	r7, 403bc0 <__smakebuf_r+0xa8>
  403b98:	b011      	add	sp, #68	; 0x44
  403b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b9c:	f101 0343 	add.w	r3, r1, #67	; 0x43
  403ba0:	2201      	movs	r2, #1
  403ba2:	600b      	str	r3, [r1, #0]
  403ba4:	610b      	str	r3, [r1, #16]
  403ba6:	614a      	str	r2, [r1, #20]
  403ba8:	4770      	bx	lr
  403baa:	4b12      	ldr	r3, [pc, #72]	; (403bf4 <__smakebuf_r+0xdc>)
  403bac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  403bae:	429a      	cmp	r2, r3
  403bb0:	d1d0      	bne.n	403b54 <__smakebuf_r+0x3c>
  403bb2:	89a3      	ldrh	r3, [r4, #12]
  403bb4:	f44f 6680 	mov.w	r6, #1024	; 0x400
  403bb8:	4333      	orrs	r3, r6
  403bba:	81a3      	strh	r3, [r4, #12]
  403bbc:	64e6      	str	r6, [r4, #76]	; 0x4c
  403bbe:	e7dc      	b.n	403b7a <__smakebuf_r+0x62>
  403bc0:	4628      	mov	r0, r5
  403bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403bc6:	f001 fc4d 	bl	405464 <_isatty_r>
  403bca:	2800      	cmp	r0, #0
  403bcc:	d0e4      	beq.n	403b98 <__smakebuf_r+0x80>
  403bce:	89a3      	ldrh	r3, [r4, #12]
  403bd0:	f043 0301 	orr.w	r3, r3, #1
  403bd4:	81a3      	strh	r3, [r4, #12]
  403bd6:	e7df      	b.n	403b98 <__smakebuf_r+0x80>
  403bd8:	059a      	lsls	r2, r3, #22
  403bda:	d4dd      	bmi.n	403b98 <__smakebuf_r+0x80>
  403bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403be0:	f043 0302 	orr.w	r3, r3, #2
  403be4:	2101      	movs	r1, #1
  403be6:	81a3      	strh	r3, [r4, #12]
  403be8:	6022      	str	r2, [r4, #0]
  403bea:	6122      	str	r2, [r4, #16]
  403bec:	6161      	str	r1, [r4, #20]
  403bee:	e7d3      	b.n	403b98 <__smakebuf_r+0x80>
  403bf0:	00403141 	.word	0x00403141
  403bf4:	00404a55 	.word	0x00404a55

00403bf8 <malloc>:
  403bf8:	4b02      	ldr	r3, [pc, #8]	; (403c04 <malloc+0xc>)
  403bfa:	4601      	mov	r1, r0
  403bfc:	6818      	ldr	r0, [r3, #0]
  403bfe:	f000 b803 	b.w	403c08 <_malloc_r>
  403c02:	bf00      	nop
  403c04:	200004c0 	.word	0x200004c0

00403c08 <_malloc_r>:
  403c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c0c:	f101 050b 	add.w	r5, r1, #11
  403c10:	2d16      	cmp	r5, #22
  403c12:	b083      	sub	sp, #12
  403c14:	4606      	mov	r6, r0
  403c16:	d927      	bls.n	403c68 <_malloc_r+0x60>
  403c18:	f035 0507 	bics.w	r5, r5, #7
  403c1c:	f100 80b6 	bmi.w	403d8c <_malloc_r+0x184>
  403c20:	42a9      	cmp	r1, r5
  403c22:	f200 80b3 	bhi.w	403d8c <_malloc_r+0x184>
  403c26:	f000 fc0d 	bl	404444 <__malloc_lock>
  403c2a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  403c2e:	d222      	bcs.n	403c76 <_malloc_r+0x6e>
  403c30:	4fc2      	ldr	r7, [pc, #776]	; (403f3c <_malloc_r+0x334>)
  403c32:	08e8      	lsrs	r0, r5, #3
  403c34:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  403c38:	68dc      	ldr	r4, [r3, #12]
  403c3a:	429c      	cmp	r4, r3
  403c3c:	f000 81c8 	beq.w	403fd0 <_malloc_r+0x3c8>
  403c40:	6863      	ldr	r3, [r4, #4]
  403c42:	68e1      	ldr	r1, [r4, #12]
  403c44:	68a5      	ldr	r5, [r4, #8]
  403c46:	f023 0303 	bic.w	r3, r3, #3
  403c4a:	4423      	add	r3, r4
  403c4c:	4630      	mov	r0, r6
  403c4e:	685a      	ldr	r2, [r3, #4]
  403c50:	60e9      	str	r1, [r5, #12]
  403c52:	f042 0201 	orr.w	r2, r2, #1
  403c56:	608d      	str	r5, [r1, #8]
  403c58:	605a      	str	r2, [r3, #4]
  403c5a:	f000 fbf5 	bl	404448 <__malloc_unlock>
  403c5e:	3408      	adds	r4, #8
  403c60:	4620      	mov	r0, r4
  403c62:	b003      	add	sp, #12
  403c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c68:	2910      	cmp	r1, #16
  403c6a:	f200 808f 	bhi.w	403d8c <_malloc_r+0x184>
  403c6e:	f000 fbe9 	bl	404444 <__malloc_lock>
  403c72:	2510      	movs	r5, #16
  403c74:	e7dc      	b.n	403c30 <_malloc_r+0x28>
  403c76:	0a68      	lsrs	r0, r5, #9
  403c78:	f000 808f 	beq.w	403d9a <_malloc_r+0x192>
  403c7c:	2804      	cmp	r0, #4
  403c7e:	f200 8154 	bhi.w	403f2a <_malloc_r+0x322>
  403c82:	09a8      	lsrs	r0, r5, #6
  403c84:	3038      	adds	r0, #56	; 0x38
  403c86:	0041      	lsls	r1, r0, #1
  403c88:	4fac      	ldr	r7, [pc, #688]	; (403f3c <_malloc_r+0x334>)
  403c8a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  403c8e:	68cc      	ldr	r4, [r1, #12]
  403c90:	42a1      	cmp	r1, r4
  403c92:	d106      	bne.n	403ca2 <_malloc_r+0x9a>
  403c94:	e00c      	b.n	403cb0 <_malloc_r+0xa8>
  403c96:	2a00      	cmp	r2, #0
  403c98:	f280 8082 	bge.w	403da0 <_malloc_r+0x198>
  403c9c:	68e4      	ldr	r4, [r4, #12]
  403c9e:	42a1      	cmp	r1, r4
  403ca0:	d006      	beq.n	403cb0 <_malloc_r+0xa8>
  403ca2:	6863      	ldr	r3, [r4, #4]
  403ca4:	f023 0303 	bic.w	r3, r3, #3
  403ca8:	1b5a      	subs	r2, r3, r5
  403caa:	2a0f      	cmp	r2, #15
  403cac:	ddf3      	ble.n	403c96 <_malloc_r+0x8e>
  403cae:	3801      	subs	r0, #1
  403cb0:	3001      	adds	r0, #1
  403cb2:	49a2      	ldr	r1, [pc, #648]	; (403f3c <_malloc_r+0x334>)
  403cb4:	693c      	ldr	r4, [r7, #16]
  403cb6:	f101 0e08 	add.w	lr, r1, #8
  403cba:	4574      	cmp	r4, lr
  403cbc:	f000 817d 	beq.w	403fba <_malloc_r+0x3b2>
  403cc0:	6863      	ldr	r3, [r4, #4]
  403cc2:	f023 0303 	bic.w	r3, r3, #3
  403cc6:	1b5a      	subs	r2, r3, r5
  403cc8:	2a0f      	cmp	r2, #15
  403cca:	f300 8163 	bgt.w	403f94 <_malloc_r+0x38c>
  403cce:	2a00      	cmp	r2, #0
  403cd0:	f8c1 e014 	str.w	lr, [r1, #20]
  403cd4:	f8c1 e010 	str.w	lr, [r1, #16]
  403cd8:	da73      	bge.n	403dc2 <_malloc_r+0x1ba>
  403cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403cde:	f080 8139 	bcs.w	403f54 <_malloc_r+0x34c>
  403ce2:	08db      	lsrs	r3, r3, #3
  403ce4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  403ce8:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  403cec:	684a      	ldr	r2, [r1, #4]
  403cee:	f8d8 9008 	ldr.w	r9, [r8, #8]
  403cf2:	f8c4 9008 	str.w	r9, [r4, #8]
  403cf6:	2301      	movs	r3, #1
  403cf8:	fa03 f30c 	lsl.w	r3, r3, ip
  403cfc:	4313      	orrs	r3, r2
  403cfe:	f8c4 800c 	str.w	r8, [r4, #12]
  403d02:	604b      	str	r3, [r1, #4]
  403d04:	f8c8 4008 	str.w	r4, [r8, #8]
  403d08:	f8c9 400c 	str.w	r4, [r9, #12]
  403d0c:	1082      	asrs	r2, r0, #2
  403d0e:	2401      	movs	r4, #1
  403d10:	4094      	lsls	r4, r2
  403d12:	429c      	cmp	r4, r3
  403d14:	d862      	bhi.n	403ddc <_malloc_r+0x1d4>
  403d16:	4223      	tst	r3, r4
  403d18:	d106      	bne.n	403d28 <_malloc_r+0x120>
  403d1a:	f020 0003 	bic.w	r0, r0, #3
  403d1e:	0064      	lsls	r4, r4, #1
  403d20:	4223      	tst	r3, r4
  403d22:	f100 0004 	add.w	r0, r0, #4
  403d26:	d0fa      	beq.n	403d1e <_malloc_r+0x116>
  403d28:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  403d2c:	46c4      	mov	ip, r8
  403d2e:	4681      	mov	r9, r0
  403d30:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403d34:	459c      	cmp	ip, r3
  403d36:	d107      	bne.n	403d48 <_malloc_r+0x140>
  403d38:	e141      	b.n	403fbe <_malloc_r+0x3b6>
  403d3a:	2900      	cmp	r1, #0
  403d3c:	f280 8151 	bge.w	403fe2 <_malloc_r+0x3da>
  403d40:	68db      	ldr	r3, [r3, #12]
  403d42:	459c      	cmp	ip, r3
  403d44:	f000 813b 	beq.w	403fbe <_malloc_r+0x3b6>
  403d48:	685a      	ldr	r2, [r3, #4]
  403d4a:	f022 0203 	bic.w	r2, r2, #3
  403d4e:	1b51      	subs	r1, r2, r5
  403d50:	290f      	cmp	r1, #15
  403d52:	ddf2      	ble.n	403d3a <_malloc_r+0x132>
  403d54:	461c      	mov	r4, r3
  403d56:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403d5a:	f854 8f08 	ldr.w	r8, [r4, #8]!
  403d5e:	195a      	adds	r2, r3, r5
  403d60:	f045 0901 	orr.w	r9, r5, #1
  403d64:	f041 0501 	orr.w	r5, r1, #1
  403d68:	f8c3 9004 	str.w	r9, [r3, #4]
  403d6c:	4630      	mov	r0, r6
  403d6e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403d72:	f8cc 8008 	str.w	r8, [ip, #8]
  403d76:	617a      	str	r2, [r7, #20]
  403d78:	613a      	str	r2, [r7, #16]
  403d7a:	f8c2 e00c 	str.w	lr, [r2, #12]
  403d7e:	f8c2 e008 	str.w	lr, [r2, #8]
  403d82:	6055      	str	r5, [r2, #4]
  403d84:	5051      	str	r1, [r2, r1]
  403d86:	f000 fb5f 	bl	404448 <__malloc_unlock>
  403d8a:	e769      	b.n	403c60 <_malloc_r+0x58>
  403d8c:	2400      	movs	r4, #0
  403d8e:	230c      	movs	r3, #12
  403d90:	4620      	mov	r0, r4
  403d92:	6033      	str	r3, [r6, #0]
  403d94:	b003      	add	sp, #12
  403d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d9a:	217e      	movs	r1, #126	; 0x7e
  403d9c:	203f      	movs	r0, #63	; 0x3f
  403d9e:	e773      	b.n	403c88 <_malloc_r+0x80>
  403da0:	4423      	add	r3, r4
  403da2:	68e1      	ldr	r1, [r4, #12]
  403da4:	685a      	ldr	r2, [r3, #4]
  403da6:	68a5      	ldr	r5, [r4, #8]
  403da8:	f042 0201 	orr.w	r2, r2, #1
  403dac:	60e9      	str	r1, [r5, #12]
  403dae:	4630      	mov	r0, r6
  403db0:	608d      	str	r5, [r1, #8]
  403db2:	605a      	str	r2, [r3, #4]
  403db4:	f000 fb48 	bl	404448 <__malloc_unlock>
  403db8:	3408      	adds	r4, #8
  403dba:	4620      	mov	r0, r4
  403dbc:	b003      	add	sp, #12
  403dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dc2:	4423      	add	r3, r4
  403dc4:	4630      	mov	r0, r6
  403dc6:	685a      	ldr	r2, [r3, #4]
  403dc8:	f042 0201 	orr.w	r2, r2, #1
  403dcc:	605a      	str	r2, [r3, #4]
  403dce:	f000 fb3b 	bl	404448 <__malloc_unlock>
  403dd2:	3408      	adds	r4, #8
  403dd4:	4620      	mov	r0, r4
  403dd6:	b003      	add	sp, #12
  403dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ddc:	68bc      	ldr	r4, [r7, #8]
  403dde:	6863      	ldr	r3, [r4, #4]
  403de0:	f023 0803 	bic.w	r8, r3, #3
  403de4:	4545      	cmp	r5, r8
  403de6:	d804      	bhi.n	403df2 <_malloc_r+0x1ea>
  403de8:	ebc5 0308 	rsb	r3, r5, r8
  403dec:	2b0f      	cmp	r3, #15
  403dee:	f300 808c 	bgt.w	403f0a <_malloc_r+0x302>
  403df2:	4b53      	ldr	r3, [pc, #332]	; (403f40 <_malloc_r+0x338>)
  403df4:	f8df a158 	ldr.w	sl, [pc, #344]	; 403f50 <_malloc_r+0x348>
  403df8:	681a      	ldr	r2, [r3, #0]
  403dfa:	f8da 3000 	ldr.w	r3, [sl]
  403dfe:	3301      	adds	r3, #1
  403e00:	442a      	add	r2, r5
  403e02:	eb04 0b08 	add.w	fp, r4, r8
  403e06:	f000 8150 	beq.w	4040aa <_malloc_r+0x4a2>
  403e0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  403e0e:	320f      	adds	r2, #15
  403e10:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  403e14:	f022 020f 	bic.w	r2, r2, #15
  403e18:	4611      	mov	r1, r2
  403e1a:	4630      	mov	r0, r6
  403e1c:	9201      	str	r2, [sp, #4]
  403e1e:	f000 fd9d 	bl	40495c <_sbrk_r>
  403e22:	f1b0 3fff 	cmp.w	r0, #4294967295
  403e26:	4681      	mov	r9, r0
  403e28:	9a01      	ldr	r2, [sp, #4]
  403e2a:	f000 8147 	beq.w	4040bc <_malloc_r+0x4b4>
  403e2e:	4583      	cmp	fp, r0
  403e30:	f200 80ee 	bhi.w	404010 <_malloc_r+0x408>
  403e34:	4b43      	ldr	r3, [pc, #268]	; (403f44 <_malloc_r+0x33c>)
  403e36:	6819      	ldr	r1, [r3, #0]
  403e38:	45cb      	cmp	fp, r9
  403e3a:	4411      	add	r1, r2
  403e3c:	6019      	str	r1, [r3, #0]
  403e3e:	f000 8142 	beq.w	4040c6 <_malloc_r+0x4be>
  403e42:	f8da 0000 	ldr.w	r0, [sl]
  403e46:	f8df e108 	ldr.w	lr, [pc, #264]	; 403f50 <_malloc_r+0x348>
  403e4a:	3001      	adds	r0, #1
  403e4c:	bf1b      	ittet	ne
  403e4e:	ebcb 0b09 	rsbne	fp, fp, r9
  403e52:	4459      	addne	r1, fp
  403e54:	f8ce 9000 	streq.w	r9, [lr]
  403e58:	6019      	strne	r1, [r3, #0]
  403e5a:	f019 0107 	ands.w	r1, r9, #7
  403e5e:	f000 8107 	beq.w	404070 <_malloc_r+0x468>
  403e62:	f1c1 0008 	rsb	r0, r1, #8
  403e66:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403e6a:	4481      	add	r9, r0
  403e6c:	3108      	adds	r1, #8
  403e6e:	444a      	add	r2, r9
  403e70:	f3c2 020b 	ubfx	r2, r2, #0, #12
  403e74:	ebc2 0a01 	rsb	sl, r2, r1
  403e78:	4651      	mov	r1, sl
  403e7a:	4630      	mov	r0, r6
  403e7c:	9301      	str	r3, [sp, #4]
  403e7e:	f000 fd6d 	bl	40495c <_sbrk_r>
  403e82:	1c43      	adds	r3, r0, #1
  403e84:	9b01      	ldr	r3, [sp, #4]
  403e86:	f000 812c 	beq.w	4040e2 <_malloc_r+0x4da>
  403e8a:	ebc9 0200 	rsb	r2, r9, r0
  403e8e:	4452      	add	r2, sl
  403e90:	f042 0201 	orr.w	r2, r2, #1
  403e94:	6819      	ldr	r1, [r3, #0]
  403e96:	f8c7 9008 	str.w	r9, [r7, #8]
  403e9a:	4451      	add	r1, sl
  403e9c:	42bc      	cmp	r4, r7
  403e9e:	f8c9 2004 	str.w	r2, [r9, #4]
  403ea2:	6019      	str	r1, [r3, #0]
  403ea4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 403f44 <_malloc_r+0x33c>
  403ea8:	d016      	beq.n	403ed8 <_malloc_r+0x2d0>
  403eaa:	f1b8 0f0f 	cmp.w	r8, #15
  403eae:	f240 80ee 	bls.w	40408e <_malloc_r+0x486>
  403eb2:	6862      	ldr	r2, [r4, #4]
  403eb4:	f1a8 030c 	sub.w	r3, r8, #12
  403eb8:	f023 0307 	bic.w	r3, r3, #7
  403ebc:	18e0      	adds	r0, r4, r3
  403ebe:	f002 0201 	and.w	r2, r2, #1
  403ec2:	f04f 0e05 	mov.w	lr, #5
  403ec6:	431a      	orrs	r2, r3
  403ec8:	2b0f      	cmp	r3, #15
  403eca:	6062      	str	r2, [r4, #4]
  403ecc:	f8c0 e004 	str.w	lr, [r0, #4]
  403ed0:	f8c0 e008 	str.w	lr, [r0, #8]
  403ed4:	f200 8109 	bhi.w	4040ea <_malloc_r+0x4e2>
  403ed8:	4b1b      	ldr	r3, [pc, #108]	; (403f48 <_malloc_r+0x340>)
  403eda:	68bc      	ldr	r4, [r7, #8]
  403edc:	681a      	ldr	r2, [r3, #0]
  403ede:	4291      	cmp	r1, r2
  403ee0:	bf88      	it	hi
  403ee2:	6019      	strhi	r1, [r3, #0]
  403ee4:	4b19      	ldr	r3, [pc, #100]	; (403f4c <_malloc_r+0x344>)
  403ee6:	681a      	ldr	r2, [r3, #0]
  403ee8:	4291      	cmp	r1, r2
  403eea:	6862      	ldr	r2, [r4, #4]
  403eec:	bf88      	it	hi
  403eee:	6019      	strhi	r1, [r3, #0]
  403ef0:	f022 0203 	bic.w	r2, r2, #3
  403ef4:	4295      	cmp	r5, r2
  403ef6:	eba2 0305 	sub.w	r3, r2, r5
  403efa:	d801      	bhi.n	403f00 <_malloc_r+0x2f8>
  403efc:	2b0f      	cmp	r3, #15
  403efe:	dc04      	bgt.n	403f0a <_malloc_r+0x302>
  403f00:	4630      	mov	r0, r6
  403f02:	f000 faa1 	bl	404448 <__malloc_unlock>
  403f06:	2400      	movs	r4, #0
  403f08:	e6aa      	b.n	403c60 <_malloc_r+0x58>
  403f0a:	1962      	adds	r2, r4, r5
  403f0c:	f043 0301 	orr.w	r3, r3, #1
  403f10:	f045 0501 	orr.w	r5, r5, #1
  403f14:	6065      	str	r5, [r4, #4]
  403f16:	4630      	mov	r0, r6
  403f18:	60ba      	str	r2, [r7, #8]
  403f1a:	6053      	str	r3, [r2, #4]
  403f1c:	f000 fa94 	bl	404448 <__malloc_unlock>
  403f20:	3408      	adds	r4, #8
  403f22:	4620      	mov	r0, r4
  403f24:	b003      	add	sp, #12
  403f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f2a:	2814      	cmp	r0, #20
  403f2c:	d968      	bls.n	404000 <_malloc_r+0x3f8>
  403f2e:	2854      	cmp	r0, #84	; 0x54
  403f30:	f200 8097 	bhi.w	404062 <_malloc_r+0x45a>
  403f34:	0b28      	lsrs	r0, r5, #12
  403f36:	306e      	adds	r0, #110	; 0x6e
  403f38:	0041      	lsls	r1, r0, #1
  403f3a:	e6a5      	b.n	403c88 <_malloc_r+0x80>
  403f3c:	200004ec 	.word	0x200004ec
  403f40:	200009e8 	.word	0x200009e8
  403f44:	200009ec 	.word	0x200009ec
  403f48:	200009e4 	.word	0x200009e4
  403f4c:	200009e0 	.word	0x200009e0
  403f50:	200008f8 	.word	0x200008f8
  403f54:	0a5a      	lsrs	r2, r3, #9
  403f56:	2a04      	cmp	r2, #4
  403f58:	d955      	bls.n	404006 <_malloc_r+0x3fe>
  403f5a:	2a14      	cmp	r2, #20
  403f5c:	f200 80a7 	bhi.w	4040ae <_malloc_r+0x4a6>
  403f60:	325b      	adds	r2, #91	; 0x5b
  403f62:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  403f66:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  403f6a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 404128 <_malloc_r+0x520>
  403f6e:	f8dc 1008 	ldr.w	r1, [ip, #8]
  403f72:	4561      	cmp	r1, ip
  403f74:	d07f      	beq.n	404076 <_malloc_r+0x46e>
  403f76:	684a      	ldr	r2, [r1, #4]
  403f78:	f022 0203 	bic.w	r2, r2, #3
  403f7c:	4293      	cmp	r3, r2
  403f7e:	d202      	bcs.n	403f86 <_malloc_r+0x37e>
  403f80:	6889      	ldr	r1, [r1, #8]
  403f82:	458c      	cmp	ip, r1
  403f84:	d1f7      	bne.n	403f76 <_malloc_r+0x36e>
  403f86:	68ca      	ldr	r2, [r1, #12]
  403f88:	687b      	ldr	r3, [r7, #4]
  403f8a:	60e2      	str	r2, [r4, #12]
  403f8c:	60a1      	str	r1, [r4, #8]
  403f8e:	6094      	str	r4, [r2, #8]
  403f90:	60cc      	str	r4, [r1, #12]
  403f92:	e6bb      	b.n	403d0c <_malloc_r+0x104>
  403f94:	1963      	adds	r3, r4, r5
  403f96:	f042 0701 	orr.w	r7, r2, #1
  403f9a:	f045 0501 	orr.w	r5, r5, #1
  403f9e:	6065      	str	r5, [r4, #4]
  403fa0:	4630      	mov	r0, r6
  403fa2:	614b      	str	r3, [r1, #20]
  403fa4:	610b      	str	r3, [r1, #16]
  403fa6:	f8c3 e00c 	str.w	lr, [r3, #12]
  403faa:	f8c3 e008 	str.w	lr, [r3, #8]
  403fae:	605f      	str	r7, [r3, #4]
  403fb0:	509a      	str	r2, [r3, r2]
  403fb2:	3408      	adds	r4, #8
  403fb4:	f000 fa48 	bl	404448 <__malloc_unlock>
  403fb8:	e652      	b.n	403c60 <_malloc_r+0x58>
  403fba:	684b      	ldr	r3, [r1, #4]
  403fbc:	e6a6      	b.n	403d0c <_malloc_r+0x104>
  403fbe:	f109 0901 	add.w	r9, r9, #1
  403fc2:	f019 0f03 	tst.w	r9, #3
  403fc6:	f10c 0c08 	add.w	ip, ip, #8
  403fca:	f47f aeb1 	bne.w	403d30 <_malloc_r+0x128>
  403fce:	e02c      	b.n	40402a <_malloc_r+0x422>
  403fd0:	f104 0308 	add.w	r3, r4, #8
  403fd4:	6964      	ldr	r4, [r4, #20]
  403fd6:	42a3      	cmp	r3, r4
  403fd8:	bf08      	it	eq
  403fda:	3002      	addeq	r0, #2
  403fdc:	f43f ae69 	beq.w	403cb2 <_malloc_r+0xaa>
  403fe0:	e62e      	b.n	403c40 <_malloc_r+0x38>
  403fe2:	441a      	add	r2, r3
  403fe4:	461c      	mov	r4, r3
  403fe6:	6851      	ldr	r1, [r2, #4]
  403fe8:	68db      	ldr	r3, [r3, #12]
  403fea:	f854 5f08 	ldr.w	r5, [r4, #8]!
  403fee:	f041 0101 	orr.w	r1, r1, #1
  403ff2:	6051      	str	r1, [r2, #4]
  403ff4:	4630      	mov	r0, r6
  403ff6:	60eb      	str	r3, [r5, #12]
  403ff8:	609d      	str	r5, [r3, #8]
  403ffa:	f000 fa25 	bl	404448 <__malloc_unlock>
  403ffe:	e62f      	b.n	403c60 <_malloc_r+0x58>
  404000:	305b      	adds	r0, #91	; 0x5b
  404002:	0041      	lsls	r1, r0, #1
  404004:	e640      	b.n	403c88 <_malloc_r+0x80>
  404006:	099a      	lsrs	r2, r3, #6
  404008:	3238      	adds	r2, #56	; 0x38
  40400a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40400e:	e7aa      	b.n	403f66 <_malloc_r+0x35e>
  404010:	42bc      	cmp	r4, r7
  404012:	4b45      	ldr	r3, [pc, #276]	; (404128 <_malloc_r+0x520>)
  404014:	f43f af0e 	beq.w	403e34 <_malloc_r+0x22c>
  404018:	689c      	ldr	r4, [r3, #8]
  40401a:	6862      	ldr	r2, [r4, #4]
  40401c:	f022 0203 	bic.w	r2, r2, #3
  404020:	e768      	b.n	403ef4 <_malloc_r+0x2ec>
  404022:	f8d8 8000 	ldr.w	r8, [r8]
  404026:	4598      	cmp	r8, r3
  404028:	d17c      	bne.n	404124 <_malloc_r+0x51c>
  40402a:	f010 0f03 	tst.w	r0, #3
  40402e:	f1a8 0308 	sub.w	r3, r8, #8
  404032:	f100 30ff 	add.w	r0, r0, #4294967295
  404036:	d1f4      	bne.n	404022 <_malloc_r+0x41a>
  404038:	687b      	ldr	r3, [r7, #4]
  40403a:	ea23 0304 	bic.w	r3, r3, r4
  40403e:	607b      	str	r3, [r7, #4]
  404040:	0064      	lsls	r4, r4, #1
  404042:	429c      	cmp	r4, r3
  404044:	f63f aeca 	bhi.w	403ddc <_malloc_r+0x1d4>
  404048:	2c00      	cmp	r4, #0
  40404a:	f43f aec7 	beq.w	403ddc <_malloc_r+0x1d4>
  40404e:	4223      	tst	r3, r4
  404050:	4648      	mov	r0, r9
  404052:	f47f ae69 	bne.w	403d28 <_malloc_r+0x120>
  404056:	0064      	lsls	r4, r4, #1
  404058:	4223      	tst	r3, r4
  40405a:	f100 0004 	add.w	r0, r0, #4
  40405e:	d0fa      	beq.n	404056 <_malloc_r+0x44e>
  404060:	e662      	b.n	403d28 <_malloc_r+0x120>
  404062:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  404066:	d818      	bhi.n	40409a <_malloc_r+0x492>
  404068:	0be8      	lsrs	r0, r5, #15
  40406a:	3077      	adds	r0, #119	; 0x77
  40406c:	0041      	lsls	r1, r0, #1
  40406e:	e60b      	b.n	403c88 <_malloc_r+0x80>
  404070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404074:	e6fb      	b.n	403e6e <_malloc_r+0x266>
  404076:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40407a:	1092      	asrs	r2, r2, #2
  40407c:	f04f 0c01 	mov.w	ip, #1
  404080:	fa0c f202 	lsl.w	r2, ip, r2
  404084:	4313      	orrs	r3, r2
  404086:	f8c8 3004 	str.w	r3, [r8, #4]
  40408a:	460a      	mov	r2, r1
  40408c:	e77d      	b.n	403f8a <_malloc_r+0x382>
  40408e:	2301      	movs	r3, #1
  404090:	f8c9 3004 	str.w	r3, [r9, #4]
  404094:	464c      	mov	r4, r9
  404096:	2200      	movs	r2, #0
  404098:	e72c      	b.n	403ef4 <_malloc_r+0x2ec>
  40409a:	f240 5354 	movw	r3, #1364	; 0x554
  40409e:	4298      	cmp	r0, r3
  4040a0:	d81c      	bhi.n	4040dc <_malloc_r+0x4d4>
  4040a2:	0ca8      	lsrs	r0, r5, #18
  4040a4:	307c      	adds	r0, #124	; 0x7c
  4040a6:	0041      	lsls	r1, r0, #1
  4040a8:	e5ee      	b.n	403c88 <_malloc_r+0x80>
  4040aa:	3210      	adds	r2, #16
  4040ac:	e6b4      	b.n	403e18 <_malloc_r+0x210>
  4040ae:	2a54      	cmp	r2, #84	; 0x54
  4040b0:	d823      	bhi.n	4040fa <_malloc_r+0x4f2>
  4040b2:	0b1a      	lsrs	r2, r3, #12
  4040b4:	326e      	adds	r2, #110	; 0x6e
  4040b6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4040ba:	e754      	b.n	403f66 <_malloc_r+0x35e>
  4040bc:	68bc      	ldr	r4, [r7, #8]
  4040be:	6862      	ldr	r2, [r4, #4]
  4040c0:	f022 0203 	bic.w	r2, r2, #3
  4040c4:	e716      	b.n	403ef4 <_malloc_r+0x2ec>
  4040c6:	f3cb 000b 	ubfx	r0, fp, #0, #12
  4040ca:	2800      	cmp	r0, #0
  4040cc:	f47f aeb9 	bne.w	403e42 <_malloc_r+0x23a>
  4040d0:	4442      	add	r2, r8
  4040d2:	68bb      	ldr	r3, [r7, #8]
  4040d4:	f042 0201 	orr.w	r2, r2, #1
  4040d8:	605a      	str	r2, [r3, #4]
  4040da:	e6fd      	b.n	403ed8 <_malloc_r+0x2d0>
  4040dc:	21fc      	movs	r1, #252	; 0xfc
  4040de:	207e      	movs	r0, #126	; 0x7e
  4040e0:	e5d2      	b.n	403c88 <_malloc_r+0x80>
  4040e2:	2201      	movs	r2, #1
  4040e4:	f04f 0a00 	mov.w	sl, #0
  4040e8:	e6d4      	b.n	403e94 <_malloc_r+0x28c>
  4040ea:	f104 0108 	add.w	r1, r4, #8
  4040ee:	4630      	mov	r0, r6
  4040f0:	f7ff fa46 	bl	403580 <_free_r>
  4040f4:	f8da 1000 	ldr.w	r1, [sl]
  4040f8:	e6ee      	b.n	403ed8 <_malloc_r+0x2d0>
  4040fa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4040fe:	d804      	bhi.n	40410a <_malloc_r+0x502>
  404100:	0bda      	lsrs	r2, r3, #15
  404102:	3277      	adds	r2, #119	; 0x77
  404104:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  404108:	e72d      	b.n	403f66 <_malloc_r+0x35e>
  40410a:	f240 5154 	movw	r1, #1364	; 0x554
  40410e:	428a      	cmp	r2, r1
  404110:	d804      	bhi.n	40411c <_malloc_r+0x514>
  404112:	0c9a      	lsrs	r2, r3, #18
  404114:	327c      	adds	r2, #124	; 0x7c
  404116:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40411a:	e724      	b.n	403f66 <_malloc_r+0x35e>
  40411c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  404120:	227e      	movs	r2, #126	; 0x7e
  404122:	e720      	b.n	403f66 <_malloc_r+0x35e>
  404124:	687b      	ldr	r3, [r7, #4]
  404126:	e78b      	b.n	404040 <_malloc_r+0x438>
  404128:	200004ec 	.word	0x200004ec

0040412c <_mbrtowc_r>:
  40412c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404130:	b083      	sub	sp, #12
  404132:	4605      	mov	r5, r0
  404134:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404136:	4614      	mov	r4, r2
  404138:	b1b2      	cbz	r2, 404168 <_mbrtowc_r+0x3c>
  40413a:	461f      	mov	r7, r3
  40413c:	4b10      	ldr	r3, [pc, #64]	; (404180 <_mbrtowc_r+0x54>)
  40413e:	4688      	mov	r8, r1
  404140:	f8d3 9000 	ldr.w	r9, [r3]
  404144:	f7ff fcde 	bl	403b04 <__locale_charset>
  404148:	4641      	mov	r1, r8
  40414a:	e88d 0041 	stmia.w	sp, {r0, r6}
  40414e:	4622      	mov	r2, r4
  404150:	463b      	mov	r3, r7
  404152:	4628      	mov	r0, r5
  404154:	47c8      	blx	r9
  404156:	1c43      	adds	r3, r0, #1
  404158:	d103      	bne.n	404162 <_mbrtowc_r+0x36>
  40415a:	2200      	movs	r2, #0
  40415c:	238a      	movs	r3, #138	; 0x8a
  40415e:	6032      	str	r2, [r6, #0]
  404160:	602b      	str	r3, [r5, #0]
  404162:	b003      	add	sp, #12
  404164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404168:	4b05      	ldr	r3, [pc, #20]	; (404180 <_mbrtowc_r+0x54>)
  40416a:	681f      	ldr	r7, [r3, #0]
  40416c:	f7ff fcca 	bl	403b04 <__locale_charset>
  404170:	4621      	mov	r1, r4
  404172:	e88d 0041 	stmia.w	sp, {r0, r6}
  404176:	4a03      	ldr	r2, [pc, #12]	; (404184 <_mbrtowc_r+0x58>)
  404178:	4628      	mov	r0, r5
  40417a:	2301      	movs	r3, #1
  40417c:	47b8      	blx	r7
  40417e:	e7ea      	b.n	404156 <_mbrtowc_r+0x2a>
  404180:	200008fc 	.word	0x200008fc
  404184:	00405e24 	.word	0x00405e24

00404188 <__ascii_mbtowc>:
  404188:	b082      	sub	sp, #8
  40418a:	b149      	cbz	r1, 4041a0 <__ascii_mbtowc+0x18>
  40418c:	b15a      	cbz	r2, 4041a6 <__ascii_mbtowc+0x1e>
  40418e:	b16b      	cbz	r3, 4041ac <__ascii_mbtowc+0x24>
  404190:	7813      	ldrb	r3, [r2, #0]
  404192:	600b      	str	r3, [r1, #0]
  404194:	7812      	ldrb	r2, [r2, #0]
  404196:	1c10      	adds	r0, r2, #0
  404198:	bf18      	it	ne
  40419a:	2001      	movne	r0, #1
  40419c:	b002      	add	sp, #8
  40419e:	4770      	bx	lr
  4041a0:	a901      	add	r1, sp, #4
  4041a2:	2a00      	cmp	r2, #0
  4041a4:	d1f3      	bne.n	40418e <__ascii_mbtowc+0x6>
  4041a6:	4610      	mov	r0, r2
  4041a8:	b002      	add	sp, #8
  4041aa:	4770      	bx	lr
  4041ac:	f06f 0001 	mvn.w	r0, #1
  4041b0:	e7f4      	b.n	40419c <__ascii_mbtowc+0x14>
  4041b2:	bf00      	nop

004041b4 <memchr>:
  4041b4:	0783      	lsls	r3, r0, #30
  4041b6:	b470      	push	{r4, r5, r6}
  4041b8:	b2c9      	uxtb	r1, r1
  4041ba:	d040      	beq.n	40423e <memchr+0x8a>
  4041bc:	1e54      	subs	r4, r2, #1
  4041be:	2a00      	cmp	r2, #0
  4041c0:	d03f      	beq.n	404242 <memchr+0x8e>
  4041c2:	7803      	ldrb	r3, [r0, #0]
  4041c4:	428b      	cmp	r3, r1
  4041c6:	bf18      	it	ne
  4041c8:	1c43      	addne	r3, r0, #1
  4041ca:	d106      	bne.n	4041da <memchr+0x26>
  4041cc:	e01d      	b.n	40420a <memchr+0x56>
  4041ce:	b1f4      	cbz	r4, 40420e <memchr+0x5a>
  4041d0:	7802      	ldrb	r2, [r0, #0]
  4041d2:	428a      	cmp	r2, r1
  4041d4:	f104 34ff 	add.w	r4, r4, #4294967295
  4041d8:	d017      	beq.n	40420a <memchr+0x56>
  4041da:	f013 0f03 	tst.w	r3, #3
  4041de:	4618      	mov	r0, r3
  4041e0:	f103 0301 	add.w	r3, r3, #1
  4041e4:	d1f3      	bne.n	4041ce <memchr+0x1a>
  4041e6:	2c03      	cmp	r4, #3
  4041e8:	d814      	bhi.n	404214 <memchr+0x60>
  4041ea:	b184      	cbz	r4, 40420e <memchr+0x5a>
  4041ec:	7803      	ldrb	r3, [r0, #0]
  4041ee:	428b      	cmp	r3, r1
  4041f0:	d00b      	beq.n	40420a <memchr+0x56>
  4041f2:	1905      	adds	r5, r0, r4
  4041f4:	1c43      	adds	r3, r0, #1
  4041f6:	e002      	b.n	4041fe <memchr+0x4a>
  4041f8:	7802      	ldrb	r2, [r0, #0]
  4041fa:	428a      	cmp	r2, r1
  4041fc:	d005      	beq.n	40420a <memchr+0x56>
  4041fe:	42ab      	cmp	r3, r5
  404200:	4618      	mov	r0, r3
  404202:	f103 0301 	add.w	r3, r3, #1
  404206:	d1f7      	bne.n	4041f8 <memchr+0x44>
  404208:	2000      	movs	r0, #0
  40420a:	bc70      	pop	{r4, r5, r6}
  40420c:	4770      	bx	lr
  40420e:	4620      	mov	r0, r4
  404210:	bc70      	pop	{r4, r5, r6}
  404212:	4770      	bx	lr
  404214:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  404218:	4602      	mov	r2, r0
  40421a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40421e:	4610      	mov	r0, r2
  404220:	3204      	adds	r2, #4
  404222:	6803      	ldr	r3, [r0, #0]
  404224:	4073      	eors	r3, r6
  404226:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40422a:	ea25 0303 	bic.w	r3, r5, r3
  40422e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  404232:	d1da      	bne.n	4041ea <memchr+0x36>
  404234:	3c04      	subs	r4, #4
  404236:	2c03      	cmp	r4, #3
  404238:	4610      	mov	r0, r2
  40423a:	d8f0      	bhi.n	40421e <memchr+0x6a>
  40423c:	e7d5      	b.n	4041ea <memchr+0x36>
  40423e:	4614      	mov	r4, r2
  404240:	e7d1      	b.n	4041e6 <memchr+0x32>
  404242:	4610      	mov	r0, r2
  404244:	e7e1      	b.n	40420a <memchr+0x56>
  404246:	bf00      	nop

00404248 <memcpy>:
  404248:	4684      	mov	ip, r0
  40424a:	ea41 0300 	orr.w	r3, r1, r0
  40424e:	f013 0303 	ands.w	r3, r3, #3
  404252:	d16d      	bne.n	404330 <memcpy+0xe8>
  404254:	3a40      	subs	r2, #64	; 0x40
  404256:	d341      	bcc.n	4042dc <memcpy+0x94>
  404258:	f851 3b04 	ldr.w	r3, [r1], #4
  40425c:	f840 3b04 	str.w	r3, [r0], #4
  404260:	f851 3b04 	ldr.w	r3, [r1], #4
  404264:	f840 3b04 	str.w	r3, [r0], #4
  404268:	f851 3b04 	ldr.w	r3, [r1], #4
  40426c:	f840 3b04 	str.w	r3, [r0], #4
  404270:	f851 3b04 	ldr.w	r3, [r1], #4
  404274:	f840 3b04 	str.w	r3, [r0], #4
  404278:	f851 3b04 	ldr.w	r3, [r1], #4
  40427c:	f840 3b04 	str.w	r3, [r0], #4
  404280:	f851 3b04 	ldr.w	r3, [r1], #4
  404284:	f840 3b04 	str.w	r3, [r0], #4
  404288:	f851 3b04 	ldr.w	r3, [r1], #4
  40428c:	f840 3b04 	str.w	r3, [r0], #4
  404290:	f851 3b04 	ldr.w	r3, [r1], #4
  404294:	f840 3b04 	str.w	r3, [r0], #4
  404298:	f851 3b04 	ldr.w	r3, [r1], #4
  40429c:	f840 3b04 	str.w	r3, [r0], #4
  4042a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042a4:	f840 3b04 	str.w	r3, [r0], #4
  4042a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042ac:	f840 3b04 	str.w	r3, [r0], #4
  4042b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042b4:	f840 3b04 	str.w	r3, [r0], #4
  4042b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042bc:	f840 3b04 	str.w	r3, [r0], #4
  4042c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042c4:	f840 3b04 	str.w	r3, [r0], #4
  4042c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042cc:	f840 3b04 	str.w	r3, [r0], #4
  4042d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042d4:	f840 3b04 	str.w	r3, [r0], #4
  4042d8:	3a40      	subs	r2, #64	; 0x40
  4042da:	d2bd      	bcs.n	404258 <memcpy+0x10>
  4042dc:	3230      	adds	r2, #48	; 0x30
  4042de:	d311      	bcc.n	404304 <memcpy+0xbc>
  4042e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042e4:	f840 3b04 	str.w	r3, [r0], #4
  4042e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042ec:	f840 3b04 	str.w	r3, [r0], #4
  4042f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042f4:	f840 3b04 	str.w	r3, [r0], #4
  4042f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042fc:	f840 3b04 	str.w	r3, [r0], #4
  404300:	3a10      	subs	r2, #16
  404302:	d2ed      	bcs.n	4042e0 <memcpy+0x98>
  404304:	320c      	adds	r2, #12
  404306:	d305      	bcc.n	404314 <memcpy+0xcc>
  404308:	f851 3b04 	ldr.w	r3, [r1], #4
  40430c:	f840 3b04 	str.w	r3, [r0], #4
  404310:	3a04      	subs	r2, #4
  404312:	d2f9      	bcs.n	404308 <memcpy+0xc0>
  404314:	3204      	adds	r2, #4
  404316:	d008      	beq.n	40432a <memcpy+0xe2>
  404318:	07d2      	lsls	r2, r2, #31
  40431a:	bf1c      	itt	ne
  40431c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404320:	f800 3b01 	strbne.w	r3, [r0], #1
  404324:	d301      	bcc.n	40432a <memcpy+0xe2>
  404326:	880b      	ldrh	r3, [r1, #0]
  404328:	8003      	strh	r3, [r0, #0]
  40432a:	4660      	mov	r0, ip
  40432c:	4770      	bx	lr
  40432e:	bf00      	nop
  404330:	2a08      	cmp	r2, #8
  404332:	d313      	bcc.n	40435c <memcpy+0x114>
  404334:	078b      	lsls	r3, r1, #30
  404336:	d08d      	beq.n	404254 <memcpy+0xc>
  404338:	f010 0303 	ands.w	r3, r0, #3
  40433c:	d08a      	beq.n	404254 <memcpy+0xc>
  40433e:	f1c3 0304 	rsb	r3, r3, #4
  404342:	1ad2      	subs	r2, r2, r3
  404344:	07db      	lsls	r3, r3, #31
  404346:	bf1c      	itt	ne
  404348:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40434c:	f800 3b01 	strbne.w	r3, [r0], #1
  404350:	d380      	bcc.n	404254 <memcpy+0xc>
  404352:	f831 3b02 	ldrh.w	r3, [r1], #2
  404356:	f820 3b02 	strh.w	r3, [r0], #2
  40435a:	e77b      	b.n	404254 <memcpy+0xc>
  40435c:	3a04      	subs	r2, #4
  40435e:	d3d9      	bcc.n	404314 <memcpy+0xcc>
  404360:	3a01      	subs	r2, #1
  404362:	f811 3b01 	ldrb.w	r3, [r1], #1
  404366:	f800 3b01 	strb.w	r3, [r0], #1
  40436a:	d2f9      	bcs.n	404360 <memcpy+0x118>
  40436c:	780b      	ldrb	r3, [r1, #0]
  40436e:	7003      	strb	r3, [r0, #0]
  404370:	784b      	ldrb	r3, [r1, #1]
  404372:	7043      	strb	r3, [r0, #1]
  404374:	788b      	ldrb	r3, [r1, #2]
  404376:	7083      	strb	r3, [r0, #2]
  404378:	4660      	mov	r0, ip
  40437a:	4770      	bx	lr

0040437c <memmove>:
  40437c:	4288      	cmp	r0, r1
  40437e:	b5f0      	push	{r4, r5, r6, r7, lr}
  404380:	d90d      	bls.n	40439e <memmove+0x22>
  404382:	188b      	adds	r3, r1, r2
  404384:	4298      	cmp	r0, r3
  404386:	d20a      	bcs.n	40439e <memmove+0x22>
  404388:	1881      	adds	r1, r0, r2
  40438a:	2a00      	cmp	r2, #0
  40438c:	d054      	beq.n	404438 <memmove+0xbc>
  40438e:	1a9a      	subs	r2, r3, r2
  404390:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404394:	f801 4d01 	strb.w	r4, [r1, #-1]!
  404398:	4293      	cmp	r3, r2
  40439a:	d1f9      	bne.n	404390 <memmove+0x14>
  40439c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40439e:	2a0f      	cmp	r2, #15
  4043a0:	d948      	bls.n	404434 <memmove+0xb8>
  4043a2:	ea40 0301 	orr.w	r3, r0, r1
  4043a6:	079b      	lsls	r3, r3, #30
  4043a8:	d147      	bne.n	40443a <memmove+0xbe>
  4043aa:	f100 0410 	add.w	r4, r0, #16
  4043ae:	f101 0310 	add.w	r3, r1, #16
  4043b2:	4615      	mov	r5, r2
  4043b4:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4043b8:	f844 6c10 	str.w	r6, [r4, #-16]
  4043bc:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4043c0:	f844 6c0c 	str.w	r6, [r4, #-12]
  4043c4:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4043c8:	f844 6c08 	str.w	r6, [r4, #-8]
  4043cc:	3d10      	subs	r5, #16
  4043ce:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4043d2:	f844 6c04 	str.w	r6, [r4, #-4]
  4043d6:	2d0f      	cmp	r5, #15
  4043d8:	f103 0310 	add.w	r3, r3, #16
  4043dc:	f104 0410 	add.w	r4, r4, #16
  4043e0:	d8e8      	bhi.n	4043b4 <memmove+0x38>
  4043e2:	f1a2 0310 	sub.w	r3, r2, #16
  4043e6:	f023 030f 	bic.w	r3, r3, #15
  4043ea:	f002 0e0f 	and.w	lr, r2, #15
  4043ee:	3310      	adds	r3, #16
  4043f0:	f1be 0f03 	cmp.w	lr, #3
  4043f4:	4419      	add	r1, r3
  4043f6:	4403      	add	r3, r0
  4043f8:	d921      	bls.n	40443e <memmove+0xc2>
  4043fa:	1f1e      	subs	r6, r3, #4
  4043fc:	460d      	mov	r5, r1
  4043fe:	4674      	mov	r4, lr
  404400:	3c04      	subs	r4, #4
  404402:	f855 7b04 	ldr.w	r7, [r5], #4
  404406:	f846 7f04 	str.w	r7, [r6, #4]!
  40440a:	2c03      	cmp	r4, #3
  40440c:	d8f8      	bhi.n	404400 <memmove+0x84>
  40440e:	f1ae 0404 	sub.w	r4, lr, #4
  404412:	f024 0403 	bic.w	r4, r4, #3
  404416:	3404      	adds	r4, #4
  404418:	4423      	add	r3, r4
  40441a:	4421      	add	r1, r4
  40441c:	f002 0203 	and.w	r2, r2, #3
  404420:	b152      	cbz	r2, 404438 <memmove+0xbc>
  404422:	3b01      	subs	r3, #1
  404424:	440a      	add	r2, r1
  404426:	f811 4b01 	ldrb.w	r4, [r1], #1
  40442a:	f803 4f01 	strb.w	r4, [r3, #1]!
  40442e:	4291      	cmp	r1, r2
  404430:	d1f9      	bne.n	404426 <memmove+0xaa>
  404432:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404434:	4603      	mov	r3, r0
  404436:	e7f3      	b.n	404420 <memmove+0xa4>
  404438:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40443a:	4603      	mov	r3, r0
  40443c:	e7f1      	b.n	404422 <memmove+0xa6>
  40443e:	4672      	mov	r2, lr
  404440:	e7ee      	b.n	404420 <memmove+0xa4>
  404442:	bf00      	nop

00404444 <__malloc_lock>:
  404444:	4770      	bx	lr
  404446:	bf00      	nop

00404448 <__malloc_unlock>:
  404448:	4770      	bx	lr
  40444a:	bf00      	nop

0040444c <_realloc_r>:
  40444c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404450:	4617      	mov	r7, r2
  404452:	b083      	sub	sp, #12
  404454:	460e      	mov	r6, r1
  404456:	2900      	cmp	r1, #0
  404458:	f000 80e7 	beq.w	40462a <_realloc_r+0x1de>
  40445c:	4681      	mov	r9, r0
  40445e:	f107 050b 	add.w	r5, r7, #11
  404462:	f7ff ffef 	bl	404444 <__malloc_lock>
  404466:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40446a:	2d16      	cmp	r5, #22
  40446c:	f023 0403 	bic.w	r4, r3, #3
  404470:	f1a6 0808 	sub.w	r8, r6, #8
  404474:	d84c      	bhi.n	404510 <_realloc_r+0xc4>
  404476:	2210      	movs	r2, #16
  404478:	4615      	mov	r5, r2
  40447a:	42af      	cmp	r7, r5
  40447c:	d84d      	bhi.n	40451a <_realloc_r+0xce>
  40447e:	4294      	cmp	r4, r2
  404480:	f280 8084 	bge.w	40458c <_realloc_r+0x140>
  404484:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 404834 <_realloc_r+0x3e8>
  404488:	f8db 0008 	ldr.w	r0, [fp, #8]
  40448c:	eb08 0104 	add.w	r1, r8, r4
  404490:	4288      	cmp	r0, r1
  404492:	f000 80d6 	beq.w	404642 <_realloc_r+0x1f6>
  404496:	6848      	ldr	r0, [r1, #4]
  404498:	f020 0e01 	bic.w	lr, r0, #1
  40449c:	448e      	add	lr, r1
  40449e:	f8de e004 	ldr.w	lr, [lr, #4]
  4044a2:	f01e 0f01 	tst.w	lr, #1
  4044a6:	d13f      	bne.n	404528 <_realloc_r+0xdc>
  4044a8:	f020 0003 	bic.w	r0, r0, #3
  4044ac:	4420      	add	r0, r4
  4044ae:	4290      	cmp	r0, r2
  4044b0:	f280 80c1 	bge.w	404636 <_realloc_r+0x1ea>
  4044b4:	07db      	lsls	r3, r3, #31
  4044b6:	f100 808f 	bmi.w	4045d8 <_realloc_r+0x18c>
  4044ba:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4044be:	ebc3 0a08 	rsb	sl, r3, r8
  4044c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4044c6:	f023 0303 	bic.w	r3, r3, #3
  4044ca:	eb00 0e03 	add.w	lr, r0, r3
  4044ce:	4596      	cmp	lr, r2
  4044d0:	db34      	blt.n	40453c <_realloc_r+0xf0>
  4044d2:	68cb      	ldr	r3, [r1, #12]
  4044d4:	688a      	ldr	r2, [r1, #8]
  4044d6:	4657      	mov	r7, sl
  4044d8:	60d3      	str	r3, [r2, #12]
  4044da:	609a      	str	r2, [r3, #8]
  4044dc:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4044e0:	f8da 300c 	ldr.w	r3, [sl, #12]
  4044e4:	60cb      	str	r3, [r1, #12]
  4044e6:	1f22      	subs	r2, r4, #4
  4044e8:	2a24      	cmp	r2, #36	; 0x24
  4044ea:	6099      	str	r1, [r3, #8]
  4044ec:	f200 8136 	bhi.w	40475c <_realloc_r+0x310>
  4044f0:	2a13      	cmp	r2, #19
  4044f2:	f240 80fd 	bls.w	4046f0 <_realloc_r+0x2a4>
  4044f6:	6833      	ldr	r3, [r6, #0]
  4044f8:	f8ca 3008 	str.w	r3, [sl, #8]
  4044fc:	6873      	ldr	r3, [r6, #4]
  4044fe:	f8ca 300c 	str.w	r3, [sl, #12]
  404502:	2a1b      	cmp	r2, #27
  404504:	f200 8140 	bhi.w	404788 <_realloc_r+0x33c>
  404508:	3608      	adds	r6, #8
  40450a:	f10a 0310 	add.w	r3, sl, #16
  40450e:	e0f0      	b.n	4046f2 <_realloc_r+0x2a6>
  404510:	f025 0507 	bic.w	r5, r5, #7
  404514:	2d00      	cmp	r5, #0
  404516:	462a      	mov	r2, r5
  404518:	daaf      	bge.n	40447a <_realloc_r+0x2e>
  40451a:	230c      	movs	r3, #12
  40451c:	2000      	movs	r0, #0
  40451e:	f8c9 3000 	str.w	r3, [r9]
  404522:	b003      	add	sp, #12
  404524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404528:	07d9      	lsls	r1, r3, #31
  40452a:	d455      	bmi.n	4045d8 <_realloc_r+0x18c>
  40452c:	f856 3c08 	ldr.w	r3, [r6, #-8]
  404530:	ebc3 0a08 	rsb	sl, r3, r8
  404534:	f8da 3004 	ldr.w	r3, [sl, #4]
  404538:	f023 0303 	bic.w	r3, r3, #3
  40453c:	4423      	add	r3, r4
  40453e:	4293      	cmp	r3, r2
  404540:	db4a      	blt.n	4045d8 <_realloc_r+0x18c>
  404542:	4657      	mov	r7, sl
  404544:	f8da 100c 	ldr.w	r1, [sl, #12]
  404548:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40454c:	1f22      	subs	r2, r4, #4
  40454e:	2a24      	cmp	r2, #36	; 0x24
  404550:	60c1      	str	r1, [r0, #12]
  404552:	6088      	str	r0, [r1, #8]
  404554:	f200 810e 	bhi.w	404774 <_realloc_r+0x328>
  404558:	2a13      	cmp	r2, #19
  40455a:	f240 8109 	bls.w	404770 <_realloc_r+0x324>
  40455e:	6831      	ldr	r1, [r6, #0]
  404560:	f8ca 1008 	str.w	r1, [sl, #8]
  404564:	6871      	ldr	r1, [r6, #4]
  404566:	f8ca 100c 	str.w	r1, [sl, #12]
  40456a:	2a1b      	cmp	r2, #27
  40456c:	f200 8121 	bhi.w	4047b2 <_realloc_r+0x366>
  404570:	3608      	adds	r6, #8
  404572:	f10a 0210 	add.w	r2, sl, #16
  404576:	6831      	ldr	r1, [r6, #0]
  404578:	6011      	str	r1, [r2, #0]
  40457a:	6871      	ldr	r1, [r6, #4]
  40457c:	6051      	str	r1, [r2, #4]
  40457e:	68b1      	ldr	r1, [r6, #8]
  404580:	6091      	str	r1, [r2, #8]
  404582:	461c      	mov	r4, r3
  404584:	f8da 3004 	ldr.w	r3, [sl, #4]
  404588:	463e      	mov	r6, r7
  40458a:	46d0      	mov	r8, sl
  40458c:	1b62      	subs	r2, r4, r5
  40458e:	2a0f      	cmp	r2, #15
  404590:	f003 0301 	and.w	r3, r3, #1
  404594:	d80e      	bhi.n	4045b4 <_realloc_r+0x168>
  404596:	4323      	orrs	r3, r4
  404598:	4444      	add	r4, r8
  40459a:	f8c8 3004 	str.w	r3, [r8, #4]
  40459e:	6863      	ldr	r3, [r4, #4]
  4045a0:	f043 0301 	orr.w	r3, r3, #1
  4045a4:	6063      	str	r3, [r4, #4]
  4045a6:	4648      	mov	r0, r9
  4045a8:	f7ff ff4e 	bl	404448 <__malloc_unlock>
  4045ac:	4630      	mov	r0, r6
  4045ae:	b003      	add	sp, #12
  4045b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045b4:	eb08 0105 	add.w	r1, r8, r5
  4045b8:	431d      	orrs	r5, r3
  4045ba:	f042 0301 	orr.w	r3, r2, #1
  4045be:	440a      	add	r2, r1
  4045c0:	f8c8 5004 	str.w	r5, [r8, #4]
  4045c4:	604b      	str	r3, [r1, #4]
  4045c6:	6853      	ldr	r3, [r2, #4]
  4045c8:	f043 0301 	orr.w	r3, r3, #1
  4045cc:	3108      	adds	r1, #8
  4045ce:	6053      	str	r3, [r2, #4]
  4045d0:	4648      	mov	r0, r9
  4045d2:	f7fe ffd5 	bl	403580 <_free_r>
  4045d6:	e7e6      	b.n	4045a6 <_realloc_r+0x15a>
  4045d8:	4639      	mov	r1, r7
  4045da:	4648      	mov	r0, r9
  4045dc:	f7ff fb14 	bl	403c08 <_malloc_r>
  4045e0:	4607      	mov	r7, r0
  4045e2:	b1d8      	cbz	r0, 40461c <_realloc_r+0x1d0>
  4045e4:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4045e8:	f023 0201 	bic.w	r2, r3, #1
  4045ec:	4442      	add	r2, r8
  4045ee:	f1a0 0108 	sub.w	r1, r0, #8
  4045f2:	4291      	cmp	r1, r2
  4045f4:	f000 80ac 	beq.w	404750 <_realloc_r+0x304>
  4045f8:	1f22      	subs	r2, r4, #4
  4045fa:	2a24      	cmp	r2, #36	; 0x24
  4045fc:	f200 8099 	bhi.w	404732 <_realloc_r+0x2e6>
  404600:	2a13      	cmp	r2, #19
  404602:	d86a      	bhi.n	4046da <_realloc_r+0x28e>
  404604:	4603      	mov	r3, r0
  404606:	4632      	mov	r2, r6
  404608:	6811      	ldr	r1, [r2, #0]
  40460a:	6019      	str	r1, [r3, #0]
  40460c:	6851      	ldr	r1, [r2, #4]
  40460e:	6059      	str	r1, [r3, #4]
  404610:	6892      	ldr	r2, [r2, #8]
  404612:	609a      	str	r2, [r3, #8]
  404614:	4631      	mov	r1, r6
  404616:	4648      	mov	r0, r9
  404618:	f7fe ffb2 	bl	403580 <_free_r>
  40461c:	4648      	mov	r0, r9
  40461e:	f7ff ff13 	bl	404448 <__malloc_unlock>
  404622:	4638      	mov	r0, r7
  404624:	b003      	add	sp, #12
  404626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40462a:	4611      	mov	r1, r2
  40462c:	b003      	add	sp, #12
  40462e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404632:	f7ff bae9 	b.w	403c08 <_malloc_r>
  404636:	68ca      	ldr	r2, [r1, #12]
  404638:	6889      	ldr	r1, [r1, #8]
  40463a:	4604      	mov	r4, r0
  40463c:	60ca      	str	r2, [r1, #12]
  40463e:	6091      	str	r1, [r2, #8]
  404640:	e7a4      	b.n	40458c <_realloc_r+0x140>
  404642:	6841      	ldr	r1, [r0, #4]
  404644:	f021 0103 	bic.w	r1, r1, #3
  404648:	4421      	add	r1, r4
  40464a:	f105 0010 	add.w	r0, r5, #16
  40464e:	4281      	cmp	r1, r0
  404650:	da5b      	bge.n	40470a <_realloc_r+0x2be>
  404652:	07db      	lsls	r3, r3, #31
  404654:	d4c0      	bmi.n	4045d8 <_realloc_r+0x18c>
  404656:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40465a:	ebc3 0a08 	rsb	sl, r3, r8
  40465e:	f8da 3004 	ldr.w	r3, [sl, #4]
  404662:	f023 0303 	bic.w	r3, r3, #3
  404666:	eb01 0c03 	add.w	ip, r1, r3
  40466a:	4560      	cmp	r0, ip
  40466c:	f73f af66 	bgt.w	40453c <_realloc_r+0xf0>
  404670:	4657      	mov	r7, sl
  404672:	f8da 300c 	ldr.w	r3, [sl, #12]
  404676:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40467a:	1f22      	subs	r2, r4, #4
  40467c:	2a24      	cmp	r2, #36	; 0x24
  40467e:	60cb      	str	r3, [r1, #12]
  404680:	6099      	str	r1, [r3, #8]
  404682:	f200 80b8 	bhi.w	4047f6 <_realloc_r+0x3aa>
  404686:	2a13      	cmp	r2, #19
  404688:	f240 80a9 	bls.w	4047de <_realloc_r+0x392>
  40468c:	6833      	ldr	r3, [r6, #0]
  40468e:	f8ca 3008 	str.w	r3, [sl, #8]
  404692:	6873      	ldr	r3, [r6, #4]
  404694:	f8ca 300c 	str.w	r3, [sl, #12]
  404698:	2a1b      	cmp	r2, #27
  40469a:	f200 80b5 	bhi.w	404808 <_realloc_r+0x3bc>
  40469e:	3608      	adds	r6, #8
  4046a0:	f10a 0310 	add.w	r3, sl, #16
  4046a4:	6832      	ldr	r2, [r6, #0]
  4046a6:	601a      	str	r2, [r3, #0]
  4046a8:	6872      	ldr	r2, [r6, #4]
  4046aa:	605a      	str	r2, [r3, #4]
  4046ac:	68b2      	ldr	r2, [r6, #8]
  4046ae:	609a      	str	r2, [r3, #8]
  4046b0:	eb0a 0205 	add.w	r2, sl, r5
  4046b4:	ebc5 030c 	rsb	r3, r5, ip
  4046b8:	f043 0301 	orr.w	r3, r3, #1
  4046bc:	f8cb 2008 	str.w	r2, [fp, #8]
  4046c0:	6053      	str	r3, [r2, #4]
  4046c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4046c6:	f003 0301 	and.w	r3, r3, #1
  4046ca:	431d      	orrs	r5, r3
  4046cc:	4648      	mov	r0, r9
  4046ce:	f8ca 5004 	str.w	r5, [sl, #4]
  4046d2:	f7ff feb9 	bl	404448 <__malloc_unlock>
  4046d6:	4638      	mov	r0, r7
  4046d8:	e769      	b.n	4045ae <_realloc_r+0x162>
  4046da:	6833      	ldr	r3, [r6, #0]
  4046dc:	6003      	str	r3, [r0, #0]
  4046de:	6873      	ldr	r3, [r6, #4]
  4046e0:	6043      	str	r3, [r0, #4]
  4046e2:	2a1b      	cmp	r2, #27
  4046e4:	d829      	bhi.n	40473a <_realloc_r+0x2ee>
  4046e6:	f100 0308 	add.w	r3, r0, #8
  4046ea:	f106 0208 	add.w	r2, r6, #8
  4046ee:	e78b      	b.n	404608 <_realloc_r+0x1bc>
  4046f0:	463b      	mov	r3, r7
  4046f2:	6832      	ldr	r2, [r6, #0]
  4046f4:	601a      	str	r2, [r3, #0]
  4046f6:	6872      	ldr	r2, [r6, #4]
  4046f8:	605a      	str	r2, [r3, #4]
  4046fa:	68b2      	ldr	r2, [r6, #8]
  4046fc:	609a      	str	r2, [r3, #8]
  4046fe:	463e      	mov	r6, r7
  404700:	4674      	mov	r4, lr
  404702:	f8da 3004 	ldr.w	r3, [sl, #4]
  404706:	46d0      	mov	r8, sl
  404708:	e740      	b.n	40458c <_realloc_r+0x140>
  40470a:	eb08 0205 	add.w	r2, r8, r5
  40470e:	1b4b      	subs	r3, r1, r5
  404710:	f043 0301 	orr.w	r3, r3, #1
  404714:	f8cb 2008 	str.w	r2, [fp, #8]
  404718:	6053      	str	r3, [r2, #4]
  40471a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40471e:	f003 0301 	and.w	r3, r3, #1
  404722:	431d      	orrs	r5, r3
  404724:	4648      	mov	r0, r9
  404726:	f846 5c04 	str.w	r5, [r6, #-4]
  40472a:	f7ff fe8d 	bl	404448 <__malloc_unlock>
  40472e:	4630      	mov	r0, r6
  404730:	e73d      	b.n	4045ae <_realloc_r+0x162>
  404732:	4631      	mov	r1, r6
  404734:	f7ff fe22 	bl	40437c <memmove>
  404738:	e76c      	b.n	404614 <_realloc_r+0x1c8>
  40473a:	68b3      	ldr	r3, [r6, #8]
  40473c:	6083      	str	r3, [r0, #8]
  40473e:	68f3      	ldr	r3, [r6, #12]
  404740:	60c3      	str	r3, [r0, #12]
  404742:	2a24      	cmp	r2, #36	; 0x24
  404744:	d02c      	beq.n	4047a0 <_realloc_r+0x354>
  404746:	f100 0310 	add.w	r3, r0, #16
  40474a:	f106 0210 	add.w	r2, r6, #16
  40474e:	e75b      	b.n	404608 <_realloc_r+0x1bc>
  404750:	f850 2c04 	ldr.w	r2, [r0, #-4]
  404754:	f022 0203 	bic.w	r2, r2, #3
  404758:	4414      	add	r4, r2
  40475a:	e717      	b.n	40458c <_realloc_r+0x140>
  40475c:	4631      	mov	r1, r6
  40475e:	4638      	mov	r0, r7
  404760:	4674      	mov	r4, lr
  404762:	463e      	mov	r6, r7
  404764:	f7ff fe0a 	bl	40437c <memmove>
  404768:	46d0      	mov	r8, sl
  40476a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40476e:	e70d      	b.n	40458c <_realloc_r+0x140>
  404770:	463a      	mov	r2, r7
  404772:	e700      	b.n	404576 <_realloc_r+0x12a>
  404774:	4631      	mov	r1, r6
  404776:	4638      	mov	r0, r7
  404778:	461c      	mov	r4, r3
  40477a:	463e      	mov	r6, r7
  40477c:	f7ff fdfe 	bl	40437c <memmove>
  404780:	46d0      	mov	r8, sl
  404782:	f8da 3004 	ldr.w	r3, [sl, #4]
  404786:	e701      	b.n	40458c <_realloc_r+0x140>
  404788:	68b3      	ldr	r3, [r6, #8]
  40478a:	f8ca 3010 	str.w	r3, [sl, #16]
  40478e:	68f3      	ldr	r3, [r6, #12]
  404790:	f8ca 3014 	str.w	r3, [sl, #20]
  404794:	2a24      	cmp	r2, #36	; 0x24
  404796:	d018      	beq.n	4047ca <_realloc_r+0x37e>
  404798:	3610      	adds	r6, #16
  40479a:	f10a 0318 	add.w	r3, sl, #24
  40479e:	e7a8      	b.n	4046f2 <_realloc_r+0x2a6>
  4047a0:	6933      	ldr	r3, [r6, #16]
  4047a2:	6103      	str	r3, [r0, #16]
  4047a4:	6973      	ldr	r3, [r6, #20]
  4047a6:	6143      	str	r3, [r0, #20]
  4047a8:	f106 0218 	add.w	r2, r6, #24
  4047ac:	f100 0318 	add.w	r3, r0, #24
  4047b0:	e72a      	b.n	404608 <_realloc_r+0x1bc>
  4047b2:	68b1      	ldr	r1, [r6, #8]
  4047b4:	f8ca 1010 	str.w	r1, [sl, #16]
  4047b8:	68f1      	ldr	r1, [r6, #12]
  4047ba:	f8ca 1014 	str.w	r1, [sl, #20]
  4047be:	2a24      	cmp	r2, #36	; 0x24
  4047c0:	d00f      	beq.n	4047e2 <_realloc_r+0x396>
  4047c2:	3610      	adds	r6, #16
  4047c4:	f10a 0218 	add.w	r2, sl, #24
  4047c8:	e6d5      	b.n	404576 <_realloc_r+0x12a>
  4047ca:	6933      	ldr	r3, [r6, #16]
  4047cc:	f8ca 3018 	str.w	r3, [sl, #24]
  4047d0:	6973      	ldr	r3, [r6, #20]
  4047d2:	f8ca 301c 	str.w	r3, [sl, #28]
  4047d6:	3618      	adds	r6, #24
  4047d8:	f10a 0320 	add.w	r3, sl, #32
  4047dc:	e789      	b.n	4046f2 <_realloc_r+0x2a6>
  4047de:	463b      	mov	r3, r7
  4047e0:	e760      	b.n	4046a4 <_realloc_r+0x258>
  4047e2:	6932      	ldr	r2, [r6, #16]
  4047e4:	f8ca 2018 	str.w	r2, [sl, #24]
  4047e8:	6972      	ldr	r2, [r6, #20]
  4047ea:	f8ca 201c 	str.w	r2, [sl, #28]
  4047ee:	3618      	adds	r6, #24
  4047f0:	f10a 0220 	add.w	r2, sl, #32
  4047f4:	e6bf      	b.n	404576 <_realloc_r+0x12a>
  4047f6:	4631      	mov	r1, r6
  4047f8:	4638      	mov	r0, r7
  4047fa:	f8cd c004 	str.w	ip, [sp, #4]
  4047fe:	f7ff fdbd 	bl	40437c <memmove>
  404802:	f8dd c004 	ldr.w	ip, [sp, #4]
  404806:	e753      	b.n	4046b0 <_realloc_r+0x264>
  404808:	68b3      	ldr	r3, [r6, #8]
  40480a:	f8ca 3010 	str.w	r3, [sl, #16]
  40480e:	68f3      	ldr	r3, [r6, #12]
  404810:	f8ca 3014 	str.w	r3, [sl, #20]
  404814:	2a24      	cmp	r2, #36	; 0x24
  404816:	d003      	beq.n	404820 <_realloc_r+0x3d4>
  404818:	3610      	adds	r6, #16
  40481a:	f10a 0318 	add.w	r3, sl, #24
  40481e:	e741      	b.n	4046a4 <_realloc_r+0x258>
  404820:	6933      	ldr	r3, [r6, #16]
  404822:	f8ca 3018 	str.w	r3, [sl, #24]
  404826:	6973      	ldr	r3, [r6, #20]
  404828:	f8ca 301c 	str.w	r3, [sl, #28]
  40482c:	3618      	adds	r6, #24
  40482e:	f10a 0320 	add.w	r3, sl, #32
  404832:	e737      	b.n	4046a4 <_realloc_r+0x258>
  404834:	200004ec 	.word	0x200004ec

00404838 <lflush>:
  404838:	8983      	ldrh	r3, [r0, #12]
  40483a:	f003 0309 	and.w	r3, r3, #9
  40483e:	2b09      	cmp	r3, #9
  404840:	d001      	beq.n	404846 <lflush+0xe>
  404842:	2000      	movs	r0, #0
  404844:	4770      	bx	lr
  404846:	f7fe bc69 	b.w	40311c <fflush>
  40484a:	bf00      	nop

0040484c <__srefill_r>:
  40484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40484e:	460c      	mov	r4, r1
  404850:	4605      	mov	r5, r0
  404852:	b110      	cbz	r0, 40485a <__srefill_r+0xe>
  404854:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404856:	2b00      	cmp	r3, #0
  404858:	d043      	beq.n	4048e2 <__srefill_r+0x96>
  40485a:	89a3      	ldrh	r3, [r4, #12]
  40485c:	b29a      	uxth	r2, r3
  40485e:	0497      	lsls	r7, r2, #18
  404860:	d407      	bmi.n	404872 <__srefill_r+0x26>
  404862:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404868:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40486c:	6662      	str	r2, [r4, #100]	; 0x64
  40486e:	81a3      	strh	r3, [r4, #12]
  404870:	b29a      	uxth	r2, r3
  404872:	2100      	movs	r1, #0
  404874:	0696      	lsls	r6, r2, #26
  404876:	6061      	str	r1, [r4, #4]
  404878:	d430      	bmi.n	4048dc <__srefill_r+0x90>
  40487a:	0750      	lsls	r0, r2, #29
  40487c:	d521      	bpl.n	4048c2 <__srefill_r+0x76>
  40487e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404880:	b161      	cbz	r1, 40489c <__srefill_r+0x50>
  404882:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404886:	4299      	cmp	r1, r3
  404888:	d002      	beq.n	404890 <__srefill_r+0x44>
  40488a:	4628      	mov	r0, r5
  40488c:	f7fe fe78 	bl	403580 <_free_r>
  404890:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404892:	6063      	str	r3, [r4, #4]
  404894:	2000      	movs	r0, #0
  404896:	6320      	str	r0, [r4, #48]	; 0x30
  404898:	2b00      	cmp	r3, #0
  40489a:	d13e      	bne.n	40491a <__srefill_r+0xce>
  40489c:	6923      	ldr	r3, [r4, #16]
  40489e:	2b00      	cmp	r3, #0
  4048a0:	d04b      	beq.n	40493a <__srefill_r+0xee>
  4048a2:	89a7      	ldrh	r7, [r4, #12]
  4048a4:	b2be      	uxth	r6, r7
  4048a6:	07b3      	lsls	r3, r6, #30
  4048a8:	d11e      	bne.n	4048e8 <__srefill_r+0x9c>
  4048aa:	6922      	ldr	r2, [r4, #16]
  4048ac:	6022      	str	r2, [r4, #0]
  4048ae:	4628      	mov	r0, r5
  4048b0:	69e1      	ldr	r1, [r4, #28]
  4048b2:	6a25      	ldr	r5, [r4, #32]
  4048b4:	6963      	ldr	r3, [r4, #20]
  4048b6:	47a8      	blx	r5
  4048b8:	2800      	cmp	r0, #0
  4048ba:	6060      	str	r0, [r4, #4]
  4048bc:	dd09      	ble.n	4048d2 <__srefill_r+0x86>
  4048be:	2000      	movs	r0, #0
  4048c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4048c2:	06d1      	lsls	r1, r2, #27
  4048c4:	d53e      	bpl.n	404944 <__srefill_r+0xf8>
  4048c6:	0712      	lsls	r2, r2, #28
  4048c8:	d42a      	bmi.n	404920 <__srefill_r+0xd4>
  4048ca:	f043 0304 	orr.w	r3, r3, #4
  4048ce:	81a3      	strh	r3, [r4, #12]
  4048d0:	e7e4      	b.n	40489c <__srefill_r+0x50>
  4048d2:	89a3      	ldrh	r3, [r4, #12]
  4048d4:	d119      	bne.n	40490a <__srefill_r+0xbe>
  4048d6:	f043 0320 	orr.w	r3, r3, #32
  4048da:	81a3      	strh	r3, [r4, #12]
  4048dc:	f04f 30ff 	mov.w	r0, #4294967295
  4048e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4048e2:	f7fe fcab 	bl	40323c <__sinit>
  4048e6:	e7b8      	b.n	40485a <__srefill_r+0xe>
  4048e8:	4b1a      	ldr	r3, [pc, #104]	; (404954 <__srefill_r+0x108>)
  4048ea:	491b      	ldr	r1, [pc, #108]	; (404958 <__srefill_r+0x10c>)
  4048ec:	6818      	ldr	r0, [r3, #0]
  4048ee:	2301      	movs	r3, #1
  4048f0:	81a3      	strh	r3, [r4, #12]
  4048f2:	f006 0609 	and.w	r6, r6, #9
  4048f6:	f7ff f8a7 	bl	403a48 <_fwalk>
  4048fa:	2e09      	cmp	r6, #9
  4048fc:	81a7      	strh	r7, [r4, #12]
  4048fe:	d1d4      	bne.n	4048aa <__srefill_r+0x5e>
  404900:	4628      	mov	r0, r5
  404902:	4621      	mov	r1, r4
  404904:	f7fe fb4a 	bl	402f9c <__sflush_r>
  404908:	e7cf      	b.n	4048aa <__srefill_r+0x5e>
  40490a:	2200      	movs	r2, #0
  40490c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404910:	81a3      	strh	r3, [r4, #12]
  404912:	6062      	str	r2, [r4, #4]
  404914:	f04f 30ff 	mov.w	r0, #4294967295
  404918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40491a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40491c:	6023      	str	r3, [r4, #0]
  40491e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404920:	4628      	mov	r0, r5
  404922:	4621      	mov	r1, r4
  404924:	f7fe fbe4 	bl	4030f0 <_fflush_r>
  404928:	2800      	cmp	r0, #0
  40492a:	d1d7      	bne.n	4048dc <__srefill_r+0x90>
  40492c:	89a3      	ldrh	r3, [r4, #12]
  40492e:	60a0      	str	r0, [r4, #8]
  404930:	f023 0308 	bic.w	r3, r3, #8
  404934:	61a0      	str	r0, [r4, #24]
  404936:	b29b      	uxth	r3, r3
  404938:	e7c7      	b.n	4048ca <__srefill_r+0x7e>
  40493a:	4628      	mov	r0, r5
  40493c:	4621      	mov	r1, r4
  40493e:	f7ff f8eb 	bl	403b18 <__smakebuf_r>
  404942:	e7ae      	b.n	4048a2 <__srefill_r+0x56>
  404944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404948:	2209      	movs	r2, #9
  40494a:	602a      	str	r2, [r5, #0]
  40494c:	f04f 30ff 	mov.w	r0, #4294967295
  404950:	81a3      	strh	r3, [r4, #12]
  404952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404954:	00405e3c 	.word	0x00405e3c
  404958:	00404839 	.word	0x00404839

0040495c <_sbrk_r>:
  40495c:	b538      	push	{r3, r4, r5, lr}
  40495e:	4c07      	ldr	r4, [pc, #28]	; (40497c <_sbrk_r+0x20>)
  404960:	2300      	movs	r3, #0
  404962:	4605      	mov	r5, r0
  404964:	4608      	mov	r0, r1
  404966:	6023      	str	r3, [r4, #0]
  404968:	f7fc f91a 	bl	400ba0 <_sbrk>
  40496c:	1c43      	adds	r3, r0, #1
  40496e:	d000      	beq.n	404972 <_sbrk_r+0x16>
  404970:	bd38      	pop	{r3, r4, r5, pc}
  404972:	6823      	ldr	r3, [r4, #0]
  404974:	2b00      	cmp	r3, #0
  404976:	d0fb      	beq.n	404970 <_sbrk_r+0x14>
  404978:	602b      	str	r3, [r5, #0]
  40497a:	bd38      	pop	{r3, r4, r5, pc}
  40497c:	20000a28 	.word	0x20000a28

00404980 <__sccl>:
  404980:	b470      	push	{r4, r5, r6}
  404982:	780d      	ldrb	r5, [r1, #0]
  404984:	2d5e      	cmp	r5, #94	; 0x5e
  404986:	d02f      	beq.n	4049e8 <__sccl+0x68>
  404988:	2200      	movs	r2, #0
  40498a:	3101      	adds	r1, #1
  40498c:	4616      	mov	r6, r2
  40498e:	1e43      	subs	r3, r0, #1
  404990:	f100 04ff 	add.w	r4, r0, #255	; 0xff
  404994:	f803 2f01 	strb.w	r2, [r3, #1]!
  404998:	42a3      	cmp	r3, r4
  40499a:	d1fb      	bne.n	404994 <__sccl+0x14>
  40499c:	b185      	cbz	r5, 4049c0 <__sccl+0x40>
  40499e:	f086 0201 	eor.w	r2, r6, #1
  4049a2:	5542      	strb	r2, [r0, r5]
  4049a4:	1c4e      	adds	r6, r1, #1
  4049a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  4049aa:	2b2d      	cmp	r3, #45	; 0x2d
  4049ac:	d00e      	beq.n	4049cc <__sccl+0x4c>
  4049ae:	2b5d      	cmp	r3, #93	; 0x5d
  4049b0:	d009      	beq.n	4049c6 <__sccl+0x46>
  4049b2:	b113      	cbz	r3, 4049ba <__sccl+0x3a>
  4049b4:	461d      	mov	r5, r3
  4049b6:	4631      	mov	r1, r6
  4049b8:	e7f3      	b.n	4049a2 <__sccl+0x22>
  4049ba:	4608      	mov	r0, r1
  4049bc:	bc70      	pop	{r4, r5, r6}
  4049be:	4770      	bx	lr
  4049c0:	1e48      	subs	r0, r1, #1
  4049c2:	bc70      	pop	{r4, r5, r6}
  4049c4:	4770      	bx	lr
  4049c6:	4630      	mov	r0, r6
  4049c8:	bc70      	pop	{r4, r5, r6}
  4049ca:	4770      	bx	lr
  4049cc:	784c      	ldrb	r4, [r1, #1]
  4049ce:	2c5d      	cmp	r4, #93	; 0x5d
  4049d0:	d00f      	beq.n	4049f2 <__sccl+0x72>
  4049d2:	42a5      	cmp	r5, r4
  4049d4:	dc0d      	bgt.n	4049f2 <__sccl+0x72>
  4049d6:	3102      	adds	r1, #2
  4049d8:	1943      	adds	r3, r0, r5
  4049da:	3501      	adds	r5, #1
  4049dc:	42ac      	cmp	r4, r5
  4049de:	f803 2f01 	strb.w	r2, [r3, #1]!
  4049e2:	dcfa      	bgt.n	4049da <__sccl+0x5a>
  4049e4:	3602      	adds	r6, #2
  4049e6:	e7de      	b.n	4049a6 <__sccl+0x26>
  4049e8:	2201      	movs	r2, #1
  4049ea:	784d      	ldrb	r5, [r1, #1]
  4049ec:	4616      	mov	r6, r2
  4049ee:	3102      	adds	r1, #2
  4049f0:	e7cd      	b.n	40498e <__sccl+0xe>
  4049f2:	4631      	mov	r1, r6
  4049f4:	461d      	mov	r5, r3
  4049f6:	e7d4      	b.n	4049a2 <__sccl+0x22>

004049f8 <__sread>:
  4049f8:	b510      	push	{r4, lr}
  4049fa:	460c      	mov	r4, r1
  4049fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a00:	f000 fd56 	bl	4054b0 <_read_r>
  404a04:	2800      	cmp	r0, #0
  404a06:	db03      	blt.n	404a10 <__sread+0x18>
  404a08:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404a0a:	4403      	add	r3, r0
  404a0c:	6523      	str	r3, [r4, #80]	; 0x50
  404a0e:	bd10      	pop	{r4, pc}
  404a10:	89a3      	ldrh	r3, [r4, #12]
  404a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404a16:	81a3      	strh	r3, [r4, #12]
  404a18:	bd10      	pop	{r4, pc}
  404a1a:	bf00      	nop

00404a1c <__swrite>:
  404a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404a20:	4616      	mov	r6, r2
  404a22:	898a      	ldrh	r2, [r1, #12]
  404a24:	461d      	mov	r5, r3
  404a26:	05d3      	lsls	r3, r2, #23
  404a28:	460c      	mov	r4, r1
  404a2a:	4607      	mov	r7, r0
  404a2c:	d506      	bpl.n	404a3c <__swrite+0x20>
  404a2e:	2200      	movs	r2, #0
  404a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a34:	2302      	movs	r3, #2
  404a36:	f000 fd27 	bl	405488 <_lseek_r>
  404a3a:	89a2      	ldrh	r2, [r4, #12]
  404a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404a40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404a44:	81a2      	strh	r2, [r4, #12]
  404a46:	4638      	mov	r0, r7
  404a48:	4632      	mov	r2, r6
  404a4a:	462b      	mov	r3, r5
  404a4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404a50:	f000 bc3a 	b.w	4052c8 <_write_r>

00404a54 <__sseek>:
  404a54:	b510      	push	{r4, lr}
  404a56:	460c      	mov	r4, r1
  404a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a5c:	f000 fd14 	bl	405488 <_lseek_r>
  404a60:	89a3      	ldrh	r3, [r4, #12]
  404a62:	1c42      	adds	r2, r0, #1
  404a64:	bf0e      	itee	eq
  404a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404a6e:	6520      	strne	r0, [r4, #80]	; 0x50
  404a70:	81a3      	strh	r3, [r4, #12]
  404a72:	bd10      	pop	{r4, pc}

00404a74 <__sclose>:
  404a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a78:	f000 bc8c 	b.w	405394 <_close_r>

00404a7c <_strtol_r>:
  404a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a80:	4c44      	ldr	r4, [pc, #272]	; (404b94 <_strtol_r+0x118>)
  404a82:	4683      	mov	fp, r0
  404a84:	460e      	mov	r6, r1
  404a86:	f8d4 e000 	ldr.w	lr, [r4]
  404a8a:	e000      	b.n	404a8e <_strtol_r+0x12>
  404a8c:	4626      	mov	r6, r4
  404a8e:	4634      	mov	r4, r6
  404a90:	f814 5b01 	ldrb.w	r5, [r4], #1
  404a94:	eb0e 0005 	add.w	r0, lr, r5
  404a98:	7840      	ldrb	r0, [r0, #1]
  404a9a:	f000 0008 	and.w	r0, r0, #8
  404a9e:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  404aa2:	2800      	cmp	r0, #0
  404aa4:	d1f2      	bne.n	404a8c <_strtol_r+0x10>
  404aa6:	2d2d      	cmp	r5, #45	; 0x2d
  404aa8:	d04b      	beq.n	404b42 <_strtol_r+0xc6>
  404aaa:	2d2b      	cmp	r5, #43	; 0x2b
  404aac:	bf04      	itt	eq
  404aae:	7875      	ldrbeq	r5, [r6, #1]
  404ab0:	1cb4      	addeq	r4, r6, #2
  404ab2:	b11b      	cbz	r3, 404abc <_strtol_r+0x40>
  404ab4:	2b10      	cmp	r3, #16
  404ab6:	d060      	beq.n	404b7a <_strtol_r+0xfe>
  404ab8:	469a      	mov	sl, r3
  404aba:	e003      	b.n	404ac4 <_strtol_r+0x48>
  404abc:	2d30      	cmp	r5, #48	; 0x30
  404abe:	d054      	beq.n	404b6a <_strtol_r+0xee>
  404ac0:	230a      	movs	r3, #10
  404ac2:	469a      	mov	sl, r3
  404ac4:	f1b8 0f00 	cmp.w	r8, #0
  404ac8:	bf14      	ite	ne
  404aca:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  404ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404ad2:	2700      	movs	r7, #0
  404ad4:	fbb0 f9fa 	udiv	r9, r0, sl
  404ad8:	46bc      	mov	ip, r7
  404ada:	fb0a 0019 	mls	r0, sl, r9, r0
  404ade:	e00c      	b.n	404afa <_strtol_r+0x7e>
  404ae0:	3d30      	subs	r5, #48	; 0x30
  404ae2:	42ab      	cmp	r3, r5
  404ae4:	dd19      	ble.n	404b1a <_strtol_r+0x9e>
  404ae6:	1c7e      	adds	r6, r7, #1
  404ae8:	d005      	beq.n	404af6 <_strtol_r+0x7a>
  404aea:	45cc      	cmp	ip, r9
  404aec:	d824      	bhi.n	404b38 <_strtol_r+0xbc>
  404aee:	d021      	beq.n	404b34 <_strtol_r+0xb8>
  404af0:	fb0a 5c0c 	mla	ip, sl, ip, r5
  404af4:	2701      	movs	r7, #1
  404af6:	f814 5b01 	ldrb.w	r5, [r4], #1
  404afa:	eb0e 0605 	add.w	r6, lr, r5
  404afe:	7876      	ldrb	r6, [r6, #1]
  404b00:	f016 0f04 	tst.w	r6, #4
  404b04:	d1ec      	bne.n	404ae0 <_strtol_r+0x64>
  404b06:	f016 0603 	ands.w	r6, r6, #3
  404b0a:	d006      	beq.n	404b1a <_strtol_r+0x9e>
  404b0c:	2e01      	cmp	r6, #1
  404b0e:	bf0c      	ite	eq
  404b10:	2637      	moveq	r6, #55	; 0x37
  404b12:	2657      	movne	r6, #87	; 0x57
  404b14:	1bad      	subs	r5, r5, r6
  404b16:	42ab      	cmp	r3, r5
  404b18:	dce5      	bgt.n	404ae6 <_strtol_r+0x6a>
  404b1a:	1c7b      	adds	r3, r7, #1
  404b1c:	d016      	beq.n	404b4c <_strtol_r+0xd0>
  404b1e:	f1c8 0000 	rsb	r0, r8, #0
  404b22:	ea8c 0000 	eor.w	r0, ip, r0
  404b26:	4440      	add	r0, r8
  404b28:	b14a      	cbz	r2, 404b3e <_strtol_r+0xc2>
  404b2a:	b107      	cbz	r7, 404b2e <_strtol_r+0xb2>
  404b2c:	1e61      	subs	r1, r4, #1
  404b2e:	6011      	str	r1, [r2, #0]
  404b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b34:	4285      	cmp	r5, r0
  404b36:	dddb      	ble.n	404af0 <_strtol_r+0x74>
  404b38:	f04f 37ff 	mov.w	r7, #4294967295
  404b3c:	e7db      	b.n	404af6 <_strtol_r+0x7a>
  404b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b42:	1cb4      	adds	r4, r6, #2
  404b44:	7875      	ldrb	r5, [r6, #1]
  404b46:	f04f 0801 	mov.w	r8, #1
  404b4a:	e7b2      	b.n	404ab2 <_strtol_r+0x36>
  404b4c:	f1b8 0f00 	cmp.w	r8, #0
  404b50:	f04f 0322 	mov.w	r3, #34	; 0x22
  404b54:	bf14      	ite	ne
  404b56:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  404b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404b5e:	f8cb 3000 	str.w	r3, [fp]
  404b62:	2a00      	cmp	r2, #0
  404b64:	d1e2      	bne.n	404b2c <_strtol_r+0xb0>
  404b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b6a:	7823      	ldrb	r3, [r4, #0]
  404b6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404b70:	2b58      	cmp	r3, #88	; 0x58
  404b72:	d009      	beq.n	404b88 <_strtol_r+0x10c>
  404b74:	2308      	movs	r3, #8
  404b76:	469a      	mov	sl, r3
  404b78:	e7a4      	b.n	404ac4 <_strtol_r+0x48>
  404b7a:	2d30      	cmp	r5, #48	; 0x30
  404b7c:	d19c      	bne.n	404ab8 <_strtol_r+0x3c>
  404b7e:	7820      	ldrb	r0, [r4, #0]
  404b80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  404b84:	2858      	cmp	r0, #88	; 0x58
  404b86:	d197      	bne.n	404ab8 <_strtol_r+0x3c>
  404b88:	f04f 0a10 	mov.w	sl, #16
  404b8c:	7865      	ldrb	r5, [r4, #1]
  404b8e:	4653      	mov	r3, sl
  404b90:	3402      	adds	r4, #2
  404b92:	e797      	b.n	404ac4 <_strtol_r+0x48>
  404b94:	200004c4 	.word	0x200004c4

00404b98 <_strtoll_r>:
  404b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b9c:	4c70      	ldr	r4, [pc, #448]	; (404d60 <_strtoll_r+0x1c8>)
  404b9e:	b087      	sub	sp, #28
  404ba0:	469b      	mov	fp, r3
  404ba2:	9201      	str	r2, [sp, #4]
  404ba4:	9104      	str	r1, [sp, #16]
  404ba6:	9005      	str	r0, [sp, #20]
  404ba8:	460a      	mov	r2, r1
  404baa:	f8d4 a000 	ldr.w	sl, [r4]
  404bae:	e000      	b.n	404bb2 <_strtoll_r+0x1a>
  404bb0:	462a      	mov	r2, r5
  404bb2:	4615      	mov	r5, r2
  404bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
  404bb8:	eb0a 0304 	add.w	r3, sl, r4
  404bbc:	785b      	ldrb	r3, [r3, #1]
  404bbe:	f003 0308 	and.w	r3, r3, #8
  404bc2:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  404bc6:	2b00      	cmp	r3, #0
  404bc8:	d1f2      	bne.n	404bb0 <_strtoll_r+0x18>
  404bca:	2c2d      	cmp	r4, #45	; 0x2d
  404bcc:	f000 8092 	beq.w	404cf4 <_strtoll_r+0x15c>
  404bd0:	2c2b      	cmp	r4, #43	; 0x2b
  404bd2:	bf08      	it	eq
  404bd4:	7854      	ldrbeq	r4, [r2, #1]
  404bd6:	468c      	mov	ip, r1
  404bd8:	bf08      	it	eq
  404bda:	1c95      	addeq	r5, r2, #2
  404bdc:	f1bb 0f00 	cmp.w	fp, #0
  404be0:	d071      	beq.n	404cc6 <_strtoll_r+0x12e>
  404be2:	f1bb 0f10 	cmp.w	fp, #16
  404be6:	f000 80a2 	beq.w	404d2e <_strtoll_r+0x196>
  404bea:	465e      	mov	r6, fp
  404bec:	17f7      	asrs	r7, r6, #31
  404bee:	f1bc 0f00 	cmp.w	ip, #0
  404bf2:	d171      	bne.n	404cd8 <_strtoll_r+0x140>
  404bf4:	f04f 38ff 	mov.w	r8, #4294967295
  404bf8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
  404bfc:	4640      	mov	r0, r8
  404bfe:	4649      	mov	r1, r9
  404c00:	4632      	mov	r2, r6
  404c02:	463b      	mov	r3, r7
  404c04:	f8cd c00c 	str.w	ip, [sp, #12]
  404c08:	f000 fc66 	bl	4054d8 <__aeabi_uldivmod>
  404c0c:	4640      	mov	r0, r8
  404c0e:	9202      	str	r2, [sp, #8]
  404c10:	463b      	mov	r3, r7
  404c12:	4632      	mov	r2, r6
  404c14:	4649      	mov	r1, r9
  404c16:	f000 fc5f 	bl	4054d8 <__aeabi_uldivmod>
  404c1a:	f04f 0e00 	mov.w	lr, #0
  404c1e:	2200      	movs	r2, #0
  404c20:	2300      	movs	r3, #0
  404c22:	f8dd c00c 	ldr.w	ip, [sp, #12]
  404c26:	f8dd 8008 	ldr.w	r8, [sp, #8]
  404c2a:	e01b      	b.n	404c64 <_strtoll_r+0xcc>
  404c2c:	3c30      	subs	r4, #48	; 0x30
  404c2e:	45a3      	cmp	fp, r4
  404c30:	dd2d      	ble.n	404c8e <_strtoll_r+0xf6>
  404c32:	f1be 3fff 	cmp.w	lr, #4294967295
  404c36:	d013      	beq.n	404c60 <_strtoll_r+0xc8>
  404c38:	4299      	cmp	r1, r3
  404c3a:	bf08      	it	eq
  404c3c:	4290      	cmpeq	r0, r2
  404c3e:	d352      	bcc.n	404ce6 <_strtoll_r+0x14e>
  404c40:	428b      	cmp	r3, r1
  404c42:	bf08      	it	eq
  404c44:	4282      	cmpeq	r2, r0
  404c46:	d04c      	beq.n	404ce2 <_strtoll_r+0x14a>
  404c48:	fb02 fe07 	mul.w	lr, r2, r7
  404c4c:	fb06 ee03 	mla	lr, r6, r3, lr
  404c50:	fba2 2306 	umull	r2, r3, r2, r6
  404c54:	4473      	add	r3, lr
  404c56:	1912      	adds	r2, r2, r4
  404c58:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
  404c5c:	f04f 0e01 	mov.w	lr, #1
  404c60:	f815 4b01 	ldrb.w	r4, [r5], #1
  404c64:	eb0a 0904 	add.w	r9, sl, r4
  404c68:	f899 9001 	ldrb.w	r9, [r9, #1]
  404c6c:	f019 0f04 	tst.w	r9, #4
  404c70:	d1dc      	bne.n	404c2c <_strtoll_r+0x94>
  404c72:	f019 0903 	ands.w	r9, r9, #3
  404c76:	d00a      	beq.n	404c8e <_strtoll_r+0xf6>
  404c78:	f1b9 0f01 	cmp.w	r9, #1
  404c7c:	bf0c      	ite	eq
  404c7e:	f04f 0937 	moveq.w	r9, #55	; 0x37
  404c82:	f04f 0957 	movne.w	r9, #87	; 0x57
  404c86:	ebc9 0404 	rsb	r4, r9, r4
  404c8a:	45a3      	cmp	fp, r4
  404c8c:	dcd1      	bgt.n	404c32 <_strtoll_r+0x9a>
  404c8e:	f1be 3fff 	cmp.w	lr, #4294967295
  404c92:	d034      	beq.n	404cfe <_strtoll_r+0x166>
  404c94:	4660      	mov	r0, ip
  404c96:	17c1      	asrs	r1, r0, #31
  404c98:	f1dc 0600 	rsbs	r6, ip, #0
  404c9c:	eb61 0741 	sbc.w	r7, r1, r1, lsl #1
  404ca0:	4072      	eors	r2, r6
  404ca2:	407b      	eors	r3, r7
  404ca4:	eb12 020c 	adds.w	r2, r2, ip
  404ca8:	414b      	adcs	r3, r1
  404caa:	9901      	ldr	r1, [sp, #4]
  404cac:	2900      	cmp	r1, #0
  404cae:	d053      	beq.n	404d58 <_strtoll_r+0x1c0>
  404cb0:	f1be 0f00 	cmp.w	lr, #0
  404cb4:	d11a      	bne.n	404cec <_strtoll_r+0x154>
  404cb6:	9d04      	ldr	r5, [sp, #16]
  404cb8:	4610      	mov	r0, r2
  404cba:	4619      	mov	r1, r3
  404cbc:	9b01      	ldr	r3, [sp, #4]
  404cbe:	601d      	str	r5, [r3, #0]
  404cc0:	b007      	add	sp, #28
  404cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cc6:	2c30      	cmp	r4, #48	; 0x30
  404cc8:	d027      	beq.n	404d1a <_strtoll_r+0x182>
  404cca:	260a      	movs	r6, #10
  404ccc:	2700      	movs	r7, #0
  404cce:	f04f 0b0a 	mov.w	fp, #10
  404cd2:	f1bc 0f00 	cmp.w	ip, #0
  404cd6:	d08d      	beq.n	404bf4 <_strtoll_r+0x5c>
  404cd8:	f04f 0800 	mov.w	r8, #0
  404cdc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
  404ce0:	e78c      	b.n	404bfc <_strtoll_r+0x64>
  404ce2:	4544      	cmp	r4, r8
  404ce4:	ddb0      	ble.n	404c48 <_strtoll_r+0xb0>
  404ce6:	f04f 3eff 	mov.w	lr, #4294967295
  404cea:	e7b9      	b.n	404c60 <_strtoll_r+0xc8>
  404cec:	4610      	mov	r0, r2
  404cee:	4619      	mov	r1, r3
  404cf0:	3d01      	subs	r5, #1
  404cf2:	e7e3      	b.n	404cbc <_strtoll_r+0x124>
  404cf4:	1c95      	adds	r5, r2, #2
  404cf6:	7854      	ldrb	r4, [r2, #1]
  404cf8:	f04f 0c01 	mov.w	ip, #1
  404cfc:	e76e      	b.n	404bdc <_strtoll_r+0x44>
  404cfe:	f1bc 0f00 	cmp.w	ip, #0
  404d02:	d119      	bne.n	404d38 <_strtoll_r+0x1a0>
  404d04:	f04f 30ff 	mov.w	r0, #4294967295
  404d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404d0c:	9a05      	ldr	r2, [sp, #20]
  404d0e:	2322      	movs	r3, #34	; 0x22
  404d10:	6013      	str	r3, [r2, #0]
  404d12:	9b01      	ldr	r3, [sp, #4]
  404d14:	2b00      	cmp	r3, #0
  404d16:	d1eb      	bne.n	404cf0 <_strtoll_r+0x158>
  404d18:	e7d2      	b.n	404cc0 <_strtoll_r+0x128>
  404d1a:	782b      	ldrb	r3, [r5, #0]
  404d1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404d20:	2b58      	cmp	r3, #88	; 0x58
  404d22:	d012      	beq.n	404d4a <_strtoll_r+0x1b2>
  404d24:	2608      	movs	r6, #8
  404d26:	2700      	movs	r7, #0
  404d28:	f04f 0b08 	mov.w	fp, #8
  404d2c:	e75f      	b.n	404bee <_strtoll_r+0x56>
  404d2e:	2c30      	cmp	r4, #48	; 0x30
  404d30:	d006      	beq.n	404d40 <_strtoll_r+0x1a8>
  404d32:	2610      	movs	r6, #16
  404d34:	2700      	movs	r7, #0
  404d36:	e75a      	b.n	404bee <_strtoll_r+0x56>
  404d38:	2000      	movs	r0, #0
  404d3a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  404d3e:	e7e5      	b.n	404d0c <_strtoll_r+0x174>
  404d40:	782b      	ldrb	r3, [r5, #0]
  404d42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404d46:	2b58      	cmp	r3, #88	; 0x58
  404d48:	d1f3      	bne.n	404d32 <_strtoll_r+0x19a>
  404d4a:	786c      	ldrb	r4, [r5, #1]
  404d4c:	2610      	movs	r6, #16
  404d4e:	2700      	movs	r7, #0
  404d50:	3502      	adds	r5, #2
  404d52:	f04f 0b10 	mov.w	fp, #16
  404d56:	e74a      	b.n	404bee <_strtoll_r+0x56>
  404d58:	4610      	mov	r0, r2
  404d5a:	4619      	mov	r1, r3
  404d5c:	e7b0      	b.n	404cc0 <_strtoll_r+0x128>
  404d5e:	bf00      	nop
  404d60:	200004c4 	.word	0x200004c4

00404d64 <_strtoul_r>:
  404d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d68:	4c46      	ldr	r4, [pc, #280]	; (404e84 <_strtoul_r+0x120>)
  404d6a:	460f      	mov	r7, r1
  404d6c:	f8d4 e000 	ldr.w	lr, [r4]
  404d70:	e000      	b.n	404d74 <_strtoul_r+0x10>
  404d72:	4627      	mov	r7, r4
  404d74:	463c      	mov	r4, r7
  404d76:	f814 5b01 	ldrb.w	r5, [r4], #1
  404d7a:	eb0e 0605 	add.w	r6, lr, r5
  404d7e:	7876      	ldrb	r6, [r6, #1]
  404d80:	f006 0608 	and.w	r6, r6, #8
  404d84:	f006 08ff 	and.w	r8, r6, #255	; 0xff
  404d88:	2e00      	cmp	r6, #0
  404d8a:	d1f2      	bne.n	404d72 <_strtoul_r+0xe>
  404d8c:	2d2d      	cmp	r5, #45	; 0x2d
  404d8e:	d051      	beq.n	404e34 <_strtoul_r+0xd0>
  404d90:	2d2b      	cmp	r5, #43	; 0x2b
  404d92:	bf04      	itt	eq
  404d94:	787d      	ldrbeq	r5, [r7, #1]
  404d96:	1cbc      	addeq	r4, r7, #2
  404d98:	b15b      	cbz	r3, 404db2 <_strtoul_r+0x4e>
  404d9a:	2b10      	cmp	r3, #16
  404d9c:	d05b      	beq.n	404e56 <_strtoul_r+0xf2>
  404d9e:	f04f 39ff 	mov.w	r9, #4294967295
  404da2:	fbb9 f9f3 	udiv	r9, r9, r3
  404da6:	fb03 fb09 	mul.w	fp, r3, r9
  404daa:	ea6f 0b0b 	mvn.w	fp, fp
  404dae:	469a      	mov	sl, r3
  404db0:	e007      	b.n	404dc2 <_strtoul_r+0x5e>
  404db2:	2d30      	cmp	r5, #48	; 0x30
  404db4:	d043      	beq.n	404e3e <_strtoul_r+0xda>
  404db6:	230a      	movs	r3, #10
  404db8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 404e88 <_strtoul_r+0x124>
  404dbc:	469a      	mov	sl, r3
  404dbe:	f04f 0b05 	mov.w	fp, #5
  404dc2:	2700      	movs	r7, #0
  404dc4:	46bc      	mov	ip, r7
  404dc6:	e00c      	b.n	404de2 <_strtoul_r+0x7e>
  404dc8:	3d30      	subs	r5, #48	; 0x30
  404dca:	42ab      	cmp	r3, r5
  404dcc:	dd19      	ble.n	404e02 <_strtoul_r+0x9e>
  404dce:	1c7e      	adds	r6, r7, #1
  404dd0:	d005      	beq.n	404dde <_strtoul_r+0x7a>
  404dd2:	45cc      	cmp	ip, r9
  404dd4:	d824      	bhi.n	404e20 <_strtoul_r+0xbc>
  404dd6:	d021      	beq.n	404e1c <_strtoul_r+0xb8>
  404dd8:	fb0a 5c0c 	mla	ip, sl, ip, r5
  404ddc:	2701      	movs	r7, #1
  404dde:	f814 5b01 	ldrb.w	r5, [r4], #1
  404de2:	eb0e 0605 	add.w	r6, lr, r5
  404de6:	7876      	ldrb	r6, [r6, #1]
  404de8:	f016 0f04 	tst.w	r6, #4
  404dec:	d1ec      	bne.n	404dc8 <_strtoul_r+0x64>
  404dee:	f016 0603 	ands.w	r6, r6, #3
  404df2:	d006      	beq.n	404e02 <_strtoul_r+0x9e>
  404df4:	2e01      	cmp	r6, #1
  404df6:	bf0c      	ite	eq
  404df8:	2637      	moveq	r6, #55	; 0x37
  404dfa:	2657      	movne	r6, #87	; 0x57
  404dfc:	1bad      	subs	r5, r5, r6
  404dfe:	42ab      	cmp	r3, r5
  404e00:	dce5      	bgt.n	404dce <_strtoul_r+0x6a>
  404e02:	2f00      	cmp	r7, #0
  404e04:	db11      	blt.n	404e2a <_strtoul_r+0xc6>
  404e06:	f1c8 0000 	rsb	r0, r8, #0
  404e0a:	ea8c 0000 	eor.w	r0, ip, r0
  404e0e:	4440      	add	r0, r8
  404e10:	b14a      	cbz	r2, 404e26 <_strtoul_r+0xc2>
  404e12:	b107      	cbz	r7, 404e16 <_strtoul_r+0xb2>
  404e14:	1e61      	subs	r1, r4, #1
  404e16:	6011      	str	r1, [r2, #0]
  404e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e1c:	455d      	cmp	r5, fp
  404e1e:	dddb      	ble.n	404dd8 <_strtoul_r+0x74>
  404e20:	f04f 37ff 	mov.w	r7, #4294967295
  404e24:	e7db      	b.n	404dde <_strtoul_r+0x7a>
  404e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e2a:	2322      	movs	r3, #34	; 0x22
  404e2c:	6003      	str	r3, [r0, #0]
  404e2e:	f04f 30ff 	mov.w	r0, #4294967295
  404e32:	e7ed      	b.n	404e10 <_strtoul_r+0xac>
  404e34:	1cbc      	adds	r4, r7, #2
  404e36:	787d      	ldrb	r5, [r7, #1]
  404e38:	f04f 0801 	mov.w	r8, #1
  404e3c:	e7ac      	b.n	404d98 <_strtoul_r+0x34>
  404e3e:	7823      	ldrb	r3, [r4, #0]
  404e40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  404e44:	2b58      	cmp	r3, #88	; 0x58
  404e46:	d013      	beq.n	404e70 <_strtoul_r+0x10c>
  404e48:	2308      	movs	r3, #8
  404e4a:	469a      	mov	sl, r3
  404e4c:	f04f 0b07 	mov.w	fp, #7
  404e50:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
  404e54:	e7b5      	b.n	404dc2 <_strtoul_r+0x5e>
  404e56:	2d30      	cmp	r5, #48	; 0x30
  404e58:	d005      	beq.n	404e66 <_strtoul_r+0x102>
  404e5a:	f04f 0b0f 	mov.w	fp, #15
  404e5e:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
  404e62:	469a      	mov	sl, r3
  404e64:	e7ad      	b.n	404dc2 <_strtoul_r+0x5e>
  404e66:	7826      	ldrb	r6, [r4, #0]
  404e68:	f006 06df 	and.w	r6, r6, #223	; 0xdf
  404e6c:	2e58      	cmp	r6, #88	; 0x58
  404e6e:	d1f4      	bne.n	404e5a <_strtoul_r+0xf6>
  404e70:	f04f 0a10 	mov.w	sl, #16
  404e74:	7865      	ldrb	r5, [r4, #1]
  404e76:	4653      	mov	r3, sl
  404e78:	f04f 0b0f 	mov.w	fp, #15
  404e7c:	3402      	adds	r4, #2
  404e7e:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
  404e82:	e79e      	b.n	404dc2 <_strtoul_r+0x5e>
  404e84:	200004c4 	.word	0x200004c4
  404e88:	19999999 	.word	0x19999999

00404e8c <_strtoull_r>:
  404e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e90:	4c72      	ldr	r4, [pc, #456]	; (40505c <_strtoull_r+0x1d0>)
  404e92:	b087      	sub	sp, #28
  404e94:	4692      	mov	sl, r2
  404e96:	468b      	mov	fp, r1
  404e98:	9004      	str	r0, [sp, #16]
  404e9a:	4699      	mov	r9, r3
  404e9c:	460a      	mov	r2, r1
  404e9e:	f8d4 8000 	ldr.w	r8, [r4]
  404ea2:	e000      	b.n	404ea6 <_strtoull_r+0x1a>
  404ea4:	462a      	mov	r2, r5
  404ea6:	4615      	mov	r5, r2
  404ea8:	f815 4b01 	ldrb.w	r4, [r5], #1
  404eac:	eb08 0304 	add.w	r3, r8, r4
  404eb0:	785b      	ldrb	r3, [r3, #1]
  404eb2:	f003 0308 	and.w	r3, r3, #8
  404eb6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  404eba:	2b00      	cmp	r3, #0
  404ebc:	d1f2      	bne.n	404ea4 <_strtoull_r+0x18>
  404ebe:	2c2d      	cmp	r4, #45	; 0x2d
  404ec0:	f000 8099 	beq.w	404ff6 <_strtoull_r+0x16a>
  404ec4:	2c2b      	cmp	r4, #43	; 0x2b
  404ec6:	bf08      	it	eq
  404ec8:	7854      	ldrbeq	r4, [r2, #1]
  404eca:	9003      	str	r0, [sp, #12]
  404ecc:	bf08      	it	eq
  404ece:	1c95      	addeq	r5, r2, #2
  404ed0:	f1b9 0f00 	cmp.w	r9, #0
  404ed4:	d01d      	beq.n	404f12 <_strtoull_r+0x86>
  404ed6:	f1b9 0f10 	cmp.w	r9, #16
  404eda:	f000 80a1 	beq.w	405020 <_strtoull_r+0x194>
  404ede:	464e      	mov	r6, r9
  404ee0:	17f7      	asrs	r7, r6, #31
  404ee2:	464a      	mov	r2, r9
  404ee4:	463b      	mov	r3, r7
  404ee6:	f04f 30ff 	mov.w	r0, #4294967295
  404eea:	f04f 31ff 	mov.w	r1, #4294967295
  404eee:	f000 faf3 	bl	4054d8 <__aeabi_uldivmod>
  404ef2:	464a      	mov	r2, r9
  404ef4:	9005      	str	r0, [sp, #20]
  404ef6:	9100      	str	r1, [sp, #0]
  404ef8:	463b      	mov	r3, r7
  404efa:	f04f 30ff 	mov.w	r0, #4294967295
  404efe:	f04f 31ff 	mov.w	r1, #4294967295
  404f02:	f000 fae9 	bl	4054d8 <__aeabi_uldivmod>
  404f06:	f8dd c014 	ldr.w	ip, [sp, #20]
  404f0a:	9202      	str	r2, [sp, #8]
  404f0c:	4660      	mov	r0, ip
  404f0e:	9900      	ldr	r1, [sp, #0]
  404f10:	e00a      	b.n	404f28 <_strtoull_r+0x9c>
  404f12:	2c30      	cmp	r4, #48	; 0x30
  404f14:	d074      	beq.n	405000 <_strtoull_r+0x174>
  404f16:	2305      	movs	r3, #5
  404f18:	4951      	ldr	r1, [pc, #324]	; (405060 <_strtoull_r+0x1d4>)
  404f1a:	9302      	str	r3, [sp, #8]
  404f1c:	f04f 3099 	mov.w	r0, #2576980377	; 0x99999999
  404f20:	260a      	movs	r6, #10
  404f22:	2700      	movs	r7, #0
  404f24:	f04f 090a 	mov.w	r9, #10
  404f28:	f04f 0e00 	mov.w	lr, #0
  404f2c:	2200      	movs	r2, #0
  404f2e:	2300      	movs	r3, #0
  404f30:	e9cd 6700 	strd	r6, r7, [sp]
  404f34:	e01d      	b.n	404f72 <_strtoull_r+0xe6>
  404f36:	3c30      	subs	r4, #48	; 0x30
  404f38:	45a1      	cmp	r9, r4
  404f3a:	dd2f      	ble.n	404f9c <_strtoull_r+0x110>
  404f3c:	f1be 3fff 	cmp.w	lr, #4294967295
  404f40:	d015      	beq.n	404f6e <_strtoull_r+0xe2>
  404f42:	4299      	cmp	r1, r3
  404f44:	bf08      	it	eq
  404f46:	4290      	cmpeq	r0, r2
  404f48:	d348      	bcc.n	404fdc <_strtoull_r+0x150>
  404f4a:	428b      	cmp	r3, r1
  404f4c:	bf08      	it	eq
  404f4e:	4282      	cmpeq	r2, r0
  404f50:	d041      	beq.n	404fd6 <_strtoull_r+0x14a>
  404f52:	9e01      	ldr	r6, [sp, #4]
  404f54:	fb02 fe06 	mul.w	lr, r2, r6
  404f58:	9e00      	ldr	r6, [sp, #0]
  404f5a:	fb06 ee03 	mla	lr, r6, r3, lr
  404f5e:	fba2 2306 	umull	r2, r3, r2, r6
  404f62:	4473      	add	r3, lr
  404f64:	1912      	adds	r2, r2, r4
  404f66:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
  404f6a:	f04f 0e01 	mov.w	lr, #1
  404f6e:	f815 4b01 	ldrb.w	r4, [r5], #1
  404f72:	eb08 0c04 	add.w	ip, r8, r4
  404f76:	f89c c001 	ldrb.w	ip, [ip, #1]
  404f7a:	f01c 0f04 	tst.w	ip, #4
  404f7e:	d1da      	bne.n	404f36 <_strtoull_r+0xaa>
  404f80:	f01c 0c03 	ands.w	ip, ip, #3
  404f84:	d00a      	beq.n	404f9c <_strtoull_r+0x110>
  404f86:	f1bc 0f01 	cmp.w	ip, #1
  404f8a:	bf0c      	ite	eq
  404f8c:	f04f 0c37 	moveq.w	ip, #55	; 0x37
  404f90:	f04f 0c57 	movne.w	ip, #87	; 0x57
  404f94:	ebcc 0404 	rsb	r4, ip, r4
  404f98:	45a1      	cmp	r9, r4
  404f9a:	dccf      	bgt.n	404f3c <_strtoull_r+0xb0>
  404f9c:	f1be 0f00 	cmp.w	lr, #0
  404fa0:	db21      	blt.n	404fe6 <_strtoull_r+0x15a>
  404fa2:	9903      	ldr	r1, [sp, #12]
  404fa4:	460e      	mov	r6, r1
  404fa6:	4276      	negs	r6, r6
  404fa8:	ea4f 77e1 	mov.w	r7, r1, asr #31
  404fac:	4608      	mov	r0, r1
  404fae:	ea82 0206 	eor.w	r2, r2, r6
  404fb2:	4639      	mov	r1, r7
  404fb4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404fb8:	407b      	eors	r3, r7
  404fba:	1880      	adds	r0, r0, r2
  404fbc:	4159      	adcs	r1, r3
  404fbe:	f1ba 0f00 	cmp.w	sl, #0
  404fc2:	d005      	beq.n	404fd0 <_strtoull_r+0x144>
  404fc4:	f1be 0f00 	cmp.w	lr, #0
  404fc8:	d00b      	beq.n	404fe2 <_strtoull_r+0x156>
  404fca:	3d01      	subs	r5, #1
  404fcc:	f8ca 5000 	str.w	r5, [sl]
  404fd0:	b007      	add	sp, #28
  404fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404fd6:	9e02      	ldr	r6, [sp, #8]
  404fd8:	42b4      	cmp	r4, r6
  404fda:	ddba      	ble.n	404f52 <_strtoull_r+0xc6>
  404fdc:	f04f 3eff 	mov.w	lr, #4294967295
  404fe0:	e7c5      	b.n	404f6e <_strtoull_r+0xe2>
  404fe2:	465d      	mov	r5, fp
  404fe4:	e7f2      	b.n	404fcc <_strtoull_r+0x140>
  404fe6:	9a04      	ldr	r2, [sp, #16]
  404fe8:	2322      	movs	r3, #34	; 0x22
  404fea:	6013      	str	r3, [r2, #0]
  404fec:	f04f 30ff 	mov.w	r0, #4294967295
  404ff0:	f04f 31ff 	mov.w	r1, #4294967295
  404ff4:	e7e3      	b.n	404fbe <_strtoull_r+0x132>
  404ff6:	2301      	movs	r3, #1
  404ff8:	1c95      	adds	r5, r2, #2
  404ffa:	7854      	ldrb	r4, [r2, #1]
  404ffc:	9303      	str	r3, [sp, #12]
  404ffe:	e767      	b.n	404ed0 <_strtoull_r+0x44>
  405000:	782b      	ldrb	r3, [r5, #0]
  405002:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405006:	2b58      	cmp	r3, #88	; 0x58
  405008:	d01a      	beq.n	405040 <_strtoull_r+0x1b4>
  40500a:	2307      	movs	r3, #7
  40500c:	9302      	str	r3, [sp, #8]
  40500e:	f04f 30ff 	mov.w	r0, #4294967295
  405012:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
  405016:	2608      	movs	r6, #8
  405018:	2700      	movs	r7, #0
  40501a:	f04f 0908 	mov.w	r9, #8
  40501e:	e783      	b.n	404f28 <_strtoull_r+0x9c>
  405020:	2c30      	cmp	r4, #48	; 0x30
  405022:	d008      	beq.n	405036 <_strtoull_r+0x1aa>
  405024:	230f      	movs	r3, #15
  405026:	9302      	str	r3, [sp, #8]
  405028:	f04f 30ff 	mov.w	r0, #4294967295
  40502c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
  405030:	2610      	movs	r6, #16
  405032:	2700      	movs	r7, #0
  405034:	e778      	b.n	404f28 <_strtoull_r+0x9c>
  405036:	782b      	ldrb	r3, [r5, #0]
  405038:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  40503c:	2b58      	cmp	r3, #88	; 0x58
  40503e:	d1f1      	bne.n	405024 <_strtoull_r+0x198>
  405040:	230f      	movs	r3, #15
  405042:	9302      	str	r3, [sp, #8]
  405044:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
  405048:	786c      	ldrb	r4, [r5, #1]
  40504a:	9300      	str	r3, [sp, #0]
  40504c:	3502      	adds	r5, #2
  40504e:	f04f 3cff 	mov.w	ip, #4294967295
  405052:	2610      	movs	r6, #16
  405054:	2700      	movs	r7, #0
  405056:	f04f 0910 	mov.w	r9, #16
  40505a:	e757      	b.n	404f0c <_strtoull_r+0x80>
  40505c:	200004c4 	.word	0x200004c4
  405060:	19999999 	.word	0x19999999

00405064 <__submore>:
  405064:	f101 0340 	add.w	r3, r1, #64	; 0x40
  405068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40506c:	460c      	mov	r4, r1
  40506e:	6b09      	ldr	r1, [r1, #48]	; 0x30
  405070:	4299      	cmp	r1, r3
  405072:	d014      	beq.n	40509e <__submore+0x3a>
  405074:	6b66      	ldr	r6, [r4, #52]	; 0x34
  405076:	0077      	lsls	r7, r6, #1
  405078:	463a      	mov	r2, r7
  40507a:	f7ff f9e7 	bl	40444c <_realloc_r>
  40507e:	4605      	mov	r5, r0
  405080:	b340      	cbz	r0, 4050d4 <__submore+0x70>
  405082:	eb00 0806 	add.w	r8, r0, r6
  405086:	4632      	mov	r2, r6
  405088:	4640      	mov	r0, r8
  40508a:	4629      	mov	r1, r5
  40508c:	f7ff f8dc 	bl	404248 <memcpy>
  405090:	f8c4 8000 	str.w	r8, [r4]
  405094:	6325      	str	r5, [r4, #48]	; 0x30
  405096:	6367      	str	r7, [r4, #52]	; 0x34
  405098:	2000      	movs	r0, #0
  40509a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40509e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4050a2:	f7fe fdb1 	bl	403c08 <_malloc_r>
  4050a6:	b1a8      	cbz	r0, 4050d4 <__submore+0x70>
  4050a8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  4050ac:	6320      	str	r0, [r4, #48]	; 0x30
  4050ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4050b2:	6362      	str	r2, [r4, #52]	; 0x34
  4050b4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  4050b8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  4050bc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  4050c0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  4050c4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  4050c8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  4050cc:	6020      	str	r0, [r4, #0]
  4050ce:	2000      	movs	r0, #0
  4050d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050d4:	f04f 30ff 	mov.w	r0, #4294967295
  4050d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004050dc <_ungetc_r>:
  4050dc:	b570      	push	{r4, r5, r6, lr}
  4050de:	460d      	mov	r5, r1
  4050e0:	3101      	adds	r1, #1
  4050e2:	d033      	beq.n	40514c <_ungetc_r+0x70>
  4050e4:	4614      	mov	r4, r2
  4050e6:	4606      	mov	r6, r0
  4050e8:	b110      	cbz	r0, 4050f0 <_ungetc_r+0x14>
  4050ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4050ec:	2b00      	cmp	r3, #0
  4050ee:	d030      	beq.n	405152 <_ungetc_r+0x76>
  4050f0:	89a3      	ldrh	r3, [r4, #12]
  4050f2:	049a      	lsls	r2, r3, #18
  4050f4:	d405      	bmi.n	405102 <_ungetc_r+0x26>
  4050f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4050f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4050fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405100:	6662      	str	r2, [r4, #100]	; 0x64
  405102:	f023 0320 	bic.w	r3, r3, #32
  405106:	b29b      	uxth	r3, r3
  405108:	b29a      	uxth	r2, r3
  40510a:	0750      	lsls	r0, r2, #29
  40510c:	81a3      	strh	r3, [r4, #12]
  40510e:	d406      	bmi.n	40511e <_ungetc_r+0x42>
  405110:	06d1      	lsls	r1, r2, #27
  405112:	d51b      	bpl.n	40514c <_ungetc_r+0x70>
  405114:	0712      	lsls	r2, r2, #28
  405116:	d438      	bmi.n	40518a <_ungetc_r+0xae>
  405118:	f043 0304 	orr.w	r3, r3, #4
  40511c:	81a3      	strh	r3, [r4, #12]
  40511e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  405120:	b2ed      	uxtb	r5, r5
  405122:	b1cb      	cbz	r3, 405158 <_ungetc_r+0x7c>
  405124:	6862      	ldr	r2, [r4, #4]
  405126:	6b63      	ldr	r3, [r4, #52]	; 0x34
  405128:	429a      	cmp	r2, r3
  40512a:	da09      	bge.n	405140 <_ungetc_r+0x64>
  40512c:	6823      	ldr	r3, [r4, #0]
  40512e:	1e5a      	subs	r2, r3, #1
  405130:	6022      	str	r2, [r4, #0]
  405132:	f803 5c01 	strb.w	r5, [r3, #-1]
  405136:	6863      	ldr	r3, [r4, #4]
  405138:	3301      	adds	r3, #1
  40513a:	4628      	mov	r0, r5
  40513c:	6063      	str	r3, [r4, #4]
  40513e:	bd70      	pop	{r4, r5, r6, pc}
  405140:	4630      	mov	r0, r6
  405142:	4621      	mov	r1, r4
  405144:	f7ff ff8e 	bl	405064 <__submore>
  405148:	2800      	cmp	r0, #0
  40514a:	d0ef      	beq.n	40512c <_ungetc_r+0x50>
  40514c:	f04f 30ff 	mov.w	r0, #4294967295
  405150:	bd70      	pop	{r4, r5, r6, pc}
  405152:	f7fe f873 	bl	40323c <__sinit>
  405156:	e7cb      	b.n	4050f0 <_ungetc_r+0x14>
  405158:	6922      	ldr	r2, [r4, #16]
  40515a:	6823      	ldr	r3, [r4, #0]
  40515c:	b12a      	cbz	r2, 40516a <_ungetc_r+0x8e>
  40515e:	429a      	cmp	r2, r3
  405160:	d203      	bcs.n	40516a <_ungetc_r+0x8e>
  405162:	f813 0c01 	ldrb.w	r0, [r3, #-1]
  405166:	42a8      	cmp	r0, r5
  405168:	d01c      	beq.n	4051a4 <_ungetc_r+0xc8>
  40516a:	63a3      	str	r3, [r4, #56]	; 0x38
  40516c:	4623      	mov	r3, r4
  40516e:	6860      	ldr	r0, [r4, #4]
  405170:	63e0      	str	r0, [r4, #60]	; 0x3c
  405172:	f104 0140 	add.w	r1, r4, #64	; 0x40
  405176:	2203      	movs	r2, #3
  405178:	6362      	str	r2, [r4, #52]	; 0x34
  40517a:	6321      	str	r1, [r4, #48]	; 0x30
  40517c:	f803 5f42 	strb.w	r5, [r3, #66]!
  405180:	2201      	movs	r2, #1
  405182:	6023      	str	r3, [r4, #0]
  405184:	4628      	mov	r0, r5
  405186:	6062      	str	r2, [r4, #4]
  405188:	bd70      	pop	{r4, r5, r6, pc}
  40518a:	4630      	mov	r0, r6
  40518c:	4621      	mov	r1, r4
  40518e:	f7fd ffaf 	bl	4030f0 <_fflush_r>
  405192:	2800      	cmp	r0, #0
  405194:	d1da      	bne.n	40514c <_ungetc_r+0x70>
  405196:	89a3      	ldrh	r3, [r4, #12]
  405198:	60a0      	str	r0, [r4, #8]
  40519a:	f023 0308 	bic.w	r3, r3, #8
  40519e:	61a0      	str	r0, [r4, #24]
  4051a0:	b29b      	uxth	r3, r3
  4051a2:	e7b9      	b.n	405118 <_ungetc_r+0x3c>
  4051a4:	6862      	ldr	r2, [r4, #4]
  4051a6:	3b01      	subs	r3, #1
  4051a8:	3201      	adds	r2, #1
  4051aa:	6023      	str	r3, [r4, #0]
  4051ac:	6062      	str	r2, [r4, #4]
  4051ae:	bd70      	pop	{r4, r5, r6, pc}

004051b0 <__swbuf_r>:
  4051b0:	b570      	push	{r4, r5, r6, lr}
  4051b2:	460d      	mov	r5, r1
  4051b4:	4614      	mov	r4, r2
  4051b6:	4606      	mov	r6, r0
  4051b8:	b110      	cbz	r0, 4051c0 <__swbuf_r+0x10>
  4051ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4051bc:	2b00      	cmp	r3, #0
  4051be:	d048      	beq.n	405252 <__swbuf_r+0xa2>
  4051c0:	89a2      	ldrh	r2, [r4, #12]
  4051c2:	69a3      	ldr	r3, [r4, #24]
  4051c4:	60a3      	str	r3, [r4, #8]
  4051c6:	b291      	uxth	r1, r2
  4051c8:	0708      	lsls	r0, r1, #28
  4051ca:	d538      	bpl.n	40523e <__swbuf_r+0x8e>
  4051cc:	6923      	ldr	r3, [r4, #16]
  4051ce:	2b00      	cmp	r3, #0
  4051d0:	d035      	beq.n	40523e <__swbuf_r+0x8e>
  4051d2:	0489      	lsls	r1, r1, #18
  4051d4:	b2ed      	uxtb	r5, r5
  4051d6:	d515      	bpl.n	405204 <__swbuf_r+0x54>
  4051d8:	6822      	ldr	r2, [r4, #0]
  4051da:	6961      	ldr	r1, [r4, #20]
  4051dc:	1ad3      	subs	r3, r2, r3
  4051de:	428b      	cmp	r3, r1
  4051e0:	da1c      	bge.n	40521c <__swbuf_r+0x6c>
  4051e2:	3301      	adds	r3, #1
  4051e4:	68a1      	ldr	r1, [r4, #8]
  4051e6:	1c50      	adds	r0, r2, #1
  4051e8:	3901      	subs	r1, #1
  4051ea:	60a1      	str	r1, [r4, #8]
  4051ec:	6020      	str	r0, [r4, #0]
  4051ee:	7015      	strb	r5, [r2, #0]
  4051f0:	6962      	ldr	r2, [r4, #20]
  4051f2:	429a      	cmp	r2, r3
  4051f4:	d01a      	beq.n	40522c <__swbuf_r+0x7c>
  4051f6:	89a3      	ldrh	r3, [r4, #12]
  4051f8:	07db      	lsls	r3, r3, #31
  4051fa:	d501      	bpl.n	405200 <__swbuf_r+0x50>
  4051fc:	2d0a      	cmp	r5, #10
  4051fe:	d015      	beq.n	40522c <__swbuf_r+0x7c>
  405200:	4628      	mov	r0, r5
  405202:	bd70      	pop	{r4, r5, r6, pc}
  405204:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405206:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40520a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40520e:	81a2      	strh	r2, [r4, #12]
  405210:	6822      	ldr	r2, [r4, #0]
  405212:	6661      	str	r1, [r4, #100]	; 0x64
  405214:	6961      	ldr	r1, [r4, #20]
  405216:	1ad3      	subs	r3, r2, r3
  405218:	428b      	cmp	r3, r1
  40521a:	dbe2      	blt.n	4051e2 <__swbuf_r+0x32>
  40521c:	4630      	mov	r0, r6
  40521e:	4621      	mov	r1, r4
  405220:	f7fd ff66 	bl	4030f0 <_fflush_r>
  405224:	b940      	cbnz	r0, 405238 <__swbuf_r+0x88>
  405226:	6822      	ldr	r2, [r4, #0]
  405228:	2301      	movs	r3, #1
  40522a:	e7db      	b.n	4051e4 <__swbuf_r+0x34>
  40522c:	4630      	mov	r0, r6
  40522e:	4621      	mov	r1, r4
  405230:	f7fd ff5e 	bl	4030f0 <_fflush_r>
  405234:	2800      	cmp	r0, #0
  405236:	d0e3      	beq.n	405200 <__swbuf_r+0x50>
  405238:	f04f 30ff 	mov.w	r0, #4294967295
  40523c:	bd70      	pop	{r4, r5, r6, pc}
  40523e:	4630      	mov	r0, r6
  405240:	4621      	mov	r1, r4
  405242:	f7fd fe39 	bl	402eb8 <__swsetup_r>
  405246:	2800      	cmp	r0, #0
  405248:	d1f6      	bne.n	405238 <__swbuf_r+0x88>
  40524a:	89a2      	ldrh	r2, [r4, #12]
  40524c:	6923      	ldr	r3, [r4, #16]
  40524e:	b291      	uxth	r1, r2
  405250:	e7bf      	b.n	4051d2 <__swbuf_r+0x22>
  405252:	f7fd fff3 	bl	40323c <__sinit>
  405256:	e7b3      	b.n	4051c0 <__swbuf_r+0x10>

00405258 <_wcrtomb_r>:
  405258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40525c:	4605      	mov	r5, r0
  40525e:	b086      	sub	sp, #24
  405260:	461e      	mov	r6, r3
  405262:	460c      	mov	r4, r1
  405264:	b1a1      	cbz	r1, 405290 <_wcrtomb_r+0x38>
  405266:	4b10      	ldr	r3, [pc, #64]	; (4052a8 <_wcrtomb_r+0x50>)
  405268:	4617      	mov	r7, r2
  40526a:	f8d3 8000 	ldr.w	r8, [r3]
  40526e:	f7fe fc49 	bl	403b04 <__locale_charset>
  405272:	9600      	str	r6, [sp, #0]
  405274:	4603      	mov	r3, r0
  405276:	4621      	mov	r1, r4
  405278:	463a      	mov	r2, r7
  40527a:	4628      	mov	r0, r5
  40527c:	47c0      	blx	r8
  40527e:	1c43      	adds	r3, r0, #1
  405280:	d103      	bne.n	40528a <_wcrtomb_r+0x32>
  405282:	2200      	movs	r2, #0
  405284:	238a      	movs	r3, #138	; 0x8a
  405286:	6032      	str	r2, [r6, #0]
  405288:	602b      	str	r3, [r5, #0]
  40528a:	b006      	add	sp, #24
  40528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405290:	4b05      	ldr	r3, [pc, #20]	; (4052a8 <_wcrtomb_r+0x50>)
  405292:	681f      	ldr	r7, [r3, #0]
  405294:	f7fe fc36 	bl	403b04 <__locale_charset>
  405298:	9600      	str	r6, [sp, #0]
  40529a:	4603      	mov	r3, r0
  40529c:	4622      	mov	r2, r4
  40529e:	4628      	mov	r0, r5
  4052a0:	a903      	add	r1, sp, #12
  4052a2:	47b8      	blx	r7
  4052a4:	e7eb      	b.n	40527e <_wcrtomb_r+0x26>
  4052a6:	bf00      	nop
  4052a8:	20000900 	.word	0x20000900

004052ac <__ascii_wctomb>:
  4052ac:	b121      	cbz	r1, 4052b8 <__ascii_wctomb+0xc>
  4052ae:	2aff      	cmp	r2, #255	; 0xff
  4052b0:	d804      	bhi.n	4052bc <__ascii_wctomb+0x10>
  4052b2:	700a      	strb	r2, [r1, #0]
  4052b4:	2001      	movs	r0, #1
  4052b6:	4770      	bx	lr
  4052b8:	4608      	mov	r0, r1
  4052ba:	4770      	bx	lr
  4052bc:	238a      	movs	r3, #138	; 0x8a
  4052be:	6003      	str	r3, [r0, #0]
  4052c0:	f04f 30ff 	mov.w	r0, #4294967295
  4052c4:	4770      	bx	lr
  4052c6:	bf00      	nop

004052c8 <_write_r>:
  4052c8:	b570      	push	{r4, r5, r6, lr}
  4052ca:	4c08      	ldr	r4, [pc, #32]	; (4052ec <_write_r+0x24>)
  4052cc:	4606      	mov	r6, r0
  4052ce:	2500      	movs	r5, #0
  4052d0:	4608      	mov	r0, r1
  4052d2:	4611      	mov	r1, r2
  4052d4:	461a      	mov	r2, r3
  4052d6:	6025      	str	r5, [r4, #0]
  4052d8:	f7fa ffda 	bl	400290 <_write>
  4052dc:	1c43      	adds	r3, r0, #1
  4052de:	d000      	beq.n	4052e2 <_write_r+0x1a>
  4052e0:	bd70      	pop	{r4, r5, r6, pc}
  4052e2:	6823      	ldr	r3, [r4, #0]
  4052e4:	2b00      	cmp	r3, #0
  4052e6:	d0fb      	beq.n	4052e0 <_write_r+0x18>
  4052e8:	6033      	str	r3, [r6, #0]
  4052ea:	bd70      	pop	{r4, r5, r6, pc}
  4052ec:	20000a28 	.word	0x20000a28

004052f0 <__register_exitproc>:
  4052f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4052f4:	4c25      	ldr	r4, [pc, #148]	; (40538c <__register_exitproc+0x9c>)
  4052f6:	6825      	ldr	r5, [r4, #0]
  4052f8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4052fc:	4606      	mov	r6, r0
  4052fe:	4688      	mov	r8, r1
  405300:	4692      	mov	sl, r2
  405302:	4699      	mov	r9, r3
  405304:	b3cc      	cbz	r4, 40537a <__register_exitproc+0x8a>
  405306:	6860      	ldr	r0, [r4, #4]
  405308:	281f      	cmp	r0, #31
  40530a:	dc18      	bgt.n	40533e <__register_exitproc+0x4e>
  40530c:	1c43      	adds	r3, r0, #1
  40530e:	b17e      	cbz	r6, 405330 <__register_exitproc+0x40>
  405310:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  405314:	2101      	movs	r1, #1
  405316:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40531a:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  40531e:	fa01 f200 	lsl.w	r2, r1, r0
  405322:	4317      	orrs	r7, r2
  405324:	2e02      	cmp	r6, #2
  405326:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40532a:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40532e:	d01e      	beq.n	40536e <__register_exitproc+0x7e>
  405330:	3002      	adds	r0, #2
  405332:	6063      	str	r3, [r4, #4]
  405334:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  405338:	2000      	movs	r0, #0
  40533a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40533e:	4b14      	ldr	r3, [pc, #80]	; (405390 <__register_exitproc+0xa0>)
  405340:	b303      	cbz	r3, 405384 <__register_exitproc+0x94>
  405342:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405346:	f7fe fc57 	bl	403bf8 <malloc>
  40534a:	4604      	mov	r4, r0
  40534c:	b1d0      	cbz	r0, 405384 <__register_exitproc+0x94>
  40534e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  405352:	2700      	movs	r7, #0
  405354:	e880 0088 	stmia.w	r0, {r3, r7}
  405358:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40535c:	4638      	mov	r0, r7
  40535e:	2301      	movs	r3, #1
  405360:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  405364:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  405368:	2e00      	cmp	r6, #0
  40536a:	d0e1      	beq.n	405330 <__register_exitproc+0x40>
  40536c:	e7d0      	b.n	405310 <__register_exitproc+0x20>
  40536e:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  405372:	430a      	orrs	r2, r1
  405374:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  405378:	e7da      	b.n	405330 <__register_exitproc+0x40>
  40537a:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40537e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  405382:	e7c0      	b.n	405306 <__register_exitproc+0x16>
  405384:	f04f 30ff 	mov.w	r0, #4294967295
  405388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40538c:	00405e3c 	.word	0x00405e3c
  405390:	00403bf9 	.word	0x00403bf9

00405394 <_close_r>:
  405394:	b538      	push	{r3, r4, r5, lr}
  405396:	4c07      	ldr	r4, [pc, #28]	; (4053b4 <_close_r+0x20>)
  405398:	2300      	movs	r3, #0
  40539a:	4605      	mov	r5, r0
  40539c:	4608      	mov	r0, r1
  40539e:	6023      	str	r3, [r4, #0]
  4053a0:	f7fb fc18 	bl	400bd4 <_close>
  4053a4:	1c43      	adds	r3, r0, #1
  4053a6:	d000      	beq.n	4053aa <_close_r+0x16>
  4053a8:	bd38      	pop	{r3, r4, r5, pc}
  4053aa:	6823      	ldr	r3, [r4, #0]
  4053ac:	2b00      	cmp	r3, #0
  4053ae:	d0fb      	beq.n	4053a8 <_close_r+0x14>
  4053b0:	602b      	str	r3, [r5, #0]
  4053b2:	bd38      	pop	{r3, r4, r5, pc}
  4053b4:	20000a28 	.word	0x20000a28

004053b8 <_fclose_r>:
  4053b8:	2900      	cmp	r1, #0
  4053ba:	d03d      	beq.n	405438 <_fclose_r+0x80>
  4053bc:	b570      	push	{r4, r5, r6, lr}
  4053be:	4605      	mov	r5, r0
  4053c0:	460c      	mov	r4, r1
  4053c2:	b108      	cbz	r0, 4053c8 <_fclose_r+0x10>
  4053c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4053c6:	b37b      	cbz	r3, 405428 <_fclose_r+0x70>
  4053c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4053cc:	b90b      	cbnz	r3, 4053d2 <_fclose_r+0x1a>
  4053ce:	2000      	movs	r0, #0
  4053d0:	bd70      	pop	{r4, r5, r6, pc}
  4053d2:	4628      	mov	r0, r5
  4053d4:	4621      	mov	r1, r4
  4053d6:	f7fd fde1 	bl	402f9c <__sflush_r>
  4053da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4053dc:	4606      	mov	r6, r0
  4053de:	b133      	cbz	r3, 4053ee <_fclose_r+0x36>
  4053e0:	4628      	mov	r0, r5
  4053e2:	69e1      	ldr	r1, [r4, #28]
  4053e4:	4798      	blx	r3
  4053e6:	2800      	cmp	r0, #0
  4053e8:	bfb8      	it	lt
  4053ea:	f04f 36ff 	movlt.w	r6, #4294967295
  4053ee:	89a3      	ldrh	r3, [r4, #12]
  4053f0:	061b      	lsls	r3, r3, #24
  4053f2:	d41c      	bmi.n	40542e <_fclose_r+0x76>
  4053f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4053f6:	b141      	cbz	r1, 40540a <_fclose_r+0x52>
  4053f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4053fc:	4299      	cmp	r1, r3
  4053fe:	d002      	beq.n	405406 <_fclose_r+0x4e>
  405400:	4628      	mov	r0, r5
  405402:	f7fe f8bd 	bl	403580 <_free_r>
  405406:	2300      	movs	r3, #0
  405408:	6323      	str	r3, [r4, #48]	; 0x30
  40540a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40540c:	b121      	cbz	r1, 405418 <_fclose_r+0x60>
  40540e:	4628      	mov	r0, r5
  405410:	f7fe f8b6 	bl	403580 <_free_r>
  405414:	2300      	movs	r3, #0
  405416:	6463      	str	r3, [r4, #68]	; 0x44
  405418:	f7fd ff16 	bl	403248 <__sfp_lock_acquire>
  40541c:	2300      	movs	r3, #0
  40541e:	81a3      	strh	r3, [r4, #12]
  405420:	f7fd ff14 	bl	40324c <__sfp_lock_release>
  405424:	4630      	mov	r0, r6
  405426:	bd70      	pop	{r4, r5, r6, pc}
  405428:	f7fd ff08 	bl	40323c <__sinit>
  40542c:	e7cc      	b.n	4053c8 <_fclose_r+0x10>
  40542e:	4628      	mov	r0, r5
  405430:	6921      	ldr	r1, [r4, #16]
  405432:	f7fe f8a5 	bl	403580 <_free_r>
  405436:	e7dd      	b.n	4053f4 <_fclose_r+0x3c>
  405438:	2000      	movs	r0, #0
  40543a:	4770      	bx	lr

0040543c <_fstat_r>:
  40543c:	b538      	push	{r3, r4, r5, lr}
  40543e:	4c08      	ldr	r4, [pc, #32]	; (405460 <_fstat_r+0x24>)
  405440:	2300      	movs	r3, #0
  405442:	4605      	mov	r5, r0
  405444:	4608      	mov	r0, r1
  405446:	4611      	mov	r1, r2
  405448:	6023      	str	r3, [r4, #0]
  40544a:	f7fb fbc7 	bl	400bdc <_fstat>
  40544e:	1c43      	adds	r3, r0, #1
  405450:	d000      	beq.n	405454 <_fstat_r+0x18>
  405452:	bd38      	pop	{r3, r4, r5, pc}
  405454:	6823      	ldr	r3, [r4, #0]
  405456:	2b00      	cmp	r3, #0
  405458:	d0fb      	beq.n	405452 <_fstat_r+0x16>
  40545a:	602b      	str	r3, [r5, #0]
  40545c:	bd38      	pop	{r3, r4, r5, pc}
  40545e:	bf00      	nop
  405460:	20000a28 	.word	0x20000a28

00405464 <_isatty_r>:
  405464:	b538      	push	{r3, r4, r5, lr}
  405466:	4c07      	ldr	r4, [pc, #28]	; (405484 <_isatty_r+0x20>)
  405468:	2300      	movs	r3, #0
  40546a:	4605      	mov	r5, r0
  40546c:	4608      	mov	r0, r1
  40546e:	6023      	str	r3, [r4, #0]
  405470:	f7fb fbba 	bl	400be8 <_isatty>
  405474:	1c43      	adds	r3, r0, #1
  405476:	d000      	beq.n	40547a <_isatty_r+0x16>
  405478:	bd38      	pop	{r3, r4, r5, pc}
  40547a:	6823      	ldr	r3, [r4, #0]
  40547c:	2b00      	cmp	r3, #0
  40547e:	d0fb      	beq.n	405478 <_isatty_r+0x14>
  405480:	602b      	str	r3, [r5, #0]
  405482:	bd38      	pop	{r3, r4, r5, pc}
  405484:	20000a28 	.word	0x20000a28

00405488 <_lseek_r>:
  405488:	b570      	push	{r4, r5, r6, lr}
  40548a:	4c08      	ldr	r4, [pc, #32]	; (4054ac <_lseek_r+0x24>)
  40548c:	4606      	mov	r6, r0
  40548e:	2500      	movs	r5, #0
  405490:	4608      	mov	r0, r1
  405492:	4611      	mov	r1, r2
  405494:	461a      	mov	r2, r3
  405496:	6025      	str	r5, [r4, #0]
  405498:	f7fb fba8 	bl	400bec <_lseek>
  40549c:	1c43      	adds	r3, r0, #1
  40549e:	d000      	beq.n	4054a2 <_lseek_r+0x1a>
  4054a0:	bd70      	pop	{r4, r5, r6, pc}
  4054a2:	6823      	ldr	r3, [r4, #0]
  4054a4:	2b00      	cmp	r3, #0
  4054a6:	d0fb      	beq.n	4054a0 <_lseek_r+0x18>
  4054a8:	6033      	str	r3, [r6, #0]
  4054aa:	bd70      	pop	{r4, r5, r6, pc}
  4054ac:	20000a28 	.word	0x20000a28

004054b0 <_read_r>:
  4054b0:	b570      	push	{r4, r5, r6, lr}
  4054b2:	4c08      	ldr	r4, [pc, #32]	; (4054d4 <_read_r+0x24>)
  4054b4:	4606      	mov	r6, r0
  4054b6:	2500      	movs	r5, #0
  4054b8:	4608      	mov	r0, r1
  4054ba:	4611      	mov	r1, r2
  4054bc:	461a      	mov	r2, r3
  4054be:	6025      	str	r5, [r4, #0]
  4054c0:	f7fa fec8 	bl	400254 <_read>
  4054c4:	1c43      	adds	r3, r0, #1
  4054c6:	d000      	beq.n	4054ca <_read_r+0x1a>
  4054c8:	bd70      	pop	{r4, r5, r6, pc}
  4054ca:	6823      	ldr	r3, [r4, #0]
  4054cc:	2b00      	cmp	r3, #0
  4054ce:	d0fb      	beq.n	4054c8 <_read_r+0x18>
  4054d0:	6033      	str	r3, [r6, #0]
  4054d2:	bd70      	pop	{r4, r5, r6, pc}
  4054d4:	20000a28 	.word	0x20000a28

004054d8 <__aeabi_uldivmod>:
  4054d8:	b953      	cbnz	r3, 4054f0 <__aeabi_uldivmod+0x18>
  4054da:	b94a      	cbnz	r2, 4054f0 <__aeabi_uldivmod+0x18>
  4054dc:	2900      	cmp	r1, #0
  4054de:	bf08      	it	eq
  4054e0:	2800      	cmpeq	r0, #0
  4054e2:	bf1c      	itt	ne
  4054e4:	f04f 31ff 	movne.w	r1, #4294967295
  4054e8:	f04f 30ff 	movne.w	r0, #4294967295
  4054ec:	f000 b83c 	b.w	405568 <__aeabi_idiv0>
  4054f0:	b082      	sub	sp, #8
  4054f2:	46ec      	mov	ip, sp
  4054f4:	e92d 5000 	stmdb	sp!, {ip, lr}
  4054f8:	f000 f81e 	bl	405538 <__gnu_uldivmod_helper>
  4054fc:	f8dd e004 	ldr.w	lr, [sp, #4]
  405500:	b002      	add	sp, #8
  405502:	bc0c      	pop	{r2, r3}
  405504:	4770      	bx	lr
  405506:	bf00      	nop

00405508 <__gnu_ldivmod_helper>:
  405508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40550c:	9c06      	ldr	r4, [sp, #24]
  40550e:	4615      	mov	r5, r2
  405510:	4606      	mov	r6, r0
  405512:	460f      	mov	r7, r1
  405514:	4698      	mov	r8, r3
  405516:	f000 f829 	bl	40556c <__divdi3>
  40551a:	fb05 f301 	mul.w	r3, r5, r1
  40551e:	fb00 3808 	mla	r8, r0, r8, r3
  405522:	fba5 2300 	umull	r2, r3, r5, r0
  405526:	1ab2      	subs	r2, r6, r2
  405528:	4443      	add	r3, r8
  40552a:	eb67 0303 	sbc.w	r3, r7, r3
  40552e:	e9c4 2300 	strd	r2, r3, [r4]
  405532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405536:	bf00      	nop

00405538 <__gnu_uldivmod_helper>:
  405538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40553c:	9c06      	ldr	r4, [sp, #24]
  40553e:	4690      	mov	r8, r2
  405540:	4606      	mov	r6, r0
  405542:	460f      	mov	r7, r1
  405544:	461d      	mov	r5, r3
  405546:	f000 f95f 	bl	405808 <__udivdi3>
  40554a:	fb00 f505 	mul.w	r5, r0, r5
  40554e:	fba0 2308 	umull	r2, r3, r0, r8
  405552:	fb08 5501 	mla	r5, r8, r1, r5
  405556:	1ab2      	subs	r2, r6, r2
  405558:	442b      	add	r3, r5
  40555a:	eb67 0303 	sbc.w	r3, r7, r3
  40555e:	e9c4 2300 	strd	r2, r3, [r4]
  405562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405566:	bf00      	nop

00405568 <__aeabi_idiv0>:
  405568:	4770      	bx	lr
  40556a:	bf00      	nop

0040556c <__divdi3>:
  40556c:	2900      	cmp	r1, #0
  40556e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405572:	f2c0 80a6 	blt.w	4056c2 <__divdi3+0x156>
  405576:	2600      	movs	r6, #0
  405578:	2b00      	cmp	r3, #0
  40557a:	f2c0 809c 	blt.w	4056b6 <__divdi3+0x14a>
  40557e:	4688      	mov	r8, r1
  405580:	4694      	mov	ip, r2
  405582:	469e      	mov	lr, r3
  405584:	4615      	mov	r5, r2
  405586:	4604      	mov	r4, r0
  405588:	460f      	mov	r7, r1
  40558a:	2b00      	cmp	r3, #0
  40558c:	d13d      	bne.n	40560a <__divdi3+0x9e>
  40558e:	428a      	cmp	r2, r1
  405590:	d959      	bls.n	405646 <__divdi3+0xda>
  405592:	fab2 f382 	clz	r3, r2
  405596:	b13b      	cbz	r3, 4055a8 <__divdi3+0x3c>
  405598:	f1c3 0220 	rsb	r2, r3, #32
  40559c:	409f      	lsls	r7, r3
  40559e:	fa20 f202 	lsr.w	r2, r0, r2
  4055a2:	409d      	lsls	r5, r3
  4055a4:	4317      	orrs	r7, r2
  4055a6:	409c      	lsls	r4, r3
  4055a8:	0c29      	lsrs	r1, r5, #16
  4055aa:	0c22      	lsrs	r2, r4, #16
  4055ac:	fbb7 fef1 	udiv	lr, r7, r1
  4055b0:	b2a8      	uxth	r0, r5
  4055b2:	fb01 771e 	mls	r7, r1, lr, r7
  4055b6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  4055ba:	fb00 f30e 	mul.w	r3, r0, lr
  4055be:	42bb      	cmp	r3, r7
  4055c0:	d90a      	bls.n	4055d8 <__divdi3+0x6c>
  4055c2:	197f      	adds	r7, r7, r5
  4055c4:	f10e 32ff 	add.w	r2, lr, #4294967295
  4055c8:	f080 8105 	bcs.w	4057d6 <__divdi3+0x26a>
  4055cc:	42bb      	cmp	r3, r7
  4055ce:	f240 8102 	bls.w	4057d6 <__divdi3+0x26a>
  4055d2:	f1ae 0e02 	sub.w	lr, lr, #2
  4055d6:	442f      	add	r7, r5
  4055d8:	1aff      	subs	r7, r7, r3
  4055da:	b2a4      	uxth	r4, r4
  4055dc:	fbb7 f3f1 	udiv	r3, r7, r1
  4055e0:	fb01 7713 	mls	r7, r1, r3, r7
  4055e4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4055e8:	fb00 f003 	mul.w	r0, r0, r3
  4055ec:	42b8      	cmp	r0, r7
  4055ee:	d908      	bls.n	405602 <__divdi3+0x96>
  4055f0:	197f      	adds	r7, r7, r5
  4055f2:	f103 32ff 	add.w	r2, r3, #4294967295
  4055f6:	f080 80f0 	bcs.w	4057da <__divdi3+0x26e>
  4055fa:	42b8      	cmp	r0, r7
  4055fc:	f240 80ed 	bls.w	4057da <__divdi3+0x26e>
  405600:	3b02      	subs	r3, #2
  405602:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  405606:	2200      	movs	r2, #0
  405608:	e003      	b.n	405612 <__divdi3+0xa6>
  40560a:	428b      	cmp	r3, r1
  40560c:	d90f      	bls.n	40562e <__divdi3+0xc2>
  40560e:	2200      	movs	r2, #0
  405610:	4613      	mov	r3, r2
  405612:	1c34      	adds	r4, r6, #0
  405614:	bf18      	it	ne
  405616:	2401      	movne	r4, #1
  405618:	4260      	negs	r0, r4
  40561a:	f04f 0500 	mov.w	r5, #0
  40561e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  405622:	4058      	eors	r0, r3
  405624:	4051      	eors	r1, r2
  405626:	1900      	adds	r0, r0, r4
  405628:	4169      	adcs	r1, r5
  40562a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40562e:	fab3 f283 	clz	r2, r3
  405632:	2a00      	cmp	r2, #0
  405634:	f040 8086 	bne.w	405744 <__divdi3+0x1d8>
  405638:	428b      	cmp	r3, r1
  40563a:	d302      	bcc.n	405642 <__divdi3+0xd6>
  40563c:	4584      	cmp	ip, r0
  40563e:	f200 80db 	bhi.w	4057f8 <__divdi3+0x28c>
  405642:	2301      	movs	r3, #1
  405644:	e7e5      	b.n	405612 <__divdi3+0xa6>
  405646:	b912      	cbnz	r2, 40564e <__divdi3+0xe2>
  405648:	2301      	movs	r3, #1
  40564a:	fbb3 f5f2 	udiv	r5, r3, r2
  40564e:	fab5 f085 	clz	r0, r5
  405652:	2800      	cmp	r0, #0
  405654:	d13b      	bne.n	4056ce <__divdi3+0x162>
  405656:	1b78      	subs	r0, r7, r5
  405658:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40565c:	fa1f fc85 	uxth.w	ip, r5
  405660:	2201      	movs	r2, #1
  405662:	fbb0 f8fe 	udiv	r8, r0, lr
  405666:	0c21      	lsrs	r1, r4, #16
  405668:	fb0e 0718 	mls	r7, lr, r8, r0
  40566c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  405670:	fb0c f308 	mul.w	r3, ip, r8
  405674:	42bb      	cmp	r3, r7
  405676:	d907      	bls.n	405688 <__divdi3+0x11c>
  405678:	197f      	adds	r7, r7, r5
  40567a:	f108 31ff 	add.w	r1, r8, #4294967295
  40567e:	d202      	bcs.n	405686 <__divdi3+0x11a>
  405680:	42bb      	cmp	r3, r7
  405682:	f200 80bd 	bhi.w	405800 <__divdi3+0x294>
  405686:	4688      	mov	r8, r1
  405688:	1aff      	subs	r7, r7, r3
  40568a:	b2a4      	uxth	r4, r4
  40568c:	fbb7 f3fe 	udiv	r3, r7, lr
  405690:	fb0e 7713 	mls	r7, lr, r3, r7
  405694:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  405698:	fb0c fc03 	mul.w	ip, ip, r3
  40569c:	45bc      	cmp	ip, r7
  40569e:	d907      	bls.n	4056b0 <__divdi3+0x144>
  4056a0:	197f      	adds	r7, r7, r5
  4056a2:	f103 31ff 	add.w	r1, r3, #4294967295
  4056a6:	d202      	bcs.n	4056ae <__divdi3+0x142>
  4056a8:	45bc      	cmp	ip, r7
  4056aa:	f200 80a7 	bhi.w	4057fc <__divdi3+0x290>
  4056ae:	460b      	mov	r3, r1
  4056b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4056b4:	e7ad      	b.n	405612 <__divdi3+0xa6>
  4056b6:	4252      	negs	r2, r2
  4056b8:	ea6f 0606 	mvn.w	r6, r6
  4056bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4056c0:	e75d      	b.n	40557e <__divdi3+0x12>
  4056c2:	4240      	negs	r0, r0
  4056c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4056c8:	f04f 36ff 	mov.w	r6, #4294967295
  4056cc:	e754      	b.n	405578 <__divdi3+0xc>
  4056ce:	f1c0 0220 	rsb	r2, r0, #32
  4056d2:	fa24 f102 	lsr.w	r1, r4, r2
  4056d6:	fa07 f300 	lsl.w	r3, r7, r0
  4056da:	4085      	lsls	r5, r0
  4056dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4056e0:	40d7      	lsrs	r7, r2
  4056e2:	4319      	orrs	r1, r3
  4056e4:	fbb7 f2fe 	udiv	r2, r7, lr
  4056e8:	0c0b      	lsrs	r3, r1, #16
  4056ea:	fb0e 7712 	mls	r7, lr, r2, r7
  4056ee:	fa1f fc85 	uxth.w	ip, r5
  4056f2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  4056f6:	fb0c f702 	mul.w	r7, ip, r2
  4056fa:	429f      	cmp	r7, r3
  4056fc:	fa04 f400 	lsl.w	r4, r4, r0
  405700:	d907      	bls.n	405712 <__divdi3+0x1a6>
  405702:	195b      	adds	r3, r3, r5
  405704:	f102 30ff 	add.w	r0, r2, #4294967295
  405708:	d274      	bcs.n	4057f4 <__divdi3+0x288>
  40570a:	429f      	cmp	r7, r3
  40570c:	d972      	bls.n	4057f4 <__divdi3+0x288>
  40570e:	3a02      	subs	r2, #2
  405710:	442b      	add	r3, r5
  405712:	1bdf      	subs	r7, r3, r7
  405714:	b289      	uxth	r1, r1
  405716:	fbb7 f8fe 	udiv	r8, r7, lr
  40571a:	fb0e 7318 	mls	r3, lr, r8, r7
  40571e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  405722:	fb0c f708 	mul.w	r7, ip, r8
  405726:	429f      	cmp	r7, r3
  405728:	d908      	bls.n	40573c <__divdi3+0x1d0>
  40572a:	195b      	adds	r3, r3, r5
  40572c:	f108 31ff 	add.w	r1, r8, #4294967295
  405730:	d25c      	bcs.n	4057ec <__divdi3+0x280>
  405732:	429f      	cmp	r7, r3
  405734:	d95a      	bls.n	4057ec <__divdi3+0x280>
  405736:	f1a8 0802 	sub.w	r8, r8, #2
  40573a:	442b      	add	r3, r5
  40573c:	1bd8      	subs	r0, r3, r7
  40573e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  405742:	e78e      	b.n	405662 <__divdi3+0xf6>
  405744:	f1c2 0320 	rsb	r3, r2, #32
  405748:	fa2c f103 	lsr.w	r1, ip, r3
  40574c:	fa0e fe02 	lsl.w	lr, lr, r2
  405750:	fa20 f703 	lsr.w	r7, r0, r3
  405754:	ea41 0e0e 	orr.w	lr, r1, lr
  405758:	fa08 f002 	lsl.w	r0, r8, r2
  40575c:	fa28 f103 	lsr.w	r1, r8, r3
  405760:	ea4f 451e 	mov.w	r5, lr, lsr #16
  405764:	4338      	orrs	r0, r7
  405766:	fbb1 f8f5 	udiv	r8, r1, r5
  40576a:	0c03      	lsrs	r3, r0, #16
  40576c:	fb05 1118 	mls	r1, r5, r8, r1
  405770:	fa1f f78e 	uxth.w	r7, lr
  405774:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  405778:	fb07 f308 	mul.w	r3, r7, r8
  40577c:	428b      	cmp	r3, r1
  40577e:	fa0c fc02 	lsl.w	ip, ip, r2
  405782:	d909      	bls.n	405798 <__divdi3+0x22c>
  405784:	eb11 010e 	adds.w	r1, r1, lr
  405788:	f108 39ff 	add.w	r9, r8, #4294967295
  40578c:	d230      	bcs.n	4057f0 <__divdi3+0x284>
  40578e:	428b      	cmp	r3, r1
  405790:	d92e      	bls.n	4057f0 <__divdi3+0x284>
  405792:	f1a8 0802 	sub.w	r8, r8, #2
  405796:	4471      	add	r1, lr
  405798:	1ac9      	subs	r1, r1, r3
  40579a:	b280      	uxth	r0, r0
  40579c:	fbb1 f3f5 	udiv	r3, r1, r5
  4057a0:	fb05 1113 	mls	r1, r5, r3, r1
  4057a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4057a8:	fb07 f703 	mul.w	r7, r7, r3
  4057ac:	428f      	cmp	r7, r1
  4057ae:	d908      	bls.n	4057c2 <__divdi3+0x256>
  4057b0:	eb11 010e 	adds.w	r1, r1, lr
  4057b4:	f103 30ff 	add.w	r0, r3, #4294967295
  4057b8:	d216      	bcs.n	4057e8 <__divdi3+0x27c>
  4057ba:	428f      	cmp	r7, r1
  4057bc:	d914      	bls.n	4057e8 <__divdi3+0x27c>
  4057be:	3b02      	subs	r3, #2
  4057c0:	4471      	add	r1, lr
  4057c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4057c6:	1bc9      	subs	r1, r1, r7
  4057c8:	fba3 890c 	umull	r8, r9, r3, ip
  4057cc:	4549      	cmp	r1, r9
  4057ce:	d309      	bcc.n	4057e4 <__divdi3+0x278>
  4057d0:	d005      	beq.n	4057de <__divdi3+0x272>
  4057d2:	2200      	movs	r2, #0
  4057d4:	e71d      	b.n	405612 <__divdi3+0xa6>
  4057d6:	4696      	mov	lr, r2
  4057d8:	e6fe      	b.n	4055d8 <__divdi3+0x6c>
  4057da:	4613      	mov	r3, r2
  4057dc:	e711      	b.n	405602 <__divdi3+0x96>
  4057de:	4094      	lsls	r4, r2
  4057e0:	4544      	cmp	r4, r8
  4057e2:	d2f6      	bcs.n	4057d2 <__divdi3+0x266>
  4057e4:	3b01      	subs	r3, #1
  4057e6:	e7f4      	b.n	4057d2 <__divdi3+0x266>
  4057e8:	4603      	mov	r3, r0
  4057ea:	e7ea      	b.n	4057c2 <__divdi3+0x256>
  4057ec:	4688      	mov	r8, r1
  4057ee:	e7a5      	b.n	40573c <__divdi3+0x1d0>
  4057f0:	46c8      	mov	r8, r9
  4057f2:	e7d1      	b.n	405798 <__divdi3+0x22c>
  4057f4:	4602      	mov	r2, r0
  4057f6:	e78c      	b.n	405712 <__divdi3+0x1a6>
  4057f8:	4613      	mov	r3, r2
  4057fa:	e70a      	b.n	405612 <__divdi3+0xa6>
  4057fc:	3b02      	subs	r3, #2
  4057fe:	e757      	b.n	4056b0 <__divdi3+0x144>
  405800:	f1a8 0802 	sub.w	r8, r8, #2
  405804:	442f      	add	r7, r5
  405806:	e73f      	b.n	405688 <__divdi3+0x11c>

00405808 <__udivdi3>:
  405808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40580c:	2b00      	cmp	r3, #0
  40580e:	d144      	bne.n	40589a <__udivdi3+0x92>
  405810:	428a      	cmp	r2, r1
  405812:	4615      	mov	r5, r2
  405814:	4604      	mov	r4, r0
  405816:	d94f      	bls.n	4058b8 <__udivdi3+0xb0>
  405818:	fab2 f782 	clz	r7, r2
  40581c:	460e      	mov	r6, r1
  40581e:	b14f      	cbz	r7, 405834 <__udivdi3+0x2c>
  405820:	f1c7 0320 	rsb	r3, r7, #32
  405824:	40b9      	lsls	r1, r7
  405826:	fa20 f603 	lsr.w	r6, r0, r3
  40582a:	fa02 f507 	lsl.w	r5, r2, r7
  40582e:	430e      	orrs	r6, r1
  405830:	fa00 f407 	lsl.w	r4, r0, r7
  405834:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  405838:	0c23      	lsrs	r3, r4, #16
  40583a:	fbb6 f0fe 	udiv	r0, r6, lr
  40583e:	b2af      	uxth	r7, r5
  405840:	fb0e 6110 	mls	r1, lr, r0, r6
  405844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  405848:	fb07 f100 	mul.w	r1, r7, r0
  40584c:	4299      	cmp	r1, r3
  40584e:	d909      	bls.n	405864 <__udivdi3+0x5c>
  405850:	195b      	adds	r3, r3, r5
  405852:	f100 32ff 	add.w	r2, r0, #4294967295
  405856:	f080 80ec 	bcs.w	405a32 <__udivdi3+0x22a>
  40585a:	4299      	cmp	r1, r3
  40585c:	f240 80e9 	bls.w	405a32 <__udivdi3+0x22a>
  405860:	3802      	subs	r0, #2
  405862:	442b      	add	r3, r5
  405864:	1a5a      	subs	r2, r3, r1
  405866:	b2a4      	uxth	r4, r4
  405868:	fbb2 f3fe 	udiv	r3, r2, lr
  40586c:	fb0e 2213 	mls	r2, lr, r3, r2
  405870:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  405874:	fb07 f703 	mul.w	r7, r7, r3
  405878:	4297      	cmp	r7, r2
  40587a:	d908      	bls.n	40588e <__udivdi3+0x86>
  40587c:	1952      	adds	r2, r2, r5
  40587e:	f103 31ff 	add.w	r1, r3, #4294967295
  405882:	f080 80d8 	bcs.w	405a36 <__udivdi3+0x22e>
  405886:	4297      	cmp	r7, r2
  405888:	f240 80d5 	bls.w	405a36 <__udivdi3+0x22e>
  40588c:	3b02      	subs	r3, #2
  40588e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  405892:	2600      	movs	r6, #0
  405894:	4631      	mov	r1, r6
  405896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40589a:	428b      	cmp	r3, r1
  40589c:	d847      	bhi.n	40592e <__udivdi3+0x126>
  40589e:	fab3 f683 	clz	r6, r3
  4058a2:	2e00      	cmp	r6, #0
  4058a4:	d148      	bne.n	405938 <__udivdi3+0x130>
  4058a6:	428b      	cmp	r3, r1
  4058a8:	d302      	bcc.n	4058b0 <__udivdi3+0xa8>
  4058aa:	4282      	cmp	r2, r0
  4058ac:	f200 80cd 	bhi.w	405a4a <__udivdi3+0x242>
  4058b0:	2001      	movs	r0, #1
  4058b2:	4631      	mov	r1, r6
  4058b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4058b8:	b912      	cbnz	r2, 4058c0 <__udivdi3+0xb8>
  4058ba:	2501      	movs	r5, #1
  4058bc:	fbb5 f5f2 	udiv	r5, r5, r2
  4058c0:	fab5 f885 	clz	r8, r5
  4058c4:	f1b8 0f00 	cmp.w	r8, #0
  4058c8:	d177      	bne.n	4059ba <__udivdi3+0x1b2>
  4058ca:	1b4a      	subs	r2, r1, r5
  4058cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4058d0:	b2af      	uxth	r7, r5
  4058d2:	2601      	movs	r6, #1
  4058d4:	fbb2 f0fe 	udiv	r0, r2, lr
  4058d8:	0c23      	lsrs	r3, r4, #16
  4058da:	fb0e 2110 	mls	r1, lr, r0, r2
  4058de:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  4058e2:	fb07 f300 	mul.w	r3, r7, r0
  4058e6:	428b      	cmp	r3, r1
  4058e8:	d907      	bls.n	4058fa <__udivdi3+0xf2>
  4058ea:	1949      	adds	r1, r1, r5
  4058ec:	f100 32ff 	add.w	r2, r0, #4294967295
  4058f0:	d202      	bcs.n	4058f8 <__udivdi3+0xf0>
  4058f2:	428b      	cmp	r3, r1
  4058f4:	f200 80ba 	bhi.w	405a6c <__udivdi3+0x264>
  4058f8:	4610      	mov	r0, r2
  4058fa:	1ac9      	subs	r1, r1, r3
  4058fc:	b2a4      	uxth	r4, r4
  4058fe:	fbb1 f3fe 	udiv	r3, r1, lr
  405902:	fb0e 1113 	mls	r1, lr, r3, r1
  405906:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40590a:	fb07 f703 	mul.w	r7, r7, r3
  40590e:	42a7      	cmp	r7, r4
  405910:	d908      	bls.n	405924 <__udivdi3+0x11c>
  405912:	1964      	adds	r4, r4, r5
  405914:	f103 32ff 	add.w	r2, r3, #4294967295
  405918:	f080 808f 	bcs.w	405a3a <__udivdi3+0x232>
  40591c:	42a7      	cmp	r7, r4
  40591e:	f240 808c 	bls.w	405a3a <__udivdi3+0x232>
  405922:	3b02      	subs	r3, #2
  405924:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  405928:	4631      	mov	r1, r6
  40592a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40592e:	2600      	movs	r6, #0
  405930:	4630      	mov	r0, r6
  405932:	4631      	mov	r1, r6
  405934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405938:	f1c6 0420 	rsb	r4, r6, #32
  40593c:	fa22 f504 	lsr.w	r5, r2, r4
  405940:	40b3      	lsls	r3, r6
  405942:	432b      	orrs	r3, r5
  405944:	fa20 fc04 	lsr.w	ip, r0, r4
  405948:	fa01 f706 	lsl.w	r7, r1, r6
  40594c:	fa21 f504 	lsr.w	r5, r1, r4
  405950:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  405954:	ea4c 0707 	orr.w	r7, ip, r7
  405958:	fbb5 f8fe 	udiv	r8, r5, lr
  40595c:	0c39      	lsrs	r1, r7, #16
  40595e:	fb0e 5518 	mls	r5, lr, r8, r5
  405962:	fa1f fc83 	uxth.w	ip, r3
  405966:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  40596a:	fb0c f108 	mul.w	r1, ip, r8
  40596e:	42a9      	cmp	r1, r5
  405970:	fa02 f206 	lsl.w	r2, r2, r6
  405974:	d904      	bls.n	405980 <__udivdi3+0x178>
  405976:	18ed      	adds	r5, r5, r3
  405978:	f108 34ff 	add.w	r4, r8, #4294967295
  40597c:	d367      	bcc.n	405a4e <__udivdi3+0x246>
  40597e:	46a0      	mov	r8, r4
  405980:	1a6d      	subs	r5, r5, r1
  405982:	b2bf      	uxth	r7, r7
  405984:	fbb5 f4fe 	udiv	r4, r5, lr
  405988:	fb0e 5514 	mls	r5, lr, r4, r5
  40598c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  405990:	fb0c fc04 	mul.w	ip, ip, r4
  405994:	458c      	cmp	ip, r1
  405996:	d904      	bls.n	4059a2 <__udivdi3+0x19a>
  405998:	18c9      	adds	r1, r1, r3
  40599a:	f104 35ff 	add.w	r5, r4, #4294967295
  40599e:	d35c      	bcc.n	405a5a <__udivdi3+0x252>
  4059a0:	462c      	mov	r4, r5
  4059a2:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  4059a6:	ebcc 0101 	rsb	r1, ip, r1
  4059aa:	fba4 2302 	umull	r2, r3, r4, r2
  4059ae:	4299      	cmp	r1, r3
  4059b0:	d348      	bcc.n	405a44 <__udivdi3+0x23c>
  4059b2:	d044      	beq.n	405a3e <__udivdi3+0x236>
  4059b4:	4620      	mov	r0, r4
  4059b6:	2600      	movs	r6, #0
  4059b8:	e76c      	b.n	405894 <__udivdi3+0x8c>
  4059ba:	f1c8 0420 	rsb	r4, r8, #32
  4059be:	fa01 f308 	lsl.w	r3, r1, r8
  4059c2:	fa05 f508 	lsl.w	r5, r5, r8
  4059c6:	fa20 f704 	lsr.w	r7, r0, r4
  4059ca:	40e1      	lsrs	r1, r4
  4059cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4059d0:	431f      	orrs	r7, r3
  4059d2:	fbb1 f6fe 	udiv	r6, r1, lr
  4059d6:	0c3a      	lsrs	r2, r7, #16
  4059d8:	fb0e 1116 	mls	r1, lr, r6, r1
  4059dc:	fa1f fc85 	uxth.w	ip, r5
  4059e0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  4059e4:	fb0c f206 	mul.w	r2, ip, r6
  4059e8:	429a      	cmp	r2, r3
  4059ea:	fa00 f408 	lsl.w	r4, r0, r8
  4059ee:	d907      	bls.n	405a00 <__udivdi3+0x1f8>
  4059f0:	195b      	adds	r3, r3, r5
  4059f2:	f106 31ff 	add.w	r1, r6, #4294967295
  4059f6:	d237      	bcs.n	405a68 <__udivdi3+0x260>
  4059f8:	429a      	cmp	r2, r3
  4059fa:	d935      	bls.n	405a68 <__udivdi3+0x260>
  4059fc:	3e02      	subs	r6, #2
  4059fe:	442b      	add	r3, r5
  405a00:	1a9b      	subs	r3, r3, r2
  405a02:	b2bf      	uxth	r7, r7
  405a04:	fbb3 f0fe 	udiv	r0, r3, lr
  405a08:	fb0e 3310 	mls	r3, lr, r0, r3
  405a0c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  405a10:	fb0c f100 	mul.w	r1, ip, r0
  405a14:	4299      	cmp	r1, r3
  405a16:	d907      	bls.n	405a28 <__udivdi3+0x220>
  405a18:	195b      	adds	r3, r3, r5
  405a1a:	f100 32ff 	add.w	r2, r0, #4294967295
  405a1e:	d221      	bcs.n	405a64 <__udivdi3+0x25c>
  405a20:	4299      	cmp	r1, r3
  405a22:	d91f      	bls.n	405a64 <__udivdi3+0x25c>
  405a24:	3802      	subs	r0, #2
  405a26:	442b      	add	r3, r5
  405a28:	1a5a      	subs	r2, r3, r1
  405a2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  405a2e:	4667      	mov	r7, ip
  405a30:	e750      	b.n	4058d4 <__udivdi3+0xcc>
  405a32:	4610      	mov	r0, r2
  405a34:	e716      	b.n	405864 <__udivdi3+0x5c>
  405a36:	460b      	mov	r3, r1
  405a38:	e729      	b.n	40588e <__udivdi3+0x86>
  405a3a:	4613      	mov	r3, r2
  405a3c:	e772      	b.n	405924 <__udivdi3+0x11c>
  405a3e:	40b0      	lsls	r0, r6
  405a40:	4290      	cmp	r0, r2
  405a42:	d2b7      	bcs.n	4059b4 <__udivdi3+0x1ac>
  405a44:	1e60      	subs	r0, r4, #1
  405a46:	2600      	movs	r6, #0
  405a48:	e724      	b.n	405894 <__udivdi3+0x8c>
  405a4a:	4630      	mov	r0, r6
  405a4c:	e722      	b.n	405894 <__udivdi3+0x8c>
  405a4e:	42a9      	cmp	r1, r5
  405a50:	d995      	bls.n	40597e <__udivdi3+0x176>
  405a52:	f1a8 0802 	sub.w	r8, r8, #2
  405a56:	441d      	add	r5, r3
  405a58:	e792      	b.n	405980 <__udivdi3+0x178>
  405a5a:	458c      	cmp	ip, r1
  405a5c:	d9a0      	bls.n	4059a0 <__udivdi3+0x198>
  405a5e:	3c02      	subs	r4, #2
  405a60:	4419      	add	r1, r3
  405a62:	e79e      	b.n	4059a2 <__udivdi3+0x19a>
  405a64:	4610      	mov	r0, r2
  405a66:	e7df      	b.n	405a28 <__udivdi3+0x220>
  405a68:	460e      	mov	r6, r1
  405a6a:	e7c9      	b.n	405a00 <__udivdi3+0x1f8>
  405a6c:	3802      	subs	r0, #2
  405a6e:	4429      	add	r1, r5
  405a70:	e743      	b.n	4058fa <__udivdi3+0xf2>
  405a72:	bf00      	nop
  405a74:	654d0d0a 	.word	0x654d0d0a
  405a78:	3a20756e 	.word	0x3a20756e
  405a7c:	2d2d0d0a 	.word	0x2d2d0d0a
  405a80:	2d2d2d2d 	.word	0x2d2d2d2d
  405a84:	0000000d 	.word	0x0000000d
  405a88:	75252020 	.word	0x75252020
  405a8c:	6553203a 	.word	0x6553203a
  405a90:	50532074 	.word	0x50532074
  405a94:	3d204b43 	.word	0x3d204b43
  405a98:	6c372520 	.word	0x6c372520
  405a9c:	7a482075 	.word	0x7a482075
  405aa0:	00000d0a 	.word	0x00000d0a
  405aa4:	3a742020 	.word	0x3a742020
  405aa8:	72655020 	.word	0x72655020
  405aac:	6d726f66 	.word	0x6d726f66
  405ab0:	49505320 	.word	0x49505320
  405ab4:	73616d20 	.word	0x73616d20
  405ab8:	0a726574 	.word	0x0a726574
  405abc:	6820200d 	.word	0x6820200d
  405ac0:	6944203a 	.word	0x6944203a
  405ac4:	616c7073 	.word	0x616c7073
  405ac8:	68742079 	.word	0x68742079
  405acc:	6d207369 	.word	0x6d207369
  405ad0:	20756e65 	.word	0x20756e65
  405ad4:	69616761 	.word	0x69616761
  405ad8:	0d0d0a6e 	.word	0x0d0d0a6e
  405adc:	00000000 	.word	0x00000000
  405ae0:	202d492d 	.word	0x202d492d
  405ae4:	74696e49 	.word	0x74696e49
  405ae8:	696c6169 	.word	0x696c6169
  405aec:	5320657a 	.word	0x5320657a
  405af0:	61204950 	.word	0x61204950
  405af4:	616d2073 	.word	0x616d2073
  405af8:	72657473 	.word	0x72657473
  405afc:	0000000d 	.word	0x0000000d
  405b00:	70532d2d 	.word	0x70532d2d
  405b04:	78452069 	.word	0x78452069
  405b08:	6c706d61 	.word	0x6c706d61
  405b0c:	2d2d2065 	.word	0x2d2d2065
  405b10:	2d2d0a0d 	.word	0x2d2d0a0d
  405b14:	4d415320 	.word	0x4d415320
  405b18:	5f353547 	.word	0x5f353547
  405b1c:	414c5058 	.word	0x414c5058
  405b20:	44454e49 	.word	0x44454e49
  405b24:	4f52505f 	.word	0x4f52505f
  405b28:	0d2d2d20 	.word	0x0d2d2d20
  405b2c:	202d2d0a 	.word	0x202d2d0a
  405b30:	706d6f43 	.word	0x706d6f43
  405b34:	64656c69 	.word	0x64656c69
  405b38:	6553203a 	.word	0x6553203a
  405b3c:	35202070 	.word	0x35202070
  405b40:	31303220 	.word	0x31303220
  405b44:	36312036 	.word	0x36312036
  405b48:	3a33343a 	.word	0x3a33343a
  405b4c:	2d203032 	.word	0x2d203032
  405b50:	00000d2d 	.word	0x00000d2d
  405b54:	202d492d 	.word	0x202d492d
  405b58:	74696e49 	.word	0x74696e49
  405b5c:	696c6169 	.word	0x696c6169
  405b60:	5320657a 	.word	0x5320657a
  405b64:	61204950 	.word	0x61204950
  405b68:	6c732073 	.word	0x6c732073
  405b6c:	20657661 	.word	0x20657661
  405b70:	0000000d 	.word	0x0000000d
  405b74:	00006325 	.word	0x00006325
  405b78:	4d203e2d 	.word	0x4d203e2d
  405b7c:	65747361 	.word	0x65747361
  405b80:	65732072 	.word	0x65732072
  405b84:	6e69646e 	.word	0x6e69646e
  405b88:	4d432067 	.word	0x4d432067
  405b8c:	45545f44 	.word	0x45545f44
  405b90:	2e2e5453 	.word	0x2e2e5453
  405b94:	000d202e 	.word	0x000d202e
  405b98:	3c202020 	.word	0x3c202020
  405b9c:	6c53202d 	.word	0x6c53202d
  405ba0:	20657661 	.word	0x20657661
  405ba4:	70736572 	.word	0x70736572
  405ba8:	65736e6f 	.word	0x65736e6f
  405bac:	5f435220 	.word	0x5f435220
  405bb0:	2c4e5953 	.word	0x2c4e5953
  405bb4:	5f435220 	.word	0x5f435220
  405bb8:	20594452 	.word	0x20594452
  405bbc:	0000000d 	.word	0x0000000d
  405bc0:	4d203e2d 	.word	0x4d203e2d
  405bc4:	65747361 	.word	0x65747361
  405bc8:	65732072 	.word	0x65732072
  405bcc:	6e69646e 	.word	0x6e69646e
  405bd0:	4d432067 	.word	0x4d432067
  405bd4:	41445f44 	.word	0x41445f44
  405bd8:	2e2e4154 	.word	0x2e2e4154
  405bdc:	000d202e 	.word	0x000d202e
  405be0:	20202020 	.word	0x20202020
  405be4:	20202020 	.word	0x20202020
  405be8:	20202020 	.word	0x20202020
  405bec:	20202020 	.word	0x20202020
  405bf0:	20202020 	.word	0x20202020
  405bf4:	20202020 	.word	0x20202020
  405bf8:	20202020 	.word	0x20202020
  405bfc:	20202020 	.word	0x20202020
  405c00:	2d2d2d3c 	.word	0x2d2d2d3c
  405c04:	6c53202d 	.word	0x6c53202d
  405c08:	20657661 	.word	0x20657661
  405c0c:	70736572 	.word	0x70736572
  405c10:	65736e6f 	.word	0x65736e6f
  405c14:	5f435220 	.word	0x5f435220
  405c18:	20594452 	.word	0x20594452
  405c1c:	0000000d 	.word	0x0000000d
  405c20:	202d452d 	.word	0x202d452d
  405c24:	70736552 	.word	0x70736552
  405c28:	65736e6f 	.word	0x65736e6f
  405c2c:	656e7520 	.word	0x656e7520
  405c30:	63657078 	.word	0x63657078
  405c34:	3a646574 	.word	0x3a646574
  405c38:	25783020 	.word	0x25783020
  405c3c:	0d0a2078 	.word	0x0d0a2078
  405c40:	00000000 	.word	0x00000000
  405c44:	4d203e2d 	.word	0x4d203e2d
  405c48:	65747361 	.word	0x65747361
  405c4c:	65732072 	.word	0x65732072
  405c50:	6e69646e 	.word	0x6e69646e
  405c54:	4d432067 	.word	0x4d432067
  405c58:	54535f44 	.word	0x54535f44
  405c5c:	53555441 	.word	0x53555441
  405c60:	202e2e2e 	.word	0x202e2e2e
  405c64:	0000000d 	.word	0x0000000d
  405c68:	3c202020 	.word	0x3c202020
  405c6c:	6c53202d 	.word	0x6c53202d
  405c70:	20657661 	.word	0x20657661
  405c74:	70736572 	.word	0x70736572
  405c78:	65736e6f 	.word	0x65736e6f
  405c7c:	5f435220 	.word	0x5f435220
  405c80:	20594452 	.word	0x20594452
  405c84:	0000000d 	.word	0x0000000d
  405c88:	3c202020 	.word	0x3c202020
  405c8c:	6c53202d 	.word	0x6c53202d
  405c90:	20657661 	.word	0x20657661
  405c94:	72206f6e 	.word	0x72206f6e
  405c98:	6f707365 	.word	0x6f707365
  405c9c:	2065736e 	.word	0x2065736e
  405ca0:	0000000d 	.word	0x0000000d
  405ca4:	4d203e2d 	.word	0x4d203e2d
  405ca8:	65747361 	.word	0x65747361
  405cac:	65722072 	.word	0x65722072
  405cb0:	73657571 	.word	0x73657571
  405cb4:	6c732074 	.word	0x6c732074
  405cb8:	20657661 	.word	0x20657661
  405cbc:	74617473 	.word	0x74617473
  405cc0:	2e2e7375 	.word	0x2e2e7375
  405cc4:	000d202e 	.word	0x000d202e
  405cc8:	3c202020 	.word	0x3c202020
  405ccc:	6c53202d 	.word	0x6c53202d
  405cd0:	20657661 	.word	0x20657661
  405cd4:	6f706572 	.word	0x6f706572
  405cd8:	20737472 	.word	0x20737472
  405cdc:	74617473 	.word	0x74617473
  405ce0:	2e2e7375 	.word	0x2e2e7375
  405ce4:	00000d2e 	.word	0x00000d2e
  405ce8:	202d492d 	.word	0x202d492d
  405cec:	65636552 	.word	0x65636552
  405cf0:	64657669 	.word	0x64657669
  405cf4:	75252020 	.word	0x75252020
  405cf8:	6d6f6320 	.word	0x6d6f6320
  405cfc:	646e616d 	.word	0x646e616d
  405d00:	00003a73 	.word	0x00003a73
  405d04:	25783020 	.word	0x25783020
  405d08:	00783830 	.word	0x00783830
  405d0c:	2d0d0a20 	.word	0x2d0d0a20
  405d10:	52202d49 	.word	0x52202d49
  405d14:	69656365 	.word	0x69656365
  405d18:	20646576 	.word	0x20646576
  405d1c:	756c2520 	.word	0x756c2520
  405d20:	74616420 	.word	0x74616420
  405d24:	6c622061 	.word	0x6c622061
  405d28:	736b636f 	.word	0x736b636f
  405d2c:	000d0a20 	.word	0x000d0a20
  405d30:	4d203e2d 	.word	0x4d203e2d
  405d34:	65747361 	.word	0x65747361
  405d38:	65732072 	.word	0x65732072
  405d3c:	6e69646e 	.word	0x6e69646e
  405d40:	4d432067 	.word	0x4d432067
  405d44:	4e455f44 	.word	0x4e455f44
  405d48:	2e2e2e44 	.word	0x2e2e2e44
  405d4c:	00000d20 	.word	0x00000d20
  405d50:	3c202020 	.word	0x3c202020
  405d54:	6c53202d 	.word	0x6c53202d
  405d58:	20657661 	.word	0x20657661
  405d5c:	70736572 	.word	0x70736572
  405d60:	65736e6f 	.word	0x65736e6f
  405d64:	5f435220 	.word	0x5f435220
  405d68:	204e5953 	.word	0x204e5953
  405d6c:	0000000d 	.word	0x0000000d
  405d70:	20495053 	.word	0x20495053
  405d74:	6e617274 	.word	0x6e617274
  405d78:	72656673 	.word	0x72656673
  405d7c:	73657420 	.word	0x73657420
  405d80:	69662074 	.word	0x69662074
  405d84:	6873696e 	.word	0x6873696e
  405d88:	20216465 	.word	0x20216465
  405d8c:	0000000d 	.word	0x0000000d
  405d90:	74746553 	.word	0x74746553
  405d94:	20676e69 	.word	0x20676e69
  405d98:	20495053 	.word	0x20495053
  405d9c:	636f6c63 	.word	0x636f6c63
  405da0:	2523206b 	.word	0x2523206b
  405da4:	2e20756c 	.word	0x2e20756c
  405da8:	0a202e2e 	.word	0x0a202e2e
  405dac:	0000000d 	.word	0x0000000d
  405db0:	4d203e2d 	.word	0x4d203e2d
  405db4:	65747361 	.word	0x65747361
  405db8:	65732072 	.word	0x65732072
  405dbc:	6e69646e 	.word	0x6e69646e
  405dc0:	6c622067 	.word	0x6c622067
  405dc4:	206b636f 	.word	0x206b636f
  405dc8:	2e207525 	.word	0x2e207525
  405dcc:	0a202e2e 	.word	0x0a202e2e
  405dd0:	0000000d 	.word	0x0000000d
  405dd4:	3c202020 	.word	0x3c202020
  405dd8:	6c53202d 	.word	0x6c53202d
  405ddc:	20657661 	.word	0x20657661
  405de0:	70736572 	.word	0x70736572
  405de4:	65736e6f 	.word	0x65736e6f
  405de8:	73616c20 	.word	0x73616c20
  405dec:	6c622074 	.word	0x6c622074
  405df0:	206b636f 	.word	0x206b636f
  405df4:	0a207825 	.word	0x0a207825
  405df8:	0000000d 	.word	0x0000000d
  405dfc:	202d452d 	.word	0x202d452d
  405e00:	636f6c62 	.word	0x636f6c62
  405e04:	7525206b 	.word	0x7525206b
  405e08:	6e6f6320 	.word	0x6e6f6320
  405e0c:	6e696174 	.word	0x6e696174
  405e10:	6e752073 	.word	0x6e752073
  405e14:	65707865 	.word	0x65707865
  405e18:	64657463 	.word	0x64657463
  405e1c:	74616420 	.word	0x74616420
  405e20:	0d0a2061 	.word	0x0d0a2061
  405e24:	00000000 	.word	0x00000000

00405e28 <gs_ul_clock_configurations>:
  405e28:	0007a120 000f4240 001e8480 004c4b40      ...@B......@KL.
  405e38:	00000043                                C...

00405e3c <_global_impure_ptr>:
  405e3c:	20000098 0000000a                       ... ....

00405e44 <zeroes.6869>:
  405e44:	30303030 30303030 30303030 30303030     0000000000000000
  405e54:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  405e64:	00000000 33323130 37363534 62613938     ....0123456789ab
  405e74:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00405e84 <blanks.6868>:
  405e84:	20202020 20202020 20202020 20202020                     

00405e94 <basefix.6320>:
  405e94:	0001000a 00030002 00050004 00070006     ................
  405ea4:	00090008 000b000a 000d000c 000f000e     ................
  405eb4:	00000010                                ....

00405eb8 <_ctype_>:
  405eb8:	20202000 20202020 28282020 20282828     .         ((((( 
  405ec8:	20202020 20202020 20202020 20202020                     
  405ed8:	10108820 10101010 10101010 10101010      ...............
  405ee8:	04040410 04040404 10040404 10101010     ................
  405ef8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405f08:	01010101 01010101 01010101 10101010     ................
  405f18:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405f28:	02020202 02020202 02020202 10101010     ................
  405f38:	00000020 00000000 00000000 00000000      ...............
	...

00405fbc <_init>:
  405fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405fbe:	bf00      	nop
  405fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405fc2:	bc08      	pop	{r3}
  405fc4:	469e      	mov	lr, r3
  405fc6:	4770      	bx	lr

00405fc8 <__init_array_start>:
  405fc8:	00402f7d 	.word	0x00402f7d

00405fcc <__frame_dummy_init_array_entry>:
  405fcc:	0040016d                                m.@.

00405fd0 <_fini>:
  405fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405fd2:	bf00      	nop
  405fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405fd6:	bc08      	pop	{r3}
  405fd8:	469e      	mov	lr, r3
  405fda:	4770      	bx	lr

00405fdc <__fini_array_start>:
  405fdc:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b470      	push	{r4, r5, r6}
20000002:	b083      	sub	sp, #12
20000004:	9e06      	ldr	r6, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b343      	cbz	r3, 2000005a <efc_perform_read_sequence+0x5a>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0301 	ands.w	r3, r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14e      	cbz	r6, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	42b1      	cmp	r1, r6
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6882      	ldr	r2, [r0, #8]
20000046:	9201      	str	r2, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9a01      	ldr	r2, [sp, #4]
2000004a:	f012 0f01 	tst.w	r2, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6802      	ldr	r2, [r0, #0]
20000052:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20000056:	6002      	str	r2, [r0, #0]

	return EFC_RC_OK;
20000058:	e000      	b.n	2000005c <efc_perform_read_sequence+0x5c>
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
		return EFC_RC_INVALID;
2000005a:	2302      	movs	r3, #2
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);

	p_efc->EEFC_FMR &= ~(0x1u << 16);

	return EFC_RC_OK;
}
2000005c:	4618      	mov	r0, r3
2000005e:	b003      	add	sp, #12
20000060:	bc70      	pop	{r4, r5, r6}
20000062:	4770      	bx	lr
20000064:	003ffffc 	.word	0x003ffffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 000e 	and.w	r0, r0, #14
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <g_interrupt_enabled>:
20000088:	0001 0000                                   ....

2000008c <SystemCoreClock>:
2000008c:	1200 007a                                   ..z.

20000090 <gs_ul_spi_clock>:
20000090:	a120 0007                                    ...

20000094 <gs_ul_spi_cmd>:
20000094:	55aa 55aa                                   .U.U

20000098 <impure_data>:
20000098:	0000 0000 0384 2000 03ec 2000 0454 2000     ....... ... T.. 
	...
200000cc:	5e38 0040 0000 0000 0000 0000 0000 0000     8^@.............
	...
20000140:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000150:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200004c0 <_impure_ptr>:
200004c0:	0098 2000                                   ... 

200004c4 <__ctype_ptr__>:
200004c4:	5eb8 0040                                   .^@.

200004c8 <lc_ctype_charset>:
200004c8:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004e8 <__mb_cur_max>:
200004e8:	0001 0000                                   ....

200004ec <__malloc_av_>:
	...
200004f4:	04ec 2000 04ec 2000 04f4 2000 04f4 2000     ... ... ... ... 
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 

200008f4 <__malloc_trim_threshold>:
200008f4:	0000 0002                                   ....

200008f8 <__malloc_sbrk_base>:
200008f8:	ffff ffff                                   ....

200008fc <__mbtowc>:
200008fc:	4189 0040                                   .A@.

20000900 <__wctomb>:
20000900:	52ad 0040                                   .R@.
