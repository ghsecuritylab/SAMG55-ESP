
atmel_iot_gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007ee4  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407ee4  00407ee4  0000fee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000089c  20000000  00407eec  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0001c6e8  200008a0  00408790  000108a0  2**3
                  ALLOC
  4 .stack        00003000  2001cf88  00424e78  000108a0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0001089c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000108ca  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015855  00000000  00000000  00010925  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000037df  00000000  00000000  0002617a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000085be  00000000  00000000  00029959  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000de0  00000000  00000000  00031f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d00  00000000  00000000  00032cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a549  00000000  00000000  000339f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000116c3  00000000  00000000  0003df40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00058f19  00000000  00000000  0004f603  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002da4  00000000  00000000  000a851c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2001ff88 	.word	0x2001ff88
  400004:	00400ab9 	.word	0x00400ab9
  400008:	00400ab5 	.word	0x00400ab5
  40000c:	00400ab5 	.word	0x00400ab5
  400010:	00400ab5 	.word	0x00400ab5
  400014:	00400ab5 	.word	0x00400ab5
  400018:	00400ab5 	.word	0x00400ab5
	...
  40002c:	00400e79 	.word	0x00400e79
  400030:	00400ab5 	.word	0x00400ab5
  400034:	00000000 	.word	0x00000000
  400038:	00400ef1 	.word	0x00400ef1
  40003c:	00400f41 	.word	0x00400f41
  400040:	00400ab5 	.word	0x00400ab5
  400044:	00400ab5 	.word	0x00400ab5
  400048:	00400ab5 	.word	0x00400ab5
  40004c:	00400ab5 	.word	0x00400ab5
  400050:	00400ab5 	.word	0x00400ab5
  400054:	00400ab5 	.word	0x00400ab5
  400058:	00400ab5 	.word	0x00400ab5
  40005c:	00400ab5 	.word	0x00400ab5
  400060:	00402dd9 	.word	0x00402dd9
  400064:	00400ab5 	.word	0x00400ab5
  400068:	00000000 	.word	0x00000000
  40006c:	004006d1 	.word	0x004006d1
  400070:	004006e5 	.word	0x004006e5
  400074:	00400ab5 	.word	0x00400ab5
  400078:	00400ab5 	.word	0x00400ab5
  40007c:	00400ab5 	.word	0x00400ab5
  400080:	00400ab5 	.word	0x00400ab5
  400084:	00400ab5 	.word	0x00400ab5
  400088:	00400ab5 	.word	0x00400ab5
  40008c:	00402609 	.word	0x00402609
  400090:	00400ab5 	.word	0x00400ab5
  400094:	00400ab5 	.word	0x00400ab5
  400098:	00400ab5 	.word	0x00400ab5
  40009c:	00400ab5 	.word	0x00400ab5
  4000a0:	00400ab5 	.word	0x00400ab5
  4000a4:	00400ab5 	.word	0x00400ab5
  4000a8:	00400ab5 	.word	0x00400ab5
  4000ac:	00400ab5 	.word	0x00400ab5
  4000b0:	00400ab5 	.word	0x00400ab5
  4000b4:	00400ab5 	.word	0x00400ab5
  4000b8:	00400ab5 	.word	0x00400ab5
	...
  4000fc:	00400ab5 	.word	0x00400ab5
  400100:	00400ab5 	.word	0x00400ab5
  400104:	00400ab5 	.word	0x00400ab5
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	200008a0 	.word	0x200008a0
  400164:	00000000 	.word	0x00000000
  400168:	00407eec 	.word	0x00407eec

0040016c <frame_dummy>:
  40016c:	4b08      	ldr	r3, [pc, #32]	; (400190 <frame_dummy+0x24>)
  40016e:	b510      	push	{r4, lr}
  400170:	b11b      	cbz	r3, 40017a <frame_dummy+0xe>
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x28>)
  400174:	4908      	ldr	r1, [pc, #32]	; (400198 <frame_dummy+0x2c>)
  400176:	f3af 8000 	nop.w
  40017a:	4808      	ldr	r0, [pc, #32]	; (40019c <frame_dummy+0x30>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b903      	cbnz	r3, 400182 <frame_dummy+0x16>
  400180:	bd10      	pop	{r4, pc}
  400182:	4b07      	ldr	r3, [pc, #28]	; (4001a0 <frame_dummy+0x34>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0fb      	beq.n	400180 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	bf00      	nop
  400190:	00000000 	.word	0x00000000
  400194:	00407eec 	.word	0x00407eec
  400198:	200008a4 	.word	0x200008a4
  40019c:	00407eec 	.word	0x00407eec
  4001a0:	00000000 	.word	0x00000000

004001a4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  4001a4:	b510      	push	{r4, lr}
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001a6:	480e      	ldr	r0, [pc, #56]	; (4001e0 <sysclk_init+0x3c>)
  4001a8:	4b0e      	ldr	r3, [pc, #56]	; (4001e4 <sysclk_init+0x40>)
  4001aa:	4798      	blx	r3
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001ac:	2000      	movs	r0, #0
  4001ae:	4b0e      	ldr	r3, [pc, #56]	; (4001e8 <sysclk_init+0x44>)
  4001b0:	4798      	blx	r3
	case OSC_SLCK_32K_RC:
		return 1;

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4001b2:	4c0e      	ldr	r4, [pc, #56]	; (4001ec <sysclk_init+0x48>)
  4001b4:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001b6:	2800      	cmp	r0, #0
  4001b8:	d0fc      	beq.n	4001b4 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ba:	4b0d      	ldr	r3, [pc, #52]	; (4001f0 <sysclk_init+0x4c>)
  4001bc:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  4001be:	4a0d      	ldr	r2, [pc, #52]	; (4001f4 <sysclk_init+0x50>)
  4001c0:	4b0d      	ldr	r3, [pc, #52]	; (4001f8 <sysclk_init+0x54>)
  4001c2:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4001c4:	4c0d      	ldr	r4, [pc, #52]	; (4001fc <sysclk_init+0x58>)
  4001c6:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001c8:	2800      	cmp	r0, #0
  4001ca:	d0fc      	beq.n	4001c6 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001cc:	2000      	movs	r0, #0
  4001ce:	4b0c      	ldr	r3, [pc, #48]	; (400200 <sysclk_init+0x5c>)
  4001d0:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001d2:	4b0c      	ldr	r3, [pc, #48]	; (400204 <sysclk_init+0x60>)
  4001d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001d6:	480c      	ldr	r0, [pc, #48]	; (400208 <sysclk_init+0x64>)
  4001d8:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <sysclk_init+0x40>)
  4001da:	4798      	blx	r3
  4001dc:	bd10      	pop	{r4, pc}
  4001de:	bf00      	nop
  4001e0:	07270e00 	.word	0x07270e00
  4001e4:	00400c85 	.word	0x00400c85
  4001e8:	004007e1 	.word	0x004007e1
  4001ec:	00400805 	.word	0x00400805
  4001f0:	00400825 	.word	0x00400825
  4001f4:	0e4d3f01 	.word	0x0e4d3f01
  4001f8:	400e0400 	.word	0x400e0400
  4001fc:	00400831 	.word	0x00400831
  400200:	00400779 	.word	0x00400779
  400204:	00400b9d 	.word	0x00400b9d
  400208:	07270000 	.word	0x07270000

0040020c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40020c:	b9a8      	cbnz	r0, 40023a <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40020e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400212:	460c      	mov	r4, r1
  400214:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400216:	2a00      	cmp	r2, #0
  400218:	dd0a      	ble.n	400230 <_read+0x24>
  40021a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40021c:	4e08      	ldr	r6, [pc, #32]	; (400240 <_read+0x34>)
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <_read+0x38>)
  400220:	6830      	ldr	r0, [r6, #0]
  400222:	4621      	mov	r1, r4
  400224:	682b      	ldr	r3, [r5, #0]
  400226:	4798      	blx	r3
		ptr++;
  400228:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40022a:	42bc      	cmp	r4, r7
  40022c:	d1f8      	bne.n	400220 <_read+0x14>
  40022e:	e001      	b.n	400234 <_read+0x28>
  400230:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400234:	4640      	mov	r0, r8
  400236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  40023a:	f04f 30ff 	mov.w	r0, #4294967295
  40023e:	4770      	bx	lr
  400240:	2001cdf8 	.word	0x2001cdf8
  400244:	2001cdf0 	.word	0x2001cdf0

00400248 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400248:	3801      	subs	r0, #1
  40024a:	2802      	cmp	r0, #2
  40024c:	d818      	bhi.n	400280 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40024e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400252:	460e      	mov	r6, r1
  400254:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400256:	b182      	cbz	r2, 40027a <_write+0x32>
  400258:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40025a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400294 <_write+0x4c>
  40025e:	4f0c      	ldr	r7, [pc, #48]	; (400290 <_write+0x48>)
  400260:	f8d8 0000 	ldr.w	r0, [r8]
  400264:	f815 1b01 	ldrb.w	r1, [r5], #1
  400268:	683b      	ldr	r3, [r7, #0]
  40026a:	4798      	blx	r3
  40026c:	2800      	cmp	r0, #0
  40026e:	db0a      	blt.n	400286 <_write+0x3e>
  400270:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400272:	3c01      	subs	r4, #1
  400274:	d1f4      	bne.n	400260 <_write+0x18>
  400276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40027a:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  40027c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400280:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400284:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400286:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40028e:	bf00      	nop
  400290:	2001cdf4 	.word	0x2001cdf4
  400294:	2001cdf8 	.word	0x2001cdf8

00400298 <Button1_Handler>:
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {	
  400298:	280c      	cmp	r0, #12
  40029a:	d105      	bne.n	4002a8 <Button1_Handler+0x10>
  40029c:	2901      	cmp	r1, #1
  40029e:	d103      	bne.n	4002a8 <Button1_Handler+0x10>
 *
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
  4002a0:	b508      	push	{r3, lr}
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {	
		extern void vFNBtton_Click_Hook( void );
		vFNBtton_Click_Hook();
  4002a2:	4b02      	ldr	r3, [pc, #8]	; (4002ac <Button1_Handler+0x14>)
  4002a4:	4798      	blx	r3
  4002a6:	bd08      	pop	{r3, pc}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	00404149 	.word	0x00404149

004002b0 <system_board_init>:
#  pragma weak board_init=system_board_init
#endif

static void Button1_Handler(uint32_t id, uint32_t mask);
void system_board_init(void)
{
  4002b0:	b570      	push	{r4, r5, r6, lr}
  4002b2:	b082      	sub	sp, #8

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002b8:	4b55      	ldr	r3, [pc, #340]	; (400410 <system_board_init+0x160>)
  4002ba:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002bc:	200b      	movs	r0, #11
  4002be:	4c55      	ldr	r4, [pc, #340]	; (400414 <system_board_init+0x164>)
  4002c0:	47a0      	blx	r4
  4002c2:	200c      	movs	r0, #12
  4002c4:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002c6:	4c54      	ldr	r4, [pc, #336]	; (400418 <system_board_init+0x168>)
  4002c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4002cc:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002ce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4002d2:	6363      	str	r3, [r4, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002d4:	4d51      	ldr	r5, [pc, #324]	; (40041c <system_board_init+0x16c>)
  4002d6:	2302      	movs	r3, #2
  4002d8:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002da:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002de:	632b      	str	r3, [r5, #48]	; 0x30

	/* Initialize SW0 */
	//ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);

	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  4002e0:	4628      	mov	r0, r5
  4002e2:	2101      	movs	r1, #1
  4002e4:	220a      	movs	r2, #10
  4002e6:	4b4e      	ldr	r3, [pc, #312]	; (400420 <system_board_init+0x170>)
  4002e8:	4798      	blx	r3
	/* Interrupt on rising edge  */
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  4002ea:	4b4e      	ldr	r3, [pc, #312]	; (400424 <system_board_init+0x174>)
  4002ec:	9300      	str	r3, [sp, #0]
  4002ee:	4628      	mov	r0, r5
  4002f0:	210c      	movs	r1, #12
  4002f2:	2201      	movs	r2, #1
  4002f4:	2359      	movs	r3, #89	; 0x59
  4002f6:	4e4c      	ldr	r6, [pc, #304]	; (400428 <system_board_init+0x178>)
  4002f8:	47b0      	blx	r6
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002fa:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  4002fe:	4b4b      	ldr	r3, [pc, #300]	; (40042c <system_board_init+0x17c>)
  400300:	601e      	str	r6, [r3, #0]
	PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO,
  400302:	4628      	mov	r0, r5
  400304:	210c      	movs	r1, #12
  400306:	2200      	movs	r2, #0
  400308:	4b49      	ldr	r3, [pc, #292]	; (400430 <system_board_init+0x180>)
  40030a:	4798      	blx	r3
	(IRQn_Type) PIN_PUSHBUTTON_1_ID, 0);
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  40030c:	4628      	mov	r0, r5
  40030e:	2101      	movs	r1, #1
  400310:	4b48      	ldr	r3, [pc, #288]	; (400434 <system_board_init+0x184>)
  400312:	4798      	blx	r3
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400314:	f44f 7340 	mov.w	r3, #768	; 0x300
  400318:	662b      	str	r3, [r5, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40031a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40031e:	656b      	str	r3, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400320:	626b      	str	r3, [r5, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400322:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400326:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400328:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  40032c:	672a      	str	r2, [r5, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40032e:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400330:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  400334:	676a      	str	r2, [r5, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400336:	606b      	str	r3, [r5, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400338:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  40033c:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40033e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400342:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400344:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400346:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40034a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40034c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  400350:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400352:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400354:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  400358:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40035a:	6063      	str	r3, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40035c:	2318      	movs	r3, #24
  40035e:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400360:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400364:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400366:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400368:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40036c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40036e:	f022 0218 	bic.w	r2, r2, #24
  400372:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400374:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400376:	f022 0218 	bic.w	r2, r2, #24
  40037a:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40037c:	6063      	str	r3, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40037e:	6626      	str	r6, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400380:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400384:	6566      	str	r6, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400386:	6266      	str	r6, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400388:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40038c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40038e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400392:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400394:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40039a:	6763      	str	r3, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40039c:	6066      	str	r6, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40039e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4003a2:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003a4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003a8:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003aa:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003ac:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003b0:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4003b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4003b6:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003b8:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4003ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4003be:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003c0:	6063      	str	r3, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4003c6:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003c8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003cc:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003ce:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003d0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003d4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4003d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  4003da:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003dc:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4003de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  4003e2:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003e4:	6063      	str	r3, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ea:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003ec:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003f0:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003f2:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003f4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003f8:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4003fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4003fe:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400400:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  400406:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400408:	6063      	str	r3, [r4, #4]
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif
}
  40040a:	b002      	add	sp, #8
  40040c:	bd70      	pop	{r4, r5, r6, pc}
  40040e:	bf00      	nop
  400410:	400e1450 	.word	0x400e1450
  400414:	00400841 	.word	0x00400841
  400418:	400e0e00 	.word	0x400e0e00
  40041c:	400e1000 	.word	0x400e1000
  400420:	004005e1 	.word	0x004005e1
  400424:	00400299 	.word	0x00400299
  400428:	00400691 	.word	0x00400691
  40042c:	e000e100 	.word	0xe000e100
  400430:	004006f9 	.word	0x004006f9
  400434:	0040062d 	.word	0x0040062d

00400438 <flexcom_enable>:
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  400438:	b508      	push	{r3, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40043a:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40043e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400440:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400444:	2100      	movs	r1, #0
  400446:	4a4a      	ldr	r2, [pc, #296]	; (400570 <flexcom_enable+0x138>)
  400448:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40044a:	494a      	ldr	r1, [pc, #296]	; (400574 <flexcom_enable+0x13c>)
  40044c:	780a      	ldrb	r2, [r1, #0]
  40044e:	3201      	adds	r2, #1
  400450:	700a      	strb	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400452:	b92b      	cbnz	r3, 400460 <flexcom_enable+0x28>
		cpu_irq_enable();
  400454:	2201      	movs	r2, #1
  400456:	4b46      	ldr	r3, [pc, #280]	; (400570 <flexcom_enable+0x138>)
  400458:	701a      	strb	r2, [r3, #0]
  40045a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40045e:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  400460:	4b45      	ldr	r3, [pc, #276]	; (400578 <flexcom_enable+0x140>)
  400462:	4298      	cmp	r0, r3
  400464:	d10d      	bne.n	400482 <flexcom_enable+0x4a>
  400466:	2007      	movs	r0, #7
  400468:	4b44      	ldr	r3, [pc, #272]	; (40057c <flexcom_enable+0x144>)
  40046a:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  40046c:	2007      	movs	r0, #7
  40046e:	4b44      	ldr	r3, [pc, #272]	; (400580 <flexcom_enable+0x148>)
  400470:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  400472:	2007      	movs	r0, #7
  400474:	2100      	movs	r1, #0
  400476:	4b43      	ldr	r3, [pc, #268]	; (400584 <flexcom_enable+0x14c>)
  400478:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  40047a:	2007      	movs	r0, #7
  40047c:	4b42      	ldr	r3, [pc, #264]	; (400588 <flexcom_enable+0x150>)
  40047e:	4798      	blx	r3
  400480:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM6
	if (p_flexcom == FLEXCOM6) {
  400482:	4b42      	ldr	r3, [pc, #264]	; (40058c <flexcom_enable+0x154>)
  400484:	4298      	cmp	r0, r3
  400486:	d10d      	bne.n	4004a4 <flexcom_enable+0x6c>
  400488:	2016      	movs	r0, #22
  40048a:	4b3c      	ldr	r3, [pc, #240]	; (40057c <flexcom_enable+0x144>)
  40048c:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  40048e:	2007      	movs	r0, #7
  400490:	4b3b      	ldr	r3, [pc, #236]	; (400580 <flexcom_enable+0x148>)
  400492:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  400494:	2007      	movs	r0, #7
  400496:	2100      	movs	r1, #0
  400498:	4b3a      	ldr	r3, [pc, #232]	; (400584 <flexcom_enable+0x14c>)
  40049a:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  40049c:	2007      	movs	r0, #7
  40049e:	4b3a      	ldr	r3, [pc, #232]	; (400588 <flexcom_enable+0x150>)
  4004a0:	4798      	blx	r3
  4004a2:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM5
	if (p_flexcom == FLEXCOM5) {
  4004a4:	4b3a      	ldr	r3, [pc, #232]	; (400590 <flexcom_enable+0x158>)
  4004a6:	4298      	cmp	r0, r3
  4004a8:	d10d      	bne.n	4004c6 <flexcom_enable+0x8e>
  4004aa:	2015      	movs	r0, #21
  4004ac:	4b33      	ldr	r3, [pc, #204]	; (40057c <flexcom_enable+0x144>)
  4004ae:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  4004b0:	2007      	movs	r0, #7
  4004b2:	4b33      	ldr	r3, [pc, #204]	; (400580 <flexcom_enable+0x148>)
  4004b4:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4004b6:	2007      	movs	r0, #7
  4004b8:	2100      	movs	r1, #0
  4004ba:	4b32      	ldr	r3, [pc, #200]	; (400584 <flexcom_enable+0x14c>)
  4004bc:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4004be:	2007      	movs	r0, #7
  4004c0:	4b31      	ldr	r3, [pc, #196]	; (400588 <flexcom_enable+0x150>)
  4004c2:	4798      	blx	r3
  4004c4:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM4
	if (p_flexcom == FLEXCOM4) {
  4004c6:	4b33      	ldr	r3, [pc, #204]	; (400594 <flexcom_enable+0x15c>)
  4004c8:	4298      	cmp	r0, r3
  4004ca:	d10d      	bne.n	4004e8 <flexcom_enable+0xb0>
  4004cc:	2014      	movs	r0, #20
  4004ce:	4b2b      	ldr	r3, [pc, #172]	; (40057c <flexcom_enable+0x144>)
  4004d0:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  4004d2:	2007      	movs	r0, #7
  4004d4:	4b2a      	ldr	r3, [pc, #168]	; (400580 <flexcom_enable+0x148>)
  4004d6:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4004d8:	2007      	movs	r0, #7
  4004da:	2100      	movs	r1, #0
  4004dc:	4b29      	ldr	r3, [pc, #164]	; (400584 <flexcom_enable+0x14c>)
  4004de:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4004e0:	2007      	movs	r0, #7
  4004e2:	4b29      	ldr	r3, [pc, #164]	; (400588 <flexcom_enable+0x150>)
  4004e4:	4798      	blx	r3
  4004e6:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM3
	if (p_flexcom == FLEXCOM3) {
  4004e8:	4b2b      	ldr	r3, [pc, #172]	; (400598 <flexcom_enable+0x160>)
  4004ea:	4298      	cmp	r0, r3
  4004ec:	d10d      	bne.n	40050a <flexcom_enable+0xd2>
  4004ee:	2013      	movs	r0, #19
  4004f0:	4b22      	ldr	r3, [pc, #136]	; (40057c <flexcom_enable+0x144>)
  4004f2:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  4004f4:	2006      	movs	r0, #6
  4004f6:	4b22      	ldr	r3, [pc, #136]	; (400580 <flexcom_enable+0x148>)
  4004f8:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4004fa:	2006      	movs	r0, #6
  4004fc:	2100      	movs	r1, #0
  4004fe:	4b21      	ldr	r3, [pc, #132]	; (400584 <flexcom_enable+0x14c>)
  400500:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400502:	2006      	movs	r0, #6
  400504:	4b20      	ldr	r3, [pc, #128]	; (400588 <flexcom_enable+0x150>)
  400506:	4798      	blx	r3
  400508:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM2
	if (p_flexcom == FLEXCOM2) {
  40050a:	4b24      	ldr	r3, [pc, #144]	; (40059c <flexcom_enable+0x164>)
  40050c:	4298      	cmp	r0, r3
  40050e:	d10d      	bne.n	40052c <flexcom_enable+0xf4>
  400510:	200e      	movs	r0, #14
  400512:	4b1a      	ldr	r3, [pc, #104]	; (40057c <flexcom_enable+0x144>)
  400514:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  400516:	2006      	movs	r0, #6
  400518:	4b19      	ldr	r3, [pc, #100]	; (400580 <flexcom_enable+0x148>)
  40051a:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40051c:	2006      	movs	r0, #6
  40051e:	2100      	movs	r1, #0
  400520:	4b18      	ldr	r3, [pc, #96]	; (400584 <flexcom_enable+0x14c>)
  400522:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400524:	2006      	movs	r0, #6
  400526:	4b18      	ldr	r3, [pc, #96]	; (400588 <flexcom_enable+0x150>)
  400528:	4798      	blx	r3
  40052a:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM1
	if (p_flexcom == FLEXCOM1) {
  40052c:	4b1c      	ldr	r3, [pc, #112]	; (4005a0 <flexcom_enable+0x168>)
  40052e:	4298      	cmp	r0, r3
  400530:	d10d      	bne.n	40054e <flexcom_enable+0x116>
  400532:	2009      	movs	r0, #9
  400534:	4b11      	ldr	r3, [pc, #68]	; (40057c <flexcom_enable+0x144>)
  400536:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  400538:	2006      	movs	r0, #6
  40053a:	4b11      	ldr	r3, [pc, #68]	; (400580 <flexcom_enable+0x148>)
  40053c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40053e:	2006      	movs	r0, #6
  400540:	2100      	movs	r1, #0
  400542:	4b10      	ldr	r3, [pc, #64]	; (400584 <flexcom_enable+0x14c>)
  400544:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400546:	2006      	movs	r0, #6
  400548:	4b0f      	ldr	r3, [pc, #60]	; (400588 <flexcom_enable+0x150>)
  40054a:	4798      	blx	r3
  40054c:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM0
	if (p_flexcom == FLEXCOM0) {
  40054e:	4b15      	ldr	r3, [pc, #84]	; (4005a4 <flexcom_enable+0x16c>)
  400550:	4298      	cmp	r0, r3
  400552:	d10c      	bne.n	40056e <flexcom_enable+0x136>
  400554:	2008      	movs	r0, #8
  400556:	4b09      	ldr	r3, [pc, #36]	; (40057c <flexcom_enable+0x144>)
  400558:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  40055a:	2006      	movs	r0, #6
  40055c:	4b08      	ldr	r3, [pc, #32]	; (400580 <flexcom_enable+0x148>)
  40055e:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  400560:	2006      	movs	r0, #6
  400562:	2100      	movs	r1, #0
  400564:	4b07      	ldr	r3, [pc, #28]	; (400584 <flexcom_enable+0x14c>)
  400566:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400568:	2006      	movs	r0, #6
  40056a:	4b07      	ldr	r3, [pc, #28]	; (400588 <flexcom_enable+0x150>)
  40056c:	4798      	blx	r3
  40056e:	bd08      	pop	{r3, pc}
  400570:	2000000c 	.word	0x2000000c
  400574:	2001cde8 	.word	0x2001cde8
  400578:	40034000 	.word	0x40034000
  40057c:	00400841 	.word	0x00400841
  400580:	004008e9 	.word	0x004008e9
  400584:	00400895 	.word	0x00400895
  400588:	004008d9 	.word	0x004008d9
  40058c:	40040000 	.word	0x40040000
  400590:	40008000 	.word	0x40008000
  400594:	4001c000 	.word	0x4001c000
  400598:	40018000 	.word	0x40018000
  40059c:	40024000 	.word	0x40024000
  4005a0:	40020000 	.word	0x40020000
  4005a4:	4000c000 	.word	0x4000c000

004005a8 <flexcom_set_opmode>:
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
	p_flexcom->FLEXCOM_MR = opmode;
  4005a8:	6001      	str	r1, [r0, #0]
  4005aa:	4770      	bx	lr

004005ac <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4005ac:	460b      	mov	r3, r1
  4005ae:	b119      	cbz	r1, 4005b8 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  4005b0:	6809      	ldr	r1, [r1, #0]
  4005b2:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  4005b4:	685b      	ldr	r3, [r3, #4]
  4005b6:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
  4005b8:	b11a      	cbz	r2, 4005c2 <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  4005ba:	6813      	ldr	r3, [r2, #0]
  4005bc:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  4005be:	6853      	ldr	r3, [r2, #4]
  4005c0:	61c3      	str	r3, [r0, #28]
  4005c2:	4770      	bx	lr

004005c4 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  4005c4:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  4005c8:	05c9      	lsls	r1, r1, #23
  4005ca:	0dc9      	lsrs	r1, r1, #23
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  4005cc:	6201      	str	r1, [r0, #32]
  4005ce:	4770      	bx	lr

004005d0 <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  4005d0:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  4005d4:	f021 0101 	bic.w	r1, r1, #1
  4005d8:	0589      	lsls	r1, r1, #22
  4005da:	0d89      	lsrs	r1, r1, #22
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  4005dc:	6201      	str	r1, [r0, #32]
  4005de:	4770      	bx	lr

004005e0 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4005e0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4005e4:	0052      	lsls	r2, r2, #1
  4005e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4005ea:	fbb3 f2f2 	udiv	r2, r3, r2
  4005ee:	3a01      	subs	r2, #1
  4005f0:	f3c2 020d 	ubfx	r2, r2, #0, #14
  4005f4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  4005f8:	4770      	bx	lr
  4005fa:	bf00      	nop

004005fc <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4005fc:	f012 0f10 	tst.w	r2, #16
  400600:	d010      	beq.n	400624 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400602:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400606:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40060a:	bf14      	ite	ne
  40060c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400610:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400614:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400618:	bf14      	ite	ne
  40061a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40061e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400622:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400624:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400628:	4770      	bx	lr
  40062a:	bf00      	nop

0040062c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  40062c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  40062e:	6401      	str	r1, [r0, #64]	; 0x40
  400630:	4770      	bx	lr
  400632:	bf00      	nop

00400634 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400634:	6441      	str	r1, [r0, #68]	; 0x44
  400636:	4770      	bx	lr

00400638 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400638:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40063a:	4770      	bx	lr

0040063c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40063c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40063e:	4770      	bx	lr

00400640 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400644:	4604      	mov	r4, r0
  400646:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400648:	4b0e      	ldr	r3, [pc, #56]	; (400684 <pio_handler_process+0x44>)
  40064a:	4798      	blx	r3
  40064c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40064e:	4620      	mov	r0, r4
  400650:	4b0d      	ldr	r3, [pc, #52]	; (400688 <pio_handler_process+0x48>)
  400652:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400654:	4005      	ands	r5, r0
  400656:	d013      	beq.n	400680 <pio_handler_process+0x40>
  400658:	4c0c      	ldr	r4, [pc, #48]	; (40068c <pio_handler_process+0x4c>)
  40065a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40065e:	6823      	ldr	r3, [r4, #0]
  400660:	4543      	cmp	r3, r8
  400662:	d108      	bne.n	400676 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400664:	6861      	ldr	r1, [r4, #4]
  400666:	4229      	tst	r1, r5
  400668:	d005      	beq.n	400676 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40066a:	68e3      	ldr	r3, [r4, #12]
  40066c:	4640      	mov	r0, r8
  40066e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400670:	6863      	ldr	r3, [r4, #4]
  400672:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400676:	42b4      	cmp	r4, r6
  400678:	d002      	beq.n	400680 <pio_handler_process+0x40>
  40067a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40067c:	2d00      	cmp	r5, #0
  40067e:	d1ee      	bne.n	40065e <pio_handler_process+0x1e>
  400680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400684:	00400639 	.word	0x00400639
  400688:	0040063d 	.word	0x0040063d
  40068c:	200008c0 	.word	0x200008c0

00400690 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400692:	4c0c      	ldr	r4, [pc, #48]	; (4006c4 <pio_handler_set+0x34>)
  400694:	6824      	ldr	r4, [r4, #0]
  400696:	2c06      	cmp	r4, #6
  400698:	d811      	bhi.n	4006be <pio_handler_set+0x2e>
  40069a:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  40069c:	4f0a      	ldr	r7, [pc, #40]	; (4006c8 <pio_handler_set+0x38>)
  40069e:	0122      	lsls	r2, r4, #4
  4006a0:	18be      	adds	r6, r7, r2
  4006a2:	50b9      	str	r1, [r7, r2]
	pSource->mask = ul_mask;
  4006a4:	6075      	str	r5, [r6, #4]
	pSource->attr = ul_attr;
  4006a6:	60b3      	str	r3, [r6, #8]
	pSource->handler = p_handler;
  4006a8:	9a06      	ldr	r2, [sp, #24]
  4006aa:	60f2      	str	r2, [r6, #12]
	gs_ul_nb_sources++;
  4006ac:	3401      	adds	r4, #1
  4006ae:	4a05      	ldr	r2, [pc, #20]	; (4006c4 <pio_handler_set+0x34>)
  4006b0:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006b2:	4629      	mov	r1, r5
  4006b4:	461a      	mov	r2, r3
  4006b6:	4b05      	ldr	r3, [pc, #20]	; (4006cc <pio_handler_set+0x3c>)
  4006b8:	4798      	blx	r3

	return 0;
  4006ba:	2000      	movs	r0, #0
  4006bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4006be:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4006c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006c2:	bf00      	nop
  4006c4:	200008bc 	.word	0x200008bc
  4006c8:	200008c0 	.word	0x200008c0
  4006cc:	004005fd 	.word	0x004005fd

004006d0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4006d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4006d2:	4802      	ldr	r0, [pc, #8]	; (4006dc <PIOA_Handler+0xc>)
  4006d4:	210b      	movs	r1, #11
  4006d6:	4b02      	ldr	r3, [pc, #8]	; (4006e0 <PIOA_Handler+0x10>)
  4006d8:	4798      	blx	r3
  4006da:	bd08      	pop	{r3, pc}
  4006dc:	400e0e00 	.word	0x400e0e00
  4006e0:	00400641 	.word	0x00400641

004006e4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4006e4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4006e6:	4802      	ldr	r0, [pc, #8]	; (4006f0 <PIOB_Handler+0xc>)
  4006e8:	210c      	movs	r1, #12
  4006ea:	4b02      	ldr	r3, [pc, #8]	; (4006f4 <PIOB_Handler+0x10>)
  4006ec:	4798      	blx	r3
  4006ee:	bd08      	pop	{r3, pc}
  4006f0:	400e1000 	.word	0x400e1000
  4006f4:	00400641 	.word	0x00400641

004006f8 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4006f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006fa:	4605      	mov	r5, r0
  4006fc:	460c      	mov	r4, r1
  4006fe:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  400700:	4b18      	ldr	r3, [pc, #96]	; (400764 <pio_handler_set_priority+0x6c>)
  400702:	4798      	blx	r3
  400704:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400706:	4628      	mov	r0, r5
  400708:	f04f 31ff 	mov.w	r1, #4294967295
  40070c:	4b16      	ldr	r3, [pc, #88]	; (400768 <pio_handler_set_priority+0x70>)
  40070e:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400710:	4628      	mov	r0, r5
  400712:	4b16      	ldr	r3, [pc, #88]	; (40076c <pio_handler_set_priority+0x74>)
  400714:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400716:	b2e2      	uxtb	r2, r4
  400718:	f002 031f 	and.w	r3, r2, #31
  40071c:	2101      	movs	r1, #1
  40071e:	4099      	lsls	r1, r3
  400720:	0963      	lsrs	r3, r4, #5
  400722:	009b      	lsls	r3, r3, #2
  400724:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  400728:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  40072c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400730:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400734:	2c00      	cmp	r4, #0
  400736:	da06      	bge.n	400746 <pio_handler_set_priority+0x4e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400738:	f002 020f 	and.w	r2, r2, #15
  40073c:	013f      	lsls	r7, r7, #4
  40073e:	b2ff      	uxtb	r7, r7
  400740:	480b      	ldr	r0, [pc, #44]	; (400770 <pio_handler_set_priority+0x78>)
  400742:	5487      	strb	r7, [r0, r2]
  400744:	e007      	b.n	400756 <pio_handler_set_priority+0x5e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400746:	013f      	lsls	r7, r7, #4
  400748:	b2ff      	uxtb	r7, r7
  40074a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  40074e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  400752:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400756:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  400758:	4628      	mov	r0, r5
  40075a:	4631      	mov	r1, r6
  40075c:	4b05      	ldr	r3, [pc, #20]	; (400774 <pio_handler_set_priority+0x7c>)
  40075e:	4798      	blx	r3
  400760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400762:	bf00      	nop
  400764:	0040063d 	.word	0x0040063d
  400768:	00400635 	.word	0x00400635
  40076c:	00400639 	.word	0x00400639
  400770:	e000ed14 	.word	0xe000ed14
  400774:	0040062d 	.word	0x0040062d

00400778 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400778:	4a18      	ldr	r2, [pc, #96]	; (4007dc <pmc_switch_mck_to_pllack+0x64>)
  40077a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40077c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400780:	4318      	orrs	r0, r3
  400782:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400784:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400786:	f013 0f08 	tst.w	r3, #8
  40078a:	d003      	beq.n	400794 <pmc_switch_mck_to_pllack+0x1c>
  40078c:	e009      	b.n	4007a2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40078e:	3b01      	subs	r3, #1
  400790:	d103      	bne.n	40079a <pmc_switch_mck_to_pllack+0x22>
  400792:	e01e      	b.n	4007d2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400794:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400798:	4910      	ldr	r1, [pc, #64]	; (4007dc <pmc_switch_mck_to_pllack+0x64>)
  40079a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40079c:	f012 0f08 	tst.w	r2, #8
  4007a0:	d0f5      	beq.n	40078e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007a2:	4a0e      	ldr	r2, [pc, #56]	; (4007dc <pmc_switch_mck_to_pllack+0x64>)
  4007a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007a6:	f023 0303 	bic.w	r3, r3, #3
  4007aa:	f043 0302 	orr.w	r3, r3, #2
  4007ae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007b0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4007b2:	f010 0008 	ands.w	r0, r0, #8
  4007b6:	d004      	beq.n	4007c2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4007b8:	2000      	movs	r0, #0
  4007ba:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007bc:	3b01      	subs	r3, #1
  4007be:	d103      	bne.n	4007c8 <pmc_switch_mck_to_pllack+0x50>
  4007c0:	e009      	b.n	4007d6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007c6:	4905      	ldr	r1, [pc, #20]	; (4007dc <pmc_switch_mck_to_pllack+0x64>)
  4007c8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007ca:	f012 0f08 	tst.w	r2, #8
  4007ce:	d0f5      	beq.n	4007bc <pmc_switch_mck_to_pllack+0x44>
  4007d0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007d2:	2001      	movs	r0, #1
  4007d4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007d6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007d8:	4770      	bx	lr
  4007da:	bf00      	nop
  4007dc:	400e0400 	.word	0x400e0400

004007e0 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4007e0:	2801      	cmp	r0, #1
  4007e2:	d106      	bne.n	4007f2 <pmc_switch_sclk_to_32kxtal+0x12>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4007e4:	4a05      	ldr	r2, [pc, #20]	; (4007fc <pmc_switch_sclk_to_32kxtal+0x1c>)
  4007e6:	6893      	ldr	r3, [r2, #8]
  4007e8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4007ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4007f0:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4007f2:	4a03      	ldr	r2, [pc, #12]	; (400800 <pmc_switch_sclk_to_32kxtal+0x20>)
  4007f4:	4b01      	ldr	r3, [pc, #4]	; (4007fc <pmc_switch_sclk_to_32kxtal+0x1c>)
  4007f6:	601a      	str	r2, [r3, #0]
  4007f8:	4770      	bx	lr
  4007fa:	bf00      	nop
  4007fc:	400e1410 	.word	0x400e1410
  400800:	a5000008 	.word	0xa5000008

00400804 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400804:	4b05      	ldr	r3, [pc, #20]	; (40081c <pmc_osc_is_ready_32kxtal+0x18>)
  400806:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400808:	f013 0f80 	tst.w	r3, #128	; 0x80
  40080c:	bf1d      	ittte	ne
  40080e:	4b04      	ldrne	r3, [pc, #16]	; (400820 <pmc_osc_is_ready_32kxtal+0x1c>)
  400810:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  400812:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  400816:	2000      	moveq	r0, #0
}
  400818:	4770      	bx	lr
  40081a:	bf00      	nop
  40081c:	400e1410 	.word	0x400e1410
  400820:	400e0400 	.word	0x400e0400

00400824 <pmc_disable_pllack>:
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  400824:	2200      	movs	r2, #0
  400826:	4b01      	ldr	r3, [pc, #4]	; (40082c <pmc_disable_pllack+0x8>)
  400828:	629a      	str	r2, [r3, #40]	; 0x28
  40082a:	4770      	bx	lr
  40082c:	400e0400 	.word	0x400e0400

00400830 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400830:	4b02      	ldr	r3, [pc, #8]	; (40083c <pmc_is_locked_pllack+0xc>)
  400832:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400834:	f000 0002 	and.w	r0, r0, #2
  400838:	4770      	bx	lr
  40083a:	bf00      	nop
  40083c:	400e0400 	.word	0x400e0400

00400840 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400840:	2832      	cmp	r0, #50	; 0x32
  400842:	d81e      	bhi.n	400882 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400844:	281f      	cmp	r0, #31
  400846:	d80c      	bhi.n	400862 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400848:	4b11      	ldr	r3, [pc, #68]	; (400890 <pmc_enable_periph_clk+0x50>)
  40084a:	699a      	ldr	r2, [r3, #24]
  40084c:	2301      	movs	r3, #1
  40084e:	4083      	lsls	r3, r0
  400850:	401a      	ands	r2, r3
  400852:	4293      	cmp	r3, r2
  400854:	d017      	beq.n	400886 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400856:	2301      	movs	r3, #1
  400858:	4083      	lsls	r3, r0
  40085a:	4a0d      	ldr	r2, [pc, #52]	; (400890 <pmc_enable_periph_clk+0x50>)
  40085c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40085e:	2000      	movs	r0, #0
  400860:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400862:	4b0b      	ldr	r3, [pc, #44]	; (400890 <pmc_enable_periph_clk+0x50>)
  400864:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
  400868:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40086a:	2301      	movs	r3, #1
  40086c:	4083      	lsls	r3, r0
  40086e:	401a      	ands	r2, r3
  400870:	4293      	cmp	r3, r2
  400872:	d00a      	beq.n	40088a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400874:	2301      	movs	r3, #1
  400876:	4083      	lsls	r3, r0
  400878:	4a05      	ldr	r2, [pc, #20]	; (400890 <pmc_enable_periph_clk+0x50>)
  40087a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40087e:	2000      	movs	r0, #0
  400880:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400882:	2001      	movs	r0, #1
  400884:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400886:	2000      	movs	r0, #0
  400888:	4770      	bx	lr
  40088a:	2000      	movs	r0, #0
}
  40088c:	4770      	bx	lr
  40088e:	bf00      	nop
  400890:	400e0400 	.word	0x400e0400

00400894 <pmc_switch_pck_to_mck>:
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  400894:	f041 0104 	orr.w	r1, r1, #4
  400898:	4b0e      	ldr	r3, [pc, #56]	; (4008d4 <pmc_switch_pck_to_mck+0x40>)
  40089a:	f100 0210 	add.w	r2, r0, #16
  40089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4008a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008a4:	f44f 7180 	mov.w	r1, #256	; 0x100
  4008a8:	4081      	lsls	r1, r0
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  4008aa:	ea11 0003 	ands.w	r0, r1, r3
  4008ae:	d004      	beq.n	4008ba <pmc_switch_pck_to_mck+0x26>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4008b0:	2000      	movs	r0, #0
}
  4008b2:	4770      	bx	lr
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  4008b4:	3b01      	subs	r3, #1
  4008b6:	d104      	bne.n	4008c2 <pmc_switch_pck_to_mck+0x2e>
  4008b8:	e007      	b.n	4008ca <pmc_switch_pck_to_mck+0x36>
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
  4008ba:	b410      	push	{r4}
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  4008bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4008c0:	4c04      	ldr	r4, [pc, #16]	; (4008d4 <pmc_switch_pck_to_mck+0x40>)
  4008c2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  4008c4:	4211      	tst	r1, r2
  4008c6:	d0f5      	beq.n	4008b4 <pmc_switch_pck_to_mck+0x20>
  4008c8:	e000      	b.n	4008cc <pmc_switch_pck_to_mck+0x38>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4008ca:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4008cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008d0:	4770      	bx	lr
  4008d2:	bf00      	nop
  4008d4:	400e0400 	.word	0x400e0400

004008d8 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4008d8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4008dc:	4083      	lsls	r3, r0
  4008de:	4a01      	ldr	r2, [pc, #4]	; (4008e4 <pmc_enable_pck+0xc>)
  4008e0:	6013      	str	r3, [r2, #0]
  4008e2:	4770      	bx	lr
  4008e4:	400e0400 	.word	0x400e0400

004008e8 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  4008e8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4008ec:	4083      	lsls	r3, r0
  4008ee:	4a01      	ldr	r2, [pc, #4]	; (4008f4 <pmc_disable_pck+0xc>)
  4008f0:	6053      	str	r3, [r2, #4]
  4008f2:	4770      	bx	lr
  4008f4:	400e0400 	.word	0x400e0400

004008f8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4008f8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4008fa:	010b      	lsls	r3, r1, #4
  4008fc:	4293      	cmp	r3, r2
  4008fe:	d90f      	bls.n	400920 <usart_set_async_baudrate+0x28>
  400900:	e01c      	b.n	40093c <usart_set_async_baudrate+0x44>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
  400902:	f002 0207 	and.w	r2, r2, #7
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400906:	6841      	ldr	r1, [r0, #4]
  400908:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40090c:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40090e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  400912:	6202      	str	r2, [r0, #32]

	return 0;
  400914:	2000      	movs	r0, #0
  400916:	e01e      	b.n	400956 <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  400918:	2001      	movs	r0, #1
  40091a:	e01c      	b.n	400956 <usart_set_async_baudrate+0x5e>
  40091c:	2001      	movs	r0, #1
  40091e:	e01a      	b.n	400956 <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400920:	00d2      	lsls	r2, r2, #3
  400922:	eb02 0253 	add.w	r2, r2, r3, lsr #1
  400926:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40092a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40092c:	1e5c      	subs	r4, r3, #1
  40092e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400932:	428c      	cmp	r4, r1
  400934:	d8f0      	bhi.n	400918 <usart_set_async_baudrate+0x20>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
  400936:	f002 0207 	and.w	r2, r2, #7
  40093a:	e7e8      	b.n	40090e <usart_set_async_baudrate+0x16>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40093c:	00c9      	lsls	r1, r1, #3
  40093e:	00d2      	lsls	r2, r2, #3
  400940:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  400944:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400948:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40094a:	1e5c      	subs	r4, r3, #1
  40094c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400950:	428c      	cmp	r4, r1
  400952:	d9d6      	bls.n	400902 <usart_set_async_baudrate+0xa>
  400954:	e7e2      	b.n	40091c <usart_set_async_baudrate+0x24>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  400956:	f85d 4b04 	ldr.w	r4, [sp], #4
  40095a:	4770      	bx	lr

0040095c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40095c:	4b08      	ldr	r3, [pc, #32]	; (400980 <usart_reset+0x24>)
  40095e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400962:	2300      	movs	r3, #0
  400964:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400966:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400968:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40096a:	2388      	movs	r3, #136	; 0x88
  40096c:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40096e:	2324      	movs	r3, #36	; 0x24
  400970:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  400972:	f44f 7380 	mov.w	r3, #256	; 0x100
  400976:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  400978:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40097c:	6003      	str	r3, [r0, #0]
  40097e:	4770      	bx	lr
  400980:	55534100 	.word	0x55534100

00400984 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400984:	b570      	push	{r4, r5, r6, lr}
  400986:	4605      	mov	r5, r0
  400988:	460c      	mov	r4, r1
  40098a:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40098c:	4b0f      	ldr	r3, [pc, #60]	; (4009cc <usart_init_rs232+0x48>)
  40098e:	4798      	blx	r3

	ul_reg_val = 0;
  400990:	2200      	movs	r2, #0
  400992:	4b0f      	ldr	r3, [pc, #60]	; (4009d0 <usart_init_rs232+0x4c>)
  400994:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400996:	b19c      	cbz	r4, 4009c0 <usart_init_rs232+0x3c>
  400998:	4628      	mov	r0, r5
  40099a:	6821      	ldr	r1, [r4, #0]
  40099c:	4632      	mov	r2, r6
  40099e:	4b0d      	ldr	r3, [pc, #52]	; (4009d4 <usart_init_rs232+0x50>)
  4009a0:	4798      	blx	r3
  4009a2:	4602      	mov	r2, r0
  4009a4:	b970      	cbnz	r0, 4009c4 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009a6:	68a1      	ldr	r1, [r4, #8]
  4009a8:	6863      	ldr	r3, [r4, #4]
  4009aa:	4319      	orrs	r1, r3
  4009ac:	6923      	ldr	r3, [r4, #16]
  4009ae:	4319      	orrs	r1, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4009b0:	68e3      	ldr	r3, [r4, #12]
  4009b2:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009b4:	4906      	ldr	r1, [pc, #24]	; (4009d0 <usart_init_rs232+0x4c>)
  4009b6:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  4009b8:	6869      	ldr	r1, [r5, #4]
  4009ba:	430b      	orrs	r3, r1
  4009bc:	606b      	str	r3, [r5, #4]

	return 0;
  4009be:	e002      	b.n	4009c6 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4009c0:	2201      	movs	r2, #1
  4009c2:	e000      	b.n	4009c6 <usart_init_rs232+0x42>
  4009c4:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4009c6:	4610      	mov	r0, r2
  4009c8:	bd70      	pop	{r4, r5, r6, pc}
  4009ca:	bf00      	nop
  4009cc:	0040095d 	.word	0x0040095d
  4009d0:	20000930 	.word	0x20000930
  4009d4:	004008f9 	.word	0x004008f9

004009d8 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  4009d8:	2340      	movs	r3, #64	; 0x40
  4009da:	6003      	str	r3, [r0, #0]
  4009dc:	4770      	bx	lr
  4009de:	bf00      	nop

004009e0 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  4009e0:	2310      	movs	r3, #16
  4009e2:	6003      	str	r3, [r0, #0]
  4009e4:	4770      	bx	lr
  4009e6:	bf00      	nop

004009e8 <usart_set_rx_timeout>:
 * \param p_usart Pointer to a USART instance.
 * \param timeout The value of receive timeout.
 */
void usart_set_rx_timeout(Usart *p_usart, uint32_t timeout)
{
	p_usart->US_RTOR = timeout;
  4009e8:	6241      	str	r1, [r0, #36]	; 0x24
  4009ea:	4770      	bx	lr

004009ec <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
  4009ec:	6081      	str	r1, [r0, #8]
  4009ee:	4770      	bx	lr

004009f0 <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
  4009f0:	60c1      	str	r1, [r0, #12]
  4009f2:	4770      	bx	lr

004009f4 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
  4009f4:	6940      	ldr	r0, [r0, #20]
}
  4009f6:	4770      	bx	lr

004009f8 <usart_start_rx_timeout>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_start_rx_timeout(Usart *p_usart)
{
	p_usart->US_CR = US_CR_STTTO;
  4009f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4009fc:	6003      	str	r3, [r0, #0]
  4009fe:	4770      	bx	lr

00400a00 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a00:	6943      	ldr	r3, [r0, #20]
  400a02:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400a06:	bf1d      	ittte	ne
  400a08:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400a0c:	61c1      	strne	r1, [r0, #28]
	return 0;
  400a0e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400a10:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400a12:	4770      	bx	lr

00400a14 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a14:	6943      	ldr	r3, [r0, #20]
  400a16:	f013 0f01 	tst.w	r3, #1
  400a1a:	d005      	beq.n	400a28 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a1c:	6983      	ldr	r3, [r0, #24]
  400a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a22:	600b      	str	r3, [r1, #0]

	return 0;
  400a24:	2000      	movs	r0, #0
  400a26:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400a28:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400a2a:	4770      	bx	lr

00400a2c <usart_get_pdc_base>:
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  400a2c:	4b18      	ldr	r3, [pc, #96]	; (400a90 <usart_get_pdc_base+0x64>)
  400a2e:	4298      	cmp	r0, r3
  400a30:	d01f      	beq.n	400a72 <usart_get_pdc_base+0x46>
		p_pdc_base = PDC_USART0;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  400a32:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
  400a36:	4298      	cmp	r0, r3
  400a38:	d01d      	beq.n	400a76 <usart_get_pdc_base+0x4a>
		p_pdc_base = PDC_USART1;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
  400a3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  400a3e:	4298      	cmp	r0, r3
  400a40:	d01b      	beq.n	400a7a <usart_get_pdc_base+0x4e>
		p_pdc_base = PDC_USART2;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART3
	else if (p_usart == USART3) {
  400a42:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
  400a46:	4298      	cmp	r0, r3
  400a48:	d019      	beq.n	400a7e <usart_get_pdc_base+0x52>
		p_pdc_base = PDC_USART3;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART4
	else if (p_usart == USART4) {
  400a4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  400a4e:	4298      	cmp	r0, r3
  400a50:	d017      	beq.n	400a82 <usart_get_pdc_base+0x56>
		p_pdc_base = PDC_USART4;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART5
	else if (p_usart == USART5) {
  400a52:	f5a3 33a0 	sub.w	r3, r3, #81920	; 0x14000
  400a56:	4298      	cmp	r0, r3
  400a58:	d015      	beq.n	400a86 <usart_get_pdc_base+0x5a>
		p_pdc_base = PDC_USART5;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART6
	else if (p_usart == USART6) {
  400a5a:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  400a5e:	4298      	cmp	r0, r3
  400a60:	d013      	beq.n	400a8a <usart_get_pdc_base+0x5e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  400a62:	f5a3 433f 	sub.w	r3, r3, #48896	; 0xbf00
  400a66:	4a0b      	ldr	r2, [pc, #44]	; (400a94 <usart_get_pdc_base+0x68>)
  400a68:	4290      	cmp	r0, r2
  400a6a:	bf0c      	ite	eq
  400a6c:	4618      	moveq	r0, r3
  400a6e:	2000      	movne	r0, #0
  400a70:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
		p_pdc_base = PDC_USART0;
		return p_pdc_base;
  400a72:	4809      	ldr	r0, [pc, #36]	; (400a98 <usart_get_pdc_base+0x6c>)
  400a74:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
		p_pdc_base = PDC_USART1;
		return p_pdc_base;
  400a76:	4809      	ldr	r0, [pc, #36]	; (400a9c <usart_get_pdc_base+0x70>)
  400a78:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
		p_pdc_base = PDC_USART2;
		return p_pdc_base;
  400a7a:	4809      	ldr	r0, [pc, #36]	; (400aa0 <usart_get_pdc_base+0x74>)
  400a7c:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART3
	else if (p_usart == USART3) {
		p_pdc_base = PDC_USART3;
		return p_pdc_base;
  400a7e:	4809      	ldr	r0, [pc, #36]	; (400aa4 <usart_get_pdc_base+0x78>)
  400a80:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART4
	else if (p_usart == USART4) {
		p_pdc_base = PDC_USART4;
		return p_pdc_base;
  400a82:	4809      	ldr	r0, [pc, #36]	; (400aa8 <usart_get_pdc_base+0x7c>)
  400a84:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART5
	else if (p_usart == USART5) {
		p_pdc_base = PDC_USART5;
		return p_pdc_base;
  400a86:	4809      	ldr	r0, [pc, #36]	; (400aac <usart_get_pdc_base+0x80>)
  400a88:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART6
	else if (p_usart == USART6) {
		p_pdc_base = PDC_USART6;
		return p_pdc_base;
  400a8a:	4809      	ldr	r0, [pc, #36]	; (400ab0 <usart_get_pdc_base+0x84>)
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
}
  400a8c:	4770      	bx	lr
  400a8e:	bf00      	nop
  400a90:	4000c200 	.word	0x4000c200
  400a94:	40034200 	.word	0x40034200
  400a98:	4000c300 	.word	0x4000c300
  400a9c:	40020300 	.word	0x40020300
  400aa0:	40024300 	.word	0x40024300
  400aa4:	40018300 	.word	0x40018300
  400aa8:	4001c300 	.word	0x4001c300
  400aac:	40008300 	.word	0x40008300
  400ab0:	40040300 	.word	0x40040300

00400ab4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  400ab4:	e7fe      	b.n	400ab4 <Dummy_Handler>
  400ab6:	bf00      	nop

00400ab8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400ab8:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  400aba:	4b2a      	ldr	r3, [pc, #168]	; (400b64 <Reset_Handler+0xac>)
  400abc:	4a2a      	ldr	r2, [pc, #168]	; (400b68 <Reset_Handler+0xb0>)
  400abe:	429a      	cmp	r2, r3
  400ac0:	d003      	beq.n	400aca <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  400ac2:	4b2a      	ldr	r3, [pc, #168]	; (400b6c <Reset_Handler+0xb4>)
  400ac4:	4a27      	ldr	r2, [pc, #156]	; (400b64 <Reset_Handler+0xac>)
  400ac6:	429a      	cmp	r2, r3
  400ac8:	d304      	bcc.n	400ad4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400aca:	4b29      	ldr	r3, [pc, #164]	; (400b70 <Reset_Handler+0xb8>)
  400acc:	4a29      	ldr	r2, [pc, #164]	; (400b74 <Reset_Handler+0xbc>)
  400ace:	429a      	cmp	r2, r3
  400ad0:	d310      	bcc.n	400af4 <Reset_Handler+0x3c>
  400ad2:	e01b      	b.n	400b0c <Reset_Handler+0x54>
  400ad4:	4923      	ldr	r1, [pc, #140]	; (400b64 <Reset_Handler+0xac>)
  400ad6:	1d0a      	adds	r2, r1, #4
  400ad8:	4b27      	ldr	r3, [pc, #156]	; (400b78 <Reset_Handler+0xc0>)
  400ada:	1a9b      	subs	r3, r3, r2
  400adc:	f023 0303 	bic.w	r3, r3, #3
  400ae0:	3304      	adds	r3, #4
  400ae2:	4a21      	ldr	r2, [pc, #132]	; (400b68 <Reset_Handler+0xb0>)
  400ae4:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  400ae6:	f852 0b04 	ldr.w	r0, [r2], #4
  400aea:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400aee:	429a      	cmp	r2, r3
  400af0:	d1f9      	bne.n	400ae6 <Reset_Handler+0x2e>
  400af2:	e7ea      	b.n	400aca <Reset_Handler+0x12>
  400af4:	4b21      	ldr	r3, [pc, #132]	; (400b7c <Reset_Handler+0xc4>)
  400af6:	4a22      	ldr	r2, [pc, #136]	; (400b80 <Reset_Handler+0xc8>)
  400af8:	1ad2      	subs	r2, r2, r3
  400afa:	f022 0203 	bic.w	r2, r2, #3
  400afe:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400b00:	3b04      	subs	r3, #4
                *pDest++ = 0;
  400b02:	2100      	movs	r1, #0
  400b04:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400b08:	4293      	cmp	r3, r2
  400b0a:	d1fb      	bne.n	400b04 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400b0c:	4b1d      	ldr	r3, [pc, #116]	; (400b84 <Reset_Handler+0xcc>)
  400b0e:	f023 017f 	bic.w	r1, r3, #127	; 0x7f
  400b12:	4a1d      	ldr	r2, [pc, #116]	; (400b88 <Reset_Handler+0xd0>)
  400b14:	6091      	str	r1, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400b16:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400b1a:	b672      	cpsid	i
  400b1c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400b20:	2000      	movs	r0, #0
  400b22:	491a      	ldr	r1, [pc, #104]	; (400b8c <Reset_Handler+0xd4>)
  400b24:	7008      	strb	r0, [r1, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400b26:	481a      	ldr	r0, [pc, #104]	; (400b90 <Reset_Handler+0xd8>)
  400b28:	6801      	ldr	r1, [r0, #0]
  400b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400b2e:	6001      	str	r1, [r0, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400b30:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400b34:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400b38:	b92a      	cbnz	r2, 400b46 <Reset_Handler+0x8e>
		cpu_irq_enable();
  400b3a:	2101      	movs	r1, #1
  400b3c:	4a13      	ldr	r2, [pc, #76]	; (400b8c <Reset_Handler+0xd4>)
  400b3e:	7011      	strb	r1, [r2, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400b40:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400b44:	b662      	cpsie	i

#if __FPU_USED
	fpu_enable();
#endif

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  400b46:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  400b4a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
  400b4e:	d204      	bcs.n	400b5a <Reset_Handler+0xa2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  400b50:	4a0d      	ldr	r2, [pc, #52]	; (400b88 <Reset_Handler+0xd0>)
  400b52:	6893      	ldr	r3, [r2, #8]
  400b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400b58:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  400b5a:	4b0e      	ldr	r3, [pc, #56]	; (400b94 <Reset_Handler+0xdc>)
  400b5c:	4798      	blx	r3

        /* Branch to main function */
        main();
  400b5e:	4b0e      	ldr	r3, [pc, #56]	; (400b98 <Reset_Handler+0xe0>)
  400b60:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400b62:	e7fe      	b.n	400b62 <Reset_Handler+0xaa>
  400b64:	20000000 	.word	0x20000000
  400b68:	00407eec 	.word	0x00407eec
  400b6c:	2000089c 	.word	0x2000089c
  400b70:	2001cf88 	.word	0x2001cf88
  400b74:	200008a0 	.word	0x200008a0
  400b78:	2000089f 	.word	0x2000089f
  400b7c:	200008a4 	.word	0x200008a4
  400b80:	2001cf8b 	.word	0x2001cf8b
  400b84:	00400000 	.word	0x00400000
  400b88:	e000ed00 	.word	0xe000ed00
  400b8c:	2000000c 	.word	0x2000000c
  400b90:	e000ed88 	.word	0xe000ed88
  400b94:	00404599 	.word	0x00404599
  400b98:	00404379 	.word	0x00404379

00400b9c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400b9c:	4b31      	ldr	r3, [pc, #196]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ba0:	f003 0303 	and.w	r3, r3, #3
  400ba4:	2b01      	cmp	r3, #1
  400ba6:	d00f      	beq.n	400bc8 <SystemCoreClockUpdate+0x2c>
  400ba8:	b113      	cbz	r3, 400bb0 <SystemCoreClockUpdate+0x14>
  400baa:	2b02      	cmp	r3, #2
  400bac:	d029      	beq.n	400c02 <SystemCoreClockUpdate+0x66>
  400bae:	e042      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400bb0:	4b2d      	ldr	r3, [pc, #180]	; (400c68 <SystemCoreClockUpdate+0xcc>)
  400bb2:	695b      	ldr	r3, [r3, #20]
  400bb4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400bb8:	bf14      	ite	ne
  400bba:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400bbe:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400bc2:	4b2a      	ldr	r3, [pc, #168]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400bc4:	601a      	str	r2, [r3, #0]
  400bc6:	e036      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400bc8:	4b26      	ldr	r3, [pc, #152]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400bca:	6a1b      	ldr	r3, [r3, #32]
  400bcc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bd0:	d003      	beq.n	400bda <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400bd2:	4a27      	ldr	r2, [pc, #156]	; (400c70 <SystemCoreClockUpdate+0xd4>)
  400bd4:	4b25      	ldr	r3, [pc, #148]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400bd6:	601a      	str	r2, [r3, #0]
  400bd8:	e02d      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400bda:	4a26      	ldr	r2, [pc, #152]	; (400c74 <SystemCoreClockUpdate+0xd8>)
  400bdc:	4b23      	ldr	r3, [pc, #140]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400bde:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400be0:	4b20      	ldr	r3, [pc, #128]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400be2:	6a1b      	ldr	r3, [r3, #32]
  400be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400be8:	2b10      	cmp	r3, #16
  400bea:	d002      	beq.n	400bf2 <SystemCoreClockUpdate+0x56>
  400bec:	2b20      	cmp	r3, #32
  400bee:	d004      	beq.n	400bfa <SystemCoreClockUpdate+0x5e>
  400bf0:	e021      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
			case CKGR_MOR_MOSCRCF_8_MHz:
				break;
			case CKGR_MOR_MOSCRCF_16_MHz:
				SystemCoreClock *= 2U;
  400bf2:	4a21      	ldr	r2, [pc, #132]	; (400c78 <SystemCoreClockUpdate+0xdc>)
  400bf4:	4b1d      	ldr	r3, [pc, #116]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400bf6:	601a      	str	r2, [r3, #0]
				break;
  400bf8:	e01d      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
			case CKGR_MOR_MOSCRCF_24_MHz:
				SystemCoreClock *= 3U;
  400bfa:	4a20      	ldr	r2, [pc, #128]	; (400c7c <SystemCoreClockUpdate+0xe0>)
  400bfc:	4b1b      	ldr	r3, [pc, #108]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400bfe:	601a      	str	r2, [r3, #0]
				break;
  400c00:	e019      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
				break;
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400c02:	4b19      	ldr	r3, [pc, #100]	; (400c68 <SystemCoreClockUpdate+0xcc>)
  400c04:	695b      	ldr	r3, [r3, #20]
  400c06:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c0a:	bf14      	ite	ne
  400c0c:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c10:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c14:	4b15      	ldr	r3, [pc, #84]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400c16:	601a      	str	r2, [r3, #0]
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  400c18:	4b12      	ldr	r3, [pc, #72]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c1c:	f003 0303 	and.w	r3, r3, #3
  400c20:	2b02      	cmp	r3, #2
  400c22:	d108      	bne.n	400c36 <SystemCoreClockUpdate+0x9a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  400c24:	4b0f      	ldr	r3, [pc, #60]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400c28:	4910      	ldr	r1, [pc, #64]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400c2a:	f3c3 420c 	ubfx	r2, r3, #16, #13
  400c2e:	680b      	ldr	r3, [r1, #0]
  400c30:	fb02 3303 	mla	r3, r2, r3, r3
  400c34:	600b      	str	r3, [r1, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400c36:	4b0b      	ldr	r3, [pc, #44]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c3e:	2b70      	cmp	r3, #112	; 0x70
  400c40:	d107      	bne.n	400c52 <SystemCoreClockUpdate+0xb6>
		SystemCoreClock /= 3U;
  400c42:	4a0a      	ldr	r2, [pc, #40]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400c44:	6813      	ldr	r3, [r2, #0]
  400c46:	490e      	ldr	r1, [pc, #56]	; (400c80 <SystemCoreClockUpdate+0xe4>)
  400c48:	fba1 1303 	umull	r1, r3, r1, r3
  400c4c:	085b      	lsrs	r3, r3, #1
  400c4e:	6013      	str	r3, [r2, #0]
  400c50:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c52:	4b04      	ldr	r3, [pc, #16]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400c56:	4905      	ldr	r1, [pc, #20]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400c58:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400c5c:	680b      	ldr	r3, [r1, #0]
  400c5e:	40d3      	lsrs	r3, r2
  400c60:	600b      	str	r3, [r1, #0]
  400c62:	4770      	bx	lr
  400c64:	400e0400 	.word	0x400e0400
  400c68:	400e1410 	.word	0x400e1410
  400c6c:	20000010 	.word	0x20000010
  400c70:	00b71b00 	.word	0x00b71b00
  400c74:	007a1200 	.word	0x007a1200
  400c78:	00f42400 	.word	0x00f42400
  400c7c:	016e3600 	.word	0x016e3600
  400c80:	aaaaaaab 	.word	0xaaaaaaab

00400c84 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  400c84:	4b1d      	ldr	r3, [pc, #116]	; (400cfc <system_init_flash+0x78>)
  400c86:	4298      	cmp	r0, r3
  400c88:	d804      	bhi.n	400c94 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c8e:	4b1c      	ldr	r3, [pc, #112]	; (400d00 <system_init_flash+0x7c>)
  400c90:	601a      	str	r2, [r3, #0]
  400c92:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  400c94:	4b1b      	ldr	r3, [pc, #108]	; (400d04 <system_init_flash+0x80>)
  400c96:	4298      	cmp	r0, r3
  400c98:	d803      	bhi.n	400ca2 <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c9a:	4a1b      	ldr	r2, [pc, #108]	; (400d08 <system_init_flash+0x84>)
  400c9c:	4b18      	ldr	r3, [pc, #96]	; (400d00 <system_init_flash+0x7c>)
  400c9e:	601a      	str	r2, [r3, #0]
  400ca0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  400ca2:	4b1a      	ldr	r3, [pc, #104]	; (400d0c <system_init_flash+0x88>)
  400ca4:	4298      	cmp	r0, r3
  400ca6:	d803      	bhi.n	400cb0 <system_init_flash+0x2c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ca8:	4a19      	ldr	r2, [pc, #100]	; (400d10 <system_init_flash+0x8c>)
  400caa:	4b15      	ldr	r3, [pc, #84]	; (400d00 <system_init_flash+0x7c>)
  400cac:	601a      	str	r2, [r3, #0]
  400cae:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  400cb0:	4b18      	ldr	r3, [pc, #96]	; (400d14 <system_init_flash+0x90>)
  400cb2:	4298      	cmp	r0, r3
  400cb4:	d803      	bhi.n	400cbe <system_init_flash+0x3a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400cb6:	4a18      	ldr	r2, [pc, #96]	; (400d18 <system_init_flash+0x94>)
  400cb8:	4b11      	ldr	r3, [pc, #68]	; (400d00 <system_init_flash+0x7c>)
  400cba:	601a      	str	r2, [r3, #0]
  400cbc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  400cbe:	4b17      	ldr	r3, [pc, #92]	; (400d1c <system_init_flash+0x98>)
  400cc0:	4298      	cmp	r0, r3
  400cc2:	d804      	bhi.n	400cce <system_init_flash+0x4a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400cc4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400cc8:	4b0d      	ldr	r3, [pc, #52]	; (400d00 <system_init_flash+0x7c>)
  400cca:	601a      	str	r2, [r3, #0]
  400ccc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_5) {
  400cce:	4b14      	ldr	r3, [pc, #80]	; (400d20 <system_init_flash+0x9c>)
  400cd0:	4298      	cmp	r0, r3
  400cd2:	d803      	bhi.n	400cdc <system_init_flash+0x58>
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400cd4:	4a13      	ldr	r2, [pc, #76]	; (400d24 <system_init_flash+0xa0>)
  400cd6:	4b0a      	ldr	r3, [pc, #40]	; (400d00 <system_init_flash+0x7c>)
  400cd8:	601a      	str	r2, [r3, #0]
  400cda:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_6) {
  400cdc:	4b12      	ldr	r3, [pc, #72]	; (400d28 <system_init_flash+0xa4>)
  400cde:	4298      	cmp	r0, r3
  400ce0:	d803      	bhi.n	400cea <system_init_flash+0x66>
		EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400ce2:	4a12      	ldr	r2, [pc, #72]	; (400d2c <system_init_flash+0xa8>)
  400ce4:	4b06      	ldr	r3, [pc, #24]	; (400d00 <system_init_flash+0x7c>)
  400ce6:	601a      	str	r2, [r3, #0]
  400ce8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_7) {
  400cea:	4b11      	ldr	r3, [pc, #68]	; (400d30 <system_init_flash+0xac>)
  400cec:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(7)|EEFC_FMR_CLOE;
  400cee:	bf94      	ite	ls
  400cf0:	4a10      	ldrls	r2, [pc, #64]	; (400d34 <system_init_flash+0xb0>)
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(8)|EEFC_FMR_CLOE;
  400cf2:	4a11      	ldrhi	r2, [pc, #68]	; (400d38 <system_init_flash+0xb4>)
  400cf4:	4b02      	ldr	r3, [pc, #8]	; (400d00 <system_init_flash+0x7c>)
  400cf6:	601a      	str	r2, [r3, #0]
  400cf8:	4770      	bx	lr
  400cfa:	bf00      	nop
  400cfc:	00d59f7f 	.word	0x00d59f7f
  400d00:	400e0a00 	.word	0x400e0a00
  400d04:	01ab3eff 	.word	0x01ab3eff
  400d08:	04000100 	.word	0x04000100
  400d0c:	0280de7f 	.word	0x0280de7f
  400d10:	04000200 	.word	0x04000200
  400d14:	03567dff 	.word	0x03567dff
  400d18:	04000300 	.word	0x04000300
  400d1c:	042c1d7f 	.word	0x042c1d7f
  400d20:	0501bcff 	.word	0x0501bcff
  400d24:	04000500 	.word	0x04000500
  400d28:	05b8d7ff 	.word	0x05b8d7ff
  400d2c:	04000600 	.word	0x04000600
  400d30:	066ff2ff 	.word	0x066ff2ff
  400d34:	04000700 	.word	0x04000700
  400d38:	04000800 	.word	0x04000800

00400d3c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400d3c:	4b09      	ldr	r3, [pc, #36]	; (400d64 <_sbrk+0x28>)
  400d3e:	681b      	ldr	r3, [r3, #0]
  400d40:	b913      	cbnz	r3, 400d48 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400d42:	4a09      	ldr	r2, [pc, #36]	; (400d68 <_sbrk+0x2c>)
  400d44:	4b07      	ldr	r3, [pc, #28]	; (400d64 <_sbrk+0x28>)
  400d46:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400d48:	4b06      	ldr	r3, [pc, #24]	; (400d64 <_sbrk+0x28>)
  400d4a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400d4c:	181a      	adds	r2, r3, r0
  400d4e:	4907      	ldr	r1, [pc, #28]	; (400d6c <_sbrk+0x30>)
  400d50:	4291      	cmp	r1, r2
  400d52:	db04      	blt.n	400d5e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400d54:	4610      	mov	r0, r2
  400d56:	4a03      	ldr	r2, [pc, #12]	; (400d64 <_sbrk+0x28>)
  400d58:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400d5a:	4618      	mov	r0, r3
  400d5c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400d5e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400d62:	4770      	bx	lr
  400d64:	20000934 	.word	0x20000934
  400d68:	2001ff88 	.word	0x2001ff88
  400d6c:	20027ffc 	.word	0x20027ffc

00400d70 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400d70:	f04f 30ff 	mov.w	r0, #4294967295
  400d74:	4770      	bx	lr
  400d76:	bf00      	nop

00400d78 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400d7c:	604b      	str	r3, [r1, #4]

	return 0;
}
  400d7e:	2000      	movs	r0, #0
  400d80:	4770      	bx	lr
  400d82:	bf00      	nop

00400d84 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400d84:	2001      	movs	r0, #1
  400d86:	4770      	bx	lr

00400d88 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400d88:	2000      	movs	r0, #0
  400d8a:	4770      	bx	lr

00400d8c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  400d8c:	f100 0308 	add.w	r3, r0, #8
  400d90:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400d92:	f04f 32ff 	mov.w	r2, #4294967295
  400d96:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  400d98:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400d9a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  400d9c:	2300      	movs	r3, #0
  400d9e:	6003      	str	r3, [r0, #0]
  400da0:	4770      	bx	lr
  400da2:	bf00      	nop

00400da4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400da4:	2300      	movs	r3, #0
  400da6:	6103      	str	r3, [r0, #16]
  400da8:	4770      	bx	lr
  400daa:	bf00      	nop

00400dac <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  400dac:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
  400dae:	685a      	ldr	r2, [r3, #4]
  400db0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  400db2:	6842      	ldr	r2, [r0, #4]
  400db4:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400db6:	685a      	ldr	r2, [r3, #4]
  400db8:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  400dba:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  400dbc:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400dbe:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400dc0:	6803      	ldr	r3, [r0, #0]
  400dc2:	3301      	adds	r3, #1
  400dc4:	6003      	str	r3, [r0, #0]
  400dc6:	4770      	bx	lr

00400dc8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  400dc8:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  400dca:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400dcc:	f1b4 3fff 	cmp.w	r4, #4294967295
  400dd0:	d101      	bne.n	400dd6 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400dd2:	6903      	ldr	r3, [r0, #16]
  400dd4:	e00a      	b.n	400dec <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  400dd6:	f100 0308 	add.w	r3, r0, #8
  400dda:	68c2      	ldr	r2, [r0, #12]
  400ddc:	6812      	ldr	r2, [r2, #0]
  400dde:	4294      	cmp	r4, r2
  400de0:	d304      	bcc.n	400dec <vListInsert+0x24>
  400de2:	685b      	ldr	r3, [r3, #4]
  400de4:	685a      	ldr	r2, [r3, #4]
  400de6:	6812      	ldr	r2, [r2, #0]
  400de8:	4294      	cmp	r4, r2
  400dea:	d2fa      	bcs.n	400de2 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400dec:	685a      	ldr	r2, [r3, #4]
  400dee:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400df0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400df2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  400df4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400df6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400df8:	6803      	ldr	r3, [r0, #0]
  400dfa:	3301      	adds	r3, #1
  400dfc:	6003      	str	r3, [r0, #0]
}
  400dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e02:	4770      	bx	lr

00400e04 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400e04:	6843      	ldr	r3, [r0, #4]
  400e06:	6882      	ldr	r2, [r0, #8]
  400e08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400e0a:	6883      	ldr	r3, [r0, #8]
  400e0c:	6842      	ldr	r2, [r0, #4]
  400e0e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  400e10:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400e12:	685a      	ldr	r2, [r3, #4]
  400e14:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400e16:	bf04      	itt	eq
  400e18:	6882      	ldreq	r2, [r0, #8]
  400e1a:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  400e1c:	2200      	movs	r2, #0
  400e1e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400e20:	681a      	ldr	r2, [r3, #0]
  400e22:	3a01      	subs	r2, #1
  400e24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400e26:	6818      	ldr	r0, [r3, #0]
}
  400e28:	4770      	bx	lr
  400e2a:	bf00      	nop

00400e2c <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  400e2c:	4803      	ldr	r0, [pc, #12]	; (400e3c <prvPortStartFirstTask+0x10>)
  400e2e:	6800      	ldr	r0, [r0, #0]
  400e30:	6800      	ldr	r0, [r0, #0]
  400e32:	f380 8808 	msr	MSP, r0
  400e36:	b662      	cpsie	i
  400e38:	df00      	svc	0
  400e3a:	bf00      	nop
  400e3c:	e000ed08 	.word	0xe000ed08

00400e40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400e40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400e50 <vPortEnableVFP+0x10>
  400e44:	6801      	ldr	r1, [r0, #0]
  400e46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400e4a:	6001      	str	r1, [r0, #0]
  400e4c:	4770      	bx	lr
  400e4e:	0000      	.short	0x0000
  400e50:	e000ed88 	.word	0xe000ed88

00400e54 <pxPortInitialiseStack>:
	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  400e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400e58:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400e5c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;    /* LR */
  400e60:	2300      	movs	r3, #0
  400e62:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  400e66:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400e6a:	f06f 0302 	mvn.w	r3, #2
  400e6e:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  400e72:	3844      	subs	r0, #68	; 0x44
  400e74:	4770      	bx	lr
  400e76:	bf00      	nop

00400e78 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  400e78:	4b05      	ldr	r3, [pc, #20]	; (400e90 <pxCurrentTCBConst2>)
  400e7a:	6819      	ldr	r1, [r3, #0]
  400e7c:	6808      	ldr	r0, [r1, #0]
  400e7e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e82:	f380 8809 	msr	PSP, r0
  400e86:	f04f 0000 	mov.w	r0, #0
  400e8a:	f380 8811 	msr	BASEPRI, r0
  400e8e:	4770      	bx	lr

00400e90 <pxCurrentTCBConst2>:
  400e90:	20018ac0 	.word	0x20018ac0

00400e94 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e98:	4b01      	ldr	r3, [pc, #4]	; (400ea0 <vPortYieldFromISR+0xc>)
  400e9a:	601a      	str	r2, [r3, #0]
  400e9c:	4770      	bx	lr
  400e9e:	bf00      	nop
  400ea0:	e000ed04 	.word	0xe000ed04

00400ea4 <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  400ea4:	f3ef 8011 	mrs	r0, BASEPRI
  400ea8:	f04f 0150 	mov.w	r1, #80	; 0x50
  400eac:	f381 8811 	msr	BASEPRI, r1
  400eb0:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
}
  400eb2:	2000      	movs	r0, #0

00400eb4 <vPortEnterCritical>:
}

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400eb4:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  400eb6:	4b03      	ldr	r3, [pc, #12]	; (400ec4 <vPortEnterCritical+0x10>)
  400eb8:	4798      	blx	r3
	uxCriticalNesting++;
  400eba:	4a03      	ldr	r2, [pc, #12]	; (400ec8 <vPortEnterCritical+0x14>)
  400ebc:	6813      	ldr	r3, [r2, #0]
  400ebe:	3301      	adds	r3, #1
  400ec0:	6013      	str	r3, [r2, #0]
  400ec2:	bd08      	pop	{r3, pc}
  400ec4:	00400ea5 	.word	0x00400ea5
  400ec8:	20000014 	.word	0x20000014

00400ecc <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  400ecc:	f380 8811 	msr	BASEPRI, r0
  400ed0:	4770      	bx	lr
  400ed2:	bf00      	nop

00400ed4 <vPortExitCritical>:
}

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  400ed4:	b508      	push	{r3, lr}
	uxCriticalNesting--;
  400ed6:	4a04      	ldr	r2, [pc, #16]	; (400ee8 <vPortExitCritical+0x14>)
  400ed8:	6813      	ldr	r3, [r2, #0]
  400eda:	3b01      	subs	r3, #1
  400edc:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  400ede:	b913      	cbnz	r3, 400ee6 <vPortExitCritical+0x12>
		portENABLE_INTERRUPTS();
  400ee0:	2000      	movs	r0, #0
  400ee2:	4b02      	ldr	r3, [pc, #8]	; (400eec <vPortExitCritical+0x18>)
  400ee4:	4798      	blx	r3
  400ee6:	bd08      	pop	{r3, pc}
  400ee8:	20000014 	.word	0x20000014
  400eec:	00400ecd 	.word	0x00400ecd

00400ef0 <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  400ef0:	f3ef 8009 	mrs	r0, PSP
  400ef4:	4b11      	ldr	r3, [pc, #68]	; (400f3c <pxCurrentTCBConst>)
  400ef6:	681a      	ldr	r2, [r3, #0]
  400ef8:	f01e 0f10 	tst.w	lr, #16
  400efc:	bf08      	it	eq
  400efe:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400f02:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f06:	6010      	str	r0, [r2, #0]
  400f08:	e92d 4008 	stmdb	sp!, {r3, lr}
  400f0c:	f04f 0050 	mov.w	r0, #80	; 0x50
  400f10:	f380 8811 	msr	BASEPRI, r0
  400f14:	f000 fed8 	bl	401cc8 <vTaskSwitchContext>
  400f18:	f04f 0000 	mov.w	r0, #0
  400f1c:	f380 8811 	msr	BASEPRI, r0
  400f20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400f24:	6819      	ldr	r1, [r3, #0]
  400f26:	6808      	ldr	r0, [r1, #0]
  400f28:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f2c:	f01e 0f10 	tst.w	lr, #16
  400f30:	bf08      	it	eq
  400f32:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400f36:	f380 8809 	msr	PSP, r0
  400f3a:	4770      	bx	lr

00400f3c <pxCurrentTCBConst>:
  400f3c:	20018ac0 	.word	0x20018ac0

00400f40 <SysTick_Handler>:
	);
}

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  400f40:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f46:	4b05      	ldr	r3, [pc, #20]	; (400f5c <SysTick_Handler+0x1c>)
  400f48:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  400f4a:	4b05      	ldr	r3, [pc, #20]	; (400f60 <SysTick_Handler+0x20>)
  400f4c:	4798      	blx	r3
	{
		vTaskIncrementTick();
  400f4e:	4b05      	ldr	r3, [pc, #20]	; (400f64 <SysTick_Handler+0x24>)
  400f50:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  400f52:	2000      	movs	r0, #0
  400f54:	4b04      	ldr	r3, [pc, #16]	; (400f68 <SysTick_Handler+0x28>)
  400f56:	4798      	blx	r3
  400f58:	bd08      	pop	{r3, pc}
  400f5a:	bf00      	nop
  400f5c:	e000ed04 	.word	0xe000ed04
  400f60:	00400ea5 	.word	0x00400ea5
  400f64:	00401a0d 	.word	0x00401a0d
  400f68:	00400ecd 	.word	0x00400ecd

00400f6c <vPortSetupTimerInterrupt>:
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  400f6c:	4a03      	ldr	r2, [pc, #12]	; (400f7c <vPortSetupTimerInterrupt+0x10>)
  400f6e:	4b04      	ldr	r3, [pc, #16]	; (400f80 <vPortSetupTimerInterrupt+0x14>)
  400f70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400f72:	2207      	movs	r2, #7
  400f74:	3b04      	subs	r3, #4
  400f76:	601a      	str	r2, [r3, #0]
  400f78:	4770      	bx	lr
  400f7a:	bf00      	nop
  400f7c:	0001d4bb 	.word	0x0001d4bb
  400f80:	e000e014 	.word	0xe000e014

00400f84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  400f84:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400f86:	4b0c      	ldr	r3, [pc, #48]	; (400fb8 <xPortStartScheduler+0x34>)
  400f88:	681a      	ldr	r2, [r3, #0]
  400f8a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  400f8e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400f90:	681a      	ldr	r2, [r3, #0]
  400f92:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  400f96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  400f98:	4b08      	ldr	r3, [pc, #32]	; (400fbc <xPortStartScheduler+0x38>)
  400f9a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400f9c:	2400      	movs	r4, #0
  400f9e:	4b08      	ldr	r3, [pc, #32]	; (400fc0 <xPortStartScheduler+0x3c>)
  400fa0:	601c      	str	r4, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400fa2:	4b08      	ldr	r3, [pc, #32]	; (400fc4 <xPortStartScheduler+0x40>)
  400fa4:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  400fa6:	4a08      	ldr	r2, [pc, #32]	; (400fc8 <xPortStartScheduler+0x44>)
  400fa8:	6813      	ldr	r3, [r2, #0]
  400faa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400fae:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400fb0:	4b06      	ldr	r3, [pc, #24]	; (400fcc <xPortStartScheduler+0x48>)
  400fb2:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
  400fb4:	4620      	mov	r0, r4
  400fb6:	bd10      	pop	{r4, pc}
  400fb8:	e000ed20 	.word	0xe000ed20
  400fbc:	00400f6d 	.word	0x00400f6d
  400fc0:	20000014 	.word	0x20000014
  400fc4:	00400e41 	.word	0x00400e41
  400fc8:	e000ef34 	.word	0xe000ef34
  400fcc:	00400e2d 	.word	0x00400e2d

00400fd0 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400fd0:	4a13      	ldr	r2, [pc, #76]	; (401020 <prvInsertBlockIntoFreeList+0x50>)
  400fd2:	e000      	b.n	400fd6 <prvInsertBlockIntoFreeList+0x6>
  400fd4:	461a      	mov	r2, r3
  400fd6:	6813      	ldr	r3, [r2, #0]
  400fd8:	4283      	cmp	r3, r0
  400fda:	d3fb      	bcc.n	400fd4 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400fdc:	b430      	push	{r4, r5}
  400fde:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  400fe0:	6854      	ldr	r4, [r2, #4]
  400fe2:	1915      	adds	r5, r2, r4
  400fe4:	4285      	cmp	r5, r0
  400fe6:	d103      	bne.n	400ff0 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400fe8:	6868      	ldr	r0, [r5, #4]
  400fea:	4404      	add	r4, r0
  400fec:	6054      	str	r4, [r2, #4]
  400fee:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  400ff0:	6842      	ldr	r2, [r0, #4]
  400ff2:	1884      	adds	r4, r0, r2
  400ff4:	429c      	cmp	r4, r3
  400ff6:	d10c      	bne.n	401012 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  400ff8:	4b0a      	ldr	r3, [pc, #40]	; (401024 <prvInsertBlockIntoFreeList+0x54>)
  400ffa:	681b      	ldr	r3, [r3, #0]
  400ffc:	429c      	cmp	r4, r3
  400ffe:	d006      	beq.n	40100e <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  401000:	6863      	ldr	r3, [r4, #4]
  401002:	441a      	add	r2, r3
  401004:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  401006:	680b      	ldr	r3, [r1, #0]
  401008:	681b      	ldr	r3, [r3, #0]
  40100a:	6003      	str	r3, [r0, #0]
  40100c:	e002      	b.n	401014 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40100e:	6004      	str	r4, [r0, #0]
  401010:	e000      	b.n	401014 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  401012:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  401014:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  401016:	bf18      	it	ne
  401018:	6008      	strne	r0, [r1, #0]
	}
}
  40101a:	bc30      	pop	{r4, r5}
  40101c:	4770      	bx	lr
  40101e:	bf00      	nop
  401020:	2001893c 	.word	0x2001893c
  401024:	20018938 	.word	0x20018938

00401028 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401028:	b538      	push	{r3, r4, r5, lr}
  40102a:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
  40102c:	4b2c      	ldr	r3, [pc, #176]	; (4010e0 <pvPortMalloc+0xb8>)
  40102e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  401030:	4b2c      	ldr	r3, [pc, #176]	; (4010e4 <pvPortMalloc+0xbc>)
  401032:	681b      	ldr	r3, [r3, #0]
  401034:	b9ab      	cbnz	r3, 401062 <pvPortMalloc+0x3a>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  401036:	4a2c      	ldr	r2, [pc, #176]	; (4010e8 <pvPortMalloc+0xc0>)
  401038:	4b2c      	ldr	r3, [pc, #176]	; (4010ec <pvPortMalloc+0xc4>)
  40103a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
  40103c:	2100      	movs	r1, #0
  40103e:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
  401040:	f503 32bf 	add.w	r2, r3, #97792	; 0x17e00
  401044:	f502 70f8 	add.w	r0, r2, #496	; 0x1f0
  401048:	4d26      	ldr	r5, [pc, #152]	; (4010e4 <pvPortMalloc+0xbc>)
  40104a:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
  40104c:	f8c2 11f4 	str.w	r1, [r2, #500]	; 0x1f4
	pxEnd->pxNextFreeBlock = NULL;
  401050:	f8c2 11f0 	str.w	r1, [r2, #496]	; 0x1f0

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  401054:	4a26      	ldr	r2, [pc, #152]	; (4010f0 <pvPortMalloc+0xc8>)
  401056:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  401058:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  40105a:	4a26      	ldr	r2, [pc, #152]	; (4010f4 <pvPortMalloc+0xcc>)
  40105c:	6813      	ldr	r3, [r2, #0]
  40105e:	3b10      	subs	r3, #16
  401060:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  401062:	2c00      	cmp	r4, #0
  401064:	d036      	beq.n	4010d4 <pvPortMalloc+0xac>
		{
			xWantedSize += heapSTRUCT_SIZE;
  401066:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40106a:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40106e:	bf1c      	itt	ne
  401070:	f022 0207 	bicne.w	r2, r2, #7
  401074:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  401076:	1e51      	subs	r1, r2, #1
  401078:	4b1f      	ldr	r3, [pc, #124]	; (4010f8 <pvPortMalloc+0xd0>)
  40107a:	4299      	cmp	r1, r3
  40107c:	d827      	bhi.n	4010ce <pvPortMalloc+0xa6>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
  40107e:	491a      	ldr	r1, [pc, #104]	; (4010e8 <pvPortMalloc+0xc0>)
  401080:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  401082:	e001      	b.n	401088 <pvPortMalloc+0x60>
  401084:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
  401086:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  401088:	6863      	ldr	r3, [r4, #4]
  40108a:	429a      	cmp	r2, r3
  40108c:	d902      	bls.n	401094 <pvPortMalloc+0x6c>
  40108e:	6823      	ldr	r3, [r4, #0]
  401090:	2b00      	cmp	r3, #0
  401092:	d1f7      	bne.n	401084 <pvPortMalloc+0x5c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  401094:	4b13      	ldr	r3, [pc, #76]	; (4010e4 <pvPortMalloc+0xbc>)
  401096:	681b      	ldr	r3, [r3, #0]
  401098:	429c      	cmp	r4, r3
  40109a:	d018      	beq.n	4010ce <pvPortMalloc+0xa6>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  40109c:	680d      	ldr	r5, [r1, #0]
  40109e:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  4010a0:	6823      	ldr	r3, [r4, #0]
  4010a2:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  4010a4:	6863      	ldr	r3, [r4, #4]
  4010a6:	1a9b      	subs	r3, r3, r2
  4010a8:	2b20      	cmp	r3, #32
  4010aa:	d904      	bls.n	4010b6 <pvPortMalloc+0x8e>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  4010ac:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4010ae:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
  4010b0:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  4010b2:	4b12      	ldr	r3, [pc, #72]	; (4010fc <pvPortMalloc+0xd4>)
  4010b4:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  4010b6:	4a0f      	ldr	r2, [pc, #60]	; (4010f4 <pvPortMalloc+0xcc>)
  4010b8:	6813      	ldr	r3, [r2, #0]
  4010ba:	6861      	ldr	r1, [r4, #4]
  4010bc:	1a5b      	subs	r3, r3, r1
  4010be:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  4010c0:	4b0f      	ldr	r3, [pc, #60]	; (401100 <pvPortMalloc+0xd8>)
  4010c2:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4010c4:	b94d      	cbnz	r5, 4010da <pvPortMalloc+0xb2>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  4010c6:	4b0f      	ldr	r3, [pc, #60]	; (401104 <pvPortMalloc+0xdc>)
  4010c8:	4798      	blx	r3
  4010ca:	2500      	movs	r5, #0
  4010cc:	e005      	b.n	4010da <pvPortMalloc+0xb2>

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
  4010ce:	4b0c      	ldr	r3, [pc, #48]	; (401100 <pvPortMalloc+0xd8>)
  4010d0:	4798      	blx	r3
  4010d2:	e7f8      	b.n	4010c6 <pvPortMalloc+0x9e>
  4010d4:	4b0a      	ldr	r3, [pc, #40]	; (401100 <pvPortMalloc+0xd8>)
  4010d6:	4798      	blx	r3
  4010d8:	e7f5      	b.n	4010c6 <pvPortMalloc+0x9e>
		}
	}
	#endif

	return pvReturn;
}
  4010da:	4628      	mov	r0, r5
  4010dc:	bd38      	pop	{r3, r4, r5, pc}
  4010de:	bf00      	nop
  4010e0:	00401995 	.word	0x00401995
  4010e4:	20018938 	.word	0x20018938
  4010e8:	2001893c 	.word	0x2001893c
  4010ec:	20000938 	.word	0x20000938
  4010f0:	00017ff0 	.word	0x00017ff0
  4010f4:	20000018 	.word	0x20000018
  4010f8:	00017ffe 	.word	0x00017ffe
  4010fc:	00400fd1 	.word	0x00400fd1
  401100:	00401b39 	.word	0x00401b39
  401104:	004044c9 	.word	0x004044c9

00401108 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
  401108:	b180      	cbz	r0, 40112c <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  40110a:	b510      	push	{r4, lr}
  40110c:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
  40110e:	4b08      	ldr	r3, [pc, #32]	; (401130 <vPortFree+0x28>)
  401110:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  401112:	4a08      	ldr	r2, [pc, #32]	; (401134 <vPortFree+0x2c>)
  401114:	6811      	ldr	r1, [r2, #0]
  401116:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  40111a:	440b      	add	r3, r1
  40111c:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  40111e:	f1a4 0010 	sub.w	r0, r4, #16
  401122:	4b05      	ldr	r3, [pc, #20]	; (401138 <vPortFree+0x30>)
  401124:	4798      	blx	r3
		}
		xTaskResumeAll();
  401126:	4b05      	ldr	r3, [pc, #20]	; (40113c <vPortFree+0x34>)
  401128:	4798      	blx	r3
  40112a:	bd10      	pop	{r4, pc}
  40112c:	4770      	bx	lr
  40112e:	bf00      	nop
  401130:	00401995 	.word	0x00401995
  401134:	20000018 	.word	0x20000018
  401138:	00400fd1 	.word	0x00400fd1
  40113c:	00401b39 	.word	0x00401b39

00401140 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  401140:	b510      	push	{r4, lr}
  401142:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  401144:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401146:	b93b      	cbnz	r3, 401158 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401148:	6803      	ldr	r3, [r0, #0]
  40114a:	bb1b      	cbnz	r3, 401194 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40114c:	6840      	ldr	r0, [r0, #4]
  40114e:	4b13      	ldr	r3, [pc, #76]	; (40119c <prvCopyDataToQueue+0x5c>)
  401150:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401152:	2300      	movs	r3, #0
  401154:	6063      	str	r3, [r4, #4]
  401156:	e01d      	b.n	401194 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  401158:	b96a      	cbnz	r2, 401176 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  40115a:	6880      	ldr	r0, [r0, #8]
  40115c:	461a      	mov	r2, r3
  40115e:	4b10      	ldr	r3, [pc, #64]	; (4011a0 <prvCopyDataToQueue+0x60>)
  401160:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401162:	68a2      	ldr	r2, [r4, #8]
  401164:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401166:	4413      	add	r3, r2
  401168:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  40116a:	6862      	ldr	r2, [r4, #4]
  40116c:	4293      	cmp	r3, r2
  40116e:	d311      	bcc.n	401194 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401170:	6823      	ldr	r3, [r4, #0]
  401172:	60a3      	str	r3, [r4, #8]
  401174:	e00e      	b.n	401194 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  401176:	68c0      	ldr	r0, [r0, #12]
  401178:	461a      	mov	r2, r3
  40117a:	4b09      	ldr	r3, [pc, #36]	; (4011a0 <prvCopyDataToQueue+0x60>)
  40117c:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  40117e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401180:	425b      	negs	r3, r3
  401182:	68e2      	ldr	r2, [r4, #12]
  401184:	441a      	add	r2, r3
  401186:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  401188:	6821      	ldr	r1, [r4, #0]
  40118a:	428a      	cmp	r2, r1
  40118c:	d202      	bcs.n	401194 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40118e:	6862      	ldr	r2, [r4, #4]
  401190:	4413      	add	r3, r2
  401192:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401194:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401196:	3301      	adds	r3, #1
  401198:	63a3      	str	r3, [r4, #56]	; 0x38
  40119a:	bd10      	pop	{r4, pc}
  40119c:	004020b5 	.word	0x004020b5
  4011a0:	00404675 	.word	0x00404675

004011a4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  4011a4:	b538      	push	{r3, r4, r5, lr}
  4011a6:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  4011a8:	6800      	ldr	r0, [r0, #0]
  4011aa:	b158      	cbz	r0, 4011c4 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  4011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4011ae:	68dc      	ldr	r4, [r3, #12]
  4011b0:	4414      	add	r4, r2
  4011b2:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  4011b4:	685d      	ldr	r5, [r3, #4]
  4011b6:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  4011b8:	bf28      	it	cs
  4011ba:	60d8      	strcs	r0, [r3, #12]
  4011bc:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  4011be:	68d9      	ldr	r1, [r3, #12]
  4011c0:	4b01      	ldr	r3, [pc, #4]	; (4011c8 <prvCopyDataFromQueue+0x24>)
  4011c2:	4798      	blx	r3
  4011c4:	bd38      	pop	{r3, r4, r5, pc}
  4011c6:	bf00      	nop
  4011c8:	00404675 	.word	0x00404675

004011cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  4011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011ce:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  4011d0:	4b1e      	ldr	r3, [pc, #120]	; (40124c <prvUnlockQueue+0x80>)
  4011d2:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4011d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011d6:	2b00      	cmp	r3, #0
  4011d8:	dd13      	ble.n	401202 <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4011da:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011dc:	b91b      	cbnz	r3, 4011e6 <prvUnlockQueue+0x1a>
  4011de:	e010      	b.n	401202 <prvUnlockQueue+0x36>
  4011e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011e2:	b923      	cbnz	r3, 4011ee <prvUnlockQueue+0x22>
  4011e4:	e00d      	b.n	401202 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011e6:	f104 0624 	add.w	r6, r4, #36	; 0x24
  4011ea:	4d19      	ldr	r5, [pc, #100]	; (401250 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  4011ec:	4f19      	ldr	r7, [pc, #100]	; (401254 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011ee:	4630      	mov	r0, r6
  4011f0:	47a8      	blx	r5
  4011f2:	b100      	cbz	r0, 4011f6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  4011f4:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
  4011f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011f8:	3b01      	subs	r3, #1
  4011fa:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4011fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011fe:	2b00      	cmp	r3, #0
  401200:	dcee      	bgt.n	4011e0 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401202:	f04f 33ff 	mov.w	r3, #4294967295
  401206:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  401208:	4b13      	ldr	r3, [pc, #76]	; (401258 <prvUnlockQueue+0x8c>)
  40120a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  40120c:	4b0f      	ldr	r3, [pc, #60]	; (40124c <prvUnlockQueue+0x80>)
  40120e:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401210:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401212:	2b00      	cmp	r3, #0
  401214:	dd13      	ble.n	40123e <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401216:	6923      	ldr	r3, [r4, #16]
  401218:	b91b      	cbnz	r3, 401222 <prvUnlockQueue+0x56>
  40121a:	e010      	b.n	40123e <prvUnlockQueue+0x72>
  40121c:	6923      	ldr	r3, [r4, #16]
  40121e:	b923      	cbnz	r3, 40122a <prvUnlockQueue+0x5e>
  401220:	e00d      	b.n	40123e <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401222:	f104 0610 	add.w	r6, r4, #16
  401226:	4d0a      	ldr	r5, [pc, #40]	; (401250 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
  401228:	4f0a      	ldr	r7, [pc, #40]	; (401254 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40122a:	4630      	mov	r0, r6
  40122c:	47a8      	blx	r5
  40122e:	b100      	cbz	r0, 401232 <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
  401230:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
  401232:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401234:	3b01      	subs	r3, #1
  401236:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401238:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40123a:	2b00      	cmp	r3, #0
  40123c:	dcee      	bgt.n	40121c <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  40123e:	f04f 33ff 	mov.w	r3, #4294967295
  401242:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  401244:	4b04      	ldr	r3, [pc, #16]	; (401258 <prvUnlockQueue+0x8c>)
  401246:	4798      	blx	r3
  401248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40124a:	bf00      	nop
  40124c:	00400eb5 	.word	0x00400eb5
  401250:	00401e9d 	.word	0x00401e9d
  401254:	00401fe1 	.word	0x00401fe1
  401258:	00400ed5 	.word	0x00400ed5

0040125c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  40125c:	b538      	push	{r3, r4, r5, lr}
  40125e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
  401260:	4604      	mov	r4, r0
  401262:	b920      	cbnz	r0, 40126e <xQueueGenericReset+0x12>
  401264:	4817      	ldr	r0, [pc, #92]	; (4012c4 <xQueueGenericReset+0x68>)
  401266:	f44f 718f 	mov.w	r1, #286	; 0x11e
  40126a:	4b17      	ldr	r3, [pc, #92]	; (4012c8 <xQueueGenericReset+0x6c>)
  40126c:	4798      	blx	r3

	taskENTER_CRITICAL();
  40126e:	4b17      	ldr	r3, [pc, #92]	; (4012cc <xQueueGenericReset+0x70>)
  401270:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401272:	6822      	ldr	r2, [r4, #0]
  401274:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401276:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401278:	fb03 f301 	mul.w	r3, r3, r1
  40127c:	18d0      	adds	r0, r2, r3
  40127e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  401280:	2000      	movs	r0, #0
  401282:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401284:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  401286:	1a5b      	subs	r3, r3, r1
  401288:	4413      	add	r3, r2
  40128a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40128c:	f04f 33ff 	mov.w	r3, #4294967295
  401290:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401292:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  401294:	b955      	cbnz	r5, 4012ac <xQueueGenericReset+0x50>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401296:	6923      	ldr	r3, [r4, #16]
  401298:	b17b      	cbz	r3, 4012ba <xQueueGenericReset+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40129a:	f104 0010 	add.w	r0, r4, #16
  40129e:	4b0c      	ldr	r3, [pc, #48]	; (4012d0 <xQueueGenericReset+0x74>)
  4012a0:	4798      	blx	r3
  4012a2:	2801      	cmp	r0, #1
  4012a4:	d109      	bne.n	4012ba <xQueueGenericReset+0x5e>
				{
					portYIELD_WITHIN_API();
  4012a6:	4b0b      	ldr	r3, [pc, #44]	; (4012d4 <xQueueGenericReset+0x78>)
  4012a8:	4798      	blx	r3
  4012aa:	e006      	b.n	4012ba <xQueueGenericReset+0x5e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4012ac:	f104 0010 	add.w	r0, r4, #16
  4012b0:	4d09      	ldr	r5, [pc, #36]	; (4012d8 <xQueueGenericReset+0x7c>)
  4012b2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4012b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4012b8:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  4012ba:	4b08      	ldr	r3, [pc, #32]	; (4012dc <xQueueGenericReset+0x80>)
  4012bc:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  4012be:	2001      	movs	r0, #1
  4012c0:	bd38      	pop	{r3, r4, r5, pc}
  4012c2:	bf00      	nop
  4012c4:	0040768c 	.word	0x0040768c
  4012c8:	004044e1 	.word	0x004044e1
  4012cc:	00400eb5 	.word	0x00400eb5
  4012d0:	00401e9d 	.word	0x00401e9d
  4012d4:	00400e95 	.word	0x00400e95
  4012d8:	00400d8d 	.word	0x00400d8d
  4012dc:	00400ed5 	.word	0x00400ed5

004012e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4012e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  4012e2:	b1d0      	cbz	r0, 40131a <xQueueGenericCreate+0x3a>
  4012e4:	460d      	mov	r5, r1
  4012e6:	4617      	mov	r7, r2
  4012e8:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  4012ea:	2050      	movs	r0, #80	; 0x50
  4012ec:	4b0f      	ldr	r3, [pc, #60]	; (40132c <xQueueGenericCreate+0x4c>)
  4012ee:	4798      	blx	r3
		if( pxNewQueue != NULL )
  4012f0:	4604      	mov	r4, r0
  4012f2:	b190      	cbz	r0, 40131a <xQueueGenericCreate+0x3a>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  4012f4:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  4012f8:	3001      	adds	r0, #1
  4012fa:	4b0c      	ldr	r3, [pc, #48]	; (40132c <xQueueGenericCreate+0x4c>)
  4012fc:	4798      	blx	r3
  4012fe:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
  401300:	b140      	cbz	r0, 401314 <xQueueGenericCreate+0x34>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  401302:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  401304:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  401306:	4620      	mov	r0, r4
  401308:	2101      	movs	r1, #1
  40130a:	4b09      	ldr	r3, [pc, #36]	; (401330 <xQueueGenericCreate+0x50>)
  40130c:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  40130e:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
  401312:	e008      	b.n	401326 <xQueueGenericCreate+0x46>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  401314:	4620      	mov	r0, r4
  401316:	4b07      	ldr	r3, [pc, #28]	; (401334 <xQueueGenericCreate+0x54>)
  401318:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  40131a:	4807      	ldr	r0, [pc, #28]	; (401338 <xQueueGenericCreate+0x58>)
  40131c:	f44f 71ba 	mov.w	r1, #372	; 0x174
  401320:	4b06      	ldr	r3, [pc, #24]	; (40133c <xQueueGenericCreate+0x5c>)
  401322:	4798      	blx	r3
  401324:	2400      	movs	r4, #0

	return xReturn;
}
  401326:	4620      	mov	r0, r4
  401328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40132a:	bf00      	nop
  40132c:	00401029 	.word	0x00401029
  401330:	0040125d 	.word	0x0040125d
  401334:	00401109 	.word	0x00401109
  401338:	0040768c 	.word	0x0040768c
  40133c:	004044e1 	.word	0x004044e1

00401340 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  401340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401344:	b085      	sub	sp, #20
  401346:	468b      	mov	fp, r1
  401348:	9201      	str	r2, [sp, #4]
  40134a:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  40134c:	4604      	mov	r4, r0
  40134e:	b920      	cbnz	r0, 40135a <xQueueGenericSend+0x1a>
  401350:	483a      	ldr	r0, [pc, #232]	; (40143c <xQueueGenericSend+0xfc>)
  401352:	f240 214b 	movw	r1, #587	; 0x24b
  401356:	4b3a      	ldr	r3, [pc, #232]	; (401440 <xQueueGenericSend+0x100>)
  401358:	4798      	blx	r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  40135a:	f1bb 0f00 	cmp.w	fp, #0
  40135e:	d106      	bne.n	40136e <xQueueGenericSend+0x2e>
  401360:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401362:	b123      	cbz	r3, 40136e <xQueueGenericSend+0x2e>
  401364:	4835      	ldr	r0, [pc, #212]	; (40143c <xQueueGenericSend+0xfc>)
  401366:	f44f 7113 	mov.w	r1, #588	; 0x24c
  40136a:	4b35      	ldr	r3, [pc, #212]	; (401440 <xQueueGenericSend+0x100>)
  40136c:	4798      	blx	r3

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  40136e:	f04f 0900 	mov.w	r9, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401372:	4d34      	ldr	r5, [pc, #208]	; (401444 <xQueueGenericSend+0x104>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401374:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 40146c <xQueueGenericSend+0x12c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  401378:	4e33      	ldr	r6, [pc, #204]	; (401448 <xQueueGenericSend+0x108>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40137a:	47a8      	blx	r5
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40137c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40137e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401380:	429a      	cmp	r2, r3
  401382:	d212      	bcs.n	4013aa <xQueueGenericSend+0x6a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401384:	4620      	mov	r0, r4
  401386:	4659      	mov	r1, fp
  401388:	9a00      	ldr	r2, [sp, #0]
  40138a:	4b30      	ldr	r3, [pc, #192]	; (40144c <xQueueGenericSend+0x10c>)
  40138c:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40138e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401390:	b13b      	cbz	r3, 4013a2 <xQueueGenericSend+0x62>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401392:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401396:	4b2e      	ldr	r3, [pc, #184]	; (401450 <xQueueGenericSend+0x110>)
  401398:	4798      	blx	r3
  40139a:	2801      	cmp	r0, #1
  40139c:	d101      	bne.n	4013a2 <xQueueGenericSend+0x62>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  40139e:	4b2d      	ldr	r3, [pc, #180]	; (401454 <xQueueGenericSend+0x114>)
  4013a0:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  4013a2:	4b29      	ldr	r3, [pc, #164]	; (401448 <xQueueGenericSend+0x108>)
  4013a4:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  4013a6:	2001      	movs	r0, #1
  4013a8:	e044      	b.n	401434 <xQueueGenericSend+0xf4>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  4013aa:	9b01      	ldr	r3, [sp, #4]
  4013ac:	b91b      	cbnz	r3, 4013b6 <xQueueGenericSend+0x76>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4013ae:	4b26      	ldr	r3, [pc, #152]	; (401448 <xQueueGenericSend+0x108>)
  4013b0:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4013b2:	2000      	movs	r0, #0
  4013b4:	e03e      	b.n	401434 <xQueueGenericSend+0xf4>
				}
				else if( xEntryTimeSet == pdFALSE )
  4013b6:	f1b9 0f00 	cmp.w	r9, #0
  4013ba:	d103      	bne.n	4013c4 <xQueueGenericSend+0x84>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4013bc:	a802      	add	r0, sp, #8
  4013be:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  4013c0:	f04f 0901 	mov.w	r9, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  4013c4:	47b0      	blx	r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4013c6:	4b24      	ldr	r3, [pc, #144]	; (401458 <xQueueGenericSend+0x118>)
  4013c8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4013ca:	47a8      	blx	r5
  4013cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4013ce:	f1b3 3fff 	cmp.w	r3, #4294967295
  4013d2:	bf04      	itt	eq
  4013d4:	2300      	moveq	r3, #0
  4013d6:	6463      	streq	r3, [r4, #68]	; 0x44
  4013d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4013da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4013de:	bf04      	itt	eq
  4013e0:	2300      	moveq	r3, #0
  4013e2:	64a3      	streq	r3, [r4, #72]	; 0x48
  4013e4:	47b0      	blx	r6

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4013e6:	a802      	add	r0, sp, #8
  4013e8:	a901      	add	r1, sp, #4
  4013ea:	4b1c      	ldr	r3, [pc, #112]	; (40145c <xQueueGenericSend+0x11c>)
  4013ec:	4798      	blx	r3
  4013ee:	b9d8      	cbnz	r0, 401428 <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4013f0:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  4013f2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
  4013f6:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4013f8:	47b0      	blx	r6
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4013fa:	45b8      	cmp	r8, r7
  4013fc:	d10e      	bne.n	40141c <xQueueGenericSend+0xdc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4013fe:	f104 0010 	add.w	r0, r4, #16
  401402:	9901      	ldr	r1, [sp, #4]
  401404:	4b16      	ldr	r3, [pc, #88]	; (401460 <xQueueGenericSend+0x120>)
  401406:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401408:	4620      	mov	r0, r4
  40140a:	4b16      	ldr	r3, [pc, #88]	; (401464 <xQueueGenericSend+0x124>)
  40140c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  40140e:	4b16      	ldr	r3, [pc, #88]	; (401468 <xQueueGenericSend+0x128>)
  401410:	4798      	blx	r3
  401412:	2800      	cmp	r0, #0
  401414:	d1b1      	bne.n	40137a <xQueueGenericSend+0x3a>
				{
					portYIELD_WITHIN_API();
  401416:	4b0f      	ldr	r3, [pc, #60]	; (401454 <xQueueGenericSend+0x114>)
  401418:	4798      	blx	r3
  40141a:	e7ae      	b.n	40137a <xQueueGenericSend+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  40141c:	4620      	mov	r0, r4
  40141e:	4b11      	ldr	r3, [pc, #68]	; (401464 <xQueueGenericSend+0x124>)
  401420:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401422:	4b11      	ldr	r3, [pc, #68]	; (401468 <xQueueGenericSend+0x128>)
  401424:	4798      	blx	r3
  401426:	e7a8      	b.n	40137a <xQueueGenericSend+0x3a>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  401428:	4620      	mov	r0, r4
  40142a:	4b0e      	ldr	r3, [pc, #56]	; (401464 <xQueueGenericSend+0x124>)
  40142c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40142e:	4b0e      	ldr	r3, [pc, #56]	; (401468 <xQueueGenericSend+0x128>)
  401430:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  401432:	2000      	movs	r0, #0
		}
	}
}
  401434:	b005      	add	sp, #20
  401436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40143a:	bf00      	nop
  40143c:	0040768c 	.word	0x0040768c
  401440:	004044e1 	.word	0x004044e1
  401444:	00400eb5 	.word	0x00400eb5
  401448:	00400ed5 	.word	0x00400ed5
  40144c:	00401141 	.word	0x00401141
  401450:	00401e9d 	.word	0x00401e9d
  401454:	00400e95 	.word	0x00400e95
  401458:	00401995 	.word	0x00401995
  40145c:	00401f55 	.word	0x00401f55
  401460:	00401db1 	.word	0x00401db1
  401464:	004011cd 	.word	0x004011cd
  401468:	00401b39 	.word	0x00401b39
  40146c:	00401f25 	.word	0x00401f25

00401470 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  401470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401474:	460d      	mov	r5, r1
  401476:	4617      	mov	r7, r2
  401478:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  40147a:	4604      	mov	r4, r0
  40147c:	b920      	cbnz	r0, 401488 <xQueueGenericSendFromISR+0x18>
  40147e:	481d      	ldr	r0, [pc, #116]	; (4014f4 <xQueueGenericSendFromISR+0x84>)
  401480:	f240 3192 	movw	r1, #914	; 0x392
  401484:	4b1c      	ldr	r3, [pc, #112]	; (4014f8 <xQueueGenericSendFromISR+0x88>)
  401486:	4798      	blx	r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401488:	b935      	cbnz	r5, 401498 <xQueueGenericSendFromISR+0x28>
  40148a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40148c:	b123      	cbz	r3, 401498 <xQueueGenericSendFromISR+0x28>
  40148e:	4819      	ldr	r0, [pc, #100]	; (4014f4 <xQueueGenericSendFromISR+0x84>)
  401490:	f240 3193 	movw	r1, #915	; 0x393
  401494:	4b18      	ldr	r3, [pc, #96]	; (4014f8 <xQueueGenericSendFromISR+0x88>)
  401496:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  401498:	4b18      	ldr	r3, [pc, #96]	; (4014fc <xQueueGenericSendFromISR+0x8c>)
  40149a:	4798      	blx	r3
  40149c:	4606      	mov	r6, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40149e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4014a2:	429a      	cmp	r2, r3
  4014a4:	d218      	bcs.n	4014d8 <xQueueGenericSendFromISR+0x68>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4014a6:	4620      	mov	r0, r4
  4014a8:	4629      	mov	r1, r5
  4014aa:	4642      	mov	r2, r8
  4014ac:	4b14      	ldr	r3, [pc, #80]	; (401500 <xQueueGenericSendFromISR+0x90>)
  4014ae:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4014b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014b2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014b6:	d10a      	bne.n	4014ce <xQueueGenericSendFromISR+0x5e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4014b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014ba:	b17b      	cbz	r3, 4014dc <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4014bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014c0:	4b10      	ldr	r3, [pc, #64]	; (401504 <xQueueGenericSendFromISR+0x94>)
  4014c2:	4798      	blx	r3
  4014c4:	b160      	cbz	r0, 4014e0 <xQueueGenericSendFromISR+0x70>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  4014c6:	b16f      	cbz	r7, 4014e4 <xQueueGenericSendFromISR+0x74>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  4014c8:	2401      	movs	r4, #1
  4014ca:	603c      	str	r4, [r7, #0]
  4014cc:	e00b      	b.n	4014e6 <xQueueGenericSendFromISR+0x76>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  4014ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014d0:	3301      	adds	r3, #1
  4014d2:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  4014d4:	2401      	movs	r4, #1
  4014d6:	e006      	b.n	4014e6 <xQueueGenericSendFromISR+0x76>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  4014d8:	2400      	movs	r4, #0
  4014da:	e004      	b.n	4014e6 <xQueueGenericSendFromISR+0x76>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  4014dc:	2401      	movs	r4, #1
  4014de:	e002      	b.n	4014e6 <xQueueGenericSendFromISR+0x76>
  4014e0:	2401      	movs	r4, #1
  4014e2:	e000      	b.n	4014e6 <xQueueGenericSendFromISR+0x76>
  4014e4:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  4014e6:	4630      	mov	r0, r6
  4014e8:	4b07      	ldr	r3, [pc, #28]	; (401508 <xQueueGenericSendFromISR+0x98>)
  4014ea:	4798      	blx	r3

	return xReturn;
}
  4014ec:	4620      	mov	r0, r4
  4014ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014f2:	bf00      	nop
  4014f4:	0040768c 	.word	0x0040768c
  4014f8:	004044e1 	.word	0x004044e1
  4014fc:	00400ea5 	.word	0x00400ea5
  401500:	00401141 	.word	0x00401141
  401504:	00401e9d 	.word	0x00401e9d
  401508:	00400ecd 	.word	0x00400ecd

0040150c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  40150c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401510:	b085      	sub	sp, #20
  401512:	4689      	mov	r9, r1
  401514:	9201      	str	r2, [sp, #4]
  401516:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  401518:	4604      	mov	r4, r0
  40151a:	b920      	cbnz	r0, 401526 <xQueueGenericReceive+0x1a>
  40151c:	4845      	ldr	r0, [pc, #276]	; (401634 <xQueueGenericReceive+0x128>)
  40151e:	f240 31ce 	movw	r1, #974	; 0x3ce
  401522:	4b45      	ldr	r3, [pc, #276]	; (401638 <xQueueGenericReceive+0x12c>)
  401524:	4798      	blx	r3
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401526:	f1b9 0f00 	cmp.w	r9, #0
  40152a:	d106      	bne.n	40153a <xQueueGenericReceive+0x2e>
  40152c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40152e:	b123      	cbz	r3, 40153a <xQueueGenericReceive+0x2e>
  401530:	4840      	ldr	r0, [pc, #256]	; (401634 <xQueueGenericReceive+0x128>)
  401532:	f240 31cf 	movw	r1, #975	; 0x3cf
  401536:	4b40      	ldr	r3, [pc, #256]	; (401638 <xQueueGenericReceive+0x12c>)
  401538:	4798      	blx	r3
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  40153a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40153c:	4d3f      	ldr	r5, [pc, #252]	; (40163c <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40153e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 40166c <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  401542:	4e3f      	ldr	r6, [pc, #252]	; (401640 <xQueueGenericReceive+0x134>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401544:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  401546:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401548:	b343      	cbz	r3, 40159c <xQueueGenericReceive+0x90>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  40154a:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40154c:	4620      	mov	r0, r4
  40154e:	4649      	mov	r1, r9
  401550:	4b3c      	ldr	r3, [pc, #240]	; (401644 <xQueueGenericReceive+0x138>)
  401552:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  401554:	f1ba 0f00 	cmp.w	sl, #0
  401558:	d112      	bne.n	401580 <xQueueGenericReceive+0x74>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  40155a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40155c:	3b01      	subs	r3, #1
  40155e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401560:	6823      	ldr	r3, [r4, #0]
  401562:	b913      	cbnz	r3, 40156a <xQueueGenericReceive+0x5e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  401564:	4b38      	ldr	r3, [pc, #224]	; (401648 <xQueueGenericReceive+0x13c>)
  401566:	4798      	blx	r3
  401568:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40156a:	6923      	ldr	r3, [r4, #16]
  40156c:	b193      	cbz	r3, 401594 <xQueueGenericReceive+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40156e:	f104 0010 	add.w	r0, r4, #16
  401572:	4b36      	ldr	r3, [pc, #216]	; (40164c <xQueueGenericReceive+0x140>)
  401574:	4798      	blx	r3
  401576:	2801      	cmp	r0, #1
  401578:	d10c      	bne.n	401594 <xQueueGenericReceive+0x88>
						{
							portYIELD_WITHIN_API();
  40157a:	4b35      	ldr	r3, [pc, #212]	; (401650 <xQueueGenericReceive+0x144>)
  40157c:	4798      	blx	r3
  40157e:	e009      	b.n	401594 <xQueueGenericReceive+0x88>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  401580:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401582:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401584:	b133      	cbz	r3, 401594 <xQueueGenericReceive+0x88>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401586:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40158a:	4b30      	ldr	r3, [pc, #192]	; (40164c <xQueueGenericReceive+0x140>)
  40158c:	4798      	blx	r3
  40158e:	b108      	cbz	r0, 401594 <xQueueGenericReceive+0x88>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  401590:	4b2f      	ldr	r3, [pc, #188]	; (401650 <xQueueGenericReceive+0x144>)
  401592:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  401594:	4b2a      	ldr	r3, [pc, #168]	; (401640 <xQueueGenericReceive+0x134>)
  401596:	4798      	blx	r3
				return pdPASS;
  401598:	2001      	movs	r0, #1
  40159a:	e048      	b.n	40162e <xQueueGenericReceive+0x122>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  40159c:	9b01      	ldr	r3, [sp, #4]
  40159e:	b91b      	cbnz	r3, 4015a8 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4015a0:	4b27      	ldr	r3, [pc, #156]	; (401640 <xQueueGenericReceive+0x134>)
  4015a2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  4015a4:	2000      	movs	r0, #0
  4015a6:	e042      	b.n	40162e <xQueueGenericReceive+0x122>
				}
				else if( xEntryTimeSet == pdFALSE )
  4015a8:	b917      	cbnz	r7, 4015b0 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4015aa:	a802      	add	r0, sp, #8
  4015ac:	47c0      	blx	r8
					xEntryTimeSet = pdTRUE;
  4015ae:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  4015b0:	47b0      	blx	r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4015b2:	4b28      	ldr	r3, [pc, #160]	; (401654 <xQueueGenericReceive+0x148>)
  4015b4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4015b6:	47a8      	blx	r5
  4015b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4015ba:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015be:	bf04      	itt	eq
  4015c0:	2300      	moveq	r3, #0
  4015c2:	6463      	streq	r3, [r4, #68]	; 0x44
  4015c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015ca:	bf04      	itt	eq
  4015cc:	2300      	moveq	r3, #0
  4015ce:	64a3      	streq	r3, [r4, #72]	; 0x48
  4015d0:	47b0      	blx	r6

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4015d2:	a802      	add	r0, sp, #8
  4015d4:	a901      	add	r1, sp, #4
  4015d6:	4b20      	ldr	r3, [pc, #128]	; (401658 <xQueueGenericReceive+0x14c>)
  4015d8:	4798      	blx	r3
  4015da:	bb10      	cbnz	r0, 401622 <xQueueGenericReceive+0x116>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4015dc:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  4015de:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4015e2:	47b0      	blx	r6
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4015e4:	f1bb 0f00 	cmp.w	fp, #0
  4015e8:	d115      	bne.n	401616 <xQueueGenericReceive+0x10a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4015ea:	6823      	ldr	r3, [r4, #0]
  4015ec:	b923      	cbnz	r3, 4015f8 <xQueueGenericReceive+0xec>
					{
						portENTER_CRITICAL();
  4015ee:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4015f0:	6860      	ldr	r0, [r4, #4]
  4015f2:	4b1a      	ldr	r3, [pc, #104]	; (40165c <xQueueGenericReceive+0x150>)
  4015f4:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  4015f6:	47b0      	blx	r6
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4015f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015fc:	9901      	ldr	r1, [sp, #4]
  4015fe:	4b18      	ldr	r3, [pc, #96]	; (401660 <xQueueGenericReceive+0x154>)
  401600:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401602:	4620      	mov	r0, r4
  401604:	4b17      	ldr	r3, [pc, #92]	; (401664 <xQueueGenericReceive+0x158>)
  401606:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401608:	4b17      	ldr	r3, [pc, #92]	; (401668 <xQueueGenericReceive+0x15c>)
  40160a:	4798      	blx	r3
  40160c:	2800      	cmp	r0, #0
  40160e:	d199      	bne.n	401544 <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
  401610:	4b0f      	ldr	r3, [pc, #60]	; (401650 <xQueueGenericReceive+0x144>)
  401612:	4798      	blx	r3
  401614:	e796      	b.n	401544 <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401616:	4620      	mov	r0, r4
  401618:	4b12      	ldr	r3, [pc, #72]	; (401664 <xQueueGenericReceive+0x158>)
  40161a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40161c:	4b12      	ldr	r3, [pc, #72]	; (401668 <xQueueGenericReceive+0x15c>)
  40161e:	4798      	blx	r3
  401620:	e790      	b.n	401544 <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  401622:	4620      	mov	r0, r4
  401624:	4b0f      	ldr	r3, [pc, #60]	; (401664 <xQueueGenericReceive+0x158>)
  401626:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401628:	4b0f      	ldr	r3, [pc, #60]	; (401668 <xQueueGenericReceive+0x15c>)
  40162a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40162c:	2000      	movs	r0, #0
		}
	}
}
  40162e:	b005      	add	sp, #20
  401630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401634:	0040768c 	.word	0x0040768c
  401638:	004044e1 	.word	0x004044e1
  40163c:	00400eb5 	.word	0x00400eb5
  401640:	00400ed5 	.word	0x00400ed5
  401644:	004011a5 	.word	0x004011a5
  401648:	00401fed 	.word	0x00401fed
  40164c:	00401e9d 	.word	0x00401e9d
  401650:	00400e95 	.word	0x00400e95
  401654:	00401995 	.word	0x00401995
  401658:	00401f55 	.word	0x00401f55
  40165c:	00402019 	.word	0x00402019
  401660:	00401db1 	.word	0x00401db1
  401664:	004011cd 	.word	0x004011cd
  401668:	00401b39 	.word	0x00401b39
  40166c:	00401f25 	.word	0x00401f25

00401670 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  401670:	b538      	push	{r3, r4, r5, lr}
  401672:	4604      	mov	r4, r0
  401674:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401676:	4b0d      	ldr	r3, [pc, #52]	; (4016ac <vQueueWaitForMessageRestricted+0x3c>)
  401678:	4798      	blx	r3
  40167a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40167c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401680:	bf04      	itt	eq
  401682:	2300      	moveq	r3, #0
  401684:	6463      	streq	r3, [r4, #68]	; 0x44
  401686:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401688:	f1b3 3fff 	cmp.w	r3, #4294967295
  40168c:	bf04      	itt	eq
  40168e:	2300      	moveq	r3, #0
  401690:	64a3      	streq	r3, [r4, #72]	; 0x48
  401692:	4b07      	ldr	r3, [pc, #28]	; (4016b0 <vQueueWaitForMessageRestricted+0x40>)
  401694:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  401696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401698:	b923      	cbnz	r3, 4016a4 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40169a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40169e:	4629      	mov	r1, r5
  4016a0:	4b04      	ldr	r3, [pc, #16]	; (4016b4 <vQueueWaitForMessageRestricted+0x44>)
  4016a2:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  4016a4:	4620      	mov	r0, r4
  4016a6:	4b04      	ldr	r3, [pc, #16]	; (4016b8 <vQueueWaitForMessageRestricted+0x48>)
  4016a8:	4798      	blx	r3
  4016aa:	bd38      	pop	{r3, r4, r5, pc}
  4016ac:	00400eb5 	.word	0x00400eb5
  4016b0:	00400ed5 	.word	0x00400ed5
  4016b4:	00401e35 	.word	0x00401e35
  4016b8:	004011cd 	.word	0x004011cd

004016bc <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  4016bc:	b510      	push	{r4, lr}
  4016be:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4016c0:	4b0e      	ldr	r3, [pc, #56]	; (4016fc <prvAddCurrentTaskToDelayedList+0x40>)
  4016c2:	681b      	ldr	r3, [r3, #0]
  4016c4:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4016c6:	4b0e      	ldr	r3, [pc, #56]	; (401700 <prvAddCurrentTaskToDelayedList+0x44>)
  4016c8:	681b      	ldr	r3, [r3, #0]
  4016ca:	4298      	cmp	r0, r3
  4016cc:	d207      	bcs.n	4016de <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4016ce:	4b0d      	ldr	r3, [pc, #52]	; (401704 <prvAddCurrentTaskToDelayedList+0x48>)
  4016d0:	6818      	ldr	r0, [r3, #0]
  4016d2:	4b0a      	ldr	r3, [pc, #40]	; (4016fc <prvAddCurrentTaskToDelayedList+0x40>)
  4016d4:	6819      	ldr	r1, [r3, #0]
  4016d6:	3104      	adds	r1, #4
  4016d8:	4b0b      	ldr	r3, [pc, #44]	; (401708 <prvAddCurrentTaskToDelayedList+0x4c>)
  4016da:	4798      	blx	r3
  4016dc:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4016de:	4b0b      	ldr	r3, [pc, #44]	; (40170c <prvAddCurrentTaskToDelayedList+0x50>)
  4016e0:	6818      	ldr	r0, [r3, #0]
  4016e2:	4b06      	ldr	r3, [pc, #24]	; (4016fc <prvAddCurrentTaskToDelayedList+0x40>)
  4016e4:	6819      	ldr	r1, [r3, #0]
  4016e6:	3104      	adds	r1, #4
  4016e8:	4b07      	ldr	r3, [pc, #28]	; (401708 <prvAddCurrentTaskToDelayedList+0x4c>)
  4016ea:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4016ec:	4b08      	ldr	r3, [pc, #32]	; (401710 <prvAddCurrentTaskToDelayedList+0x54>)
  4016ee:	681b      	ldr	r3, [r3, #0]
  4016f0:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
  4016f2:	bf3c      	itt	cc
  4016f4:	4b06      	ldrcc	r3, [pc, #24]	; (401710 <prvAddCurrentTaskToDelayedList+0x54>)
  4016f6:	601c      	strcc	r4, [r3, #0]
  4016f8:	bd10      	pop	{r4, pc}
  4016fa:	bf00      	nop
  4016fc:	20018ac0 	.word	0x20018ac0
  401700:	2001894c 	.word	0x2001894c
  401704:	20018a7c 	.word	0x20018a7c
  401708:	00400dc9 	.word	0x00400dc9
  40170c:	20018a94 	.word	0x20018a94
  401710:	2000001c 	.word	0x2000001c

00401714 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  401714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401718:	b083      	sub	sp, #12
  40171a:	4688      	mov	r8, r1
  40171c:	4615      	mov	r5, r2
  40171e:	9301      	str	r3, [sp, #4]
  401720:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  401722:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  401726:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  401728:	9000      	str	r0, [sp, #0]
  40172a:	b920      	cbnz	r0, 401736 <xTaskGenericCreate+0x22>
  40172c:	485f      	ldr	r0, [pc, #380]	; (4018ac <xTaskGenericCreate+0x198>)
  40172e:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
  401732:	4b5f      	ldr	r3, [pc, #380]	; (4018b0 <xTaskGenericCreate+0x19c>)
  401734:	4798      	blx	r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  401736:	2f0e      	cmp	r7, #14
  401738:	d904      	bls.n	401744 <xTaskGenericCreate+0x30>
  40173a:	485c      	ldr	r0, [pc, #368]	; (4018ac <xTaskGenericCreate+0x198>)
  40173c:	f240 11ef 	movw	r1, #495	; 0x1ef
  401740:	4b5b      	ldr	r3, [pc, #364]	; (4018b0 <xTaskGenericCreate+0x19c>)
  401742:	4798      	blx	r3
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401744:	2050      	movs	r0, #80	; 0x50
  401746:	4b5b      	ldr	r3, [pc, #364]	; (4018b4 <xTaskGenericCreate+0x1a0>)
  401748:	4798      	blx	r3

	if( pxNewTCB != NULL )
  40174a:	4604      	mov	r4, r0
  40174c:	2800      	cmp	r0, #0
  40174e:	f000 80a7 	beq.w	4018a0 <xTaskGenericCreate+0x18c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401752:	2e00      	cmp	r6, #0
  401754:	f040 80a1 	bne.w	40189a <xTaskGenericCreate+0x186>
  401758:	00a8      	lsls	r0, r5, #2
  40175a:	4b56      	ldr	r3, [pc, #344]	; (4018b4 <xTaskGenericCreate+0x1a0>)
  40175c:	4798      	blx	r3
  40175e:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  401760:	b918      	cbnz	r0, 40176a <xTaskGenericCreate+0x56>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  401762:	4620      	mov	r0, r4
  401764:	4b54      	ldr	r3, [pc, #336]	; (4018b8 <xTaskGenericCreate+0x1a4>)
  401766:	4798      	blx	r3
  401768:	e09a      	b.n	4018a0 <xTaskGenericCreate+0x18c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  40176a:	21a5      	movs	r1, #165	; 0xa5
  40176c:	00aa      	lsls	r2, r5, #2
  40176e:	4b53      	ldr	r3, [pc, #332]	; (4018bc <xTaskGenericCreate+0x1a8>)
  401770:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  401772:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  401776:	3d01      	subs	r5, #1
  401778:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40177a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  40177e:	f025 0507 	bic.w	r5, r5, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  401782:	f104 0034 	add.w	r0, r4, #52	; 0x34
  401786:	4641      	mov	r1, r8
  401788:	220a      	movs	r2, #10
  40178a:	4b4d      	ldr	r3, [pc, #308]	; (4018c0 <xTaskGenericCreate+0x1ac>)
  40178c:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  40178e:	f04f 0a00 	mov.w	sl, #0
  401792:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d
  401796:	463e      	mov	r6, r7
  401798:	2f0e      	cmp	r7, #14
  40179a:	bf28      	it	cs
  40179c:	260e      	movcs	r6, #14
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
  40179e:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4017a0:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4017a2:	f104 0804 	add.w	r8, r4, #4
  4017a6:	4640      	mov	r0, r8
  4017a8:	f8df b164 	ldr.w	fp, [pc, #356]	; 401910 <xTaskGenericCreate+0x1fc>
  4017ac:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4017ae:	f104 0018 	add.w	r0, r4, #24
  4017b2:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4017b4:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  4017b6:	f1c6 060f 	rsb	r6, r6, #15
  4017ba:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4017bc:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
  4017be:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4017c2:	4628      	mov	r0, r5
  4017c4:	9900      	ldr	r1, [sp, #0]
  4017c6:	9a01      	ldr	r2, [sp, #4]
  4017c8:	4b3e      	ldr	r3, [pc, #248]	; (4018c4 <xTaskGenericCreate+0x1b0>)
  4017ca:	4798      	blx	r3
  4017cc:	6020      	str	r0, [r4, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  4017ce:	f1b9 0f00 	cmp.w	r9, #0
  4017d2:	d001      	beq.n	4017d8 <xTaskGenericCreate+0xc4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  4017d4:	f8c9 4000 	str.w	r4, [r9]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  4017d8:	4b3b      	ldr	r3, [pc, #236]	; (4018c8 <xTaskGenericCreate+0x1b4>)
  4017da:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4017dc:	4a3b      	ldr	r2, [pc, #236]	; (4018cc <xTaskGenericCreate+0x1b8>)
  4017de:	6813      	ldr	r3, [r2, #0]
  4017e0:	3301      	adds	r3, #1
  4017e2:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4017e4:	4b3a      	ldr	r3, [pc, #232]	; (4018d0 <xTaskGenericCreate+0x1bc>)
  4017e6:	681b      	ldr	r3, [r3, #0]
  4017e8:	bb0b      	cbnz	r3, 40182e <xTaskGenericCreate+0x11a>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4017ea:	4b39      	ldr	r3, [pc, #228]	; (4018d0 <xTaskGenericCreate+0x1bc>)
  4017ec:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4017ee:	6813      	ldr	r3, [r2, #0]
  4017f0:	2b01      	cmp	r3, #1
  4017f2:	d126      	bne.n	401842 <xTaskGenericCreate+0x12e>
  4017f4:	4d37      	ldr	r5, [pc, #220]	; (4018d4 <xTaskGenericCreate+0x1c0>)
  4017f6:	f505 7996 	add.w	r9, r5, #300	; 0x12c
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4017fa:	4e37      	ldr	r6, [pc, #220]	; (4018d8 <xTaskGenericCreate+0x1c4>)
  4017fc:	4628      	mov	r0, r5
  4017fe:	47b0      	blx	r6
  401800:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401802:	454d      	cmp	r5, r9
  401804:	d1fa      	bne.n	4017fc <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  401806:	f8df 910c 	ldr.w	r9, [pc, #268]	; 401914 <xTaskGenericCreate+0x200>
  40180a:	4648      	mov	r0, r9
  40180c:	4d32      	ldr	r5, [pc, #200]	; (4018d8 <xTaskGenericCreate+0x1c4>)
  40180e:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  401810:	4e32      	ldr	r6, [pc, #200]	; (4018dc <xTaskGenericCreate+0x1c8>)
  401812:	4630      	mov	r0, r6
  401814:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
  401816:	4832      	ldr	r0, [pc, #200]	; (4018e0 <xTaskGenericCreate+0x1cc>)
  401818:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  40181a:	4832      	ldr	r0, [pc, #200]	; (4018e4 <xTaskGenericCreate+0x1d0>)
  40181c:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  40181e:	4832      	ldr	r0, [pc, #200]	; (4018e8 <xTaskGenericCreate+0x1d4>)
  401820:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401822:	4b32      	ldr	r3, [pc, #200]	; (4018ec <xTaskGenericCreate+0x1d8>)
  401824:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401828:	4b31      	ldr	r3, [pc, #196]	; (4018f0 <xTaskGenericCreate+0x1dc>)
  40182a:	601e      	str	r6, [r3, #0]
  40182c:	e009      	b.n	401842 <xTaskGenericCreate+0x12e>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40182e:	4b31      	ldr	r3, [pc, #196]	; (4018f4 <xTaskGenericCreate+0x1e0>)
  401830:	681b      	ldr	r3, [r3, #0]
  401832:	b933      	cbnz	r3, 401842 <xTaskGenericCreate+0x12e>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401834:	4b26      	ldr	r3, [pc, #152]	; (4018d0 <xTaskGenericCreate+0x1bc>)
  401836:	681b      	ldr	r3, [r3, #0]
  401838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40183a:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
  40183c:	bf24      	itt	cs
  40183e:	4b24      	ldrcs	r3, [pc, #144]	; (4018d0 <xTaskGenericCreate+0x1bc>)
  401840:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  401842:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401844:	4b2c      	ldr	r3, [pc, #176]	; (4018f8 <xTaskGenericCreate+0x1e4>)
  401846:	681b      	ldr	r3, [r3, #0]
  401848:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  40184a:	bf84      	itt	hi
  40184c:	4b2a      	ldrhi	r3, [pc, #168]	; (4018f8 <xTaskGenericCreate+0x1e4>)
  40184e:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401850:	4a2a      	ldr	r2, [pc, #168]	; (4018fc <xTaskGenericCreate+0x1e8>)
  401852:	6813      	ldr	r3, [r2, #0]
  401854:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  401856:	3301      	adds	r3, #1
  401858:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  40185a:	4929      	ldr	r1, [pc, #164]	; (401900 <xTaskGenericCreate+0x1ec>)
  40185c:	680a      	ldr	r2, [r1, #0]
  40185e:	2301      	movs	r3, #1
  401860:	4083      	lsls	r3, r0
  401862:	4313      	orrs	r3, r2
  401864:	600b      	str	r3, [r1, #0]
  401866:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40186a:	4b1a      	ldr	r3, [pc, #104]	; (4018d4 <xTaskGenericCreate+0x1c0>)
  40186c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401870:	4641      	mov	r1, r8
  401872:	4b24      	ldr	r3, [pc, #144]	; (401904 <xTaskGenericCreate+0x1f0>)
  401874:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401876:	4b24      	ldr	r3, [pc, #144]	; (401908 <xTaskGenericCreate+0x1f4>)
  401878:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  40187a:	4b1e      	ldr	r3, [pc, #120]	; (4018f4 <xTaskGenericCreate+0x1e0>)
  40187c:	681b      	ldr	r3, [r3, #0]
  40187e:	b143      	cbz	r3, 401892 <xTaskGenericCreate+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401880:	4b13      	ldr	r3, [pc, #76]	; (4018d0 <xTaskGenericCreate+0x1bc>)
  401882:	681b      	ldr	r3, [r3, #0]
  401884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401886:	429f      	cmp	r7, r3
  401888:	d905      	bls.n	401896 <xTaskGenericCreate+0x182>
			{
				portYIELD_WITHIN_API();
  40188a:	4b20      	ldr	r3, [pc, #128]	; (40190c <xTaskGenericCreate+0x1f8>)
  40188c:	4798      	blx	r3
  40188e:	2001      	movs	r0, #1
  401890:	e008      	b.n	4018a4 <xTaskGenericCreate+0x190>
  401892:	2001      	movs	r0, #1
  401894:	e006      	b.n	4018a4 <xTaskGenericCreate+0x190>
  401896:	2001      	movs	r0, #1
  401898:	e004      	b.n	4018a4 <xTaskGenericCreate+0x190>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  40189a:	6306      	str	r6, [r0, #48]	; 0x30
  40189c:	4630      	mov	r0, r6
  40189e:	e764      	b.n	40176a <xTaskGenericCreate+0x56>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4018a0:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
  4018a4:	b003      	add	sp, #12
  4018a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018aa:	bf00      	nop
  4018ac:	00407724 	.word	0x00407724
  4018b0:	004044e1 	.word	0x004044e1
  4018b4:	00401029 	.word	0x00401029
  4018b8:	00401109 	.word	0x00401109
  4018bc:	004047a9 	.word	0x004047a9
  4018c0:	00404a15 	.word	0x00404a15
  4018c4:	00400e55 	.word	0x00400e55
  4018c8:	00400eb5 	.word	0x00400eb5
  4018cc:	20018a98 	.word	0x20018a98
  4018d0:	20018ac0 	.word	0x20018ac0
  4018d4:	20018950 	.word	0x20018950
  4018d8:	00400d8d 	.word	0x00400d8d
  4018dc:	20018aec 	.word	0x20018aec
  4018e0:	20018a9c 	.word	0x20018a9c
  4018e4:	20018a80 	.word	0x20018a80
  4018e8:	20018ac4 	.word	0x20018ac4
  4018ec:	20018a94 	.word	0x20018a94
  4018f0:	20018a7c 	.word	0x20018a7c
  4018f4:	20018ab0 	.word	0x20018ab0
  4018f8:	20018b0c 	.word	0x20018b0c
  4018fc:	20018abc 	.word	0x20018abc
  401900:	20018944 	.word	0x20018944
  401904:	00400dad 	.word	0x00400dad
  401908:	00400ed5 	.word	0x00400ed5
  40190c:	00400e95 	.word	0x00400e95
  401910:	00400da5 	.word	0x00400da5
  401914:	20018ad8 	.word	0x20018ad8

00401918 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  401918:	b510      	push	{r4, lr}
  40191a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  40191c:	2300      	movs	r3, #0
  40191e:	9300      	str	r3, [sp, #0]
  401920:	9301      	str	r3, [sp, #4]
  401922:	9302      	str	r3, [sp, #8]
  401924:	9303      	str	r3, [sp, #12]
  401926:	4810      	ldr	r0, [pc, #64]	; (401968 <vTaskStartScheduler+0x50>)
  401928:	4910      	ldr	r1, [pc, #64]	; (40196c <vTaskStartScheduler+0x54>)
  40192a:	2282      	movs	r2, #130	; 0x82
  40192c:	4c10      	ldr	r4, [pc, #64]	; (401970 <vTaskStartScheduler+0x58>)
  40192e:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401930:	2801      	cmp	r0, #1
  401932:	d110      	bne.n	401956 <vTaskStartScheduler+0x3e>
		{
			xReturn = xTimerCreateTimerTask();
  401934:	4b0f      	ldr	r3, [pc, #60]	; (401974 <vTaskStartScheduler+0x5c>)
  401936:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
  401938:	2801      	cmp	r0, #1
  40193a:	d10c      	bne.n	401956 <vTaskStartScheduler+0x3e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  40193c:	4b0e      	ldr	r3, [pc, #56]	; (401978 <vTaskStartScheduler+0x60>)
  40193e:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  401940:	2201      	movs	r2, #1
  401942:	4b0e      	ldr	r3, [pc, #56]	; (40197c <vTaskStartScheduler+0x64>)
  401944:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  401946:	2200      	movs	r2, #0
  401948:	4b0d      	ldr	r3, [pc, #52]	; (401980 <vTaskStartScheduler+0x68>)
  40194a:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
  40194c:	4b0d      	ldr	r3, [pc, #52]	; (401984 <vTaskStartScheduler+0x6c>)
  40194e:	4798      	blx	r3

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401950:	4b0d      	ldr	r3, [pc, #52]	; (401988 <vTaskStartScheduler+0x70>)
  401952:	4798      	blx	r3
  401954:	e005      	b.n	401962 <vTaskStartScheduler+0x4a>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  401956:	b920      	cbnz	r0, 401962 <vTaskStartScheduler+0x4a>
  401958:	480c      	ldr	r0, [pc, #48]	; (40198c <vTaskStartScheduler+0x74>)
  40195a:	f240 5116 	movw	r1, #1302	; 0x516
  40195e:	4b0c      	ldr	r3, [pc, #48]	; (401990 <vTaskStartScheduler+0x78>)
  401960:	4798      	blx	r3
}
  401962:	b004      	add	sp, #16
  401964:	bd10      	pop	{r4, pc}
  401966:	bf00      	nop
  401968:	00401c45 	.word	0x00401c45
  40196c:	00407764 	.word	0x00407764
  401970:	00401715 	.word	0x00401715
  401974:	004021cd 	.word	0x004021cd
  401978:	00400ea5 	.word	0x00400ea5
  40197c:	20018ab0 	.word	0x20018ab0
  401980:	2001894c 	.word	0x2001894c
  401984:	00404535 	.word	0x00404535
  401988:	00400f85 	.word	0x00400f85
  40198c:	00407724 	.word	0x00407724
  401990:	004044e1 	.word	0x004044e1

00401994 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  401994:	4a02      	ldr	r2, [pc, #8]	; (4019a0 <vTaskSuspendAll+0xc>)
  401996:	6813      	ldr	r3, [r2, #0]
  401998:	3301      	adds	r3, #1
  40199a:	6013      	str	r3, [r2, #0]
  40199c:	4770      	bx	lr
  40199e:	bf00      	nop
  4019a0:	20018b00 	.word	0x20018b00

004019a4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  4019a4:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  4019a6:	4b04      	ldr	r3, [pc, #16]	; (4019b8 <xTaskGetTickCount+0x14>)
  4019a8:	4798      	blx	r3
	{
		xTicks = xTickCount;
  4019aa:	4b04      	ldr	r3, [pc, #16]	; (4019bc <xTaskGetTickCount+0x18>)
  4019ac:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
  4019ae:	4b04      	ldr	r3, [pc, #16]	; (4019c0 <xTaskGetTickCount+0x1c>)
  4019b0:	4798      	blx	r3

	return xTicks;
}
  4019b2:	4620      	mov	r0, r4
  4019b4:	bd10      	pop	{r4, pc}
  4019b6:	bf00      	nop
  4019b8:	00400eb5 	.word	0x00400eb5
  4019bc:	2001894c 	.word	0x2001894c
  4019c0:	00400ed5 	.word	0x00400ed5

004019c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
  4019c4:	b510      	push	{r4, lr}
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  4019c6:	4b04      	ldr	r3, [pc, #16]	; (4019d8 <xTaskGetTickCountFromISR+0x14>)
  4019c8:	4798      	blx	r3
	xReturn = xTickCount;
  4019ca:	4b04      	ldr	r3, [pc, #16]	; (4019dc <xTaskGetTickCountFromISR+0x18>)
  4019cc:	681c      	ldr	r4, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  4019ce:	4b04      	ldr	r3, [pc, #16]	; (4019e0 <xTaskGetTickCountFromISR+0x1c>)
  4019d0:	4798      	blx	r3

	return xReturn;
}
  4019d2:	4620      	mov	r0, r4
  4019d4:	bd10      	pop	{r4, pc}
  4019d6:	bf00      	nop
  4019d8:	00400ea5 	.word	0x00400ea5
  4019dc:	2001894c 	.word	0x2001894c
  4019e0:	00400ecd 	.word	0x00400ecd

004019e4 <pcTaskGetTaskName>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_pcTaskGetTaskName == 1 )

	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
  4019e4:	b510      	push	{r4, lr}
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
  4019e6:	4604      	mov	r4, r0
  4019e8:	b938      	cbnz	r0, 4019fa <pcTaskGetTaskName+0x16>
  4019ea:	4b05      	ldr	r3, [pc, #20]	; (401a00 <pcTaskGetTaskName+0x1c>)
  4019ec:	681c      	ldr	r4, [r3, #0]
		configASSERT( pxTCB );
  4019ee:	b924      	cbnz	r4, 4019fa <pcTaskGetTaskName+0x16>
  4019f0:	4804      	ldr	r0, [pc, #16]	; (401a04 <pcTaskGetTaskName+0x20>)
  4019f2:	f240 51cc 	movw	r1, #1484	; 0x5cc
  4019f6:	4b04      	ldr	r3, [pc, #16]	; (401a08 <pcTaskGetTaskName+0x24>)
  4019f8:	4798      	blx	r3
		return &( pxTCB->pcTaskName[ 0 ] );
	}
  4019fa:	f104 0034 	add.w	r0, r4, #52	; 0x34
  4019fe:	bd10      	pop	{r4, pc}
  401a00:	20018ac0 	.word	0x20018ac0
  401a04:	00407724 	.word	0x00407724
  401a08:	004044e1 	.word	0x004044e1

00401a0c <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401a0c:	4b3d      	ldr	r3, [pc, #244]	; (401b04 <vTaskIncrementTick+0xf8>)
  401a0e:	681b      	ldr	r3, [r3, #0]
  401a10:	2b00      	cmp	r3, #0
  401a12:	d16f      	bne.n	401af4 <vTaskIncrementTick+0xe8>
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  401a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
	{
		++xTickCount;
  401a18:	4b3b      	ldr	r3, [pc, #236]	; (401b08 <vTaskIncrementTick+0xfc>)
  401a1a:	681a      	ldr	r2, [r3, #0]
  401a1c:	3201      	adds	r2, #1
  401a1e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  401a20:	681b      	ldr	r3, [r3, #0]
  401a22:	bb0b      	cbnz	r3, 401a68 <vTaskIncrementTick+0x5c>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  401a24:	4b39      	ldr	r3, [pc, #228]	; (401b0c <vTaskIncrementTick+0x100>)
  401a26:	681b      	ldr	r3, [r3, #0]
  401a28:	681b      	ldr	r3, [r3, #0]
  401a2a:	b123      	cbz	r3, 401a36 <vTaskIncrementTick+0x2a>
  401a2c:	4838      	ldr	r0, [pc, #224]	; (401b10 <vTaskIncrementTick+0x104>)
  401a2e:	f240 618f 	movw	r1, #1679	; 0x68f
  401a32:	4b38      	ldr	r3, [pc, #224]	; (401b14 <vTaskIncrementTick+0x108>)
  401a34:	4798      	blx	r3

			pxTemp = pxDelayedTaskList;
  401a36:	4b35      	ldr	r3, [pc, #212]	; (401b0c <vTaskIncrementTick+0x100>)
  401a38:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  401a3a:	4a37      	ldr	r2, [pc, #220]	; (401b18 <vTaskIncrementTick+0x10c>)
  401a3c:	6810      	ldr	r0, [r2, #0]
  401a3e:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  401a40:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
  401a42:	4936      	ldr	r1, [pc, #216]	; (401b1c <vTaskIncrementTick+0x110>)
  401a44:	680a      	ldr	r2, [r1, #0]
  401a46:	3201      	adds	r2, #1
  401a48:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401a4a:	681b      	ldr	r3, [r3, #0]
  401a4c:	681b      	ldr	r3, [r3, #0]
  401a4e:	b923      	cbnz	r3, 401a5a <vTaskIncrementTick+0x4e>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  401a50:	f04f 32ff 	mov.w	r2, #4294967295
  401a54:	4b32      	ldr	r3, [pc, #200]	; (401b20 <vTaskIncrementTick+0x114>)
  401a56:	601a      	str	r2, [r3, #0]
  401a58:	e006      	b.n	401a68 <vTaskIncrementTick+0x5c>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401a5a:	4b2c      	ldr	r3, [pc, #176]	; (401b0c <vTaskIncrementTick+0x100>)
  401a5c:	681b      	ldr	r3, [r3, #0]
  401a5e:	68db      	ldr	r3, [r3, #12]
  401a60:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401a62:	685a      	ldr	r2, [r3, #4]
  401a64:	4b2e      	ldr	r3, [pc, #184]	; (401b20 <vTaskIncrementTick+0x114>)
  401a66:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  401a68:	4b27      	ldr	r3, [pc, #156]	; (401b08 <vTaskIncrementTick+0xfc>)
  401a6a:	681a      	ldr	r2, [r3, #0]
  401a6c:	4b2c      	ldr	r3, [pc, #176]	; (401b20 <vTaskIncrementTick+0x114>)
  401a6e:	681b      	ldr	r3, [r3, #0]
  401a70:	429a      	cmp	r2, r3
  401a72:	d344      	bcc.n	401afe <vTaskIncrementTick+0xf2>
  401a74:	4b25      	ldr	r3, [pc, #148]	; (401b0c <vTaskIncrementTick+0x100>)
  401a76:	681b      	ldr	r3, [r3, #0]
  401a78:	681b      	ldr	r3, [r3, #0]
  401a7a:	b16b      	cbz	r3, 401a98 <vTaskIncrementTick+0x8c>
  401a7c:	4b23      	ldr	r3, [pc, #140]	; (401b0c <vTaskIncrementTick+0x100>)
  401a7e:	681b      	ldr	r3, [r3, #0]
  401a80:	68db      	ldr	r3, [r3, #12]
  401a82:	68dc      	ldr	r4, [r3, #12]
  401a84:	6863      	ldr	r3, [r4, #4]
  401a86:	4a20      	ldr	r2, [pc, #128]	; (401b08 <vTaskIncrementTick+0xfc>)
  401a88:	6812      	ldr	r2, [r2, #0]
  401a8a:	4293      	cmp	r3, r2
  401a8c:	d813      	bhi.n	401ab6 <vTaskIncrementTick+0xaa>
  401a8e:	4f25      	ldr	r7, [pc, #148]	; (401b24 <vTaskIncrementTick+0x118>)
  401a90:	4e25      	ldr	r6, [pc, #148]	; (401b28 <vTaskIncrementTick+0x11c>)
  401a92:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 401b34 <vTaskIncrementTick+0x128>
  401a96:	e012      	b.n	401abe <vTaskIncrementTick+0xb2>
  401a98:	f04f 32ff 	mov.w	r2, #4294967295
  401a9c:	4b20      	ldr	r3, [pc, #128]	; (401b20 <vTaskIncrementTick+0x114>)
  401a9e:	601a      	str	r2, [r3, #0]
  401aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401aa4:	4b19      	ldr	r3, [pc, #100]	; (401b0c <vTaskIncrementTick+0x100>)
  401aa6:	681b      	ldr	r3, [r3, #0]
  401aa8:	68db      	ldr	r3, [r3, #12]
  401aaa:	68dc      	ldr	r4, [r3, #12]
  401aac:	6863      	ldr	r3, [r4, #4]
  401aae:	4a16      	ldr	r2, [pc, #88]	; (401b08 <vTaskIncrementTick+0xfc>)
  401ab0:	6812      	ldr	r2, [r2, #0]
  401ab2:	4293      	cmp	r3, r2
  401ab4:	d903      	bls.n	401abe <vTaskIncrementTick+0xb2>
  401ab6:	4a1a      	ldr	r2, [pc, #104]	; (401b20 <vTaskIncrementTick+0x114>)
  401ab8:	6013      	str	r3, [r2, #0]
  401aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401abe:	1d25      	adds	r5, r4, #4
  401ac0:	4628      	mov	r0, r5
  401ac2:	47b8      	blx	r7
  401ac4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401ac6:	b113      	cbz	r3, 401ace <vTaskIncrementTick+0xc2>
  401ac8:	f104 0018 	add.w	r0, r4, #24
  401acc:	47b8      	blx	r7
  401ace:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ad0:	6832      	ldr	r2, [r6, #0]
  401ad2:	2301      	movs	r3, #1
  401ad4:	4083      	lsls	r3, r0
  401ad6:	4313      	orrs	r3, r2
  401ad8:	6033      	str	r3, [r6, #0]
  401ada:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ade:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  401ae2:	4629      	mov	r1, r5
  401ae4:	4b11      	ldr	r3, [pc, #68]	; (401b2c <vTaskIncrementTick+0x120>)
  401ae6:	4798      	blx	r3
  401ae8:	4b08      	ldr	r3, [pc, #32]	; (401b0c <vTaskIncrementTick+0x100>)
  401aea:	681b      	ldr	r3, [r3, #0]
  401aec:	681b      	ldr	r3, [r3, #0]
  401aee:	2b00      	cmp	r3, #0
  401af0:	d1d8      	bne.n	401aa4 <vTaskIncrementTick+0x98>
  401af2:	e7d1      	b.n	401a98 <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
  401af4:	4a0e      	ldr	r2, [pc, #56]	; (401b30 <vTaskIncrementTick+0x124>)
  401af6:	6813      	ldr	r3, [r2, #0]
  401af8:	3301      	adds	r3, #1
  401afa:	6013      	str	r3, [r2, #0]
  401afc:	4770      	bx	lr
  401afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b02:	bf00      	nop
  401b04:	20018b00 	.word	0x20018b00
  401b08:	2001894c 	.word	0x2001894c
  401b0c:	20018a94 	.word	0x20018a94
  401b10:	00407724 	.word	0x00407724
  401b14:	004044e1 	.word	0x004044e1
  401b18:	20018a7c 	.word	0x20018a7c
  401b1c:	20018b08 	.word	0x20018b08
  401b20:	2000001c 	.word	0x2000001c
  401b24:	00400e05 	.word	0x00400e05
  401b28:	20018944 	.word	0x20018944
  401b2c:	00400dad 	.word	0x00400dad
  401b30:	20018b04 	.word	0x20018b04
  401b34:	20018950 	.word	0x20018950

00401b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  401b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401b3c:	4b31      	ldr	r3, [pc, #196]	; (401c04 <xTaskResumeAll+0xcc>)
  401b3e:	681b      	ldr	r3, [r3, #0]
  401b40:	b923      	cbnz	r3, 401b4c <xTaskResumeAll+0x14>
  401b42:	4831      	ldr	r0, [pc, #196]	; (401c08 <xTaskResumeAll+0xd0>)
  401b44:	f44f 61aa 	mov.w	r1, #1360	; 0x550
  401b48:	4b30      	ldr	r3, [pc, #192]	; (401c0c <xTaskResumeAll+0xd4>)
  401b4a:	4798      	blx	r3
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401b4c:	4b30      	ldr	r3, [pc, #192]	; (401c10 <xTaskResumeAll+0xd8>)
  401b4e:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401b50:	4b2c      	ldr	r3, [pc, #176]	; (401c04 <xTaskResumeAll+0xcc>)
  401b52:	681a      	ldr	r2, [r3, #0]
  401b54:	3a01      	subs	r2, #1
  401b56:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401b58:	681b      	ldr	r3, [r3, #0]
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d14a      	bne.n	401bf4 <xTaskResumeAll+0xbc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  401b5e:	4b2d      	ldr	r3, [pc, #180]	; (401c14 <xTaskResumeAll+0xdc>)
  401b60:	681b      	ldr	r3, [r3, #0]
  401b62:	bb0b      	cbnz	r3, 401ba8 <xTaskResumeAll+0x70>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  401b64:	2400      	movs	r4, #0
  401b66:	e048      	b.n	401bfa <xTaskResumeAll+0xc2>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  401b68:	68f3      	ldr	r3, [r6, #12]
  401b6a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  401b6c:	f104 0018 	add.w	r0, r4, #24
  401b70:	47c8      	blx	r9
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401b72:	1d25      	adds	r5, r4, #4
  401b74:	4628      	mov	r0, r5
  401b76:	47c8      	blx	r9
					prvAddTaskToReadyQueue( pxTCB );
  401b78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401b7a:	f8d8 2000 	ldr.w	r2, [r8]
  401b7e:	2301      	movs	r3, #1
  401b80:	4083      	lsls	r3, r0
  401b82:	4313      	orrs	r3, r2
  401b84:	f8c8 3000 	str.w	r3, [r8]
  401b88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b8c:	4b22      	ldr	r3, [pc, #136]	; (401c18 <xTaskResumeAll+0xe0>)
  401b8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b92:	4629      	mov	r1, r5
  401b94:	4b21      	ldr	r3, [pc, #132]	; (401c1c <xTaskResumeAll+0xe4>)
  401b96:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401b98:	4b21      	ldr	r3, [pc, #132]	; (401c20 <xTaskResumeAll+0xe8>)
  401b9a:	681b      	ldr	r3, [r3, #0]
  401b9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
  401ba0:	429a      	cmp	r2, r3
  401ba2:	bf28      	it	cs
  401ba4:	2701      	movcs	r7, #1
  401ba6:	e005      	b.n	401bb4 <xTaskResumeAll+0x7c>
  401ba8:	2700      	movs	r7, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401baa:	4e1e      	ldr	r6, [pc, #120]	; (401c24 <xTaskResumeAll+0xec>)
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
  401bac:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401c3c <xTaskResumeAll+0x104>
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
  401bb0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401c40 <xTaskResumeAll+0x108>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401bb4:	6833      	ldr	r3, [r6, #0]
  401bb6:	2b00      	cmp	r3, #0
  401bb8:	d1d6      	bne.n	401b68 <xTaskResumeAll+0x30>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401bba:	4b1b      	ldr	r3, [pc, #108]	; (401c28 <xTaskResumeAll+0xf0>)
  401bbc:	681b      	ldr	r3, [r3, #0]
  401bbe:	b163      	cbz	r3, 401bda <xTaskResumeAll+0xa2>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401bc0:	4b19      	ldr	r3, [pc, #100]	; (401c28 <xTaskResumeAll+0xf0>)
  401bc2:	681b      	ldr	r3, [r3, #0]
  401bc4:	b17b      	cbz	r3, 401be6 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  401bc6:	4d19      	ldr	r5, [pc, #100]	; (401c2c <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
  401bc8:	4c17      	ldr	r4, [pc, #92]	; (401c28 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
  401bca:	47a8      	blx	r5
						--uxMissedTicks;
  401bcc:	6823      	ldr	r3, [r4, #0]
  401bce:	3b01      	subs	r3, #1
  401bd0:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401bd2:	6823      	ldr	r3, [r4, #0]
  401bd4:	2b00      	cmp	r3, #0
  401bd6:	d1f8      	bne.n	401bca <xTaskResumeAll+0x92>
  401bd8:	e005      	b.n	401be6 <xTaskResumeAll+0xae>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  401bda:	2f01      	cmp	r7, #1
  401bdc:	d003      	beq.n	401be6 <xTaskResumeAll+0xae>
  401bde:	4b14      	ldr	r3, [pc, #80]	; (401c30 <xTaskResumeAll+0xf8>)
  401be0:	681b      	ldr	r3, [r3, #0]
  401be2:	2b01      	cmp	r3, #1
  401be4:	d108      	bne.n	401bf8 <xTaskResumeAll+0xc0>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
  401be6:	2200      	movs	r2, #0
  401be8:	4b11      	ldr	r3, [pc, #68]	; (401c30 <xTaskResumeAll+0xf8>)
  401bea:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  401bec:	4b11      	ldr	r3, [pc, #68]	; (401c34 <xTaskResumeAll+0xfc>)
  401bee:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
  401bf0:	2401      	movs	r4, #1
  401bf2:	e002      	b.n	401bfa <xTaskResumeAll+0xc2>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  401bf4:	2400      	movs	r4, #0
  401bf6:	e000      	b.n	401bfa <xTaskResumeAll+0xc2>
  401bf8:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  401bfa:	4b0f      	ldr	r3, [pc, #60]	; (401c38 <xTaskResumeAll+0x100>)
  401bfc:	4798      	blx	r3

	return xAlreadyYielded;
}
  401bfe:	4620      	mov	r0, r4
  401c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401c04:	20018b00 	.word	0x20018b00
  401c08:	00407724 	.word	0x00407724
  401c0c:	004044e1 	.word	0x004044e1
  401c10:	00400eb5 	.word	0x00400eb5
  401c14:	20018a98 	.word	0x20018a98
  401c18:	20018950 	.word	0x20018950
  401c1c:	00400dad 	.word	0x00400dad
  401c20:	20018ac0 	.word	0x20018ac0
  401c24:	20018a9c 	.word	0x20018a9c
  401c28:	20018b04 	.word	0x20018b04
  401c2c:	00401a0d 	.word	0x00401a0d
  401c30:	20018ab8 	.word	0x20018ab8
  401c34:	00400e95 	.word	0x00400e95
  401c38:	00400ed5 	.word	0x00400ed5
  401c3c:	00400e05 	.word	0x00400e05
  401c40:	20018944 	.word	0x20018944

00401c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401c44:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401c46:	4d15      	ldr	r5, [pc, #84]	; (401c9c <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401c48:	4e15      	ldr	r6, [pc, #84]	; (401ca0 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  401c4a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 401cc0 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
  401c4e:	4f15      	ldr	r7, [pc, #84]	; (401ca4 <prvIdleTask+0x60>)
  401c50:	e019      	b.n	401c86 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  401c52:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401c54:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
  401c56:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  401c58:	b1ac      	cbz	r4, 401c86 <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  401c5a:	4b13      	ldr	r3, [pc, #76]	; (401ca8 <prvIdleTask+0x64>)
  401c5c:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401c5e:	68f3      	ldr	r3, [r6, #12]
  401c60:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401c62:	1d20      	adds	r0, r4, #4
  401c64:	4b11      	ldr	r3, [pc, #68]	; (401cac <prvIdleTask+0x68>)
  401c66:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401c68:	4a11      	ldr	r2, [pc, #68]	; (401cb0 <prvIdleTask+0x6c>)
  401c6a:	6813      	ldr	r3, [r2, #0]
  401c6c:	3b01      	subs	r3, #1
  401c6e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401c70:	682b      	ldr	r3, [r5, #0]
  401c72:	3b01      	subs	r3, #1
  401c74:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401c76:	4b0f      	ldr	r3, [pc, #60]	; (401cb4 <prvIdleTask+0x70>)
  401c78:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401c7a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401c7c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 401cc4 <prvIdleTask+0x80>
  401c80:	47c8      	blx	r9
		vPortFree( pxTCB );
  401c82:	4620      	mov	r0, r4
  401c84:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401c86:	682b      	ldr	r3, [r5, #0]
  401c88:	2b00      	cmp	r3, #0
  401c8a:	d1e2      	bne.n	401c52 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  401c8c:	4b0a      	ldr	r3, [pc, #40]	; (401cb8 <prvIdleTask+0x74>)
  401c8e:	681b      	ldr	r3, [r3, #0]
  401c90:	2b01      	cmp	r3, #1
  401c92:	d9f8      	bls.n	401c86 <prvIdleTask+0x42>
			{
				taskYIELD();
  401c94:	4b09      	ldr	r3, [pc, #36]	; (401cbc <prvIdleTask+0x78>)
  401c96:	4798      	blx	r3
  401c98:	e7d7      	b.n	401c4a <prvIdleTask+0x6>
  401c9a:	bf00      	nop
  401c9c:	20018948 	.word	0x20018948
  401ca0:	20018a80 	.word	0x20018a80
  401ca4:	00401b39 	.word	0x00401b39
  401ca8:	00400eb5 	.word	0x00400eb5
  401cac:	00400e05 	.word	0x00400e05
  401cb0:	20018a98 	.word	0x20018a98
  401cb4:	00400ed5 	.word	0x00400ed5
  401cb8:	20018950 	.word	0x20018950
  401cbc:	00400e95 	.word	0x00400e95
  401cc0:	00401995 	.word	0x00401995
  401cc4:	00401109 	.word	0x00401109

00401cc8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401cc8:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  401cca:	4b2d      	ldr	r3, [pc, #180]	; (401d80 <vTaskSwitchContext+0xb8>)
  401ccc:	681b      	ldr	r3, [r3, #0]
  401cce:	b11b      	cbz	r3, 401cd8 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  401cd0:	2201      	movs	r2, #1
  401cd2:	4b2c      	ldr	r3, [pc, #176]	; (401d84 <vTaskSwitchContext+0xbc>)
  401cd4:	601a      	str	r2, [r3, #0]
  401cd6:	bd38      	pop	{r3, r4, r5, pc}
			unsigned long ulTempCounter;

				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
  401cd8:	4b2b      	ldr	r3, [pc, #172]	; (401d88 <vTaskSwitchContext+0xc0>)
  401cda:	4798      	blx	r3
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
  401cdc:	4a2b      	ldr	r2, [pc, #172]	; (401d8c <vTaskSwitchContext+0xc4>)
  401cde:	6814      	ldr	r4, [r2, #0]
  401ce0:	492b      	ldr	r1, [pc, #172]	; (401d90 <vTaskSwitchContext+0xc8>)
  401ce2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401ce4:	680d      	ldr	r5, [r1, #0]
  401ce6:	1b5b      	subs	r3, r3, r5
  401ce8:	4403      	add	r3, r0
  401cea:	64e3      	str	r3, [r4, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
  401cec:	6008      	str	r0, [r1, #0]
		}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
  401cee:	6811      	ldr	r1, [r2, #0]
  401cf0:	6813      	ldr	r3, [r2, #0]
  401cf2:	680a      	ldr	r2, [r1, #0]
  401cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401cf6:	429a      	cmp	r2, r3
  401cf8:	d805      	bhi.n	401d06 <vTaskSwitchContext+0x3e>
  401cfa:	4b24      	ldr	r3, [pc, #144]	; (401d8c <vTaskSwitchContext+0xc4>)
  401cfc:	6818      	ldr	r0, [r3, #0]
  401cfe:	6819      	ldr	r1, [r3, #0]
  401d00:	3134      	adds	r1, #52	; 0x34
  401d02:	4b24      	ldr	r3, [pc, #144]	; (401d94 <vTaskSwitchContext+0xcc>)
  401d04:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
  401d06:	4b21      	ldr	r3, [pc, #132]	; (401d8c <vTaskSwitchContext+0xc4>)
  401d08:	681b      	ldr	r3, [r3, #0]
  401d0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401d0c:	4922      	ldr	r1, [pc, #136]	; (401d98 <vTaskSwitchContext+0xd0>)
  401d0e:	2214      	movs	r2, #20
  401d10:	4b22      	ldr	r3, [pc, #136]	; (401d9c <vTaskSwitchContext+0xd4>)
  401d12:	4798      	blx	r3
  401d14:	b128      	cbz	r0, 401d22 <vTaskSwitchContext+0x5a>
  401d16:	4b1d      	ldr	r3, [pc, #116]	; (401d8c <vTaskSwitchContext+0xc4>)
  401d18:	6818      	ldr	r0, [r3, #0]
  401d1a:	6819      	ldr	r1, [r3, #0]
  401d1c:	3134      	adds	r1, #52	; 0x34
  401d1e:	4b1d      	ldr	r3, [pc, #116]	; (401d94 <vTaskSwitchContext+0xcc>)
  401d20:	4798      	blx	r3

		taskSELECT_HIGHEST_PRIORITY_TASK();
  401d22:	4b1f      	ldr	r3, [pc, #124]	; (401da0 <vTaskSwitchContext+0xd8>)
  401d24:	681c      	ldr	r4, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline unsigned char ucPortCountLeadingZeros( unsigned long ulBitmap )
	{
	unsigned char ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401d26:	fab4 f484 	clz	r4, r4
  401d2a:	b2e4      	uxtb	r4, r4
  401d2c:	f1c4 041f 	rsb	r4, r4, #31
  401d30:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401d34:	009b      	lsls	r3, r3, #2
  401d36:	4a1b      	ldr	r2, [pc, #108]	; (401da4 <vTaskSwitchContext+0xdc>)
  401d38:	58d3      	ldr	r3, [r2, r3]
  401d3a:	b923      	cbnz	r3, 401d46 <vTaskSwitchContext+0x7e>
  401d3c:	481a      	ldr	r0, [pc, #104]	; (401da8 <vTaskSwitchContext+0xe0>)
  401d3e:	f240 7141 	movw	r1, #1857	; 0x741
  401d42:	4b1a      	ldr	r3, [pc, #104]	; (401dac <vTaskSwitchContext+0xe4>)
  401d44:	4798      	blx	r3
  401d46:	4b17      	ldr	r3, [pc, #92]	; (401da4 <vTaskSwitchContext+0xdc>)
  401d48:	00a2      	lsls	r2, r4, #2
  401d4a:	1911      	adds	r1, r2, r4
  401d4c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401d50:	6848      	ldr	r0, [r1, #4]
  401d52:	6840      	ldr	r0, [r0, #4]
  401d54:	6048      	str	r0, [r1, #4]
  401d56:	460b      	mov	r3, r1
  401d58:	3308      	adds	r3, #8
  401d5a:	4298      	cmp	r0, r3
  401d5c:	d106      	bne.n	401d6c <vTaskSwitchContext+0xa4>
  401d5e:	6841      	ldr	r1, [r0, #4]
  401d60:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401d64:	4a0f      	ldr	r2, [pc, #60]	; (401da4 <vTaskSwitchContext+0xdc>)
  401d66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401d6a:	6059      	str	r1, [r3, #4]
  401d6c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401d70:	4b0c      	ldr	r3, [pc, #48]	; (401da4 <vTaskSwitchContext+0xdc>)
  401d72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  401d76:	6863      	ldr	r3, [r4, #4]
  401d78:	68da      	ldr	r2, [r3, #12]
  401d7a:	4b04      	ldr	r3, [pc, #16]	; (401d8c <vTaskSwitchContext+0xc4>)
  401d7c:	601a      	str	r2, [r3, #0]
  401d7e:	bd38      	pop	{r3, r4, r5, pc}
  401d80:	20018b00 	.word	0x20018b00
  401d84:	20018ab8 	.word	0x20018ab8
  401d88:	00404545 	.word	0x00404545
  401d8c:	20018ac0 	.word	0x20018ac0
  401d90:	20018ab4 	.word	0x20018ab4
  401d94:	004044d5 	.word	0x004044d5
  401d98:	004076cc 	.word	0x004076cc
  401d9c:	00404611 	.word	0x00404611
  401da0:	20018944 	.word	0x20018944
  401da4:	20018950 	.word	0x20018950
  401da8:	00407724 	.word	0x00407724
  401dac:	004044e1 	.word	0x004044e1

00401db0 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  401db0:	b570      	push	{r4, r5, r6, lr}
  401db2:	460d      	mov	r5, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
  401db4:	4606      	mov	r6, r0
  401db6:	b920      	cbnz	r0, 401dc2 <vTaskPlaceOnEventList+0x12>
  401db8:	4814      	ldr	r0, [pc, #80]	; (401e0c <vTaskPlaceOnEventList+0x5c>)
  401dba:	f240 714c 	movw	r1, #1868	; 0x74c
  401dbe:	4b14      	ldr	r3, [pc, #80]	; (401e10 <vTaskPlaceOnEventList+0x60>)
  401dc0:	4798      	blx	r3
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401dc2:	4c14      	ldr	r4, [pc, #80]	; (401e14 <vTaskPlaceOnEventList+0x64>)
  401dc4:	6821      	ldr	r1, [r4, #0]
  401dc6:	4630      	mov	r0, r6
  401dc8:	3118      	adds	r1, #24
  401dca:	4b13      	ldr	r3, [pc, #76]	; (401e18 <vTaskPlaceOnEventList+0x68>)
  401dcc:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401dce:	6820      	ldr	r0, [r4, #0]
  401dd0:	3004      	adds	r0, #4
  401dd2:	4b12      	ldr	r3, [pc, #72]	; (401e1c <vTaskPlaceOnEventList+0x6c>)
  401dd4:	4798      	blx	r3
  401dd6:	b940      	cbnz	r0, 401dea <vTaskPlaceOnEventList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401dd8:	6823      	ldr	r3, [r4, #0]
  401dda:	4911      	ldr	r1, [pc, #68]	; (401e20 <vTaskPlaceOnEventList+0x70>)
  401ddc:	680a      	ldr	r2, [r1, #0]
  401dde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401de0:	2301      	movs	r3, #1
  401de2:	4083      	lsls	r3, r0
  401de4:	ea22 0303 	bic.w	r3, r2, r3
  401de8:	600b      	str	r3, [r1, #0]
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401dea:	f1b5 3fff 	cmp.w	r5, #4294967295
  401dee:	d106      	bne.n	401dfe <vTaskPlaceOnEventList+0x4e>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401df0:	4b08      	ldr	r3, [pc, #32]	; (401e14 <vTaskPlaceOnEventList+0x64>)
  401df2:	6819      	ldr	r1, [r3, #0]
  401df4:	480b      	ldr	r0, [pc, #44]	; (401e24 <vTaskPlaceOnEventList+0x74>)
  401df6:	3104      	adds	r1, #4
  401df8:	4b0b      	ldr	r3, [pc, #44]	; (401e28 <vTaskPlaceOnEventList+0x78>)
  401dfa:	4798      	blx	r3
  401dfc:	bd70      	pop	{r4, r5, r6, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  401dfe:	4b0b      	ldr	r3, [pc, #44]	; (401e2c <vTaskPlaceOnEventList+0x7c>)
  401e00:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401e02:	4428      	add	r0, r5
  401e04:	4b0a      	ldr	r3, [pc, #40]	; (401e30 <vTaskPlaceOnEventList+0x80>)
  401e06:	4798      	blx	r3
  401e08:	bd70      	pop	{r4, r5, r6, pc}
  401e0a:	bf00      	nop
  401e0c:	00407724 	.word	0x00407724
  401e10:	004044e1 	.word	0x004044e1
  401e14:	20018ac0 	.word	0x20018ac0
  401e18:	00400dc9 	.word	0x00400dc9
  401e1c:	00400e05 	.word	0x00400e05
  401e20:	20018944 	.word	0x20018944
  401e24:	20018ac4 	.word	0x20018ac4
  401e28:	00400dad 	.word	0x00400dad
  401e2c:	2001894c 	.word	0x2001894c
  401e30:	004016bd 	.word	0x004016bd

00401e34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  401e34:	b570      	push	{r4, r5, r6, lr}
  401e36:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  401e38:	4606      	mov	r6, r0
  401e3a:	b920      	cbnz	r0, 401e46 <vTaskPlaceOnEventListRestricted+0x12>
  401e3c:	480f      	ldr	r0, [pc, #60]	; (401e7c <vTaskPlaceOnEventListRestricted+0x48>)
  401e3e:	f240 7182 	movw	r1, #1922	; 0x782
  401e42:	4b0f      	ldr	r3, [pc, #60]	; (401e80 <vTaskPlaceOnEventListRestricted+0x4c>)
  401e44:	4798      	blx	r3

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401e46:	4c0f      	ldr	r4, [pc, #60]	; (401e84 <vTaskPlaceOnEventListRestricted+0x50>)
  401e48:	6821      	ldr	r1, [r4, #0]
  401e4a:	4630      	mov	r0, r6
  401e4c:	3118      	adds	r1, #24
  401e4e:	4b0e      	ldr	r3, [pc, #56]	; (401e88 <vTaskPlaceOnEventListRestricted+0x54>)
  401e50:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401e52:	6820      	ldr	r0, [r4, #0]
  401e54:	3004      	adds	r0, #4
  401e56:	4b0d      	ldr	r3, [pc, #52]	; (401e8c <vTaskPlaceOnEventListRestricted+0x58>)
  401e58:	4798      	blx	r3
  401e5a:	b940      	cbnz	r0, 401e6e <vTaskPlaceOnEventListRestricted+0x3a>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401e5c:	6823      	ldr	r3, [r4, #0]
  401e5e:	490c      	ldr	r1, [pc, #48]	; (401e90 <vTaskPlaceOnEventListRestricted+0x5c>)
  401e60:	680a      	ldr	r2, [r1, #0]
  401e62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401e64:	2301      	movs	r3, #1
  401e66:	4083      	lsls	r3, r0
  401e68:	ea22 0303 	bic.w	r3, r2, r3
  401e6c:	600b      	str	r3, [r1, #0]
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  401e6e:	4b09      	ldr	r3, [pc, #36]	; (401e94 <vTaskPlaceOnEventListRestricted+0x60>)
  401e70:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  401e72:	4428      	add	r0, r5
  401e74:	4b08      	ldr	r3, [pc, #32]	; (401e98 <vTaskPlaceOnEventListRestricted+0x64>)
  401e76:	4798      	blx	r3
  401e78:	bd70      	pop	{r4, r5, r6, pc}
  401e7a:	bf00      	nop
  401e7c:	00407724 	.word	0x00407724
  401e80:	004044e1 	.word	0x004044e1
  401e84:	20018ac0 	.word	0x20018ac0
  401e88:	00400dad 	.word	0x00400dad
  401e8c:	00400e05 	.word	0x00400e05
  401e90:	20018944 	.word	0x20018944
  401e94:	2001894c 	.word	0x2001894c
  401e98:	004016bd 	.word	0x004016bd

00401e9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  401e9c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401e9e:	68c3      	ldr	r3, [r0, #12]
  401ea0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401ea2:	b924      	cbnz	r4, 401eae <xTaskRemoveFromEventList+0x12>
  401ea4:	4816      	ldr	r0, [pc, #88]	; (401f00 <xTaskRemoveFromEventList+0x64>)
  401ea6:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
  401eaa:	4b16      	ldr	r3, [pc, #88]	; (401f04 <xTaskRemoveFromEventList+0x68>)
  401eac:	4798      	blx	r3
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401eae:	f104 0518 	add.w	r5, r4, #24
  401eb2:	4628      	mov	r0, r5
  401eb4:	4b14      	ldr	r3, [pc, #80]	; (401f08 <xTaskRemoveFromEventList+0x6c>)
  401eb6:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401eb8:	4b14      	ldr	r3, [pc, #80]	; (401f0c <xTaskRemoveFromEventList+0x70>)
  401eba:	681b      	ldr	r3, [r3, #0]
  401ebc:	b99b      	cbnz	r3, 401ee6 <xTaskRemoveFromEventList+0x4a>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401ebe:	1d25      	adds	r5, r4, #4
  401ec0:	4628      	mov	r0, r5
  401ec2:	4b11      	ldr	r3, [pc, #68]	; (401f08 <xTaskRemoveFromEventList+0x6c>)
  401ec4:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  401ec6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ec8:	4911      	ldr	r1, [pc, #68]	; (401f10 <xTaskRemoveFromEventList+0x74>)
  401eca:	680a      	ldr	r2, [r1, #0]
  401ecc:	2301      	movs	r3, #1
  401ece:	4083      	lsls	r3, r0
  401ed0:	4313      	orrs	r3, r2
  401ed2:	600b      	str	r3, [r1, #0]
  401ed4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ed8:	4b0e      	ldr	r3, [pc, #56]	; (401f14 <xTaskRemoveFromEventList+0x78>)
  401eda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ede:	4629      	mov	r1, r5
  401ee0:	4b0d      	ldr	r3, [pc, #52]	; (401f18 <xTaskRemoveFromEventList+0x7c>)
  401ee2:	4798      	blx	r3
  401ee4:	e003      	b.n	401eee <xTaskRemoveFromEventList+0x52>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401ee6:	480d      	ldr	r0, [pc, #52]	; (401f1c <xTaskRemoveFromEventList+0x80>)
  401ee8:	4629      	mov	r1, r5
  401eea:	4b0b      	ldr	r3, [pc, #44]	; (401f18 <xTaskRemoveFromEventList+0x7c>)
  401eec:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401eee:	4b0c      	ldr	r3, [pc, #48]	; (401f20 <xTaskRemoveFromEventList+0x84>)
  401ef0:	681b      	ldr	r3, [r3, #0]
  401ef2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
  401ef6:	4298      	cmp	r0, r3
  401ef8:	bf34      	ite	cc
  401efa:	2000      	movcc	r0, #0
  401efc:	2001      	movcs	r0, #1
  401efe:	bd38      	pop	{r3, r4, r5, pc}
  401f00:	00407724 	.word	0x00407724
  401f04:	004044e1 	.word	0x004044e1
  401f08:	00400e05 	.word	0x00400e05
  401f0c:	20018b00 	.word	0x20018b00
  401f10:	20018944 	.word	0x20018944
  401f14:	20018950 	.word	0x20018950
  401f18:	00400dad 	.word	0x00400dad
  401f1c:	20018a9c 	.word	0x20018a9c
  401f20:	20018ac0 	.word	0x20018ac0

00401f24 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  401f24:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
  401f26:	4604      	mov	r4, r0
  401f28:	b920      	cbnz	r0, 401f34 <vTaskSetTimeOutState+0x10>
  401f2a:	4806      	ldr	r0, [pc, #24]	; (401f44 <vTaskSetTimeOutState+0x20>)
  401f2c:	f240 71da 	movw	r1, #2010	; 0x7da
  401f30:	4b05      	ldr	r3, [pc, #20]	; (401f48 <vTaskSetTimeOutState+0x24>)
  401f32:	4798      	blx	r3
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401f34:	4b05      	ldr	r3, [pc, #20]	; (401f4c <vTaskSetTimeOutState+0x28>)
  401f36:	681b      	ldr	r3, [r3, #0]
  401f38:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401f3a:	4b05      	ldr	r3, [pc, #20]	; (401f50 <vTaskSetTimeOutState+0x2c>)
  401f3c:	681b      	ldr	r3, [r3, #0]
  401f3e:	6063      	str	r3, [r4, #4]
  401f40:	bd10      	pop	{r4, pc}
  401f42:	bf00      	nop
  401f44:	00407724 	.word	0x00407724
  401f48:	004044e1 	.word	0x004044e1
  401f4c:	20018b08 	.word	0x20018b08
  401f50:	2001894c 	.word	0x2001894c

00401f54 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  401f54:	b538      	push	{r3, r4, r5, lr}
  401f56:	460c      	mov	r4, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  401f58:	4605      	mov	r5, r0
  401f5a:	b920      	cbnz	r0, 401f66 <xTaskCheckForTimeOut+0x12>
  401f5c:	4819      	ldr	r0, [pc, #100]	; (401fc4 <xTaskCheckForTimeOut+0x70>)
  401f5e:	f240 71e4 	movw	r1, #2020	; 0x7e4
  401f62:	4b19      	ldr	r3, [pc, #100]	; (401fc8 <xTaskCheckForTimeOut+0x74>)
  401f64:	4798      	blx	r3
	configASSERT( pxTicksToWait );
  401f66:	b924      	cbnz	r4, 401f72 <xTaskCheckForTimeOut+0x1e>
  401f68:	4816      	ldr	r0, [pc, #88]	; (401fc4 <xTaskCheckForTimeOut+0x70>)
  401f6a:	f240 71e5 	movw	r1, #2021	; 0x7e5
  401f6e:	4b16      	ldr	r3, [pc, #88]	; (401fc8 <xTaskCheckForTimeOut+0x74>)
  401f70:	4798      	blx	r3

	taskENTER_CRITICAL();
  401f72:	4b16      	ldr	r3, [pc, #88]	; (401fcc <xTaskCheckForTimeOut+0x78>)
  401f74:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401f76:	6823      	ldr	r3, [r4, #0]
  401f78:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f7c:	d019      	beq.n	401fb2 <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  401f7e:	4a14      	ldr	r2, [pc, #80]	; (401fd0 <xTaskCheckForTimeOut+0x7c>)
  401f80:	6812      	ldr	r2, [r2, #0]
  401f82:	6829      	ldr	r1, [r5, #0]
  401f84:	4291      	cmp	r1, r2
  401f86:	d004      	beq.n	401f92 <xTaskCheckForTimeOut+0x3e>
  401f88:	4a12      	ldr	r2, [pc, #72]	; (401fd4 <xTaskCheckForTimeOut+0x80>)
  401f8a:	6812      	ldr	r2, [r2, #0]
  401f8c:	6869      	ldr	r1, [r5, #4]
  401f8e:	4291      	cmp	r1, r2
  401f90:	d911      	bls.n	401fb6 <xTaskCheckForTimeOut+0x62>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  401f92:	4a10      	ldr	r2, [pc, #64]	; (401fd4 <xTaskCheckForTimeOut+0x80>)
  401f94:	6812      	ldr	r2, [r2, #0]
  401f96:	6869      	ldr	r1, [r5, #4]
  401f98:	1a52      	subs	r2, r2, r1
  401f9a:	4293      	cmp	r3, r2
  401f9c:	d90d      	bls.n	401fba <xTaskCheckForTimeOut+0x66>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  401f9e:	4a0d      	ldr	r2, [pc, #52]	; (401fd4 <xTaskCheckForTimeOut+0x80>)
  401fa0:	6812      	ldr	r2, [r2, #0]
  401fa2:	1a51      	subs	r1, r2, r1
  401fa4:	1a5b      	subs	r3, r3, r1
  401fa6:	6023      	str	r3, [r4, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401fa8:	4628      	mov	r0, r5
  401faa:	4b0b      	ldr	r3, [pc, #44]	; (401fd8 <xTaskCheckForTimeOut+0x84>)
  401fac:	4798      	blx	r3
			xReturn = pdFALSE;
  401fae:	2400      	movs	r4, #0
  401fb0:	e004      	b.n	401fbc <xTaskCheckForTimeOut+0x68>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  401fb2:	2400      	movs	r4, #0
  401fb4:	e002      	b.n	401fbc <xTaskCheckForTimeOut+0x68>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401fb6:	2401      	movs	r4, #1
  401fb8:	e000      	b.n	401fbc <xTaskCheckForTimeOut+0x68>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  401fba:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  401fbc:	4b07      	ldr	r3, [pc, #28]	; (401fdc <xTaskCheckForTimeOut+0x88>)
  401fbe:	4798      	blx	r3

	return xReturn;
}
  401fc0:	4620      	mov	r0, r4
  401fc2:	bd38      	pop	{r3, r4, r5, pc}
  401fc4:	00407724 	.word	0x00407724
  401fc8:	004044e1 	.word	0x004044e1
  401fcc:	00400eb5 	.word	0x00400eb5
  401fd0:	20018b08 	.word	0x20018b08
  401fd4:	2001894c 	.word	0x2001894c
  401fd8:	00401f25 	.word	0x00401f25
  401fdc:	00400ed5 	.word	0x00400ed5

00401fe0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
  401fe0:	2201      	movs	r2, #1
  401fe2:	4b01      	ldr	r3, [pc, #4]	; (401fe8 <vTaskMissedYield+0x8>)
  401fe4:	601a      	str	r2, [r3, #0]
  401fe6:	4770      	bx	lr
  401fe8:	20018ab8 	.word	0x20018ab8

00401fec <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401fec:	4b01      	ldr	r3, [pc, #4]	; (401ff4 <xTaskGetCurrentTaskHandle+0x8>)
  401fee:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
  401ff0:	4770      	bx	lr
  401ff2:	bf00      	nop
  401ff4:	20018ac0 	.word	0x20018ac0

00401ff8 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  401ff8:	4b05      	ldr	r3, [pc, #20]	; (402010 <xTaskGetSchedulerState+0x18>)
  401ffa:	681b      	ldr	r3, [r3, #0]
  401ffc:	b133      	cbz	r3, 40200c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401ffe:	4b05      	ldr	r3, [pc, #20]	; (402014 <xTaskGetSchedulerState+0x1c>)
  402000:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402002:	2b00      	cmp	r3, #0
  402004:	bf0c      	ite	eq
  402006:	2001      	moveq	r0, #1
  402008:	2002      	movne	r0, #2
  40200a:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  40200c:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  40200e:	4770      	bx	lr
  402010:	20018ab0 	.word	0x20018ab0
  402014:	20018b00 	.word	0x20018b00

00402018 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402018:	2800      	cmp	r0, #0
  40201a:	d040      	beq.n	40209e <vTaskPriorityInherit+0x86>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  40201c:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40201e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402020:	491f      	ldr	r1, [pc, #124]	; (4020a0 <vTaskPriorityInherit+0x88>)
  402022:	6809      	ldr	r1, [r1, #0]
  402024:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402026:	428b      	cmp	r3, r1
  402028:	d238      	bcs.n	40209c <vTaskPriorityInherit+0x84>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  40202a:	491d      	ldr	r1, [pc, #116]	; (4020a0 <vTaskPriorityInherit+0x88>)
  40202c:	6809      	ldr	r1, [r1, #0]
  40202e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402030:	f1c1 010f 	rsb	r1, r1, #15
  402034:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402036:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40203a:	491a      	ldr	r1, [pc, #104]	; (4020a4 <vTaskPriorityInherit+0x8c>)
  40203c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  402040:	6941      	ldr	r1, [r0, #20]
  402042:	4299      	cmp	r1, r3
  402044:	d126      	bne.n	402094 <vTaskPriorityInherit+0x7c>
  402046:	4604      	mov	r4, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  402048:	1d05      	adds	r5, r0, #4
  40204a:	4628      	mov	r0, r5
  40204c:	4b16      	ldr	r3, [pc, #88]	; (4020a8 <vTaskPriorityInherit+0x90>)
  40204e:	4798      	blx	r3
  402050:	b968      	cbnz	r0, 40206e <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402052:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402054:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  402058:	009b      	lsls	r3, r3, #2
  40205a:	4912      	ldr	r1, [pc, #72]	; (4020a4 <vTaskPriorityInherit+0x8c>)
  40205c:	58cb      	ldr	r3, [r1, r3]
  40205e:	b933      	cbnz	r3, 40206e <vTaskPriorityInherit+0x56>
  402060:	4812      	ldr	r0, [pc, #72]	; (4020ac <vTaskPriorityInherit+0x94>)
  402062:	6801      	ldr	r1, [r0, #0]
  402064:	2301      	movs	r3, #1
  402066:	4093      	lsls	r3, r2
  402068:	ea21 0303 	bic.w	r3, r1, r3
  40206c:	6003      	str	r3, [r0, #0]
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40206e:	4b0c      	ldr	r3, [pc, #48]	; (4020a0 <vTaskPriorityInherit+0x88>)
  402070:	681b      	ldr	r3, [r3, #0]
  402072:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402074:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  402076:	490d      	ldr	r1, [pc, #52]	; (4020ac <vTaskPriorityInherit+0x94>)
  402078:	680a      	ldr	r2, [r1, #0]
  40207a:	2301      	movs	r3, #1
  40207c:	4083      	lsls	r3, r0
  40207e:	4313      	orrs	r3, r2
  402080:	600b      	str	r3, [r1, #0]
  402082:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402086:	4b07      	ldr	r3, [pc, #28]	; (4020a4 <vTaskPriorityInherit+0x8c>)
  402088:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40208c:	4629      	mov	r1, r5
  40208e:	4b08      	ldr	r3, [pc, #32]	; (4020b0 <vTaskPriorityInherit+0x98>)
  402090:	4798      	blx	r3
  402092:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402094:	4b02      	ldr	r3, [pc, #8]	; (4020a0 <vTaskPriorityInherit+0x88>)
  402096:	681b      	ldr	r3, [r3, #0]
  402098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40209a:	62c3      	str	r3, [r0, #44]	; 0x2c
  40209c:	bd38      	pop	{r3, r4, r5, pc}
  40209e:	4770      	bx	lr
  4020a0:	20018ac0 	.word	0x20018ac0
  4020a4:	20018950 	.word	0x20018950
  4020a8:	00400e05 	.word	0x00400e05
  4020ac:	20018944 	.word	0x20018944
  4020b0:	00400dad 	.word	0x00400dad

004020b4 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
  4020b4:	2800      	cmp	r0, #0
  4020b6:	d02c      	beq.n	402112 <vTaskPriorityDisinherit+0x5e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  4020b8:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4020ba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  4020bc:	6c82      	ldr	r2, [r0, #72]	; 0x48
  4020be:	4291      	cmp	r1, r2
  4020c0:	d026      	beq.n	402110 <vTaskPriorityDisinherit+0x5c>
  4020c2:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4020c4:	1d05      	adds	r5, r0, #4
  4020c6:	4628      	mov	r0, r5
  4020c8:	4b12      	ldr	r3, [pc, #72]	; (402114 <vTaskPriorityDisinherit+0x60>)
  4020ca:	4798      	blx	r3
  4020cc:	b968      	cbnz	r0, 4020ea <vTaskPriorityDisinherit+0x36>
				{
					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4020ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4020d0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  4020d4:	009b      	lsls	r3, r3, #2
  4020d6:	4910      	ldr	r1, [pc, #64]	; (402118 <vTaskPriorityDisinherit+0x64>)
  4020d8:	58cb      	ldr	r3, [r1, r3]
  4020da:	b933      	cbnz	r3, 4020ea <vTaskPriorityDisinherit+0x36>
  4020dc:	480f      	ldr	r0, [pc, #60]	; (40211c <vTaskPriorityDisinherit+0x68>)
  4020de:	6801      	ldr	r1, [r0, #0]
  4020e0:	2301      	movs	r3, #1
  4020e2:	4093      	lsls	r3, r2
  4020e4:	ea21 0303 	bic.w	r3, r1, r3
  4020e8:	6003      	str	r3, [r0, #0]
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  4020ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4020ec:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  4020ee:	f1c3 020f 	rsb	r2, r3, #15
  4020f2:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
  4020f4:	4809      	ldr	r0, [pc, #36]	; (40211c <vTaskPriorityDisinherit+0x68>)
  4020f6:	6801      	ldr	r1, [r0, #0]
  4020f8:	2201      	movs	r2, #1
  4020fa:	409a      	lsls	r2, r3
  4020fc:	430a      	orrs	r2, r1
  4020fe:	6002      	str	r2, [r0, #0]
  402100:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402104:	4804      	ldr	r0, [pc, #16]	; (402118 <vTaskPriorityDisinherit+0x64>)
  402106:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  40210a:	4629      	mov	r1, r5
  40210c:	4b04      	ldr	r3, [pc, #16]	; (402120 <vTaskPriorityDisinherit+0x6c>)
  40210e:	4798      	blx	r3
  402110:	bd38      	pop	{r3, r4, r5, pc}
  402112:	4770      	bx	lr
  402114:	00400e05 	.word	0x00400e05
  402118:	20018950 	.word	0x20018950
  40211c:	20018944 	.word	0x20018944
  402120:	00400dad 	.word	0x00400dad

00402124 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  402124:	b510      	push	{r4, lr}
  402126:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402128:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40212a:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  40212c:	4291      	cmp	r1, r2
  40212e:	d80a      	bhi.n	402146 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  402130:	1ad2      	subs	r2, r2, r3
  402132:	6983      	ldr	r3, [r0, #24]
  402134:	429a      	cmp	r2, r3
  402136:	d211      	bcs.n	40215c <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402138:	4b0a      	ldr	r3, [pc, #40]	; (402164 <prvInsertTimerInActiveList+0x40>)
  40213a:	6818      	ldr	r0, [r3, #0]
  40213c:	1d21      	adds	r1, r4, #4
  40213e:	4b0a      	ldr	r3, [pc, #40]	; (402168 <prvInsertTimerInActiveList+0x44>)
  402140:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  402142:	2000      	movs	r0, #0
  402144:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402146:	429a      	cmp	r2, r3
  402148:	d201      	bcs.n	40214e <prvInsertTimerInActiveList+0x2a>
  40214a:	4299      	cmp	r1, r3
  40214c:	d208      	bcs.n	402160 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40214e:	4b07      	ldr	r3, [pc, #28]	; (40216c <prvInsertTimerInActiveList+0x48>)
  402150:	6818      	ldr	r0, [r3, #0]
  402152:	1d21      	adds	r1, r4, #4
  402154:	4b04      	ldr	r3, [pc, #16]	; (402168 <prvInsertTimerInActiveList+0x44>)
  402156:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  402158:	2000      	movs	r0, #0
  40215a:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40215c:	2001      	movs	r0, #1
  40215e:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402160:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402162:	bd10      	pop	{r4, pc}
  402164:	20018b44 	.word	0x20018b44
  402168:	00400dc9 	.word	0x00400dc9
  40216c:	20018b10 	.word	0x20018b10

00402170 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402170:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402172:	4b0d      	ldr	r3, [pc, #52]	; (4021a8 <prvCheckForValidListAndQueue+0x38>)
  402174:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402176:	4b0d      	ldr	r3, [pc, #52]	; (4021ac <prvCheckForValidListAndQueue+0x3c>)
  402178:	681b      	ldr	r3, [r3, #0]
  40217a:	b98b      	cbnz	r3, 4021a0 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
  40217c:	4d0c      	ldr	r5, [pc, #48]	; (4021b0 <prvCheckForValidListAndQueue+0x40>)
  40217e:	4628      	mov	r0, r5
  402180:	4e0c      	ldr	r6, [pc, #48]	; (4021b4 <prvCheckForValidListAndQueue+0x44>)
  402182:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402184:	4c0c      	ldr	r4, [pc, #48]	; (4021b8 <prvCheckForValidListAndQueue+0x48>)
  402186:	4620      	mov	r0, r4
  402188:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  40218a:	4b0c      	ldr	r3, [pc, #48]	; (4021bc <prvCheckForValidListAndQueue+0x4c>)
  40218c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40218e:	4b0c      	ldr	r3, [pc, #48]	; (4021c0 <prvCheckForValidListAndQueue+0x50>)
  402190:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  402192:	2005      	movs	r0, #5
  402194:	210c      	movs	r1, #12
  402196:	2200      	movs	r2, #0
  402198:	4b0a      	ldr	r3, [pc, #40]	; (4021c4 <prvCheckForValidListAndQueue+0x54>)
  40219a:	4798      	blx	r3
  40219c:	4b03      	ldr	r3, [pc, #12]	; (4021ac <prvCheckForValidListAndQueue+0x3c>)
  40219e:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  4021a0:	4b09      	ldr	r3, [pc, #36]	; (4021c8 <prvCheckForValidListAndQueue+0x58>)
  4021a2:	4798      	blx	r3
  4021a4:	bd70      	pop	{r4, r5, r6, pc}
  4021a6:	bf00      	nop
  4021a8:	00400eb5 	.word	0x00400eb5
  4021ac:	20018b40 	.word	0x20018b40
  4021b0:	20018b14 	.word	0x20018b14
  4021b4:	00400d8d 	.word	0x00400d8d
  4021b8:	20018b28 	.word	0x20018b28
  4021bc:	20018b10 	.word	0x20018b10
  4021c0:	20018b44 	.word	0x20018b44
  4021c4:	004012e1 	.word	0x004012e1
  4021c8:	00400ed5 	.word	0x00400ed5

004021cc <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  4021cc:	b510      	push	{r4, lr}
  4021ce:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4021d0:	4b0d      	ldr	r3, [pc, #52]	; (402208 <xTimerCreateTimerTask+0x3c>)
  4021d2:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4021d4:	4b0d      	ldr	r3, [pc, #52]	; (40220c <xTimerCreateTimerTask+0x40>)
  4021d6:	681b      	ldr	r3, [r3, #0]
  4021d8:	b16b      	cbz	r3, 4021f6 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4021da:	230e      	movs	r3, #14
  4021dc:	9300      	str	r3, [sp, #0]
  4021de:	2300      	movs	r3, #0
  4021e0:	9301      	str	r3, [sp, #4]
  4021e2:	9302      	str	r3, [sp, #8]
  4021e4:	9303      	str	r3, [sp, #12]
  4021e6:	480a      	ldr	r0, [pc, #40]	; (402210 <xTimerCreateTimerTask+0x44>)
  4021e8:	490a      	ldr	r1, [pc, #40]	; (402214 <xTimerCreateTimerTask+0x48>)
  4021ea:	f44f 7243 	mov.w	r2, #780	; 0x30c
  4021ee:	4c0a      	ldr	r4, [pc, #40]	; (402218 <xTimerCreateTimerTask+0x4c>)
  4021f0:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
  4021f2:	4603      	mov	r3, r0
  4021f4:	b920      	cbnz	r0, 402200 <xTimerCreateTimerTask+0x34>
  4021f6:	4809      	ldr	r0, [pc, #36]	; (40221c <xTimerCreateTimerTask+0x50>)
  4021f8:	21da      	movs	r1, #218	; 0xda
  4021fa:	4b09      	ldr	r3, [pc, #36]	; (402220 <xTimerCreateTimerTask+0x54>)
  4021fc:	4798      	blx	r3
  4021fe:	2300      	movs	r3, #0
	return xReturn;
}
  402200:	4618      	mov	r0, r3
  402202:	b004      	add	sp, #16
  402204:	bd10      	pop	{r4, pc}
  402206:	bf00      	nop
  402208:	00402171 	.word	0x00402171
  40220c:	20018b40 	.word	0x20018b40
  402210:	0040238d 	.word	0x0040238d
  402214:	0040776c 	.word	0x0040776c
  402218:	00401715 	.word	0x00401715
  40221c:	00407774 	.word	0x00407774
  402220:	004044e1 	.word	0x004044e1

00402224 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
  402224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
  402228:	b929      	cbnz	r1, 402236 <xTimerCreate+0x12>
	{
		pxNewTimer = NULL;
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
  40222a:	480f      	ldr	r0, [pc, #60]	; (402268 <xTimerCreate+0x44>)
  40222c:	21e7      	movs	r1, #231	; 0xe7
  40222e:	4b0f      	ldr	r3, [pc, #60]	; (40226c <xTimerCreate+0x48>)
  402230:	4798      	blx	r3
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
	{
		pxNewTimer = NULL;
  402232:	2400      	movs	r4, #0
  402234:	e014      	b.n	402260 <xTimerCreate+0x3c>
  402236:	4680      	mov	r8, r0
  402238:	4616      	mov	r6, r2
  40223a:	461d      	mov	r5, r3
  40223c:	460f      	mov	r7, r1
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
  40223e:	2028      	movs	r0, #40	; 0x28
  402240:	4b0b      	ldr	r3, [pc, #44]	; (402270 <xTimerCreate+0x4c>)
  402242:	4798      	blx	r3
		if( pxNewTimer != NULL )
  402244:	4604      	mov	r4, r0
  402246:	b158      	cbz	r0, 402260 <xTimerCreate+0x3c>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  402248:	4b0a      	ldr	r3, [pc, #40]	; (402274 <xTimerCreate+0x50>)
  40224a:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  40224c:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  402250:	61a7      	str	r7, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  402252:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  402254:	6225      	str	r5, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  402256:	9b06      	ldr	r3, [sp, #24]
  402258:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  40225a:	1d20      	adds	r0, r4, #4
  40225c:	4b06      	ldr	r3, [pc, #24]	; (402278 <xTimerCreate+0x54>)
  40225e:	4798      	blx	r3
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
}
  402260:	4620      	mov	r0, r4
  402262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402266:	bf00      	nop
  402268:	00407774 	.word	0x00407774
  40226c:	004044e1 	.word	0x004044e1
  402270:	00401029 	.word	0x00401029
  402274:	00402171 	.word	0x00402171
  402278:	00400da5 	.word	0x00400da5

0040227c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  40227c:	b530      	push	{r4, r5, lr}
  40227e:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402280:	4c0f      	ldr	r4, [pc, #60]	; (4022c0 <xTimerGenericCommand+0x44>)
  402282:	6825      	ldr	r5, [r4, #0]
  402284:	b1c5      	cbz	r5, 4022b8 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402286:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
  402288:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  40228a:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
  40228c:	b96b      	cbnz	r3, 4022aa <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40228e:	4b0d      	ldr	r3, [pc, #52]	; (4022c4 <xTimerGenericCommand+0x48>)
  402290:	4798      	blx	r3
  402292:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  402294:	4b0a      	ldr	r3, [pc, #40]	; (4022c0 <xTimerGenericCommand+0x44>)
  402296:	6818      	ldr	r0, [r3, #0]
  402298:	a901      	add	r1, sp, #4
  40229a:	bf07      	ittee	eq
  40229c:	9a08      	ldreq	r2, [sp, #32]
  40229e:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4022a0:	2200      	movne	r2, #0
  4022a2:	4613      	movne	r3, r2
  4022a4:	4c08      	ldr	r4, [pc, #32]	; (4022c8 <xTimerGenericCommand+0x4c>)
  4022a6:	47a0      	blx	r4
  4022a8:	e007      	b.n	4022ba <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4022aa:	4628      	mov	r0, r5
  4022ac:	a901      	add	r1, sp, #4
  4022ae:	461a      	mov	r2, r3
  4022b0:	2300      	movs	r3, #0
  4022b2:	4c06      	ldr	r4, [pc, #24]	; (4022cc <xTimerGenericCommand+0x50>)
  4022b4:	47a0      	blx	r4
  4022b6:	e000      	b.n	4022ba <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
  4022b8:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
  4022ba:	b005      	add	sp, #20
  4022bc:	bd30      	pop	{r4, r5, pc}
  4022be:	bf00      	nop
  4022c0:	20018b40 	.word	0x20018b40
  4022c4:	00401ff9 	.word	0x00401ff9
  4022c8:	00401341 	.word	0x00401341
  4022cc:	00401471 	.word	0x00401471

004022d0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  4022d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4022d4:	b082      	sub	sp, #8
  4022d6:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  4022d8:	4b23      	ldr	r3, [pc, #140]	; (402368 <prvSampleTimeNow+0x98>)
  4022da:	4798      	blx	r3
  4022dc:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
  4022de:	4b23      	ldr	r3, [pc, #140]	; (40236c <prvSampleTimeNow+0x9c>)
  4022e0:	681b      	ldr	r3, [r3, #0]
  4022e2:	4298      	cmp	r0, r3
  4022e4:	d236      	bcs.n	402354 <prvSampleTimeNow+0x84>
  4022e6:	e026      	b.n	402336 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4022e8:	68da      	ldr	r2, [r3, #12]
  4022ea:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4022ee:	68db      	ldr	r3, [r3, #12]
  4022f0:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4022f2:	1d25      	adds	r5, r4, #4
  4022f4:	4628      	mov	r0, r5
  4022f6:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4022f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4022fa:	4620      	mov	r0, r4
  4022fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4022fe:	69e3      	ldr	r3, [r4, #28]
  402300:	2b01      	cmp	r3, #1
  402302:	d11a      	bne.n	40233a <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402304:	69a3      	ldr	r3, [r4, #24]
  402306:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402308:	4553      	cmp	r3, sl
  40230a:	d906      	bls.n	40231a <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40230c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40230e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402310:	6830      	ldr	r0, [r6, #0]
  402312:	4629      	mov	r1, r5
  402314:	4b16      	ldr	r3, [pc, #88]	; (402370 <prvSampleTimeNow+0xa0>)
  402316:	4798      	blx	r3
  402318:	e00f      	b.n	40233a <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  40231a:	2300      	movs	r3, #0
  40231c:	9300      	str	r3, [sp, #0]
  40231e:	4620      	mov	r0, r4
  402320:	4619      	mov	r1, r3
  402322:	4652      	mov	r2, sl
  402324:	4c13      	ldr	r4, [pc, #76]	; (402374 <prvSampleTimeNow+0xa4>)
  402326:	47a0      	blx	r4
				configASSERT( xResult );
  402328:	b938      	cbnz	r0, 40233a <prvSampleTimeNow+0x6a>
  40232a:	4813      	ldr	r0, [pc, #76]	; (402378 <prvSampleTimeNow+0xa8>)
  40232c:	f240 2175 	movw	r1, #629	; 0x275
  402330:	4b12      	ldr	r3, [pc, #72]	; (40237c <prvSampleTimeNow+0xac>)
  402332:	4798      	blx	r3
  402334:	e001      	b.n	40233a <prvSampleTimeNow+0x6a>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402336:	4e12      	ldr	r6, [pc, #72]	; (402380 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
  402338:	4f12      	ldr	r7, [pc, #72]	; (402384 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40233a:	6833      	ldr	r3, [r6, #0]
  40233c:	681a      	ldr	r2, [r3, #0]
  40233e:	2a00      	cmp	r2, #0
  402340:	d1d2      	bne.n	4022e8 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  402342:	4a11      	ldr	r2, [pc, #68]	; (402388 <prvSampleTimeNow+0xb8>)
  402344:	6810      	ldr	r0, [r2, #0]
  402346:	490e      	ldr	r1, [pc, #56]	; (402380 <prvSampleTimeNow+0xb0>)
  402348:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40234a:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
  40234c:	2301      	movs	r3, #1
  40234e:	f8c9 3000 	str.w	r3, [r9]
  402352:	e002      	b.n	40235a <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402354:	2300      	movs	r3, #0
  402356:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
  40235a:	4b04      	ldr	r3, [pc, #16]	; (40236c <prvSampleTimeNow+0x9c>)
  40235c:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
  402360:	4640      	mov	r0, r8
  402362:	b002      	add	sp, #8
  402364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402368:	004019a5 	.word	0x004019a5
  40236c:	20018b3c 	.word	0x20018b3c
  402370:	00400dc9 	.word	0x00400dc9
  402374:	0040227d 	.word	0x0040227d
  402378:	00407774 	.word	0x00407774
  40237c:	004044e1 	.word	0x004044e1
  402380:	20018b10 	.word	0x20018b10
  402384:	00400e05 	.word	0x00400e05
  402388:	20018b44 	.word	0x20018b44

0040238c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  40238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402390:	b087      	sub	sp, #28
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402392:	f8df a16c 	ldr.w	sl, [pc, #364]	; 402500 <prvTimerTask+0x174>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  402396:	f8df b16c 	ldr.w	fp, [pc, #364]	; 402504 <prvTimerTask+0x178>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  40239a:	4e4e      	ldr	r6, [pc, #312]	; (4024d4 <prvTimerTask+0x148>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
  40239c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 402508 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4023a0:	f8da 3000 	ldr.w	r3, [sl]
  4023a4:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4023a6:	2a00      	cmp	r2, #0
  4023a8:	f000 808b 	beq.w	4024c2 <prvTimerTask+0x136>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4023ac:	68db      	ldr	r3, [r3, #12]
  4023ae:	681d      	ldr	r5, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  4023b0:	47d8      	blx	fp
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4023b2:	a803      	add	r0, sp, #12
  4023b4:	4b48      	ldr	r3, [pc, #288]	; (4024d8 <prvTimerTask+0x14c>)
  4023b6:	4798      	blx	r3
  4023b8:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4023ba:	9b03      	ldr	r3, [sp, #12]
  4023bc:	2b00      	cmp	r3, #0
  4023be:	d131      	bne.n	402424 <prvTimerTask+0x98>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4023c0:	4285      	cmp	r5, r0
  4023c2:	d825      	bhi.n	402410 <prvTimerTask+0x84>
			{
				xTaskResumeAll();
  4023c4:	4b45      	ldr	r3, [pc, #276]	; (4024dc <prvTimerTask+0x150>)
  4023c6:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4023c8:	f8da 3000 	ldr.w	r3, [sl]
  4023cc:	68db      	ldr	r3, [r3, #12]
  4023ce:	68df      	ldr	r7, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  4023d0:	1d38      	adds	r0, r7, #4
  4023d2:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4023d4:	69fb      	ldr	r3, [r7, #28]
  4023d6:	2b01      	cmp	r3, #1
  4023d8:	d115      	bne.n	402406 <prvTimerTask+0x7a>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4023da:	69b9      	ldr	r1, [r7, #24]
  4023dc:	4638      	mov	r0, r7
  4023de:	4429      	add	r1, r5
  4023e0:	4622      	mov	r2, r4
  4023e2:	462b      	mov	r3, r5
  4023e4:	4c3e      	ldr	r4, [pc, #248]	; (4024e0 <prvTimerTask+0x154>)
  4023e6:	47a0      	blx	r4
  4023e8:	2801      	cmp	r0, #1
  4023ea:	d10c      	bne.n	402406 <prvTimerTask+0x7a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4023ec:	2300      	movs	r3, #0
  4023ee:	9300      	str	r3, [sp, #0]
  4023f0:	4638      	mov	r0, r7
  4023f2:	4619      	mov	r1, r3
  4023f4:	462a      	mov	r2, r5
  4023f6:	4c3b      	ldr	r4, [pc, #236]	; (4024e4 <prvTimerTask+0x158>)
  4023f8:	47a0      	blx	r4
			configASSERT( xResult );
  4023fa:	b920      	cbnz	r0, 402406 <prvTimerTask+0x7a>
  4023fc:	483a      	ldr	r0, [pc, #232]	; (4024e8 <prvTimerTask+0x15c>)
  4023fe:	f44f 71a9 	mov.w	r1, #338	; 0x152
  402402:	4b3a      	ldr	r3, [pc, #232]	; (4024ec <prvTimerTask+0x160>)
  402404:	4798      	blx	r3
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402408:	4638      	mov	r0, r7
  40240a:	4798      	blx	r3
  40240c:	e00c      	b.n	402428 <prvTimerTask+0x9c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  40240e:	2500      	movs	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  402410:	6830      	ldr	r0, [r6, #0]
  402412:	1b29      	subs	r1, r5, r4
  402414:	4b36      	ldr	r3, [pc, #216]	; (4024f0 <prvTimerTask+0x164>)
  402416:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  402418:	4b30      	ldr	r3, [pc, #192]	; (4024dc <prvTimerTask+0x150>)
  40241a:	4798      	blx	r3
  40241c:	b920      	cbnz	r0, 402428 <prvTimerTask+0x9c>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  40241e:	4b35      	ldr	r3, [pc, #212]	; (4024f4 <prvTimerTask+0x168>)
  402420:	4798      	blx	r3
  402422:	e001      	b.n	402428 <prvTimerTask+0x9c>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  402424:	4b2d      	ldr	r3, [pc, #180]	; (4024dc <prvTimerTask+0x150>)
  402426:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402428:	a802      	add	r0, sp, #8
  40242a:	4b2b      	ldr	r3, [pc, #172]	; (4024d8 <prvTimerTask+0x14c>)
  40242c:	4798      	blx	r3
  40242e:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  402430:	4d31      	ldr	r5, [pc, #196]	; (4024f8 <prvTimerTask+0x16c>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402432:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 4024e0 <prvTimerTask+0x154>
  402436:	e03c      	b.n	4024b2 <prvTimerTask+0x126>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
  402438:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  40243a:	b11c      	cbz	r4, 402444 <prvTimerTask+0xb8>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40243c:	6963      	ldr	r3, [r4, #20]
  40243e:	b10b      	cbz	r3, 402444 <prvTimerTask+0xb8>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  402440:	1d20      	adds	r0, r4, #4
  402442:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  402444:	9b03      	ldr	r3, [sp, #12]
  402446:	2b02      	cmp	r3, #2
  402448:	d021      	beq.n	40248e <prvTimerTask+0x102>
  40244a:	2b03      	cmp	r3, #3
  40244c:	d02e      	beq.n	4024ac <prvTimerTask+0x120>
  40244e:	2b00      	cmp	r3, #0
  402450:	d12f      	bne.n	4024b2 <prvTimerTask+0x126>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  402452:	9b04      	ldr	r3, [sp, #16]
  402454:	69a1      	ldr	r1, [r4, #24]
  402456:	4620      	mov	r0, r4
  402458:	4419      	add	r1, r3
  40245a:	463a      	mov	r2, r7
  40245c:	47c8      	blx	r9
  40245e:	2801      	cmp	r0, #1
  402460:	d127      	bne.n	4024b2 <prvTimerTask+0x126>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402462:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402464:	4620      	mov	r0, r4
  402466:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402468:	69e3      	ldr	r3, [r4, #28]
  40246a:	2b01      	cmp	r3, #1
  40246c:	d121      	bne.n	4024b2 <prvTimerTask+0x126>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40246e:	69a2      	ldr	r2, [r4, #24]
  402470:	2300      	movs	r3, #0
  402472:	9300      	str	r3, [sp, #0]
  402474:	4620      	mov	r0, r4
  402476:	4619      	mov	r1, r3
  402478:	9c04      	ldr	r4, [sp, #16]
  40247a:	4422      	add	r2, r4
  40247c:	4c19      	ldr	r4, [pc, #100]	; (4024e4 <prvTimerTask+0x158>)
  40247e:	47a0      	blx	r4
						configASSERT( xResult );
  402480:	b9b8      	cbnz	r0, 4024b2 <prvTimerTask+0x126>
  402482:	4819      	ldr	r0, [pc, #100]	; (4024e8 <prvTimerTask+0x15c>)
  402484:	f240 2129 	movw	r1, #553	; 0x229
  402488:	4b18      	ldr	r3, [pc, #96]	; (4024ec <prvTimerTask+0x160>)
  40248a:	4798      	blx	r3
  40248c:	e011      	b.n	4024b2 <prvTimerTask+0x126>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  40248e:	9b04      	ldr	r3, [sp, #16]
  402490:	61a3      	str	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402492:	b923      	cbnz	r3, 40249e <prvTimerTask+0x112>
  402494:	4814      	ldr	r0, [pc, #80]	; (4024e8 <prvTimerTask+0x15c>)
  402496:	f240 2136 	movw	r1, #566	; 0x236
  40249a:	4b14      	ldr	r3, [pc, #80]	; (4024ec <prvTimerTask+0x160>)
  40249c:	4798      	blx	r3
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40249e:	69a1      	ldr	r1, [r4, #24]
  4024a0:	4620      	mov	r0, r4
  4024a2:	4439      	add	r1, r7
  4024a4:	463a      	mov	r2, r7
  4024a6:	463b      	mov	r3, r7
  4024a8:	47c8      	blx	r9
  4024aa:	e002      	b.n	4024b2 <prvTimerTask+0x126>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  4024ac:	4620      	mov	r0, r4
  4024ae:	4b13      	ldr	r3, [pc, #76]	; (4024fc <prvTimerTask+0x170>)
  4024b0:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4024b2:	6830      	ldr	r0, [r6, #0]
  4024b4:	a903      	add	r1, sp, #12
  4024b6:	2200      	movs	r2, #0
  4024b8:	4613      	mov	r3, r2
  4024ba:	47a8      	blx	r5
  4024bc:	2800      	cmp	r0, #0
  4024be:	d1bb      	bne.n	402438 <prvTimerTask+0xac>
  4024c0:	e76e      	b.n	4023a0 <prvTimerTask+0x14>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  4024c2:	47d8      	blx	fp
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4024c4:	a803      	add	r0, sp, #12
  4024c6:	4b04      	ldr	r3, [pc, #16]	; (4024d8 <prvTimerTask+0x14c>)
  4024c8:	4798      	blx	r3
  4024ca:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4024cc:	9b03      	ldr	r3, [sp, #12]
  4024ce:	2b00      	cmp	r3, #0
  4024d0:	d09d      	beq.n	40240e <prvTimerTask+0x82>
  4024d2:	e7a7      	b.n	402424 <prvTimerTask+0x98>
  4024d4:	20018b40 	.word	0x20018b40
  4024d8:	004022d1 	.word	0x004022d1
  4024dc:	00401b39 	.word	0x00401b39
  4024e0:	00402125 	.word	0x00402125
  4024e4:	0040227d 	.word	0x0040227d
  4024e8:	00407774 	.word	0x00407774
  4024ec:	004044e1 	.word	0x004044e1
  4024f0:	00401671 	.word	0x00401671
  4024f4:	00400e95 	.word	0x00400e95
  4024f8:	0040150d 	.word	0x0040150d
  4024fc:	00401109 	.word	0x00401109
  402500:	20018b10 	.word	0x20018b10
  402504:	00401995 	.word	0x00401995
  402508:	00400e05 	.word	0x00400e05

0040250c <vxTsensorDataQueryTimerCallback>:
{
	resetTsensorCommStateMachine();
}

void vxTsensorDataQueryTimerCallback( xTimerHandle pxTimer )
{
  40250c:	b510      	push	{r4, lr}
	printf("Trigger semaphore for sensor2..................\r\n");
  40250e:	4805      	ldr	r0, [pc, #20]	; (402524 <vxTsensorDataQueryTimerCallback+0x18>)
  402510:	4b05      	ldr	r3, [pc, #20]	; (402528 <vxTsensorDataQueryTimerCallback+0x1c>)
  402512:	4798      	blx	r3
	xSemaphoreGive( startTsensorProcessing );
  402514:	4b05      	ldr	r3, [pc, #20]	; (40252c <vxTsensorDataQueryTimerCallback+0x20>)
  402516:	6818      	ldr	r0, [r3, #0]
  402518:	2100      	movs	r1, #0
  40251a:	460a      	mov	r2, r1
  40251c:	460b      	mov	r3, r1
  40251e:	4c04      	ldr	r4, [pc, #16]	; (402530 <vxTsensorDataQueryTimerCallback+0x24>)
  402520:	47a0      	blx	r4
  402522:	bd10      	pop	{r4, pc}
  402524:	004077b4 	.word	0x004077b4
  402528:	004045e9 	.word	0x004045e9
  40252c:	20019f00 	.word	0x20019f00
  402530:	00401341 	.word	0x00401341

00402534 <vTsensorNoRspTimeoutTimerCallback>:
	//tsensorQueryWaitForHandling = true;
}

void vTsensorNoRspTimeoutTimerCallback( xTimerHandle pxTimer )
{
  402534:	b530      	push	{r4, r5, lr}
  402536:	b083      	sub	sp, #12
	xTimerChangePeriod( xTsensorDataQueryTimer, TSENSOR_DATA_QUERY_INIT_INTERVAL, 0 );
  402538:	4b06      	ldr	r3, [pc, #24]	; (402554 <vTsensorNoRspTimeoutTimerCallback+0x20>)
  40253a:	6818      	ldr	r0, [r3, #0]
  40253c:	2400      	movs	r4, #0
  40253e:	9400      	str	r4, [sp, #0]
  402540:	2102      	movs	r1, #2
  402542:	2232      	movs	r2, #50	; 0x32
  402544:	4623      	mov	r3, r4
  402546:	4d04      	ldr	r5, [pc, #16]	; (402558 <vTsensorNoRspTimeoutTimerCallback+0x24>)
  402548:	47a8      	blx	r5
	tsensorDataQueryState = MEASUREMENT_INIT;
  40254a:	4b04      	ldr	r3, [pc, #16]	; (40255c <vTsensorNoRspTimeoutTimerCallback+0x28>)
  40254c:	701c      	strb	r4, [r3, #0]
}
  40254e:	b003      	add	sp, #12
  402550:	bd30      	pop	{r4, r5, pc}
  402552:	bf00      	nop
  402554:	20018b68 	.word	0x20018b68
  402558:	0040227d 	.word	0x0040227d
  40255c:	20019f04 	.word	0x20019f04

00402560 <vTsensorCommTimeoutTimerCallback>:
	}
}

void resetTsensorCommStateMachine(void)
{
	uartStateMachine = UART_STATE_MACHINE_MODE_HEAD;
  402560:	2201      	movs	r2, #1
  402562:	4b01      	ldr	r3, [pc, #4]	; (402568 <vTsensorCommTimeoutTimerCallback+0x8>)
  402564:	701a      	strb	r2, [r3, #0]
  402566:	4770      	bx	lr
  402568:	20018b6c 	.word	0x20018b6c

0040256c <tSensor_serial_init>:
}UARTStateMachine_t;

UARTStateMachine_t uartStateMachine = UART_STATE_MACHINE_SYMBOL_H;

void tSensor_serial_init(void)
{
  40256c:	b510      	push	{r4, lr}
  40256e:	b086      	sub	sp, #24
	uint32_t rx_timeout = (SERIAL_FRAME_INTERVAL * USART_BAUDRATE_TEM) / 1000;
	sam_usart_opt_t usart_settings = {
  402570:	2300      	movs	r3, #0
  402572:	9302      	str	r3, [sp, #8]
  402574:	9303      	str	r3, [sp, #12]
  402576:	9304      	str	r3, [sp, #16]
  402578:	9305      	str	r3, [sp, #20]
  40257a:	4b17      	ldr	r3, [pc, #92]	; (4025d8 <tSensor_serial_init+0x6c>)
  40257c:	9300      	str	r3, [sp, #0]
  40257e:	23c0      	movs	r3, #192	; 0xc0
  402580:	9301      	str	r3, [sp, #4]
		.char_length = USART_CHRL_TEM,
		.parity_type = USART_PARITY_TEM,
		.stop_bits = USART_NBSTOP_TEM,
		.channel_mode = US_MR_CHMODE_NORMAL
	};
	flexcom_enable(TSENSOR_SERIAL_PORT_FLEXCOM);
  402582:	4c16      	ldr	r4, [pc, #88]	; (4025dc <tSensor_serial_init+0x70>)
  402584:	4620      	mov	r0, r4
  402586:	4b16      	ldr	r3, [pc, #88]	; (4025e0 <tSensor_serial_init+0x74>)
  402588:	4798      	blx	r3
	flexcom_set_opmode(TSENSOR_SERIAL_PORT_FLEXCOM, FLEXCOM_USART);
  40258a:	4620      	mov	r0, r4
  40258c:	2101      	movs	r1, #1
  40258e:	4b15      	ldr	r3, [pc, #84]	; (4025e4 <tSensor_serial_init+0x78>)
  402590:	4798      	blx	r3
	
	/* Configure USART */
	usart_init_rs232(TSENSOR_SERIAL_PORT, &usart_settings,
  402592:	f504 7400 	add.w	r4, r4, #512	; 0x200
  402596:	4620      	mov	r0, r4
  402598:	4669      	mov	r1, sp
  40259a:	4a13      	ldr	r2, [pc, #76]	; (4025e8 <tSensor_serial_init+0x7c>)
  40259c:	4b13      	ldr	r3, [pc, #76]	; (4025ec <tSensor_serial_init+0x80>)
  40259e:	4798      	blx	r3
	sysclk_get_peripheral_hz());
	
	usart_set_rx_timeout(TSENSOR_SERIAL_PORT, rx_timeout);
  4025a0:	4620      	mov	r0, r4
  4025a2:	f240 71a1 	movw	r1, #1953	; 0x7a1
  4025a6:	4b12      	ldr	r3, [pc, #72]	; (4025f0 <tSensor_serial_init+0x84>)
  4025a8:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4025aa:	4b12      	ldr	r3, [pc, #72]	; (4025f4 <tSensor_serial_init+0x88>)
  4025ac:	22e0      	movs	r2, #224	; 0xe0
  4025ae:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4025b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4025b6:	601a      	str	r2, [r3, #0]
	
	/* Enable USART1 RX interrupt. */
	NVIC_SetPriority(TSENSOR_SERIAL_PORT_IRQn, SERIAL_PORT_INT_PRIO);
	NVIC_EnableIRQ((IRQn_Type)TSENSOR_SERIAL_PORT_FLEXCOM_ID);
	usart_enable_interrupt(TSENSOR_SERIAL_PORT, (US_IER_TIMEOUT | US_IER_RXRDY));
  4025b8:	4620      	mov	r0, r4
  4025ba:	f240 1101 	movw	r1, #257	; 0x101
  4025be:	4b0e      	ldr	r3, [pc, #56]	; (4025f8 <tSensor_serial_init+0x8c>)
  4025c0:	4798      	blx	r3
	
	/* Enable the receiver and transmitter. */
	usart_start_rx_timeout(TSENSOR_SERIAL_PORT);
  4025c2:	4620      	mov	r0, r4
  4025c4:	4b0d      	ldr	r3, [pc, #52]	; (4025fc <tSensor_serial_init+0x90>)
  4025c6:	4798      	blx	r3
	usart_enable_tx(TSENSOR_SERIAL_PORT);
  4025c8:	4620      	mov	r0, r4
  4025ca:	4b0d      	ldr	r3, [pc, #52]	; (402600 <tSensor_serial_init+0x94>)
  4025cc:	4798      	blx	r3
	usart_enable_rx(TSENSOR_SERIAL_PORT);
  4025ce:	4620      	mov	r0, r4
  4025d0:	4b0c      	ldr	r3, [pc, #48]	; (402604 <tSensor_serial_init+0x98>)
  4025d2:	4798      	blx	r3
	
	/* Init thermo board only for once at start*/
	//Temp_Measure_Command_Send(INIT_SENSATION_MEASUREMENT);
}
  4025d4:	b006      	add	sp, #24
  4025d6:	bd10      	pop	{r4, pc}
  4025d8:	0002faf0 	.word	0x0002faf0
  4025dc:	40018000 	.word	0x40018000
  4025e0:	00400439 	.word	0x00400439
  4025e4:	004005a9 	.word	0x004005a9
  4025e8:	07270000 	.word	0x07270000
  4025ec:	00400985 	.word	0x00400985
  4025f0:	004009e9 	.word	0x004009e9
  4025f4:	e000e100 	.word	0xe000e100
  4025f8:	004009ed 	.word	0x004009ed
  4025fc:	004009f9 	.word	0x004009f9
  402600:	004009d9 	.word	0x004009d9
  402604:	004009e1 	.word	0x004009e1

00402608 <FLEXCOM3_Handler>:

static uint32_t recv_idx = 0;
void tSensor_uart_isr_handler(void)
{
  402608:	b510      	push	{r4, lr}
  40260a:	b082      	sub	sp, #8
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  40260c:	2300      	movs	r3, #0
  40260e:	9301      	str	r3, [sp, #4]
	uint32_t status;
	uint32_t symbol;
	Pdc *p_pdc = NULL;
	status = usart_get_status(TSENSOR_SERIAL_PORT);
  402610:	4820      	ldr	r0, [pc, #128]	; (402694 <FLEXCOM3_Handler+0x8c>)
  402612:	4b21      	ldr	r3, [pc, #132]	; (402698 <FLEXCOM3_Handler+0x90>)
  402614:	4798      	blx	r3
	if(status & US_CSR_RXRDY) {
  402616:	f010 0f01 	tst.w	r0, #1
  40261a:	d012      	beq.n	402642 <FLEXCOM3_Handler+0x3a>
		if(usart_read(TSENSOR_SERIAL_PORT, &symbol) == 0) {
  40261c:	481d      	ldr	r0, [pc, #116]	; (402694 <FLEXCOM3_Handler+0x8c>)
  40261e:	4669      	mov	r1, sp
  402620:	4b1e      	ldr	r3, [pc, #120]	; (40269c <FLEXCOM3_Handler+0x94>)
  402622:	4798      	blx	r3
  402624:	2800      	cmp	r0, #0
  402626:	d132      	bne.n	40268e <FLEXCOM3_Handler+0x86>
			if (tempUartRecvBuff.len < TSENSOR_RECV_BUFF_SIZE){
  402628:	4b1d      	ldr	r3, [pc, #116]	; (4026a0 <FLEXCOM3_Handler+0x98>)
  40262a:	881b      	ldrh	r3, [r3, #0]
  40262c:	f241 3287 	movw	r2, #4999	; 0x1387
  402630:	4293      	cmp	r3, r2
  402632:	d82c      	bhi.n	40268e <FLEXCOM3_Handler+0x86>
				tempUartRecvBuff.payload[tempUartRecvBuff.len++] = (uint8_t)symbol;
  402634:	4a1a      	ldr	r2, [pc, #104]	; (4026a0 <FLEXCOM3_Handler+0x98>)
  402636:	1c59      	adds	r1, r3, #1
  402638:	8011      	strh	r1, [r2, #0]
  40263a:	4413      	add	r3, r2
  40263c:	9a00      	ldr	r2, [sp, #0]
  40263e:	709a      	strb	r2, [r3, #2]
  402640:	e025      	b.n	40268e <FLEXCOM3_Handler+0x86>
			}
		}
	}else if(status & US_CSR_TIMEOUT) {
  402642:	f410 7f80 	tst.w	r0, #256	; 0x100
  402646:	d013      	beq.n	402670 <FLEXCOM3_Handler+0x68>
		if (tempUartRecvBuff.len > 0){
  402648:	4b15      	ldr	r3, [pc, #84]	; (4026a0 <FLEXCOM3_Handler+0x98>)
  40264a:	8819      	ldrh	r1, [r3, #0]
  40264c:	b161      	cbz	r1, 402668 <FLEXCOM3_Handler+0x60>
			// notice task to process
			tsensorDataWaitforHandling = true;
  40264e:	2201      	movs	r2, #1
  402650:	4b14      	ldr	r3, [pc, #80]	; (4026a4 <FLEXCOM3_Handler+0x9c>)
  402652:	701a      	strb	r2, [r3, #0]
			printf("Get data from sensor..........%d\r\n", tempUartRecvBuff.len);
  402654:	4814      	ldr	r0, [pc, #80]	; (4026a8 <FLEXCOM3_Handler+0xa0>)
  402656:	4b15      	ldr	r3, [pc, #84]	; (4026ac <FLEXCOM3_Handler+0xa4>)
  402658:	4798      	blx	r3
			xSemaphoreGiveFromISR(startTsensorProcessing, &higher_priority_task_woken);
  40265a:	4b15      	ldr	r3, [pc, #84]	; (4026b0 <FLEXCOM3_Handler+0xa8>)
  40265c:	6818      	ldr	r0, [r3, #0]
  40265e:	2100      	movs	r1, #0
  402660:	aa01      	add	r2, sp, #4
  402662:	460b      	mov	r3, r1
  402664:	4c13      	ldr	r4, [pc, #76]	; (4026b4 <FLEXCOM3_Handler+0xac>)
  402666:	47a0      	blx	r4
		}
		//tempUartRecvBuff.len = 0;
		usart_start_rx_timeout(TSENSOR_SERIAL_PORT);
  402668:	480a      	ldr	r0, [pc, #40]	; (402694 <FLEXCOM3_Handler+0x8c>)
  40266a:	4b13      	ldr	r3, [pc, #76]	; (4026b8 <FLEXCOM3_Handler+0xb0>)
  40266c:	4798      	blx	r3
  40266e:	e00e      	b.n	40268e <FLEXCOM3_Handler+0x86>
	}else if(status & US_CSR_ENDTX) {
  402670:	f010 0f10 	tst.w	r0, #16
  402674:	d00b      	beq.n	40268e <FLEXCOM3_Handler+0x86>
		p_pdc = usart_get_pdc_base(TSENSOR_SERIAL_PORT);
  402676:	4c07      	ldr	r4, [pc, #28]	; (402694 <FLEXCOM3_Handler+0x8c>)
  402678:	4620      	mov	r0, r4
  40267a:	4b10      	ldr	r3, [pc, #64]	; (4026bc <FLEXCOM3_Handler+0xb4>)
  40267c:	4798      	blx	r3
		pdc_disable_transfer(p_pdc, PERIPH_PTCR_TXTDIS);
  40267e:	f44f 7100 	mov.w	r1, #512	; 0x200
  402682:	4b0f      	ldr	r3, [pc, #60]	; (4026c0 <FLEXCOM3_Handler+0xb8>)
  402684:	4798      	blx	r3
		usart_disable_interrupt(TSENSOR_SERIAL_PORT, US_IDR_ENDTX);
  402686:	4620      	mov	r0, r4
  402688:	2110      	movs	r1, #16
  40268a:	4b0e      	ldr	r3, [pc, #56]	; (4026c4 <FLEXCOM3_Handler+0xbc>)
  40268c:	4798      	blx	r3
	}else{
		/* Do nothing */
	}
}
  40268e:	b002      	add	sp, #8
  402690:	bd10      	pop	{r4, pc}
  402692:	bf00      	nop
  402694:	40018200 	.word	0x40018200
  402698:	004009f5 	.word	0x004009f5
  40269c:	00400a15 	.word	0x00400a15
  4026a0:	20018b74 	.word	0x20018b74
  4026a4:	2001b298 	.word	0x2001b298
  4026a8:	004077e8 	.word	0x004077e8
  4026ac:	004045e9 	.word	0x004045e9
  4026b0:	20019f00 	.word	0x20019f00
  4026b4:	00401471 	.word	0x00401471
  4026b8:	004009f9 	.word	0x004009f9
  4026bc:	00400a2d 	.word	0x00400a2d
  4026c0:	004005d1 	.word	0x004005d1
  4026c4:	004009f1 	.word	0x004009f1

004026c8 <sendToTsensorUart>:
		break;
	}
}

void sendToTsensorUart(uint8_t *buff, int32_t buffSize)
{
  4026c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4026ca:	b083      	sub	sp, #12
  4026cc:	4607      	mov	r7, r0
  4026ce:	460e      	mov	r6, r1
	Pdc *p_pdc = NULL;
	pdc_packet_t packet;
	p_pdc = usart_get_pdc_base(TSENSOR_SERIAL_PORT);
  4026d0:	4c0a      	ldr	r4, [pc, #40]	; (4026fc <sendToTsensorUart+0x34>)
  4026d2:	4620      	mov	r0, r4
  4026d4:	4b0a      	ldr	r3, [pc, #40]	; (402700 <sendToTsensorUart+0x38>)
  4026d6:	4798      	blx	r3
  4026d8:	4605      	mov	r5, r0
	
	packet.ul_addr = (uint32_t)buff;
  4026da:	9700      	str	r7, [sp, #0]
	packet.ul_size = buffSize;
  4026dc:	9601      	str	r6, [sp, #4]
	
	pdc_tx_init(p_pdc, &packet, NULL);
  4026de:	4669      	mov	r1, sp
  4026e0:	2200      	movs	r2, #0
  4026e2:	4b08      	ldr	r3, [pc, #32]	; (402704 <sendToTsensorUart+0x3c>)
  4026e4:	4798      	blx	r3
	pdc_enable_transfer(p_pdc, PERIPH_PTCR_TXTEN);
  4026e6:	4628      	mov	r0, r5
  4026e8:	f44f 7180 	mov.w	r1, #256	; 0x100
  4026ec:	4b06      	ldr	r3, [pc, #24]	; (402708 <sendToTsensorUart+0x40>)
  4026ee:	4798      	blx	r3
	usart_enable_interrupt(TSENSOR_SERIAL_PORT, US_IER_ENDTX);
  4026f0:	4620      	mov	r0, r4
  4026f2:	2110      	movs	r1, #16
  4026f4:	4b05      	ldr	r3, [pc, #20]	; (40270c <sendToTsensorUart+0x44>)
  4026f6:	4798      	blx	r3
}
  4026f8:	b003      	add	sp, #12
  4026fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4026fc:	40018200 	.word	0x40018200
  402700:	00400a2d 	.word	0x00400a2d
  402704:	004005ad 	.word	0x004005ad
  402708:	004005c5 	.word	0x004005c5
  40270c:	004009ed 	.word	0x004009ed

00402710 <Temp_Measure_Command_Send>:

void Temp_Measure_Command_Send(uint8_t command)
{
  402710:	b508      	push	{r3, lr}
	sendbuff[0] = G55_TO_THERMAL_SYMBOL;
  402712:	4b09      	ldr	r3, [pc, #36]	; (402738 <Temp_Measure_Command_Send+0x28>)
  402714:	22aa      	movs	r2, #170	; 0xaa
  402716:	701a      	strb	r2, [r3, #0]
	sendbuff[1] = 0x10;
  402718:	2110      	movs	r1, #16
  40271a:	7059      	strb	r1, [r3, #1]
	sendbuff[2] = 0x01;
  40271c:	2101      	movs	r1, #1
  40271e:	7099      	strb	r1, [r3, #2]
	sendbuff[3] = 0x00;
  402720:	2100      	movs	r1, #0
  402722:	70d9      	strb	r1, [r3, #3]
	sendbuff[4] = command;
  402724:	7118      	strb	r0, [r3, #4]
	sendbuff[5] = 0xAA;
  402726:	715a      	strb	r2, [r3, #5]
	sendbuff[6] = 0x1F;
  402728:	221f      	movs	r2, #31
  40272a:	719a      	strb	r2, [r3, #6]
	sendToTsensorUart(sendbuff, 7);
  40272c:	4618      	mov	r0, r3
  40272e:	2107      	movs	r1, #7
  402730:	4b02      	ldr	r3, [pc, #8]	; (40273c <Temp_Measure_Command_Send+0x2c>)
  402732:	4798      	blx	r3
  402734:	bd08      	pop	{r3, pc}
  402736:	bf00      	nop
  402738:	20018b48 	.word	0x20018b48
  40273c:	004026c9 	.word	0x004026c9

00402740 <tSensor_handler>:
{
	uartStateMachine = UART_STATE_MACHINE_MODE_HEAD;
}

void tSensor_handler(void)
{
  402740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	vPortEnterCritical();
  402742:	4b26      	ldr	r3, [pc, #152]	; (4027dc <tSensor_handler+0x9c>)
  402744:	4798      	blx	r3
	memcpy(&uartRecvBuff,&tempUartRecvBuff,tempUartRecvBuff.len + sizeof(uint16_t));
  402746:	4d26      	ldr	r5, [pc, #152]	; (4027e0 <tSensor_handler+0xa0>)
  402748:	4c26      	ldr	r4, [pc, #152]	; (4027e4 <tSensor_handler+0xa4>)
  40274a:	8822      	ldrh	r2, [r4, #0]
  40274c:	4628      	mov	r0, r5
  40274e:	4621      	mov	r1, r4
  402750:	3202      	adds	r2, #2
  402752:	4b25      	ldr	r3, [pc, #148]	; (4027e8 <tSensor_handler+0xa8>)
  402754:	4798      	blx	r3
	tempUartRecvBuff.len = 0;
  402756:	2300      	movs	r3, #0
  402758:	8023      	strh	r3, [r4, #0]
	vPortExitCritical();
  40275a:	4b24      	ldr	r3, [pc, #144]	; (4027ec <tSensor_handler+0xac>)
  40275c:	4798      	blx	r3
	
	//xTimerStop(xTsensorCommTimeoutTimer, 0 );
	printf("%6d(%d):",xTaskGetTickCount(), uartRecvBuff.len);
  40275e:	4b24      	ldr	r3, [pc, #144]	; (4027f0 <tSensor_handler+0xb0>)
  402760:	4798      	blx	r3
  402762:	4601      	mov	r1, r0
  402764:	462c      	mov	r4, r5
  402766:	4823      	ldr	r0, [pc, #140]	; (4027f4 <tSensor_handler+0xb4>)
  402768:	f834 2b01 	ldrh.w	r2, [r4], #1
  40276c:	4b22      	ldr	r3, [pc, #136]	; (4027f8 <tSensor_handler+0xb8>)
  40276e:	4798      	blx	r3
  402770:	3504      	adds	r5, #4
	for (uint16_t i = 0; i < 3/*uartRecvBuff.len*/; i++){
		/*uartDataParser(uartRecvBuff.payload[i]); */printf("%02X ",uartRecvBuff.payload[i]);
  402772:	4f22      	ldr	r7, [pc, #136]	; (4027fc <tSensor_handler+0xbc>)
  402774:	4e20      	ldr	r6, [pc, #128]	; (4027f8 <tSensor_handler+0xb8>)
  402776:	4638      	mov	r0, r7
  402778:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  40277c:	47b0      	blx	r6
	tempUartRecvBuff.len = 0;
	vPortExitCritical();
	
	//xTimerStop(xTsensorCommTimeoutTimer, 0 );
	printf("%6d(%d):",xTaskGetTickCount(), uartRecvBuff.len);
	for (uint16_t i = 0; i < 3/*uartRecvBuff.len*/; i++){
  40277e:	42ac      	cmp	r4, r5
  402780:	d1f9      	bne.n	402776 <tSensor_handler+0x36>
		/*uartDataParser(uartRecvBuff.payload[i]); */printf("%02X ",uartRecvBuff.payload[i]);
	}
	printf("\r\n");
  402782:	481f      	ldr	r0, [pc, #124]	; (402800 <tSensor_handler+0xc0>)
  402784:	4b1c      	ldr	r3, [pc, #112]	; (4027f8 <tSensor_handler+0xb8>)
  402786:	4798      	blx	r3
	if (uartRecvBuff.payload[0] == 0xCC &&
  402788:	4b15      	ldr	r3, [pc, #84]	; (4027e0 <tSensor_handler+0xa0>)
  40278a:	885a      	ldrh	r2, [r3, #2]
  40278c:	f248 03cc 	movw	r3, #32972	; 0x80cc
  402790:	429a      	cmp	r2, r3
  402792:	d121      	bne.n	4027d8 <tSensor_handler+0x98>
		uartRecvBuff.payload[1] == 0x80)
		{
			Temp_Measure_Command_Send(SENSATION_MEASUREMENT_STOP);
  402794:	2003      	movs	r0, #3
  402796:	4b1b      	ldr	r3, [pc, #108]	; (402804 <tSensor_handler+0xc4>)
  402798:	4798      	blx	r3
			memset(thermimage, 0, sizeof(thermimage));
  40279a:	4d1b      	ldr	r5, [pc, #108]	; (402808 <tSensor_handler+0xc8>)
  40279c:	f44f 548a 	mov.w	r4, #4416	; 0x1140
  4027a0:	4628      	mov	r0, r5
  4027a2:	2100      	movs	r1, #0
  4027a4:	4622      	mov	r2, r4
  4027a6:	4b19      	ldr	r3, [pc, #100]	; (40280c <tSensor_handler+0xcc>)
  4027a8:	4798      	blx	r3
			memcpy(thermimage, &uartRecvBuff.payload[4], 96*46);
  4027aa:	4628      	mov	r0, r5
  4027ac:	4918      	ldr	r1, [pc, #96]	; (402810 <tSensor_handler+0xd0>)
  4027ae:	4622      	mov	r2, r4
  4027b0:	4b0d      	ldr	r3, [pc, #52]	; (4027e8 <tSensor_handler+0xa8>)
  4027b2:	4798      	blx	r3
			printf("thermo image: ");
  4027b4:	4817      	ldr	r0, [pc, #92]	; (402814 <tSensor_handler+0xd4>)
  4027b6:	4b10      	ldr	r3, [pc, #64]	; (4027f8 <tSensor_handler+0xb8>)
  4027b8:	4798      	blx	r3
  4027ba:	1e6c      	subs	r4, r5, #1
  4027bc:	f505 5589 	add.w	r5, r5, #4384	; 0x1120
  4027c0:	351f      	adds	r5, #31
			for (uint16_t i = 0; i< 96*46; i++)
				printf("%02X ",thermimage[i]);
  4027c2:	4f0e      	ldr	r7, [pc, #56]	; (4027fc <tSensor_handler+0xbc>)
  4027c4:	4e0c      	ldr	r6, [pc, #48]	; (4027f8 <tSensor_handler+0xb8>)
  4027c6:	4638      	mov	r0, r7
  4027c8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  4027cc:	47b0      	blx	r6
		{
			Temp_Measure_Command_Send(SENSATION_MEASUREMENT_STOP);
			memset(thermimage, 0, sizeof(thermimage));
			memcpy(thermimage, &uartRecvBuff.payload[4], 96*46);
			printf("thermo image: ");
			for (uint16_t i = 0; i< 96*46; i++)
  4027ce:	42ac      	cmp	r4, r5
  4027d0:	d1f9      	bne.n	4027c6 <tSensor_handler+0x86>
				printf("%02X ",thermimage[i]);
			printf("\r\n");
  4027d2:	480b      	ldr	r0, [pc, #44]	; (402800 <tSensor_handler+0xc0>)
  4027d4:	4b08      	ldr	r3, [pc, #32]	; (4027f8 <tSensor_handler+0xb8>)
  4027d6:	4798      	blx	r3
  4027d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027da:	bf00      	nop
  4027dc:	00400eb5 	.word	0x00400eb5
  4027e0:	20019f08 	.word	0x20019f08
  4027e4:	20018b74 	.word	0x20018b74
  4027e8:	00404675 	.word	0x00404675
  4027ec:	00400ed5 	.word	0x00400ed5
  4027f0:	004019a5 	.word	0x004019a5
  4027f4:	0040780c 	.word	0x0040780c
  4027f8:	004045e9 	.word	0x004045e9
  4027fc:	00407818 	.word	0x00407818
  402800:	004078d0 	.word	0x004078d0
  402804:	00402711 	.word	0x00402711
  402808:	2001b29c 	.word	0x2001b29c
  40280c:	004047a9 	.word	0x004047a9
  402810:	20019f0e 	.word	0x20019f0e
  402814:	00407820 	.word	0x00407820

00402818 <Temp_Measure_Get_Air_Condition_Info>:
	sendbuff[6] = 0x1F;
	sendToTsensorUart(sendbuff, 7);
}

void Temp_Measure_Get_Air_Condition_Info(uint8_t roomTemperature, uint8_t roomHumidity)
{
  402818:	b510      	push	{r4, lr}
	sendbuff[0] = G55_TO_THERMAL_SYMBOL;
  40281a:	4b09      	ldr	r3, [pc, #36]	; (402840 <Temp_Measure_Get_Air_Condition_Info+0x28>)
  40281c:	22aa      	movs	r2, #170	; 0xaa
  40281e:	701a      	strb	r2, [r3, #0]
	sendbuff[1] = 0x88;
  402820:	2488      	movs	r4, #136	; 0x88
  402822:	705c      	strb	r4, [r3, #1]
	sendbuff[2] = 0x02;
  402824:	2402      	movs	r4, #2
  402826:	709c      	strb	r4, [r3, #2]
	sendbuff[3] = 0x00;
  402828:	2400      	movs	r4, #0
  40282a:	70dc      	strb	r4, [r3, #3]
	sendbuff[4] = roomTemperature;//
  40282c:	7118      	strb	r0, [r3, #4]
	sendbuff[5] = roomHumidity;//
  40282e:	7159      	strb	r1, [r3, #5]
	sendbuff[6] = 0xAA;
  402830:	719a      	strb	r2, [r3, #6]
	sendbuff[7] = 0x8F;
  402832:	228f      	movs	r2, #143	; 0x8f
  402834:	71da      	strb	r2, [r3, #7]
	sendToTsensorUart(sendbuff, 8);
  402836:	4618      	mov	r0, r3
  402838:	2108      	movs	r1, #8
  40283a:	4b02      	ldr	r3, [pc, #8]	; (402844 <Temp_Measure_Get_Air_Condition_Info+0x2c>)
  40283c:	4798      	blx	r3
  40283e:	bd10      	pop	{r4, pc}
  402840:	20018b48 	.word	0x20018b48
  402844:	004026c9 	.word	0x004026c9

00402848 <sensor_task>:
	xTimerChangePeriod( xTsensorDataQueryTimer, TSENSOR_DATA_QUERY_INIT_INTERVAL, 0 );
	tsensorDataQueryState = MEASUREMENT_INIT;
}

void sensor_task( void *pvParameters)
{
  402848:	b580      	push	{r7, lr}
  40284a:	b082      	sub	sp, #8
	vSemaphoreCreateBinary(startTsensorProcessing);
  40284c:	2001      	movs	r0, #1
  40284e:	2100      	movs	r1, #0
  402850:	2203      	movs	r2, #3
  402852:	4b26      	ldr	r3, [pc, #152]	; (4028ec <sensor_task+0xa4>)
  402854:	4798      	blx	r3
  402856:	4b26      	ldr	r3, [pc, #152]	; (4028f0 <sensor_task+0xa8>)
  402858:	6018      	str	r0, [r3, #0]
  40285a:	b138      	cbz	r0, 40286c <sensor_task+0x24>
  40285c:	2100      	movs	r1, #0
  40285e:	460a      	mov	r2, r1
  402860:	460b      	mov	r3, r1
  402862:	4c24      	ldr	r4, [pc, #144]	; (4028f4 <sensor_task+0xac>)
  402864:	47a0      	blx	r4
	if (startTsensorProcessing == NULL){
  402866:	4b22      	ldr	r3, [pc, #136]	; (4028f0 <sensor_task+0xa8>)
  402868:	681b      	ldr	r3, [r3, #0]
  40286a:	b913      	cbnz	r3, 402872 <sensor_task+0x2a>
		printf("Failed to create Semaphore: startTsensorProcessing \r\n");
  40286c:	4822      	ldr	r0, [pc, #136]	; (4028f8 <sensor_task+0xb0>)
  40286e:	4b23      	ldr	r3, [pc, #140]	; (4028fc <sensor_task+0xb4>)
  402870:	4798      	blx	r3
	}
	
	xTsensorCommTimeoutTimer = xTimerCreate("TTTimer", TSENSOR_UART_TIMEOUT_INTERVAL , pdFALSE, ( void * ) 0, vTsensorCommTimeoutTimerCallback);
  402872:	4b23      	ldr	r3, [pc, #140]	; (402900 <sensor_task+0xb8>)
  402874:	9300      	str	r3, [sp, #0]
  402876:	4823      	ldr	r0, [pc, #140]	; (402904 <sensor_task+0xbc>)
  402878:	2114      	movs	r1, #20
  40287a:	2200      	movs	r2, #0
  40287c:	4613      	mov	r3, r2
  40287e:	4c22      	ldr	r4, [pc, #136]	; (402908 <sensor_task+0xc0>)
  402880:	47a0      	blx	r4
  402882:	4b22      	ldr	r3, [pc, #136]	; (40290c <sensor_task+0xc4>)
  402884:	6018      	str	r0, [r3, #0]
	if(xTsensorCommTimeoutTimer == NULL ){
  402886:	b910      	cbnz	r0, 40288e <sensor_task+0x46>
		printf("Failed to create xTsensorCommTimeoutTimer \r\n");
  402888:	4821      	ldr	r0, [pc, #132]	; (402910 <sensor_task+0xc8>)
  40288a:	4b1c      	ldr	r3, [pc, #112]	; (4028fc <sensor_task+0xb4>)
  40288c:	4798      	blx	r3
	}
	
	xTsensorDataQueryTimer = xTimerCreate("QTimer", TSENSOR_DATA_QUERY_INIT_INTERVAL , pdTRUE, ( void * ) 0, vxTsensorDataQueryTimerCallback);
  40288e:	4b21      	ldr	r3, [pc, #132]	; (402914 <sensor_task+0xcc>)
  402890:	9300      	str	r3, [sp, #0]
  402892:	4821      	ldr	r0, [pc, #132]	; (402918 <sensor_task+0xd0>)
  402894:	2132      	movs	r1, #50	; 0x32
  402896:	2201      	movs	r2, #1
  402898:	2300      	movs	r3, #0
  40289a:	4c1b      	ldr	r4, [pc, #108]	; (402908 <sensor_task+0xc0>)
  40289c:	47a0      	blx	r4
  40289e:	4b1f      	ldr	r3, [pc, #124]	; (40291c <sensor_task+0xd4>)
  4028a0:	6018      	str	r0, [r3, #0]
	if(xTsensorDataQueryTimer != NULL ){
  4028a2:	b910      	cbnz	r0, 4028aa <sensor_task+0x62>
		//xTimerStart(xTsensorDataQueryTimer, 0 );
	}else{
		printf("Failed to create xTsensorDataQueryTimer \r\n");
  4028a4:	481e      	ldr	r0, [pc, #120]	; (402920 <sensor_task+0xd8>)
  4028a6:	4b15      	ldr	r3, [pc, #84]	; (4028fc <sensor_task+0xb4>)
  4028a8:	4798      	blx	r3
	}
	
	xTsensorNoRspTimeoutTimer = xTimerCreate("TNSPTimer", TSENSOR_NO_RSP_TIMEOUT_INTERVAL , pdFALSE, ( void * ) 0, vTsensorNoRspTimeoutTimerCallback);
  4028aa:	4b1e      	ldr	r3, [pc, #120]	; (402924 <sensor_task+0xdc>)
  4028ac:	9300      	str	r3, [sp, #0]
  4028ae:	481e      	ldr	r0, [pc, #120]	; (402928 <sensor_task+0xe0>)
  4028b0:	f24c 3150 	movw	r1, #50000	; 0xc350
  4028b4:	2200      	movs	r2, #0
  4028b6:	4613      	mov	r3, r2
  4028b8:	4c13      	ldr	r4, [pc, #76]	; (402908 <sensor_task+0xc0>)
  4028ba:	47a0      	blx	r4
  4028bc:	4b1b      	ldr	r3, [pc, #108]	; (40292c <sensor_task+0xe4>)
  4028be:	6018      	str	r0, [r3, #0]
	if(xTsensorNoRspTimeoutTimer == NULL ){
  4028c0:	b910      	cbnz	r0, 4028c8 <sensor_task+0x80>
		printf("Failed to create xTsensorDataQueryTimer \r\n");
  4028c2:	4817      	ldr	r0, [pc, #92]	; (402920 <sensor_task+0xd8>)
  4028c4:	4b0d      	ldr	r3, [pc, #52]	; (4028fc <sensor_task+0xb4>)
  4028c6:	4798      	blx	r3
		
	}
	
	for(;;) {
		//vTaskDelay(1000);
		xSemaphoreTake(startTsensorProcessing, portMAX_DELAY);
  4028c8:	4e09      	ldr	r6, [pc, #36]	; (4028f0 <sensor_task+0xa8>)
  4028ca:	4d19      	ldr	r5, [pc, #100]	; (402930 <sensor_task+0xe8>)
				default:
				tsensorDataQueryState= MEASUREMENT_INIT;
				break;
			}
		}*/
		if (tsensorDataWaitforHandling){
  4028cc:	4c19      	ldr	r4, [pc, #100]	; (402934 <sensor_task+0xec>)
			//printf("%06d:Received\r\n",xTaskGetTickCount());
			tsensorDataWaitforHandling = false;
			//xTimerStop(xTsensorNoRspTimeoutTimer, 0 );
			//xTimerStart(xTsensorNoRspTimeoutTimer, 0 );
			tSensor_handler();
  4028ce:	4f1a      	ldr	r7, [pc, #104]	; (402938 <sensor_task+0xf0>)
		
	}
	
	for(;;) {
		//vTaskDelay(1000);
		xSemaphoreTake(startTsensorProcessing, portMAX_DELAY);
  4028d0:	6830      	ldr	r0, [r6, #0]
  4028d2:	2100      	movs	r1, #0
  4028d4:	f04f 32ff 	mov.w	r2, #4294967295
  4028d8:	460b      	mov	r3, r1
  4028da:	47a8      	blx	r5
				default:
				tsensorDataQueryState= MEASUREMENT_INIT;
				break;
			}
		}*/
		if (tsensorDataWaitforHandling){
  4028dc:	7823      	ldrb	r3, [r4, #0]
  4028de:	2b00      	cmp	r3, #0
  4028e0:	d0f6      	beq.n	4028d0 <sensor_task+0x88>
			//printf("%06d:Received\r\n",xTaskGetTickCount());
			tsensorDataWaitforHandling = false;
  4028e2:	2300      	movs	r3, #0
  4028e4:	7023      	strb	r3, [r4, #0]
			//xTimerStop(xTsensorNoRspTimeoutTimer, 0 );
			//xTimerStart(xTsensorNoRspTimeoutTimer, 0 );
			tSensor_handler();
  4028e6:	47b8      	blx	r7
  4028e8:	e7f2      	b.n	4028d0 <sensor_task+0x88>
  4028ea:	bf00      	nop
  4028ec:	004012e1 	.word	0x004012e1
  4028f0:	20019f00 	.word	0x20019f00
  4028f4:	00401341 	.word	0x00401341
  4028f8:	00407830 	.word	0x00407830
  4028fc:	004045e9 	.word	0x004045e9
  402900:	00402561 	.word	0x00402561
  402904:	00407868 	.word	0x00407868
  402908:	00402225 	.word	0x00402225
  40290c:	2001b294 	.word	0x2001b294
  402910:	00407870 	.word	0x00407870
  402914:	0040250d 	.word	0x0040250d
  402918:	004078a0 	.word	0x004078a0
  40291c:	20018b68 	.word	0x20018b68
  402920:	004078a8 	.word	0x004078a8
  402924:	00402535 	.word	0x00402535
  402928:	004078d4 	.word	0x004078d4
  40292c:	20018b70 	.word	0x20018b70
  402930:	0040150d 	.word	0x0040150d
  402934:	2001b298 	.word	0x2001b298
  402938:	00402741 	.word	0x00402741

0040293c <sum8>:

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
  40293c:	b159      	cbz	r1, 402956 <sum8+0x1a>
  40293e:	1e43      	subs	r3, r0, #1
  402940:	3901      	subs	r1, #1
  402942:	fa50 f181 	uxtab	r1, r0, r1
  402946:	2000      	movs	r0, #0
	{
		checksum += A[i];
  402948:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  40294c:	4410      	add	r0, r2
  40294e:	b2c0      	uxtb	r0, r0

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
  402950:	428b      	cmp	r3, r1
  402952:	d1f9      	bne.n	402948 <sum8+0xc>
  402954:	4770      	bx	lr
}

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
  402956:	2000      	movs	r0, #0
	for(i = 0; i < n; i++)
	{
		checksum += A[i];
	}
	return(checksum);
}
  402958:	4770      	bx	lr
  40295a:	bf00      	nop

0040295c <vLedModeCallback>:
	}
}

static void vLedModeCallback( xTimerHandle pxTimer )
{
	switch(led_blinking_mode){
  40295c:	4b1e      	ldr	r3, [pc, #120]	; (4029d8 <vLedModeCallback+0x7c>)
  40295e:	781b      	ldrb	r3, [r3, #0]
  402960:	3b01      	subs	r3, #1
  402962:	2b03      	cmp	r3, #3
  402964:	d837      	bhi.n	4029d6 <vLedModeCallback+0x7a>
  402966:	e8df f003 	tbb	[pc, r3]
  40296a:	2202      	.short	0x2202
  40296c:	122c      	.short	0x122c
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40296e:	4b1b      	ldr	r3, [pc, #108]	; (4029dc <vLedModeCallback+0x80>)
  402970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  402972:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
		port->PIO_CODR = mask;
  402976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40297a:	4b18      	ldr	r3, [pc, #96]	; (4029dc <vLedModeCallback+0x80>)
  40297c:	bf14      	ite	ne
  40297e:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  402980:	631a      	streq	r2, [r3, #48]	; 0x30
		case LED_MODE_CONNECT:
		{
			LED_Toggle(LED0);
			led_state = led_state^1;
  402982:	4a17      	ldr	r2, [pc, #92]	; (4029e0 <vLedModeCallback+0x84>)
  402984:	7813      	ldrb	r3, [r2, #0]
  402986:	f083 0301 	eor.w	r3, r3, #1
  40298a:	7013      	strb	r3, [r2, #0]
			break;
  40298c:	4770      	bx	lr
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40298e:	4b13      	ldr	r3, [pc, #76]	; (4029dc <vLedModeCallback+0x80>)
  402990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  402992:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
		port->PIO_CODR = mask;
  402996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40299a:	4b10      	ldr	r3, [pc, #64]	; (4029dc <vLedModeCallback+0x80>)
  40299c:	bf14      	ite	ne
  40299e:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4029a0:	631a      	streq	r2, [r3, #48]	; 0x30
		}
		case LED_MODE_OTAU:
		{
			LED_Toggle(LED0);
			led_state = led_state^1;
  4029a2:	4a0f      	ldr	r2, [pc, #60]	; (4029e0 <vLedModeCallback+0x84>)
  4029a4:	7813      	ldrb	r3, [r2, #0]
  4029a6:	f083 0301 	eor.w	r3, r3, #1
  4029aa:	7013      	strb	r3, [r2, #0]
			break;
  4029ac:	4770      	bx	lr
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4029ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4029b2:	4b0a      	ldr	r3, [pc, #40]	; (4029dc <vLedModeCallback+0x80>)
  4029b4:	635a      	str	r2, [r3, #52]	; 0x34
		}
		case LED_MODE_OFF:
		{
			LED_Off(LED0);
			led_state = 0;
  4029b6:	2300      	movs	r3, #0
  4029b8:	4a09      	ldr	r2, [pc, #36]	; (4029e0 <vLedModeCallback+0x84>)
  4029ba:	7013      	strb	r3, [r2, #0]
			led_blinking_mode = LED_MODE_NONE;
  4029bc:	4a06      	ldr	r2, [pc, #24]	; (4029d8 <vLedModeCallback+0x7c>)
  4029be:	7013      	strb	r3, [r2, #0]
			break;
  4029c0:	4770      	bx	lr
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4029c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4029c6:	4b05      	ldr	r3, [pc, #20]	; (4029dc <vLedModeCallback+0x80>)
  4029c8:	631a      	str	r2, [r3, #48]	; 0x30
		}
		case LED_MODE_ON:
		{
			LED_On(LED0);
			led_state = 1;
  4029ca:	2201      	movs	r2, #1
  4029cc:	4b04      	ldr	r3, [pc, #16]	; (4029e0 <vLedModeCallback+0x84>)
  4029ce:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_NONE;
  4029d0:	2200      	movs	r2, #0
  4029d2:	4b01      	ldr	r3, [pc, #4]	; (4029d8 <vLedModeCallback+0x7c>)
  4029d4:	701a      	strb	r2, [r3, #0]
  4029d6:	4770      	bx	lr
  4029d8:	20000020 	.word	0x20000020
  4029dc:	400e0e00 	.word	0x400e0e00
  4029e0:	2001c55c 	.word	0x2001c55c

004029e4 <serial_resp_out>:

	return (p - buf);
}

static void serial_resp_out(uint8_t resp_id, uint8_t status)
{
  4029e4:	b510      	push	{r4, lr}
	static uint8_t resp_buf[8];
	uint8_t *p = &resp_buf[0];
	static serial_out_pk_t resp_send_packet;
	static serial_out_pk_t *resp_out_data = &resp_send_packet;

	*p++ = SERIAL_SOF;
  4029e6:	4c0d      	ldr	r4, [pc, #52]	; (402a1c <serial_resp_out+0x38>)
  4029e8:	237e      	movs	r3, #126	; 0x7e
  4029ea:	7023      	strb	r3, [r4, #0]
	//*p++ = ENCRYPT_MODE;
	*p++ = 2;
  4029ec:	2302      	movs	r3, #2
  4029ee:	7063      	strb	r3, [r4, #1]
	*p++ = resp_id;
  4029f0:	70a0      	strb	r0, [r4, #2]
	*p++ = status;
  4029f2:	70e1      	strb	r1, [r4, #3]
	*p = sum8(&resp_buf[0], p - &resp_buf[0]);
  4029f4:	4620      	mov	r0, r4
  4029f6:	2104      	movs	r1, #4
  4029f8:	4b09      	ldr	r3, [pc, #36]	; (402a20 <serial_resp_out+0x3c>)
  4029fa:	4798      	blx	r3
  4029fc:	7120      	strb	r0, [r4, #4]
	p++;
	resp_out_data->buf = resp_buf;
  4029fe:	4909      	ldr	r1, [pc, #36]	; (402a24 <serial_resp_out+0x40>)
  402a00:	680b      	ldr	r3, [r1, #0]
  402a02:	601c      	str	r4, [r3, #0]
	resp_out_data->len = p - resp_buf;
  402a04:	680b      	ldr	r3, [r1, #0]
  402a06:	2205      	movs	r2, #5
  402a08:	605a      	str	r2, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &resp_out_data, 1000);
  402a0a:	4b07      	ldr	r3, [pc, #28]	; (402a28 <serial_resp_out+0x44>)
  402a0c:	6818      	ldr	r0, [r3, #0]
  402a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402a12:	2300      	movs	r3, #0
  402a14:	4c05      	ldr	r4, [pc, #20]	; (402a2c <serial_resp_out+0x48>)
  402a16:	47a0      	blx	r4
  402a18:	bd10      	pop	{r4, pc}
  402a1a:	bf00      	nop
  402a1c:	2001c50c 	.word	0x2001c50c
  402a20:	0040293d 	.word	0x0040293d
  402a24:	2000002c 	.word	0x2000002c
  402a28:	2001cda8 	.word	0x2001cda8
  402a2c:	00401341 	.word	0x00401341

00402a30 <form_serial_packet>:
	}
	return(checksum);
}

static uint16_t form_serial_packet(uint8_t cmdid, uint8_t *data, uint8_t datalen, uint8_t *buf)
{
  402a30:	b570      	push	{r4, r5, r6, lr}
  402a32:	4616      	mov	r6, r2
  402a34:	461d      	mov	r5, r3
	uint8_t *p = buf;

	*p++ = SERIAL_SOF;
  402a36:	237e      	movs	r3, #126	; 0x7e
  402a38:	702b      	strb	r3, [r5, #0]
	*p++ = ENCRYPT_MODE;
  402a3a:	2300      	movs	r3, #0
  402a3c:	706b      	strb	r3, [r5, #1]
	*p++ = datalen + 1;
  402a3e:	1c53      	adds	r3, r2, #1
  402a40:	70ab      	strb	r3, [r5, #2]
	*p++ = cmdid;
  402a42:	1d2c      	adds	r4, r5, #4
  402a44:	70e8      	strb	r0, [r5, #3]
	if((data != NULL) && (datalen > 0)) {
  402a46:	b121      	cbz	r1, 402a52 <form_serial_packet+0x22>
  402a48:	b11a      	cbz	r2, 402a52 <form_serial_packet+0x22>
		memcpy(p, data, datalen);
  402a4a:	4620      	mov	r0, r4
  402a4c:	4b06      	ldr	r3, [pc, #24]	; (402a68 <form_serial_packet+0x38>)
  402a4e:	4798      	blx	r3
		p = p + datalen;
  402a50:	4434      	add	r4, r6
	}
	*p = sum8(buf, (p - buf));
  402a52:	1b61      	subs	r1, r4, r5
  402a54:	4628      	mov	r0, r5
  402a56:	b2c9      	uxtb	r1, r1
  402a58:	4b04      	ldr	r3, [pc, #16]	; (402a6c <form_serial_packet+0x3c>)
  402a5a:	4798      	blx	r3
  402a5c:	f804 0b01 	strb.w	r0, [r4], #1
	p++;

	return (p - buf);
  402a60:	1b60      	subs	r0, r4, r5
}
  402a62:	b280      	uxth	r0, r0
  402a64:	bd70      	pop	{r4, r5, r6, pc}
  402a66:	bf00      	nop
  402a68:	00404675 	.word	0x00404675
  402a6c:	0040293d 	.word	0x0040293d

00402a70 <byte2hexstrstr>:
	ioport_set_pin_level(WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	delay_ms(100);
}

static int byte2hexstrstr(const uint8_t *pBytes, uint32_t srcLen, uint8_t *pDstStr, uint32_t dstLen)
{
  402a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a74:	b086      	sub	sp, #24
  402a76:	4606      	mov	r6, r0
  402a78:	460c      	mov	r4, r1
  402a7a:	4615      	mov	r5, r2
  402a7c:	4698      	mov	r8, r3
	const char tab[] = "0123456789abcdef";
  402a7e:	af01      	add	r7, sp, #4
  402a80:	f8df e068 	ldr.w	lr, [pc, #104]	; 402aec <byte2hexstrstr+0x7c>
  402a84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  402a88:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  402a8a:	f8de 3000 	ldr.w	r3, [lr]
  402a8e:	703b      	strb	r3, [r7, #0]
	uint32_t i = 0;

	memset(pDstStr, 0, dstLen);
  402a90:	4628      	mov	r0, r5
  402a92:	2100      	movs	r1, #0
  402a94:	4642      	mov	r2, r8
  402a96:	4b14      	ldr	r3, [pc, #80]	; (402ae8 <byte2hexstrstr+0x78>)
  402a98:	4798      	blx	r3

	if (dstLen < srcLen * 2)
  402a9a:	ebb8 0f44 	cmp.w	r8, r4, lsl #1
	srcLen = (dstLen - 1) / 2;
  402a9e:	bf3c      	itt	cc
  402aa0:	f108 34ff 	addcc.w	r4, r8, #4294967295
  402aa4:	0864      	lsrcc	r4, r4, #1

	for (i = 0; i < srcLen; i++)
  402aa6:	b1cc      	cbz	r4, 402adc <byte2hexstrstr+0x6c>
  402aa8:	1ca9      	adds	r1, r5, #2
  402aaa:	4632      	mov	r2, r6
  402aac:	1930      	adds	r0, r6, r4
  402aae:	4616      	mov	r6, r2
	{
		*pDstStr++ = tab[*pBytes >> 4];
  402ab0:	f812 3b01 	ldrb.w	r3, [r2], #1
  402ab4:	af06      	add	r7, sp, #24
  402ab6:	eb07 1313 	add.w	r3, r7, r3, lsr #4
  402aba:	f813 3c14 	ldrb.w	r3, [r3, #-20]
  402abe:	f801 3c02 	strb.w	r3, [r1, #-2]
		*pDstStr++ = tab[*pBytes & 0x0f];
  402ac2:	7833      	ldrb	r3, [r6, #0]
  402ac4:	f003 030f 	and.w	r3, r3, #15
  402ac8:	443b      	add	r3, r7
  402aca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
  402ace:	f801 3c01 	strb.w	r3, [r1, #-1]
  402ad2:	3102      	adds	r1, #2
	memset(pDstStr, 0, dstLen);

	if (dstLen < srcLen * 2)
	srcLen = (dstLen - 1) / 2;

	for (i = 0; i < srcLen; i++)
  402ad4:	4282      	cmp	r2, r0
  402ad6:	d1ea      	bne.n	402aae <byte2hexstrstr+0x3e>
  402ad8:	eb05 0544 	add.w	r5, r5, r4, lsl #1
	{
		*pDstStr++ = tab[*pBytes >> 4];
		*pDstStr++ = tab[*pBytes & 0x0f];
		pBytes++;
	}
	*pDstStr++ = 0;
  402adc:	2300      	movs	r3, #0
  402ade:	702b      	strb	r3, [r5, #0]
	return srcLen * 2;
}
  402ae0:	0060      	lsls	r0, r4, #1
  402ae2:	b006      	add	sp, #24
  402ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ae8:	004047a9 	.word	0x004047a9
  402aec:	004078e0 	.word	0x004078e0

00402af0 <vConfigModeCallback>:
		break;
	}
}

static void vConfigModeCallback( xTimerHandle pxTimer )
{
  402af0:	b530      	push	{r4, r5, lr}
  402af2:	b085      	sub	sp, #20
	
	static uint8_t pkt_buf[16];
	static uint16_t pkt_len;

	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  402af4:	4b62      	ldr	r3, [pc, #392]	; (402c80 <vConfigModeCallback+0x190>)
  402af6:	9303      	str	r3, [sp, #12]
	
	
	IoT_vPortEnterCritical();
  402af8:	4b62      	ldr	r3, [pc, #392]	; (402c84 <vConfigModeCallback+0x194>)
  402afa:	4798      	blx	r3
	count++;
  402afc:	4a62      	ldr	r2, [pc, #392]	; (402c88 <vConfigModeCallback+0x198>)
  402afe:	7813      	ldrb	r3, [r2, #0]
  402b00:	3301      	adds	r3, #1
  402b02:	7013      	strb	r3, [r2, #0]
	IoT_vPortExitCritical();
  402b04:	4b61      	ldr	r3, [pc, #388]	; (402c8c <vConfigModeCallback+0x19c>)
  402b06:	4798      	blx	r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402b08:	4b61      	ldr	r3, [pc, #388]	; (402c90 <vConfigModeCallback+0x1a0>)
  402b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	
	if(!ioport_get_pin_level(BUTTON_0_PIN)){
  402b0c:	f013 0f01 	tst.w	r3, #1
  402b10:	d12c      	bne.n	402b6c <vConfigModeCallback+0x7c>
		if(count >= 5){
  402b12:	4b5d      	ldr	r3, [pc, #372]	; (402c88 <vConfigModeCallback+0x198>)
  402b14:	781b      	ldrb	r3, [r3, #0]
  402b16:	2b04      	cmp	r3, #4
  402b18:	f240 80af 	bls.w	402c7a <vConfigModeCallback+0x18a>
			IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("enter config mode\r\n"));
  402b1c:	4b5d      	ldr	r3, [pc, #372]	; (402c94 <vConfigModeCallback+0x1a4>)
  402b1e:	6818      	ldr	r0, [r3, #0]
  402b20:	b1d0      	cbz	r0, 402b58 <vConfigModeCallback+0x68>
  402b22:	2100      	movs	r1, #0
  402b24:	f04f 32ff 	mov.w	r2, #4294967295
  402b28:	460b      	mov	r3, r1
  402b2a:	4c5b      	ldr	r4, [pc, #364]	; (402c98 <vConfigModeCallback+0x1a8>)
  402b2c:	47a0      	blx	r4
  402b2e:	4b5b      	ldr	r3, [pc, #364]	; (402c9c <vConfigModeCallback+0x1ac>)
  402b30:	4798      	blx	r3
  402b32:	4604      	mov	r4, r0
  402b34:	2000      	movs	r0, #0
  402b36:	4b5a      	ldr	r3, [pc, #360]	; (402ca0 <vConfigModeCallback+0x1b0>)
  402b38:	4798      	blx	r3
  402b3a:	4602      	mov	r2, r0
  402b3c:	4859      	ldr	r0, [pc, #356]	; (402ca4 <vConfigModeCallback+0x1b4>)
  402b3e:	4621      	mov	r1, r4
  402b40:	4c59      	ldr	r4, [pc, #356]	; (402ca8 <vConfigModeCallback+0x1b8>)
  402b42:	47a0      	blx	r4
  402b44:	4859      	ldr	r0, [pc, #356]	; (402cac <vConfigModeCallback+0x1bc>)
  402b46:	47a0      	blx	r4
  402b48:	4b52      	ldr	r3, [pc, #328]	; (402c94 <vConfigModeCallback+0x1a4>)
  402b4a:	6818      	ldr	r0, [r3, #0]
  402b4c:	2100      	movs	r1, #0
  402b4e:	460a      	mov	r2, r1
  402b50:	460b      	mov	r3, r1
  402b52:	4c57      	ldr	r4, [pc, #348]	; (402cb0 <vConfigModeCallback+0x1c0>)
  402b54:	47a0      	blx	r4
  402b56:	e002      	b.n	402b5e <vConfigModeCallback+0x6e>
  402b58:	4854      	ldr	r0, [pc, #336]	; (402cac <vConfigModeCallback+0x1bc>)
  402b5a:	4b53      	ldr	r3, [pc, #332]	; (402ca8 <vConfigModeCallback+0x1b8>)
  402b5c:	4798      	blx	r3
			button_mode = ENTER_CONFIG_MODE;
  402b5e:	2200      	movs	r2, #0
  402b60:	4b54      	ldr	r3, [pc, #336]	; (402cb4 <vConfigModeCallback+0x1c4>)
  402b62:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_ON;
  402b64:	2203      	movs	r2, #3
  402b66:	4b54      	ldr	r3, [pc, #336]	; (402cb8 <vConfigModeCallback+0x1c8>)
  402b68:	701a      	strb	r2, [r3, #0]
  402b6a:	e086      	b.n	402c7a <vConfigModeCallback+0x18a>
			//button_mode = ENTER_GENERAL_MODE;
		}
	}
	else{
		//button released, exit FN mode
		if(button_mode == ENTER_CONFIG_MODE){
  402b6c:	4b51      	ldr	r3, [pc, #324]	; (402cb4 <vConfigModeCallback+0x1c4>)
  402b6e:	781b      	ldrb	r3, [r3, #0]
  402b70:	2b00      	cmp	r3, #0
  402b72:	d139      	bne.n	402be8 <vConfigModeCallback+0xf8>
			IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("perform config mode\r\n"));
  402b74:	4b47      	ldr	r3, [pc, #284]	; (402c94 <vConfigModeCallback+0x1a4>)
  402b76:	6818      	ldr	r0, [r3, #0]
  402b78:	b1d0      	cbz	r0, 402bb0 <vConfigModeCallback+0xc0>
  402b7a:	2100      	movs	r1, #0
  402b7c:	f04f 32ff 	mov.w	r2, #4294967295
  402b80:	460b      	mov	r3, r1
  402b82:	4c45      	ldr	r4, [pc, #276]	; (402c98 <vConfigModeCallback+0x1a8>)
  402b84:	47a0      	blx	r4
  402b86:	4b45      	ldr	r3, [pc, #276]	; (402c9c <vConfigModeCallback+0x1ac>)
  402b88:	4798      	blx	r3
  402b8a:	4604      	mov	r4, r0
  402b8c:	2000      	movs	r0, #0
  402b8e:	4b44      	ldr	r3, [pc, #272]	; (402ca0 <vConfigModeCallback+0x1b0>)
  402b90:	4798      	blx	r3
  402b92:	4602      	mov	r2, r0
  402b94:	4843      	ldr	r0, [pc, #268]	; (402ca4 <vConfigModeCallback+0x1b4>)
  402b96:	4621      	mov	r1, r4
  402b98:	4c43      	ldr	r4, [pc, #268]	; (402ca8 <vConfigModeCallback+0x1b8>)
  402b9a:	47a0      	blx	r4
  402b9c:	4847      	ldr	r0, [pc, #284]	; (402cbc <vConfigModeCallback+0x1cc>)
  402b9e:	47a0      	blx	r4
  402ba0:	4b3c      	ldr	r3, [pc, #240]	; (402c94 <vConfigModeCallback+0x1a4>)
  402ba2:	6818      	ldr	r0, [r3, #0]
  402ba4:	2100      	movs	r1, #0
  402ba6:	460a      	mov	r2, r1
  402ba8:	460b      	mov	r3, r1
  402baa:	4c41      	ldr	r4, [pc, #260]	; (402cb0 <vConfigModeCallback+0x1c0>)
  402bac:	47a0      	blx	r4
  402bae:	e002      	b.n	402bb6 <vConfigModeCallback+0xc6>
  402bb0:	4842      	ldr	r0, [pc, #264]	; (402cbc <vConfigModeCallback+0x1cc>)
  402bb2:	4b3d      	ldr	r3, [pc, #244]	; (402ca8 <vConfigModeCallback+0x1b8>)
  402bb4:	4798      	blx	r3
			led_blinking_mode = LED_MODE_CONNECT;
  402bb6:	2201      	movs	r2, #1
  402bb8:	4b3f      	ldr	r3, [pc, #252]	; (402cb8 <vConfigModeCallback+0x1c8>)
  402bba:	701a      	strb	r2, [r3, #0]
			pkt_len = form_serial_packet(CUSTOMIZE_CMD_FACTORY_RESET, NULL, 0, pkt_buf);
  402bbc:	4c40      	ldr	r4, [pc, #256]	; (402cc0 <vConfigModeCallback+0x1d0>)
  402bbe:	2002      	movs	r0, #2
  402bc0:	2100      	movs	r1, #0
  402bc2:	460a      	mov	r2, r1
  402bc4:	4623      	mov	r3, r4
  402bc6:	4d3f      	ldr	r5, [pc, #252]	; (402cc4 <vConfigModeCallback+0x1d4>)
  402bc8:	47a8      	blx	r5
  402bca:	4b3f      	ldr	r3, [pc, #252]	; (402cc8 <vConfigModeCallback+0x1d8>)
  402bcc:	8018      	strh	r0, [r3, #0]
			out_data->buf = pkt_buf;
  402bce:	9b03      	ldr	r3, [sp, #12]
  402bd0:	601c      	str	r4, [r3, #0]
			out_data->len = pkt_len;
  402bd2:	a904      	add	r1, sp, #16
  402bd4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
  402bd8:	6058      	str	r0, [r3, #4]
			IoT_xQueueSend(serial_out_queue, &out_data, 0);
  402bda:	4b3c      	ldr	r3, [pc, #240]	; (402ccc <vConfigModeCallback+0x1dc>)
  402bdc:	6818      	ldr	r0, [r3, #0]
  402bde:	2200      	movs	r2, #0
  402be0:	4613      	mov	r3, r2
  402be2:	4c33      	ldr	r4, [pc, #204]	; (402cb0 <vConfigModeCallback+0x1c0>)
  402be4:	47a0      	blx	r4
  402be6:	e037      	b.n	402c58 <vConfigModeCallback+0x168>
		}
		else if (button_mode == ENTER_GENERAL_MODE){
  402be8:	2b01      	cmp	r3, #1
  402bea:	d135      	bne.n	402c58 <vConfigModeCallback+0x168>
			IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("perform test command mode\r\n"));
  402bec:	4b29      	ldr	r3, [pc, #164]	; (402c94 <vConfigModeCallback+0x1a4>)
  402bee:	6818      	ldr	r0, [r3, #0]
  402bf0:	b1d0      	cbz	r0, 402c28 <vConfigModeCallback+0x138>
  402bf2:	2100      	movs	r1, #0
  402bf4:	f04f 32ff 	mov.w	r2, #4294967295
  402bf8:	460b      	mov	r3, r1
  402bfa:	4c27      	ldr	r4, [pc, #156]	; (402c98 <vConfigModeCallback+0x1a8>)
  402bfc:	47a0      	blx	r4
  402bfe:	4b27      	ldr	r3, [pc, #156]	; (402c9c <vConfigModeCallback+0x1ac>)
  402c00:	4798      	blx	r3
  402c02:	4604      	mov	r4, r0
  402c04:	2000      	movs	r0, #0
  402c06:	4b26      	ldr	r3, [pc, #152]	; (402ca0 <vConfigModeCallback+0x1b0>)
  402c08:	4798      	blx	r3
  402c0a:	4602      	mov	r2, r0
  402c0c:	4825      	ldr	r0, [pc, #148]	; (402ca4 <vConfigModeCallback+0x1b4>)
  402c0e:	4621      	mov	r1, r4
  402c10:	4c25      	ldr	r4, [pc, #148]	; (402ca8 <vConfigModeCallback+0x1b8>)
  402c12:	47a0      	blx	r4
  402c14:	482e      	ldr	r0, [pc, #184]	; (402cd0 <vConfigModeCallback+0x1e0>)
  402c16:	47a0      	blx	r4
  402c18:	4b1e      	ldr	r3, [pc, #120]	; (402c94 <vConfigModeCallback+0x1a4>)
  402c1a:	6818      	ldr	r0, [r3, #0]
  402c1c:	2100      	movs	r1, #0
  402c1e:	460a      	mov	r2, r1
  402c20:	460b      	mov	r3, r1
  402c22:	4c23      	ldr	r4, [pc, #140]	; (402cb0 <vConfigModeCallback+0x1c0>)
  402c24:	47a0      	blx	r4
  402c26:	e002      	b.n	402c2e <vConfigModeCallback+0x13e>
  402c28:	4829      	ldr	r0, [pc, #164]	; (402cd0 <vConfigModeCallback+0x1e0>)
  402c2a:	4b1f      	ldr	r3, [pc, #124]	; (402ca8 <vConfigModeCallback+0x1b8>)
  402c2c:	4798      	blx	r3
static void auto_states_upload()
{

	static uint8_t pkt_buf[16];
	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  402c2e:	4b29      	ldr	r3, [pc, #164]	; (402cd4 <vConfigModeCallback+0x1e4>)
  402c30:	9302      	str	r3, [sp, #8]
	uint16_t pkt_len;
	
	pkt_len = form_serial_packet(CUSTOMIZE_CMD_DATA_UPLOAD, &g_virtual_dev, sizeof(g_virtual_dev), pkt_buf);
  402c32:	4c29      	ldr	r4, [pc, #164]	; (402cd8 <vConfigModeCallback+0x1e8>)
  402c34:	2009      	movs	r0, #9
  402c36:	4929      	ldr	r1, [pc, #164]	; (402cdc <vConfigModeCallback+0x1ec>)
  402c38:	2205      	movs	r2, #5
  402c3a:	4623      	mov	r3, r4
  402c3c:	4d21      	ldr	r5, [pc, #132]	; (402cc4 <vConfigModeCallback+0x1d4>)
  402c3e:	47a8      	blx	r5
	out_data->buf = pkt_buf;
  402c40:	9b02      	ldr	r3, [sp, #8]
  402c42:	601c      	str	r4, [r3, #0]
	out_data->len = pkt_len;
  402c44:	a904      	add	r1, sp, #16
  402c46:	f851 3d08 	ldr.w	r3, [r1, #-8]!
  402c4a:	6058      	str	r0, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &out_data, 0);
  402c4c:	4b1f      	ldr	r3, [pc, #124]	; (402ccc <vConfigModeCallback+0x1dc>)
  402c4e:	6818      	ldr	r0, [r3, #0]
  402c50:	2200      	movs	r2, #0
  402c52:	4613      	mov	r3, r2
  402c54:	4c16      	ldr	r4, [pc, #88]	; (402cb0 <vConfigModeCallback+0x1c0>)
  402c56:	47a0      	blx	r4
			//out_data->len = pkt_len;
			//IoT_xQueueSend(serial_out_queue, &out_data, 0);
			auto_states_upload();
			
		}
		IoT_vPortEnterCritical();
  402c58:	4b0a      	ldr	r3, [pc, #40]	; (402c84 <vConfigModeCallback+0x194>)
  402c5a:	4798      	blx	r3
		count = 0;
  402c5c:	2400      	movs	r4, #0
  402c5e:	4b0a      	ldr	r3, [pc, #40]	; (402c88 <vConfigModeCallback+0x198>)
  402c60:	701c      	strb	r4, [r3, #0]
		IoT_vPortExitCritical();
  402c62:	4b0a      	ldr	r3, [pc, #40]	; (402c8c <vConfigModeCallback+0x19c>)
  402c64:	4798      	blx	r3
		button_mode = ENTER_GENERAL_MODE;
  402c66:	2101      	movs	r1, #1
  402c68:	4b12      	ldr	r3, [pc, #72]	; (402cb4 <vConfigModeCallback+0x1c4>)
  402c6a:	7019      	strb	r1, [r3, #0]
		xTimerStop(xConfigTimer, 0);
  402c6c:	4b1c      	ldr	r3, [pc, #112]	; (402ce0 <vConfigModeCallback+0x1f0>)
  402c6e:	6818      	ldr	r0, [r3, #0]
  402c70:	9400      	str	r4, [sp, #0]
  402c72:	4622      	mov	r2, r4
  402c74:	4623      	mov	r3, r4
  402c76:	4c1b      	ldr	r4, [pc, #108]	; (402ce4 <vConfigModeCallback+0x1f4>)
  402c78:	47a0      	blx	r4
	}
}
  402c7a:	b005      	add	sp, #20
  402c7c:	bd30      	pop	{r4, r5, pc}
  402c7e:	bf00      	nop
  402c80:	2001c4e4 	.word	0x2001c4e4
  402c84:	00400eb5 	.word	0x00400eb5
  402c88:	2001c52c 	.word	0x2001c52c
  402c8c:	00400ed5 	.word	0x00400ed5
  402c90:	400e1000 	.word	0x400e1000
  402c94:	2001cdac 	.word	0x2001cdac
  402c98:	0040150d 	.word	0x0040150d
  402c9c:	004019a5 	.word	0x004019a5
  402ca0:	004019e5 	.word	0x004019e5
  402ca4:	004078f4 	.word	0x004078f4
  402ca8:	004045e9 	.word	0x004045e9
  402cac:	00407900 	.word	0x00407900
  402cb0:	00401341 	.word	0x00401341
  402cb4:	20000030 	.word	0x20000030
  402cb8:	20000020 	.word	0x20000020
  402cbc:	00407914 	.word	0x00407914
  402cc0:	2001c584 	.word	0x2001c584
  402cc4:	00402a31 	.word	0x00402a31
  402cc8:	2001c524 	.word	0x2001c524
  402ccc:	2001cda8 	.word	0x2001cda8
  402cd0:	0040792c 	.word	0x0040792c
  402cd4:	2001c560 	.word	0x2001c560
  402cd8:	2001c4f0 	.word	0x2001c4f0
  402cdc:	2001cf7c 	.word	0x2001cf7c
  402ce0:	2001c530 	.word	0x2001c530
  402ce4:	0040227d 	.word	0x0040227d

00402ce8 <wifi_module_reset>:
uint8_t uart_ready = 0;
volatile int uart_beatheart = 0;


void wifi_module_reset(void)
{
  402ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402cea:	4e06      	ldr	r6, [pc, #24]	; (402d04 <wifi_module_reset+0x1c>)
  402cec:	2702      	movs	r7, #2
  402cee:	6377      	str	r7, [r6, #52]	; 0x34
	//ioport_set_pin_level(WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	delay_ms(100);
  402cf0:	4d05      	ldr	r5, [pc, #20]	; (402d08 <wifi_module_reset+0x20>)
  402cf2:	4628      	mov	r0, r5
  402cf4:	4c05      	ldr	r4, [pc, #20]	; (402d0c <wifi_module_reset+0x24>)
  402cf6:	47a0      	blx	r4
	//ioport_set_pin_level(WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	delay_ms(100);
  402cf8:	4628      	mov	r0, r5
  402cfa:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402cfc:	6337      	str	r7, [r6, #48]	; 0x30
	ioport_set_pin_level(WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	delay_ms(100);
  402cfe:	4628      	mov	r0, r5
  402d00:	47a0      	blx	r4
  402d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d04:	400e1000 	.word	0x400e1000
  402d08:	000d141e 	.word	0x000d141e
  402d0c:	20000001 	.word	0x20000001

00402d10 <wifi_serial_init>:
	*pDstStr++ = 0;
	return srcLen * 2;
}

void wifi_serial_init(uint32_t baudspeed)
{
  402d10:	b530      	push	{r4, r5, lr}
  402d12:	b087      	sub	sp, #28
  402d14:	4604      	mov	r4, r0
	uint32_t rx_timeout = (SERIAL_FRAME_INTERVAL * baudspeed) / 1000;
	sam_usart_opt_t usart_settings = {
  402d16:	2300      	movs	r3, #0
  402d18:	9303      	str	r3, [sp, #12]
  402d1a:	9304      	str	r3, [sp, #16]
  402d1c:	9305      	str	r3, [sp, #20]
  402d1e:	9000      	str	r0, [sp, #0]
  402d20:	23c0      	movs	r3, #192	; 0xc0
  402d22:	9301      	str	r3, [sp, #4]
  402d24:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402d28:	9302      	str	r3, [sp, #8]
		.char_length = USART_CHRL,
		.parity_type = USART_PARITY,
		.stop_bits = USART_NBSTOP,
		.channel_mode = US_MR_CHMODE_NORMAL
	};
	flexcom_enable(WIFI_SERIAL_PORT_FLEXCOM);
  402d2a:	4d1b      	ldr	r5, [pc, #108]	; (402d98 <wifi_serial_init+0x88>)
  402d2c:	4628      	mov	r0, r5
  402d2e:	4b1b      	ldr	r3, [pc, #108]	; (402d9c <wifi_serial_init+0x8c>)
  402d30:	4798      	blx	r3
	flexcom_set_opmode(WIFI_SERIAL_PORT_FLEXCOM, FLEXCOM_USART);
  402d32:	4628      	mov	r0, r5
  402d34:	2101      	movs	r1, #1
  402d36:	4b1a      	ldr	r3, [pc, #104]	; (402da0 <wifi_serial_init+0x90>)
  402d38:	4798      	blx	r3
	
	/* Configure USART */
	usart_init_rs232(WIFI_SERIAL_PORT, &usart_settings,
  402d3a:	f505 7500 	add.w	r5, r5, #512	; 0x200
  402d3e:	4628      	mov	r0, r5
  402d40:	4669      	mov	r1, sp
  402d42:	4a18      	ldr	r2, [pc, #96]	; (402da4 <wifi_serial_init+0x94>)
  402d44:	4b18      	ldr	r3, [pc, #96]	; (402da8 <wifi_serial_init+0x98>)
  402d46:	4798      	blx	r3
	return srcLen * 2;
}

void wifi_serial_init(uint32_t baudspeed)
{
	uint32_t rx_timeout = (SERIAL_FRAME_INTERVAL * baudspeed) / 1000;
  402d48:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402d4c:	0064      	lsls	r4, r4, #1
  402d4e:	4917      	ldr	r1, [pc, #92]	; (402dac <wifi_serial_init+0x9c>)
  402d50:	fba1 3104 	umull	r3, r1, r1, r4
	
	/* Configure USART */
	usart_init_rs232(WIFI_SERIAL_PORT, &usart_settings,
	sysclk_get_peripheral_hz());
	
	usart_set_rx_timeout(WIFI_SERIAL_PORT, rx_timeout);
  402d54:	4628      	mov	r0, r5
  402d56:	0989      	lsrs	r1, r1, #6
  402d58:	4b15      	ldr	r3, [pc, #84]	; (402db0 <wifi_serial_init+0xa0>)
  402d5a:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402d5c:	4b15      	ldr	r3, [pc, #84]	; (402db4 <wifi_serial_init+0xa4>)
  402d5e:	22e0      	movs	r2, #224	; 0xe0
  402d60:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402d64:	f44f 7280 	mov.w	r2, #256	; 0x100
  402d68:	601a      	str	r2, [r3, #0]
	
	/* Enable USART1 RX interrupt. */
	NVIC_SetPriority(WIFI_SERIAL_PORT_IRQn, SERIAL_PORT_INT_PRIO);
	NVIC_EnableIRQ((IRQn_Type)WIFI_SERIAL_PORT_FLEXCOM_ID);
	usart_enable_interrupt(WIFI_SERIAL_PORT, (US_IER_TIMEOUT | US_IER_RXRDY));
  402d6a:	4628      	mov	r0, r5
  402d6c:	f240 1101 	movw	r1, #257	; 0x101
  402d70:	4b11      	ldr	r3, [pc, #68]	; (402db8 <wifi_serial_init+0xa8>)
  402d72:	4798      	blx	r3
	
	serial_recving = &serial_pk0;
  402d74:	4a11      	ldr	r2, [pc, #68]	; (402dbc <wifi_serial_init+0xac>)
  402d76:	4b12      	ldr	r3, [pc, #72]	; (402dc0 <wifi_serial_init+0xb0>)
  402d78:	601a      	str	r2, [r3, #0]
	serial_recved = &serial_pk1;
  402d7a:	4a12      	ldr	r2, [pc, #72]	; (402dc4 <wifi_serial_init+0xb4>)
  402d7c:	4b12      	ldr	r3, [pc, #72]	; (402dc8 <wifi_serial_init+0xb8>)
  402d7e:	601a      	str	r2, [r3, #0]
	
	/* Enable the receiver and transmitter. */
	usart_start_rx_timeout(WIFI_SERIAL_PORT);
  402d80:	4628      	mov	r0, r5
  402d82:	4b12      	ldr	r3, [pc, #72]	; (402dcc <wifi_serial_init+0xbc>)
  402d84:	4798      	blx	r3
	usart_enable_tx(WIFI_SERIAL_PORT);
  402d86:	4628      	mov	r0, r5
  402d88:	4b11      	ldr	r3, [pc, #68]	; (402dd0 <wifi_serial_init+0xc0>)
  402d8a:	4798      	blx	r3
	usart_enable_rx(WIFI_SERIAL_PORT);
  402d8c:	4628      	mov	r0, r5
  402d8e:	4b11      	ldr	r3, [pc, #68]	; (402dd4 <wifi_serial_init+0xc4>)
  402d90:	4798      	blx	r3

}
  402d92:	b007      	add	sp, #28
  402d94:	bd30      	pop	{r4, r5, pc}
  402d96:	bf00      	nop
  402d98:	4000c000 	.word	0x4000c000
  402d9c:	00400439 	.word	0x00400439
  402da0:	004005a9 	.word	0x004005a9
  402da4:	07270000 	.word	0x07270000
  402da8:	00400985 	.word	0x00400985
  402dac:	10624dd3 	.word	0x10624dd3
  402db0:	004009e9 	.word	0x004009e9
  402db4:	e000e100 	.word	0xe000e100
  402db8:	004009ed 	.word	0x004009ed
  402dbc:	2001c594 	.word	0x2001c594
  402dc0:	2001cda4 	.word	0x2001cda4
  402dc4:	2001c998 	.word	0x2001c998
  402dc8:	2001cda0 	.word	0x2001cda0
  402dcc:	004009f9 	.word	0x004009f9
  402dd0:	004009d9 	.word	0x004009d9
  402dd4:	004009e1 	.word	0x004009e1

00402dd8 <FLEXCOM0_Handler>:

void WIFI_SERIAL_PORT_HANDLER(void)
{
  402dd8:	b510      	push	{r4, lr}
  402dda:	b082      	sub	sp, #8
	uint32_t status;
	uint32_t symbol;
	Pdc *p_pdc = NULL;
	serial_in_pk_t *ptemp = NULL;
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
  402ddc:	2300      	movs	r3, #0
  402dde:	9300      	str	r3, [sp, #0]

	status = usart_get_status(WIFI_SERIAL_PORT);
  402de0:	4834      	ldr	r0, [pc, #208]	; (402eb4 <FLEXCOM0_Handler+0xdc>)
  402de2:	4b35      	ldr	r3, [pc, #212]	; (402eb8 <FLEXCOM0_Handler+0xe0>)
  402de4:	4798      	blx	r3
	//printf("USART6_Handler\r\n");
	if(status & US_CSR_RXRDY) {
  402de6:	f010 0f01 	tst.w	r0, #1
  402dea:	d012      	beq.n	402e12 <FLEXCOM0_Handler+0x3a>
		
		if(usart_read(WIFI_SERIAL_PORT, &symbol) == 0) {
  402dec:	4831      	ldr	r0, [pc, #196]	; (402eb4 <FLEXCOM0_Handler+0xdc>)
  402dee:	a901      	add	r1, sp, #4
  402df0:	4b32      	ldr	r3, [pc, #200]	; (402ebc <FLEXCOM0_Handler+0xe4>)
  402df2:	4798      	blx	r3
  402df4:	2800      	cmp	r0, #0
  402df6:	d15a      	bne.n	402eae <FLEXCOM0_Handler+0xd6>
			if(recv_idx < MAXIMUM_DATA_LENGTH) {
  402df8:	4b31      	ldr	r3, [pc, #196]	; (402ec0 <FLEXCOM0_Handler+0xe8>)
  402dfa:	681b      	ldr	r3, [r3, #0]
  402dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  402e00:	d255      	bcs.n	402eae <FLEXCOM0_Handler+0xd6>
				serial_recving->buf[recv_idx] = (uint8_t)symbol;
  402e02:	4a30      	ldr	r2, [pc, #192]	; (402ec4 <FLEXCOM0_Handler+0xec>)
  402e04:	6812      	ldr	r2, [r2, #0]
  402e06:	9901      	ldr	r1, [sp, #4]
  402e08:	54d1      	strb	r1, [r2, r3]
				recv_idx++;
  402e0a:	3301      	adds	r3, #1
  402e0c:	4a2c      	ldr	r2, [pc, #176]	; (402ec0 <FLEXCOM0_Handler+0xe8>)
  402e0e:	6013      	str	r3, [r2, #0]
  402e10:	e04d      	b.n	402eae <FLEXCOM0_Handler+0xd6>
			}
		}
	}
	else if(status & US_CSR_TIMEOUT) {
  402e12:	f410 7f80 	tst.w	r0, #256	; 0x100
  402e16:	d03b      	beq.n	402e90 <FLEXCOM0_Handler+0xb8>
		IoT_xTimerStartFromISR(serial_tmr, &xHigherPriorityTaskWoken);
		if(xHigherPriorityTaskWoken != pdFALSE) {
			IoT_vPortYieldFromISR();
		}
		*/
		ptemp = serial_recving;
  402e18:	492a      	ldr	r1, [pc, #168]	; (402ec4 <FLEXCOM0_Handler+0xec>)
  402e1a:	680a      	ldr	r2, [r1, #0]
		serial_recving = serial_recved;
  402e1c:	4b2a      	ldr	r3, [pc, #168]	; (402ec8 <FLEXCOM0_Handler+0xf0>)
  402e1e:	6818      	ldr	r0, [r3, #0]
  402e20:	6008      	str	r0, [r1, #0]
		serial_recved = ptemp;
  402e22:	601a      	str	r2, [r3, #0]
		serial_recved->len = recv_idx;
  402e24:	4b26      	ldr	r3, [pc, #152]	; (402ec0 <FLEXCOM0_Handler+0xe8>)
  402e26:	6819      	ldr	r1, [r3, #0]
  402e28:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400

		recv_idx = 0;
  402e2c:	2200      	movs	r2, #0
  402e2e:	601a      	str	r2, [r3, #0]
		usart_start_rx_timeout(WIFI_SERIAL_PORT);
  402e30:	4820      	ldr	r0, [pc, #128]	; (402eb4 <FLEXCOM0_Handler+0xdc>)
  402e32:	4b26      	ldr	r3, [pc, #152]	; (402ecc <FLEXCOM0_Handler+0xf4>)
  402e34:	4798      	blx	r3
		IoT_DEBUG(IoT_DBG_ON | IoT_DBG_INFO, ("Wifi receive data timeout............\r\n"));
  402e36:	4b26      	ldr	r3, [pc, #152]	; (402ed0 <FLEXCOM0_Handler+0xf8>)
  402e38:	6818      	ldr	r0, [r3, #0]
  402e3a:	b1d0      	cbz	r0, 402e72 <FLEXCOM0_Handler+0x9a>
  402e3c:	2100      	movs	r1, #0
  402e3e:	f04f 32ff 	mov.w	r2, #4294967295
  402e42:	460b      	mov	r3, r1
  402e44:	4c23      	ldr	r4, [pc, #140]	; (402ed4 <FLEXCOM0_Handler+0xfc>)
  402e46:	47a0      	blx	r4
  402e48:	4b23      	ldr	r3, [pc, #140]	; (402ed8 <FLEXCOM0_Handler+0x100>)
  402e4a:	4798      	blx	r3
  402e4c:	4604      	mov	r4, r0
  402e4e:	2000      	movs	r0, #0
  402e50:	4b22      	ldr	r3, [pc, #136]	; (402edc <FLEXCOM0_Handler+0x104>)
  402e52:	4798      	blx	r3
  402e54:	4602      	mov	r2, r0
  402e56:	4822      	ldr	r0, [pc, #136]	; (402ee0 <FLEXCOM0_Handler+0x108>)
  402e58:	4621      	mov	r1, r4
  402e5a:	4c22      	ldr	r4, [pc, #136]	; (402ee4 <FLEXCOM0_Handler+0x10c>)
  402e5c:	47a0      	blx	r4
  402e5e:	4822      	ldr	r0, [pc, #136]	; (402ee8 <FLEXCOM0_Handler+0x110>)
  402e60:	47a0      	blx	r4
  402e62:	4b1b      	ldr	r3, [pc, #108]	; (402ed0 <FLEXCOM0_Handler+0xf8>)
  402e64:	6818      	ldr	r0, [r3, #0]
  402e66:	2100      	movs	r1, #0
  402e68:	460a      	mov	r2, r1
  402e6a:	460b      	mov	r3, r1
  402e6c:	4c1f      	ldr	r4, [pc, #124]	; (402eec <FLEXCOM0_Handler+0x114>)
  402e6e:	47a0      	blx	r4
  402e70:	e002      	b.n	402e78 <FLEXCOM0_Handler+0xa0>
  402e72:	481d      	ldr	r0, [pc, #116]	; (402ee8 <FLEXCOM0_Handler+0x110>)
  402e74:	4b1b      	ldr	r3, [pc, #108]	; (402ee4 <FLEXCOM0_Handler+0x10c>)
  402e76:	4798      	blx	r3
		IoT_xQueueSendFromISR(serial_in_queue, &serial_recved, &xHigherPriorityTaskWoken);
  402e78:	4b1d      	ldr	r3, [pc, #116]	; (402ef0 <FLEXCOM0_Handler+0x118>)
  402e7a:	6818      	ldr	r0, [r3, #0]
  402e7c:	4912      	ldr	r1, [pc, #72]	; (402ec8 <FLEXCOM0_Handler+0xf0>)
  402e7e:	466a      	mov	r2, sp
  402e80:	2300      	movs	r3, #0
  402e82:	4c1c      	ldr	r4, [pc, #112]	; (402ef4 <FLEXCOM0_Handler+0x11c>)
  402e84:	47a0      	blx	r4
		if(xHigherPriorityTaskWoken != pdFALSE) {
  402e86:	9b00      	ldr	r3, [sp, #0]
  402e88:	b18b      	cbz	r3, 402eae <FLEXCOM0_Handler+0xd6>
			IoT_vPortYieldFromISR();
  402e8a:	4b1b      	ldr	r3, [pc, #108]	; (402ef8 <FLEXCOM0_Handler+0x120>)
  402e8c:	4798      	blx	r3
  402e8e:	e00e      	b.n	402eae <FLEXCOM0_Handler+0xd6>
		}
	}
	else if(status & US_CSR_ENDTX) {
  402e90:	f010 0f10 	tst.w	r0, #16
  402e94:	d00b      	beq.n	402eae <FLEXCOM0_Handler+0xd6>
		p_pdc = usart_get_pdc_base(WIFI_SERIAL_PORT);
  402e96:	4c07      	ldr	r4, [pc, #28]	; (402eb4 <FLEXCOM0_Handler+0xdc>)
  402e98:	4620      	mov	r0, r4
  402e9a:	4b18      	ldr	r3, [pc, #96]	; (402efc <FLEXCOM0_Handler+0x124>)
  402e9c:	4798      	blx	r3
		pdc_disable_transfer(p_pdc, PERIPH_PTCR_TXTDIS);
  402e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
  402ea2:	4b17      	ldr	r3, [pc, #92]	; (402f00 <FLEXCOM0_Handler+0x128>)
  402ea4:	4798      	blx	r3
		usart_disable_interrupt(WIFI_SERIAL_PORT, US_IDR_ENDTX);
  402ea6:	4620      	mov	r0, r4
  402ea8:	2110      	movs	r1, #16
  402eaa:	4b16      	ldr	r3, [pc, #88]	; (402f04 <FLEXCOM0_Handler+0x12c>)
  402eac:	4798      	blx	r3
	}
	else {
		/* Do nothing */
	}
}
  402eae:	b002      	add	sp, #8
  402eb0:	bd10      	pop	{r4, pc}
  402eb2:	bf00      	nop
  402eb4:	4000c200 	.word	0x4000c200
  402eb8:	004009f5 	.word	0x004009f5
  402ebc:	00400a15 	.word	0x00400a15
  402ec0:	2001c4e0 	.word	0x2001c4e0
  402ec4:	2001cda4 	.word	0x2001cda4
  402ec8:	2001cda0 	.word	0x2001cda0
  402ecc:	004009f9 	.word	0x004009f9
  402ed0:	2001cdac 	.word	0x2001cdac
  402ed4:	0040150d 	.word	0x0040150d
  402ed8:	004019a5 	.word	0x004019a5
  402edc:	004019e5 	.word	0x004019e5
  402ee0:	004078f4 	.word	0x004078f4
  402ee4:	004045e9 	.word	0x004045e9
  402ee8:	00407948 	.word	0x00407948
  402eec:	00401341 	.word	0x00401341
  402ef0:	2001c3dc 	.word	0x2001c3dc
  402ef4:	00401471 	.word	0x00401471
  402ef8:	00400e95 	.word	0x00400e95
  402efc:	00400a2d 	.word	0x00400a2d
  402f00:	004005d1 	.word	0x004005d1
  402f04:	004009f1 	.word	0x004009f1

00402f08 <config_wifi_fw_otau_url>:
	out_data->len = pkt_len;
	IoT_xQueueSend(serial_out_queue, &out_data, portMAX_DELAY);
}

void config_wifi_fw_otau_url(void)
{
  402f08:	b530      	push	{r4, r5, lr}
  402f0a:	b083      	sub	sp, #12
	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  402f0c:	4b0b      	ldr	r3, [pc, #44]	; (402f3c <config_wifi_fw_otau_url+0x34>)
  402f0e:	9301      	str	r3, [sp, #4]
	uint16_t pkt_len;
	
	pkt_len = form_serial_packet(CMD_REQ_SET_WIFI_FW_OTAU_URL, APP_OTA_URL, strlen(APP_OTA_URL), url_buf);
  402f10:	4c0b      	ldr	r4, [pc, #44]	; (402f40 <config_wifi_fw_otau_url+0x38>)
  402f12:	202a      	movs	r0, #42	; 0x2a
  402f14:	490b      	ldr	r1, [pc, #44]	; (402f44 <config_wifi_fw_otau_url+0x3c>)
  402f16:	223c      	movs	r2, #60	; 0x3c
  402f18:	4623      	mov	r3, r4
  402f1a:	4d0b      	ldr	r5, [pc, #44]	; (402f48 <config_wifi_fw_otau_url+0x40>)
  402f1c:	47a8      	blx	r5
	out_data->buf = url_buf;
  402f1e:	9b01      	ldr	r3, [sp, #4]
  402f20:	601c      	str	r4, [r3, #0]
	out_data->len = pkt_len;
  402f22:	a902      	add	r1, sp, #8
  402f24:	f851 3d04 	ldr.w	r3, [r1, #-4]!
  402f28:	6058      	str	r0, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &out_data, portMAX_DELAY);
  402f2a:	4b08      	ldr	r3, [pc, #32]	; (402f4c <config_wifi_fw_otau_url+0x44>)
  402f2c:	6818      	ldr	r0, [r3, #0]
  402f2e:	f04f 32ff 	mov.w	r2, #4294967295
  402f32:	2300      	movs	r3, #0
  402f34:	4c06      	ldr	r4, [pc, #24]	; (402f50 <config_wifi_fw_otau_url+0x48>)
  402f36:	47a0      	blx	r4
}
  402f38:	b003      	add	sp, #12
  402f3a:	bd30      	pop	{r4, r5, pc}
  402f3c:	2001c538 	.word	0x2001c538
  402f40:	2001cdfc 	.word	0x2001cdfc
  402f44:	00407970 	.word	0x00407970
  402f48:	00402a31 	.word	0x00402a31
  402f4c:	2001cda8 	.word	0x2001cda8
  402f50:	00401341 	.word	0x00401341

00402f54 <parse_serial_packet>:

	}
}

void parse_serial_packet(uint8_t *buf, uint8_t buflen)
{
  402f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f58:	b083      	sub	sp, #12
  402f5a:	4604      	mov	r4, r0
  402f5c:	4688      	mov	r8, r1
	uint8_t *p = buf;
	uint8_t *data = NULL;
	uint8_t resp = CMD_SUCCESS;
	uint8_t len, crc, cmdid;
	
	byte2hexstrstr(buf, buflen, serial_buf_test, 256);
  402f5e:	4ab3      	ldr	r2, [pc, #716]	; (40322c <parse_serial_packet+0x2d8>)
  402f60:	f44f 7380 	mov.w	r3, #256	; 0x100
  402f64:	4db2      	ldr	r5, [pc, #712]	; (403230 <parse_serial_packet+0x2dc>)
  402f66:	47a8      	blx	r5
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial IN(%d): %s\r\n", buflen, serial_buf_test));
  402f68:	4bb2      	ldr	r3, [pc, #712]	; (403234 <parse_serial_packet+0x2e0>)
  402f6a:	6818      	ldr	r0, [r3, #0]
  402f6c:	b330      	cbz	r0, 402fbc <parse_serial_packet+0x68>
  402f6e:	2100      	movs	r1, #0
  402f70:	f04f 32ff 	mov.w	r2, #4294967295
  402f74:	460b      	mov	r3, r1
  402f76:	4db0      	ldr	r5, [pc, #704]	; (403238 <parse_serial_packet+0x2e4>)
  402f78:	47a8      	blx	r5
  402f7a:	4bb0      	ldr	r3, [pc, #704]	; (40323c <parse_serial_packet+0x2e8>)
  402f7c:	4798      	blx	r3
  402f7e:	4605      	mov	r5, r0
  402f80:	2000      	movs	r0, #0
  402f82:	4baf      	ldr	r3, [pc, #700]	; (403240 <parse_serial_packet+0x2ec>)
  402f84:	4798      	blx	r3
  402f86:	4602      	mov	r2, r0
  402f88:	48ae      	ldr	r0, [pc, #696]	; (403244 <parse_serial_packet+0x2f0>)
  402f8a:	4629      	mov	r1, r5
  402f8c:	4dae      	ldr	r5, [pc, #696]	; (403248 <parse_serial_packet+0x2f4>)
  402f8e:	47a8      	blx	r5
  402f90:	48ae      	ldr	r0, [pc, #696]	; (40324c <parse_serial_packet+0x2f8>)
  402f92:	4641      	mov	r1, r8
  402f94:	4aa5      	ldr	r2, [pc, #660]	; (40322c <parse_serial_packet+0x2d8>)
  402f96:	47a8      	blx	r5
  402f98:	4ba6      	ldr	r3, [pc, #664]	; (403234 <parse_serial_packet+0x2e0>)
  402f9a:	6818      	ldr	r0, [r3, #0]
  402f9c:	2100      	movs	r1, #0
  402f9e:	460a      	mov	r2, r1
  402fa0:	460b      	mov	r3, r1
  402fa2:	4dab      	ldr	r5, [pc, #684]	; (403250 <parse_serial_packet+0x2fc>)
  402fa4:	47a8      	blx	r5
	
	while(buflen > 3) {
  402fa6:	f1b8 0f03 	cmp.w	r8, #3
  402faa:	f240 8742 	bls.w	403e32 <parse_serial_packet+0xede>
		if(*p != SERIAL_SOF) {
  402fae:	7821      	ldrb	r1, [r4, #0]
  402fb0:	297e      	cmp	r1, #126	; 0x7e
  402fb2:	d10c      	bne.n	402fce <parse_serial_packet+0x7a>
			return;
		}
	
		len = *(p + 1 + 1) + 3;

		crc = sum8(p, len);
  402fb4:	4da7      	ldr	r5, [pc, #668]	; (403254 <parse_serial_packet+0x300>)
  402fb6:	4fa8      	ldr	r7, [pc, #672]	; (403258 <parse_serial_packet+0x304>)
	IoT_DEBUG(IoT_DBG_ON | IoT_DBG_INFO, ("Receive get temperature command.\r\n"));
	//xSemaphoreGive( startTsensorProcessing );
	//tsensorDataWaitforHandling = true;
		
	Temp_Measure_Command_Send(INIT_SENSATION_MEASUREMENT);
	delay_ms(500);
  402fb8:	4ea8      	ldr	r6, [pc, #672]	; (40325c <parse_serial_packet+0x308>)
  402fba:	e035      	b.n	403028 <parse_serial_packet+0xd4>
	uint8_t *data = NULL;
	uint8_t resp = CMD_SUCCESS;
	uint8_t len, crc, cmdid;
	
	byte2hexstrstr(buf, buflen, serial_buf_test, 256);
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial IN(%d): %s\r\n", buflen, serial_buf_test));
  402fbc:	48a3      	ldr	r0, [pc, #652]	; (40324c <parse_serial_packet+0x2f8>)
  402fbe:	4641      	mov	r1, r8
  402fc0:	4a9a      	ldr	r2, [pc, #616]	; (40322c <parse_serial_packet+0x2d8>)
  402fc2:	4ba1      	ldr	r3, [pc, #644]	; (403248 <parse_serial_packet+0x2f4>)
  402fc4:	4798      	blx	r3
  402fc6:	e7ee      	b.n	402fa6 <parse_serial_packet+0x52>
	
	while(buflen > 3) {
		if(*p != SERIAL_SOF) {
  402fc8:	7821      	ldrb	r1, [r4, #0]
  402fca:	297e      	cmp	r1, #126	; 0x7e
  402fcc:	d02c      	beq.n	403028 <parse_serial_packet+0xd4>
			if (uart_ready == 0)
  402fce:	4ba4      	ldr	r3, [pc, #656]	; (403260 <parse_serial_packet+0x30c>)
  402fd0:	781b      	ldrb	r3, [r3, #0]
  402fd2:	2b00      	cmp	r3, #0
  402fd4:	f000 872d 	beq.w	403e32 <parse_serial_packet+0xede>
				return;
			resp = CMD_INVALID_HEAD;
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("Invalid header received (0x%x).\r\n", *p));
  402fd8:	4b96      	ldr	r3, [pc, #600]	; (403234 <parse_serial_packet+0x2e0>)
  402fda:	6818      	ldr	r0, [r3, #0]
  402fdc:	b1d8      	cbz	r0, 403016 <parse_serial_packet+0xc2>
  402fde:	2100      	movs	r1, #0
  402fe0:	f04f 32ff 	mov.w	r2, #4294967295
  402fe4:	460b      	mov	r3, r1
  402fe6:	4d94      	ldr	r5, [pc, #592]	; (403238 <parse_serial_packet+0x2e4>)
  402fe8:	47a8      	blx	r5
  402fea:	4b94      	ldr	r3, [pc, #592]	; (40323c <parse_serial_packet+0x2e8>)
  402fec:	4798      	blx	r3
  402fee:	4605      	mov	r5, r0
  402ff0:	2000      	movs	r0, #0
  402ff2:	4b93      	ldr	r3, [pc, #588]	; (403240 <parse_serial_packet+0x2ec>)
  402ff4:	4798      	blx	r3
  402ff6:	4602      	mov	r2, r0
  402ff8:	4892      	ldr	r0, [pc, #584]	; (403244 <parse_serial_packet+0x2f0>)
  402ffa:	4629      	mov	r1, r5
  402ffc:	4d92      	ldr	r5, [pc, #584]	; (403248 <parse_serial_packet+0x2f4>)
  402ffe:	47a8      	blx	r5
  403000:	4898      	ldr	r0, [pc, #608]	; (403264 <parse_serial_packet+0x310>)
  403002:	7821      	ldrb	r1, [r4, #0]
  403004:	47a8      	blx	r5
  403006:	4b8b      	ldr	r3, [pc, #556]	; (403234 <parse_serial_packet+0x2e0>)
  403008:	6818      	ldr	r0, [r3, #0]
  40300a:	2100      	movs	r1, #0
  40300c:	460a      	mov	r2, r1
  40300e:	460b      	mov	r3, r1
  403010:	4c8f      	ldr	r4, [pc, #572]	; (403250 <parse_serial_packet+0x2fc>)
  403012:	47a0      	blx	r4
  403014:	e002      	b.n	40301c <parse_serial_packet+0xc8>
  403016:	4893      	ldr	r0, [pc, #588]	; (403264 <parse_serial_packet+0x310>)
  403018:	4b8b      	ldr	r3, [pc, #556]	; (403248 <parse_serial_packet+0x2f4>)
  40301a:	4798      	blx	r3
			serial_resp_out(CMD_PACKET_ERROR_RESP, resp);
  40301c:	20a0      	movs	r0, #160	; 0xa0
  40301e:	2101      	movs	r1, #1
  403020:	4b91      	ldr	r3, [pc, #580]	; (403268 <parse_serial_packet+0x314>)
  403022:	4798      	blx	r3
			return;
  403024:	f000 bf05 	b.w	403e32 <parse_serial_packet+0xede>
		}
	
		len = *(p + 1 + 1) + 3;
  403028:	f894 9002 	ldrb.w	r9, [r4, #2]
  40302c:	f109 0903 	add.w	r9, r9, #3
  403030:	fa5f f989 	uxtb.w	r9, r9

		crc = sum8(p, len);
  403034:	4620      	mov	r0, r4
  403036:	4649      	mov	r1, r9
  403038:	47a8      	blx	r5
  40303a:	4682      	mov	sl, r0

		if(*(p + len) != crc) {
  40303c:	eb04 0b09 	add.w	fp, r4, r9
  403040:	f814 1009 	ldrb.w	r1, [r4, r9]
  403044:	4281      	cmp	r1, r0
  403046:	d02a      	beq.n	40309e <parse_serial_packet+0x14a>
			resp = CMD_CRC_ERROR;
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("Invalid CRC, Received CRC(0x%x), Calculated CRC(0x%x).\r\n", *(p + len), crc));
  403048:	4b7a      	ldr	r3, [pc, #488]	; (403234 <parse_serial_packet+0x2e0>)
  40304a:	6818      	ldr	r0, [r3, #0]
  40304c:	b1e8      	cbz	r0, 40308a <parse_serial_packet+0x136>
  40304e:	2100      	movs	r1, #0
  403050:	f04f 32ff 	mov.w	r2, #4294967295
  403054:	460b      	mov	r3, r1
  403056:	4c78      	ldr	r4, [pc, #480]	; (403238 <parse_serial_packet+0x2e4>)
  403058:	47a0      	blx	r4
  40305a:	4b78      	ldr	r3, [pc, #480]	; (40323c <parse_serial_packet+0x2e8>)
  40305c:	4798      	blx	r3
  40305e:	4604      	mov	r4, r0
  403060:	2000      	movs	r0, #0
  403062:	4b77      	ldr	r3, [pc, #476]	; (403240 <parse_serial_packet+0x2ec>)
  403064:	4798      	blx	r3
  403066:	4602      	mov	r2, r0
  403068:	4876      	ldr	r0, [pc, #472]	; (403244 <parse_serial_packet+0x2f0>)
  40306a:	4621      	mov	r1, r4
  40306c:	4c76      	ldr	r4, [pc, #472]	; (403248 <parse_serial_packet+0x2f4>)
  40306e:	47a0      	blx	r4
  403070:	487e      	ldr	r0, [pc, #504]	; (40326c <parse_serial_packet+0x318>)
  403072:	f89b 1000 	ldrb.w	r1, [fp]
  403076:	4652      	mov	r2, sl
  403078:	47a0      	blx	r4
  40307a:	4b6e      	ldr	r3, [pc, #440]	; (403234 <parse_serial_packet+0x2e0>)
  40307c:	6818      	ldr	r0, [r3, #0]
  40307e:	2100      	movs	r1, #0
  403080:	460a      	mov	r2, r1
  403082:	460b      	mov	r3, r1
  403084:	4c72      	ldr	r4, [pc, #456]	; (403250 <parse_serial_packet+0x2fc>)
  403086:	47a0      	blx	r4
  403088:	e003      	b.n	403092 <parse_serial_packet+0x13e>
  40308a:	4878      	ldr	r0, [pc, #480]	; (40326c <parse_serial_packet+0x318>)
  40308c:	4652      	mov	r2, sl
  40308e:	4b6e      	ldr	r3, [pc, #440]	; (403248 <parse_serial_packet+0x2f4>)
  403090:	4798      	blx	r3
			serial_resp_out(CMD_PACKET_ERROR_RESP, CMD_CRC_ERROR);
  403092:	20a0      	movs	r0, #160	; 0xa0
  403094:	2102      	movs	r1, #2
  403096:	4b74      	ldr	r3, [pc, #464]	; (403268 <parse_serial_packet+0x314>)
  403098:	4798      	blx	r3
			return;
  40309a:	f000 beca 	b.w	403e32 <parse_serial_packet+0xede>
		}
		cmdid = *(p + 3);
  40309e:	f894 9003 	ldrb.w	r9, [r4, #3]
	{
		.cmd_index = 0,
		.value = 0
	};
	
	switch(cmdid)
  4030a2:	f1b9 0fa8 	cmp.w	r9, #168	; 0xa8
  4030a6:	f000 841e 	beq.w	4038e6 <parse_serial_packet+0x992>
  4030aa:	d838      	bhi.n	40311e <parse_serial_packet+0x1ca>
  4030ac:	f1b9 0f82 	cmp.w	r9, #130	; 0x82
  4030b0:	f000 8213 	beq.w	4034da <parse_serial_packet+0x586>
  4030b4:	d818      	bhi.n	4030e8 <parse_serial_packet+0x194>
  4030b6:	f1b9 0f0a 	cmp.w	r9, #10
  4030ba:	f000 8095 	beq.w	4031e8 <parse_serial_packet+0x294>
  4030be:	d809      	bhi.n	4030d4 <parse_serial_packet+0x180>
  4030c0:	f1b9 0f03 	cmp.w	r9, #3
  4030c4:	f000 8165 	beq.w	403392 <parse_serial_packet+0x43e>
  4030c8:	f1b9 0f08 	cmp.w	r9, #8
  4030cc:	f000 8138 	beq.w	403340 <parse_serial_packet+0x3ec>
  4030d0:	f000 be7d 	b.w	403dce <parse_serial_packet+0xe7a>
  4030d4:	f1b9 0f0b 	cmp.w	r9, #11
  4030d8:	f000 810b 	beq.w	4032f2 <parse_serial_packet+0x39e>
  4030dc:	f1b9 0f81 	cmp.w	r9, #129	; 0x81
  4030e0:	f000 8549 	beq.w	403b76 <parse_serial_packet+0xc22>
  4030e4:	f000 be73 	b.w	403dce <parse_serial_packet+0xe7a>
  4030e8:	f1b9 0fa0 	cmp.w	r9, #160	; 0xa0
  4030ec:	f000 8695 	beq.w	403e1a <parse_serial_packet+0xec6>
  4030f0:	d809      	bhi.n	403106 <parse_serial_packet+0x1b2>
  4030f2:	f1b9 0f84 	cmp.w	r9, #132	; 0x84
  4030f6:	f000 85d2 	beq.w	403c9e <parse_serial_packet+0xd4a>
  4030fa:	f1b9 0f89 	cmp.w	r9, #137	; 0x89
  4030fe:	f000 81c5 	beq.w	40348c <parse_serial_packet+0x538>
  403102:	f000 be64 	b.w	403dce <parse_serial_packet+0xe7a>
  403106:	f1b9 0fa6 	cmp.w	r9, #166	; 0xa6
  40310a:	f000 8245 	beq.w	403598 <parse_serial_packet+0x644>
  40310e:	f200 8320 	bhi.w	403752 <parse_serial_packet+0x7fe>
  403112:	f1b9 0fa1 	cmp.w	r9, #161	; 0xa1
  403116:	f000 8167 	beq.w	4033e8 <parse_serial_packet+0x494>
  40311a:	f000 be58 	b.w	403dce <parse_serial_packet+0xe7a>
  40311e:	f1b9 0fcd 	cmp.w	r9, #205	; 0xcd
  403122:	f000 862f 	beq.w	403d84 <parse_serial_packet+0xe30>
  403126:	d818      	bhi.n	40315a <parse_serial_packet+0x206>
  403128:	f1b9 0fca 	cmp.w	r9, #202	; 0xca
  40312c:	f000 8548 	beq.w	403bc0 <parse_serial_packet+0xc6c>
  403130:	d809      	bhi.n	403146 <parse_serial_packet+0x1f2>
  403132:	f1b9 0fa9 	cmp.w	r9, #169	; 0xa9
  403136:	f000 8473 	beq.w	403a20 <parse_serial_packet+0xacc>
  40313a:	f1b9 0faa 	cmp.w	r9, #170	; 0xaa
  40313e:	f000 8496 	beq.w	403a6e <parse_serial_packet+0xb1a>
  403142:	f000 be44 	b.w	403dce <parse_serial_packet+0xe7a>
  403146:	f1b9 0fcb 	cmp.w	r9, #203	; 0xcb
  40314a:	f000 855e 	beq.w	403c0a <parse_serial_packet+0xcb6>
  40314e:	f1b9 0fcc 	cmp.w	r9, #204	; 0xcc
  403152:	f000 857f 	beq.w	403c54 <parse_serial_packet+0xd00>
  403156:	f000 be3a 	b.w	403dce <parse_serial_packet+0xe7a>
  40315a:	f1b9 0ffa 	cmp.w	r9, #250	; 0xfa
  40315e:	f000 816a 	beq.w	403436 <parse_serial_packet+0x4e2>
  403162:	d808      	bhi.n	403176 <parse_serial_packet+0x222>
  403164:	f1b9 0ff8 	cmp.w	r9, #248	; 0xf8
  403168:	f000 84e0 	beq.w	403b2c <parse_serial_packet+0xbd8>
  40316c:	f1b9 0ff9 	cmp.w	r9, #249	; 0xf9
  403170:	d00e      	beq.n	403190 <parse_serial_packet+0x23c>
  403172:	f000 be2c 	b.w	403dce <parse_serial_packet+0xe7a>
  403176:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
  40317a:	f000 8280 	beq.w	40367e <parse_serial_packet+0x72a>
  40317e:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
  403182:	f000 8257 	beq.w	403634 <parse_serial_packet+0x6e0>
  403186:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
  40318a:	f040 8620 	bne.w	403dce <parse_serial_packet+0xe7a>
  40318e:	e2ab      	b.n	4036e8 <parse_serial_packet+0x794>
	{
		case CMD_WIFI_MODULE_READY:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wi-Fi Module Ready!\r\n"));
  403190:	4b28      	ldr	r3, [pc, #160]	; (403234 <parse_serial_packet+0x2e0>)
  403192:	6818      	ldr	r0, [r3, #0]
  403194:	b1e8      	cbz	r0, 4031d2 <parse_serial_packet+0x27e>
  403196:	2100      	movs	r1, #0
  403198:	f04f 32ff 	mov.w	r2, #4294967295
  40319c:	460b      	mov	r3, r1
  40319e:	f8df c098 	ldr.w	ip, [pc, #152]	; 403238 <parse_serial_packet+0x2e4>
  4031a2:	47e0      	blx	ip
  4031a4:	4b25      	ldr	r3, [pc, #148]	; (40323c <parse_serial_packet+0x2e8>)
  4031a6:	4798      	blx	r3
  4031a8:	4681      	mov	r9, r0
  4031aa:	2000      	movs	r0, #0
  4031ac:	4b24      	ldr	r3, [pc, #144]	; (403240 <parse_serial_packet+0x2ec>)
  4031ae:	4798      	blx	r3
  4031b0:	4602      	mov	r2, r0
  4031b2:	4824      	ldr	r0, [pc, #144]	; (403244 <parse_serial_packet+0x2f0>)
  4031b4:	4649      	mov	r1, r9
  4031b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 403248 <parse_serial_packet+0x2f4>
  4031ba:	47c8      	blx	r9
  4031bc:	482c      	ldr	r0, [pc, #176]	; (403270 <parse_serial_packet+0x31c>)
  4031be:	47c8      	blx	r9
  4031c0:	4b1c      	ldr	r3, [pc, #112]	; (403234 <parse_serial_packet+0x2e0>)
  4031c2:	6818      	ldr	r0, [r3, #0]
  4031c4:	2100      	movs	r1, #0
  4031c6:	460a      	mov	r2, r1
  4031c8:	460b      	mov	r3, r1
  4031ca:	f8df c084 	ldr.w	ip, [pc, #132]	; 403250 <parse_serial_packet+0x2fc>
  4031ce:	47e0      	blx	ip
  4031d0:	e002      	b.n	4031d8 <parse_serial_packet+0x284>
  4031d2:	4827      	ldr	r0, [pc, #156]	; (403270 <parse_serial_packet+0x31c>)
  4031d4:	4b1c      	ldr	r3, [pc, #112]	; (403248 <parse_serial_packet+0x2f4>)
  4031d6:	4798      	blx	r3
			uart_ready = 1;
  4031d8:	2201      	movs	r2, #1
  4031da:	4b21      	ldr	r3, [pc, #132]	; (403260 <parse_serial_packet+0x30c>)
  4031dc:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_ON;
  4031de:	2203      	movs	r2, #3
  4031e0:	4b24      	ldr	r3, [pc, #144]	; (403274 <parse_serial_packet+0x320>)
  4031e2:	701a      	strb	r2, [r3, #0]
  4031e4:	f000 be19 	b.w	403e1a <parse_serial_packet+0xec6>
}
extern xSemaphoreHandle startTsensorProcessing;
extern bool tsensorDataWaitforHandling;
static void startTemperature(void)
{
	IoT_DEBUG(IoT_DBG_ON | IoT_DBG_INFO, ("Receive get temperature command.\r\n"));
  4031e8:	4b12      	ldr	r3, [pc, #72]	; (403234 <parse_serial_packet+0x2e0>)
  4031ea:	6818      	ldr	r0, [r3, #0]
  4031ec:	2800      	cmp	r0, #0
  4031ee:	d045      	beq.n	40327c <parse_serial_packet+0x328>
  4031f0:	2100      	movs	r1, #0
  4031f2:	f04f 32ff 	mov.w	r2, #4294967295
  4031f6:	460b      	mov	r3, r1
  4031f8:	f8df c03c 	ldr.w	ip, [pc, #60]	; 403238 <parse_serial_packet+0x2e4>
  4031fc:	47e0      	blx	ip
  4031fe:	4b0f      	ldr	r3, [pc, #60]	; (40323c <parse_serial_packet+0x2e8>)
  403200:	4798      	blx	r3
  403202:	4681      	mov	r9, r0
  403204:	2000      	movs	r0, #0
  403206:	4b0e      	ldr	r3, [pc, #56]	; (403240 <parse_serial_packet+0x2ec>)
  403208:	4798      	blx	r3
  40320a:	4602      	mov	r2, r0
  40320c:	480d      	ldr	r0, [pc, #52]	; (403244 <parse_serial_packet+0x2f0>)
  40320e:	4649      	mov	r1, r9
  403210:	f8df 9034 	ldr.w	r9, [pc, #52]	; 403248 <parse_serial_packet+0x2f4>
  403214:	47c8      	blx	r9
  403216:	4818      	ldr	r0, [pc, #96]	; (403278 <parse_serial_packet+0x324>)
  403218:	47c8      	blx	r9
  40321a:	4b06      	ldr	r3, [pc, #24]	; (403234 <parse_serial_packet+0x2e0>)
  40321c:	6818      	ldr	r0, [r3, #0]
  40321e:	2100      	movs	r1, #0
  403220:	460a      	mov	r2, r1
  403222:	460b      	mov	r3, r1
  403224:	f8df c028 	ldr.w	ip, [pc, #40]	; 403250 <parse_serial_packet+0x2fc>
  403228:	47e0      	blx	ip
  40322a:	e02a      	b.n	403282 <parse_serial_packet+0x32e>
  40322c:	2001ce7c 	.word	0x2001ce7c
  403230:	00402a71 	.word	0x00402a71
  403234:	2001cdac 	.word	0x2001cdac
  403238:	0040150d 	.word	0x0040150d
  40323c:	004019a5 	.word	0x004019a5
  403240:	004019e5 	.word	0x004019e5
  403244:	004078f4 	.word	0x004078f4
  403248:	004045e9 	.word	0x004045e9
  40324c:	004079b0 	.word	0x004079b0
  403250:	00401341 	.word	0x00401341
  403254:	0040293d 	.word	0x0040293d
  403258:	400e0e00 	.word	0x400e0e00
  40325c:	00416493 	.word	0x00416493
  403260:	2001c550 	.word	0x2001c550
  403264:	004079c4 	.word	0x004079c4
  403268:	004029e5 	.word	0x004029e5
  40326c:	004079e8 	.word	0x004079e8
  403270:	00407a24 	.word	0x00407a24
  403274:	20000020 	.word	0x20000020
  403278:	00407a3c 	.word	0x00407a3c
  40327c:	48ad      	ldr	r0, [pc, #692]	; (403534 <parse_serial_packet+0x5e0>)
  40327e:	4bae      	ldr	r3, [pc, #696]	; (403538 <parse_serial_packet+0x5e4>)
  403280:	4798      	blx	r3
	//xSemaphoreGive( startTsensorProcessing );
	//tsensorDataWaitforHandling = true;
		
	Temp_Measure_Command_Send(INIT_SENSATION_MEASUREMENT);
  403282:	2001      	movs	r0, #1
  403284:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 403580 <parse_serial_packet+0x62c>
  403288:	47d0      	blx	sl
	delay_ms(500);
  40328a:	4630      	mov	r0, r6
  40328c:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 403584 <parse_serial_packet+0x630>
  403290:	47c8      	blx	r9
	Temp_Measure_Command_Send(SENSATION_MEASUREMENT_START);
  403292:	2002      	movs	r0, #2
  403294:	47d0      	blx	sl
	delay_ms(500);
  403296:	4630      	mov	r0, r6
  403298:	47c8      	blx	r9
	Temp_Measure_Get_Air_Condition_Info(0x00, 50);
  40329a:	2000      	movs	r0, #0
  40329c:	2132      	movs	r1, #50	; 0x32
  40329e:	4ba7      	ldr	r3, [pc, #668]	; (40353c <parse_serial_packet+0x5e8>)
  4032a0:	4798      	blx	r3
	static uint8_t resp_buf[8];
	uint8_t *p = &resp_buf[0];
	static serial_out_pk_t resp_send_packet;
	static serial_out_pk_t *resp_out_data = &resp_send_packet;

	*p++ = SERIAL_SOF;
  4032a2:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 403588 <parse_serial_packet+0x634>
  4032a6:	237e      	movs	r3, #126	; 0x7e
  4032a8:	f889 3000 	strb.w	r3, [r9]
	*p++ = ENCRYPT_MODE;
  4032ac:	f04f 0a00 	mov.w	sl, #0
  4032b0:	f889 a001 	strb.w	sl, [r9, #1]
	*p++ = 2;
  4032b4:	2302      	movs	r3, #2
  4032b6:	f889 3002 	strb.w	r3, [r9, #2]
	*p++ = CUSTOMIZE_CMD_DEV_CTRL_GET_TEMP_RSP;
  4032ba:	238a      	movs	r3, #138	; 0x8a
  4032bc:	f889 3003 	strb.w	r3, [r9, #3]
	*p++ = temperature;
  4032c0:	2364      	movs	r3, #100	; 0x64
  4032c2:	f889 3004 	strb.w	r3, [r9, #4]
	*p = sum8(&resp_buf[0], p - &resp_buf[0]);
  4032c6:	4648      	mov	r0, r9
  4032c8:	2105      	movs	r1, #5
  4032ca:	47a8      	blx	r5
  4032cc:	f889 0005 	strb.w	r0, [r9, #5]
	p++;
	resp_out_data->buf = resp_buf;
  4032d0:	499b      	ldr	r1, [pc, #620]	; (403540 <parse_serial_packet+0x5ec>)
  4032d2:	680b      	ldr	r3, [r1, #0]
  4032d4:	f8c3 9000 	str.w	r9, [r3]
	resp_out_data->len = p - resp_buf;
  4032d8:	680b      	ldr	r3, [r1, #0]
  4032da:	2206      	movs	r2, #6
  4032dc:	605a      	str	r2, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &resp_out_data, 1000);
  4032de:	4b99      	ldr	r3, [pc, #612]	; (403544 <parse_serial_packet+0x5f0>)
  4032e0:	6818      	ldr	r0, [r3, #0]
  4032e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4032e6:	4653      	mov	r3, sl
  4032e8:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 40358c <parse_serial_packet+0x638>
  4032ec:	47e0      	blx	ip
  4032ee:	f000 bd94 	b.w	403e1a <parse_serial_packet+0xec6>
	delay_ms(500);
	Temp_Measure_Get_Air_Condition_Info(0x00, 50);
}
static void startPicture(void)
{
	IoT_DEBUG(IoT_DBG_ON | IoT_DBG_INFO, ("Receive get snapshot command.\r\n"));
  4032f2:	4b95      	ldr	r3, [pc, #596]	; (403548 <parse_serial_packet+0x5f4>)
  4032f4:	6818      	ldr	r0, [r3, #0]
  4032f6:	b1f0      	cbz	r0, 403336 <parse_serial_packet+0x3e2>
  4032f8:	2100      	movs	r1, #0
  4032fa:	f04f 32ff 	mov.w	r2, #4294967295
  4032fe:	460b      	mov	r3, r1
  403300:	f8df c28c 	ldr.w	ip, [pc, #652]	; 403590 <parse_serial_packet+0x63c>
  403304:	47e0      	blx	ip
  403306:	4b91      	ldr	r3, [pc, #580]	; (40354c <parse_serial_packet+0x5f8>)
  403308:	4798      	blx	r3
  40330a:	4681      	mov	r9, r0
  40330c:	2000      	movs	r0, #0
  40330e:	4b90      	ldr	r3, [pc, #576]	; (403550 <parse_serial_packet+0x5fc>)
  403310:	4798      	blx	r3
  403312:	4602      	mov	r2, r0
  403314:	488f      	ldr	r0, [pc, #572]	; (403554 <parse_serial_packet+0x600>)
  403316:	4649      	mov	r1, r9
  403318:	f8df 921c 	ldr.w	r9, [pc, #540]	; 403538 <parse_serial_packet+0x5e4>
  40331c:	47c8      	blx	r9
  40331e:	488e      	ldr	r0, [pc, #568]	; (403558 <parse_serial_packet+0x604>)
  403320:	47c8      	blx	r9
  403322:	4b89      	ldr	r3, [pc, #548]	; (403548 <parse_serial_packet+0x5f4>)
  403324:	6818      	ldr	r0, [r3, #0]
  403326:	2100      	movs	r1, #0
  403328:	460a      	mov	r2, r1
  40332a:	460b      	mov	r3, r1
  40332c:	f8df c25c 	ldr.w	ip, [pc, #604]	; 40358c <parse_serial_packet+0x638>
  403330:	47e0      	blx	ip
  403332:	f000 bd72 	b.w	403e1a <parse_serial_packet+0xec6>
  403336:	4888      	ldr	r0, [pc, #544]	; (403558 <parse_serial_packet+0x604>)
  403338:	4b7f      	ldr	r3, [pc, #508]	; (403538 <parse_serial_packet+0x5e4>)
  40333a:	4798      	blx	r3
  40333c:	f000 bd6d 	b.w	403e1a <parse_serial_packet+0xec6>
	static uint8_t resp_buf[256];
	uint8_t *p = &resp_buf[0];
	static serial_out_pk_t resp_send_packet;
	static serial_out_pk_t *resp_out_data = &resp_send_packet;

	*p++ = SERIAL_SOF;
  403340:	f8df 9250 	ldr.w	r9, [pc, #592]	; 403594 <parse_serial_packet+0x640>
  403344:	237e      	movs	r3, #126	; 0x7e
  403346:	f889 3000 	strb.w	r3, [r9]
	*p++ = ENCRYPT_MODE;
  40334a:	f04f 0a00 	mov.w	sl, #0
  40334e:	f889 a001 	strb.w	sl, [r9, #1]
	*p++ = 1 + datalen;
  403352:	2303      	movs	r3, #3
  403354:	f889 3002 	strb.w	r3, [r9, #2]
	*p++ = resp_id;
  403358:	2388      	movs	r3, #136	; 0x88
  40335a:	f889 3003 	strb.w	r3, [r9, #3]

	if((data != NULL) && (datalen > 0)) {
		memcpy(p, data, datalen);
  40335e:	4b7f      	ldr	r3, [pc, #508]	; (40355c <parse_serial_packet+0x608>)
  403360:	881b      	ldrh	r3, [r3, #0]
  403362:	f8a9 3004 	strh.w	r3, [r9, #4]
		p = p + datalen;
	}
	*p = sum8(&resp_buf[0], p - resp_buf);
  403366:	4648      	mov	r0, r9
  403368:	2106      	movs	r1, #6
  40336a:	47a8      	blx	r5
  40336c:	f889 0006 	strb.w	r0, [r9, #6]
	p++;
	resp_out_data->buf = resp_buf;
  403370:	497b      	ldr	r1, [pc, #492]	; (403560 <parse_serial_packet+0x60c>)
  403372:	680b      	ldr	r3, [r1, #0]
  403374:	f8c3 9000 	str.w	r9, [r3]
	resp_out_data->len = p - resp_buf;
  403378:	680b      	ldr	r3, [r1, #0]
  40337a:	2207      	movs	r2, #7
  40337c:	605a      	str	r2, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &resp_out_data, 1000);
  40337e:	4b71      	ldr	r3, [pc, #452]	; (403544 <parse_serial_packet+0x5f0>)
  403380:	6818      	ldr	r0, [r3, #0]
  403382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403386:	4653      	mov	r3, sl
  403388:	f8df c200 	ldr.w	ip, [pc, #512]	; 40358c <parse_serial_packet+0x638>
  40338c:	47e0      	blx	ip
  40338e:	f000 bd44 	b.w	403e1a <parse_serial_packet+0xec6>
		break;
		
		case CUSTOMIZE_CMD_STATUS_REPORT:
		{
			uint8_t states = *data;
			if(states == 0) {
  403392:	7923      	ldrb	r3, [r4, #4]
  403394:	2b03      	cmp	r3, #3
  403396:	f040 8540 	bne.w	403e1a <parse_serial_packet+0xec6>
			}
			else if (states == 2) {
				IoT_DEBUG(IoT_DBG_INFO, ("Wifi module connect to wifi router.\r\n"));
			}
			else if(states == 3) {
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wifi module connect to JD server.\r\n"));
  40339a:	4b6b      	ldr	r3, [pc, #428]	; (403548 <parse_serial_packet+0x5f4>)
  40339c:	6818      	ldr	r0, [r3, #0]
  40339e:	b1f0      	cbz	r0, 4033de <parse_serial_packet+0x48a>
  4033a0:	2100      	movs	r1, #0
  4033a2:	f04f 32ff 	mov.w	r2, #4294967295
  4033a6:	460b      	mov	r3, r1
  4033a8:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 403590 <parse_serial_packet+0x63c>
  4033ac:	47e0      	blx	ip
  4033ae:	4b67      	ldr	r3, [pc, #412]	; (40354c <parse_serial_packet+0x5f8>)
  4033b0:	4798      	blx	r3
  4033b2:	4681      	mov	r9, r0
  4033b4:	2000      	movs	r0, #0
  4033b6:	4b66      	ldr	r3, [pc, #408]	; (403550 <parse_serial_packet+0x5fc>)
  4033b8:	4798      	blx	r3
  4033ba:	4602      	mov	r2, r0
  4033bc:	4865      	ldr	r0, [pc, #404]	; (403554 <parse_serial_packet+0x600>)
  4033be:	4649      	mov	r1, r9
  4033c0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 403538 <parse_serial_packet+0x5e4>
  4033c4:	47c8      	blx	r9
  4033c6:	4867      	ldr	r0, [pc, #412]	; (403564 <parse_serial_packet+0x610>)
  4033c8:	47c8      	blx	r9
  4033ca:	4b5f      	ldr	r3, [pc, #380]	; (403548 <parse_serial_packet+0x5f4>)
  4033cc:	6818      	ldr	r0, [r3, #0]
  4033ce:	2100      	movs	r1, #0
  4033d0:	460a      	mov	r2, r1
  4033d2:	460b      	mov	r3, r1
  4033d4:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 40358c <parse_serial_packet+0x638>
  4033d8:	47e0      	blx	ip
  4033da:	f000 bd1e 	b.w	403e1a <parse_serial_packet+0xec6>
  4033de:	4861      	ldr	r0, [pc, #388]	; (403564 <parse_serial_packet+0x610>)
  4033e0:	4b55      	ldr	r3, [pc, #340]	; (403538 <parse_serial_packet+0x5e4>)
  4033e2:	4798      	blx	r3
  4033e4:	f000 bd19 	b.w	403e1a <parse_serial_packet+0xec6>
			//sniffer_mode = 0;
			//LED_Off(LED0);
			//led_state = 0;

			//led_states_upload(led_state);
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Connect to Remote Server OK.\r\n"));
  4033e8:	4b57      	ldr	r3, [pc, #348]	; (403548 <parse_serial_packet+0x5f4>)
  4033ea:	6818      	ldr	r0, [r3, #0]
  4033ec:	b1f0      	cbz	r0, 40342c <parse_serial_packet+0x4d8>
  4033ee:	2100      	movs	r1, #0
  4033f0:	f04f 32ff 	mov.w	r2, #4294967295
  4033f4:	460b      	mov	r3, r1
  4033f6:	f8df c198 	ldr.w	ip, [pc, #408]	; 403590 <parse_serial_packet+0x63c>
  4033fa:	47e0      	blx	ip
  4033fc:	4b53      	ldr	r3, [pc, #332]	; (40354c <parse_serial_packet+0x5f8>)
  4033fe:	4798      	blx	r3
  403400:	4681      	mov	r9, r0
  403402:	2000      	movs	r0, #0
  403404:	4b52      	ldr	r3, [pc, #328]	; (403550 <parse_serial_packet+0x5fc>)
  403406:	4798      	blx	r3
  403408:	4602      	mov	r2, r0
  40340a:	4852      	ldr	r0, [pc, #328]	; (403554 <parse_serial_packet+0x600>)
  40340c:	4649      	mov	r1, r9
  40340e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 403538 <parse_serial_packet+0x5e4>
  403412:	47c8      	blx	r9
  403414:	4854      	ldr	r0, [pc, #336]	; (403568 <parse_serial_packet+0x614>)
  403416:	47c8      	blx	r9
  403418:	4b4b      	ldr	r3, [pc, #300]	; (403548 <parse_serial_packet+0x5f4>)
  40341a:	6818      	ldr	r0, [r3, #0]
  40341c:	2100      	movs	r1, #0
  40341e:	460a      	mov	r2, r1
  403420:	460b      	mov	r3, r1
  403422:	f8df c168 	ldr.w	ip, [pc, #360]	; 40358c <parse_serial_packet+0x638>
  403426:	47e0      	blx	ip
  403428:	f000 bcf7 	b.w	403e1a <parse_serial_packet+0xec6>
  40342c:	484e      	ldr	r0, [pc, #312]	; (403568 <parse_serial_packet+0x614>)
  40342e:	4b42      	ldr	r3, [pc, #264]	; (403538 <parse_serial_packet+0x5e4>)
  403430:	4798      	blx	r3
  403432:	f000 bcf2 	b.w	403e1a <parse_serial_packet+0xec6>
		break;
		
		case CMD_CONNECTION_BEATHEART:
			uart_beatheart++;
  403436:	4a4d      	ldr	r2, [pc, #308]	; (40356c <parse_serial_packet+0x618>)
  403438:	6813      	ldr	r3, [r2, #0]
  40343a:	3301      	adds	r3, #1
  40343c:	6013      	str	r3, [r2, #0]
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Connection beatheart.\r\n"));
  40343e:	4b42      	ldr	r3, [pc, #264]	; (403548 <parse_serial_packet+0x5f4>)
  403440:	6818      	ldr	r0, [r3, #0]
  403442:	b1f0      	cbz	r0, 403482 <parse_serial_packet+0x52e>
  403444:	2100      	movs	r1, #0
  403446:	f04f 32ff 	mov.w	r2, #4294967295
  40344a:	460b      	mov	r3, r1
  40344c:	f8df c140 	ldr.w	ip, [pc, #320]	; 403590 <parse_serial_packet+0x63c>
  403450:	47e0      	blx	ip
  403452:	4b3e      	ldr	r3, [pc, #248]	; (40354c <parse_serial_packet+0x5f8>)
  403454:	4798      	blx	r3
  403456:	4681      	mov	r9, r0
  403458:	2000      	movs	r0, #0
  40345a:	4b3d      	ldr	r3, [pc, #244]	; (403550 <parse_serial_packet+0x5fc>)
  40345c:	4798      	blx	r3
  40345e:	4602      	mov	r2, r0
  403460:	483c      	ldr	r0, [pc, #240]	; (403554 <parse_serial_packet+0x600>)
  403462:	4649      	mov	r1, r9
  403464:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 403538 <parse_serial_packet+0x5e4>
  403468:	47c8      	blx	r9
  40346a:	4841      	ldr	r0, [pc, #260]	; (403570 <parse_serial_packet+0x61c>)
  40346c:	47c8      	blx	r9
  40346e:	4b36      	ldr	r3, [pc, #216]	; (403548 <parse_serial_packet+0x5f4>)
  403470:	6818      	ldr	r0, [r3, #0]
  403472:	2100      	movs	r1, #0
  403474:	460a      	mov	r2, r1
  403476:	460b      	mov	r3, r1
  403478:	f8df c110 	ldr.w	ip, [pc, #272]	; 40358c <parse_serial_packet+0x638>
  40347c:	47e0      	blx	ip
  40347e:	f000 bccc 	b.w	403e1a <parse_serial_packet+0xec6>
  403482:	483b      	ldr	r0, [pc, #236]	; (403570 <parse_serial_packet+0x61c>)
  403484:	4b2c      	ldr	r3, [pc, #176]	; (403538 <parse_serial_packet+0x5e4>)
  403486:	4798      	blx	r3
  403488:	f000 bcc7 	b.w	403e1a <parse_serial_packet+0xec6>
		break;
		
		case CUSTOMIZE_CMD_DATA_UPLOAD_RESP:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Update Data OK.\r\n"));
  40348c:	4b2e      	ldr	r3, [pc, #184]	; (403548 <parse_serial_packet+0x5f4>)
  40348e:	6818      	ldr	r0, [r3, #0]
  403490:	b1f0      	cbz	r0, 4034d0 <parse_serial_packet+0x57c>
  403492:	2100      	movs	r1, #0
  403494:	f04f 32ff 	mov.w	r2, #4294967295
  403498:	460b      	mov	r3, r1
  40349a:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 403590 <parse_serial_packet+0x63c>
  40349e:	47e0      	blx	ip
  4034a0:	4b2a      	ldr	r3, [pc, #168]	; (40354c <parse_serial_packet+0x5f8>)
  4034a2:	4798      	blx	r3
  4034a4:	4681      	mov	r9, r0
  4034a6:	2000      	movs	r0, #0
  4034a8:	4b29      	ldr	r3, [pc, #164]	; (403550 <parse_serial_packet+0x5fc>)
  4034aa:	4798      	blx	r3
  4034ac:	4602      	mov	r2, r0
  4034ae:	4829      	ldr	r0, [pc, #164]	; (403554 <parse_serial_packet+0x600>)
  4034b0:	4649      	mov	r1, r9
  4034b2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 403538 <parse_serial_packet+0x5e4>
  4034b6:	47c8      	blx	r9
  4034b8:	482e      	ldr	r0, [pc, #184]	; (403574 <parse_serial_packet+0x620>)
  4034ba:	47c8      	blx	r9
  4034bc:	4b22      	ldr	r3, [pc, #136]	; (403548 <parse_serial_packet+0x5f4>)
  4034be:	6818      	ldr	r0, [r3, #0]
  4034c0:	2100      	movs	r1, #0
  4034c2:	460a      	mov	r2, r1
  4034c4:	460b      	mov	r3, r1
  4034c6:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 40358c <parse_serial_packet+0x638>
  4034ca:	47e0      	blx	ip
  4034cc:	f000 bca5 	b.w	403e1a <parse_serial_packet+0xec6>
  4034d0:	4828      	ldr	r0, [pc, #160]	; (403574 <parse_serial_packet+0x620>)
  4034d2:	4b19      	ldr	r3, [pc, #100]	; (403538 <parse_serial_packet+0x5e4>)
  4034d4:	4798      	blx	r3
  4034d6:	f000 bca0 	b.w	403e1a <parse_serial_packet+0xec6>
  4034da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4034de:	633b      	str	r3, [r7, #48]	; 0x30
		break;
		
		case CUSTOMIZE_CMD_FACTORY_RESET_RESP:
		{
			LED_On(LED0);
			led_state = ON;
  4034e0:	2201      	movs	r2, #1
  4034e2:	4b25      	ldr	r3, [pc, #148]	; (403578 <parse_serial_packet+0x624>)
  4034e4:	701a      	strb	r2, [r3, #0]
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Reset to FactoryNew OK.\r\n"));
  4034e6:	4b18      	ldr	r3, [pc, #96]	; (403548 <parse_serial_packet+0x5f4>)
  4034e8:	6818      	ldr	r0, [r3, #0]
  4034ea:	b1f0      	cbz	r0, 40352a <parse_serial_packet+0x5d6>
  4034ec:	2100      	movs	r1, #0
  4034ee:	f04f 32ff 	mov.w	r2, #4294967295
  4034f2:	460b      	mov	r3, r1
  4034f4:	f8df c098 	ldr.w	ip, [pc, #152]	; 403590 <parse_serial_packet+0x63c>
  4034f8:	47e0      	blx	ip
  4034fa:	4b14      	ldr	r3, [pc, #80]	; (40354c <parse_serial_packet+0x5f8>)
  4034fc:	4798      	blx	r3
  4034fe:	4681      	mov	r9, r0
  403500:	2000      	movs	r0, #0
  403502:	4b13      	ldr	r3, [pc, #76]	; (403550 <parse_serial_packet+0x5fc>)
  403504:	4798      	blx	r3
  403506:	4602      	mov	r2, r0
  403508:	4812      	ldr	r0, [pc, #72]	; (403554 <parse_serial_packet+0x600>)
  40350a:	4649      	mov	r1, r9
  40350c:	f8df 9028 	ldr.w	r9, [pc, #40]	; 403538 <parse_serial_packet+0x5e4>
  403510:	47c8      	blx	r9
  403512:	481a      	ldr	r0, [pc, #104]	; (40357c <parse_serial_packet+0x628>)
  403514:	47c8      	blx	r9
  403516:	4b0c      	ldr	r3, [pc, #48]	; (403548 <parse_serial_packet+0x5f4>)
  403518:	6818      	ldr	r0, [r3, #0]
  40351a:	2100      	movs	r1, #0
  40351c:	460a      	mov	r2, r1
  40351e:	460b      	mov	r3, r1
  403520:	f8df c068 	ldr.w	ip, [pc, #104]	; 40358c <parse_serial_packet+0x638>
  403524:	47e0      	blx	ip
  403526:	f000 bc78 	b.w	403e1a <parse_serial_packet+0xec6>
  40352a:	4814      	ldr	r0, [pc, #80]	; (40357c <parse_serial_packet+0x628>)
  40352c:	4b02      	ldr	r3, [pc, #8]	; (403538 <parse_serial_packet+0x5e4>)
  40352e:	4798      	blx	r3
  403530:	f000 bc73 	b.w	403e1a <parse_serial_packet+0xec6>
  403534:	00407a3c 	.word	0x00407a3c
  403538:	004045e9 	.word	0x004045e9
  40353c:	00402819 	.word	0x00402819
  403540:	20000028 	.word	0x20000028
  403544:	2001cda8 	.word	0x2001cda8
  403548:	2001cdac 	.word	0x2001cdac
  40354c:	004019a5 	.word	0x004019a5
  403550:	004019e5 	.word	0x004019e5
  403554:	004078f4 	.word	0x004078f4
  403558:	00407a60 	.word	0x00407a60
  40355c:	2001c534 	.word	0x2001c534
  403560:	20000024 	.word	0x20000024
  403564:	00407a80 	.word	0x00407a80
  403568:	00407aa4 	.word	0x00407aa4
  40356c:	2001cd9c 	.word	0x2001cd9c
  403570:	00407ac4 	.word	0x00407ac4
  403574:	00407adc 	.word	0x00407adc
  403578:	2001c55c 	.word	0x2001c55c
  40357c:	00407af0 	.word	0x00407af0
  403580:	00402711 	.word	0x00402711
  403584:	20000001 	.word	0x20000001
  403588:	2001c554 	.word	0x2001c554
  40358c:	00401341 	.word	0x00401341
  403590:	0040150d 	.word	0x0040150d
  403594:	2001c3e0 	.word	0x2001c3e0
			//winc1500_module_reset();
		}
		break;
		
		case CMD_DEVICE_UUID_RESP:
			if(*data == CMD_SUCCESS) {
  403598:	7923      	ldrb	r3, [r4, #4]
  40359a:	bb33      	cbnz	r3, 4035ea <parse_serial_packet+0x696>
				//Wi-Fi module will connect the remote server automatically after it gets the UUID.
				//start_wifi_connect();
				//config_wifi_app_otau_url();
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UUID RESP OK.\r\n"));
  40359c:	4b97      	ldr	r3, [pc, #604]	; (4037fc <parse_serial_packet+0x8a8>)
  40359e:	6818      	ldr	r0, [r3, #0]
  4035a0:	b1f0      	cbz	r0, 4035e0 <parse_serial_packet+0x68c>
  4035a2:	2100      	movs	r1, #0
  4035a4:	f04f 32ff 	mov.w	r2, #4294967295
  4035a8:	460b      	mov	r3, r1
  4035aa:	f8df c288 	ldr.w	ip, [pc, #648]	; 403834 <parse_serial_packet+0x8e0>
  4035ae:	47e0      	blx	ip
  4035b0:	4b93      	ldr	r3, [pc, #588]	; (403800 <parse_serial_packet+0x8ac>)
  4035b2:	4798      	blx	r3
  4035b4:	4681      	mov	r9, r0
  4035b6:	2000      	movs	r0, #0
  4035b8:	4b92      	ldr	r3, [pc, #584]	; (403804 <parse_serial_packet+0x8b0>)
  4035ba:	4798      	blx	r3
  4035bc:	4602      	mov	r2, r0
  4035be:	4892      	ldr	r0, [pc, #584]	; (403808 <parse_serial_packet+0x8b4>)
  4035c0:	4649      	mov	r1, r9
  4035c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 403810 <parse_serial_packet+0x8bc>
  4035c6:	47c8      	blx	r9
  4035c8:	4890      	ldr	r0, [pc, #576]	; (40380c <parse_serial_packet+0x8b8>)
  4035ca:	47c8      	blx	r9
  4035cc:	4b8b      	ldr	r3, [pc, #556]	; (4037fc <parse_serial_packet+0x8a8>)
  4035ce:	6818      	ldr	r0, [r3, #0]
  4035d0:	2100      	movs	r1, #0
  4035d2:	460a      	mov	r2, r1
  4035d4:	460b      	mov	r3, r1
  4035d6:	f8df c260 	ldr.w	ip, [pc, #608]	; 403838 <parse_serial_packet+0x8e4>
  4035da:	47e0      	blx	ip
  4035dc:	f000 bc1d 	b.w	403e1a <parse_serial_packet+0xec6>
  4035e0:	488a      	ldr	r0, [pc, #552]	; (40380c <parse_serial_packet+0x8b8>)
  4035e2:	4b8b      	ldr	r3, [pc, #556]	; (403810 <parse_serial_packet+0x8bc>)
  4035e4:	4798      	blx	r3
  4035e6:	f000 bc18 	b.w	403e1a <parse_serial_packet+0xec6>
			}
			else {
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UUID RESP Error.\r\n"));
  4035ea:	4b84      	ldr	r3, [pc, #528]	; (4037fc <parse_serial_packet+0x8a8>)
  4035ec:	6818      	ldr	r0, [r3, #0]
  4035ee:	b1e8      	cbz	r0, 40362c <parse_serial_packet+0x6d8>
  4035f0:	2100      	movs	r1, #0
  4035f2:	f04f 32ff 	mov.w	r2, #4294967295
  4035f6:	460b      	mov	r3, r1
  4035f8:	f8df c238 	ldr.w	ip, [pc, #568]	; 403834 <parse_serial_packet+0x8e0>
  4035fc:	47e0      	blx	ip
  4035fe:	4b80      	ldr	r3, [pc, #512]	; (403800 <parse_serial_packet+0x8ac>)
  403600:	4798      	blx	r3
  403602:	4681      	mov	r9, r0
  403604:	2000      	movs	r0, #0
  403606:	4b7f      	ldr	r3, [pc, #508]	; (403804 <parse_serial_packet+0x8b0>)
  403608:	4798      	blx	r3
  40360a:	4602      	mov	r2, r0
  40360c:	487e      	ldr	r0, [pc, #504]	; (403808 <parse_serial_packet+0x8b4>)
  40360e:	4649      	mov	r1, r9
  403610:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403810 <parse_serial_packet+0x8bc>
  403614:	47c8      	blx	r9
  403616:	487f      	ldr	r0, [pc, #508]	; (403814 <parse_serial_packet+0x8c0>)
  403618:	47c8      	blx	r9
  40361a:	4b78      	ldr	r3, [pc, #480]	; (4037fc <parse_serial_packet+0x8a8>)
  40361c:	6818      	ldr	r0, [r3, #0]
  40361e:	2100      	movs	r1, #0
  403620:	460a      	mov	r2, r1
  403622:	460b      	mov	r3, r1
  403624:	f8df c210 	ldr.w	ip, [pc, #528]	; 403838 <parse_serial_packet+0x8e4>
  403628:	47e0      	blx	ip
  40362a:	e3f6      	b.n	403e1a <parse_serial_packet+0xec6>
  40362c:	4879      	ldr	r0, [pc, #484]	; (403814 <parse_serial_packet+0x8c0>)
  40362e:	4b78      	ldr	r3, [pc, #480]	; (403810 <parse_serial_packet+0x8bc>)
  403630:	4798      	blx	r3
  403632:	e3f2      	b.n	403e1a <parse_serial_packet+0xec6>
			}
		break;
		
		case CMD_START_SNIFFER_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Start sniffer mode...\r\n"));
  403634:	4b71      	ldr	r3, [pc, #452]	; (4037fc <parse_serial_packet+0x8a8>)
  403636:	6818      	ldr	r0, [r3, #0]
  403638:	b1e8      	cbz	r0, 403676 <parse_serial_packet+0x722>
  40363a:	2100      	movs	r1, #0
  40363c:	f04f 32ff 	mov.w	r2, #4294967295
  403640:	460b      	mov	r3, r1
  403642:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 403834 <parse_serial_packet+0x8e0>
  403646:	47e0      	blx	ip
  403648:	4b6d      	ldr	r3, [pc, #436]	; (403800 <parse_serial_packet+0x8ac>)
  40364a:	4798      	blx	r3
  40364c:	4681      	mov	r9, r0
  40364e:	2000      	movs	r0, #0
  403650:	4b6c      	ldr	r3, [pc, #432]	; (403804 <parse_serial_packet+0x8b0>)
  403652:	4798      	blx	r3
  403654:	4602      	mov	r2, r0
  403656:	486c      	ldr	r0, [pc, #432]	; (403808 <parse_serial_packet+0x8b4>)
  403658:	4649      	mov	r1, r9
  40365a:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 403810 <parse_serial_packet+0x8bc>
  40365e:	47c8      	blx	r9
  403660:	486d      	ldr	r0, [pc, #436]	; (403818 <parse_serial_packet+0x8c4>)
  403662:	47c8      	blx	r9
  403664:	4b65      	ldr	r3, [pc, #404]	; (4037fc <parse_serial_packet+0x8a8>)
  403666:	6818      	ldr	r0, [r3, #0]
  403668:	2100      	movs	r1, #0
  40366a:	460a      	mov	r2, r1
  40366c:	460b      	mov	r3, r1
  40366e:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 403838 <parse_serial_packet+0x8e4>
  403672:	47e0      	blx	ip
  403674:	e3d1      	b.n	403e1a <parse_serial_packet+0xec6>
  403676:	4868      	ldr	r0, [pc, #416]	; (403818 <parse_serial_packet+0x8c4>)
  403678:	4b65      	ldr	r3, [pc, #404]	; (403810 <parse_serial_packet+0x8bc>)
  40367a:	4798      	blx	r3
  40367c:	e3cd      	b.n	403e1a <parse_serial_packet+0xec6>
			break;
		}
		
		case CMD_GOT_SSID_PSK_RESP:
		{
			p = data + 1;
  40367e:	f104 0a05 	add.w	sl, r4, #5
			len = strlen(p);
  403682:	4650      	mov	r0, sl
  403684:	4b65      	ldr	r3, [pc, #404]	; (40381c <parse_serial_packet+0x8c8>)
  403686:	4798      	blx	r3
  403688:	4681      	mov	r9, r0
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Got wifi ssid: %s, psk: %s\r\n", p, p + len + 1));
  40368a:	4b5c      	ldr	r3, [pc, #368]	; (4037fc <parse_serial_packet+0x8a8>)
  40368c:	6818      	ldr	r0, [r3, #0]
  40368e:	b310      	cbz	r0, 4036d6 <parse_serial_packet+0x782>
  403690:	2100      	movs	r1, #0
  403692:	f04f 32ff 	mov.w	r2, #4294967295
  403696:	460b      	mov	r3, r1
  403698:	f8df c198 	ldr.w	ip, [pc, #408]	; 403834 <parse_serial_packet+0x8e0>
  40369c:	47e0      	blx	ip
  40369e:	4b58      	ldr	r3, [pc, #352]	; (403800 <parse_serial_packet+0x8ac>)
  4036a0:	4798      	blx	r3
  4036a2:	4683      	mov	fp, r0
  4036a4:	2000      	movs	r0, #0
  4036a6:	4b57      	ldr	r3, [pc, #348]	; (403804 <parse_serial_packet+0x8b0>)
  4036a8:	4798      	blx	r3
  4036aa:	4602      	mov	r2, r0
  4036ac:	4856      	ldr	r0, [pc, #344]	; (403808 <parse_serial_packet+0x8b4>)
  4036ae:	4659      	mov	r1, fp
  4036b0:	f8df b15c 	ldr.w	fp, [pc, #348]	; 403810 <parse_serial_packet+0x8bc>
  4036b4:	47d8      	blx	fp
  4036b6:	fa1f f289 	uxth.w	r2, r9
  4036ba:	3201      	adds	r2, #1
  4036bc:	4858      	ldr	r0, [pc, #352]	; (403820 <parse_serial_packet+0x8cc>)
  4036be:	4651      	mov	r1, sl
  4036c0:	4452      	add	r2, sl
  4036c2:	47d8      	blx	fp
  4036c4:	4b4d      	ldr	r3, [pc, #308]	; (4037fc <parse_serial_packet+0x8a8>)
  4036c6:	6818      	ldr	r0, [r3, #0]
  4036c8:	2100      	movs	r1, #0
  4036ca:	460a      	mov	r2, r1
  4036cc:	460b      	mov	r3, r1
  4036ce:	f8df c168 	ldr.w	ip, [pc, #360]	; 403838 <parse_serial_packet+0x8e4>
  4036d2:	47e0      	blx	ip
  4036d4:	e3a1      	b.n	403e1a <parse_serial_packet+0xec6>
  4036d6:	fa1f f289 	uxth.w	r2, r9
  4036da:	3201      	adds	r2, #1
  4036dc:	4850      	ldr	r0, [pc, #320]	; (403820 <parse_serial_packet+0x8cc>)
  4036de:	4651      	mov	r1, sl
  4036e0:	4452      	add	r2, sl
  4036e2:	4b4b      	ldr	r3, [pc, #300]	; (403810 <parse_serial_packet+0x8bc>)
  4036e4:	4798      	blx	r3
  4036e6:	e398      	b.n	403e1a <parse_serial_packet+0xec6>
			break;
		}
		
		case CMD_START_WIFI_CONNECT_RESP:
		{
			p = data + 1;
  4036e8:	f104 0a05 	add.w	sl, r4, #5
			len = strlen(p);
  4036ec:	4650      	mov	r0, sl
  4036ee:	4b4b      	ldr	r3, [pc, #300]	; (40381c <parse_serial_packet+0x8c8>)
  4036f0:	4798      	blx	r3
  4036f2:	4681      	mov	r9, r0
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Start wifi connect ssid(%s), psk(%s).\r\n", p, p + len + 1));
  4036f4:	4b41      	ldr	r3, [pc, #260]	; (4037fc <parse_serial_packet+0x8a8>)
  4036f6:	6818      	ldr	r0, [r3, #0]
  4036f8:	b310      	cbz	r0, 403740 <parse_serial_packet+0x7ec>
  4036fa:	2100      	movs	r1, #0
  4036fc:	f04f 32ff 	mov.w	r2, #4294967295
  403700:	460b      	mov	r3, r1
  403702:	f8df c130 	ldr.w	ip, [pc, #304]	; 403834 <parse_serial_packet+0x8e0>
  403706:	47e0      	blx	ip
  403708:	4b3d      	ldr	r3, [pc, #244]	; (403800 <parse_serial_packet+0x8ac>)
  40370a:	4798      	blx	r3
  40370c:	4683      	mov	fp, r0
  40370e:	2000      	movs	r0, #0
  403710:	4b3c      	ldr	r3, [pc, #240]	; (403804 <parse_serial_packet+0x8b0>)
  403712:	4798      	blx	r3
  403714:	4602      	mov	r2, r0
  403716:	483c      	ldr	r0, [pc, #240]	; (403808 <parse_serial_packet+0x8b4>)
  403718:	4659      	mov	r1, fp
  40371a:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 403810 <parse_serial_packet+0x8bc>
  40371e:	47d8      	blx	fp
  403720:	fa1f f289 	uxth.w	r2, r9
  403724:	3201      	adds	r2, #1
  403726:	483f      	ldr	r0, [pc, #252]	; (403824 <parse_serial_packet+0x8d0>)
  403728:	4651      	mov	r1, sl
  40372a:	4452      	add	r2, sl
  40372c:	47d8      	blx	fp
  40372e:	4b33      	ldr	r3, [pc, #204]	; (4037fc <parse_serial_packet+0x8a8>)
  403730:	6818      	ldr	r0, [r3, #0]
  403732:	2100      	movs	r1, #0
  403734:	460a      	mov	r2, r1
  403736:	460b      	mov	r3, r1
  403738:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 403838 <parse_serial_packet+0x8e4>
  40373c:	47e0      	blx	ip
  40373e:	e36c      	b.n	403e1a <parse_serial_packet+0xec6>
  403740:	fa1f f289 	uxth.w	r2, r9
  403744:	3201      	adds	r2, #1
  403746:	4837      	ldr	r0, [pc, #220]	; (403824 <parse_serial_packet+0x8d0>)
  403748:	4651      	mov	r1, sl
  40374a:	4452      	add	r2, sl
  40374c:	4b30      	ldr	r3, [pc, #192]	; (403810 <parse_serial_packet+0x8bc>)
  40374e:	4798      	blx	r3
  403750:	e363      	b.n	403e1a <parse_serial_packet+0xec6>
		}
		
		
		case CMD_REQ_APP_OTAU_RESP:
		{
			if(*data == CMD_SUCCESS) {
  403752:	7923      	ldrb	r3, [r4, #4]
  403754:	bb3b      	cbnz	r3, 4037a6 <parse_serial_packet+0x852>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Cortus APP update OK.\r\n"));
  403756:	4b29      	ldr	r3, [pc, #164]	; (4037fc <parse_serial_packet+0x8a8>)
  403758:	6818      	ldr	r0, [r3, #0]
  40375a:	b1e8      	cbz	r0, 403798 <parse_serial_packet+0x844>
  40375c:	2100      	movs	r1, #0
  40375e:	f04f 32ff 	mov.w	r2, #4294967295
  403762:	460b      	mov	r3, r1
  403764:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 403834 <parse_serial_packet+0x8e0>
  403768:	47e0      	blx	ip
  40376a:	4b25      	ldr	r3, [pc, #148]	; (403800 <parse_serial_packet+0x8ac>)
  40376c:	4798      	blx	r3
  40376e:	4681      	mov	r9, r0
  403770:	2000      	movs	r0, #0
  403772:	4b24      	ldr	r3, [pc, #144]	; (403804 <parse_serial_packet+0x8b0>)
  403774:	4798      	blx	r3
  403776:	4602      	mov	r2, r0
  403778:	4823      	ldr	r0, [pc, #140]	; (403808 <parse_serial_packet+0x8b4>)
  40377a:	4649      	mov	r1, r9
  40377c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 403810 <parse_serial_packet+0x8bc>
  403780:	47c8      	blx	r9
  403782:	4829      	ldr	r0, [pc, #164]	; (403828 <parse_serial_packet+0x8d4>)
  403784:	47c8      	blx	r9
  403786:	4b1d      	ldr	r3, [pc, #116]	; (4037fc <parse_serial_packet+0x8a8>)
  403788:	6818      	ldr	r0, [r3, #0]
  40378a:	2100      	movs	r1, #0
  40378c:	460a      	mov	r2, r1
  40378e:	460b      	mov	r3, r1
  403790:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 403838 <parse_serial_packet+0x8e4>
  403794:	47e0      	blx	ip
  403796:	e002      	b.n	40379e <parse_serial_packet+0x84a>
  403798:	4823      	ldr	r0, [pc, #140]	; (403828 <parse_serial_packet+0x8d4>)
  40379a:	4b1d      	ldr	r3, [pc, #116]	; (403810 <parse_serial_packet+0x8bc>)
  40379c:	4798      	blx	r3
				led_blinking_mode = LED_MODE_OFF;
  40379e:	2202      	movs	r2, #2
  4037a0:	4b22      	ldr	r3, [pc, #136]	; (40382c <parse_serial_packet+0x8d8>)
  4037a2:	701a      	strb	r2, [r3, #0]
  4037a4:	e339      	b.n	403e1a <parse_serial_packet+0xec6>
			}
			else if(*data == CMD_INVALID_URL) {
  4037a6:	2b07      	cmp	r3, #7
  4037a8:	d148      	bne.n	40383c <parse_serial_packet+0x8e8>
				led_blinking_mode = LED_MODE_ON;
  4037aa:	2203      	movs	r2, #3
  4037ac:	4b1f      	ldr	r3, [pc, #124]	; (40382c <parse_serial_packet+0x8d8>)
  4037ae:	701a      	strb	r2, [r3, #0]
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU invalid url.\r\n"));
  4037b0:	4b12      	ldr	r3, [pc, #72]	; (4037fc <parse_serial_packet+0x8a8>)
  4037b2:	6818      	ldr	r0, [r3, #0]
  4037b4:	b1e8      	cbz	r0, 4037f2 <parse_serial_packet+0x89e>
  4037b6:	2100      	movs	r1, #0
  4037b8:	f04f 32ff 	mov.w	r2, #4294967295
  4037bc:	460b      	mov	r3, r1
  4037be:	f8df c074 	ldr.w	ip, [pc, #116]	; 403834 <parse_serial_packet+0x8e0>
  4037c2:	47e0      	blx	ip
  4037c4:	4b0e      	ldr	r3, [pc, #56]	; (403800 <parse_serial_packet+0x8ac>)
  4037c6:	4798      	blx	r3
  4037c8:	4681      	mov	r9, r0
  4037ca:	2000      	movs	r0, #0
  4037cc:	4b0d      	ldr	r3, [pc, #52]	; (403804 <parse_serial_packet+0x8b0>)
  4037ce:	4798      	blx	r3
  4037d0:	4602      	mov	r2, r0
  4037d2:	480d      	ldr	r0, [pc, #52]	; (403808 <parse_serial_packet+0x8b4>)
  4037d4:	4649      	mov	r1, r9
  4037d6:	f8df 9038 	ldr.w	r9, [pc, #56]	; 403810 <parse_serial_packet+0x8bc>
  4037da:	47c8      	blx	r9
  4037dc:	4814      	ldr	r0, [pc, #80]	; (403830 <parse_serial_packet+0x8dc>)
  4037de:	47c8      	blx	r9
  4037e0:	4b06      	ldr	r3, [pc, #24]	; (4037fc <parse_serial_packet+0x8a8>)
  4037e2:	6818      	ldr	r0, [r3, #0]
  4037e4:	2100      	movs	r1, #0
  4037e6:	460a      	mov	r2, r1
  4037e8:	460b      	mov	r3, r1
  4037ea:	f8df c04c 	ldr.w	ip, [pc, #76]	; 403838 <parse_serial_packet+0x8e4>
  4037ee:	47e0      	blx	ip
  4037f0:	e313      	b.n	403e1a <parse_serial_packet+0xec6>
  4037f2:	480f      	ldr	r0, [pc, #60]	; (403830 <parse_serial_packet+0x8dc>)
  4037f4:	4b06      	ldr	r3, [pc, #24]	; (403810 <parse_serial_packet+0x8bc>)
  4037f6:	4798      	blx	r3
  4037f8:	e30f      	b.n	403e1a <parse_serial_packet+0xec6>
  4037fa:	bf00      	nop
  4037fc:	2001cdac 	.word	0x2001cdac
  403800:	004019a5 	.word	0x004019a5
  403804:	004019e5 	.word	0x004019e5
  403808:	004078f4 	.word	0x004078f4
  40380c:	00407b0c 	.word	0x00407b0c
  403810:	004045e9 	.word	0x004045e9
  403814:	00407b1c 	.word	0x00407b1c
  403818:	00407b30 	.word	0x00407b30
  40381c:	004049b9 	.word	0x004049b9
  403820:	00407b48 	.word	0x00407b48
  403824:	00407b68 	.word	0x00407b68
  403828:	00407b90 	.word	0x00407b90
  40382c:	20000020 	.word	0x20000020
  403830:	00407ba8 	.word	0x00407ba8
  403834:	0040150d 	.word	0x0040150d
  403838:	00401341 	.word	0x00401341
			}
			else if(*data == CMD_OTAU_DL_FAILED) {
  40383c:	2b08      	cmp	r3, #8
  40383e:	d127      	bne.n	403890 <parse_serial_packet+0x93c>
				led_blinking_mode = LED_MODE_ON;
  403840:	2203      	movs	r2, #3
  403842:	4b9c      	ldr	r3, [pc, #624]	; (403ab4 <parse_serial_packet+0xb60>)
  403844:	701a      	strb	r2, [r3, #0]
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU download failed.\r\n"));
  403846:	4b9c      	ldr	r3, [pc, #624]	; (403ab8 <parse_serial_packet+0xb64>)
  403848:	6818      	ldr	r0, [r3, #0]
  40384a:	b1e8      	cbz	r0, 403888 <parse_serial_packet+0x934>
  40384c:	2100      	movs	r1, #0
  40384e:	f04f 32ff 	mov.w	r2, #4294967295
  403852:	460b      	mov	r3, r1
  403854:	f8df c290 	ldr.w	ip, [pc, #656]	; 403ae8 <parse_serial_packet+0xb94>
  403858:	47e0      	blx	ip
  40385a:	4b98      	ldr	r3, [pc, #608]	; (403abc <parse_serial_packet+0xb68>)
  40385c:	4798      	blx	r3
  40385e:	4681      	mov	r9, r0
  403860:	2000      	movs	r0, #0
  403862:	4b97      	ldr	r3, [pc, #604]	; (403ac0 <parse_serial_packet+0xb6c>)
  403864:	4798      	blx	r3
  403866:	4602      	mov	r2, r0
  403868:	4896      	ldr	r0, [pc, #600]	; (403ac4 <parse_serial_packet+0xb70>)
  40386a:	4649      	mov	r1, r9
  40386c:	f8df 925c 	ldr.w	r9, [pc, #604]	; 403acc <parse_serial_packet+0xb78>
  403870:	47c8      	blx	r9
  403872:	4895      	ldr	r0, [pc, #596]	; (403ac8 <parse_serial_packet+0xb74>)
  403874:	47c8      	blx	r9
  403876:	4b90      	ldr	r3, [pc, #576]	; (403ab8 <parse_serial_packet+0xb64>)
  403878:	6818      	ldr	r0, [r3, #0]
  40387a:	2100      	movs	r1, #0
  40387c:	460a      	mov	r2, r1
  40387e:	460b      	mov	r3, r1
  403880:	f8df c268 	ldr.w	ip, [pc, #616]	; 403aec <parse_serial_packet+0xb98>
  403884:	47e0      	blx	ip
  403886:	e2c8      	b.n	403e1a <parse_serial_packet+0xec6>
  403888:	488f      	ldr	r0, [pc, #572]	; (403ac8 <parse_serial_packet+0xb74>)
  40388a:	4b90      	ldr	r3, [pc, #576]	; (403acc <parse_serial_packet+0xb78>)
  40388c:	4798      	blx	r3
  40388e:	e2c4      	b.n	403e1a <parse_serial_packet+0xec6>
			}
			else if(*data == CMD_OTAU_SW_FAILED) {
  403890:	2b09      	cmp	r3, #9
  403892:	f040 82c2 	bne.w	403e1a <parse_serial_packet+0xec6>
				led_blinking_mode = LED_MODE_ON;
  403896:	2203      	movs	r2, #3
  403898:	4b86      	ldr	r3, [pc, #536]	; (403ab4 <parse_serial_packet+0xb60>)
  40389a:	701a      	strb	r2, [r3, #0]
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: Switch OTAU image failed.\r\n"));
  40389c:	4b86      	ldr	r3, [pc, #536]	; (403ab8 <parse_serial_packet+0xb64>)
  40389e:	6818      	ldr	r0, [r3, #0]
  4038a0:	b1e8      	cbz	r0, 4038de <parse_serial_packet+0x98a>
  4038a2:	2100      	movs	r1, #0
  4038a4:	f04f 32ff 	mov.w	r2, #4294967295
  4038a8:	460b      	mov	r3, r1
  4038aa:	f8df c23c 	ldr.w	ip, [pc, #572]	; 403ae8 <parse_serial_packet+0xb94>
  4038ae:	47e0      	blx	ip
  4038b0:	4b82      	ldr	r3, [pc, #520]	; (403abc <parse_serial_packet+0xb68>)
  4038b2:	4798      	blx	r3
  4038b4:	4681      	mov	r9, r0
  4038b6:	2000      	movs	r0, #0
  4038b8:	4b81      	ldr	r3, [pc, #516]	; (403ac0 <parse_serial_packet+0xb6c>)
  4038ba:	4798      	blx	r3
  4038bc:	4602      	mov	r2, r0
  4038be:	4881      	ldr	r0, [pc, #516]	; (403ac4 <parse_serial_packet+0xb70>)
  4038c0:	4649      	mov	r1, r9
  4038c2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 403acc <parse_serial_packet+0xb78>
  4038c6:	47c8      	blx	r9
  4038c8:	4881      	ldr	r0, [pc, #516]	; (403ad0 <parse_serial_packet+0xb7c>)
  4038ca:	47c8      	blx	r9
  4038cc:	4b7a      	ldr	r3, [pc, #488]	; (403ab8 <parse_serial_packet+0xb64>)
  4038ce:	6818      	ldr	r0, [r3, #0]
  4038d0:	2100      	movs	r1, #0
  4038d2:	460a      	mov	r2, r1
  4038d4:	460b      	mov	r3, r1
  4038d6:	f8df c214 	ldr.w	ip, [pc, #532]	; 403aec <parse_serial_packet+0xb98>
  4038da:	47e0      	blx	ip
  4038dc:	e29d      	b.n	403e1a <parse_serial_packet+0xec6>
  4038de:	487c      	ldr	r0, [pc, #496]	; (403ad0 <parse_serial_packet+0xb7c>)
  4038e0:	4b7a      	ldr	r3, [pc, #488]	; (403acc <parse_serial_packet+0xb78>)
  4038e2:	4798      	blx	r3
  4038e4:	e299      	b.n	403e1a <parse_serial_packet+0xec6>
			break;
		}
		
		case CMD_REQ_WIFI_FW_OTAU_RESP:
		{
			if(*data == CMD_SUCCESS) {
  4038e6:	7923      	ldrb	r3, [r4, #4]
  4038e8:	bb23      	cbnz	r3, 403934 <parse_serial_packet+0x9e0>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("WiFi firmware update OK.\r\n"));
  4038ea:	4b73      	ldr	r3, [pc, #460]	; (403ab8 <parse_serial_packet+0xb64>)
  4038ec:	6818      	ldr	r0, [r3, #0]
  4038ee:	b1e8      	cbz	r0, 40392c <parse_serial_packet+0x9d8>
  4038f0:	2100      	movs	r1, #0
  4038f2:	f04f 32ff 	mov.w	r2, #4294967295
  4038f6:	460b      	mov	r3, r1
  4038f8:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 403ae8 <parse_serial_packet+0xb94>
  4038fc:	47e0      	blx	ip
  4038fe:	4b6f      	ldr	r3, [pc, #444]	; (403abc <parse_serial_packet+0xb68>)
  403900:	4798      	blx	r3
  403902:	4681      	mov	r9, r0
  403904:	2000      	movs	r0, #0
  403906:	4b6e      	ldr	r3, [pc, #440]	; (403ac0 <parse_serial_packet+0xb6c>)
  403908:	4798      	blx	r3
  40390a:	4602      	mov	r2, r0
  40390c:	486d      	ldr	r0, [pc, #436]	; (403ac4 <parse_serial_packet+0xb70>)
  40390e:	4649      	mov	r1, r9
  403910:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 403acc <parse_serial_packet+0xb78>
  403914:	47c8      	blx	r9
  403916:	486f      	ldr	r0, [pc, #444]	; (403ad4 <parse_serial_packet+0xb80>)
  403918:	47c8      	blx	r9
  40391a:	4b67      	ldr	r3, [pc, #412]	; (403ab8 <parse_serial_packet+0xb64>)
  40391c:	6818      	ldr	r0, [r3, #0]
  40391e:	2100      	movs	r1, #0
  403920:	460a      	mov	r2, r1
  403922:	460b      	mov	r3, r1
  403924:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 403aec <parse_serial_packet+0xb98>
  403928:	47e0      	blx	ip
  40392a:	e276      	b.n	403e1a <parse_serial_packet+0xec6>
  40392c:	4869      	ldr	r0, [pc, #420]	; (403ad4 <parse_serial_packet+0xb80>)
  40392e:	4b67      	ldr	r3, [pc, #412]	; (403acc <parse_serial_packet+0xb78>)
  403930:	4798      	blx	r3
  403932:	e272      	b.n	403e1a <parse_serial_packet+0xec6>
			}
			else if(*data == CMD_INVALID_URL) {
  403934:	2b07      	cmp	r3, #7
  403936:	d124      	bne.n	403982 <parse_serial_packet+0xa2e>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU invalid url.\r\n"));
  403938:	4b5f      	ldr	r3, [pc, #380]	; (403ab8 <parse_serial_packet+0xb64>)
  40393a:	6818      	ldr	r0, [r3, #0]
  40393c:	b1e8      	cbz	r0, 40397a <parse_serial_packet+0xa26>
  40393e:	2100      	movs	r1, #0
  403940:	f04f 32ff 	mov.w	r2, #4294967295
  403944:	460b      	mov	r3, r1
  403946:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 403ae8 <parse_serial_packet+0xb94>
  40394a:	47e0      	blx	ip
  40394c:	4b5b      	ldr	r3, [pc, #364]	; (403abc <parse_serial_packet+0xb68>)
  40394e:	4798      	blx	r3
  403950:	4681      	mov	r9, r0
  403952:	2000      	movs	r0, #0
  403954:	4b5a      	ldr	r3, [pc, #360]	; (403ac0 <parse_serial_packet+0xb6c>)
  403956:	4798      	blx	r3
  403958:	4602      	mov	r2, r0
  40395a:	485a      	ldr	r0, [pc, #360]	; (403ac4 <parse_serial_packet+0xb70>)
  40395c:	4649      	mov	r1, r9
  40395e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 403acc <parse_serial_packet+0xb78>
  403962:	47c8      	blx	r9
  403964:	485c      	ldr	r0, [pc, #368]	; (403ad8 <parse_serial_packet+0xb84>)
  403966:	47c8      	blx	r9
  403968:	4b53      	ldr	r3, [pc, #332]	; (403ab8 <parse_serial_packet+0xb64>)
  40396a:	6818      	ldr	r0, [r3, #0]
  40396c:	2100      	movs	r1, #0
  40396e:	460a      	mov	r2, r1
  403970:	460b      	mov	r3, r1
  403972:	f8df c178 	ldr.w	ip, [pc, #376]	; 403aec <parse_serial_packet+0xb98>
  403976:	47e0      	blx	ip
  403978:	e24f      	b.n	403e1a <parse_serial_packet+0xec6>
  40397a:	4857      	ldr	r0, [pc, #348]	; (403ad8 <parse_serial_packet+0xb84>)
  40397c:	4b53      	ldr	r3, [pc, #332]	; (403acc <parse_serial_packet+0xb78>)
  40397e:	4798      	blx	r3
  403980:	e24b      	b.n	403e1a <parse_serial_packet+0xec6>
			}
			else if(*data == CMD_OTAU_DL_FAILED) {
  403982:	2b08      	cmp	r3, #8
  403984:	d124      	bne.n	4039d0 <parse_serial_packet+0xa7c>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU download failed.\r\n"));
  403986:	4b4c      	ldr	r3, [pc, #304]	; (403ab8 <parse_serial_packet+0xb64>)
  403988:	6818      	ldr	r0, [r3, #0]
  40398a:	b1e8      	cbz	r0, 4039c8 <parse_serial_packet+0xa74>
  40398c:	2100      	movs	r1, #0
  40398e:	f04f 32ff 	mov.w	r2, #4294967295
  403992:	460b      	mov	r3, r1
  403994:	f8df c150 	ldr.w	ip, [pc, #336]	; 403ae8 <parse_serial_packet+0xb94>
  403998:	47e0      	blx	ip
  40399a:	4b48      	ldr	r3, [pc, #288]	; (403abc <parse_serial_packet+0xb68>)
  40399c:	4798      	blx	r3
  40399e:	4681      	mov	r9, r0
  4039a0:	2000      	movs	r0, #0
  4039a2:	4b47      	ldr	r3, [pc, #284]	; (403ac0 <parse_serial_packet+0xb6c>)
  4039a4:	4798      	blx	r3
  4039a6:	4602      	mov	r2, r0
  4039a8:	4846      	ldr	r0, [pc, #280]	; (403ac4 <parse_serial_packet+0xb70>)
  4039aa:	4649      	mov	r1, r9
  4039ac:	f8df 911c 	ldr.w	r9, [pc, #284]	; 403acc <parse_serial_packet+0xb78>
  4039b0:	47c8      	blx	r9
  4039b2:	4845      	ldr	r0, [pc, #276]	; (403ac8 <parse_serial_packet+0xb74>)
  4039b4:	47c8      	blx	r9
  4039b6:	4b40      	ldr	r3, [pc, #256]	; (403ab8 <parse_serial_packet+0xb64>)
  4039b8:	6818      	ldr	r0, [r3, #0]
  4039ba:	2100      	movs	r1, #0
  4039bc:	460a      	mov	r2, r1
  4039be:	460b      	mov	r3, r1
  4039c0:	f8df c128 	ldr.w	ip, [pc, #296]	; 403aec <parse_serial_packet+0xb98>
  4039c4:	47e0      	blx	ip
  4039c6:	e228      	b.n	403e1a <parse_serial_packet+0xec6>
  4039c8:	483f      	ldr	r0, [pc, #252]	; (403ac8 <parse_serial_packet+0xb74>)
  4039ca:	4b40      	ldr	r3, [pc, #256]	; (403acc <parse_serial_packet+0xb78>)
  4039cc:	4798      	blx	r3
  4039ce:	e224      	b.n	403e1a <parse_serial_packet+0xec6>
			}
			else if(*data == CMD_OTAU_SW_FAILED) {
  4039d0:	2b09      	cmp	r3, #9
  4039d2:	f040 8222 	bne.w	403e1a <parse_serial_packet+0xec6>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: Switch OTAU image failed.\r\n"));
  4039d6:	4b38      	ldr	r3, [pc, #224]	; (403ab8 <parse_serial_packet+0xb64>)
  4039d8:	6818      	ldr	r0, [r3, #0]
  4039da:	b1e8      	cbz	r0, 403a18 <parse_serial_packet+0xac4>
  4039dc:	2100      	movs	r1, #0
  4039de:	f04f 32ff 	mov.w	r2, #4294967295
  4039e2:	460b      	mov	r3, r1
  4039e4:	f8df c100 	ldr.w	ip, [pc, #256]	; 403ae8 <parse_serial_packet+0xb94>
  4039e8:	47e0      	blx	ip
  4039ea:	4b34      	ldr	r3, [pc, #208]	; (403abc <parse_serial_packet+0xb68>)
  4039ec:	4798      	blx	r3
  4039ee:	4681      	mov	r9, r0
  4039f0:	2000      	movs	r0, #0
  4039f2:	4b33      	ldr	r3, [pc, #204]	; (403ac0 <parse_serial_packet+0xb6c>)
  4039f4:	4798      	blx	r3
  4039f6:	4602      	mov	r2, r0
  4039f8:	4832      	ldr	r0, [pc, #200]	; (403ac4 <parse_serial_packet+0xb70>)
  4039fa:	4649      	mov	r1, r9
  4039fc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 403acc <parse_serial_packet+0xb78>
  403a00:	47c8      	blx	r9
  403a02:	4833      	ldr	r0, [pc, #204]	; (403ad0 <parse_serial_packet+0xb7c>)
  403a04:	47c8      	blx	r9
  403a06:	4b2c      	ldr	r3, [pc, #176]	; (403ab8 <parse_serial_packet+0xb64>)
  403a08:	6818      	ldr	r0, [r3, #0]
  403a0a:	2100      	movs	r1, #0
  403a0c:	460a      	mov	r2, r1
  403a0e:	460b      	mov	r3, r1
  403a10:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 403aec <parse_serial_packet+0xb98>
  403a14:	47e0      	blx	ip
  403a16:	e200      	b.n	403e1a <parse_serial_packet+0xec6>
  403a18:	482d      	ldr	r0, [pc, #180]	; (403ad0 <parse_serial_packet+0xb7c>)
  403a1a:	4b2c      	ldr	r3, [pc, #176]	; (403acc <parse_serial_packet+0xb78>)
  403a1c:	4798      	blx	r3
  403a1e:	e1fc      	b.n	403e1a <parse_serial_packet+0xec6>
			break;
		}
		
		case CMD_REQ_SET_APP_OTAU_URL_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Set app otau url OK.\r\n"));
  403a20:	4b25      	ldr	r3, [pc, #148]	; (403ab8 <parse_serial_packet+0xb64>)
  403a22:	6818      	ldr	r0, [r3, #0]
  403a24:	b1e8      	cbz	r0, 403a62 <parse_serial_packet+0xb0e>
  403a26:	2100      	movs	r1, #0
  403a28:	f04f 32ff 	mov.w	r2, #4294967295
  403a2c:	460b      	mov	r3, r1
  403a2e:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 403ae8 <parse_serial_packet+0xb94>
  403a32:	47e0      	blx	ip
  403a34:	4b21      	ldr	r3, [pc, #132]	; (403abc <parse_serial_packet+0xb68>)
  403a36:	4798      	blx	r3
  403a38:	4681      	mov	r9, r0
  403a3a:	2000      	movs	r0, #0
  403a3c:	4b20      	ldr	r3, [pc, #128]	; (403ac0 <parse_serial_packet+0xb6c>)
  403a3e:	4798      	blx	r3
  403a40:	4602      	mov	r2, r0
  403a42:	4820      	ldr	r0, [pc, #128]	; (403ac4 <parse_serial_packet+0xb70>)
  403a44:	4649      	mov	r1, r9
  403a46:	f8df 9084 	ldr.w	r9, [pc, #132]	; 403acc <parse_serial_packet+0xb78>
  403a4a:	47c8      	blx	r9
  403a4c:	4823      	ldr	r0, [pc, #140]	; (403adc <parse_serial_packet+0xb88>)
  403a4e:	47c8      	blx	r9
  403a50:	4b19      	ldr	r3, [pc, #100]	; (403ab8 <parse_serial_packet+0xb64>)
  403a52:	6818      	ldr	r0, [r3, #0]
  403a54:	2100      	movs	r1, #0
  403a56:	460a      	mov	r2, r1
  403a58:	460b      	mov	r3, r1
  403a5a:	f8df c090 	ldr.w	ip, [pc, #144]	; 403aec <parse_serial_packet+0xb98>
  403a5e:	47e0      	blx	ip
  403a60:	e002      	b.n	403a68 <parse_serial_packet+0xb14>
  403a62:	481e      	ldr	r0, [pc, #120]	; (403adc <parse_serial_packet+0xb88>)
  403a64:	4b19      	ldr	r3, [pc, #100]	; (403acc <parse_serial_packet+0xb78>)
  403a66:	4798      	blx	r3
			config_wifi_fw_otau_url();
  403a68:	4b1d      	ldr	r3, [pc, #116]	; (403ae0 <parse_serial_packet+0xb8c>)
  403a6a:	4798      	blx	r3
  403a6c:	e1d5      	b.n	403e1a <parse_serial_packet+0xec6>
			break;
		}
		
		case CMD_REQ_SET_WIFI_FW_OTAU_URL_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Set wifi firmware otau url OK.\r\n"));
  403a6e:	4b12      	ldr	r3, [pc, #72]	; (403ab8 <parse_serial_packet+0xb64>)
  403a70:	6818      	ldr	r0, [r3, #0]
  403a72:	2800      	cmp	r0, #0
  403a74:	d03c      	beq.n	403af0 <parse_serial_packet+0xb9c>
  403a76:	2100      	movs	r1, #0
  403a78:	f04f 32ff 	mov.w	r2, #4294967295
  403a7c:	460b      	mov	r3, r1
  403a7e:	f8df c068 	ldr.w	ip, [pc, #104]	; 403ae8 <parse_serial_packet+0xb94>
  403a82:	47e0      	blx	ip
  403a84:	4b0d      	ldr	r3, [pc, #52]	; (403abc <parse_serial_packet+0xb68>)
  403a86:	4798      	blx	r3
  403a88:	4681      	mov	r9, r0
  403a8a:	2000      	movs	r0, #0
  403a8c:	4b0c      	ldr	r3, [pc, #48]	; (403ac0 <parse_serial_packet+0xb6c>)
  403a8e:	4798      	blx	r3
  403a90:	4602      	mov	r2, r0
  403a92:	480c      	ldr	r0, [pc, #48]	; (403ac4 <parse_serial_packet+0xb70>)
  403a94:	4649      	mov	r1, r9
  403a96:	f8df 9034 	ldr.w	r9, [pc, #52]	; 403acc <parse_serial_packet+0xb78>
  403a9a:	47c8      	blx	r9
  403a9c:	4811      	ldr	r0, [pc, #68]	; (403ae4 <parse_serial_packet+0xb90>)
  403a9e:	47c8      	blx	r9
  403aa0:	4b05      	ldr	r3, [pc, #20]	; (403ab8 <parse_serial_packet+0xb64>)
  403aa2:	6818      	ldr	r0, [r3, #0]
  403aa4:	2100      	movs	r1, #0
  403aa6:	460a      	mov	r2, r1
  403aa8:	460b      	mov	r3, r1
  403aaa:	f8df c040 	ldr.w	ip, [pc, #64]	; 403aec <parse_serial_packet+0xb98>
  403aae:	47e0      	blx	ip
  403ab0:	e021      	b.n	403af6 <parse_serial_packet+0xba2>
  403ab2:	bf00      	nop
  403ab4:	20000020 	.word	0x20000020
  403ab8:	2001cdac 	.word	0x2001cdac
  403abc:	004019a5 	.word	0x004019a5
  403ac0:	004019e5 	.word	0x004019e5
  403ac4:	004078f4 	.word	0x004078f4
  403ac8:	00407bc4 	.word	0x00407bc4
  403acc:	004045e9 	.word	0x004045e9
  403ad0:	00407be4 	.word	0x00407be4
  403ad4:	00407c08 	.word	0x00407c08
  403ad8:	00407ba8 	.word	0x00407ba8
  403adc:	00407c24 	.word	0x00407c24
  403ae0:	00402f09 	.word	0x00402f09
  403ae4:	00407c3c 	.word	0x00407c3c
  403ae8:	0040150d 	.word	0x0040150d
  403aec:	00401341 	.word	0x00401341
  403af0:	4891      	ldr	r0, [pc, #580]	; (403d38 <parse_serial_packet+0xde4>)
  403af2:	4b92      	ldr	r3, [pc, #584]	; (403d3c <parse_serial_packet+0xde8>)
  403af4:	4798      	blx	r3

/* Send connect command to start server connecting */
static void start_wifi_connect(void)
{
	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  403af6:	4b92      	ldr	r3, [pc, #584]	; (403d40 <parse_serial_packet+0xdec>)
  403af8:	9301      	str	r3, [sp, #4]
	static uint8_t pkt_buf[16];
	uint16_t pkt_len;
	
	pkt_len = form_serial_packet(CMD_CONNECT, NULL, 0, pkt_buf);
  403afa:	f8df 9278 	ldr.w	r9, [pc, #632]	; 403d74 <parse_serial_packet+0xe20>
  403afe:	2021      	movs	r0, #33	; 0x21
  403b00:	2100      	movs	r1, #0
  403b02:	460a      	mov	r2, r1
  403b04:	464b      	mov	r3, r9
  403b06:	f8df c270 	ldr.w	ip, [pc, #624]	; 403d78 <parse_serial_packet+0xe24>
  403b0a:	47e0      	blx	ip
	out_data->buf = pkt_buf;
  403b0c:	9b01      	ldr	r3, [sp, #4]
  403b0e:	f8c3 9000 	str.w	r9, [r3]
	out_data->len = pkt_len;
  403b12:	a902      	add	r1, sp, #8
  403b14:	f851 3d04 	ldr.w	r3, [r1, #-4]!
  403b18:	6058      	str	r0, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &out_data, portMAX_DELAY);
  403b1a:	4b8a      	ldr	r3, [pc, #552]	; (403d44 <parse_serial_packet+0xdf0>)
  403b1c:	6818      	ldr	r0, [r3, #0]
  403b1e:	f04f 32ff 	mov.w	r2, #4294967295
  403b22:	2300      	movs	r3, #0
  403b24:	f8df c254 	ldr.w	ip, [pc, #596]	; 403d7c <parse_serial_packet+0xe28>
  403b28:	47e0      	blx	ip
  403b2a:	e176      	b.n	403e1a <parse_serial_packet+0xec6>
			break;
		}
		
		case CMD_WIFI_CLOUD_READY:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wi-Fi connect to Cloud OK\r\n"));
  403b2c:	4b86      	ldr	r3, [pc, #536]	; (403d48 <parse_serial_packet+0xdf4>)
  403b2e:	6818      	ldr	r0, [r3, #0]
  403b30:	b1e8      	cbz	r0, 403b6e <parse_serial_packet+0xc1a>
  403b32:	2100      	movs	r1, #0
  403b34:	f04f 32ff 	mov.w	r2, #4294967295
  403b38:	460b      	mov	r3, r1
  403b3a:	f8df c244 	ldr.w	ip, [pc, #580]	; 403d80 <parse_serial_packet+0xe2c>
  403b3e:	47e0      	blx	ip
  403b40:	4b82      	ldr	r3, [pc, #520]	; (403d4c <parse_serial_packet+0xdf8>)
  403b42:	4798      	blx	r3
  403b44:	4681      	mov	r9, r0
  403b46:	2000      	movs	r0, #0
  403b48:	4b81      	ldr	r3, [pc, #516]	; (403d50 <parse_serial_packet+0xdfc>)
  403b4a:	4798      	blx	r3
  403b4c:	4602      	mov	r2, r0
  403b4e:	4881      	ldr	r0, [pc, #516]	; (403d54 <parse_serial_packet+0xe00>)
  403b50:	4649      	mov	r1, r9
  403b52:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 403d3c <parse_serial_packet+0xde8>
  403b56:	47c8      	blx	r9
  403b58:	487f      	ldr	r0, [pc, #508]	; (403d58 <parse_serial_packet+0xe04>)
  403b5a:	47c8      	blx	r9
  403b5c:	4b7a      	ldr	r3, [pc, #488]	; (403d48 <parse_serial_packet+0xdf4>)
  403b5e:	6818      	ldr	r0, [r3, #0]
  403b60:	2100      	movs	r1, #0
  403b62:	460a      	mov	r2, r1
  403b64:	460b      	mov	r3, r1
  403b66:	f8df c214 	ldr.w	ip, [pc, #532]	; 403d7c <parse_serial_packet+0xe28>
  403b6a:	47e0      	blx	ip
  403b6c:	e155      	b.n	403e1a <parse_serial_packet+0xec6>
  403b6e:	487a      	ldr	r0, [pc, #488]	; (403d58 <parse_serial_packet+0xe04>)
  403b70:	4b72      	ldr	r3, [pc, #456]	; (403d3c <parse_serial_packet+0xde8>)
  403b72:	4798      	blx	r3
  403b74:	e151      	b.n	403e1a <parse_serial_packet+0xec6>
			break;
		}
		case CUSTOMIZE_CMD_CHANGE_UART_CFG_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wi-Fi return get uart cfg OK\r\n"));
  403b76:	4b74      	ldr	r3, [pc, #464]	; (403d48 <parse_serial_packet+0xdf4>)
  403b78:	6818      	ldr	r0, [r3, #0]
  403b7a:	b1e8      	cbz	r0, 403bb8 <parse_serial_packet+0xc64>
  403b7c:	2100      	movs	r1, #0
  403b7e:	f04f 32ff 	mov.w	r2, #4294967295
  403b82:	460b      	mov	r3, r1
  403b84:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 403d80 <parse_serial_packet+0xe2c>
  403b88:	47e0      	blx	ip
  403b8a:	4b70      	ldr	r3, [pc, #448]	; (403d4c <parse_serial_packet+0xdf8>)
  403b8c:	4798      	blx	r3
  403b8e:	4681      	mov	r9, r0
  403b90:	2000      	movs	r0, #0
  403b92:	4b6f      	ldr	r3, [pc, #444]	; (403d50 <parse_serial_packet+0xdfc>)
  403b94:	4798      	blx	r3
  403b96:	4602      	mov	r2, r0
  403b98:	486e      	ldr	r0, [pc, #440]	; (403d54 <parse_serial_packet+0xe00>)
  403b9a:	4649      	mov	r1, r9
  403b9c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 403d3c <parse_serial_packet+0xde8>
  403ba0:	47c8      	blx	r9
  403ba2:	486e      	ldr	r0, [pc, #440]	; (403d5c <parse_serial_packet+0xe08>)
  403ba4:	47c8      	blx	r9
  403ba6:	4b68      	ldr	r3, [pc, #416]	; (403d48 <parse_serial_packet+0xdf4>)
  403ba8:	6818      	ldr	r0, [r3, #0]
  403baa:	2100      	movs	r1, #0
  403bac:	460a      	mov	r2, r1
  403bae:	460b      	mov	r3, r1
  403bb0:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 403d7c <parse_serial_packet+0xe28>
  403bb4:	47e0      	blx	ip
  403bb6:	e130      	b.n	403e1a <parse_serial_packet+0xec6>
  403bb8:	4868      	ldr	r0, [pc, #416]	; (403d5c <parse_serial_packet+0xe08>)
  403bba:	4b60      	ldr	r3, [pc, #384]	; (403d3c <parse_serial_packet+0xde8>)
  403bbc:	4798      	blx	r3
  403bbe:	e12c      	b.n	403e1a <parse_serial_packet+0xec6>
			}
			break;
		}

		case CMD_UDP_PACKET_JSONCONTROL_PACKET:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UDP packet jsoncontrol packet.\r\n"));
  403bc0:	4b61      	ldr	r3, [pc, #388]	; (403d48 <parse_serial_packet+0xdf4>)
  403bc2:	6818      	ldr	r0, [r3, #0]
  403bc4:	b1e8      	cbz	r0, 403c02 <parse_serial_packet+0xcae>
  403bc6:	2100      	movs	r1, #0
  403bc8:	f04f 32ff 	mov.w	r2, #4294967295
  403bcc:	460b      	mov	r3, r1
  403bce:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 403d80 <parse_serial_packet+0xe2c>
  403bd2:	47e0      	blx	ip
  403bd4:	4b5d      	ldr	r3, [pc, #372]	; (403d4c <parse_serial_packet+0xdf8>)
  403bd6:	4798      	blx	r3
  403bd8:	4681      	mov	r9, r0
  403bda:	2000      	movs	r0, #0
  403bdc:	4b5c      	ldr	r3, [pc, #368]	; (403d50 <parse_serial_packet+0xdfc>)
  403bde:	4798      	blx	r3
  403be0:	4602      	mov	r2, r0
  403be2:	485c      	ldr	r0, [pc, #368]	; (403d54 <parse_serial_packet+0xe00>)
  403be4:	4649      	mov	r1, r9
  403be6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 403d3c <parse_serial_packet+0xde8>
  403bea:	47c8      	blx	r9
  403bec:	485c      	ldr	r0, [pc, #368]	; (403d60 <parse_serial_packet+0xe0c>)
  403bee:	47c8      	blx	r9
  403bf0:	4b55      	ldr	r3, [pc, #340]	; (403d48 <parse_serial_packet+0xdf4>)
  403bf2:	6818      	ldr	r0, [r3, #0]
  403bf4:	2100      	movs	r1, #0
  403bf6:	460a      	mov	r2, r1
  403bf8:	460b      	mov	r3, r1
  403bfa:	f8df c180 	ldr.w	ip, [pc, #384]	; 403d7c <parse_serial_packet+0xe28>
  403bfe:	47e0      	blx	ip
  403c00:	e10b      	b.n	403e1a <parse_serial_packet+0xec6>
  403c02:	4857      	ldr	r0, [pc, #348]	; (403d60 <parse_serial_packet+0xe0c>)
  403c04:	4b4d      	ldr	r3, [pc, #308]	; (403d3c <parse_serial_packet+0xde8>)
  403c06:	4798      	blx	r3
  403c08:	e107      	b.n	403e1a <parse_serial_packet+0xec6>
		break;
		
		case CMD_UDP_PACKET_UNKNOWN_PACKET:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UDP packet unknown packet.\r\n"));
  403c0a:	4b4f      	ldr	r3, [pc, #316]	; (403d48 <parse_serial_packet+0xdf4>)
  403c0c:	6818      	ldr	r0, [r3, #0]
  403c0e:	b1e8      	cbz	r0, 403c4c <parse_serial_packet+0xcf8>
  403c10:	2100      	movs	r1, #0
  403c12:	f04f 32ff 	mov.w	r2, #4294967295
  403c16:	460b      	mov	r3, r1
  403c18:	f8df c164 	ldr.w	ip, [pc, #356]	; 403d80 <parse_serial_packet+0xe2c>
  403c1c:	47e0      	blx	ip
  403c1e:	4b4b      	ldr	r3, [pc, #300]	; (403d4c <parse_serial_packet+0xdf8>)
  403c20:	4798      	blx	r3
  403c22:	4681      	mov	r9, r0
  403c24:	2000      	movs	r0, #0
  403c26:	4b4a      	ldr	r3, [pc, #296]	; (403d50 <parse_serial_packet+0xdfc>)
  403c28:	4798      	blx	r3
  403c2a:	4602      	mov	r2, r0
  403c2c:	4849      	ldr	r0, [pc, #292]	; (403d54 <parse_serial_packet+0xe00>)
  403c2e:	4649      	mov	r1, r9
  403c30:	f8df 9108 	ldr.w	r9, [pc, #264]	; 403d3c <parse_serial_packet+0xde8>
  403c34:	47c8      	blx	r9
  403c36:	484b      	ldr	r0, [pc, #300]	; (403d64 <parse_serial_packet+0xe10>)
  403c38:	47c8      	blx	r9
  403c3a:	4b43      	ldr	r3, [pc, #268]	; (403d48 <parse_serial_packet+0xdf4>)
  403c3c:	6818      	ldr	r0, [r3, #0]
  403c3e:	2100      	movs	r1, #0
  403c40:	460a      	mov	r2, r1
  403c42:	460b      	mov	r3, r1
  403c44:	f8df c134 	ldr.w	ip, [pc, #308]	; 403d7c <parse_serial_packet+0xe28>
  403c48:	47e0      	blx	ip
  403c4a:	e0e6      	b.n	403e1a <parse_serial_packet+0xec6>
  403c4c:	4845      	ldr	r0, [pc, #276]	; (403d64 <parse_serial_packet+0xe10>)
  403c4e:	4b3b      	ldr	r3, [pc, #236]	; (403d3c <parse_serial_packet+0xde8>)
  403c50:	4798      	blx	r3
  403c52:	e0e2      	b.n	403e1a <parse_serial_packet+0xec6>
		break;
		
		case CMD_OUT_OF_MEMORY:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: out of memory.\r\n"));
  403c54:	4b3c      	ldr	r3, [pc, #240]	; (403d48 <parse_serial_packet+0xdf4>)
  403c56:	6818      	ldr	r0, [r3, #0]
  403c58:	b1e8      	cbz	r0, 403c96 <parse_serial_packet+0xd42>
  403c5a:	2100      	movs	r1, #0
  403c5c:	f04f 32ff 	mov.w	r2, #4294967295
  403c60:	460b      	mov	r3, r1
  403c62:	f8df c11c 	ldr.w	ip, [pc, #284]	; 403d80 <parse_serial_packet+0xe2c>
  403c66:	47e0      	blx	ip
  403c68:	4b38      	ldr	r3, [pc, #224]	; (403d4c <parse_serial_packet+0xdf8>)
  403c6a:	4798      	blx	r3
  403c6c:	4681      	mov	r9, r0
  403c6e:	2000      	movs	r0, #0
  403c70:	4b37      	ldr	r3, [pc, #220]	; (403d50 <parse_serial_packet+0xdfc>)
  403c72:	4798      	blx	r3
  403c74:	4602      	mov	r2, r0
  403c76:	4837      	ldr	r0, [pc, #220]	; (403d54 <parse_serial_packet+0xe00>)
  403c78:	4649      	mov	r1, r9
  403c7a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 403d3c <parse_serial_packet+0xde8>
  403c7e:	47c8      	blx	r9
  403c80:	4839      	ldr	r0, [pc, #228]	; (403d68 <parse_serial_packet+0xe14>)
  403c82:	47c8      	blx	r9
  403c84:	4b30      	ldr	r3, [pc, #192]	; (403d48 <parse_serial_packet+0xdf4>)
  403c86:	6818      	ldr	r0, [r3, #0]
  403c88:	2100      	movs	r1, #0
  403c8a:	460a      	mov	r2, r1
  403c8c:	460b      	mov	r3, r1
  403c8e:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 403d7c <parse_serial_packet+0xe28>
  403c92:	47e0      	blx	ip
  403c94:	e0c1      	b.n	403e1a <parse_serial_packet+0xec6>
  403c96:	4834      	ldr	r0, [pc, #208]	; (403d68 <parse_serial_packet+0xe14>)
  403c98:	4b28      	ldr	r3, [pc, #160]	; (403d3c <parse_serial_packet+0xde8>)
  403c9a:	4798      	blx	r3
  403c9c:	e0bd      	b.n	403e1a <parse_serial_packet+0xec6>
		break;
		
		case CUSTOMIZE_CMD_FACTORY_TEST_RESP:
			if(*data == 0x0) {
  403c9e:	7923      	ldrb	r3, [r4, #4]
  403ca0:	bb23      	cbnz	r3, 403cec <parse_serial_packet+0xd98>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("AP can Found.\r\n"));
  403ca2:	4b29      	ldr	r3, [pc, #164]	; (403d48 <parse_serial_packet+0xdf4>)
  403ca4:	6818      	ldr	r0, [r3, #0]
  403ca6:	b1e8      	cbz	r0, 403ce4 <parse_serial_packet+0xd90>
  403ca8:	2100      	movs	r1, #0
  403caa:	f04f 32ff 	mov.w	r2, #4294967295
  403cae:	460b      	mov	r3, r1
  403cb0:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 403d80 <parse_serial_packet+0xe2c>
  403cb4:	47e0      	blx	ip
  403cb6:	4b25      	ldr	r3, [pc, #148]	; (403d4c <parse_serial_packet+0xdf8>)
  403cb8:	4798      	blx	r3
  403cba:	4681      	mov	r9, r0
  403cbc:	2000      	movs	r0, #0
  403cbe:	4b24      	ldr	r3, [pc, #144]	; (403d50 <parse_serial_packet+0xdfc>)
  403cc0:	4798      	blx	r3
  403cc2:	4602      	mov	r2, r0
  403cc4:	4823      	ldr	r0, [pc, #140]	; (403d54 <parse_serial_packet+0xe00>)
  403cc6:	4649      	mov	r1, r9
  403cc8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 403d3c <parse_serial_packet+0xde8>
  403ccc:	47c8      	blx	r9
  403cce:	4827      	ldr	r0, [pc, #156]	; (403d6c <parse_serial_packet+0xe18>)
  403cd0:	47c8      	blx	r9
  403cd2:	4b1d      	ldr	r3, [pc, #116]	; (403d48 <parse_serial_packet+0xdf4>)
  403cd4:	6818      	ldr	r0, [r3, #0]
  403cd6:	2100      	movs	r1, #0
  403cd8:	460a      	mov	r2, r1
  403cda:	460b      	mov	r3, r1
  403cdc:	f8df c09c 	ldr.w	ip, [pc, #156]	; 403d7c <parse_serial_packet+0xe28>
  403ce0:	47e0      	blx	ip
  403ce2:	e09a      	b.n	403e1a <parse_serial_packet+0xec6>
  403ce4:	4821      	ldr	r0, [pc, #132]	; (403d6c <parse_serial_packet+0xe18>)
  403ce6:	4b15      	ldr	r3, [pc, #84]	; (403d3c <parse_serial_packet+0xde8>)
  403ce8:	4798      	blx	r3
  403cea:	e096      	b.n	403e1a <parse_serial_packet+0xec6>
			}
			else {
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("AP not Found.\r\n"));
  403cec:	4b16      	ldr	r3, [pc, #88]	; (403d48 <parse_serial_packet+0xdf4>)
  403cee:	6818      	ldr	r0, [r3, #0]
  403cf0:	b1e8      	cbz	r0, 403d2e <parse_serial_packet+0xdda>
  403cf2:	2100      	movs	r1, #0
  403cf4:	f04f 32ff 	mov.w	r2, #4294967295
  403cf8:	460b      	mov	r3, r1
  403cfa:	f8df c084 	ldr.w	ip, [pc, #132]	; 403d80 <parse_serial_packet+0xe2c>
  403cfe:	47e0      	blx	ip
  403d00:	4b12      	ldr	r3, [pc, #72]	; (403d4c <parse_serial_packet+0xdf8>)
  403d02:	4798      	blx	r3
  403d04:	4681      	mov	r9, r0
  403d06:	2000      	movs	r0, #0
  403d08:	4b11      	ldr	r3, [pc, #68]	; (403d50 <parse_serial_packet+0xdfc>)
  403d0a:	4798      	blx	r3
  403d0c:	4602      	mov	r2, r0
  403d0e:	4811      	ldr	r0, [pc, #68]	; (403d54 <parse_serial_packet+0xe00>)
  403d10:	4649      	mov	r1, r9
  403d12:	f8df 9028 	ldr.w	r9, [pc, #40]	; 403d3c <parse_serial_packet+0xde8>
  403d16:	47c8      	blx	r9
  403d18:	4815      	ldr	r0, [pc, #84]	; (403d70 <parse_serial_packet+0xe1c>)
  403d1a:	47c8      	blx	r9
  403d1c:	4b0a      	ldr	r3, [pc, #40]	; (403d48 <parse_serial_packet+0xdf4>)
  403d1e:	6818      	ldr	r0, [r3, #0]
  403d20:	2100      	movs	r1, #0
  403d22:	460a      	mov	r2, r1
  403d24:	460b      	mov	r3, r1
  403d26:	f8df c054 	ldr.w	ip, [pc, #84]	; 403d7c <parse_serial_packet+0xe28>
  403d2a:	47e0      	blx	ip
  403d2c:	e075      	b.n	403e1a <parse_serial_packet+0xec6>
  403d2e:	4810      	ldr	r0, [pc, #64]	; (403d70 <parse_serial_packet+0xe1c>)
  403d30:	4b02      	ldr	r3, [pc, #8]	; (403d3c <parse_serial_packet+0xde8>)
  403d32:	4798      	blx	r3
  403d34:	e071      	b.n	403e1a <parse_serial_packet+0xec6>
  403d36:	bf00      	nop
  403d38:	00407c3c 	.word	0x00407c3c
  403d3c:	004045e9 	.word	0x004045e9
  403d40:	2001c56c 	.word	0x2001c56c
  403d44:	2001cda8 	.word	0x2001cda8
  403d48:	2001cdac 	.word	0x2001cdac
  403d4c:	004019a5 	.word	0x004019a5
  403d50:	004019e5 	.word	0x004019e5
  403d54:	004078f4 	.word	0x004078f4
  403d58:	00407c60 	.word	0x00407c60
  403d5c:	00407c7c 	.word	0x00407c7c
  403d60:	00407c9c 	.word	0x00407c9c
  403d64:	00407cc0 	.word	0x00407cc0
  403d68:	00407ce0 	.word	0x00407ce0
  403d6c:	00407cf8 	.word	0x00407cf8
  403d70:	00407d08 	.word	0x00407d08
  403d74:	2001c514 	.word	0x2001c514
  403d78:	00402a31 	.word	0x00402a31
  403d7c:	00401341 	.word	0x00401341
  403d80:	0040150d 	.word	0x0040150d
			}
		break;
		
		case CMD_UART_TIMEOUT:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: UART timeout.\r\n"));
  403d84:	4b2c      	ldr	r3, [pc, #176]	; (403e38 <parse_serial_packet+0xee4>)
  403d86:	6818      	ldr	r0, [r3, #0]
  403d88:	b1e8      	cbz	r0, 403dc6 <parse_serial_packet+0xe72>
  403d8a:	2100      	movs	r1, #0
  403d8c:	f04f 32ff 	mov.w	r2, #4294967295
  403d90:	460b      	mov	r3, r1
  403d92:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 403e54 <parse_serial_packet+0xf00>
  403d96:	47e0      	blx	ip
  403d98:	4b28      	ldr	r3, [pc, #160]	; (403e3c <parse_serial_packet+0xee8>)
  403d9a:	4798      	blx	r3
  403d9c:	4681      	mov	r9, r0
  403d9e:	2000      	movs	r0, #0
  403da0:	4b27      	ldr	r3, [pc, #156]	; (403e40 <parse_serial_packet+0xeec>)
  403da2:	4798      	blx	r3
  403da4:	4602      	mov	r2, r0
  403da6:	4827      	ldr	r0, [pc, #156]	; (403e44 <parse_serial_packet+0xef0>)
  403da8:	4649      	mov	r1, r9
  403daa:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 403e4c <parse_serial_packet+0xef8>
  403dae:	47c8      	blx	r9
  403db0:	4825      	ldr	r0, [pc, #148]	; (403e48 <parse_serial_packet+0xef4>)
  403db2:	47c8      	blx	r9
  403db4:	4b20      	ldr	r3, [pc, #128]	; (403e38 <parse_serial_packet+0xee4>)
  403db6:	6818      	ldr	r0, [r3, #0]
  403db8:	2100      	movs	r1, #0
  403dba:	460a      	mov	r2, r1
  403dbc:	460b      	mov	r3, r1
  403dbe:	f8df c098 	ldr.w	ip, [pc, #152]	; 403e58 <parse_serial_packet+0xf04>
  403dc2:	47e0      	blx	ip
  403dc4:	e029      	b.n	403e1a <parse_serial_packet+0xec6>
  403dc6:	4820      	ldr	r0, [pc, #128]	; (403e48 <parse_serial_packet+0xef4>)
  403dc8:	4b20      	ldr	r3, [pc, #128]	; (403e4c <parse_serial_packet+0xef8>)
  403dca:	4798      	blx	r3
  403dcc:	e025      	b.n	403e1a <parse_serial_packet+0xec6>
		break;
		
		default:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Unsupported command(%d).\r\n", cmdid));
  403dce:	4b1a      	ldr	r3, [pc, #104]	; (403e38 <parse_serial_packet+0xee4>)
  403dd0:	6818      	ldr	r0, [r3, #0]
  403dd2:	b1f0      	cbz	r0, 403e12 <parse_serial_packet+0xebe>
  403dd4:	2100      	movs	r1, #0
  403dd6:	f04f 32ff 	mov.w	r2, #4294967295
  403dda:	460b      	mov	r3, r1
  403ddc:	f8df c074 	ldr.w	ip, [pc, #116]	; 403e54 <parse_serial_packet+0xf00>
  403de0:	47e0      	blx	ip
  403de2:	4b16      	ldr	r3, [pc, #88]	; (403e3c <parse_serial_packet+0xee8>)
  403de4:	4798      	blx	r3
  403de6:	4682      	mov	sl, r0
  403de8:	2000      	movs	r0, #0
  403dea:	4b15      	ldr	r3, [pc, #84]	; (403e40 <parse_serial_packet+0xeec>)
  403dec:	4798      	blx	r3
  403dee:	4602      	mov	r2, r0
  403df0:	4814      	ldr	r0, [pc, #80]	; (403e44 <parse_serial_packet+0xef0>)
  403df2:	4651      	mov	r1, sl
  403df4:	f8df a054 	ldr.w	sl, [pc, #84]	; 403e4c <parse_serial_packet+0xef8>
  403df8:	47d0      	blx	sl
  403dfa:	4815      	ldr	r0, [pc, #84]	; (403e50 <parse_serial_packet+0xefc>)
  403dfc:	4649      	mov	r1, r9
  403dfe:	47d0      	blx	sl
  403e00:	4b0d      	ldr	r3, [pc, #52]	; (403e38 <parse_serial_packet+0xee4>)
  403e02:	6818      	ldr	r0, [r3, #0]
  403e04:	2100      	movs	r1, #0
  403e06:	460a      	mov	r2, r1
  403e08:	460b      	mov	r3, r1
  403e0a:	f8df c04c 	ldr.w	ip, [pc, #76]	; 403e58 <parse_serial_packet+0xf04>
  403e0e:	47e0      	blx	ip
  403e10:	e003      	b.n	403e1a <parse_serial_packet+0xec6>
  403e12:	480f      	ldr	r0, [pc, #60]	; (403e50 <parse_serial_packet+0xefc>)
  403e14:	4649      	mov	r1, r9
  403e16:	4b0d      	ldr	r3, [pc, #52]	; (403e4c <parse_serial_packet+0xef8>)
  403e18:	4798      	blx	r3
		cmdid = *(p + 3);
		data = p + 4;
		len = *(p + 1 + 1) - 1;
		execute_serial_cmd(cmdid, data, len);
		//in case two packet coming together
		len = *(p + 1 + 1) + 4;
  403e1a:	78a1      	ldrb	r1, [r4, #2]
  403e1c:	3104      	adds	r1, #4
  403e1e:	b2c9      	uxtb	r1, r1
		p = p + len;
  403e20:	440c      	add	r4, r1
		buflen = buflen - len;
  403e22:	ebc1 0108 	rsb	r1, r1, r8
  403e26:	fa5f f881 	uxtb.w	r8, r1
	uint8_t len, crc, cmdid;
	
	byte2hexstrstr(buf, buflen, serial_buf_test, 256);
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial IN(%d): %s\r\n", buflen, serial_buf_test));
	
	while(buflen > 3) {
  403e2a:	f1b8 0f03 	cmp.w	r8, #3
  403e2e:	f63f a8cb 	bhi.w	402fc8 <parse_serial_packet+0x74>
		len = *(p + 1 + 1) + 4;
		p = p + len;
		buflen = buflen - len;
	}
	return;
}
  403e32:	b003      	add	sp, #12
  403e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e38:	2001cdac 	.word	0x2001cdac
  403e3c:	004019a5 	.word	0x004019a5
  403e40:	004019e5 	.word	0x004019e5
  403e44:	004078f4 	.word	0x004078f4
  403e48:	00407d18 	.word	0x00407d18
  403e4c:	004045e9 	.word	0x004045e9
  403e50:	00407d30 	.word	0x00407d30
  403e54:	0040150d 	.word	0x0040150d
  403e58:	00401341 	.word	0x00401341

00403e5c <wifi_in>:

void wifi_in(void *parameter)
{
  403e5c:	b570      	push	{r4, r5, r6, lr}
  403e5e:	b082      	sub	sp, #8
	serial_in_pk_t *in_data = NULL;
  403e60:	2300      	movs	r3, #0
  403e62:	9301      	str	r3, [sp, #4]
	wifi_module_reset();
  403e64:	4b08      	ldr	r3, [pc, #32]	; (403e88 <wifi_in+0x2c>)
  403e66:	4798      	blx	r3
	IoT_DEBUG(IoT_DBG_SERIOUS, ("wifi_in task started\r\n"));
	for(;;) {
		IoT_xQueueReceive(serial_in_queue, &in_data, portMAX_DELAY);
  403e68:	4e08      	ldr	r6, [pc, #32]	; (403e8c <wifi_in+0x30>)
  403e6a:	4d09      	ldr	r5, [pc, #36]	; (403e90 <wifi_in+0x34>)
		parse_serial_packet(in_data->buf, in_data->len);
  403e6c:	4c09      	ldr	r4, [pc, #36]	; (403e94 <wifi_in+0x38>)
{
	serial_in_pk_t *in_data = NULL;
	wifi_module_reset();
	IoT_DEBUG(IoT_DBG_SERIOUS, ("wifi_in task started\r\n"));
	for(;;) {
		IoT_xQueueReceive(serial_in_queue, &in_data, portMAX_DELAY);
  403e6e:	6830      	ldr	r0, [r6, #0]
  403e70:	a901      	add	r1, sp, #4
  403e72:	f04f 32ff 	mov.w	r2, #4294967295
  403e76:	2300      	movs	r3, #0
  403e78:	47a8      	blx	r5
		parse_serial_packet(in_data->buf, in_data->len);
  403e7a:	9b01      	ldr	r3, [sp, #4]
  403e7c:	4618      	mov	r0, r3
  403e7e:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
  403e82:	47a0      	blx	r4
	}
  403e84:	e7f3      	b.n	403e6e <wifi_in+0x12>
  403e86:	bf00      	nop
  403e88:	00402ce9 	.word	0x00402ce9
  403e8c:	2001c3dc 	.word	0x2001c3dc
  403e90:	0040150d 	.word	0x0040150d
  403e94:	00402f55 	.word	0x00402f55

00403e98 <wifi_task>:
		xTimerStop(xConfigTimer, 0);
	}
}

void wifi_task(void *parameter)
{
  403e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403e9c:	b0a8      	sub	sp, #160	; 0xa0
	(void) parameter;
	Pdc *p_pdc = NULL;
	pdc_packet_t packet;
	serial_out_pk_t *out_data = NULL;
  403e9e:	2300      	movs	r3, #0
  403ea0:	9325      	str	r3, [sp, #148]	; 0x94

	
	xConfigTimer = xTimerCreate("xConfigTimer", 1000 , pdTRUE, ( void * ) 0, vConfigModeCallback);
  403ea2:	4a89      	ldr	r2, [pc, #548]	; (4040c8 <wifi_task+0x230>)
  403ea4:	9200      	str	r2, [sp, #0]
  403ea6:	4889      	ldr	r0, [pc, #548]	; (4040cc <wifi_task+0x234>)
  403ea8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403eac:	2201      	movs	r2, #1
  403eae:	4c88      	ldr	r4, [pc, #544]	; (4040d0 <wifi_task+0x238>)
  403eb0:	47a0      	blx	r4
  403eb2:	4b88      	ldr	r3, [pc, #544]	; (4040d4 <wifi_task+0x23c>)
  403eb4:	6018      	str	r0, [r3, #0]
	if(xConfigTimer == NULL ){
  403eb6:	bb00      	cbnz	r0, 403efa <wifi_task+0x62>
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_SERIOUS, ("xConfigTimer create failed.\r\n"));
  403eb8:	4b87      	ldr	r3, [pc, #540]	; (4040d8 <wifi_task+0x240>)
  403eba:	6818      	ldr	r0, [r3, #0]
  403ebc:	b1d0      	cbz	r0, 403ef4 <wifi_task+0x5c>
  403ebe:	2100      	movs	r1, #0
  403ec0:	f04f 32ff 	mov.w	r2, #4294967295
  403ec4:	460b      	mov	r3, r1
  403ec6:	4c85      	ldr	r4, [pc, #532]	; (4040dc <wifi_task+0x244>)
  403ec8:	47a0      	blx	r4
  403eca:	4b85      	ldr	r3, [pc, #532]	; (4040e0 <wifi_task+0x248>)
  403ecc:	4798      	blx	r3
  403ece:	4604      	mov	r4, r0
  403ed0:	2000      	movs	r0, #0
  403ed2:	4b84      	ldr	r3, [pc, #528]	; (4040e4 <wifi_task+0x24c>)
  403ed4:	4798      	blx	r3
  403ed6:	4602      	mov	r2, r0
  403ed8:	4883      	ldr	r0, [pc, #524]	; (4040e8 <wifi_task+0x250>)
  403eda:	4621      	mov	r1, r4
  403edc:	4c83      	ldr	r4, [pc, #524]	; (4040ec <wifi_task+0x254>)
  403ede:	47a0      	blx	r4
  403ee0:	4883      	ldr	r0, [pc, #524]	; (4040f0 <wifi_task+0x258>)
  403ee2:	47a0      	blx	r4
  403ee4:	4b7c      	ldr	r3, [pc, #496]	; (4040d8 <wifi_task+0x240>)
  403ee6:	6818      	ldr	r0, [r3, #0]
  403ee8:	2100      	movs	r1, #0
  403eea:	460a      	mov	r2, r1
  403eec:	460b      	mov	r3, r1
  403eee:	4c81      	ldr	r4, [pc, #516]	; (4040f4 <wifi_task+0x25c>)
  403ef0:	47a0      	blx	r4
  403ef2:	e002      	b.n	403efa <wifi_task+0x62>
  403ef4:	487e      	ldr	r0, [pc, #504]	; (4040f0 <wifi_task+0x258>)
  403ef6:	4b7d      	ldr	r3, [pc, #500]	; (4040ec <wifi_task+0x254>)
  403ef8:	4798      	blx	r3
	}
	
	xLedModeTimer = xTimerCreate("xLedTimer", 250 , pdTRUE, ( void * ) 0, vLedModeCallback);
  403efa:	4b7f      	ldr	r3, [pc, #508]	; (4040f8 <wifi_task+0x260>)
  403efc:	9300      	str	r3, [sp, #0]
  403efe:	487f      	ldr	r0, [pc, #508]	; (4040fc <wifi_task+0x264>)
  403f00:	21fa      	movs	r1, #250	; 0xfa
  403f02:	2201      	movs	r2, #1
  403f04:	2300      	movs	r3, #0
  403f06:	4c72      	ldr	r4, [pc, #456]	; (4040d0 <wifi_task+0x238>)
  403f08:	47a0      	blx	r4
  403f0a:	4604      	mov	r4, r0
  403f0c:	4b7c      	ldr	r3, [pc, #496]	; (404100 <wifi_task+0x268>)
  403f0e:	6018      	str	r0, [r3, #0]
	if(xLedModeTimer != NULL ){
  403f10:	b148      	cbz	r0, 403f26 <wifi_task+0x8e>
		xTimerStart(xLedModeTimer, 0 );
  403f12:	4b73      	ldr	r3, [pc, #460]	; (4040e0 <wifi_task+0x248>)
  403f14:	4798      	blx	r3
  403f16:	4602      	mov	r2, r0
  403f18:	2300      	movs	r3, #0
  403f1a:	9300      	str	r3, [sp, #0]
  403f1c:	4620      	mov	r0, r4
  403f1e:	4619      	mov	r1, r3
  403f20:	4c78      	ldr	r4, [pc, #480]	; (404104 <wifi_task+0x26c>)
  403f22:	47a0      	blx	r4
  403f24:	e020      	b.n	403f68 <wifi_task+0xd0>
		// The timer was not created.
	}
	else{
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_SERIOUS, ("xLedModeTimer create failed.\r\n"));
  403f26:	4b6c      	ldr	r3, [pc, #432]	; (4040d8 <wifi_task+0x240>)
  403f28:	6818      	ldr	r0, [r3, #0]
  403f2a:	b1d0      	cbz	r0, 403f62 <wifi_task+0xca>
  403f2c:	2100      	movs	r1, #0
  403f2e:	f04f 32ff 	mov.w	r2, #4294967295
  403f32:	460b      	mov	r3, r1
  403f34:	4c69      	ldr	r4, [pc, #420]	; (4040dc <wifi_task+0x244>)
  403f36:	47a0      	blx	r4
  403f38:	4b69      	ldr	r3, [pc, #420]	; (4040e0 <wifi_task+0x248>)
  403f3a:	4798      	blx	r3
  403f3c:	4604      	mov	r4, r0
  403f3e:	2000      	movs	r0, #0
  403f40:	4b68      	ldr	r3, [pc, #416]	; (4040e4 <wifi_task+0x24c>)
  403f42:	4798      	blx	r3
  403f44:	4602      	mov	r2, r0
  403f46:	4868      	ldr	r0, [pc, #416]	; (4040e8 <wifi_task+0x250>)
  403f48:	4621      	mov	r1, r4
  403f4a:	4c68      	ldr	r4, [pc, #416]	; (4040ec <wifi_task+0x254>)
  403f4c:	47a0      	blx	r4
  403f4e:	486e      	ldr	r0, [pc, #440]	; (404108 <wifi_task+0x270>)
  403f50:	47a0      	blx	r4
  403f52:	4b61      	ldr	r3, [pc, #388]	; (4040d8 <wifi_task+0x240>)
  403f54:	6818      	ldr	r0, [r3, #0]
  403f56:	2100      	movs	r1, #0
  403f58:	460a      	mov	r2, r1
  403f5a:	460b      	mov	r3, r1
  403f5c:	4c65      	ldr	r4, [pc, #404]	; (4040f4 <wifi_task+0x25c>)
  403f5e:	47a0      	blx	r4
  403f60:	e002      	b.n	403f68 <wifi_task+0xd0>
  403f62:	4869      	ldr	r0, [pc, #420]	; (404108 <wifi_task+0x270>)
  403f64:	4b61      	ldr	r3, [pc, #388]	; (4040ec <wifi_task+0x254>)
  403f66:	4798      	blx	r3
	IoT_DEBUG(IoT_DBG_SERIOUS, ("serial_out task started\r\n"));
	
	//uint8_t test_len = sizeof(dataupload_t);
	//IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("test len: %d\r\n", test_len));

	serial_in_queue = IoT_xQueueCreate(SERIAL_IN_QUEUE_LEN, sizeof(void *));
  403f68:	2001      	movs	r0, #1
  403f6a:	2104      	movs	r1, #4
  403f6c:	2200      	movs	r2, #0
  403f6e:	4b67      	ldr	r3, [pc, #412]	; (40410c <wifi_task+0x274>)
  403f70:	4798      	blx	r3
  403f72:	4b67      	ldr	r3, [pc, #412]	; (404110 <wifi_task+0x278>)
  403f74:	6018      	str	r0, [r3, #0]
	if(serial_in_queue == NULL) {
  403f76:	bb08      	cbnz	r0, 403fbc <wifi_task+0x124>
		IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("Serial Queue In create failed\r\n"));
  403f78:	4b57      	ldr	r3, [pc, #348]	; (4040d8 <wifi_task+0x240>)
  403f7a:	6818      	ldr	r0, [r3, #0]
  403f7c:	b1d0      	cbz	r0, 403fb4 <wifi_task+0x11c>
  403f7e:	2100      	movs	r1, #0
  403f80:	f04f 32ff 	mov.w	r2, #4294967295
  403f84:	460b      	mov	r3, r1
  403f86:	4c55      	ldr	r4, [pc, #340]	; (4040dc <wifi_task+0x244>)
  403f88:	47a0      	blx	r4
  403f8a:	4b55      	ldr	r3, [pc, #340]	; (4040e0 <wifi_task+0x248>)
  403f8c:	4798      	blx	r3
  403f8e:	4604      	mov	r4, r0
  403f90:	2000      	movs	r0, #0
  403f92:	4b54      	ldr	r3, [pc, #336]	; (4040e4 <wifi_task+0x24c>)
  403f94:	4798      	blx	r3
  403f96:	4602      	mov	r2, r0
  403f98:	4853      	ldr	r0, [pc, #332]	; (4040e8 <wifi_task+0x250>)
  403f9a:	4621      	mov	r1, r4
  403f9c:	4c53      	ldr	r4, [pc, #332]	; (4040ec <wifi_task+0x254>)
  403f9e:	47a0      	blx	r4
  403fa0:	485c      	ldr	r0, [pc, #368]	; (404114 <wifi_task+0x27c>)
  403fa2:	47a0      	blx	r4
  403fa4:	4b4c      	ldr	r3, [pc, #304]	; (4040d8 <wifi_task+0x240>)
  403fa6:	6818      	ldr	r0, [r3, #0]
  403fa8:	2100      	movs	r1, #0
  403faa:	460a      	mov	r2, r1
  403fac:	460b      	mov	r3, r1
  403fae:	4c51      	ldr	r4, [pc, #324]	; (4040f4 <wifi_task+0x25c>)
  403fb0:	47a0      	blx	r4
  403fb2:	e002      	b.n	403fba <wifi_task+0x122>
  403fb4:	4857      	ldr	r0, [pc, #348]	; (404114 <wifi_task+0x27c>)
  403fb6:	4b4d      	ldr	r3, [pc, #308]	; (4040ec <wifi_task+0x254>)
  403fb8:	4798      	blx	r3
		while(true);
  403fba:	e7fe      	b.n	403fba <wifi_task+0x122>
	}
	serial_out_queue = IoT_xQueueCreate(SERIAL_OUT_QUEUE_LEN, sizeof(void *));
  403fbc:	2001      	movs	r0, #1
  403fbe:	2104      	movs	r1, #4
  403fc0:	2200      	movs	r2, #0
  403fc2:	4b52      	ldr	r3, [pc, #328]	; (40410c <wifi_task+0x274>)
  403fc4:	4798      	blx	r3
  403fc6:	4b54      	ldr	r3, [pc, #336]	; (404118 <wifi_task+0x280>)
  403fc8:	6018      	str	r0, [r3, #0]
	if(serial_out_queue == NULL) {
  403fca:	bb08      	cbnz	r0, 404010 <wifi_task+0x178>
		IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("Serial Queue Out create failed\r\n"));
  403fcc:	4b42      	ldr	r3, [pc, #264]	; (4040d8 <wifi_task+0x240>)
  403fce:	6818      	ldr	r0, [r3, #0]
  403fd0:	b1d0      	cbz	r0, 404008 <wifi_task+0x170>
  403fd2:	2100      	movs	r1, #0
  403fd4:	f04f 32ff 	mov.w	r2, #4294967295
  403fd8:	460b      	mov	r3, r1
  403fda:	4c40      	ldr	r4, [pc, #256]	; (4040dc <wifi_task+0x244>)
  403fdc:	47a0      	blx	r4
  403fde:	4b40      	ldr	r3, [pc, #256]	; (4040e0 <wifi_task+0x248>)
  403fe0:	4798      	blx	r3
  403fe2:	4604      	mov	r4, r0
  403fe4:	2000      	movs	r0, #0
  403fe6:	4b3f      	ldr	r3, [pc, #252]	; (4040e4 <wifi_task+0x24c>)
  403fe8:	4798      	blx	r3
  403fea:	4602      	mov	r2, r0
  403fec:	483e      	ldr	r0, [pc, #248]	; (4040e8 <wifi_task+0x250>)
  403fee:	4621      	mov	r1, r4
  403ff0:	4c3e      	ldr	r4, [pc, #248]	; (4040ec <wifi_task+0x254>)
  403ff2:	47a0      	blx	r4
  403ff4:	4849      	ldr	r0, [pc, #292]	; (40411c <wifi_task+0x284>)
  403ff6:	47a0      	blx	r4
  403ff8:	4b37      	ldr	r3, [pc, #220]	; (4040d8 <wifi_task+0x240>)
  403ffa:	6818      	ldr	r0, [r3, #0]
  403ffc:	2100      	movs	r1, #0
  403ffe:	460a      	mov	r2, r1
  404000:	460b      	mov	r3, r1
  404002:	4c3c      	ldr	r4, [pc, #240]	; (4040f4 <wifi_task+0x25c>)
  404004:	47a0      	blx	r4
  404006:	e002      	b.n	40400e <wifi_task+0x176>
  404008:	4844      	ldr	r0, [pc, #272]	; (40411c <wifi_task+0x284>)
  40400a:	4b38      	ldr	r3, [pc, #224]	; (4040ec <wifi_task+0x254>)
  40400c:	4798      	blx	r3
		while(true);
  40400e:	e7fe      	b.n	40400e <wifi_task+0x176>
	}
	
	IoT_xTaskCreate(wifi_in, "wifi_in", WIFI_RECV_TASK_STACK_SIZE, NULL, WIFI_RECV_TASK_PRIORITY, NULL);
  404010:	2305      	movs	r3, #5
  404012:	9300      	str	r3, [sp, #0]
  404014:	2300      	movs	r3, #0
  404016:	9301      	str	r3, [sp, #4]
  404018:	9302      	str	r3, [sp, #8]
  40401a:	9303      	str	r3, [sp, #12]
  40401c:	4840      	ldr	r0, [pc, #256]	; (404120 <wifi_task+0x288>)
  40401e:	4941      	ldr	r1, [pc, #260]	; (404124 <wifi_task+0x28c>)
  404020:	f44f 6280 	mov.w	r2, #1024	; 0x400
  404024:	4c40      	ldr	r4, [pc, #256]	; (404128 <wifi_task+0x290>)
  404026:	47a0      	blx	r4
	
	for(;;) {

		p_pdc = usart_get_pdc_base(WIFI_SERIAL_PORT);
  404028:	4e40      	ldr	r6, [pc, #256]	; (40412c <wifi_task+0x294>)
  40402a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 404144 <wifi_task+0x2ac>
		
		/* Pended here if no message received */
		IoT_xQueueReceive(serial_out_queue, &out_data, portMAX_DELAY);
  40402e:	4f3a      	ldr	r7, [pc, #232]	; (404118 <wifi_task+0x280>)
	
	IoT_xTaskCreate(wifi_in, "wifi_in", WIFI_RECV_TASK_STACK_SIZE, NULL, WIFI_RECV_TASK_PRIORITY, NULL);
	
	for(;;) {

		p_pdc = usart_get_pdc_base(WIFI_SERIAL_PORT);
  404030:	4630      	mov	r0, r6
  404032:	47c0      	blx	r8
  404034:	4604      	mov	r4, r0
		
		/* Pended here if no message received */
		IoT_xQueueReceive(serial_out_queue, &out_data, portMAX_DELAY);
  404036:	6838      	ldr	r0, [r7, #0]
  404038:	a925      	add	r1, sp, #148	; 0x94
  40403a:	f04f 32ff 	mov.w	r2, #4294967295
  40403e:	2300      	movs	r3, #0
  404040:	4d26      	ldr	r5, [pc, #152]	; (4040dc <wifi_task+0x244>)
  404042:	47a8      	blx	r5
		
		uint8_t rbuf[128];
		byte2hexstrstr(out_data->buf, out_data->len, rbuf, 128);
  404044:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404046:	6818      	ldr	r0, [r3, #0]
  404048:	6859      	ldr	r1, [r3, #4]
  40404a:	aa05      	add	r2, sp, #20
  40404c:	2380      	movs	r3, #128	; 0x80
  40404e:	4d38      	ldr	r5, [pc, #224]	; (404130 <wifi_task+0x298>)
  404050:	47a8      	blx	r5
		IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial OUT(%d): %s\r\n", out_data->len, rbuf));
  404052:	4b21      	ldr	r3, [pc, #132]	; (4040d8 <wifi_task+0x240>)
  404054:	6818      	ldr	r0, [r3, #0]
  404056:	b1e8      	cbz	r0, 404094 <wifi_task+0x1fc>
  404058:	2100      	movs	r1, #0
  40405a:	f04f 32ff 	mov.w	r2, #4294967295
  40405e:	460b      	mov	r3, r1
  404060:	4d1e      	ldr	r5, [pc, #120]	; (4040dc <wifi_task+0x244>)
  404062:	47a8      	blx	r5
  404064:	4b1e      	ldr	r3, [pc, #120]	; (4040e0 <wifi_task+0x248>)
  404066:	4798      	blx	r3
  404068:	4605      	mov	r5, r0
  40406a:	2000      	movs	r0, #0
  40406c:	4b1d      	ldr	r3, [pc, #116]	; (4040e4 <wifi_task+0x24c>)
  40406e:	4798      	blx	r3
  404070:	4602      	mov	r2, r0
  404072:	481d      	ldr	r0, [pc, #116]	; (4040e8 <wifi_task+0x250>)
  404074:	4629      	mov	r1, r5
  404076:	4d1d      	ldr	r5, [pc, #116]	; (4040ec <wifi_task+0x254>)
  404078:	47a8      	blx	r5
  40407a:	482e      	ldr	r0, [pc, #184]	; (404134 <wifi_task+0x29c>)
  40407c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40407e:	6859      	ldr	r1, [r3, #4]
  404080:	aa05      	add	r2, sp, #20
  404082:	47a8      	blx	r5
  404084:	4b14      	ldr	r3, [pc, #80]	; (4040d8 <wifi_task+0x240>)
  404086:	6818      	ldr	r0, [r3, #0]
  404088:	2100      	movs	r1, #0
  40408a:	460a      	mov	r2, r1
  40408c:	460b      	mov	r3, r1
  40408e:	4d19      	ldr	r5, [pc, #100]	; (4040f4 <wifi_task+0x25c>)
  404090:	47a8      	blx	r5
  404092:	e005      	b.n	4040a0 <wifi_task+0x208>
  404094:	4827      	ldr	r0, [pc, #156]	; (404134 <wifi_task+0x29c>)
  404096:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404098:	6859      	ldr	r1, [r3, #4]
  40409a:	aa05      	add	r2, sp, #20
  40409c:	4b13      	ldr	r3, [pc, #76]	; (4040ec <wifi_task+0x254>)
  40409e:	4798      	blx	r3

		packet.ul_addr = (uint32_t)out_data->buf;
  4040a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4040a2:	681a      	ldr	r2, [r3, #0]
  4040a4:	9226      	str	r2, [sp, #152]	; 0x98
		packet.ul_size = out_data->len;
  4040a6:	685b      	ldr	r3, [r3, #4]
  4040a8:	9327      	str	r3, [sp, #156]	; 0x9c
		
		pdc_tx_init(p_pdc, &packet, NULL);
  4040aa:	4620      	mov	r0, r4
  4040ac:	a926      	add	r1, sp, #152	; 0x98
  4040ae:	2200      	movs	r2, #0
  4040b0:	4b21      	ldr	r3, [pc, #132]	; (404138 <wifi_task+0x2a0>)
  4040b2:	4798      	blx	r3
		pdc_enable_transfer(p_pdc, PERIPH_PTCR_TXTEN);
  4040b4:	4620      	mov	r0, r4
  4040b6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4040ba:	4b20      	ldr	r3, [pc, #128]	; (40413c <wifi_task+0x2a4>)
  4040bc:	4798      	blx	r3
		usart_enable_interrupt(WIFI_SERIAL_PORT, US_IER_ENDTX);
  4040be:	4630      	mov	r0, r6
  4040c0:	2110      	movs	r1, #16
  4040c2:	4b1f      	ldr	r3, [pc, #124]	; (404140 <wifi_task+0x2a8>)
  4040c4:	4798      	blx	r3

	}
  4040c6:	e7b3      	b.n	404030 <wifi_task+0x198>
  4040c8:	00402af1 	.word	0x00402af1
  4040cc:	00407d4c 	.word	0x00407d4c
  4040d0:	00402225 	.word	0x00402225
  4040d4:	2001c530 	.word	0x2001c530
  4040d8:	2001cdac 	.word	0x2001cdac
  4040dc:	0040150d 	.word	0x0040150d
  4040e0:	004019a5 	.word	0x004019a5
  4040e4:	004019e5 	.word	0x004019e5
  4040e8:	004078f4 	.word	0x004078f4
  4040ec:	004045e9 	.word	0x004045e9
  4040f0:	00407d5c 	.word	0x00407d5c
  4040f4:	00401341 	.word	0x00401341
  4040f8:	0040295d 	.word	0x0040295d
  4040fc:	00407d7c 	.word	0x00407d7c
  404100:	2001c528 	.word	0x2001c528
  404104:	0040227d 	.word	0x0040227d
  404108:	00407d88 	.word	0x00407d88
  40410c:	004012e1 	.word	0x004012e1
  404110:	2001c3dc 	.word	0x2001c3dc
  404114:	00407da8 	.word	0x00407da8
  404118:	2001cda8 	.word	0x2001cda8
  40411c:	00407dc8 	.word	0x00407dc8
  404120:	00403e5d 	.word	0x00403e5d
  404124:	00407dec 	.word	0x00407dec
  404128:	00401715 	.word	0x00401715
  40412c:	4000c200 	.word	0x4000c200
  404130:	00402a71 	.word	0x00402a71
  404134:	00407df4 	.word	0x00407df4
  404138:	004005ad 	.word	0x004005ad
  40413c:	004005c5 	.word	0x004005c5
  404140:	004009ed 	.word	0x004009ed
  404144:	00400a2d 	.word	0x00400a2d

00404148 <vFNBtton_Click_Hook>:
}

void vFNBtton_Click_Hook( void )
{
  404148:	b570      	push	{r4, r5, r6, lr}
  40414a:	b084      	sub	sp, #16
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
  40414c:	2500      	movs	r5, #0
  40414e:	ac04      	add	r4, sp, #16
  404150:	f844 5d04 	str.w	r5, [r4, #-4]!
	
	xTimerStartFromISR(xConfigTimer, &xHigherPriorityTaskWoken );
  404154:	4b08      	ldr	r3, [pc, #32]	; (404178 <vFNBtton_Click_Hook+0x30>)
  404156:	681e      	ldr	r6, [r3, #0]
  404158:	4b08      	ldr	r3, [pc, #32]	; (40417c <vFNBtton_Click_Hook+0x34>)
  40415a:	4798      	blx	r3
  40415c:	4602      	mov	r2, r0
  40415e:	9500      	str	r5, [sp, #0]
  404160:	4630      	mov	r0, r6
  404162:	4629      	mov	r1, r5
  404164:	4623      	mov	r3, r4
  404166:	4c06      	ldr	r4, [pc, #24]	; (404180 <vFNBtton_Click_Hook+0x38>)
  404168:	47a0      	blx	r4
	if(xHigherPriorityTaskWoken != pdFALSE) {
  40416a:	9b03      	ldr	r3, [sp, #12]
  40416c:	b10b      	cbz	r3, 404172 <vFNBtton_Click_Hook+0x2a>
		IoT_vPortYieldFromISR();
  40416e:	4b05      	ldr	r3, [pc, #20]	; (404184 <vFNBtton_Click_Hook+0x3c>)
  404170:	4798      	blx	r3
	}
	
  404172:	b004      	add	sp, #16
  404174:	bd70      	pop	{r4, r5, r6, pc}
  404176:	bf00      	nop
  404178:	2001c530 	.word	0x2001c530
  40417c:	004019c5 	.word	0x004019c5
  404180:	0040227d 	.word	0x0040227d
  404184:	00400e95 	.word	0x00400e95

00404188 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  404188:	b5f0      	push	{r4, r5, r6, r7, lr}
  40418a:	b083      	sub	sp, #12
  40418c:	4604      	mov	r4, r0
  40418e:	460e      	mov	r6, r1
	uint32_t val = 0;
  404190:	2300      	movs	r3, #0
  404192:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404194:	4b34      	ldr	r3, [pc, #208]	; (404268 <usart_serial_getchar+0xe0>)
  404196:	4298      	cmp	r0, r3
  404198:	d109      	bne.n	4041ae <usart_serial_getchar+0x26>
		while (usart_read(p_usart, &val));
  40419a:	461f      	mov	r7, r3
  40419c:	4d33      	ldr	r5, [pc, #204]	; (40426c <usart_serial_getchar+0xe4>)
  40419e:	4638      	mov	r0, r7
  4041a0:	a901      	add	r1, sp, #4
  4041a2:	47a8      	blx	r5
  4041a4:	2800      	cmp	r0, #0
  4041a6:	d1fa      	bne.n	40419e <usart_serial_getchar+0x16>
		*data = (uint8_t)(val & 0xFF);
  4041a8:	9b01      	ldr	r3, [sp, #4]
  4041aa:	7033      	strb	r3, [r6, #0]
  4041ac:	e019      	b.n	4041e2 <usart_serial_getchar+0x5a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4041ae:	4b30      	ldr	r3, [pc, #192]	; (404270 <usart_serial_getchar+0xe8>)
  4041b0:	4298      	cmp	r0, r3
  4041b2:	d109      	bne.n	4041c8 <usart_serial_getchar+0x40>
		while (usart_read(p_usart, &val));
  4041b4:	461f      	mov	r7, r3
  4041b6:	4d2d      	ldr	r5, [pc, #180]	; (40426c <usart_serial_getchar+0xe4>)
  4041b8:	4638      	mov	r0, r7
  4041ba:	a901      	add	r1, sp, #4
  4041bc:	47a8      	blx	r5
  4041be:	2800      	cmp	r0, #0
  4041c0:	d1fa      	bne.n	4041b8 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
  4041c2:	9b01      	ldr	r3, [sp, #4]
  4041c4:	7033      	strb	r3, [r6, #0]
  4041c6:	e019      	b.n	4041fc <usart_serial_getchar+0x74>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4041c8:	4b2a      	ldr	r3, [pc, #168]	; (404274 <usart_serial_getchar+0xec>)
  4041ca:	4298      	cmp	r0, r3
  4041cc:	d109      	bne.n	4041e2 <usart_serial_getchar+0x5a>
		while (usart_read(p_usart, &val));
  4041ce:	461f      	mov	r7, r3
  4041d0:	4d26      	ldr	r5, [pc, #152]	; (40426c <usart_serial_getchar+0xe4>)
  4041d2:	4638      	mov	r0, r7
  4041d4:	a901      	add	r1, sp, #4
  4041d6:	47a8      	blx	r5
  4041d8:	2800      	cmp	r0, #0
  4041da:	d1fa      	bne.n	4041d2 <usart_serial_getchar+0x4a>
		*data = (uint8_t)(val & 0xFF);
  4041dc:	9b01      	ldr	r3, [sp, #4]
  4041de:	7033      	strb	r3, [r6, #0]
  4041e0:	e019      	b.n	404216 <usart_serial_getchar+0x8e>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  4041e2:	4b25      	ldr	r3, [pc, #148]	; (404278 <usart_serial_getchar+0xf0>)
  4041e4:	429c      	cmp	r4, r3
  4041e6:	d109      	bne.n	4041fc <usart_serial_getchar+0x74>
		while (usart_read(p_usart, &val));
  4041e8:	461f      	mov	r7, r3
  4041ea:	4d20      	ldr	r5, [pc, #128]	; (40426c <usart_serial_getchar+0xe4>)
  4041ec:	4638      	mov	r0, r7
  4041ee:	a901      	add	r1, sp, #4
  4041f0:	47a8      	blx	r5
  4041f2:	2800      	cmp	r0, #0
  4041f4:	d1fa      	bne.n	4041ec <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
  4041f6:	9b01      	ldr	r3, [sp, #4]
  4041f8:	7033      	strb	r3, [r6, #0]
  4041fa:	e019      	b.n	404230 <usart_serial_getchar+0xa8>
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  4041fc:	4b1f      	ldr	r3, [pc, #124]	; (40427c <usart_serial_getchar+0xf4>)
  4041fe:	429c      	cmp	r4, r3
  404200:	d109      	bne.n	404216 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
  404202:	461f      	mov	r7, r3
  404204:	4d19      	ldr	r5, [pc, #100]	; (40426c <usart_serial_getchar+0xe4>)
  404206:	4638      	mov	r0, r7
  404208:	a901      	add	r1, sp, #4
  40420a:	47a8      	blx	r5
  40420c:	2800      	cmp	r0, #0
  40420e:	d1fa      	bne.n	404206 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  404210:	9b01      	ldr	r3, [sp, #4]
  404212:	7033      	strb	r3, [r6, #0]
  404214:	e019      	b.n	40424a <usart_serial_getchar+0xc2>
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  404216:	4b1a      	ldr	r3, [pc, #104]	; (404280 <usart_serial_getchar+0xf8>)
  404218:	429c      	cmp	r4, r3
  40421a:	d109      	bne.n	404230 <usart_serial_getchar+0xa8>
		while (usart_read(p_usart, &val));
  40421c:	461d      	mov	r5, r3
  40421e:	4c13      	ldr	r4, [pc, #76]	; (40426c <usart_serial_getchar+0xe4>)
  404220:	4628      	mov	r0, r5
  404222:	a901      	add	r1, sp, #4
  404224:	47a0      	blx	r4
  404226:	2800      	cmp	r0, #0
  404228:	d1fa      	bne.n	404220 <usart_serial_getchar+0x98>
		*data = (uint8_t)(val & 0xFF);
  40422a:	9b01      	ldr	r3, [sp, #4]
  40422c:	7033      	strb	r3, [r6, #0]
  40422e:	e018      	b.n	404262 <usart_serial_getchar+0xda>
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  404230:	4b14      	ldr	r3, [pc, #80]	; (404284 <usart_serial_getchar+0xfc>)
  404232:	429c      	cmp	r4, r3
  404234:	d109      	bne.n	40424a <usart_serial_getchar+0xc2>
		while (usart_read(p_usart, &val));
  404236:	461d      	mov	r5, r3
  404238:	4c0c      	ldr	r4, [pc, #48]	; (40426c <usart_serial_getchar+0xe4>)
  40423a:	4628      	mov	r0, r5
  40423c:	a901      	add	r1, sp, #4
  40423e:	47a0      	blx	r4
  404240:	2800      	cmp	r0, #0
  404242:	d1fa      	bne.n	40423a <usart_serial_getchar+0xb2>
		*data = (uint8_t)(val & 0xFF);
  404244:	9b01      	ldr	r3, [sp, #4]
  404246:	7033      	strb	r3, [r6, #0]
  404248:	e00b      	b.n	404262 <usart_serial_getchar+0xda>
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  40424a:	4b0f      	ldr	r3, [pc, #60]	; (404288 <usart_serial_getchar+0x100>)
  40424c:	429c      	cmp	r4, r3
  40424e:	d108      	bne.n	404262 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  404250:	461d      	mov	r5, r3
  404252:	4c06      	ldr	r4, [pc, #24]	; (40426c <usart_serial_getchar+0xe4>)
  404254:	4628      	mov	r0, r5
  404256:	a901      	add	r1, sp, #4
  404258:	47a0      	blx	r4
  40425a:	2800      	cmp	r0, #0
  40425c:	d1fa      	bne.n	404254 <usart_serial_getchar+0xcc>
		*data = (uint8_t)(val & 0xFF);
  40425e:	9b01      	ldr	r3, [sp, #4]
  404260:	7033      	strb	r3, [r6, #0]
	}
# endif
#endif /* ifdef USART */

}
  404262:	b003      	add	sp, #12
  404264:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404266:	bf00      	nop
  404268:	4000c200 	.word	0x4000c200
  40426c:	00400a15 	.word	0x00400a15
  404270:	40020200 	.word	0x40020200
  404274:	40024200 	.word	0x40024200
  404278:	40018200 	.word	0x40018200
  40427c:	4001c200 	.word	0x4001c200
  404280:	40008200 	.word	0x40008200
  404284:	40040200 	.word	0x40040200
  404288:	40034200 	.word	0x40034200

0040428c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40428c:	b570      	push	{r4, r5, r6, lr}
  40428e:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404290:	4b30      	ldr	r3, [pc, #192]	; (404354 <usart_serial_putchar+0xc8>)
  404292:	4298      	cmp	r0, r3
  404294:	d108      	bne.n	4042a8 <usart_serial_putchar+0x1c>
		while (usart_write(p_usart, c)!=0);
  404296:	461e      	mov	r6, r3
  404298:	4d2f      	ldr	r5, [pc, #188]	; (404358 <usart_serial_putchar+0xcc>)
  40429a:	4630      	mov	r0, r6
  40429c:	4621      	mov	r1, r4
  40429e:	47a8      	blx	r5
  4042a0:	2800      	cmp	r0, #0
  4042a2:	d1fa      	bne.n	40429a <usart_serial_putchar+0xe>
		return 1;
  4042a4:	2001      	movs	r0, #1
  4042a6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4042a8:	4b2c      	ldr	r3, [pc, #176]	; (40435c <usart_serial_putchar+0xd0>)
  4042aa:	4298      	cmp	r0, r3
  4042ac:	d108      	bne.n	4042c0 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
  4042ae:	461e      	mov	r6, r3
  4042b0:	4d29      	ldr	r5, [pc, #164]	; (404358 <usart_serial_putchar+0xcc>)
  4042b2:	4630      	mov	r0, r6
  4042b4:	4621      	mov	r1, r4
  4042b6:	47a8      	blx	r5
  4042b8:	2800      	cmp	r0, #0
  4042ba:	d1fa      	bne.n	4042b2 <usart_serial_putchar+0x26>
		return 1;
  4042bc:	2001      	movs	r0, #1
  4042be:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4042c0:	4b27      	ldr	r3, [pc, #156]	; (404360 <usart_serial_putchar+0xd4>)
  4042c2:	4298      	cmp	r0, r3
  4042c4:	d108      	bne.n	4042d8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4042c6:	461e      	mov	r6, r3
  4042c8:	4d23      	ldr	r5, [pc, #140]	; (404358 <usart_serial_putchar+0xcc>)
  4042ca:	4630      	mov	r0, r6
  4042cc:	4621      	mov	r1, r4
  4042ce:	47a8      	blx	r5
  4042d0:	2800      	cmp	r0, #0
  4042d2:	d1fa      	bne.n	4042ca <usart_serial_putchar+0x3e>
		return 1;
  4042d4:	2001      	movs	r0, #1
  4042d6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  4042d8:	4b22      	ldr	r3, [pc, #136]	; (404364 <usart_serial_putchar+0xd8>)
  4042da:	4298      	cmp	r0, r3
  4042dc:	d108      	bne.n	4042f0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4042de:	461e      	mov	r6, r3
  4042e0:	4d1d      	ldr	r5, [pc, #116]	; (404358 <usart_serial_putchar+0xcc>)
  4042e2:	4630      	mov	r0, r6
  4042e4:	4621      	mov	r1, r4
  4042e6:	47a8      	blx	r5
  4042e8:	2800      	cmp	r0, #0
  4042ea:	d1fa      	bne.n	4042e2 <usart_serial_putchar+0x56>
		return 1;
  4042ec:	2001      	movs	r0, #1
  4042ee:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  4042f0:	4b1d      	ldr	r3, [pc, #116]	; (404368 <usart_serial_putchar+0xdc>)
  4042f2:	4298      	cmp	r0, r3
  4042f4:	d108      	bne.n	404308 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  4042f6:	461e      	mov	r6, r3
  4042f8:	4d17      	ldr	r5, [pc, #92]	; (404358 <usart_serial_putchar+0xcc>)
  4042fa:	4630      	mov	r0, r6
  4042fc:	4621      	mov	r1, r4
  4042fe:	47a8      	blx	r5
  404300:	2800      	cmp	r0, #0
  404302:	d1fa      	bne.n	4042fa <usart_serial_putchar+0x6e>
		return 1;
  404304:	2001      	movs	r0, #1
  404306:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  404308:	4b18      	ldr	r3, [pc, #96]	; (40436c <usart_serial_putchar+0xe0>)
  40430a:	4298      	cmp	r0, r3
  40430c:	d108      	bne.n	404320 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  40430e:	461e      	mov	r6, r3
  404310:	4d11      	ldr	r5, [pc, #68]	; (404358 <usart_serial_putchar+0xcc>)
  404312:	4630      	mov	r0, r6
  404314:	4621      	mov	r1, r4
  404316:	47a8      	blx	r5
  404318:	2800      	cmp	r0, #0
  40431a:	d1fa      	bne.n	404312 <usart_serial_putchar+0x86>
		return 1;
  40431c:	2001      	movs	r0, #1
  40431e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  404320:	4b13      	ldr	r3, [pc, #76]	; (404370 <usart_serial_putchar+0xe4>)
  404322:	4298      	cmp	r0, r3
  404324:	d108      	bne.n	404338 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  404326:	461e      	mov	r6, r3
  404328:	4d0b      	ldr	r5, [pc, #44]	; (404358 <usart_serial_putchar+0xcc>)
  40432a:	4630      	mov	r0, r6
  40432c:	4621      	mov	r1, r4
  40432e:	47a8      	blx	r5
  404330:	2800      	cmp	r0, #0
  404332:	d1fa      	bne.n	40432a <usart_serial_putchar+0x9e>
		return 1;
  404334:	2001      	movs	r0, #1
  404336:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  404338:	4b0e      	ldr	r3, [pc, #56]	; (404374 <usart_serial_putchar+0xe8>)
  40433a:	4298      	cmp	r0, r3
  40433c:	d108      	bne.n	404350 <usart_serial_putchar+0xc4>
		while (usart_write(p_usart, c)!=0);
  40433e:	461e      	mov	r6, r3
  404340:	4d05      	ldr	r5, [pc, #20]	; (404358 <usart_serial_putchar+0xcc>)
  404342:	4630      	mov	r0, r6
  404344:	4621      	mov	r1, r4
  404346:	47a8      	blx	r5
  404348:	2800      	cmp	r0, #0
  40434a:	d1fa      	bne.n	404342 <usart_serial_putchar+0xb6>
		return 1;
  40434c:	2001      	movs	r0, #1
  40434e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
#endif /* ifdef USART */

	return 0;
  404350:	2000      	movs	r0, #0
}
  404352:	bd70      	pop	{r4, r5, r6, pc}
  404354:	4000c200 	.word	0x4000c200
  404358:	00400a01 	.word	0x00400a01
  40435c:	40020200 	.word	0x40020200
  404360:	40024200 	.word	0x40024200
  404364:	40018200 	.word	0x40018200
  404368:	4001c200 	.word	0x4001c200
  40436c:	40008200 	.word	0x40008200
  404370:	40040200 	.word	0x40040200
  404374:	40034200 	.word	0x40034200

00404378 <main>:
	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART_CONSOLE, &uart_serial_options);
}

int main(void){
  404378:	b580      	push	{r7, lr}
  40437a:	b08a      	sub	sp, #40	; 0x28
/*-----------------------------------------------------------*/

static void prvSetupHardware(void)
{
	/* ASF function to setup clocking. */
	sysclk_init();
  40437c:	4b34      	ldr	r3, [pc, #208]	; (404450 <main+0xd8>)
  40437e:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  404380:	4a34      	ldr	r2, [pc, #208]	; (404454 <main+0xdc>)
  404382:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  404384:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  404388:	041b      	lsls	r3, r3, #16
  40438a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                 |
  40438c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  404390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  404394:	60d3      	str	r3, [r2, #12]
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();	
  404396:	4b30      	ldr	r3, [pc, #192]	; (404458 <main+0xe0>)
  404398:	4798      	blx	r3
  40439a:	2014      	movs	r0, #20
  40439c:	4b2f      	ldr	r3, [pc, #188]	; (40445c <main+0xe4>)
  40439e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4043a0:	4d2f      	ldr	r5, [pc, #188]	; (404460 <main+0xe8>)
  4043a2:	4b30      	ldr	r3, [pc, #192]	; (404464 <main+0xec>)
  4043a4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4043a6:	4a30      	ldr	r2, [pc, #192]	; (404468 <main+0xf0>)
  4043a8:	4b30      	ldr	r3, [pc, #192]	; (40446c <main+0xf4>)
  4043aa:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4043ac:	4a30      	ldr	r2, [pc, #192]	; (404470 <main+0xf8>)
  4043ae:	4b31      	ldr	r3, [pc, #196]	; (404474 <main+0xfc>)
  4043b0:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4043b2:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  4043b6:	9704      	str	r7, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4043b8:	23c0      	movs	r3, #192	; 0xc0
  4043ba:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4043bc:	f44f 6600 	mov.w	r6, #2048	; 0x800
  4043c0:	9606      	str	r6, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4043c2:	2400      	movs	r4, #0
  4043c4:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4043c6:	9408      	str	r4, [sp, #32]
# endif
# ifdef USART4
	if (USART4 == p_usart) {
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM4);
  4043c8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 4044c0 <main+0x148>
  4043cc:	4640      	mov	r0, r8
  4043ce:	4b2a      	ldr	r3, [pc, #168]	; (404478 <main+0x100>)
  4043d0:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM4, FLEXCOM_USART);
  4043d2:	4640      	mov	r0, r8
  4043d4:	2101      	movs	r1, #1
  4043d6:	4b29      	ldr	r3, [pc, #164]	; (40447c <main+0x104>)
  4043d8:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART4);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4043da:	4628      	mov	r0, r5
  4043dc:	a904      	add	r1, sp, #16
  4043de:	4a28      	ldr	r2, [pc, #160]	; (404480 <main+0x108>)
  4043e0:	4b28      	ldr	r3, [pc, #160]	; (404484 <main+0x10c>)
  4043e2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4043e4:	4628      	mov	r0, r5
  4043e6:	4b28      	ldr	r3, [pc, #160]	; (404488 <main+0x110>)
  4043e8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4043ea:	4628      	mov	r0, r5
  4043ec:	4b27      	ldr	r3, [pc, #156]	; (40448c <main+0x114>)
  4043ee:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4043f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 4044c4 <main+0x14c>
  4043f4:	f8d8 3000 	ldr.w	r3, [r8]
  4043f8:	6898      	ldr	r0, [r3, #8]
  4043fa:	4621      	mov	r1, r4
  4043fc:	4d24      	ldr	r5, [pc, #144]	; (404490 <main+0x118>)
  4043fe:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404400:	f8d8 3000 	ldr.w	r3, [r8]
  404404:	6858      	ldr	r0, [r3, #4]
  404406:	4621      	mov	r1, r4
  404408:	47a8      	blx	r5
	/* Prepare the console*/
	configure_console();
	
	tSensor_serial_init();
  40440a:	4b22      	ldr	r3, [pc, #136]	; (404494 <main+0x11c>)
  40440c:	4798      	blx	r3
	wifi_serial_init(BIT_RATE_115200);
  40440e:	4638      	mov	r0, r7
  404410:	4b21      	ldr	r3, [pc, #132]	; (404498 <main+0x120>)
  404412:	4798      	blx	r3
	
	puts(STRING_HEADER);
  404414:	4821      	ldr	r0, [pc, #132]	; (40449c <main+0x124>)
  404416:	4b22      	ldr	r3, [pc, #136]	; (4044a0 <main+0x128>)
  404418:	4798      	blx	r3
	/* Prepare the hardware to run this demo. */
	prvSetupHardware();
	
#ifdef __IoT_DEBUG__
	//void create_dbg_sem();
	create_dbg_sem();
  40441a:	4b22      	ldr	r3, [pc, #136]	; (4044a4 <main+0x12c>)
  40441c:	4798      	blx	r3
#endif

	if(xTaskCreate(wifi_task, "wifi_task", WIFI_SERIAL_TASK_STACK_SIZE, NULL, WIFI_SERIAL_TASK_PRIORITY, NULL) != pdPASS)
  40441e:	2304      	movs	r3, #4
  404420:	9300      	str	r3, [sp, #0]
  404422:	9401      	str	r4, [sp, #4]
  404424:	9402      	str	r4, [sp, #8]
  404426:	9403      	str	r4, [sp, #12]
  404428:	481f      	ldr	r0, [pc, #124]	; (4044a8 <main+0x130>)
  40442a:	4920      	ldr	r1, [pc, #128]	; (4044ac <main+0x134>)
  40442c:	4632      	mov	r2, r6
  40442e:	4623      	mov	r3, r4
  404430:	4d1f      	ldr	r5, [pc, #124]	; (4044b0 <main+0x138>)
  404432:	47a8      	blx	r5
	{
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_WARNING, ("wifi task create failed\r\n"));
	}
	
	//task for processing temperature module data
	if (xTaskCreate(sensor_task, "sensor_task", TSENSOR_TASK_STACK_SIZE, NULL, TSENSOR_TASK_PRIORITY, NULL)!=pdPASS){
  404434:	2301      	movs	r3, #1
  404436:	9300      	str	r3, [sp, #0]
  404438:	9401      	str	r4, [sp, #4]
  40443a:	9402      	str	r4, [sp, #8]
  40443c:	9403      	str	r4, [sp, #12]
  40443e:	481d      	ldr	r0, [pc, #116]	; (4044b4 <main+0x13c>)
  404440:	491d      	ldr	r1, [pc, #116]	; (4044b8 <main+0x140>)
  404442:	4632      	mov	r2, r6
  404444:	4623      	mov	r3, r4
  404446:	47a8      	blx	r5
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_WARNING, ("sensor task create failed\r\n"));
	}
	
	/* Start the RTOS scheduler. */
	vTaskStartScheduler();
  404448:	4b1c      	ldr	r3, [pc, #112]	; (4044bc <main+0x144>)
  40444a:	4798      	blx	r3
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for (;;) {
	}
  40444c:	e7fe      	b.n	40444c <main+0xd4>
  40444e:	bf00      	nop
  404450:	004001a5 	.word	0x004001a5
  404454:	e000ed00 	.word	0xe000ed00
  404458:	004002b1 	.word	0x004002b1
  40445c:	00400841 	.word	0x00400841
  404460:	4001c200 	.word	0x4001c200
  404464:	2001cdf8 	.word	0x2001cdf8
  404468:	0040428d 	.word	0x0040428d
  40446c:	2001cdf4 	.word	0x2001cdf4
  404470:	00404189 	.word	0x00404189
  404474:	2001cdf0 	.word	0x2001cdf0
  404478:	00400439 	.word	0x00400439
  40447c:	004005a9 	.word	0x004005a9
  404480:	07270000 	.word	0x07270000
  404484:	00400985 	.word	0x00400985
  404488:	004009d9 	.word	0x004009d9
  40448c:	004009e1 	.word	0x004009e1
  404490:	004048b1 	.word	0x004048b1
  404494:	0040256d 	.word	0x0040256d
  404498:	00402d11 	.word	0x00402d11
  40449c:	00407e0c 	.word	0x00407e0c
  4044a0:	004048a1 	.word	0x004048a1
  4044a4:	00404509 	.word	0x00404509
  4044a8:	00403e99 	.word	0x00403e99
  4044ac:	00407e64 	.word	0x00407e64
  4044b0:	00401715 	.word	0x00401715
  4044b4:	00402849 	.word	0x00402849
  4044b8:	00407e70 	.word	0x00407e70
  4044bc:	00401919 	.word	0x00401919
  4044c0:	4001c000 	.word	0x4001c000
  4044c4:	20000460 	.word	0x20000460

004044c8 <vApplicationMallocFailedHook>:
}

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook(void)
{
  4044c8:	b508      	push	{r3, lr}
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("vApplicationMallocFailedHook\r\n"));
	taskDISABLE_INTERRUPTS();
  4044ca:	4b01      	ldr	r3, [pc, #4]	; (4044d0 <vApplicationMallocFailedHook+0x8>)
  4044cc:	4798      	blx	r3
	for (;;) {
	}
  4044ce:	e7fe      	b.n	4044ce <vApplicationMallocFailedHook+0x6>
  4044d0:	00400ea5 	.word	0x00400ea5

004044d4 <vApplicationStackOverflowHook>:

/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook(xTaskHandle pxTask,
		signed char *pcTaskName)
{
  4044d4:	b508      	push	{r3, lr}

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("vApplicationStackOverflowHook\r\n"));
	taskDISABLE_INTERRUPTS();
  4044d6:	4b01      	ldr	r3, [pc, #4]	; (4044dc <vApplicationStackOverflowHook+0x8>)
  4044d8:	4798      	blx	r3
	for (;;) {
	}
  4044da:	e7fe      	b.n	4044da <vApplicationStackOverflowHook+0x6>
  4044dc:	00400ea5 	.word	0x00400ea5

004044e0 <assert_triggered>:
}

/*-----------------------------------------------------------*/

void assert_triggered(const char *file, uint32_t line)
{
  4044e0:	b500      	push	{lr}
  4044e2:	b083      	sub	sp, #12
	volatile uint32_t block_var = 0, line_in;
  4044e4:	2300      	movs	r3, #0
  4044e6:	9301      	str	r3, [sp, #4]
	const char *file_in;

	/* These assignments are made to prevent the compiler optimizing the
	values away. */
	file_in = file;
	line_in = line;
  4044e8:	9100      	str	r1, [sp, #0]
	(void) file_in;
	(void) line_in;
  4044ea:	9b00      	ldr	r3, [sp, #0]

	taskENTER_CRITICAL();
  4044ec:	4b04      	ldr	r3, [pc, #16]	; (404500 <assert_triggered+0x20>)
  4044ee:	4798      	blx	r3
	{
		while (block_var == 0) {
  4044f0:	9b01      	ldr	r3, [sp, #4]
  4044f2:	2b00      	cmp	r3, #0
  4044f4:	d0fc      	beq.n	4044f0 <assert_triggered+0x10>
			/* Set block_var to a non-zero value in the debugger to
			step out of this function. */
		}
	}
	taskEXIT_CRITICAL();
  4044f6:	4b03      	ldr	r3, [pc, #12]	; (404504 <assert_triggered+0x24>)
  4044f8:	4798      	blx	r3
}
  4044fa:	b003      	add	sp, #12
  4044fc:	f85d fb04 	ldr.w	pc, [sp], #4
  404500:	00400eb5 	.word	0x00400eb5
  404504:	00400ed5 	.word	0x00400ed5

00404508 <create_dbg_sem>:

xSemaphoreHandle xsem_dbg = NULL;


void create_dbg_sem(void)
{
  404508:	b510      	push	{r4, lr}
	IoT_vSemaphoreCreateBinary(xsem_dbg);
  40450a:	2001      	movs	r0, #1
  40450c:	2100      	movs	r1, #0
  40450e:	2203      	movs	r2, #3
  404510:	4b05      	ldr	r3, [pc, #20]	; (404528 <create_dbg_sem+0x20>)
  404512:	4798      	blx	r3
  404514:	4b05      	ldr	r3, [pc, #20]	; (40452c <create_dbg_sem+0x24>)
  404516:	6018      	str	r0, [r3, #0]
  404518:	b120      	cbz	r0, 404524 <create_dbg_sem+0x1c>
  40451a:	2100      	movs	r1, #0
  40451c:	460a      	mov	r2, r1
  40451e:	460b      	mov	r3, r1
  404520:	4c03      	ldr	r4, [pc, #12]	; (404530 <create_dbg_sem+0x28>)
  404522:	47a0      	blx	r4
  404524:	bd10      	pop	{r4, pc}
  404526:	bf00      	nop
  404528:	004012e1 	.word	0x004012e1
  40452c:	2001cdac 	.word	0x2001cdac
  404530:	00401341 	.word	0x00401341

00404534 <configure_timer_for_run_time_stats>:
/*-----------------------------------------------------------*/

void configure_timer_for_run_time_stats(void)
{
	/* How many clocks are there per tenth of a millisecond? */
	clocks_per_10th_ms = configCPU_CLOCK_HZ / 10000UL;
  404534:	f642 62df 	movw	r2, #11999	; 0x2edf
  404538:	4b01      	ldr	r3, [pc, #4]	; (404540 <configure_timer_for_run_time_stats+0xc>)
  40453a:	601a      	str	r2, [r3, #0]
  40453c:	4770      	bx	lr
  40453e:	bf00      	nop
  404540:	2001cdb0 	.word	0x2001cdb0

00404544 <get_run_time_counter_value>:
}

/*-----------------------------------------------------------*/

uint32_t get_run_time_counter_value(void)
{
  404544:	b538      	push	{r3, r4, r5, lr}
	used anyway to keep the examples simple, and to avoid reliance on a
	separate timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it
	was last reloaded? */
	sys_tick_counts = sys_tick_reload_value - *current_sys_tick_count;
  404546:	4b0f      	ldr	r3, [pc, #60]	; (404584 <get_run_time_counter_value+0x40>)
  404548:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	tick_count = xTaskGetTickCountFromISR();
  40454a:	4b0f      	ldr	r3, [pc, #60]	; (404588 <get_run_time_counter_value+0x44>)
  40454c:	4798      	blx	r3
  40454e:	4605      	mov	r5, r0

	/* This is called from the context switch, so will be called from a
	critical section.  xTaskGetTickCountFromISR() contains its own critical
	section, and the ISR safe critical sections are not designed to nest,
	so reset the critical section. */
	ulReturn = portSET_INTERRUPT_MASK_FROM_ISR();
  404550:	4b0e      	ldr	r3, [pc, #56]	; (40458c <get_run_time_counter_value+0x48>)
  404552:	4798      	blx	r3
	(void) ulReturn;

	/* Is there a SysTick interrupt pending? */
	if ((*interrupt_ctrl_statee & sys_tick_pending_bit) != 0UL) {
  404554:	4b0e      	ldr	r3, [pc, #56]	; (404590 <get_run_time_counter_value+0x4c>)
  404556:	681b      	ldr	r3, [r3, #0]
  404558:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  40455c:	d103      	bne.n	404566 <get_run_time_counter_value+0x22>
	used anyway to keep the examples simple, and to avoid reliance on a
	separate timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it
	was last reloaded? */
	sys_tick_counts = sys_tick_reload_value - *current_sys_tick_count;
  40455e:	f5c4 33ea 	rsb	r3, r4, #119808	; 0x1d400
  404562:	33bb      	adds	r3, #187	; 0xbb
  404564:	e005      	b.n	404572 <get_run_time_counter_value+0x2e>

	/* Is there a SysTick interrupt pending? */
	if ((*interrupt_ctrl_statee & sys_tick_pending_bit) != 0UL) {
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		tick_count++;
  404566:	3501      	adds	r5, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		sys_tick_counts = sys_tick_reload_value -
				*current_sys_tick_count;
  404568:	4b06      	ldr	r3, [pc, #24]	; (404584 <get_run_time_counter_value+0x40>)
  40456a:	681b      	ldr	r3, [r3, #0]
		but the tick count not yet incremented. */
		tick_count++;

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		sys_tick_counts = sys_tick_reload_value -
  40456c:	f5c3 33ea 	rsb	r3, r3, #119808	; 0x1d400
  404570:	33bb      	adds	r3, #187	; 0xbb
				*current_sys_tick_count;
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = (tick_count * 10UL);
  404572:	eb05 0585 	add.w	r5, r5, r5, lsl #2

	/* Add on the number of tenths of a millisecond that have passed since
	the tick count last got updated. */
	ulReturn += (sys_tick_counts / clocks_per_10th_ms);
  404576:	4a07      	ldr	r2, [pc, #28]	; (404594 <get_run_time_counter_value+0x50>)
  404578:	6810      	ldr	r0, [r2, #0]
  40457a:	fbb3 f0f0 	udiv	r0, r3, r0

	return ulReturn;
}
  40457e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  404582:	bd38      	pop	{r3, r4, r5, pc}
  404584:	e000e018 	.word	0xe000e018
  404588:	004019c5 	.word	0x004019c5
  40458c:	00400ea5 	.word	0x00400ea5
  404590:	e000ed04 	.word	0xe000ed04
  404594:	2001cdb0 	.word	0x2001cdb0

00404598 <__libc_init_array>:
  404598:	b570      	push	{r4, r5, r6, lr}
  40459a:	4e0f      	ldr	r6, [pc, #60]	; (4045d8 <__libc_init_array+0x40>)
  40459c:	4d0f      	ldr	r5, [pc, #60]	; (4045dc <__libc_init_array+0x44>)
  40459e:	1b76      	subs	r6, r6, r5
  4045a0:	10b6      	asrs	r6, r6, #2
  4045a2:	bf18      	it	ne
  4045a4:	2400      	movne	r4, #0
  4045a6:	d005      	beq.n	4045b4 <__libc_init_array+0x1c>
  4045a8:	3401      	adds	r4, #1
  4045aa:	f855 3b04 	ldr.w	r3, [r5], #4
  4045ae:	4798      	blx	r3
  4045b0:	42a6      	cmp	r6, r4
  4045b2:	d1f9      	bne.n	4045a8 <__libc_init_array+0x10>
  4045b4:	4e0a      	ldr	r6, [pc, #40]	; (4045e0 <__libc_init_array+0x48>)
  4045b6:	4d0b      	ldr	r5, [pc, #44]	; (4045e4 <__libc_init_array+0x4c>)
  4045b8:	1b76      	subs	r6, r6, r5
  4045ba:	f003 fc81 	bl	407ec0 <_init>
  4045be:	10b6      	asrs	r6, r6, #2
  4045c0:	bf18      	it	ne
  4045c2:	2400      	movne	r4, #0
  4045c4:	d006      	beq.n	4045d4 <__libc_init_array+0x3c>
  4045c6:	3401      	adds	r4, #1
  4045c8:	f855 3b04 	ldr.w	r3, [r5], #4
  4045cc:	4798      	blx	r3
  4045ce:	42a6      	cmp	r6, r4
  4045d0:	d1f9      	bne.n	4045c6 <__libc_init_array+0x2e>
  4045d2:	bd70      	pop	{r4, r5, r6, pc}
  4045d4:	bd70      	pop	{r4, r5, r6, pc}
  4045d6:	bf00      	nop
  4045d8:	00407ecc 	.word	0x00407ecc
  4045dc:	00407ecc 	.word	0x00407ecc
  4045e0:	00407ed4 	.word	0x00407ed4
  4045e4:	00407ecc 	.word	0x00407ecc

004045e8 <iprintf>:
  4045e8:	b40f      	push	{r0, r1, r2, r3}
  4045ea:	b500      	push	{lr}
  4045ec:	4907      	ldr	r1, [pc, #28]	; (40460c <iprintf+0x24>)
  4045ee:	b083      	sub	sp, #12
  4045f0:	ab04      	add	r3, sp, #16
  4045f2:	6808      	ldr	r0, [r1, #0]
  4045f4:	f853 2b04 	ldr.w	r2, [r3], #4
  4045f8:	6881      	ldr	r1, [r0, #8]
  4045fa:	9301      	str	r3, [sp, #4]
  4045fc:	f000 fa7a 	bl	404af4 <_vfiprintf_r>
  404600:	b003      	add	sp, #12
  404602:	f85d eb04 	ldr.w	lr, [sp], #4
  404606:	b004      	add	sp, #16
  404608:	4770      	bx	lr
  40460a:	bf00      	nop
  40460c:	20000460 	.word	0x20000460

00404610 <memcmp>:
  404610:	2a03      	cmp	r2, #3
  404612:	b470      	push	{r4, r5, r6}
  404614:	d926      	bls.n	404664 <memcmp+0x54>
  404616:	ea40 0301 	orr.w	r3, r0, r1
  40461a:	079b      	lsls	r3, r3, #30
  40461c:	d011      	beq.n	404642 <memcmp+0x32>
  40461e:	7804      	ldrb	r4, [r0, #0]
  404620:	780d      	ldrb	r5, [r1, #0]
  404622:	42ac      	cmp	r4, r5
  404624:	d122      	bne.n	40466c <memcmp+0x5c>
  404626:	4402      	add	r2, r0
  404628:	1c43      	adds	r3, r0, #1
  40462a:	e005      	b.n	404638 <memcmp+0x28>
  40462c:	f813 4b01 	ldrb.w	r4, [r3], #1
  404630:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  404634:	42ac      	cmp	r4, r5
  404636:	d119      	bne.n	40466c <memcmp+0x5c>
  404638:	4293      	cmp	r3, r2
  40463a:	d1f7      	bne.n	40462c <memcmp+0x1c>
  40463c:	2000      	movs	r0, #0
  40463e:	bc70      	pop	{r4, r5, r6}
  404640:	4770      	bx	lr
  404642:	460c      	mov	r4, r1
  404644:	4603      	mov	r3, r0
  404646:	681e      	ldr	r6, [r3, #0]
  404648:	6825      	ldr	r5, [r4, #0]
  40464a:	42ae      	cmp	r6, r5
  40464c:	4618      	mov	r0, r3
  40464e:	4621      	mov	r1, r4
  404650:	f103 0304 	add.w	r3, r3, #4
  404654:	f104 0404 	add.w	r4, r4, #4
  404658:	d104      	bne.n	404664 <memcmp+0x54>
  40465a:	3a04      	subs	r2, #4
  40465c:	2a03      	cmp	r2, #3
  40465e:	4618      	mov	r0, r3
  404660:	4621      	mov	r1, r4
  404662:	d8f0      	bhi.n	404646 <memcmp+0x36>
  404664:	2a00      	cmp	r2, #0
  404666:	d1da      	bne.n	40461e <memcmp+0xe>
  404668:	4610      	mov	r0, r2
  40466a:	e7e8      	b.n	40463e <memcmp+0x2e>
  40466c:	1b60      	subs	r0, r4, r5
  40466e:	bc70      	pop	{r4, r5, r6}
  404670:	4770      	bx	lr
  404672:	bf00      	nop

00404674 <memcpy>:
  404674:	4684      	mov	ip, r0
  404676:	ea41 0300 	orr.w	r3, r1, r0
  40467a:	f013 0303 	ands.w	r3, r3, #3
  40467e:	d16d      	bne.n	40475c <memcpy+0xe8>
  404680:	3a40      	subs	r2, #64	; 0x40
  404682:	d341      	bcc.n	404708 <memcpy+0x94>
  404684:	f851 3b04 	ldr.w	r3, [r1], #4
  404688:	f840 3b04 	str.w	r3, [r0], #4
  40468c:	f851 3b04 	ldr.w	r3, [r1], #4
  404690:	f840 3b04 	str.w	r3, [r0], #4
  404694:	f851 3b04 	ldr.w	r3, [r1], #4
  404698:	f840 3b04 	str.w	r3, [r0], #4
  40469c:	f851 3b04 	ldr.w	r3, [r1], #4
  4046a0:	f840 3b04 	str.w	r3, [r0], #4
  4046a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4046a8:	f840 3b04 	str.w	r3, [r0], #4
  4046ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4046b0:	f840 3b04 	str.w	r3, [r0], #4
  4046b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4046b8:	f840 3b04 	str.w	r3, [r0], #4
  4046bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4046c0:	f840 3b04 	str.w	r3, [r0], #4
  4046c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4046c8:	f840 3b04 	str.w	r3, [r0], #4
  4046cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4046d0:	f840 3b04 	str.w	r3, [r0], #4
  4046d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4046d8:	f840 3b04 	str.w	r3, [r0], #4
  4046dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4046e0:	f840 3b04 	str.w	r3, [r0], #4
  4046e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4046e8:	f840 3b04 	str.w	r3, [r0], #4
  4046ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4046f0:	f840 3b04 	str.w	r3, [r0], #4
  4046f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4046f8:	f840 3b04 	str.w	r3, [r0], #4
  4046fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404700:	f840 3b04 	str.w	r3, [r0], #4
  404704:	3a40      	subs	r2, #64	; 0x40
  404706:	d2bd      	bcs.n	404684 <memcpy+0x10>
  404708:	3230      	adds	r2, #48	; 0x30
  40470a:	d311      	bcc.n	404730 <memcpy+0xbc>
  40470c:	f851 3b04 	ldr.w	r3, [r1], #4
  404710:	f840 3b04 	str.w	r3, [r0], #4
  404714:	f851 3b04 	ldr.w	r3, [r1], #4
  404718:	f840 3b04 	str.w	r3, [r0], #4
  40471c:	f851 3b04 	ldr.w	r3, [r1], #4
  404720:	f840 3b04 	str.w	r3, [r0], #4
  404724:	f851 3b04 	ldr.w	r3, [r1], #4
  404728:	f840 3b04 	str.w	r3, [r0], #4
  40472c:	3a10      	subs	r2, #16
  40472e:	d2ed      	bcs.n	40470c <memcpy+0x98>
  404730:	320c      	adds	r2, #12
  404732:	d305      	bcc.n	404740 <memcpy+0xcc>
  404734:	f851 3b04 	ldr.w	r3, [r1], #4
  404738:	f840 3b04 	str.w	r3, [r0], #4
  40473c:	3a04      	subs	r2, #4
  40473e:	d2f9      	bcs.n	404734 <memcpy+0xc0>
  404740:	3204      	adds	r2, #4
  404742:	d008      	beq.n	404756 <memcpy+0xe2>
  404744:	07d2      	lsls	r2, r2, #31
  404746:	bf1c      	itt	ne
  404748:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40474c:	f800 3b01 	strbne.w	r3, [r0], #1
  404750:	d301      	bcc.n	404756 <memcpy+0xe2>
  404752:	880b      	ldrh	r3, [r1, #0]
  404754:	8003      	strh	r3, [r0, #0]
  404756:	4660      	mov	r0, ip
  404758:	4770      	bx	lr
  40475a:	bf00      	nop
  40475c:	2a08      	cmp	r2, #8
  40475e:	d313      	bcc.n	404788 <memcpy+0x114>
  404760:	078b      	lsls	r3, r1, #30
  404762:	d08d      	beq.n	404680 <memcpy+0xc>
  404764:	f010 0303 	ands.w	r3, r0, #3
  404768:	d08a      	beq.n	404680 <memcpy+0xc>
  40476a:	f1c3 0304 	rsb	r3, r3, #4
  40476e:	1ad2      	subs	r2, r2, r3
  404770:	07db      	lsls	r3, r3, #31
  404772:	bf1c      	itt	ne
  404774:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404778:	f800 3b01 	strbne.w	r3, [r0], #1
  40477c:	d380      	bcc.n	404680 <memcpy+0xc>
  40477e:	f831 3b02 	ldrh.w	r3, [r1], #2
  404782:	f820 3b02 	strh.w	r3, [r0], #2
  404786:	e77b      	b.n	404680 <memcpy+0xc>
  404788:	3a04      	subs	r2, #4
  40478a:	d3d9      	bcc.n	404740 <memcpy+0xcc>
  40478c:	3a01      	subs	r2, #1
  40478e:	f811 3b01 	ldrb.w	r3, [r1], #1
  404792:	f800 3b01 	strb.w	r3, [r0], #1
  404796:	d2f9      	bcs.n	40478c <memcpy+0x118>
  404798:	780b      	ldrb	r3, [r1, #0]
  40479a:	7003      	strb	r3, [r0, #0]
  40479c:	784b      	ldrb	r3, [r1, #1]
  40479e:	7043      	strb	r3, [r0, #1]
  4047a0:	788b      	ldrb	r3, [r1, #2]
  4047a2:	7083      	strb	r3, [r0, #2]
  4047a4:	4660      	mov	r0, ip
  4047a6:	4770      	bx	lr

004047a8 <memset>:
  4047a8:	b470      	push	{r4, r5, r6}
  4047aa:	0784      	lsls	r4, r0, #30
  4047ac:	d046      	beq.n	40483c <memset+0x94>
  4047ae:	1e54      	subs	r4, r2, #1
  4047b0:	2a00      	cmp	r2, #0
  4047b2:	d041      	beq.n	404838 <memset+0x90>
  4047b4:	b2cd      	uxtb	r5, r1
  4047b6:	4603      	mov	r3, r0
  4047b8:	e002      	b.n	4047c0 <memset+0x18>
  4047ba:	1e62      	subs	r2, r4, #1
  4047bc:	b3e4      	cbz	r4, 404838 <memset+0x90>
  4047be:	4614      	mov	r4, r2
  4047c0:	f803 5b01 	strb.w	r5, [r3], #1
  4047c4:	079a      	lsls	r2, r3, #30
  4047c6:	d1f8      	bne.n	4047ba <memset+0x12>
  4047c8:	2c03      	cmp	r4, #3
  4047ca:	d92e      	bls.n	40482a <memset+0x82>
  4047cc:	b2cd      	uxtb	r5, r1
  4047ce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4047d2:	2c0f      	cmp	r4, #15
  4047d4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4047d8:	d919      	bls.n	40480e <memset+0x66>
  4047da:	f103 0210 	add.w	r2, r3, #16
  4047de:	4626      	mov	r6, r4
  4047e0:	3e10      	subs	r6, #16
  4047e2:	2e0f      	cmp	r6, #15
  4047e4:	f842 5c10 	str.w	r5, [r2, #-16]
  4047e8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4047ec:	f842 5c08 	str.w	r5, [r2, #-8]
  4047f0:	f842 5c04 	str.w	r5, [r2, #-4]
  4047f4:	f102 0210 	add.w	r2, r2, #16
  4047f8:	d8f2      	bhi.n	4047e0 <memset+0x38>
  4047fa:	f1a4 0210 	sub.w	r2, r4, #16
  4047fe:	f022 020f 	bic.w	r2, r2, #15
  404802:	f004 040f 	and.w	r4, r4, #15
  404806:	3210      	adds	r2, #16
  404808:	2c03      	cmp	r4, #3
  40480a:	4413      	add	r3, r2
  40480c:	d90d      	bls.n	40482a <memset+0x82>
  40480e:	461e      	mov	r6, r3
  404810:	4622      	mov	r2, r4
  404812:	3a04      	subs	r2, #4
  404814:	2a03      	cmp	r2, #3
  404816:	f846 5b04 	str.w	r5, [r6], #4
  40481a:	d8fa      	bhi.n	404812 <memset+0x6a>
  40481c:	1f22      	subs	r2, r4, #4
  40481e:	f022 0203 	bic.w	r2, r2, #3
  404822:	3204      	adds	r2, #4
  404824:	4413      	add	r3, r2
  404826:	f004 0403 	and.w	r4, r4, #3
  40482a:	b12c      	cbz	r4, 404838 <memset+0x90>
  40482c:	b2c9      	uxtb	r1, r1
  40482e:	441c      	add	r4, r3
  404830:	f803 1b01 	strb.w	r1, [r3], #1
  404834:	42a3      	cmp	r3, r4
  404836:	d1fb      	bne.n	404830 <memset+0x88>
  404838:	bc70      	pop	{r4, r5, r6}
  40483a:	4770      	bx	lr
  40483c:	4614      	mov	r4, r2
  40483e:	4603      	mov	r3, r0
  404840:	e7c2      	b.n	4047c8 <memset+0x20>
  404842:	bf00      	nop

00404844 <_puts_r>:
  404844:	b5f0      	push	{r4, r5, r6, r7, lr}
  404846:	4604      	mov	r4, r0
  404848:	b089      	sub	sp, #36	; 0x24
  40484a:	4608      	mov	r0, r1
  40484c:	460d      	mov	r5, r1
  40484e:	f000 f8b3 	bl	4049b8 <strlen>
  404852:	68a3      	ldr	r3, [r4, #8]
  404854:	4f11      	ldr	r7, [pc, #68]	; (40489c <_puts_r+0x58>)
  404856:	899a      	ldrh	r2, [r3, #12]
  404858:	9504      	str	r5, [sp, #16]
  40485a:	2102      	movs	r1, #2
  40485c:	f100 0e01 	add.w	lr, r0, #1
  404860:	2601      	movs	r6, #1
  404862:	ad04      	add	r5, sp, #16
  404864:	9102      	str	r1, [sp, #8]
  404866:	0491      	lsls	r1, r2, #18
  404868:	9005      	str	r0, [sp, #20]
  40486a:	f8cd e00c 	str.w	lr, [sp, #12]
  40486e:	9706      	str	r7, [sp, #24]
  404870:	9607      	str	r6, [sp, #28]
  404872:	9501      	str	r5, [sp, #4]
  404874:	d406      	bmi.n	404884 <_puts_r+0x40>
  404876:	6e59      	ldr	r1, [r3, #100]	; 0x64
  404878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40487c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404880:	819a      	strh	r2, [r3, #12]
  404882:	6659      	str	r1, [r3, #100]	; 0x64
  404884:	4620      	mov	r0, r4
  404886:	4619      	mov	r1, r3
  404888:	aa01      	add	r2, sp, #4
  40488a:	f001 fad7 	bl	405e3c <__sfvwrite_r>
  40488e:	2800      	cmp	r0, #0
  404890:	bf14      	ite	ne
  404892:	f04f 30ff 	movne.w	r0, #4294967295
  404896:	200a      	moveq	r0, #10
  404898:	b009      	add	sp, #36	; 0x24
  40489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40489c:	00407864 	.word	0x00407864

004048a0 <puts>:
  4048a0:	4b02      	ldr	r3, [pc, #8]	; (4048ac <puts+0xc>)
  4048a2:	4601      	mov	r1, r0
  4048a4:	6818      	ldr	r0, [r3, #0]
  4048a6:	f7ff bfcd 	b.w	404844 <_puts_r>
  4048aa:	bf00      	nop
  4048ac:	20000460 	.word	0x20000460

004048b0 <setbuf>:
  4048b0:	2900      	cmp	r1, #0
  4048b2:	bf0c      	ite	eq
  4048b4:	2202      	moveq	r2, #2
  4048b6:	2200      	movne	r2, #0
  4048b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4048bc:	f000 b800 	b.w	4048c0 <setvbuf>

004048c0 <setvbuf>:
  4048c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4048c4:	4c3a      	ldr	r4, [pc, #232]	; (4049b0 <setvbuf+0xf0>)
  4048c6:	6826      	ldr	r6, [r4, #0]
  4048c8:	460d      	mov	r5, r1
  4048ca:	4604      	mov	r4, r0
  4048cc:	4690      	mov	r8, r2
  4048ce:	461f      	mov	r7, r3
  4048d0:	b116      	cbz	r6, 4048d8 <setvbuf+0x18>
  4048d2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  4048d4:	2b00      	cmp	r3, #0
  4048d6:	d03c      	beq.n	404952 <setvbuf+0x92>
  4048d8:	f1b8 0f02 	cmp.w	r8, #2
  4048dc:	d82f      	bhi.n	40493e <setvbuf+0x7e>
  4048de:	2f00      	cmp	r7, #0
  4048e0:	db2d      	blt.n	40493e <setvbuf+0x7e>
  4048e2:	4621      	mov	r1, r4
  4048e4:	4630      	mov	r0, r6
  4048e6:	f001 f865 	bl	4059b4 <_fflush_r>
  4048ea:	89a1      	ldrh	r1, [r4, #12]
  4048ec:	2300      	movs	r3, #0
  4048ee:	6063      	str	r3, [r4, #4]
  4048f0:	61a3      	str	r3, [r4, #24]
  4048f2:	060b      	lsls	r3, r1, #24
  4048f4:	d427      	bmi.n	404946 <setvbuf+0x86>
  4048f6:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  4048fa:	b289      	uxth	r1, r1
  4048fc:	f1b8 0f02 	cmp.w	r8, #2
  404900:	81a1      	strh	r1, [r4, #12]
  404902:	d02a      	beq.n	40495a <setvbuf+0x9a>
  404904:	2d00      	cmp	r5, #0
  404906:	d036      	beq.n	404976 <setvbuf+0xb6>
  404908:	f1b8 0f01 	cmp.w	r8, #1
  40490c:	d011      	beq.n	404932 <setvbuf+0x72>
  40490e:	b289      	uxth	r1, r1
  404910:	f001 0008 	and.w	r0, r1, #8
  404914:	4b27      	ldr	r3, [pc, #156]	; (4049b4 <setvbuf+0xf4>)
  404916:	63f3      	str	r3, [r6, #60]	; 0x3c
  404918:	b280      	uxth	r0, r0
  40491a:	6025      	str	r5, [r4, #0]
  40491c:	6125      	str	r5, [r4, #16]
  40491e:	6167      	str	r7, [r4, #20]
  404920:	b178      	cbz	r0, 404942 <setvbuf+0x82>
  404922:	f011 0f03 	tst.w	r1, #3
  404926:	bf18      	it	ne
  404928:	2700      	movne	r7, #0
  40492a:	60a7      	str	r7, [r4, #8]
  40492c:	2000      	movs	r0, #0
  40492e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404932:	f041 0101 	orr.w	r1, r1, #1
  404936:	427b      	negs	r3, r7
  404938:	81a1      	strh	r1, [r4, #12]
  40493a:	61a3      	str	r3, [r4, #24]
  40493c:	e7e7      	b.n	40490e <setvbuf+0x4e>
  40493e:	f04f 30ff 	mov.w	r0, #4294967295
  404942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404946:	6921      	ldr	r1, [r4, #16]
  404948:	4630      	mov	r0, r6
  40494a:	f001 f99f 	bl	405c8c <_free_r>
  40494e:	89a1      	ldrh	r1, [r4, #12]
  404950:	e7d1      	b.n	4048f6 <setvbuf+0x36>
  404952:	4630      	mov	r0, r6
  404954:	f001 f8c2 	bl	405adc <__sinit>
  404958:	e7be      	b.n	4048d8 <setvbuf+0x18>
  40495a:	2000      	movs	r0, #0
  40495c:	f104 0343 	add.w	r3, r4, #67	; 0x43
  404960:	f041 0102 	orr.w	r1, r1, #2
  404964:	2500      	movs	r5, #0
  404966:	2201      	movs	r2, #1
  404968:	81a1      	strh	r1, [r4, #12]
  40496a:	60a5      	str	r5, [r4, #8]
  40496c:	6023      	str	r3, [r4, #0]
  40496e:	6123      	str	r3, [r4, #16]
  404970:	6162      	str	r2, [r4, #20]
  404972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404976:	2f00      	cmp	r7, #0
  404978:	bf08      	it	eq
  40497a:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40497e:	4638      	mov	r0, r7
  404980:	f001 fc8c 	bl	40629c <malloc>
  404984:	4605      	mov	r5, r0
  404986:	b128      	cbz	r0, 404994 <setvbuf+0xd4>
  404988:	89a1      	ldrh	r1, [r4, #12]
  40498a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40498e:	b289      	uxth	r1, r1
  404990:	81a1      	strh	r1, [r4, #12]
  404992:	e7b9      	b.n	404908 <setvbuf+0x48>
  404994:	f44f 6080 	mov.w	r0, #1024	; 0x400
  404998:	f001 fc80 	bl	40629c <malloc>
  40499c:	4605      	mov	r5, r0
  40499e:	b918      	cbnz	r0, 4049a8 <setvbuf+0xe8>
  4049a0:	89a1      	ldrh	r1, [r4, #12]
  4049a2:	f04f 30ff 	mov.w	r0, #4294967295
  4049a6:	e7d9      	b.n	40495c <setvbuf+0x9c>
  4049a8:	f44f 6780 	mov.w	r7, #1024	; 0x400
  4049ac:	e7ec      	b.n	404988 <setvbuf+0xc8>
  4049ae:	bf00      	nop
  4049b0:	20000460 	.word	0x20000460
  4049b4:	004059e1 	.word	0x004059e1

004049b8 <strlen>:
  4049b8:	f020 0103 	bic.w	r1, r0, #3
  4049bc:	f010 0003 	ands.w	r0, r0, #3
  4049c0:	f1c0 0000 	rsb	r0, r0, #0
  4049c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4049c8:	f100 0c04 	add.w	ip, r0, #4
  4049cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4049d0:	f06f 0200 	mvn.w	r2, #0
  4049d4:	bf1c      	itt	ne
  4049d6:	fa22 f20c 	lsrne.w	r2, r2, ip
  4049da:	4313      	orrne	r3, r2
  4049dc:	f04f 0c01 	mov.w	ip, #1
  4049e0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4049e4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4049e8:	eba3 020c 	sub.w	r2, r3, ip
  4049ec:	ea22 0203 	bic.w	r2, r2, r3
  4049f0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4049f4:	bf04      	itt	eq
  4049f6:	f851 3b04 	ldreq.w	r3, [r1], #4
  4049fa:	3004      	addeq	r0, #4
  4049fc:	d0f4      	beq.n	4049e8 <strlen+0x30>
  4049fe:	f1c2 0100 	rsb	r1, r2, #0
  404a02:	ea02 0201 	and.w	r2, r2, r1
  404a06:	fab2 f282 	clz	r2, r2
  404a0a:	f1c2 021f 	rsb	r2, r2, #31
  404a0e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404a12:	4770      	bx	lr

00404a14 <strncpy>:
  404a14:	ea40 0301 	orr.w	r3, r0, r1
  404a18:	079b      	lsls	r3, r3, #30
  404a1a:	b470      	push	{r4, r5, r6}
  404a1c:	d12b      	bne.n	404a76 <strncpy+0x62>
  404a1e:	2a03      	cmp	r2, #3
  404a20:	d929      	bls.n	404a76 <strncpy+0x62>
  404a22:	460c      	mov	r4, r1
  404a24:	4603      	mov	r3, r0
  404a26:	4621      	mov	r1, r4
  404a28:	f854 6b04 	ldr.w	r6, [r4], #4
  404a2c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  404a30:	ea25 0506 	bic.w	r5, r5, r6
  404a34:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  404a38:	d105      	bne.n	404a46 <strncpy+0x32>
  404a3a:	3a04      	subs	r2, #4
  404a3c:	2a03      	cmp	r2, #3
  404a3e:	f843 6b04 	str.w	r6, [r3], #4
  404a42:	4621      	mov	r1, r4
  404a44:	d8ef      	bhi.n	404a26 <strncpy+0x12>
  404a46:	b1a2      	cbz	r2, 404a72 <strncpy+0x5e>
  404a48:	780c      	ldrb	r4, [r1, #0]
  404a4a:	701c      	strb	r4, [r3, #0]
  404a4c:	3a01      	subs	r2, #1
  404a4e:	3301      	adds	r3, #1
  404a50:	3101      	adds	r1, #1
  404a52:	b13c      	cbz	r4, 404a64 <strncpy+0x50>
  404a54:	b16a      	cbz	r2, 404a72 <strncpy+0x5e>
  404a56:	f811 4b01 	ldrb.w	r4, [r1], #1
  404a5a:	f803 4b01 	strb.w	r4, [r3], #1
  404a5e:	3a01      	subs	r2, #1
  404a60:	2c00      	cmp	r4, #0
  404a62:	d1f7      	bne.n	404a54 <strncpy+0x40>
  404a64:	b12a      	cbz	r2, 404a72 <strncpy+0x5e>
  404a66:	441a      	add	r2, r3
  404a68:	2100      	movs	r1, #0
  404a6a:	f803 1b01 	strb.w	r1, [r3], #1
  404a6e:	4293      	cmp	r3, r2
  404a70:	d1fb      	bne.n	404a6a <strncpy+0x56>
  404a72:	bc70      	pop	{r4, r5, r6}
  404a74:	4770      	bx	lr
  404a76:	4603      	mov	r3, r0
  404a78:	e7e5      	b.n	404a46 <strncpy+0x32>
  404a7a:	bf00      	nop

00404a7c <__sprint_r.part.0>:
  404a7c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404a82:	049c      	lsls	r4, r3, #18
  404a84:	460f      	mov	r7, r1
  404a86:	4692      	mov	sl, r2
  404a88:	d52b      	bpl.n	404ae2 <__sprint_r.part.0+0x66>
  404a8a:	6893      	ldr	r3, [r2, #8]
  404a8c:	6812      	ldr	r2, [r2, #0]
  404a8e:	b333      	cbz	r3, 404ade <__sprint_r.part.0+0x62>
  404a90:	4680      	mov	r8, r0
  404a92:	f102 0908 	add.w	r9, r2, #8
  404a96:	e919 0060 	ldmdb	r9, {r5, r6}
  404a9a:	08b6      	lsrs	r6, r6, #2
  404a9c:	d017      	beq.n	404ace <__sprint_r.part.0+0x52>
  404a9e:	3d04      	subs	r5, #4
  404aa0:	2400      	movs	r4, #0
  404aa2:	e001      	b.n	404aa8 <__sprint_r.part.0+0x2c>
  404aa4:	42a6      	cmp	r6, r4
  404aa6:	d010      	beq.n	404aca <__sprint_r.part.0+0x4e>
  404aa8:	4640      	mov	r0, r8
  404aaa:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404aae:	463a      	mov	r2, r7
  404ab0:	f001 f88c 	bl	405bcc <_fputwc_r>
  404ab4:	1c43      	adds	r3, r0, #1
  404ab6:	f104 0401 	add.w	r4, r4, #1
  404aba:	d1f3      	bne.n	404aa4 <__sprint_r.part.0+0x28>
  404abc:	2300      	movs	r3, #0
  404abe:	f8ca 3008 	str.w	r3, [sl, #8]
  404ac2:	f8ca 3004 	str.w	r3, [sl, #4]
  404ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404aca:	f8da 3008 	ldr.w	r3, [sl, #8]
  404ace:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  404ad2:	f8ca 3008 	str.w	r3, [sl, #8]
  404ad6:	f109 0908 	add.w	r9, r9, #8
  404ada:	2b00      	cmp	r3, #0
  404adc:	d1db      	bne.n	404a96 <__sprint_r.part.0+0x1a>
  404ade:	2000      	movs	r0, #0
  404ae0:	e7ec      	b.n	404abc <__sprint_r.part.0+0x40>
  404ae2:	f001 f9ab 	bl	405e3c <__sfvwrite_r>
  404ae6:	2300      	movs	r3, #0
  404ae8:	f8ca 3008 	str.w	r3, [sl, #8]
  404aec:	f8ca 3004 	str.w	r3, [sl, #4]
  404af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404af4 <_vfiprintf_r>:
  404af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404af8:	b0ab      	sub	sp, #172	; 0xac
  404afa:	461c      	mov	r4, r3
  404afc:	9100      	str	r1, [sp, #0]
  404afe:	4693      	mov	fp, r2
  404b00:	9304      	str	r3, [sp, #16]
  404b02:	9001      	str	r0, [sp, #4]
  404b04:	b118      	cbz	r0, 404b0e <_vfiprintf_r+0x1a>
  404b06:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404b08:	2b00      	cmp	r3, #0
  404b0a:	f000 80e3 	beq.w	404cd4 <_vfiprintf_r+0x1e0>
  404b0e:	9b00      	ldr	r3, [sp, #0]
  404b10:	8999      	ldrh	r1, [r3, #12]
  404b12:	b28a      	uxth	r2, r1
  404b14:	0490      	lsls	r0, r2, #18
  404b16:	d408      	bmi.n	404b2a <_vfiprintf_r+0x36>
  404b18:	4618      	mov	r0, r3
  404b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  404b1c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  404b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404b24:	8182      	strh	r2, [r0, #12]
  404b26:	6643      	str	r3, [r0, #100]	; 0x64
  404b28:	b292      	uxth	r2, r2
  404b2a:	0711      	lsls	r1, r2, #28
  404b2c:	f140 80b2 	bpl.w	404c94 <_vfiprintf_r+0x1a0>
  404b30:	9b00      	ldr	r3, [sp, #0]
  404b32:	691b      	ldr	r3, [r3, #16]
  404b34:	2b00      	cmp	r3, #0
  404b36:	f000 80ad 	beq.w	404c94 <_vfiprintf_r+0x1a0>
  404b3a:	f002 021a 	and.w	r2, r2, #26
  404b3e:	2a0a      	cmp	r2, #10
  404b40:	f000 80b4 	beq.w	404cac <_vfiprintf_r+0x1b8>
  404b44:	2300      	movs	r3, #0
  404b46:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  404b4a:	9309      	str	r3, [sp, #36]	; 0x24
  404b4c:	930f      	str	r3, [sp, #60]	; 0x3c
  404b4e:	930e      	str	r3, [sp, #56]	; 0x38
  404b50:	9302      	str	r3, [sp, #8]
  404b52:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  404b56:	4654      	mov	r4, sl
  404b58:	f89b 3000 	ldrb.w	r3, [fp]
  404b5c:	2b00      	cmp	r3, #0
  404b5e:	f000 84a3 	beq.w	4054a8 <_vfiprintf_r+0x9b4>
  404b62:	2b25      	cmp	r3, #37	; 0x25
  404b64:	f000 84a0 	beq.w	4054a8 <_vfiprintf_r+0x9b4>
  404b68:	465a      	mov	r2, fp
  404b6a:	e001      	b.n	404b70 <_vfiprintf_r+0x7c>
  404b6c:	2b25      	cmp	r3, #37	; 0x25
  404b6e:	d003      	beq.n	404b78 <_vfiprintf_r+0x84>
  404b70:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  404b74:	2b00      	cmp	r3, #0
  404b76:	d1f9      	bne.n	404b6c <_vfiprintf_r+0x78>
  404b78:	ebcb 0602 	rsb	r6, fp, r2
  404b7c:	4615      	mov	r5, r2
  404b7e:	b196      	cbz	r6, 404ba6 <_vfiprintf_r+0xb2>
  404b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404b82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b84:	f8c4 b000 	str.w	fp, [r4]
  404b88:	3301      	adds	r3, #1
  404b8a:	4432      	add	r2, r6
  404b8c:	2b07      	cmp	r3, #7
  404b8e:	6066      	str	r6, [r4, #4]
  404b90:	920f      	str	r2, [sp, #60]	; 0x3c
  404b92:	930e      	str	r3, [sp, #56]	; 0x38
  404b94:	dd79      	ble.n	404c8a <_vfiprintf_r+0x196>
  404b96:	2a00      	cmp	r2, #0
  404b98:	f040 84af 	bne.w	4054fa <_vfiprintf_r+0xa06>
  404b9c:	9b02      	ldr	r3, [sp, #8]
  404b9e:	920e      	str	r2, [sp, #56]	; 0x38
  404ba0:	4433      	add	r3, r6
  404ba2:	4654      	mov	r4, sl
  404ba4:	9302      	str	r3, [sp, #8]
  404ba6:	782b      	ldrb	r3, [r5, #0]
  404ba8:	2b00      	cmp	r3, #0
  404baa:	f000 8360 	beq.w	40526e <_vfiprintf_r+0x77a>
  404bae:	2100      	movs	r1, #0
  404bb0:	f04f 0300 	mov.w	r3, #0
  404bb4:	f04f 3cff 	mov.w	ip, #4294967295
  404bb8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404bbc:	1c68      	adds	r0, r5, #1
  404bbe:	786b      	ldrb	r3, [r5, #1]
  404bc0:	4688      	mov	r8, r1
  404bc2:	460d      	mov	r5, r1
  404bc4:	4666      	mov	r6, ip
  404bc6:	f100 0b01 	add.w	fp, r0, #1
  404bca:	f1a3 0220 	sub.w	r2, r3, #32
  404bce:	2a58      	cmp	r2, #88	; 0x58
  404bd0:	f200 82ab 	bhi.w	40512a <_vfiprintf_r+0x636>
  404bd4:	e8df f012 	tbh	[pc, r2, lsl #1]
  404bd8:	02a9029b 	.word	0x02a9029b
  404bdc:	02a302a9 	.word	0x02a302a9
  404be0:	02a902a9 	.word	0x02a902a9
  404be4:	02a902a9 	.word	0x02a902a9
  404be8:	02a902a9 	.word	0x02a902a9
  404bec:	02620255 	.word	0x02620255
  404bf0:	010d02a9 	.word	0x010d02a9
  404bf4:	02a9026e 	.word	0x02a9026e
  404bf8:	012f0129 	.word	0x012f0129
  404bfc:	012f012f 	.word	0x012f012f
  404c00:	012f012f 	.word	0x012f012f
  404c04:	012f012f 	.word	0x012f012f
  404c08:	012f012f 	.word	0x012f012f
  404c0c:	02a902a9 	.word	0x02a902a9
  404c10:	02a902a9 	.word	0x02a902a9
  404c14:	02a902a9 	.word	0x02a902a9
  404c18:	02a902a9 	.word	0x02a902a9
  404c1c:	02a902a9 	.word	0x02a902a9
  404c20:	02a9013d 	.word	0x02a9013d
  404c24:	02a902a9 	.word	0x02a902a9
  404c28:	02a902a9 	.word	0x02a902a9
  404c2c:	02a902a9 	.word	0x02a902a9
  404c30:	02a902a9 	.word	0x02a902a9
  404c34:	017402a9 	.word	0x017402a9
  404c38:	02a902a9 	.word	0x02a902a9
  404c3c:	02a902a9 	.word	0x02a902a9
  404c40:	018b02a9 	.word	0x018b02a9
  404c44:	02a902a9 	.word	0x02a902a9
  404c48:	02a901a3 	.word	0x02a901a3
  404c4c:	02a902a9 	.word	0x02a902a9
  404c50:	02a902a9 	.word	0x02a902a9
  404c54:	02a902a9 	.word	0x02a902a9
  404c58:	02a902a9 	.word	0x02a902a9
  404c5c:	01c702a9 	.word	0x01c702a9
  404c60:	02a901da 	.word	0x02a901da
  404c64:	02a902a9 	.word	0x02a902a9
  404c68:	01da0123 	.word	0x01da0123
  404c6c:	02a902a9 	.word	0x02a902a9
  404c70:	02a9024c 	.word	0x02a9024c
  404c74:	0113028a 	.word	0x0113028a
  404c78:	020701f3 	.word	0x020701f3
  404c7c:	020d02a9 	.word	0x020d02a9
  404c80:	008102a9 	.word	0x008102a9
  404c84:	02a902a9 	.word	0x02a902a9
  404c88:	0233      	.short	0x0233
  404c8a:	3408      	adds	r4, #8
  404c8c:	9b02      	ldr	r3, [sp, #8]
  404c8e:	4433      	add	r3, r6
  404c90:	9302      	str	r3, [sp, #8]
  404c92:	e788      	b.n	404ba6 <_vfiprintf_r+0xb2>
  404c94:	9801      	ldr	r0, [sp, #4]
  404c96:	9900      	ldr	r1, [sp, #0]
  404c98:	f000 fd70 	bl	40577c <__swsetup_r>
  404c9c:	b9a8      	cbnz	r0, 404cca <_vfiprintf_r+0x1d6>
  404c9e:	9b00      	ldr	r3, [sp, #0]
  404ca0:	899a      	ldrh	r2, [r3, #12]
  404ca2:	f002 021a 	and.w	r2, r2, #26
  404ca6:	2a0a      	cmp	r2, #10
  404ca8:	f47f af4c 	bne.w	404b44 <_vfiprintf_r+0x50>
  404cac:	9b00      	ldr	r3, [sp, #0]
  404cae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  404cb2:	2b00      	cmp	r3, #0
  404cb4:	f6ff af46 	blt.w	404b44 <_vfiprintf_r+0x50>
  404cb8:	9801      	ldr	r0, [sp, #4]
  404cba:	9900      	ldr	r1, [sp, #0]
  404cbc:	465a      	mov	r2, fp
  404cbe:	4623      	mov	r3, r4
  404cc0:	f000 fd20 	bl	405704 <__sbprintf>
  404cc4:	b02b      	add	sp, #172	; 0xac
  404cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cca:	f04f 30ff 	mov.w	r0, #4294967295
  404cce:	b02b      	add	sp, #172	; 0xac
  404cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cd4:	f000 ff02 	bl	405adc <__sinit>
  404cd8:	e719      	b.n	404b0e <_vfiprintf_r+0x1a>
  404cda:	f018 0f20 	tst.w	r8, #32
  404cde:	9503      	str	r5, [sp, #12]
  404ce0:	46b4      	mov	ip, r6
  404ce2:	f000 810c 	beq.w	404efe <_vfiprintf_r+0x40a>
  404ce6:	9b04      	ldr	r3, [sp, #16]
  404ce8:	3307      	adds	r3, #7
  404cea:	f023 0307 	bic.w	r3, r3, #7
  404cee:	f103 0208 	add.w	r2, r3, #8
  404cf2:	e9d3 6700 	ldrd	r6, r7, [r3]
  404cf6:	9204      	str	r2, [sp, #16]
  404cf8:	2301      	movs	r3, #1
  404cfa:	f04f 0200 	mov.w	r2, #0
  404cfe:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404d02:	46e1      	mov	r9, ip
  404d04:	2500      	movs	r5, #0
  404d06:	f1bc 0f00 	cmp.w	ip, #0
  404d0a:	bfa8      	it	ge
  404d0c:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  404d10:	ea56 0207 	orrs.w	r2, r6, r7
  404d14:	f040 80c4 	bne.w	404ea0 <_vfiprintf_r+0x3ac>
  404d18:	f1bc 0f00 	cmp.w	ip, #0
  404d1c:	f000 8381 	beq.w	405422 <_vfiprintf_r+0x92e>
  404d20:	2b01      	cmp	r3, #1
  404d22:	f000 80c5 	beq.w	404eb0 <_vfiprintf_r+0x3bc>
  404d26:	2b02      	cmp	r3, #2
  404d28:	f000 8387 	beq.w	40543a <_vfiprintf_r+0x946>
  404d2c:	4651      	mov	r1, sl
  404d2e:	08f2      	lsrs	r2, r6, #3
  404d30:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404d34:	08f8      	lsrs	r0, r7, #3
  404d36:	f006 0307 	and.w	r3, r6, #7
  404d3a:	4607      	mov	r7, r0
  404d3c:	4616      	mov	r6, r2
  404d3e:	3330      	adds	r3, #48	; 0x30
  404d40:	ea56 0207 	orrs.w	r2, r6, r7
  404d44:	f801 3d01 	strb.w	r3, [r1, #-1]!
  404d48:	d1f1      	bne.n	404d2e <_vfiprintf_r+0x23a>
  404d4a:	f018 0f01 	tst.w	r8, #1
  404d4e:	9107      	str	r1, [sp, #28]
  404d50:	f040 83fc 	bne.w	40554c <_vfiprintf_r+0xa58>
  404d54:	ebc1 090a 	rsb	r9, r1, sl
  404d58:	45e1      	cmp	r9, ip
  404d5a:	464e      	mov	r6, r9
  404d5c:	bfb8      	it	lt
  404d5e:	4666      	movlt	r6, ip
  404d60:	b105      	cbz	r5, 404d64 <_vfiprintf_r+0x270>
  404d62:	3601      	adds	r6, #1
  404d64:	f018 0302 	ands.w	r3, r8, #2
  404d68:	9305      	str	r3, [sp, #20]
  404d6a:	bf18      	it	ne
  404d6c:	3602      	addne	r6, #2
  404d6e:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  404d72:	9306      	str	r3, [sp, #24]
  404d74:	f040 81fa 	bne.w	40516c <_vfiprintf_r+0x678>
  404d78:	9b03      	ldr	r3, [sp, #12]
  404d7a:	1b9d      	subs	r5, r3, r6
  404d7c:	2d00      	cmp	r5, #0
  404d7e:	f340 81f5 	ble.w	40516c <_vfiprintf_r+0x678>
  404d82:	2d10      	cmp	r5, #16
  404d84:	f340 848c 	ble.w	4056a0 <_vfiprintf_r+0xbac>
  404d88:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  404d8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404d8e:	4fc6      	ldr	r7, [pc, #792]	; (4050a8 <_vfiprintf_r+0x5b4>)
  404d90:	4620      	mov	r0, r4
  404d92:	2310      	movs	r3, #16
  404d94:	4664      	mov	r4, ip
  404d96:	4671      	mov	r1, lr
  404d98:	4684      	mov	ip, r0
  404d9a:	e007      	b.n	404dac <_vfiprintf_r+0x2b8>
  404d9c:	f101 0e02 	add.w	lr, r1, #2
  404da0:	f10c 0c08 	add.w	ip, ip, #8
  404da4:	4601      	mov	r1, r0
  404da6:	3d10      	subs	r5, #16
  404da8:	2d10      	cmp	r5, #16
  404daa:	dd13      	ble.n	404dd4 <_vfiprintf_r+0x2e0>
  404dac:	1c48      	adds	r0, r1, #1
  404dae:	3210      	adds	r2, #16
  404db0:	2807      	cmp	r0, #7
  404db2:	920f      	str	r2, [sp, #60]	; 0x3c
  404db4:	f8cc 7000 	str.w	r7, [ip]
  404db8:	f8cc 3004 	str.w	r3, [ip, #4]
  404dbc:	900e      	str	r0, [sp, #56]	; 0x38
  404dbe:	dded      	ble.n	404d9c <_vfiprintf_r+0x2a8>
  404dc0:	2a00      	cmp	r2, #0
  404dc2:	f040 81c3 	bne.w	40514c <_vfiprintf_r+0x658>
  404dc6:	3d10      	subs	r5, #16
  404dc8:	2d10      	cmp	r5, #16
  404dca:	4611      	mov	r1, r2
  404dcc:	f04f 0e01 	mov.w	lr, #1
  404dd0:	46d4      	mov	ip, sl
  404dd2:	dceb      	bgt.n	404dac <_vfiprintf_r+0x2b8>
  404dd4:	4663      	mov	r3, ip
  404dd6:	4671      	mov	r1, lr
  404dd8:	46a4      	mov	ip, r4
  404dda:	461c      	mov	r4, r3
  404ddc:	442a      	add	r2, r5
  404dde:	2907      	cmp	r1, #7
  404de0:	920f      	str	r2, [sp, #60]	; 0x3c
  404de2:	6027      	str	r7, [r4, #0]
  404de4:	6065      	str	r5, [r4, #4]
  404de6:	910e      	str	r1, [sp, #56]	; 0x38
  404de8:	f300 8346 	bgt.w	405478 <_vfiprintf_r+0x984>
  404dec:	3408      	adds	r4, #8
  404dee:	1c48      	adds	r0, r1, #1
  404df0:	e1bf      	b.n	405172 <_vfiprintf_r+0x67e>
  404df2:	4658      	mov	r0, fp
  404df4:	f048 0804 	orr.w	r8, r8, #4
  404df8:	f89b 3000 	ldrb.w	r3, [fp]
  404dfc:	e6e3      	b.n	404bc6 <_vfiprintf_r+0xd2>
  404dfe:	f018 0320 	ands.w	r3, r8, #32
  404e02:	9503      	str	r5, [sp, #12]
  404e04:	46b4      	mov	ip, r6
  404e06:	d062      	beq.n	404ece <_vfiprintf_r+0x3da>
  404e08:	9b04      	ldr	r3, [sp, #16]
  404e0a:	3307      	adds	r3, #7
  404e0c:	f023 0307 	bic.w	r3, r3, #7
  404e10:	f103 0208 	add.w	r2, r3, #8
  404e14:	e9d3 6700 	ldrd	r6, r7, [r3]
  404e18:	9204      	str	r2, [sp, #16]
  404e1a:	2300      	movs	r3, #0
  404e1c:	e76d      	b.n	404cfa <_vfiprintf_r+0x206>
  404e1e:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  404e22:	f89b 3000 	ldrb.w	r3, [fp]
  404e26:	4658      	mov	r0, fp
  404e28:	e6cd      	b.n	404bc6 <_vfiprintf_r+0xd2>
  404e2a:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  404e2e:	f89b 3000 	ldrb.w	r3, [fp]
  404e32:	4658      	mov	r0, fp
  404e34:	e6c7      	b.n	404bc6 <_vfiprintf_r+0xd2>
  404e36:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404e3a:	2500      	movs	r5, #0
  404e3c:	f81b 3b01 	ldrb.w	r3, [fp], #1
  404e40:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  404e44:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  404e48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404e4c:	2a09      	cmp	r2, #9
  404e4e:	d9f5      	bls.n	404e3c <_vfiprintf_r+0x348>
  404e50:	e6bb      	b.n	404bca <_vfiprintf_r+0xd6>
  404e52:	f048 0810 	orr.w	r8, r8, #16
  404e56:	f018 0f20 	tst.w	r8, #32
  404e5a:	9503      	str	r5, [sp, #12]
  404e5c:	46b4      	mov	ip, r6
  404e5e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404e62:	f000 809b 	beq.w	404f9c <_vfiprintf_r+0x4a8>
  404e66:	9904      	ldr	r1, [sp, #16]
  404e68:	3107      	adds	r1, #7
  404e6a:	f021 0107 	bic.w	r1, r1, #7
  404e6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404e72:	3108      	adds	r1, #8
  404e74:	9104      	str	r1, [sp, #16]
  404e76:	4616      	mov	r6, r2
  404e78:	461f      	mov	r7, r3
  404e7a:	2a00      	cmp	r2, #0
  404e7c:	f173 0300 	sbcs.w	r3, r3, #0
  404e80:	f2c0 83a6 	blt.w	4055d0 <_vfiprintf_r+0xadc>
  404e84:	f1bc 0f00 	cmp.w	ip, #0
  404e88:	bfa8      	it	ge
  404e8a:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  404e8e:	ea56 0207 	orrs.w	r2, r6, r7
  404e92:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  404e96:	46e1      	mov	r9, ip
  404e98:	f04f 0301 	mov.w	r3, #1
  404e9c:	f43f af3c 	beq.w	404d18 <_vfiprintf_r+0x224>
  404ea0:	2b01      	cmp	r3, #1
  404ea2:	f47f af40 	bne.w	404d26 <_vfiprintf_r+0x232>
  404ea6:	2f00      	cmp	r7, #0
  404ea8:	bf08      	it	eq
  404eaa:	2e0a      	cmpeq	r6, #10
  404eac:	f080 8334 	bcs.w	405518 <_vfiprintf_r+0xa24>
  404eb0:	ab2a      	add	r3, sp, #168	; 0xa8
  404eb2:	3630      	adds	r6, #48	; 0x30
  404eb4:	f803 6d41 	strb.w	r6, [r3, #-65]!
  404eb8:	ebc3 090a 	rsb	r9, r3, sl
  404ebc:	9307      	str	r3, [sp, #28]
  404ebe:	e74b      	b.n	404d58 <_vfiprintf_r+0x264>
  404ec0:	f048 0810 	orr.w	r8, r8, #16
  404ec4:	f018 0320 	ands.w	r3, r8, #32
  404ec8:	9503      	str	r5, [sp, #12]
  404eca:	46b4      	mov	ip, r6
  404ecc:	d19c      	bne.n	404e08 <_vfiprintf_r+0x314>
  404ece:	f018 0210 	ands.w	r2, r8, #16
  404ed2:	f040 82f7 	bne.w	4054c4 <_vfiprintf_r+0x9d0>
  404ed6:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  404eda:	f000 82f3 	beq.w	4054c4 <_vfiprintf_r+0x9d0>
  404ede:	9904      	ldr	r1, [sp, #16]
  404ee0:	4613      	mov	r3, r2
  404ee2:	460a      	mov	r2, r1
  404ee4:	3204      	adds	r2, #4
  404ee6:	880e      	ldrh	r6, [r1, #0]
  404ee8:	9204      	str	r2, [sp, #16]
  404eea:	2700      	movs	r7, #0
  404eec:	e705      	b.n	404cfa <_vfiprintf_r+0x206>
  404eee:	f048 0810 	orr.w	r8, r8, #16
  404ef2:	f018 0f20 	tst.w	r8, #32
  404ef6:	9503      	str	r5, [sp, #12]
  404ef8:	46b4      	mov	ip, r6
  404efa:	f47f aef4 	bne.w	404ce6 <_vfiprintf_r+0x1f2>
  404efe:	9a04      	ldr	r2, [sp, #16]
  404f00:	f018 0f10 	tst.w	r8, #16
  404f04:	4613      	mov	r3, r2
  404f06:	f040 82e4 	bne.w	4054d2 <_vfiprintf_r+0x9de>
  404f0a:	f018 0f40 	tst.w	r8, #64	; 0x40
  404f0e:	f000 82e0 	beq.w	4054d2 <_vfiprintf_r+0x9de>
  404f12:	8816      	ldrh	r6, [r2, #0]
  404f14:	3204      	adds	r2, #4
  404f16:	2700      	movs	r7, #0
  404f18:	2301      	movs	r3, #1
  404f1a:	9204      	str	r2, [sp, #16]
  404f1c:	e6ed      	b.n	404cfa <_vfiprintf_r+0x206>
  404f1e:	4a63      	ldr	r2, [pc, #396]	; (4050ac <_vfiprintf_r+0x5b8>)
  404f20:	9503      	str	r5, [sp, #12]
  404f22:	f018 0f20 	tst.w	r8, #32
  404f26:	46b4      	mov	ip, r6
  404f28:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404f2c:	9209      	str	r2, [sp, #36]	; 0x24
  404f2e:	f000 8090 	beq.w	405052 <_vfiprintf_r+0x55e>
  404f32:	9a04      	ldr	r2, [sp, #16]
  404f34:	3207      	adds	r2, #7
  404f36:	f022 0207 	bic.w	r2, r2, #7
  404f3a:	e9d2 6700 	ldrd	r6, r7, [r2]
  404f3e:	f102 0108 	add.w	r1, r2, #8
  404f42:	9104      	str	r1, [sp, #16]
  404f44:	f018 0f01 	tst.w	r8, #1
  404f48:	f000 8290 	beq.w	40546c <_vfiprintf_r+0x978>
  404f4c:	ea56 0207 	orrs.w	r2, r6, r7
  404f50:	f000 828c 	beq.w	40546c <_vfiprintf_r+0x978>
  404f54:	2230      	movs	r2, #48	; 0x30
  404f56:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  404f5a:	f048 0802 	orr.w	r8, r8, #2
  404f5e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  404f62:	2302      	movs	r3, #2
  404f64:	e6c9      	b.n	404cfa <_vfiprintf_r+0x206>
  404f66:	9a04      	ldr	r2, [sp, #16]
  404f68:	9503      	str	r5, [sp, #12]
  404f6a:	6813      	ldr	r3, [r2, #0]
  404f6c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  404f70:	4613      	mov	r3, r2
  404f72:	3304      	adds	r3, #4
  404f74:	2601      	movs	r6, #1
  404f76:	f04f 0100 	mov.w	r1, #0
  404f7a:	9304      	str	r3, [sp, #16]
  404f7c:	ab10      	add	r3, sp, #64	; 0x40
  404f7e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404f82:	46b1      	mov	r9, r6
  404f84:	9307      	str	r3, [sp, #28]
  404f86:	f04f 0c00 	mov.w	ip, #0
  404f8a:	e6eb      	b.n	404d64 <_vfiprintf_r+0x270>
  404f8c:	f018 0f20 	tst.w	r8, #32
  404f90:	9503      	str	r5, [sp, #12]
  404f92:	46b4      	mov	ip, r6
  404f94:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404f98:	f47f af65 	bne.w	404e66 <_vfiprintf_r+0x372>
  404f9c:	f018 0f10 	tst.w	r8, #16
  404fa0:	f040 82a2 	bne.w	4054e8 <_vfiprintf_r+0x9f4>
  404fa4:	f018 0f40 	tst.w	r8, #64	; 0x40
  404fa8:	f000 829e 	beq.w	4054e8 <_vfiprintf_r+0x9f4>
  404fac:	9904      	ldr	r1, [sp, #16]
  404fae:	f9b1 6000 	ldrsh.w	r6, [r1]
  404fb2:	3104      	adds	r1, #4
  404fb4:	17f7      	asrs	r7, r6, #31
  404fb6:	4632      	mov	r2, r6
  404fb8:	463b      	mov	r3, r7
  404fba:	9104      	str	r1, [sp, #16]
  404fbc:	e75d      	b.n	404e7a <_vfiprintf_r+0x386>
  404fbe:	9904      	ldr	r1, [sp, #16]
  404fc0:	9503      	str	r5, [sp, #12]
  404fc2:	2330      	movs	r3, #48	; 0x30
  404fc4:	460a      	mov	r2, r1
  404fc6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  404fca:	2378      	movs	r3, #120	; 0x78
  404fcc:	3204      	adds	r2, #4
  404fce:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  404fd2:	4b37      	ldr	r3, [pc, #220]	; (4050b0 <_vfiprintf_r+0x5bc>)
  404fd4:	9309      	str	r3, [sp, #36]	; 0x24
  404fd6:	46b4      	mov	ip, r6
  404fd8:	f048 0802 	orr.w	r8, r8, #2
  404fdc:	680e      	ldr	r6, [r1, #0]
  404fde:	9204      	str	r2, [sp, #16]
  404fe0:	2700      	movs	r7, #0
  404fe2:	2302      	movs	r3, #2
  404fe4:	e689      	b.n	404cfa <_vfiprintf_r+0x206>
  404fe6:	f048 0820 	orr.w	r8, r8, #32
  404fea:	f89b 3000 	ldrb.w	r3, [fp]
  404fee:	4658      	mov	r0, fp
  404ff0:	e5e9      	b.n	404bc6 <_vfiprintf_r+0xd2>
  404ff2:	9a04      	ldr	r2, [sp, #16]
  404ff4:	9503      	str	r5, [sp, #12]
  404ff6:	6813      	ldr	r3, [r2, #0]
  404ff8:	9307      	str	r3, [sp, #28]
  404ffa:	f04f 0100 	mov.w	r1, #0
  404ffe:	46b4      	mov	ip, r6
  405000:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  405004:	1d16      	adds	r6, r2, #4
  405006:	2b00      	cmp	r3, #0
  405008:	f000 8350 	beq.w	4056ac <_vfiprintf_r+0xbb8>
  40500c:	f1bc 0f00 	cmp.w	ip, #0
  405010:	f2c0 832a 	blt.w	405668 <_vfiprintf_r+0xb74>
  405014:	9d07      	ldr	r5, [sp, #28]
  405016:	f8cd c010 	str.w	ip, [sp, #16]
  40501a:	4662      	mov	r2, ip
  40501c:	4628      	mov	r0, r5
  40501e:	2100      	movs	r1, #0
  405020:	f001 fbd6 	bl	4067d0 <memchr>
  405024:	f8dd c010 	ldr.w	ip, [sp, #16]
  405028:	2800      	cmp	r0, #0
  40502a:	f000 8350 	beq.w	4056ce <_vfiprintf_r+0xbda>
  40502e:	ebc5 0900 	rsb	r9, r5, r0
  405032:	9604      	str	r6, [sp, #16]
  405034:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  405038:	f04f 0c00 	mov.w	ip, #0
  40503c:	e68c      	b.n	404d58 <_vfiprintf_r+0x264>
  40503e:	4a1c      	ldr	r2, [pc, #112]	; (4050b0 <_vfiprintf_r+0x5bc>)
  405040:	9503      	str	r5, [sp, #12]
  405042:	f018 0f20 	tst.w	r8, #32
  405046:	46b4      	mov	ip, r6
  405048:	9209      	str	r2, [sp, #36]	; 0x24
  40504a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40504e:	f47f af70 	bne.w	404f32 <_vfiprintf_r+0x43e>
  405052:	9904      	ldr	r1, [sp, #16]
  405054:	f018 0f10 	tst.w	r8, #16
  405058:	460a      	mov	r2, r1
  40505a:	f040 8240 	bne.w	4054de <_vfiprintf_r+0x9ea>
  40505e:	f018 0f40 	tst.w	r8, #64	; 0x40
  405062:	f000 823c 	beq.w	4054de <_vfiprintf_r+0x9ea>
  405066:	3204      	adds	r2, #4
  405068:	880e      	ldrh	r6, [r1, #0]
  40506a:	9204      	str	r2, [sp, #16]
  40506c:	2700      	movs	r7, #0
  40506e:	e769      	b.n	404f44 <_vfiprintf_r+0x450>
  405070:	f89b 3000 	ldrb.w	r3, [fp]
  405074:	2b6c      	cmp	r3, #108	; 0x6c
  405076:	f000 82ea 	beq.w	40564e <_vfiprintf_r+0xb5a>
  40507a:	f048 0810 	orr.w	r8, r8, #16
  40507e:	4658      	mov	r0, fp
  405080:	e5a1      	b.n	404bc6 <_vfiprintf_r+0xd2>
  405082:	9a04      	ldr	r2, [sp, #16]
  405084:	6815      	ldr	r5, [r2, #0]
  405086:	4613      	mov	r3, r2
  405088:	2d00      	cmp	r5, #0
  40508a:	f103 0304 	add.w	r3, r3, #4
  40508e:	f2c0 82e6 	blt.w	40565e <_vfiprintf_r+0xb6a>
  405092:	9304      	str	r3, [sp, #16]
  405094:	f89b 3000 	ldrb.w	r3, [fp]
  405098:	4658      	mov	r0, fp
  40509a:	e594      	b.n	404bc6 <_vfiprintf_r+0xd2>
  40509c:	f89b 3000 	ldrb.w	r3, [fp]
  4050a0:	4658      	mov	r0, fp
  4050a2:	212b      	movs	r1, #43	; 0x2b
  4050a4:	e58f      	b.n	404bc6 <_vfiprintf_r+0xd2>
  4050a6:	bf00      	nop
  4050a8:	00407eb0 	.word	0x00407eb0
  4050ac:	00407e94 	.word	0x00407e94
  4050b0:	004078e0 	.word	0x004078e0
  4050b4:	f89b 3000 	ldrb.w	r3, [fp]
  4050b8:	2b2a      	cmp	r3, #42	; 0x2a
  4050ba:	f10b 0001 	add.w	r0, fp, #1
  4050be:	f000 830f 	beq.w	4056e0 <_vfiprintf_r+0xbec>
  4050c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4050c6:	2a09      	cmp	r2, #9
  4050c8:	4683      	mov	fp, r0
  4050ca:	f04f 0600 	mov.w	r6, #0
  4050ce:	f63f ad7c 	bhi.w	404bca <_vfiprintf_r+0xd6>
  4050d2:	f81b 3b01 	ldrb.w	r3, [fp], #1
  4050d6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4050da:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  4050de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4050e2:	2a09      	cmp	r2, #9
  4050e4:	d9f5      	bls.n	4050d2 <_vfiprintf_r+0x5de>
  4050e6:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  4050ea:	e56e      	b.n	404bca <_vfiprintf_r+0xd6>
  4050ec:	f018 0f20 	tst.w	r8, #32
  4050f0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4050f4:	f000 8283 	beq.w	4055fe <_vfiprintf_r+0xb0a>
  4050f8:	9a04      	ldr	r2, [sp, #16]
  4050fa:	9902      	ldr	r1, [sp, #8]
  4050fc:	6813      	ldr	r3, [r2, #0]
  4050fe:	17cf      	asrs	r7, r1, #31
  405100:	4608      	mov	r0, r1
  405102:	3204      	adds	r2, #4
  405104:	4639      	mov	r1, r7
  405106:	9204      	str	r2, [sp, #16]
  405108:	e9c3 0100 	strd	r0, r1, [r3]
  40510c:	e524      	b.n	404b58 <_vfiprintf_r+0x64>
  40510e:	4658      	mov	r0, fp
  405110:	f89b 3000 	ldrb.w	r3, [fp]
  405114:	2900      	cmp	r1, #0
  405116:	f47f ad56 	bne.w	404bc6 <_vfiprintf_r+0xd2>
  40511a:	2120      	movs	r1, #32
  40511c:	e553      	b.n	404bc6 <_vfiprintf_r+0xd2>
  40511e:	f048 0801 	orr.w	r8, r8, #1
  405122:	4658      	mov	r0, fp
  405124:	f89b 3000 	ldrb.w	r3, [fp]
  405128:	e54d      	b.n	404bc6 <_vfiprintf_r+0xd2>
  40512a:	9503      	str	r5, [sp, #12]
  40512c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  405130:	2b00      	cmp	r3, #0
  405132:	f000 809c 	beq.w	40526e <_vfiprintf_r+0x77a>
  405136:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40513a:	f04f 0300 	mov.w	r3, #0
  40513e:	2601      	movs	r6, #1
  405140:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405144:	ab10      	add	r3, sp, #64	; 0x40
  405146:	46b1      	mov	r9, r6
  405148:	9307      	str	r3, [sp, #28]
  40514a:	e71c      	b.n	404f86 <_vfiprintf_r+0x492>
  40514c:	9801      	ldr	r0, [sp, #4]
  40514e:	9900      	ldr	r1, [sp, #0]
  405150:	9308      	str	r3, [sp, #32]
  405152:	aa0d      	add	r2, sp, #52	; 0x34
  405154:	f7ff fc92 	bl	404a7c <__sprint_r.part.0>
  405158:	2800      	cmp	r0, #0
  40515a:	f040 808f 	bne.w	40527c <_vfiprintf_r+0x788>
  40515e:	990e      	ldr	r1, [sp, #56]	; 0x38
  405160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405162:	9b08      	ldr	r3, [sp, #32]
  405164:	f101 0e01 	add.w	lr, r1, #1
  405168:	46d4      	mov	ip, sl
  40516a:	e61c      	b.n	404da6 <_vfiprintf_r+0x2b2>
  40516c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40516e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405170:	1c48      	adds	r0, r1, #1
  405172:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405176:	b16b      	cbz	r3, 405194 <_vfiprintf_r+0x6a0>
  405178:	3201      	adds	r2, #1
  40517a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  40517e:	2101      	movs	r1, #1
  405180:	2807      	cmp	r0, #7
  405182:	920f      	str	r2, [sp, #60]	; 0x3c
  405184:	900e      	str	r0, [sp, #56]	; 0x38
  405186:	6023      	str	r3, [r4, #0]
  405188:	6061      	str	r1, [r4, #4]
  40518a:	f300 8134 	bgt.w	4053f6 <_vfiprintf_r+0x902>
  40518e:	4601      	mov	r1, r0
  405190:	3408      	adds	r4, #8
  405192:	3001      	adds	r0, #1
  405194:	9b05      	ldr	r3, [sp, #20]
  405196:	b163      	cbz	r3, 4051b2 <_vfiprintf_r+0x6be>
  405198:	3202      	adds	r2, #2
  40519a:	a90c      	add	r1, sp, #48	; 0x30
  40519c:	2302      	movs	r3, #2
  40519e:	2807      	cmp	r0, #7
  4051a0:	920f      	str	r2, [sp, #60]	; 0x3c
  4051a2:	900e      	str	r0, [sp, #56]	; 0x38
  4051a4:	e884 000a 	stmia.w	r4, {r1, r3}
  4051a8:	f300 8134 	bgt.w	405414 <_vfiprintf_r+0x920>
  4051ac:	4601      	mov	r1, r0
  4051ae:	3408      	adds	r4, #8
  4051b0:	3001      	adds	r0, #1
  4051b2:	9b06      	ldr	r3, [sp, #24]
  4051b4:	2b80      	cmp	r3, #128	; 0x80
  4051b6:	f000 80d4 	beq.w	405362 <_vfiprintf_r+0x86e>
  4051ba:	ebc9 070c 	rsb	r7, r9, ip
  4051be:	2f00      	cmp	r7, #0
  4051c0:	dd2b      	ble.n	40521a <_vfiprintf_r+0x726>
  4051c2:	2f10      	cmp	r7, #16
  4051c4:	4daa      	ldr	r5, [pc, #680]	; (405470 <_vfiprintf_r+0x97c>)
  4051c6:	dd1f      	ble.n	405208 <_vfiprintf_r+0x714>
  4051c8:	46a6      	mov	lr, r4
  4051ca:	2310      	movs	r3, #16
  4051cc:	9c01      	ldr	r4, [sp, #4]
  4051ce:	e007      	b.n	4051e0 <_vfiprintf_r+0x6ec>
  4051d0:	f101 0c02 	add.w	ip, r1, #2
  4051d4:	f10e 0e08 	add.w	lr, lr, #8
  4051d8:	4601      	mov	r1, r0
  4051da:	3f10      	subs	r7, #16
  4051dc:	2f10      	cmp	r7, #16
  4051de:	dd11      	ble.n	405204 <_vfiprintf_r+0x710>
  4051e0:	1c48      	adds	r0, r1, #1
  4051e2:	3210      	adds	r2, #16
  4051e4:	2807      	cmp	r0, #7
  4051e6:	920f      	str	r2, [sp, #60]	; 0x3c
  4051e8:	f8ce 5000 	str.w	r5, [lr]
  4051ec:	f8ce 3004 	str.w	r3, [lr, #4]
  4051f0:	900e      	str	r0, [sp, #56]	; 0x38
  4051f2:	dded      	ble.n	4051d0 <_vfiprintf_r+0x6dc>
  4051f4:	bb6a      	cbnz	r2, 405252 <_vfiprintf_r+0x75e>
  4051f6:	3f10      	subs	r7, #16
  4051f8:	2f10      	cmp	r7, #16
  4051fa:	f04f 0c01 	mov.w	ip, #1
  4051fe:	4611      	mov	r1, r2
  405200:	46d6      	mov	lr, sl
  405202:	dced      	bgt.n	4051e0 <_vfiprintf_r+0x6ec>
  405204:	4674      	mov	r4, lr
  405206:	4660      	mov	r0, ip
  405208:	443a      	add	r2, r7
  40520a:	2807      	cmp	r0, #7
  40520c:	920f      	str	r2, [sp, #60]	; 0x3c
  40520e:	e884 00a0 	stmia.w	r4, {r5, r7}
  405212:	900e      	str	r0, [sp, #56]	; 0x38
  405214:	dc3b      	bgt.n	40528e <_vfiprintf_r+0x79a>
  405216:	3408      	adds	r4, #8
  405218:	3001      	adds	r0, #1
  40521a:	eb02 0309 	add.w	r3, r2, r9
  40521e:	9a07      	ldr	r2, [sp, #28]
  405220:	930f      	str	r3, [sp, #60]	; 0x3c
  405222:	2807      	cmp	r0, #7
  405224:	e884 0204 	stmia.w	r4, {r2, r9}
  405228:	900e      	str	r0, [sp, #56]	; 0x38
  40522a:	dd3d      	ble.n	4052a8 <_vfiprintf_r+0x7b4>
  40522c:	2b00      	cmp	r3, #0
  40522e:	f040 813e 	bne.w	4054ae <_vfiprintf_r+0x9ba>
  405232:	f018 0f04 	tst.w	r8, #4
  405236:	930e      	str	r3, [sp, #56]	; 0x38
  405238:	f040 812f 	bne.w	40549a <_vfiprintf_r+0x9a6>
  40523c:	9b02      	ldr	r3, [sp, #8]
  40523e:	9a03      	ldr	r2, [sp, #12]
  405240:	4296      	cmp	r6, r2
  405242:	bfac      	ite	ge
  405244:	199b      	addge	r3, r3, r6
  405246:	189b      	addlt	r3, r3, r2
  405248:	9302      	str	r3, [sp, #8]
  40524a:	2300      	movs	r3, #0
  40524c:	930e      	str	r3, [sp, #56]	; 0x38
  40524e:	4654      	mov	r4, sl
  405250:	e482      	b.n	404b58 <_vfiprintf_r+0x64>
  405252:	4620      	mov	r0, r4
  405254:	9900      	ldr	r1, [sp, #0]
  405256:	9305      	str	r3, [sp, #20]
  405258:	aa0d      	add	r2, sp, #52	; 0x34
  40525a:	f7ff fc0f 	bl	404a7c <__sprint_r.part.0>
  40525e:	b968      	cbnz	r0, 40527c <_vfiprintf_r+0x788>
  405260:	990e      	ldr	r1, [sp, #56]	; 0x38
  405262:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405264:	9b05      	ldr	r3, [sp, #20]
  405266:	f101 0c01 	add.w	ip, r1, #1
  40526a:	46d6      	mov	lr, sl
  40526c:	e7b5      	b.n	4051da <_vfiprintf_r+0x6e6>
  40526e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405270:	b123      	cbz	r3, 40527c <_vfiprintf_r+0x788>
  405272:	9801      	ldr	r0, [sp, #4]
  405274:	9900      	ldr	r1, [sp, #0]
  405276:	aa0d      	add	r2, sp, #52	; 0x34
  405278:	f7ff fc00 	bl	404a7c <__sprint_r.part.0>
  40527c:	9b00      	ldr	r3, [sp, #0]
  40527e:	899b      	ldrh	r3, [r3, #12]
  405280:	065b      	lsls	r3, r3, #25
  405282:	f53f ad22 	bmi.w	404cca <_vfiprintf_r+0x1d6>
  405286:	9802      	ldr	r0, [sp, #8]
  405288:	b02b      	add	sp, #172	; 0xac
  40528a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40528e:	2a00      	cmp	r2, #0
  405290:	f040 8191 	bne.w	4055b6 <_vfiprintf_r+0xac2>
  405294:	2201      	movs	r2, #1
  405296:	9907      	ldr	r1, [sp, #28]
  405298:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  40529c:	464b      	mov	r3, r9
  40529e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4052a2:	911a      	str	r1, [sp, #104]	; 0x68
  4052a4:	920e      	str	r2, [sp, #56]	; 0x38
  4052a6:	4654      	mov	r4, sl
  4052a8:	f104 0208 	add.w	r2, r4, #8
  4052ac:	f018 0f04 	tst.w	r8, #4
  4052b0:	d039      	beq.n	405326 <_vfiprintf_r+0x832>
  4052b2:	9903      	ldr	r1, [sp, #12]
  4052b4:	1b8d      	subs	r5, r1, r6
  4052b6:	2d00      	cmp	r5, #0
  4052b8:	dd35      	ble.n	405326 <_vfiprintf_r+0x832>
  4052ba:	2d10      	cmp	r5, #16
  4052bc:	f340 8202 	ble.w	4056c4 <_vfiprintf_r+0xbd0>
  4052c0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4052c2:	4f6c      	ldr	r7, [pc, #432]	; (405474 <_vfiprintf_r+0x980>)
  4052c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
  4052c8:	f8dd 9000 	ldr.w	r9, [sp]
  4052cc:	2410      	movs	r4, #16
  4052ce:	e006      	b.n	4052de <_vfiprintf_r+0x7ea>
  4052d0:	f100 0e02 	add.w	lr, r0, #2
  4052d4:	3208      	adds	r2, #8
  4052d6:	4608      	mov	r0, r1
  4052d8:	3d10      	subs	r5, #16
  4052da:	2d10      	cmp	r5, #16
  4052dc:	dd10      	ble.n	405300 <_vfiprintf_r+0x80c>
  4052de:	1c41      	adds	r1, r0, #1
  4052e0:	3310      	adds	r3, #16
  4052e2:	2907      	cmp	r1, #7
  4052e4:	930f      	str	r3, [sp, #60]	; 0x3c
  4052e6:	6017      	str	r7, [r2, #0]
  4052e8:	6054      	str	r4, [r2, #4]
  4052ea:	910e      	str	r1, [sp, #56]	; 0x38
  4052ec:	ddf0      	ble.n	4052d0 <_vfiprintf_r+0x7dc>
  4052ee:	2b00      	cmp	r3, #0
  4052f0:	d12a      	bne.n	405348 <_vfiprintf_r+0x854>
  4052f2:	3d10      	subs	r5, #16
  4052f4:	2d10      	cmp	r5, #16
  4052f6:	f04f 0e01 	mov.w	lr, #1
  4052fa:	4618      	mov	r0, r3
  4052fc:	4652      	mov	r2, sl
  4052fe:	dcee      	bgt.n	4052de <_vfiprintf_r+0x7ea>
  405300:	442b      	add	r3, r5
  405302:	f1be 0f07 	cmp.w	lr, #7
  405306:	930f      	str	r3, [sp, #60]	; 0x3c
  405308:	6017      	str	r7, [r2, #0]
  40530a:	6055      	str	r5, [r2, #4]
  40530c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405310:	dd09      	ble.n	405326 <_vfiprintf_r+0x832>
  405312:	2b00      	cmp	r3, #0
  405314:	d092      	beq.n	40523c <_vfiprintf_r+0x748>
  405316:	9801      	ldr	r0, [sp, #4]
  405318:	9900      	ldr	r1, [sp, #0]
  40531a:	aa0d      	add	r2, sp, #52	; 0x34
  40531c:	f7ff fbae 	bl	404a7c <__sprint_r.part.0>
  405320:	2800      	cmp	r0, #0
  405322:	d1ab      	bne.n	40527c <_vfiprintf_r+0x788>
  405324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405326:	9a02      	ldr	r2, [sp, #8]
  405328:	9903      	ldr	r1, [sp, #12]
  40532a:	428e      	cmp	r6, r1
  40532c:	bfac      	ite	ge
  40532e:	1992      	addge	r2, r2, r6
  405330:	1852      	addlt	r2, r2, r1
  405332:	9202      	str	r2, [sp, #8]
  405334:	2b00      	cmp	r3, #0
  405336:	d088      	beq.n	40524a <_vfiprintf_r+0x756>
  405338:	9801      	ldr	r0, [sp, #4]
  40533a:	9900      	ldr	r1, [sp, #0]
  40533c:	aa0d      	add	r2, sp, #52	; 0x34
  40533e:	f7ff fb9d 	bl	404a7c <__sprint_r.part.0>
  405342:	2800      	cmp	r0, #0
  405344:	d081      	beq.n	40524a <_vfiprintf_r+0x756>
  405346:	e799      	b.n	40527c <_vfiprintf_r+0x788>
  405348:	4640      	mov	r0, r8
  40534a:	4649      	mov	r1, r9
  40534c:	aa0d      	add	r2, sp, #52	; 0x34
  40534e:	f7ff fb95 	bl	404a7c <__sprint_r.part.0>
  405352:	2800      	cmp	r0, #0
  405354:	d192      	bne.n	40527c <_vfiprintf_r+0x788>
  405356:	980e      	ldr	r0, [sp, #56]	; 0x38
  405358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40535a:	f100 0e01 	add.w	lr, r0, #1
  40535e:	4652      	mov	r2, sl
  405360:	e7ba      	b.n	4052d8 <_vfiprintf_r+0x7e4>
  405362:	9b03      	ldr	r3, [sp, #12]
  405364:	1b9f      	subs	r7, r3, r6
  405366:	2f00      	cmp	r7, #0
  405368:	f77f af27 	ble.w	4051ba <_vfiprintf_r+0x6c6>
  40536c:	2f10      	cmp	r7, #16
  40536e:	4d40      	ldr	r5, [pc, #256]	; (405470 <_vfiprintf_r+0x97c>)
  405370:	f340 81b4 	ble.w	4056dc <_vfiprintf_r+0xbe8>
  405374:	4620      	mov	r0, r4
  405376:	2310      	movs	r3, #16
  405378:	4664      	mov	r4, ip
  40537a:	4684      	mov	ip, r0
  40537c:	e007      	b.n	40538e <_vfiprintf_r+0x89a>
  40537e:	f101 0e02 	add.w	lr, r1, #2
  405382:	f10c 0c08 	add.w	ip, ip, #8
  405386:	4601      	mov	r1, r0
  405388:	3f10      	subs	r7, #16
  40538a:	2f10      	cmp	r7, #16
  40538c:	dd11      	ble.n	4053b2 <_vfiprintf_r+0x8be>
  40538e:	1c48      	adds	r0, r1, #1
  405390:	3210      	adds	r2, #16
  405392:	2807      	cmp	r0, #7
  405394:	920f      	str	r2, [sp, #60]	; 0x3c
  405396:	f8cc 5000 	str.w	r5, [ip]
  40539a:	f8cc 3004 	str.w	r3, [ip, #4]
  40539e:	900e      	str	r0, [sp, #56]	; 0x38
  4053a0:	dded      	ble.n	40537e <_vfiprintf_r+0x88a>
  4053a2:	b9c2      	cbnz	r2, 4053d6 <_vfiprintf_r+0x8e2>
  4053a4:	3f10      	subs	r7, #16
  4053a6:	2f10      	cmp	r7, #16
  4053a8:	f04f 0e01 	mov.w	lr, #1
  4053ac:	4611      	mov	r1, r2
  4053ae:	46d4      	mov	ip, sl
  4053b0:	dced      	bgt.n	40538e <_vfiprintf_r+0x89a>
  4053b2:	4663      	mov	r3, ip
  4053b4:	46a4      	mov	ip, r4
  4053b6:	461c      	mov	r4, r3
  4053b8:	443a      	add	r2, r7
  4053ba:	f1be 0f07 	cmp.w	lr, #7
  4053be:	920f      	str	r2, [sp, #60]	; 0x3c
  4053c0:	e884 00a0 	stmia.w	r4, {r5, r7}
  4053c4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4053c8:	f300 80ef 	bgt.w	4055aa <_vfiprintf_r+0xab6>
  4053cc:	3408      	adds	r4, #8
  4053ce:	f10e 0001 	add.w	r0, lr, #1
  4053d2:	4671      	mov	r1, lr
  4053d4:	e6f1      	b.n	4051ba <_vfiprintf_r+0x6c6>
  4053d6:	9801      	ldr	r0, [sp, #4]
  4053d8:	9900      	ldr	r1, [sp, #0]
  4053da:	9305      	str	r3, [sp, #20]
  4053dc:	aa0d      	add	r2, sp, #52	; 0x34
  4053de:	f7ff fb4d 	bl	404a7c <__sprint_r.part.0>
  4053e2:	2800      	cmp	r0, #0
  4053e4:	f47f af4a 	bne.w	40527c <_vfiprintf_r+0x788>
  4053e8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4053ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4053ec:	9b05      	ldr	r3, [sp, #20]
  4053ee:	f101 0e01 	add.w	lr, r1, #1
  4053f2:	46d4      	mov	ip, sl
  4053f4:	e7c8      	b.n	405388 <_vfiprintf_r+0x894>
  4053f6:	2a00      	cmp	r2, #0
  4053f8:	f040 80c6 	bne.w	405588 <_vfiprintf_r+0xa94>
  4053fc:	9b05      	ldr	r3, [sp, #20]
  4053fe:	2b00      	cmp	r3, #0
  405400:	f000 8086 	beq.w	405510 <_vfiprintf_r+0xa1c>
  405404:	aa0c      	add	r2, sp, #48	; 0x30
  405406:	2302      	movs	r3, #2
  405408:	921a      	str	r2, [sp, #104]	; 0x68
  40540a:	4608      	mov	r0, r1
  40540c:	931b      	str	r3, [sp, #108]	; 0x6c
  40540e:	461a      	mov	r2, r3
  405410:	4654      	mov	r4, sl
  405412:	e6cb      	b.n	4051ac <_vfiprintf_r+0x6b8>
  405414:	2a00      	cmp	r2, #0
  405416:	f040 80a6 	bne.w	405566 <_vfiprintf_r+0xa72>
  40541a:	2001      	movs	r0, #1
  40541c:	4611      	mov	r1, r2
  40541e:	4654      	mov	r4, sl
  405420:	e6c7      	b.n	4051b2 <_vfiprintf_r+0x6be>
  405422:	bb03      	cbnz	r3, 405466 <_vfiprintf_r+0x972>
  405424:	f018 0f01 	tst.w	r8, #1
  405428:	d01d      	beq.n	405466 <_vfiprintf_r+0x972>
  40542a:	ab2a      	add	r3, sp, #168	; 0xa8
  40542c:	2230      	movs	r2, #48	; 0x30
  40542e:	f803 2d41 	strb.w	r2, [r3, #-65]!
  405432:	ebc3 090a 	rsb	r9, r3, sl
  405436:	9307      	str	r3, [sp, #28]
  405438:	e48e      	b.n	404d58 <_vfiprintf_r+0x264>
  40543a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40543c:	46d1      	mov	r9, sl
  40543e:	0933      	lsrs	r3, r6, #4
  405440:	f006 010f 	and.w	r1, r6, #15
  405444:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405448:	093a      	lsrs	r2, r7, #4
  40544a:	461e      	mov	r6, r3
  40544c:	4617      	mov	r7, r2
  40544e:	5c43      	ldrb	r3, [r0, r1]
  405450:	f809 3d01 	strb.w	r3, [r9, #-1]!
  405454:	ea56 0307 	orrs.w	r3, r6, r7
  405458:	d1f1      	bne.n	40543e <_vfiprintf_r+0x94a>
  40545a:	464b      	mov	r3, r9
  40545c:	f8cd 901c 	str.w	r9, [sp, #28]
  405460:	ebc3 090a 	rsb	r9, r3, sl
  405464:	e478      	b.n	404d58 <_vfiprintf_r+0x264>
  405466:	f8cd a01c 	str.w	sl, [sp, #28]
  40546a:	e475      	b.n	404d58 <_vfiprintf_r+0x264>
  40546c:	2302      	movs	r3, #2
  40546e:	e444      	b.n	404cfa <_vfiprintf_r+0x206>
  405470:	00407e84 	.word	0x00407e84
  405474:	00407eb0 	.word	0x00407eb0
  405478:	2a00      	cmp	r2, #0
  40547a:	f040 80d7 	bne.w	40562c <_vfiprintf_r+0xb38>
  40547e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405482:	2b00      	cmp	r3, #0
  405484:	f000 80ae 	beq.w	4055e4 <_vfiprintf_r+0xaf0>
  405488:	2301      	movs	r3, #1
  40548a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40548e:	4618      	mov	r0, r3
  405490:	931b      	str	r3, [sp, #108]	; 0x6c
  405492:	461a      	mov	r2, r3
  405494:	911a      	str	r1, [sp, #104]	; 0x68
  405496:	4654      	mov	r4, sl
  405498:	e679      	b.n	40518e <_vfiprintf_r+0x69a>
  40549a:	9a03      	ldr	r2, [sp, #12]
  40549c:	1b95      	subs	r5, r2, r6
  40549e:	2d00      	cmp	r5, #0
  4054a0:	4652      	mov	r2, sl
  4054a2:	f73f af0a 	bgt.w	4052ba <_vfiprintf_r+0x7c6>
  4054a6:	e6c9      	b.n	40523c <_vfiprintf_r+0x748>
  4054a8:	465d      	mov	r5, fp
  4054aa:	f7ff bb7c 	b.w	404ba6 <_vfiprintf_r+0xb2>
  4054ae:	9801      	ldr	r0, [sp, #4]
  4054b0:	9900      	ldr	r1, [sp, #0]
  4054b2:	aa0d      	add	r2, sp, #52	; 0x34
  4054b4:	f7ff fae2 	bl	404a7c <__sprint_r.part.0>
  4054b8:	2800      	cmp	r0, #0
  4054ba:	f47f aedf 	bne.w	40527c <_vfiprintf_r+0x788>
  4054be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4054c0:	4652      	mov	r2, sl
  4054c2:	e6f3      	b.n	4052ac <_vfiprintf_r+0x7b8>
  4054c4:	9904      	ldr	r1, [sp, #16]
  4054c6:	460a      	mov	r2, r1
  4054c8:	3204      	adds	r2, #4
  4054ca:	680e      	ldr	r6, [r1, #0]
  4054cc:	9204      	str	r2, [sp, #16]
  4054ce:	2700      	movs	r7, #0
  4054d0:	e413      	b.n	404cfa <_vfiprintf_r+0x206>
  4054d2:	3204      	adds	r2, #4
  4054d4:	681e      	ldr	r6, [r3, #0]
  4054d6:	9204      	str	r2, [sp, #16]
  4054d8:	2301      	movs	r3, #1
  4054da:	2700      	movs	r7, #0
  4054dc:	e40d      	b.n	404cfa <_vfiprintf_r+0x206>
  4054de:	6816      	ldr	r6, [r2, #0]
  4054e0:	3204      	adds	r2, #4
  4054e2:	9204      	str	r2, [sp, #16]
  4054e4:	2700      	movs	r7, #0
  4054e6:	e52d      	b.n	404f44 <_vfiprintf_r+0x450>
  4054e8:	9a04      	ldr	r2, [sp, #16]
  4054ea:	6816      	ldr	r6, [r2, #0]
  4054ec:	4613      	mov	r3, r2
  4054ee:	3304      	adds	r3, #4
  4054f0:	17f7      	asrs	r7, r6, #31
  4054f2:	9304      	str	r3, [sp, #16]
  4054f4:	4632      	mov	r2, r6
  4054f6:	463b      	mov	r3, r7
  4054f8:	e4bf      	b.n	404e7a <_vfiprintf_r+0x386>
  4054fa:	9801      	ldr	r0, [sp, #4]
  4054fc:	9900      	ldr	r1, [sp, #0]
  4054fe:	aa0d      	add	r2, sp, #52	; 0x34
  405500:	f7ff fabc 	bl	404a7c <__sprint_r.part.0>
  405504:	2800      	cmp	r0, #0
  405506:	f47f aeb9 	bne.w	40527c <_vfiprintf_r+0x788>
  40550a:	4654      	mov	r4, sl
  40550c:	f7ff bbbe 	b.w	404c8c <_vfiprintf_r+0x198>
  405510:	4608      	mov	r0, r1
  405512:	4654      	mov	r4, sl
  405514:	4611      	mov	r1, r2
  405516:	e64c      	b.n	4051b2 <_vfiprintf_r+0x6be>
  405518:	46d1      	mov	r9, sl
  40551a:	f8cd c014 	str.w	ip, [sp, #20]
  40551e:	4630      	mov	r0, r6
  405520:	4639      	mov	r1, r7
  405522:	220a      	movs	r2, #10
  405524:	2300      	movs	r3, #0
  405526:	f001 fde3 	bl	4070f0 <__aeabi_uldivmod>
  40552a:	3230      	adds	r2, #48	; 0x30
  40552c:	4630      	mov	r0, r6
  40552e:	4639      	mov	r1, r7
  405530:	f809 2d01 	strb.w	r2, [r9, #-1]!
  405534:	2300      	movs	r3, #0
  405536:	220a      	movs	r2, #10
  405538:	f001 fdda 	bl	4070f0 <__aeabi_uldivmod>
  40553c:	4606      	mov	r6, r0
  40553e:	460f      	mov	r7, r1
  405540:	ea56 0307 	orrs.w	r3, r6, r7
  405544:	d1eb      	bne.n	40551e <_vfiprintf_r+0xa2a>
  405546:	f8dd c014 	ldr.w	ip, [sp, #20]
  40554a:	e786      	b.n	40545a <_vfiprintf_r+0x966>
  40554c:	2b30      	cmp	r3, #48	; 0x30
  40554e:	9b07      	ldr	r3, [sp, #28]
  405550:	d086      	beq.n	405460 <_vfiprintf_r+0x96c>
  405552:	3b01      	subs	r3, #1
  405554:	461a      	mov	r2, r3
  405556:	9307      	str	r3, [sp, #28]
  405558:	2330      	movs	r3, #48	; 0x30
  40555a:	ebc2 090a 	rsb	r9, r2, sl
  40555e:	f801 3c01 	strb.w	r3, [r1, #-1]
  405562:	f7ff bbf9 	b.w	404d58 <_vfiprintf_r+0x264>
  405566:	9801      	ldr	r0, [sp, #4]
  405568:	9900      	ldr	r1, [sp, #0]
  40556a:	f8cd c014 	str.w	ip, [sp, #20]
  40556e:	aa0d      	add	r2, sp, #52	; 0x34
  405570:	f7ff fa84 	bl	404a7c <__sprint_r.part.0>
  405574:	2800      	cmp	r0, #0
  405576:	f47f ae81 	bne.w	40527c <_vfiprintf_r+0x788>
  40557a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40557c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40557e:	f8dd c014 	ldr.w	ip, [sp, #20]
  405582:	1c48      	adds	r0, r1, #1
  405584:	4654      	mov	r4, sl
  405586:	e614      	b.n	4051b2 <_vfiprintf_r+0x6be>
  405588:	9801      	ldr	r0, [sp, #4]
  40558a:	9900      	ldr	r1, [sp, #0]
  40558c:	f8cd c020 	str.w	ip, [sp, #32]
  405590:	aa0d      	add	r2, sp, #52	; 0x34
  405592:	f7ff fa73 	bl	404a7c <__sprint_r.part.0>
  405596:	2800      	cmp	r0, #0
  405598:	f47f ae70 	bne.w	40527c <_vfiprintf_r+0x788>
  40559c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40559e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4055a0:	f8dd c020 	ldr.w	ip, [sp, #32]
  4055a4:	1c48      	adds	r0, r1, #1
  4055a6:	4654      	mov	r4, sl
  4055a8:	e5f4      	b.n	405194 <_vfiprintf_r+0x6a0>
  4055aa:	2a00      	cmp	r2, #0
  4055ac:	d167      	bne.n	40567e <_vfiprintf_r+0xb8a>
  4055ae:	2001      	movs	r0, #1
  4055b0:	4611      	mov	r1, r2
  4055b2:	4654      	mov	r4, sl
  4055b4:	e601      	b.n	4051ba <_vfiprintf_r+0x6c6>
  4055b6:	9801      	ldr	r0, [sp, #4]
  4055b8:	9900      	ldr	r1, [sp, #0]
  4055ba:	aa0d      	add	r2, sp, #52	; 0x34
  4055bc:	f7ff fa5e 	bl	404a7c <__sprint_r.part.0>
  4055c0:	2800      	cmp	r0, #0
  4055c2:	f47f ae5b 	bne.w	40527c <_vfiprintf_r+0x788>
  4055c6:	980e      	ldr	r0, [sp, #56]	; 0x38
  4055c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4055ca:	3001      	adds	r0, #1
  4055cc:	4654      	mov	r4, sl
  4055ce:	e624      	b.n	40521a <_vfiprintf_r+0x726>
  4055d0:	252d      	movs	r5, #45	; 0x2d
  4055d2:	4276      	negs	r6, r6
  4055d4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4055d8:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  4055dc:	46e1      	mov	r9, ip
  4055de:	2301      	movs	r3, #1
  4055e0:	f7ff bb91 	b.w	404d06 <_vfiprintf_r+0x212>
  4055e4:	9b05      	ldr	r3, [sp, #20]
  4055e6:	4611      	mov	r1, r2
  4055e8:	2001      	movs	r0, #1
  4055ea:	4654      	mov	r4, sl
  4055ec:	2b00      	cmp	r3, #0
  4055ee:	f43f ade4 	beq.w	4051ba <_vfiprintf_r+0x6c6>
  4055f2:	aa0c      	add	r2, sp, #48	; 0x30
  4055f4:	2302      	movs	r3, #2
  4055f6:	e88a 000c 	stmia.w	sl, {r2, r3}
  4055fa:	461a      	mov	r2, r3
  4055fc:	e5d6      	b.n	4051ac <_vfiprintf_r+0x6b8>
  4055fe:	f018 0f10 	tst.w	r8, #16
  405602:	d10b      	bne.n	40561c <_vfiprintf_r+0xb28>
  405604:	f018 0f40 	tst.w	r8, #64	; 0x40
  405608:	d008      	beq.n	40561c <_vfiprintf_r+0xb28>
  40560a:	9a04      	ldr	r2, [sp, #16]
  40560c:	6813      	ldr	r3, [r2, #0]
  40560e:	3204      	adds	r2, #4
  405610:	9204      	str	r2, [sp, #16]
  405612:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  405616:	801a      	strh	r2, [r3, #0]
  405618:	f7ff ba9e 	b.w	404b58 <_vfiprintf_r+0x64>
  40561c:	9a04      	ldr	r2, [sp, #16]
  40561e:	6813      	ldr	r3, [r2, #0]
  405620:	3204      	adds	r2, #4
  405622:	9204      	str	r2, [sp, #16]
  405624:	9a02      	ldr	r2, [sp, #8]
  405626:	601a      	str	r2, [r3, #0]
  405628:	f7ff ba96 	b.w	404b58 <_vfiprintf_r+0x64>
  40562c:	9801      	ldr	r0, [sp, #4]
  40562e:	9900      	ldr	r1, [sp, #0]
  405630:	f8cd c020 	str.w	ip, [sp, #32]
  405634:	aa0d      	add	r2, sp, #52	; 0x34
  405636:	f7ff fa21 	bl	404a7c <__sprint_r.part.0>
  40563a:	2800      	cmp	r0, #0
  40563c:	f47f ae1e 	bne.w	40527c <_vfiprintf_r+0x788>
  405640:	990e      	ldr	r1, [sp, #56]	; 0x38
  405642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405644:	f8dd c020 	ldr.w	ip, [sp, #32]
  405648:	1c48      	adds	r0, r1, #1
  40564a:	4654      	mov	r4, sl
  40564c:	e591      	b.n	405172 <_vfiprintf_r+0x67e>
  40564e:	f048 0820 	orr.w	r8, r8, #32
  405652:	f10b 0001 	add.w	r0, fp, #1
  405656:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40565a:	f7ff bab4 	b.w	404bc6 <_vfiprintf_r+0xd2>
  40565e:	426d      	negs	r5, r5
  405660:	9304      	str	r3, [sp, #16]
  405662:	4658      	mov	r0, fp
  405664:	f7ff bbc6 	b.w	404df4 <_vfiprintf_r+0x300>
  405668:	9807      	ldr	r0, [sp, #28]
  40566a:	9604      	str	r6, [sp, #16]
  40566c:	f7ff f9a4 	bl	4049b8 <strlen>
  405670:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  405674:	4681      	mov	r9, r0
  405676:	f04f 0c00 	mov.w	ip, #0
  40567a:	f7ff bb6d 	b.w	404d58 <_vfiprintf_r+0x264>
  40567e:	9801      	ldr	r0, [sp, #4]
  405680:	9900      	ldr	r1, [sp, #0]
  405682:	f8cd c014 	str.w	ip, [sp, #20]
  405686:	aa0d      	add	r2, sp, #52	; 0x34
  405688:	f7ff f9f8 	bl	404a7c <__sprint_r.part.0>
  40568c:	2800      	cmp	r0, #0
  40568e:	f47f adf5 	bne.w	40527c <_vfiprintf_r+0x788>
  405692:	990e      	ldr	r1, [sp, #56]	; 0x38
  405694:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405696:	f8dd c014 	ldr.w	ip, [sp, #20]
  40569a:	1c48      	adds	r0, r1, #1
  40569c:	4654      	mov	r4, sl
  40569e:	e58c      	b.n	4051ba <_vfiprintf_r+0x6c6>
  4056a0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4056a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4056a4:	4f15      	ldr	r7, [pc, #84]	; (4056fc <_vfiprintf_r+0xc08>)
  4056a6:	3101      	adds	r1, #1
  4056a8:	f7ff bb98 	b.w	404ddc <_vfiprintf_r+0x2e8>
  4056ac:	f1bc 0f06 	cmp.w	ip, #6
  4056b0:	bf28      	it	cs
  4056b2:	f04f 0c06 	movcs.w	ip, #6
  4056b6:	4b12      	ldr	r3, [pc, #72]	; (405700 <_vfiprintf_r+0xc0c>)
  4056b8:	9604      	str	r6, [sp, #16]
  4056ba:	46e1      	mov	r9, ip
  4056bc:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  4056c0:	9307      	str	r3, [sp, #28]
  4056c2:	e460      	b.n	404f86 <_vfiprintf_r+0x492>
  4056c4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4056c6:	4f0d      	ldr	r7, [pc, #52]	; (4056fc <_vfiprintf_r+0xc08>)
  4056c8:	f101 0e01 	add.w	lr, r1, #1
  4056cc:	e618      	b.n	405300 <_vfiprintf_r+0x80c>
  4056ce:	46e1      	mov	r9, ip
  4056d0:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  4056d4:	9604      	str	r6, [sp, #16]
  4056d6:	4684      	mov	ip, r0
  4056d8:	f7ff bb3e 	b.w	404d58 <_vfiprintf_r+0x264>
  4056dc:	4686      	mov	lr, r0
  4056de:	e66b      	b.n	4053b8 <_vfiprintf_r+0x8c4>
  4056e0:	9a04      	ldr	r2, [sp, #16]
  4056e2:	f89b 3001 	ldrb.w	r3, [fp, #1]
  4056e6:	6816      	ldr	r6, [r2, #0]
  4056e8:	3204      	adds	r2, #4
  4056ea:	2e00      	cmp	r6, #0
  4056ec:	9204      	str	r2, [sp, #16]
  4056ee:	f6bf aa6a 	bge.w	404bc6 <_vfiprintf_r+0xd2>
  4056f2:	f04f 36ff 	mov.w	r6, #4294967295
  4056f6:	f7ff ba66 	b.w	404bc6 <_vfiprintf_r+0xd2>
  4056fa:	bf00      	nop
  4056fc:	00407eb0 	.word	0x00407eb0
  405700:	00407ea8 	.word	0x00407ea8

00405704 <__sbprintf>:
  405704:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  405708:	460c      	mov	r4, r1
  40570a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40570e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  405712:	69e7      	ldr	r7, [r4, #28]
  405714:	6e49      	ldr	r1, [r1, #100]	; 0x64
  405716:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  40571a:	9119      	str	r1, [sp, #100]	; 0x64
  40571c:	ad1a      	add	r5, sp, #104	; 0x68
  40571e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  405722:	f02e 0e02 	bic.w	lr, lr, #2
  405726:	f04f 0c00 	mov.w	ip, #0
  40572a:	9707      	str	r7, [sp, #28]
  40572c:	4669      	mov	r1, sp
  40572e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405730:	9500      	str	r5, [sp, #0]
  405732:	9504      	str	r5, [sp, #16]
  405734:	9602      	str	r6, [sp, #8]
  405736:	9605      	str	r6, [sp, #20]
  405738:	f8ad e00c 	strh.w	lr, [sp, #12]
  40573c:	f8ad 900e 	strh.w	r9, [sp, #14]
  405740:	9709      	str	r7, [sp, #36]	; 0x24
  405742:	f8cd c018 	str.w	ip, [sp, #24]
  405746:	4606      	mov	r6, r0
  405748:	f7ff f9d4 	bl	404af4 <_vfiprintf_r>
  40574c:	1e05      	subs	r5, r0, #0
  40574e:	db07      	blt.n	405760 <__sbprintf+0x5c>
  405750:	4630      	mov	r0, r6
  405752:	4669      	mov	r1, sp
  405754:	f000 f92e 	bl	4059b4 <_fflush_r>
  405758:	2800      	cmp	r0, #0
  40575a:	bf18      	it	ne
  40575c:	f04f 35ff 	movne.w	r5, #4294967295
  405760:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405764:	065b      	lsls	r3, r3, #25
  405766:	d503      	bpl.n	405770 <__sbprintf+0x6c>
  405768:	89a3      	ldrh	r3, [r4, #12]
  40576a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40576e:	81a3      	strh	r3, [r4, #12]
  405770:	4628      	mov	r0, r5
  405772:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405776:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  40577a:	bf00      	nop

0040577c <__swsetup_r>:
  40577c:	b538      	push	{r3, r4, r5, lr}
  40577e:	4b2f      	ldr	r3, [pc, #188]	; (40583c <__swsetup_r+0xc0>)
  405780:	681b      	ldr	r3, [r3, #0]
  405782:	4605      	mov	r5, r0
  405784:	460c      	mov	r4, r1
  405786:	b113      	cbz	r3, 40578e <__swsetup_r+0x12>
  405788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40578a:	2a00      	cmp	r2, #0
  40578c:	d036      	beq.n	4057fc <__swsetup_r+0x80>
  40578e:	89a2      	ldrh	r2, [r4, #12]
  405790:	b293      	uxth	r3, r2
  405792:	0718      	lsls	r0, r3, #28
  405794:	d50c      	bpl.n	4057b0 <__swsetup_r+0x34>
  405796:	6920      	ldr	r0, [r4, #16]
  405798:	b1a8      	cbz	r0, 4057c6 <__swsetup_r+0x4a>
  40579a:	f013 0201 	ands.w	r2, r3, #1
  40579e:	d01e      	beq.n	4057de <__swsetup_r+0x62>
  4057a0:	6963      	ldr	r3, [r4, #20]
  4057a2:	2200      	movs	r2, #0
  4057a4:	425b      	negs	r3, r3
  4057a6:	61a3      	str	r3, [r4, #24]
  4057a8:	60a2      	str	r2, [r4, #8]
  4057aa:	b1f0      	cbz	r0, 4057ea <__swsetup_r+0x6e>
  4057ac:	2000      	movs	r0, #0
  4057ae:	bd38      	pop	{r3, r4, r5, pc}
  4057b0:	06d9      	lsls	r1, r3, #27
  4057b2:	d53b      	bpl.n	40582c <__swsetup_r+0xb0>
  4057b4:	0758      	lsls	r0, r3, #29
  4057b6:	d425      	bmi.n	405804 <__swsetup_r+0x88>
  4057b8:	6920      	ldr	r0, [r4, #16]
  4057ba:	f042 0308 	orr.w	r3, r2, #8
  4057be:	81a3      	strh	r3, [r4, #12]
  4057c0:	b29b      	uxth	r3, r3
  4057c2:	2800      	cmp	r0, #0
  4057c4:	d1e9      	bne.n	40579a <__swsetup_r+0x1e>
  4057c6:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4057ca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4057ce:	d0e4      	beq.n	40579a <__swsetup_r+0x1e>
  4057d0:	4628      	mov	r0, r5
  4057d2:	4621      	mov	r1, r4
  4057d4:	f000 fcf2 	bl	4061bc <__smakebuf_r>
  4057d8:	89a3      	ldrh	r3, [r4, #12]
  4057da:	6920      	ldr	r0, [r4, #16]
  4057dc:	e7dd      	b.n	40579a <__swsetup_r+0x1e>
  4057de:	0799      	lsls	r1, r3, #30
  4057e0:	bf58      	it	pl
  4057e2:	6962      	ldrpl	r2, [r4, #20]
  4057e4:	60a2      	str	r2, [r4, #8]
  4057e6:	2800      	cmp	r0, #0
  4057e8:	d1e0      	bne.n	4057ac <__swsetup_r+0x30>
  4057ea:	89a3      	ldrh	r3, [r4, #12]
  4057ec:	061a      	lsls	r2, r3, #24
  4057ee:	d5de      	bpl.n	4057ae <__swsetup_r+0x32>
  4057f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4057f4:	81a3      	strh	r3, [r4, #12]
  4057f6:	f04f 30ff 	mov.w	r0, #4294967295
  4057fa:	bd38      	pop	{r3, r4, r5, pc}
  4057fc:	4618      	mov	r0, r3
  4057fe:	f000 f96d 	bl	405adc <__sinit>
  405802:	e7c4      	b.n	40578e <__swsetup_r+0x12>
  405804:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405806:	b149      	cbz	r1, 40581c <__swsetup_r+0xa0>
  405808:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40580c:	4299      	cmp	r1, r3
  40580e:	d003      	beq.n	405818 <__swsetup_r+0x9c>
  405810:	4628      	mov	r0, r5
  405812:	f000 fa3b 	bl	405c8c <_free_r>
  405816:	89a2      	ldrh	r2, [r4, #12]
  405818:	2300      	movs	r3, #0
  40581a:	6323      	str	r3, [r4, #48]	; 0x30
  40581c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405820:	2300      	movs	r3, #0
  405822:	6920      	ldr	r0, [r4, #16]
  405824:	6063      	str	r3, [r4, #4]
  405826:	b292      	uxth	r2, r2
  405828:	6020      	str	r0, [r4, #0]
  40582a:	e7c6      	b.n	4057ba <__swsetup_r+0x3e>
  40582c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405830:	2309      	movs	r3, #9
  405832:	602b      	str	r3, [r5, #0]
  405834:	f04f 30ff 	mov.w	r0, #4294967295
  405838:	81a2      	strh	r2, [r4, #12]
  40583a:	bd38      	pop	{r3, r4, r5, pc}
  40583c:	20000460 	.word	0x20000460

00405840 <register_fini>:
  405840:	4b02      	ldr	r3, [pc, #8]	; (40584c <register_fini+0xc>)
  405842:	b113      	cbz	r3, 40584a <register_fini+0xa>
  405844:	4802      	ldr	r0, [pc, #8]	; (405850 <register_fini+0x10>)
  405846:	f000 b805 	b.w	405854 <atexit>
  40584a:	4770      	bx	lr
  40584c:	00000000 	.word	0x00000000
  405850:	00405af1 	.word	0x00405af1

00405854 <atexit>:
  405854:	4601      	mov	r1, r0
  405856:	2000      	movs	r0, #0
  405858:	4602      	mov	r2, r0
  40585a:	4603      	mov	r3, r0
  40585c:	f001 bb54 	b.w	406f08 <__register_exitproc>

00405860 <__sflush_r>:
  405860:	898b      	ldrh	r3, [r1, #12]
  405862:	b29a      	uxth	r2, r3
  405864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405868:	460d      	mov	r5, r1
  40586a:	0711      	lsls	r1, r2, #28
  40586c:	4680      	mov	r8, r0
  40586e:	d43c      	bmi.n	4058ea <__sflush_r+0x8a>
  405870:	686a      	ldr	r2, [r5, #4]
  405872:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405876:	2a00      	cmp	r2, #0
  405878:	81ab      	strh	r3, [r5, #12]
  40587a:	dd65      	ble.n	405948 <__sflush_r+0xe8>
  40587c:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40587e:	2e00      	cmp	r6, #0
  405880:	d04b      	beq.n	40591a <__sflush_r+0xba>
  405882:	b29b      	uxth	r3, r3
  405884:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  405888:	2100      	movs	r1, #0
  40588a:	b292      	uxth	r2, r2
  40588c:	f8d8 4000 	ldr.w	r4, [r8]
  405890:	f8c8 1000 	str.w	r1, [r8]
  405894:	2a00      	cmp	r2, #0
  405896:	d05b      	beq.n	405950 <__sflush_r+0xf0>
  405898:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40589a:	075f      	lsls	r7, r3, #29
  40589c:	d505      	bpl.n	4058aa <__sflush_r+0x4a>
  40589e:	6869      	ldr	r1, [r5, #4]
  4058a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4058a2:	1a52      	subs	r2, r2, r1
  4058a4:	b10b      	cbz	r3, 4058aa <__sflush_r+0x4a>
  4058a6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4058a8:	1ad2      	subs	r2, r2, r3
  4058aa:	4640      	mov	r0, r8
  4058ac:	69e9      	ldr	r1, [r5, #28]
  4058ae:	2300      	movs	r3, #0
  4058b0:	47b0      	blx	r6
  4058b2:	1c46      	adds	r6, r0, #1
  4058b4:	d056      	beq.n	405964 <__sflush_r+0x104>
  4058b6:	89ab      	ldrh	r3, [r5, #12]
  4058b8:	692a      	ldr	r2, [r5, #16]
  4058ba:	602a      	str	r2, [r5, #0]
  4058bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4058c0:	b29b      	uxth	r3, r3
  4058c2:	2200      	movs	r2, #0
  4058c4:	606a      	str	r2, [r5, #4]
  4058c6:	04da      	lsls	r2, r3, #19
  4058c8:	81ab      	strh	r3, [r5, #12]
  4058ca:	d43b      	bmi.n	405944 <__sflush_r+0xe4>
  4058cc:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4058ce:	f8c8 4000 	str.w	r4, [r8]
  4058d2:	b311      	cbz	r1, 40591a <__sflush_r+0xba>
  4058d4:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4058d8:	4299      	cmp	r1, r3
  4058da:	d002      	beq.n	4058e2 <__sflush_r+0x82>
  4058dc:	4640      	mov	r0, r8
  4058de:	f000 f9d5 	bl	405c8c <_free_r>
  4058e2:	2000      	movs	r0, #0
  4058e4:	6328      	str	r0, [r5, #48]	; 0x30
  4058e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4058ea:	692e      	ldr	r6, [r5, #16]
  4058ec:	b1ae      	cbz	r6, 40591a <__sflush_r+0xba>
  4058ee:	682c      	ldr	r4, [r5, #0]
  4058f0:	602e      	str	r6, [r5, #0]
  4058f2:	0791      	lsls	r1, r2, #30
  4058f4:	bf0c      	ite	eq
  4058f6:	696b      	ldreq	r3, [r5, #20]
  4058f8:	2300      	movne	r3, #0
  4058fa:	1ba4      	subs	r4, r4, r6
  4058fc:	60ab      	str	r3, [r5, #8]
  4058fe:	e00a      	b.n	405916 <__sflush_r+0xb6>
  405900:	4632      	mov	r2, r6
  405902:	4623      	mov	r3, r4
  405904:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405906:	69e9      	ldr	r1, [r5, #28]
  405908:	4640      	mov	r0, r8
  40590a:	47b8      	blx	r7
  40590c:	2800      	cmp	r0, #0
  40590e:	eba4 0400 	sub.w	r4, r4, r0
  405912:	4406      	add	r6, r0
  405914:	dd04      	ble.n	405920 <__sflush_r+0xc0>
  405916:	2c00      	cmp	r4, #0
  405918:	dcf2      	bgt.n	405900 <__sflush_r+0xa0>
  40591a:	2000      	movs	r0, #0
  40591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405920:	89ab      	ldrh	r3, [r5, #12]
  405922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405926:	81ab      	strh	r3, [r5, #12]
  405928:	f04f 30ff 	mov.w	r0, #4294967295
  40592c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405930:	89ab      	ldrh	r3, [r5, #12]
  405932:	692a      	ldr	r2, [r5, #16]
  405934:	6069      	str	r1, [r5, #4]
  405936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40593a:	b29b      	uxth	r3, r3
  40593c:	81ab      	strh	r3, [r5, #12]
  40593e:	04db      	lsls	r3, r3, #19
  405940:	602a      	str	r2, [r5, #0]
  405942:	d5c3      	bpl.n	4058cc <__sflush_r+0x6c>
  405944:	6528      	str	r0, [r5, #80]	; 0x50
  405946:	e7c1      	b.n	4058cc <__sflush_r+0x6c>
  405948:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40594a:	2a00      	cmp	r2, #0
  40594c:	dc96      	bgt.n	40587c <__sflush_r+0x1c>
  40594e:	e7e4      	b.n	40591a <__sflush_r+0xba>
  405950:	2301      	movs	r3, #1
  405952:	4640      	mov	r0, r8
  405954:	69e9      	ldr	r1, [r5, #28]
  405956:	47b0      	blx	r6
  405958:	1c43      	adds	r3, r0, #1
  40595a:	4602      	mov	r2, r0
  40595c:	d019      	beq.n	405992 <__sflush_r+0x132>
  40595e:	89ab      	ldrh	r3, [r5, #12]
  405960:	6aae      	ldr	r6, [r5, #40]	; 0x28
  405962:	e79a      	b.n	40589a <__sflush_r+0x3a>
  405964:	f8d8 1000 	ldr.w	r1, [r8]
  405968:	2900      	cmp	r1, #0
  40596a:	d0e1      	beq.n	405930 <__sflush_r+0xd0>
  40596c:	291d      	cmp	r1, #29
  40596e:	d007      	beq.n	405980 <__sflush_r+0x120>
  405970:	2916      	cmp	r1, #22
  405972:	d005      	beq.n	405980 <__sflush_r+0x120>
  405974:	89ab      	ldrh	r3, [r5, #12]
  405976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40597a:	81ab      	strh	r3, [r5, #12]
  40597c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405980:	89ab      	ldrh	r3, [r5, #12]
  405982:	692a      	ldr	r2, [r5, #16]
  405984:	602a      	str	r2, [r5, #0]
  405986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40598a:	2200      	movs	r2, #0
  40598c:	81ab      	strh	r3, [r5, #12]
  40598e:	606a      	str	r2, [r5, #4]
  405990:	e79c      	b.n	4058cc <__sflush_r+0x6c>
  405992:	f8d8 3000 	ldr.w	r3, [r8]
  405996:	2b00      	cmp	r3, #0
  405998:	d0e1      	beq.n	40595e <__sflush_r+0xfe>
  40599a:	2b1d      	cmp	r3, #29
  40599c:	d007      	beq.n	4059ae <__sflush_r+0x14e>
  40599e:	2b16      	cmp	r3, #22
  4059a0:	d005      	beq.n	4059ae <__sflush_r+0x14e>
  4059a2:	89ab      	ldrh	r3, [r5, #12]
  4059a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4059a8:	81ab      	strh	r3, [r5, #12]
  4059aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4059ae:	f8c8 4000 	str.w	r4, [r8]
  4059b2:	e7b2      	b.n	40591a <__sflush_r+0xba>

004059b4 <_fflush_r>:
  4059b4:	b510      	push	{r4, lr}
  4059b6:	4604      	mov	r4, r0
  4059b8:	b082      	sub	sp, #8
  4059ba:	b108      	cbz	r0, 4059c0 <_fflush_r+0xc>
  4059bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4059be:	b153      	cbz	r3, 4059d6 <_fflush_r+0x22>
  4059c0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4059c4:	b908      	cbnz	r0, 4059ca <_fflush_r+0x16>
  4059c6:	b002      	add	sp, #8
  4059c8:	bd10      	pop	{r4, pc}
  4059ca:	4620      	mov	r0, r4
  4059cc:	b002      	add	sp, #8
  4059ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4059d2:	f7ff bf45 	b.w	405860 <__sflush_r>
  4059d6:	9101      	str	r1, [sp, #4]
  4059d8:	f000 f880 	bl	405adc <__sinit>
  4059dc:	9901      	ldr	r1, [sp, #4]
  4059de:	e7ef      	b.n	4059c0 <_fflush_r+0xc>

004059e0 <_cleanup_r>:
  4059e0:	4901      	ldr	r1, [pc, #4]	; (4059e8 <_cleanup_r+0x8>)
  4059e2:	f000 bbb7 	b.w	406154 <_fwalk_reent>
  4059e6:	bf00      	nop
  4059e8:	00406fd1 	.word	0x00406fd1

004059ec <__sinit.part.1>:
  4059ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059f0:	4b35      	ldr	r3, [pc, #212]	; (405ac8 <__sinit.part.1+0xdc>)
  4059f2:	6845      	ldr	r5, [r0, #4]
  4059f4:	63c3      	str	r3, [r0, #60]	; 0x3c
  4059f6:	2400      	movs	r4, #0
  4059f8:	4607      	mov	r7, r0
  4059fa:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4059fe:	2304      	movs	r3, #4
  405a00:	2103      	movs	r1, #3
  405a02:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  405a06:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  405a0a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  405a0e:	b083      	sub	sp, #12
  405a10:	602c      	str	r4, [r5, #0]
  405a12:	606c      	str	r4, [r5, #4]
  405a14:	60ac      	str	r4, [r5, #8]
  405a16:	666c      	str	r4, [r5, #100]	; 0x64
  405a18:	81ec      	strh	r4, [r5, #14]
  405a1a:	612c      	str	r4, [r5, #16]
  405a1c:	616c      	str	r4, [r5, #20]
  405a1e:	61ac      	str	r4, [r5, #24]
  405a20:	81ab      	strh	r3, [r5, #12]
  405a22:	4621      	mov	r1, r4
  405a24:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405a28:	2208      	movs	r2, #8
  405a2a:	f7fe febd 	bl	4047a8 <memset>
  405a2e:	68be      	ldr	r6, [r7, #8]
  405a30:	f8df b098 	ldr.w	fp, [pc, #152]	; 405acc <__sinit.part.1+0xe0>
  405a34:	f8df a098 	ldr.w	sl, [pc, #152]	; 405ad0 <__sinit.part.1+0xe4>
  405a38:	f8df 9098 	ldr.w	r9, [pc, #152]	; 405ad4 <__sinit.part.1+0xe8>
  405a3c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 405ad8 <__sinit.part.1+0xec>
  405a40:	f8c5 b020 	str.w	fp, [r5, #32]
  405a44:	2301      	movs	r3, #1
  405a46:	2209      	movs	r2, #9
  405a48:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  405a4c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  405a50:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  405a54:	61ed      	str	r5, [r5, #28]
  405a56:	4621      	mov	r1, r4
  405a58:	81f3      	strh	r3, [r6, #14]
  405a5a:	81b2      	strh	r2, [r6, #12]
  405a5c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  405a60:	6034      	str	r4, [r6, #0]
  405a62:	6074      	str	r4, [r6, #4]
  405a64:	60b4      	str	r4, [r6, #8]
  405a66:	6674      	str	r4, [r6, #100]	; 0x64
  405a68:	6134      	str	r4, [r6, #16]
  405a6a:	6174      	str	r4, [r6, #20]
  405a6c:	61b4      	str	r4, [r6, #24]
  405a6e:	2208      	movs	r2, #8
  405a70:	9301      	str	r3, [sp, #4]
  405a72:	f7fe fe99 	bl	4047a8 <memset>
  405a76:	68fd      	ldr	r5, [r7, #12]
  405a78:	61f6      	str	r6, [r6, #28]
  405a7a:	2012      	movs	r0, #18
  405a7c:	2202      	movs	r2, #2
  405a7e:	f8c6 b020 	str.w	fp, [r6, #32]
  405a82:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  405a86:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  405a8a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  405a8e:	4621      	mov	r1, r4
  405a90:	81a8      	strh	r0, [r5, #12]
  405a92:	81ea      	strh	r2, [r5, #14]
  405a94:	602c      	str	r4, [r5, #0]
  405a96:	606c      	str	r4, [r5, #4]
  405a98:	60ac      	str	r4, [r5, #8]
  405a9a:	666c      	str	r4, [r5, #100]	; 0x64
  405a9c:	612c      	str	r4, [r5, #16]
  405a9e:	616c      	str	r4, [r5, #20]
  405aa0:	61ac      	str	r4, [r5, #24]
  405aa2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405aa6:	2208      	movs	r2, #8
  405aa8:	f7fe fe7e 	bl	4047a8 <memset>
  405aac:	9b01      	ldr	r3, [sp, #4]
  405aae:	61ed      	str	r5, [r5, #28]
  405ab0:	f8c5 b020 	str.w	fp, [r5, #32]
  405ab4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  405ab8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  405abc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  405ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  405ac2:	b003      	add	sp, #12
  405ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ac8:	004059e1 	.word	0x004059e1
  405acc:	00406d45 	.word	0x00406d45
  405ad0:	00406d69 	.word	0x00406d69
  405ad4:	00406da1 	.word	0x00406da1
  405ad8:	00406dc1 	.word	0x00406dc1

00405adc <__sinit>:
  405adc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405ade:	b103      	cbz	r3, 405ae2 <__sinit+0x6>
  405ae0:	4770      	bx	lr
  405ae2:	f7ff bf83 	b.w	4059ec <__sinit.part.1>
  405ae6:	bf00      	nop

00405ae8 <__sfp_lock_acquire>:
  405ae8:	4770      	bx	lr
  405aea:	bf00      	nop

00405aec <__sfp_lock_release>:
  405aec:	4770      	bx	lr
  405aee:	bf00      	nop

00405af0 <__libc_fini_array>:
  405af0:	b538      	push	{r3, r4, r5, lr}
  405af2:	4b08      	ldr	r3, [pc, #32]	; (405b14 <__libc_fini_array+0x24>)
  405af4:	4d08      	ldr	r5, [pc, #32]	; (405b18 <__libc_fini_array+0x28>)
  405af6:	1aed      	subs	r5, r5, r3
  405af8:	10ac      	asrs	r4, r5, #2
  405afa:	bf18      	it	ne
  405afc:	18ed      	addne	r5, r5, r3
  405afe:	d005      	beq.n	405b0c <__libc_fini_array+0x1c>
  405b00:	3c01      	subs	r4, #1
  405b02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405b06:	4798      	blx	r3
  405b08:	2c00      	cmp	r4, #0
  405b0a:	d1f9      	bne.n	405b00 <__libc_fini_array+0x10>
  405b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405b10:	f002 b9e0 	b.w	407ed4 <_fini>
  405b14:	00407ee0 	.word	0x00407ee0
  405b18:	00407ee4 	.word	0x00407ee4

00405b1c <__fputwc>:
  405b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405b20:	b082      	sub	sp, #8
  405b22:	4607      	mov	r7, r0
  405b24:	460e      	mov	r6, r1
  405b26:	4614      	mov	r4, r2
  405b28:	f000 fb42 	bl	4061b0 <__locale_mb_cur_max>
  405b2c:	2801      	cmp	r0, #1
  405b2e:	d041      	beq.n	405bb4 <__fputwc+0x98>
  405b30:	4638      	mov	r0, r7
  405b32:	a901      	add	r1, sp, #4
  405b34:	4632      	mov	r2, r6
  405b36:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405b3a:	f001 f999 	bl	406e70 <_wcrtomb_r>
  405b3e:	f1b0 3fff 	cmp.w	r0, #4294967295
  405b42:	4680      	mov	r8, r0
  405b44:	d02f      	beq.n	405ba6 <__fputwc+0x8a>
  405b46:	2800      	cmp	r0, #0
  405b48:	d03c      	beq.n	405bc4 <__fputwc+0xa8>
  405b4a:	f89d 1004 	ldrb.w	r1, [sp, #4]
  405b4e:	2500      	movs	r5, #0
  405b50:	e009      	b.n	405b66 <__fputwc+0x4a>
  405b52:	6823      	ldr	r3, [r4, #0]
  405b54:	7019      	strb	r1, [r3, #0]
  405b56:	6823      	ldr	r3, [r4, #0]
  405b58:	3301      	adds	r3, #1
  405b5a:	6023      	str	r3, [r4, #0]
  405b5c:	3501      	adds	r5, #1
  405b5e:	45a8      	cmp	r8, r5
  405b60:	d930      	bls.n	405bc4 <__fputwc+0xa8>
  405b62:	ab01      	add	r3, sp, #4
  405b64:	5d59      	ldrb	r1, [r3, r5]
  405b66:	68a3      	ldr	r3, [r4, #8]
  405b68:	3b01      	subs	r3, #1
  405b6a:	2b00      	cmp	r3, #0
  405b6c:	60a3      	str	r3, [r4, #8]
  405b6e:	daf0      	bge.n	405b52 <__fputwc+0x36>
  405b70:	69a2      	ldr	r2, [r4, #24]
  405b72:	4293      	cmp	r3, r2
  405b74:	db07      	blt.n	405b86 <__fputwc+0x6a>
  405b76:	6823      	ldr	r3, [r4, #0]
  405b78:	7019      	strb	r1, [r3, #0]
  405b7a:	6823      	ldr	r3, [r4, #0]
  405b7c:	7819      	ldrb	r1, [r3, #0]
  405b7e:	290a      	cmp	r1, #10
  405b80:	f103 0301 	add.w	r3, r3, #1
  405b84:	d1e9      	bne.n	405b5a <__fputwc+0x3e>
  405b86:	4638      	mov	r0, r7
  405b88:	4622      	mov	r2, r4
  405b8a:	f001 f91d 	bl	406dc8 <__swbuf_r>
  405b8e:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  405b92:	fab0 f080 	clz	r0, r0
  405b96:	0940      	lsrs	r0, r0, #5
  405b98:	2800      	cmp	r0, #0
  405b9a:	d0df      	beq.n	405b5c <__fputwc+0x40>
  405b9c:	f04f 30ff 	mov.w	r0, #4294967295
  405ba0:	b002      	add	sp, #8
  405ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ba6:	89a3      	ldrh	r3, [r4, #12]
  405ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405bac:	81a3      	strh	r3, [r4, #12]
  405bae:	b002      	add	sp, #8
  405bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405bb4:	1e73      	subs	r3, r6, #1
  405bb6:	2bfe      	cmp	r3, #254	; 0xfe
  405bb8:	d8ba      	bhi.n	405b30 <__fputwc+0x14>
  405bba:	b2f1      	uxtb	r1, r6
  405bbc:	4680      	mov	r8, r0
  405bbe:	f88d 1004 	strb.w	r1, [sp, #4]
  405bc2:	e7c4      	b.n	405b4e <__fputwc+0x32>
  405bc4:	4630      	mov	r0, r6
  405bc6:	b002      	add	sp, #8
  405bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405bcc <_fputwc_r>:
  405bcc:	8993      	ldrh	r3, [r2, #12]
  405bce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  405bd2:	d10b      	bne.n	405bec <_fputwc_r+0x20>
  405bd4:	b410      	push	{r4}
  405bd6:	6e54      	ldr	r4, [r2, #100]	; 0x64
  405bd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405bdc:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  405be0:	6654      	str	r4, [r2, #100]	; 0x64
  405be2:	8193      	strh	r3, [r2, #12]
  405be4:	f85d 4b04 	ldr.w	r4, [sp], #4
  405be8:	f7ff bf98 	b.w	405b1c <__fputwc>
  405bec:	f7ff bf96 	b.w	405b1c <__fputwc>

00405bf0 <_malloc_trim_r>:
  405bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405bf2:	4f23      	ldr	r7, [pc, #140]	; (405c80 <_malloc_trim_r+0x90>)
  405bf4:	460c      	mov	r4, r1
  405bf6:	4606      	mov	r6, r0
  405bf8:	f000 fe98 	bl	40692c <__malloc_lock>
  405bfc:	68bb      	ldr	r3, [r7, #8]
  405bfe:	685d      	ldr	r5, [r3, #4]
  405c00:	f025 0503 	bic.w	r5, r5, #3
  405c04:	1b29      	subs	r1, r5, r4
  405c06:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  405c0a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405c0e:	f021 010f 	bic.w	r1, r1, #15
  405c12:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405c16:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405c1a:	db07      	blt.n	405c2c <_malloc_trim_r+0x3c>
  405c1c:	4630      	mov	r0, r6
  405c1e:	2100      	movs	r1, #0
  405c20:	f001 f87e 	bl	406d20 <_sbrk_r>
  405c24:	68bb      	ldr	r3, [r7, #8]
  405c26:	442b      	add	r3, r5
  405c28:	4298      	cmp	r0, r3
  405c2a:	d004      	beq.n	405c36 <_malloc_trim_r+0x46>
  405c2c:	4630      	mov	r0, r6
  405c2e:	f000 fe7f 	bl	406930 <__malloc_unlock>
  405c32:	2000      	movs	r0, #0
  405c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405c36:	4630      	mov	r0, r6
  405c38:	4261      	negs	r1, r4
  405c3a:	f001 f871 	bl	406d20 <_sbrk_r>
  405c3e:	3001      	adds	r0, #1
  405c40:	d00d      	beq.n	405c5e <_malloc_trim_r+0x6e>
  405c42:	4b10      	ldr	r3, [pc, #64]	; (405c84 <_malloc_trim_r+0x94>)
  405c44:	68ba      	ldr	r2, [r7, #8]
  405c46:	6819      	ldr	r1, [r3, #0]
  405c48:	1b2d      	subs	r5, r5, r4
  405c4a:	f045 0501 	orr.w	r5, r5, #1
  405c4e:	4630      	mov	r0, r6
  405c50:	1b09      	subs	r1, r1, r4
  405c52:	6055      	str	r5, [r2, #4]
  405c54:	6019      	str	r1, [r3, #0]
  405c56:	f000 fe6b 	bl	406930 <__malloc_unlock>
  405c5a:	2001      	movs	r0, #1
  405c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405c5e:	4630      	mov	r0, r6
  405c60:	2100      	movs	r1, #0
  405c62:	f001 f85d 	bl	406d20 <_sbrk_r>
  405c66:	68ba      	ldr	r2, [r7, #8]
  405c68:	1a83      	subs	r3, r0, r2
  405c6a:	2b0f      	cmp	r3, #15
  405c6c:	ddde      	ble.n	405c2c <_malloc_trim_r+0x3c>
  405c6e:	4c06      	ldr	r4, [pc, #24]	; (405c88 <_malloc_trim_r+0x98>)
  405c70:	4904      	ldr	r1, [pc, #16]	; (405c84 <_malloc_trim_r+0x94>)
  405c72:	6824      	ldr	r4, [r4, #0]
  405c74:	f043 0301 	orr.w	r3, r3, #1
  405c78:	1b00      	subs	r0, r0, r4
  405c7a:	6053      	str	r3, [r2, #4]
  405c7c:	6008      	str	r0, [r1, #0]
  405c7e:	e7d5      	b.n	405c2c <_malloc_trim_r+0x3c>
  405c80:	20000488 	.word	0x20000488
  405c84:	2001cdc0 	.word	0x2001cdc0
  405c88:	20000894 	.word	0x20000894

00405c8c <_free_r>:
  405c8c:	2900      	cmp	r1, #0
  405c8e:	d04e      	beq.n	405d2e <_free_r+0xa2>
  405c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c94:	460c      	mov	r4, r1
  405c96:	4680      	mov	r8, r0
  405c98:	f000 fe48 	bl	40692c <__malloc_lock>
  405c9c:	f854 7c04 	ldr.w	r7, [r4, #-4]
  405ca0:	4962      	ldr	r1, [pc, #392]	; (405e2c <_free_r+0x1a0>)
  405ca2:	f027 0201 	bic.w	r2, r7, #1
  405ca6:	f1a4 0508 	sub.w	r5, r4, #8
  405caa:	18ab      	adds	r3, r5, r2
  405cac:	688e      	ldr	r6, [r1, #8]
  405cae:	6858      	ldr	r0, [r3, #4]
  405cb0:	429e      	cmp	r6, r3
  405cb2:	f020 0003 	bic.w	r0, r0, #3
  405cb6:	d05a      	beq.n	405d6e <_free_r+0xe2>
  405cb8:	07fe      	lsls	r6, r7, #31
  405cba:	6058      	str	r0, [r3, #4]
  405cbc:	d40b      	bmi.n	405cd6 <_free_r+0x4a>
  405cbe:	f854 7c08 	ldr.w	r7, [r4, #-8]
  405cc2:	1bed      	subs	r5, r5, r7
  405cc4:	f101 0e08 	add.w	lr, r1, #8
  405cc8:	68ac      	ldr	r4, [r5, #8]
  405cca:	4574      	cmp	r4, lr
  405ccc:	443a      	add	r2, r7
  405cce:	d067      	beq.n	405da0 <_free_r+0x114>
  405cd0:	68ef      	ldr	r7, [r5, #12]
  405cd2:	60e7      	str	r7, [r4, #12]
  405cd4:	60bc      	str	r4, [r7, #8]
  405cd6:	181c      	adds	r4, r3, r0
  405cd8:	6864      	ldr	r4, [r4, #4]
  405cda:	07e4      	lsls	r4, r4, #31
  405cdc:	d40c      	bmi.n	405cf8 <_free_r+0x6c>
  405cde:	4f54      	ldr	r7, [pc, #336]	; (405e30 <_free_r+0x1a4>)
  405ce0:	689c      	ldr	r4, [r3, #8]
  405ce2:	42bc      	cmp	r4, r7
  405ce4:	4402      	add	r2, r0
  405ce6:	d07c      	beq.n	405de2 <_free_r+0x156>
  405ce8:	68d8      	ldr	r0, [r3, #12]
  405cea:	60e0      	str	r0, [r4, #12]
  405cec:	f042 0301 	orr.w	r3, r2, #1
  405cf0:	6084      	str	r4, [r0, #8]
  405cf2:	606b      	str	r3, [r5, #4]
  405cf4:	50aa      	str	r2, [r5, r2]
  405cf6:	e003      	b.n	405d00 <_free_r+0x74>
  405cf8:	f042 0301 	orr.w	r3, r2, #1
  405cfc:	606b      	str	r3, [r5, #4]
  405cfe:	50aa      	str	r2, [r5, r2]
  405d00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405d04:	d214      	bcs.n	405d30 <_free_r+0xa4>
  405d06:	08d2      	lsrs	r2, r2, #3
  405d08:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  405d0c:	6848      	ldr	r0, [r1, #4]
  405d0e:	689f      	ldr	r7, [r3, #8]
  405d10:	60af      	str	r7, [r5, #8]
  405d12:	1092      	asrs	r2, r2, #2
  405d14:	2401      	movs	r4, #1
  405d16:	fa04 f202 	lsl.w	r2, r4, r2
  405d1a:	4310      	orrs	r0, r2
  405d1c:	60eb      	str	r3, [r5, #12]
  405d1e:	6048      	str	r0, [r1, #4]
  405d20:	609d      	str	r5, [r3, #8]
  405d22:	60fd      	str	r5, [r7, #12]
  405d24:	4640      	mov	r0, r8
  405d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405d2a:	f000 be01 	b.w	406930 <__malloc_unlock>
  405d2e:	4770      	bx	lr
  405d30:	0a53      	lsrs	r3, r2, #9
  405d32:	2b04      	cmp	r3, #4
  405d34:	d847      	bhi.n	405dc6 <_free_r+0x13a>
  405d36:	0993      	lsrs	r3, r2, #6
  405d38:	f103 0438 	add.w	r4, r3, #56	; 0x38
  405d3c:	0060      	lsls	r0, r4, #1
  405d3e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  405d42:	493a      	ldr	r1, [pc, #232]	; (405e2c <_free_r+0x1a0>)
  405d44:	6883      	ldr	r3, [r0, #8]
  405d46:	4283      	cmp	r3, r0
  405d48:	d043      	beq.n	405dd2 <_free_r+0x146>
  405d4a:	6859      	ldr	r1, [r3, #4]
  405d4c:	f021 0103 	bic.w	r1, r1, #3
  405d50:	4291      	cmp	r1, r2
  405d52:	d902      	bls.n	405d5a <_free_r+0xce>
  405d54:	689b      	ldr	r3, [r3, #8]
  405d56:	4298      	cmp	r0, r3
  405d58:	d1f7      	bne.n	405d4a <_free_r+0xbe>
  405d5a:	68da      	ldr	r2, [r3, #12]
  405d5c:	60ea      	str	r2, [r5, #12]
  405d5e:	60ab      	str	r3, [r5, #8]
  405d60:	4640      	mov	r0, r8
  405d62:	6095      	str	r5, [r2, #8]
  405d64:	60dd      	str	r5, [r3, #12]
  405d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405d6a:	f000 bde1 	b.w	406930 <__malloc_unlock>
  405d6e:	07ff      	lsls	r7, r7, #31
  405d70:	4402      	add	r2, r0
  405d72:	d407      	bmi.n	405d84 <_free_r+0xf8>
  405d74:	f854 3c08 	ldr.w	r3, [r4, #-8]
  405d78:	1aed      	subs	r5, r5, r3
  405d7a:	441a      	add	r2, r3
  405d7c:	68a8      	ldr	r0, [r5, #8]
  405d7e:	68eb      	ldr	r3, [r5, #12]
  405d80:	60c3      	str	r3, [r0, #12]
  405d82:	6098      	str	r0, [r3, #8]
  405d84:	4b2b      	ldr	r3, [pc, #172]	; (405e34 <_free_r+0x1a8>)
  405d86:	681b      	ldr	r3, [r3, #0]
  405d88:	f042 0001 	orr.w	r0, r2, #1
  405d8c:	429a      	cmp	r2, r3
  405d8e:	6068      	str	r0, [r5, #4]
  405d90:	608d      	str	r5, [r1, #8]
  405d92:	d3c7      	bcc.n	405d24 <_free_r+0x98>
  405d94:	4b28      	ldr	r3, [pc, #160]	; (405e38 <_free_r+0x1ac>)
  405d96:	4640      	mov	r0, r8
  405d98:	6819      	ldr	r1, [r3, #0]
  405d9a:	f7ff ff29 	bl	405bf0 <_malloc_trim_r>
  405d9e:	e7c1      	b.n	405d24 <_free_r+0x98>
  405da0:	1819      	adds	r1, r3, r0
  405da2:	6849      	ldr	r1, [r1, #4]
  405da4:	07c9      	lsls	r1, r1, #31
  405da6:	d409      	bmi.n	405dbc <_free_r+0x130>
  405da8:	68d9      	ldr	r1, [r3, #12]
  405daa:	689b      	ldr	r3, [r3, #8]
  405dac:	4402      	add	r2, r0
  405dae:	f042 0001 	orr.w	r0, r2, #1
  405db2:	60d9      	str	r1, [r3, #12]
  405db4:	608b      	str	r3, [r1, #8]
  405db6:	6068      	str	r0, [r5, #4]
  405db8:	50aa      	str	r2, [r5, r2]
  405dba:	e7b3      	b.n	405d24 <_free_r+0x98>
  405dbc:	f042 0301 	orr.w	r3, r2, #1
  405dc0:	606b      	str	r3, [r5, #4]
  405dc2:	50aa      	str	r2, [r5, r2]
  405dc4:	e7ae      	b.n	405d24 <_free_r+0x98>
  405dc6:	2b14      	cmp	r3, #20
  405dc8:	d814      	bhi.n	405df4 <_free_r+0x168>
  405dca:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  405dce:	0060      	lsls	r0, r4, #1
  405dd0:	e7b5      	b.n	405d3e <_free_r+0xb2>
  405dd2:	684a      	ldr	r2, [r1, #4]
  405dd4:	10a4      	asrs	r4, r4, #2
  405dd6:	2001      	movs	r0, #1
  405dd8:	40a0      	lsls	r0, r4
  405dda:	4302      	orrs	r2, r0
  405ddc:	604a      	str	r2, [r1, #4]
  405dde:	461a      	mov	r2, r3
  405de0:	e7bc      	b.n	405d5c <_free_r+0xd0>
  405de2:	f042 0301 	orr.w	r3, r2, #1
  405de6:	614d      	str	r5, [r1, #20]
  405de8:	610d      	str	r5, [r1, #16]
  405dea:	60ec      	str	r4, [r5, #12]
  405dec:	60ac      	str	r4, [r5, #8]
  405dee:	606b      	str	r3, [r5, #4]
  405df0:	50aa      	str	r2, [r5, r2]
  405df2:	e797      	b.n	405d24 <_free_r+0x98>
  405df4:	2b54      	cmp	r3, #84	; 0x54
  405df6:	d804      	bhi.n	405e02 <_free_r+0x176>
  405df8:	0b13      	lsrs	r3, r2, #12
  405dfa:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  405dfe:	0060      	lsls	r0, r4, #1
  405e00:	e79d      	b.n	405d3e <_free_r+0xb2>
  405e02:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405e06:	d804      	bhi.n	405e12 <_free_r+0x186>
  405e08:	0bd3      	lsrs	r3, r2, #15
  405e0a:	f103 0477 	add.w	r4, r3, #119	; 0x77
  405e0e:	0060      	lsls	r0, r4, #1
  405e10:	e795      	b.n	405d3e <_free_r+0xb2>
  405e12:	f240 5054 	movw	r0, #1364	; 0x554
  405e16:	4283      	cmp	r3, r0
  405e18:	d804      	bhi.n	405e24 <_free_r+0x198>
  405e1a:	0c93      	lsrs	r3, r2, #18
  405e1c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  405e20:	0060      	lsls	r0, r4, #1
  405e22:	e78c      	b.n	405d3e <_free_r+0xb2>
  405e24:	20fc      	movs	r0, #252	; 0xfc
  405e26:	247e      	movs	r4, #126	; 0x7e
  405e28:	e789      	b.n	405d3e <_free_r+0xb2>
  405e2a:	bf00      	nop
  405e2c:	20000488 	.word	0x20000488
  405e30:	20000490 	.word	0x20000490
  405e34:	20000890 	.word	0x20000890
  405e38:	2001cdbc 	.word	0x2001cdbc

00405e3c <__sfvwrite_r>:
  405e3c:	6893      	ldr	r3, [r2, #8]
  405e3e:	2b00      	cmp	r3, #0
  405e40:	d07a      	beq.n	405f38 <__sfvwrite_r+0xfc>
  405e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e46:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  405e4a:	f01e 0f08 	tst.w	lr, #8
  405e4e:	b083      	sub	sp, #12
  405e50:	460c      	mov	r4, r1
  405e52:	4681      	mov	r9, r0
  405e54:	4616      	mov	r6, r2
  405e56:	d026      	beq.n	405ea6 <__sfvwrite_r+0x6a>
  405e58:	690b      	ldr	r3, [r1, #16]
  405e5a:	b323      	cbz	r3, 405ea6 <__sfvwrite_r+0x6a>
  405e5c:	f00e 0802 	and.w	r8, lr, #2
  405e60:	fa1f f088 	uxth.w	r0, r8
  405e64:	6835      	ldr	r5, [r6, #0]
  405e66:	b370      	cbz	r0, 405ec6 <__sfvwrite_r+0x8a>
  405e68:	f04f 0a00 	mov.w	sl, #0
  405e6c:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 406150 <__sfvwrite_r+0x314>
  405e70:	46d0      	mov	r8, sl
  405e72:	45d8      	cmp	r8, fp
  405e74:	4643      	mov	r3, r8
  405e76:	4652      	mov	r2, sl
  405e78:	bf28      	it	cs
  405e7a:	465b      	movcs	r3, fp
  405e7c:	4648      	mov	r0, r9
  405e7e:	f1b8 0f00 	cmp.w	r8, #0
  405e82:	d053      	beq.n	405f2c <__sfvwrite_r+0xf0>
  405e84:	69e1      	ldr	r1, [r4, #28]
  405e86:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405e88:	47b8      	blx	r7
  405e8a:	2800      	cmp	r0, #0
  405e8c:	dd73      	ble.n	405f76 <__sfvwrite_r+0x13a>
  405e8e:	68b3      	ldr	r3, [r6, #8]
  405e90:	1a1b      	subs	r3, r3, r0
  405e92:	4482      	add	sl, r0
  405e94:	ebc0 0808 	rsb	r8, r0, r8
  405e98:	60b3      	str	r3, [r6, #8]
  405e9a:	2b00      	cmp	r3, #0
  405e9c:	d1e9      	bne.n	405e72 <__sfvwrite_r+0x36>
  405e9e:	2000      	movs	r0, #0
  405ea0:	b003      	add	sp, #12
  405ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ea6:	4648      	mov	r0, r9
  405ea8:	4621      	mov	r1, r4
  405eaa:	f7ff fc67 	bl	40577c <__swsetup_r>
  405eae:	2800      	cmp	r0, #0
  405eb0:	f040 8145 	bne.w	40613e <__sfvwrite_r+0x302>
  405eb4:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  405eb8:	6835      	ldr	r5, [r6, #0]
  405eba:	f00e 0802 	and.w	r8, lr, #2
  405ebe:	fa1f f088 	uxth.w	r0, r8
  405ec2:	2800      	cmp	r0, #0
  405ec4:	d1d0      	bne.n	405e68 <__sfvwrite_r+0x2c>
  405ec6:	f01e 0b01 	ands.w	fp, lr, #1
  405eca:	d15d      	bne.n	405f88 <__sfvwrite_r+0x14c>
  405ecc:	46d8      	mov	r8, fp
  405ece:	f1b8 0f00 	cmp.w	r8, #0
  405ed2:	d025      	beq.n	405f20 <__sfvwrite_r+0xe4>
  405ed4:	f41e 7f00 	tst.w	lr, #512	; 0x200
  405ed8:	68a7      	ldr	r7, [r4, #8]
  405eda:	d02f      	beq.n	405f3c <__sfvwrite_r+0x100>
  405edc:	45b8      	cmp	r8, r7
  405ede:	46ba      	mov	sl, r7
  405ee0:	f0c0 80a9 	bcc.w	406036 <__sfvwrite_r+0x1fa>
  405ee4:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  405ee8:	f040 80b6 	bne.w	406058 <__sfvwrite_r+0x21c>
  405eec:	6820      	ldr	r0, [r4, #0]
  405eee:	4652      	mov	r2, sl
  405ef0:	4659      	mov	r1, fp
  405ef2:	f000 fcb7 	bl	406864 <memmove>
  405ef6:	68a0      	ldr	r0, [r4, #8]
  405ef8:	6822      	ldr	r2, [r4, #0]
  405efa:	1bc0      	subs	r0, r0, r7
  405efc:	eb02 030a 	add.w	r3, r2, sl
  405f00:	60a0      	str	r0, [r4, #8]
  405f02:	6023      	str	r3, [r4, #0]
  405f04:	4640      	mov	r0, r8
  405f06:	68b3      	ldr	r3, [r6, #8]
  405f08:	1a1b      	subs	r3, r3, r0
  405f0a:	4483      	add	fp, r0
  405f0c:	ebc0 0808 	rsb	r8, r0, r8
  405f10:	60b3      	str	r3, [r6, #8]
  405f12:	2b00      	cmp	r3, #0
  405f14:	d0c3      	beq.n	405e9e <__sfvwrite_r+0x62>
  405f16:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  405f1a:	f1b8 0f00 	cmp.w	r8, #0
  405f1e:	d1d9      	bne.n	405ed4 <__sfvwrite_r+0x98>
  405f20:	f8d5 b000 	ldr.w	fp, [r5]
  405f24:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405f28:	3508      	adds	r5, #8
  405f2a:	e7d0      	b.n	405ece <__sfvwrite_r+0x92>
  405f2c:	f8d5 a000 	ldr.w	sl, [r5]
  405f30:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405f34:	3508      	adds	r5, #8
  405f36:	e79c      	b.n	405e72 <__sfvwrite_r+0x36>
  405f38:	2000      	movs	r0, #0
  405f3a:	4770      	bx	lr
  405f3c:	6820      	ldr	r0, [r4, #0]
  405f3e:	6923      	ldr	r3, [r4, #16]
  405f40:	4298      	cmp	r0, r3
  405f42:	d803      	bhi.n	405f4c <__sfvwrite_r+0x110>
  405f44:	6962      	ldr	r2, [r4, #20]
  405f46:	4590      	cmp	r8, r2
  405f48:	f080 80b9 	bcs.w	4060be <__sfvwrite_r+0x282>
  405f4c:	4547      	cmp	r7, r8
  405f4e:	bf28      	it	cs
  405f50:	4647      	movcs	r7, r8
  405f52:	463a      	mov	r2, r7
  405f54:	4659      	mov	r1, fp
  405f56:	f000 fc85 	bl	406864 <memmove>
  405f5a:	68a3      	ldr	r3, [r4, #8]
  405f5c:	6822      	ldr	r2, [r4, #0]
  405f5e:	1bdb      	subs	r3, r3, r7
  405f60:	443a      	add	r2, r7
  405f62:	60a3      	str	r3, [r4, #8]
  405f64:	6022      	str	r2, [r4, #0]
  405f66:	2b00      	cmp	r3, #0
  405f68:	d14a      	bne.n	406000 <__sfvwrite_r+0x1c4>
  405f6a:	4648      	mov	r0, r9
  405f6c:	4621      	mov	r1, r4
  405f6e:	f7ff fd21 	bl	4059b4 <_fflush_r>
  405f72:	2800      	cmp	r0, #0
  405f74:	d044      	beq.n	406000 <__sfvwrite_r+0x1c4>
  405f76:	89a3      	ldrh	r3, [r4, #12]
  405f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405f7c:	f04f 30ff 	mov.w	r0, #4294967295
  405f80:	81a3      	strh	r3, [r4, #12]
  405f82:	b003      	add	sp, #12
  405f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f88:	4680      	mov	r8, r0
  405f8a:	9000      	str	r0, [sp, #0]
  405f8c:	4683      	mov	fp, r0
  405f8e:	4682      	mov	sl, r0
  405f90:	f1ba 0f00 	cmp.w	sl, #0
  405f94:	d02c      	beq.n	405ff0 <__sfvwrite_r+0x1b4>
  405f96:	9b00      	ldr	r3, [sp, #0]
  405f98:	2b00      	cmp	r3, #0
  405f9a:	d050      	beq.n	40603e <__sfvwrite_r+0x202>
  405f9c:	6820      	ldr	r0, [r4, #0]
  405f9e:	6921      	ldr	r1, [r4, #16]
  405fa0:	f8d4 e008 	ldr.w	lr, [r4, #8]
  405fa4:	6962      	ldr	r2, [r4, #20]
  405fa6:	45d0      	cmp	r8, sl
  405fa8:	4643      	mov	r3, r8
  405faa:	bf28      	it	cs
  405fac:	4653      	movcs	r3, sl
  405fae:	4288      	cmp	r0, r1
  405fb0:	461f      	mov	r7, r3
  405fb2:	d904      	bls.n	405fbe <__sfvwrite_r+0x182>
  405fb4:	eb0e 0c02 	add.w	ip, lr, r2
  405fb8:	4563      	cmp	r3, ip
  405fba:	f300 8092 	bgt.w	4060e2 <__sfvwrite_r+0x2a6>
  405fbe:	4293      	cmp	r3, r2
  405fc0:	db20      	blt.n	406004 <__sfvwrite_r+0x1c8>
  405fc2:	4613      	mov	r3, r2
  405fc4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405fc6:	69e1      	ldr	r1, [r4, #28]
  405fc8:	4648      	mov	r0, r9
  405fca:	465a      	mov	r2, fp
  405fcc:	47b8      	blx	r7
  405fce:	1e07      	subs	r7, r0, #0
  405fd0:	ddd1      	ble.n	405f76 <__sfvwrite_r+0x13a>
  405fd2:	ebb8 0807 	subs.w	r8, r8, r7
  405fd6:	d025      	beq.n	406024 <__sfvwrite_r+0x1e8>
  405fd8:	68b3      	ldr	r3, [r6, #8]
  405fda:	1bdb      	subs	r3, r3, r7
  405fdc:	44bb      	add	fp, r7
  405fde:	ebc7 0a0a 	rsb	sl, r7, sl
  405fe2:	60b3      	str	r3, [r6, #8]
  405fe4:	2b00      	cmp	r3, #0
  405fe6:	f43f af5a 	beq.w	405e9e <__sfvwrite_r+0x62>
  405fea:	f1ba 0f00 	cmp.w	sl, #0
  405fee:	d1d2      	bne.n	405f96 <__sfvwrite_r+0x15a>
  405ff0:	2300      	movs	r3, #0
  405ff2:	f8d5 b000 	ldr.w	fp, [r5]
  405ff6:	f8d5 a004 	ldr.w	sl, [r5, #4]
  405ffa:	9300      	str	r3, [sp, #0]
  405ffc:	3508      	adds	r5, #8
  405ffe:	e7c7      	b.n	405f90 <__sfvwrite_r+0x154>
  406000:	4638      	mov	r0, r7
  406002:	e780      	b.n	405f06 <__sfvwrite_r+0xca>
  406004:	461a      	mov	r2, r3
  406006:	4659      	mov	r1, fp
  406008:	9301      	str	r3, [sp, #4]
  40600a:	f000 fc2b 	bl	406864 <memmove>
  40600e:	68a2      	ldr	r2, [r4, #8]
  406010:	6821      	ldr	r1, [r4, #0]
  406012:	9b01      	ldr	r3, [sp, #4]
  406014:	ebb8 0807 	subs.w	r8, r8, r7
  406018:	eba2 0203 	sub.w	r2, r2, r3
  40601c:	440b      	add	r3, r1
  40601e:	60a2      	str	r2, [r4, #8]
  406020:	6023      	str	r3, [r4, #0]
  406022:	d1d9      	bne.n	405fd8 <__sfvwrite_r+0x19c>
  406024:	4648      	mov	r0, r9
  406026:	4621      	mov	r1, r4
  406028:	f7ff fcc4 	bl	4059b4 <_fflush_r>
  40602c:	2800      	cmp	r0, #0
  40602e:	d1a2      	bne.n	405f76 <__sfvwrite_r+0x13a>
  406030:	f8cd 8000 	str.w	r8, [sp]
  406034:	e7d0      	b.n	405fd8 <__sfvwrite_r+0x19c>
  406036:	6820      	ldr	r0, [r4, #0]
  406038:	4647      	mov	r7, r8
  40603a:	46c2      	mov	sl, r8
  40603c:	e757      	b.n	405eee <__sfvwrite_r+0xb2>
  40603e:	4658      	mov	r0, fp
  406040:	210a      	movs	r1, #10
  406042:	4652      	mov	r2, sl
  406044:	f000 fbc4 	bl	4067d0 <memchr>
  406048:	2800      	cmp	r0, #0
  40604a:	d073      	beq.n	406134 <__sfvwrite_r+0x2f8>
  40604c:	3001      	adds	r0, #1
  40604e:	2301      	movs	r3, #1
  406050:	ebcb 0800 	rsb	r8, fp, r0
  406054:	9300      	str	r3, [sp, #0]
  406056:	e7a1      	b.n	405f9c <__sfvwrite_r+0x160>
  406058:	6967      	ldr	r7, [r4, #20]
  40605a:	6921      	ldr	r1, [r4, #16]
  40605c:	6823      	ldr	r3, [r4, #0]
  40605e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  406062:	1a5b      	subs	r3, r3, r1
  406064:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  406068:	1c58      	adds	r0, r3, #1
  40606a:	107f      	asrs	r7, r7, #1
  40606c:	4440      	add	r0, r8
  40606e:	4287      	cmp	r7, r0
  406070:	463a      	mov	r2, r7
  406072:	bf3c      	itt	cc
  406074:	4607      	movcc	r7, r0
  406076:	463a      	movcc	r2, r7
  406078:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40607c:	9300      	str	r3, [sp, #0]
  40607e:	d046      	beq.n	40610e <__sfvwrite_r+0x2d2>
  406080:	4611      	mov	r1, r2
  406082:	4648      	mov	r0, r9
  406084:	f000 f912 	bl	4062ac <_malloc_r>
  406088:	9b00      	ldr	r3, [sp, #0]
  40608a:	4682      	mov	sl, r0
  40608c:	2800      	cmp	r0, #0
  40608e:	d059      	beq.n	406144 <__sfvwrite_r+0x308>
  406090:	461a      	mov	r2, r3
  406092:	6921      	ldr	r1, [r4, #16]
  406094:	9300      	str	r3, [sp, #0]
  406096:	f7fe faed 	bl	404674 <memcpy>
  40609a:	89a2      	ldrh	r2, [r4, #12]
  40609c:	9b00      	ldr	r3, [sp, #0]
  40609e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4060a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4060a6:	81a2      	strh	r2, [r4, #12]
  4060a8:	eb0a 0003 	add.w	r0, sl, r3
  4060ac:	1afb      	subs	r3, r7, r3
  4060ae:	f8c4 a010 	str.w	sl, [r4, #16]
  4060b2:	6167      	str	r7, [r4, #20]
  4060b4:	6020      	str	r0, [r4, #0]
  4060b6:	60a3      	str	r3, [r4, #8]
  4060b8:	4647      	mov	r7, r8
  4060ba:	46c2      	mov	sl, r8
  4060bc:	e717      	b.n	405eee <__sfvwrite_r+0xb2>
  4060be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4060c2:	4543      	cmp	r3, r8
  4060c4:	bf28      	it	cs
  4060c6:	4643      	movcs	r3, r8
  4060c8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4060ca:	fb93 f3f2 	sdiv	r3, r3, r2
  4060ce:	4648      	mov	r0, r9
  4060d0:	fb03 f302 	mul.w	r3, r3, r2
  4060d4:	69e1      	ldr	r1, [r4, #28]
  4060d6:	465a      	mov	r2, fp
  4060d8:	47b8      	blx	r7
  4060da:	2800      	cmp	r0, #0
  4060dc:	f73f af13 	bgt.w	405f06 <__sfvwrite_r+0xca>
  4060e0:	e749      	b.n	405f76 <__sfvwrite_r+0x13a>
  4060e2:	4662      	mov	r2, ip
  4060e4:	4659      	mov	r1, fp
  4060e6:	f8cd c004 	str.w	ip, [sp, #4]
  4060ea:	f000 fbbb 	bl	406864 <memmove>
  4060ee:	6823      	ldr	r3, [r4, #0]
  4060f0:	f8dd c004 	ldr.w	ip, [sp, #4]
  4060f4:	4463      	add	r3, ip
  4060f6:	6023      	str	r3, [r4, #0]
  4060f8:	4648      	mov	r0, r9
  4060fa:	4621      	mov	r1, r4
  4060fc:	f7ff fc5a 	bl	4059b4 <_fflush_r>
  406100:	f8dd c004 	ldr.w	ip, [sp, #4]
  406104:	2800      	cmp	r0, #0
  406106:	f47f af36 	bne.w	405f76 <__sfvwrite_r+0x13a>
  40610a:	4667      	mov	r7, ip
  40610c:	e761      	b.n	405fd2 <__sfvwrite_r+0x196>
  40610e:	4648      	mov	r0, r9
  406110:	f000 fc10 	bl	406934 <_realloc_r>
  406114:	9b00      	ldr	r3, [sp, #0]
  406116:	4682      	mov	sl, r0
  406118:	2800      	cmp	r0, #0
  40611a:	d1c5      	bne.n	4060a8 <__sfvwrite_r+0x26c>
  40611c:	4648      	mov	r0, r9
  40611e:	6921      	ldr	r1, [r4, #16]
  406120:	f7ff fdb4 	bl	405c8c <_free_r>
  406124:	89a3      	ldrh	r3, [r4, #12]
  406126:	220c      	movs	r2, #12
  406128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40612c:	b29b      	uxth	r3, r3
  40612e:	f8c9 2000 	str.w	r2, [r9]
  406132:	e721      	b.n	405f78 <__sfvwrite_r+0x13c>
  406134:	2301      	movs	r3, #1
  406136:	f10a 0801 	add.w	r8, sl, #1
  40613a:	9300      	str	r3, [sp, #0]
  40613c:	e72e      	b.n	405f9c <__sfvwrite_r+0x160>
  40613e:	f04f 30ff 	mov.w	r0, #4294967295
  406142:	e6ad      	b.n	405ea0 <__sfvwrite_r+0x64>
  406144:	230c      	movs	r3, #12
  406146:	f8c9 3000 	str.w	r3, [r9]
  40614a:	89a3      	ldrh	r3, [r4, #12]
  40614c:	e714      	b.n	405f78 <__sfvwrite_r+0x13c>
  40614e:	bf00      	nop
  406150:	7ffffc00 	.word	0x7ffffc00

00406154 <_fwalk_reent>:
  406154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406158:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40615c:	d01f      	beq.n	40619e <_fwalk_reent+0x4a>
  40615e:	4688      	mov	r8, r1
  406160:	4606      	mov	r6, r0
  406162:	f04f 0900 	mov.w	r9, #0
  406166:	687d      	ldr	r5, [r7, #4]
  406168:	68bc      	ldr	r4, [r7, #8]
  40616a:	3d01      	subs	r5, #1
  40616c:	d411      	bmi.n	406192 <_fwalk_reent+0x3e>
  40616e:	89a3      	ldrh	r3, [r4, #12]
  406170:	2b01      	cmp	r3, #1
  406172:	f105 35ff 	add.w	r5, r5, #4294967295
  406176:	d908      	bls.n	40618a <_fwalk_reent+0x36>
  406178:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40617c:	3301      	adds	r3, #1
  40617e:	4621      	mov	r1, r4
  406180:	4630      	mov	r0, r6
  406182:	d002      	beq.n	40618a <_fwalk_reent+0x36>
  406184:	47c0      	blx	r8
  406186:	ea49 0900 	orr.w	r9, r9, r0
  40618a:	1c6b      	adds	r3, r5, #1
  40618c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406190:	d1ed      	bne.n	40616e <_fwalk_reent+0x1a>
  406192:	683f      	ldr	r7, [r7, #0]
  406194:	2f00      	cmp	r7, #0
  406196:	d1e6      	bne.n	406166 <_fwalk_reent+0x12>
  406198:	4648      	mov	r0, r9
  40619a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40619e:	46b9      	mov	r9, r7
  4061a0:	4648      	mov	r0, r9
  4061a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4061a6:	bf00      	nop

004061a8 <__locale_charset>:
  4061a8:	4800      	ldr	r0, [pc, #0]	; (4061ac <__locale_charset+0x4>)
  4061aa:	4770      	bx	lr
  4061ac:	20000464 	.word	0x20000464

004061b0 <__locale_mb_cur_max>:
  4061b0:	4b01      	ldr	r3, [pc, #4]	; (4061b8 <__locale_mb_cur_max+0x8>)
  4061b2:	6818      	ldr	r0, [r3, #0]
  4061b4:	4770      	bx	lr
  4061b6:	bf00      	nop
  4061b8:	20000484 	.word	0x20000484

004061bc <__smakebuf_r>:
  4061bc:	898b      	ldrh	r3, [r1, #12]
  4061be:	b29a      	uxth	r2, r3
  4061c0:	f012 0f02 	tst.w	r2, #2
  4061c4:	d13c      	bne.n	406240 <__smakebuf_r+0x84>
  4061c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4061c8:	460c      	mov	r4, r1
  4061ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4061ce:	2900      	cmp	r1, #0
  4061d0:	b091      	sub	sp, #68	; 0x44
  4061d2:	4605      	mov	r5, r0
  4061d4:	db19      	blt.n	40620a <__smakebuf_r+0x4e>
  4061d6:	aa01      	add	r2, sp, #4
  4061d8:	f000 ff3c 	bl	407054 <_fstat_r>
  4061dc:	2800      	cmp	r0, #0
  4061de:	db12      	blt.n	406206 <__smakebuf_r+0x4a>
  4061e0:	9b02      	ldr	r3, [sp, #8]
  4061e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4061e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  4061ea:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  4061ee:	fab7 f787 	clz	r7, r7
  4061f2:	ea4f 1757 	mov.w	r7, r7, lsr #5
  4061f6:	d02a      	beq.n	40624e <__smakebuf_r+0x92>
  4061f8:	89a3      	ldrh	r3, [r4, #12]
  4061fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4061fe:	81a3      	strh	r3, [r4, #12]
  406200:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406204:	e00b      	b.n	40621e <__smakebuf_r+0x62>
  406206:	89a3      	ldrh	r3, [r4, #12]
  406208:	b29a      	uxth	r2, r3
  40620a:	f012 0f80 	tst.w	r2, #128	; 0x80
  40620e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406212:	81a3      	strh	r3, [r4, #12]
  406214:	bf0c      	ite	eq
  406216:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40621a:	2640      	movne	r6, #64	; 0x40
  40621c:	2700      	movs	r7, #0
  40621e:	4628      	mov	r0, r5
  406220:	4631      	mov	r1, r6
  406222:	f000 f843 	bl	4062ac <_malloc_r>
  406226:	89a3      	ldrh	r3, [r4, #12]
  406228:	b340      	cbz	r0, 40627c <__smakebuf_r+0xc0>
  40622a:	4a1a      	ldr	r2, [pc, #104]	; (406294 <__smakebuf_r+0xd8>)
  40622c:	63ea      	str	r2, [r5, #60]	; 0x3c
  40622e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406232:	81a3      	strh	r3, [r4, #12]
  406234:	6020      	str	r0, [r4, #0]
  406236:	6120      	str	r0, [r4, #16]
  406238:	6166      	str	r6, [r4, #20]
  40623a:	b99f      	cbnz	r7, 406264 <__smakebuf_r+0xa8>
  40623c:	b011      	add	sp, #68	; 0x44
  40623e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406240:	f101 0343 	add.w	r3, r1, #67	; 0x43
  406244:	2201      	movs	r2, #1
  406246:	600b      	str	r3, [r1, #0]
  406248:	610b      	str	r3, [r1, #16]
  40624a:	614a      	str	r2, [r1, #20]
  40624c:	4770      	bx	lr
  40624e:	4b12      	ldr	r3, [pc, #72]	; (406298 <__smakebuf_r+0xdc>)
  406250:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  406252:	429a      	cmp	r2, r3
  406254:	d1d0      	bne.n	4061f8 <__smakebuf_r+0x3c>
  406256:	89a3      	ldrh	r3, [r4, #12]
  406258:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40625c:	4333      	orrs	r3, r6
  40625e:	81a3      	strh	r3, [r4, #12]
  406260:	64e6      	str	r6, [r4, #76]	; 0x4c
  406262:	e7dc      	b.n	40621e <__smakebuf_r+0x62>
  406264:	4628      	mov	r0, r5
  406266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40626a:	f000 ff07 	bl	40707c <_isatty_r>
  40626e:	2800      	cmp	r0, #0
  406270:	d0e4      	beq.n	40623c <__smakebuf_r+0x80>
  406272:	89a3      	ldrh	r3, [r4, #12]
  406274:	f043 0301 	orr.w	r3, r3, #1
  406278:	81a3      	strh	r3, [r4, #12]
  40627a:	e7df      	b.n	40623c <__smakebuf_r+0x80>
  40627c:	059a      	lsls	r2, r3, #22
  40627e:	d4dd      	bmi.n	40623c <__smakebuf_r+0x80>
  406280:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406284:	f043 0302 	orr.w	r3, r3, #2
  406288:	2101      	movs	r1, #1
  40628a:	81a3      	strh	r3, [r4, #12]
  40628c:	6022      	str	r2, [r4, #0]
  40628e:	6122      	str	r2, [r4, #16]
  406290:	6161      	str	r1, [r4, #20]
  406292:	e7d3      	b.n	40623c <__smakebuf_r+0x80>
  406294:	004059e1 	.word	0x004059e1
  406298:	00406da1 	.word	0x00406da1

0040629c <malloc>:
  40629c:	4b02      	ldr	r3, [pc, #8]	; (4062a8 <malloc+0xc>)
  40629e:	4601      	mov	r1, r0
  4062a0:	6818      	ldr	r0, [r3, #0]
  4062a2:	f000 b803 	b.w	4062ac <_malloc_r>
  4062a6:	bf00      	nop
  4062a8:	20000460 	.word	0x20000460

004062ac <_malloc_r>:
  4062ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062b0:	f101 050b 	add.w	r5, r1, #11
  4062b4:	2d16      	cmp	r5, #22
  4062b6:	b083      	sub	sp, #12
  4062b8:	4606      	mov	r6, r0
  4062ba:	d927      	bls.n	40630c <_malloc_r+0x60>
  4062bc:	f035 0507 	bics.w	r5, r5, #7
  4062c0:	f100 80b6 	bmi.w	406430 <_malloc_r+0x184>
  4062c4:	42a9      	cmp	r1, r5
  4062c6:	f200 80b3 	bhi.w	406430 <_malloc_r+0x184>
  4062ca:	f000 fb2f 	bl	40692c <__malloc_lock>
  4062ce:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4062d2:	d222      	bcs.n	40631a <_malloc_r+0x6e>
  4062d4:	4fc2      	ldr	r7, [pc, #776]	; (4065e0 <_malloc_r+0x334>)
  4062d6:	08e8      	lsrs	r0, r5, #3
  4062d8:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  4062dc:	68dc      	ldr	r4, [r3, #12]
  4062de:	429c      	cmp	r4, r3
  4062e0:	f000 81c8 	beq.w	406674 <_malloc_r+0x3c8>
  4062e4:	6863      	ldr	r3, [r4, #4]
  4062e6:	68e1      	ldr	r1, [r4, #12]
  4062e8:	68a5      	ldr	r5, [r4, #8]
  4062ea:	f023 0303 	bic.w	r3, r3, #3
  4062ee:	4423      	add	r3, r4
  4062f0:	4630      	mov	r0, r6
  4062f2:	685a      	ldr	r2, [r3, #4]
  4062f4:	60e9      	str	r1, [r5, #12]
  4062f6:	f042 0201 	orr.w	r2, r2, #1
  4062fa:	608d      	str	r5, [r1, #8]
  4062fc:	605a      	str	r2, [r3, #4]
  4062fe:	f000 fb17 	bl	406930 <__malloc_unlock>
  406302:	3408      	adds	r4, #8
  406304:	4620      	mov	r0, r4
  406306:	b003      	add	sp, #12
  406308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40630c:	2910      	cmp	r1, #16
  40630e:	f200 808f 	bhi.w	406430 <_malloc_r+0x184>
  406312:	f000 fb0b 	bl	40692c <__malloc_lock>
  406316:	2510      	movs	r5, #16
  406318:	e7dc      	b.n	4062d4 <_malloc_r+0x28>
  40631a:	0a68      	lsrs	r0, r5, #9
  40631c:	f000 808f 	beq.w	40643e <_malloc_r+0x192>
  406320:	2804      	cmp	r0, #4
  406322:	f200 8154 	bhi.w	4065ce <_malloc_r+0x322>
  406326:	09a8      	lsrs	r0, r5, #6
  406328:	3038      	adds	r0, #56	; 0x38
  40632a:	0041      	lsls	r1, r0, #1
  40632c:	4fac      	ldr	r7, [pc, #688]	; (4065e0 <_malloc_r+0x334>)
  40632e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  406332:	68cc      	ldr	r4, [r1, #12]
  406334:	42a1      	cmp	r1, r4
  406336:	d106      	bne.n	406346 <_malloc_r+0x9a>
  406338:	e00c      	b.n	406354 <_malloc_r+0xa8>
  40633a:	2a00      	cmp	r2, #0
  40633c:	f280 8082 	bge.w	406444 <_malloc_r+0x198>
  406340:	68e4      	ldr	r4, [r4, #12]
  406342:	42a1      	cmp	r1, r4
  406344:	d006      	beq.n	406354 <_malloc_r+0xa8>
  406346:	6863      	ldr	r3, [r4, #4]
  406348:	f023 0303 	bic.w	r3, r3, #3
  40634c:	1b5a      	subs	r2, r3, r5
  40634e:	2a0f      	cmp	r2, #15
  406350:	ddf3      	ble.n	40633a <_malloc_r+0x8e>
  406352:	3801      	subs	r0, #1
  406354:	3001      	adds	r0, #1
  406356:	49a2      	ldr	r1, [pc, #648]	; (4065e0 <_malloc_r+0x334>)
  406358:	693c      	ldr	r4, [r7, #16]
  40635a:	f101 0e08 	add.w	lr, r1, #8
  40635e:	4574      	cmp	r4, lr
  406360:	f000 817d 	beq.w	40665e <_malloc_r+0x3b2>
  406364:	6863      	ldr	r3, [r4, #4]
  406366:	f023 0303 	bic.w	r3, r3, #3
  40636a:	1b5a      	subs	r2, r3, r5
  40636c:	2a0f      	cmp	r2, #15
  40636e:	f300 8163 	bgt.w	406638 <_malloc_r+0x38c>
  406372:	2a00      	cmp	r2, #0
  406374:	f8c1 e014 	str.w	lr, [r1, #20]
  406378:	f8c1 e010 	str.w	lr, [r1, #16]
  40637c:	da73      	bge.n	406466 <_malloc_r+0x1ba>
  40637e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406382:	f080 8139 	bcs.w	4065f8 <_malloc_r+0x34c>
  406386:	08db      	lsrs	r3, r3, #3
  406388:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  40638c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  406390:	684a      	ldr	r2, [r1, #4]
  406392:	f8d8 9008 	ldr.w	r9, [r8, #8]
  406396:	f8c4 9008 	str.w	r9, [r4, #8]
  40639a:	2301      	movs	r3, #1
  40639c:	fa03 f30c 	lsl.w	r3, r3, ip
  4063a0:	4313      	orrs	r3, r2
  4063a2:	f8c4 800c 	str.w	r8, [r4, #12]
  4063a6:	604b      	str	r3, [r1, #4]
  4063a8:	f8c8 4008 	str.w	r4, [r8, #8]
  4063ac:	f8c9 400c 	str.w	r4, [r9, #12]
  4063b0:	1082      	asrs	r2, r0, #2
  4063b2:	2401      	movs	r4, #1
  4063b4:	4094      	lsls	r4, r2
  4063b6:	429c      	cmp	r4, r3
  4063b8:	d862      	bhi.n	406480 <_malloc_r+0x1d4>
  4063ba:	4223      	tst	r3, r4
  4063bc:	d106      	bne.n	4063cc <_malloc_r+0x120>
  4063be:	f020 0003 	bic.w	r0, r0, #3
  4063c2:	0064      	lsls	r4, r4, #1
  4063c4:	4223      	tst	r3, r4
  4063c6:	f100 0004 	add.w	r0, r0, #4
  4063ca:	d0fa      	beq.n	4063c2 <_malloc_r+0x116>
  4063cc:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  4063d0:	46c4      	mov	ip, r8
  4063d2:	4681      	mov	r9, r0
  4063d4:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4063d8:	459c      	cmp	ip, r3
  4063da:	d107      	bne.n	4063ec <_malloc_r+0x140>
  4063dc:	e141      	b.n	406662 <_malloc_r+0x3b6>
  4063de:	2900      	cmp	r1, #0
  4063e0:	f280 8151 	bge.w	406686 <_malloc_r+0x3da>
  4063e4:	68db      	ldr	r3, [r3, #12]
  4063e6:	459c      	cmp	ip, r3
  4063e8:	f000 813b 	beq.w	406662 <_malloc_r+0x3b6>
  4063ec:	685a      	ldr	r2, [r3, #4]
  4063ee:	f022 0203 	bic.w	r2, r2, #3
  4063f2:	1b51      	subs	r1, r2, r5
  4063f4:	290f      	cmp	r1, #15
  4063f6:	ddf2      	ble.n	4063de <_malloc_r+0x132>
  4063f8:	461c      	mov	r4, r3
  4063fa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4063fe:	f854 8f08 	ldr.w	r8, [r4, #8]!
  406402:	195a      	adds	r2, r3, r5
  406404:	f045 0901 	orr.w	r9, r5, #1
  406408:	f041 0501 	orr.w	r5, r1, #1
  40640c:	f8c3 9004 	str.w	r9, [r3, #4]
  406410:	4630      	mov	r0, r6
  406412:	f8c8 c00c 	str.w	ip, [r8, #12]
  406416:	f8cc 8008 	str.w	r8, [ip, #8]
  40641a:	617a      	str	r2, [r7, #20]
  40641c:	613a      	str	r2, [r7, #16]
  40641e:	f8c2 e00c 	str.w	lr, [r2, #12]
  406422:	f8c2 e008 	str.w	lr, [r2, #8]
  406426:	6055      	str	r5, [r2, #4]
  406428:	5051      	str	r1, [r2, r1]
  40642a:	f000 fa81 	bl	406930 <__malloc_unlock>
  40642e:	e769      	b.n	406304 <_malloc_r+0x58>
  406430:	2400      	movs	r4, #0
  406432:	230c      	movs	r3, #12
  406434:	4620      	mov	r0, r4
  406436:	6033      	str	r3, [r6, #0]
  406438:	b003      	add	sp, #12
  40643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40643e:	217e      	movs	r1, #126	; 0x7e
  406440:	203f      	movs	r0, #63	; 0x3f
  406442:	e773      	b.n	40632c <_malloc_r+0x80>
  406444:	4423      	add	r3, r4
  406446:	68e1      	ldr	r1, [r4, #12]
  406448:	685a      	ldr	r2, [r3, #4]
  40644a:	68a5      	ldr	r5, [r4, #8]
  40644c:	f042 0201 	orr.w	r2, r2, #1
  406450:	60e9      	str	r1, [r5, #12]
  406452:	4630      	mov	r0, r6
  406454:	608d      	str	r5, [r1, #8]
  406456:	605a      	str	r2, [r3, #4]
  406458:	f000 fa6a 	bl	406930 <__malloc_unlock>
  40645c:	3408      	adds	r4, #8
  40645e:	4620      	mov	r0, r4
  406460:	b003      	add	sp, #12
  406462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406466:	4423      	add	r3, r4
  406468:	4630      	mov	r0, r6
  40646a:	685a      	ldr	r2, [r3, #4]
  40646c:	f042 0201 	orr.w	r2, r2, #1
  406470:	605a      	str	r2, [r3, #4]
  406472:	f000 fa5d 	bl	406930 <__malloc_unlock>
  406476:	3408      	adds	r4, #8
  406478:	4620      	mov	r0, r4
  40647a:	b003      	add	sp, #12
  40647c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406480:	68bc      	ldr	r4, [r7, #8]
  406482:	6863      	ldr	r3, [r4, #4]
  406484:	f023 0803 	bic.w	r8, r3, #3
  406488:	4545      	cmp	r5, r8
  40648a:	d804      	bhi.n	406496 <_malloc_r+0x1ea>
  40648c:	ebc5 0308 	rsb	r3, r5, r8
  406490:	2b0f      	cmp	r3, #15
  406492:	f300 808c 	bgt.w	4065ae <_malloc_r+0x302>
  406496:	4b53      	ldr	r3, [pc, #332]	; (4065e4 <_malloc_r+0x338>)
  406498:	f8df a158 	ldr.w	sl, [pc, #344]	; 4065f4 <_malloc_r+0x348>
  40649c:	681a      	ldr	r2, [r3, #0]
  40649e:	f8da 3000 	ldr.w	r3, [sl]
  4064a2:	3301      	adds	r3, #1
  4064a4:	442a      	add	r2, r5
  4064a6:	eb04 0b08 	add.w	fp, r4, r8
  4064aa:	f000 8150 	beq.w	40674e <_malloc_r+0x4a2>
  4064ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4064b2:	320f      	adds	r2, #15
  4064b4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4064b8:	f022 020f 	bic.w	r2, r2, #15
  4064bc:	4611      	mov	r1, r2
  4064be:	4630      	mov	r0, r6
  4064c0:	9201      	str	r2, [sp, #4]
  4064c2:	f000 fc2d 	bl	406d20 <_sbrk_r>
  4064c6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4064ca:	4681      	mov	r9, r0
  4064cc:	9a01      	ldr	r2, [sp, #4]
  4064ce:	f000 8147 	beq.w	406760 <_malloc_r+0x4b4>
  4064d2:	4583      	cmp	fp, r0
  4064d4:	f200 80ee 	bhi.w	4066b4 <_malloc_r+0x408>
  4064d8:	4b43      	ldr	r3, [pc, #268]	; (4065e8 <_malloc_r+0x33c>)
  4064da:	6819      	ldr	r1, [r3, #0]
  4064dc:	45cb      	cmp	fp, r9
  4064de:	4411      	add	r1, r2
  4064e0:	6019      	str	r1, [r3, #0]
  4064e2:	f000 8142 	beq.w	40676a <_malloc_r+0x4be>
  4064e6:	f8da 0000 	ldr.w	r0, [sl]
  4064ea:	f8df e108 	ldr.w	lr, [pc, #264]	; 4065f4 <_malloc_r+0x348>
  4064ee:	3001      	adds	r0, #1
  4064f0:	bf1b      	ittet	ne
  4064f2:	ebcb 0b09 	rsbne	fp, fp, r9
  4064f6:	4459      	addne	r1, fp
  4064f8:	f8ce 9000 	streq.w	r9, [lr]
  4064fc:	6019      	strne	r1, [r3, #0]
  4064fe:	f019 0107 	ands.w	r1, r9, #7
  406502:	f000 8107 	beq.w	406714 <_malloc_r+0x468>
  406506:	f1c1 0008 	rsb	r0, r1, #8
  40650a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40650e:	4481      	add	r9, r0
  406510:	3108      	adds	r1, #8
  406512:	444a      	add	r2, r9
  406514:	f3c2 020b 	ubfx	r2, r2, #0, #12
  406518:	ebc2 0a01 	rsb	sl, r2, r1
  40651c:	4651      	mov	r1, sl
  40651e:	4630      	mov	r0, r6
  406520:	9301      	str	r3, [sp, #4]
  406522:	f000 fbfd 	bl	406d20 <_sbrk_r>
  406526:	1c43      	adds	r3, r0, #1
  406528:	9b01      	ldr	r3, [sp, #4]
  40652a:	f000 812c 	beq.w	406786 <_malloc_r+0x4da>
  40652e:	ebc9 0200 	rsb	r2, r9, r0
  406532:	4452      	add	r2, sl
  406534:	f042 0201 	orr.w	r2, r2, #1
  406538:	6819      	ldr	r1, [r3, #0]
  40653a:	f8c7 9008 	str.w	r9, [r7, #8]
  40653e:	4451      	add	r1, sl
  406540:	42bc      	cmp	r4, r7
  406542:	f8c9 2004 	str.w	r2, [r9, #4]
  406546:	6019      	str	r1, [r3, #0]
  406548:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4065e8 <_malloc_r+0x33c>
  40654c:	d016      	beq.n	40657c <_malloc_r+0x2d0>
  40654e:	f1b8 0f0f 	cmp.w	r8, #15
  406552:	f240 80ee 	bls.w	406732 <_malloc_r+0x486>
  406556:	6862      	ldr	r2, [r4, #4]
  406558:	f1a8 030c 	sub.w	r3, r8, #12
  40655c:	f023 0307 	bic.w	r3, r3, #7
  406560:	18e0      	adds	r0, r4, r3
  406562:	f002 0201 	and.w	r2, r2, #1
  406566:	f04f 0e05 	mov.w	lr, #5
  40656a:	431a      	orrs	r2, r3
  40656c:	2b0f      	cmp	r3, #15
  40656e:	6062      	str	r2, [r4, #4]
  406570:	f8c0 e004 	str.w	lr, [r0, #4]
  406574:	f8c0 e008 	str.w	lr, [r0, #8]
  406578:	f200 8109 	bhi.w	40678e <_malloc_r+0x4e2>
  40657c:	4b1b      	ldr	r3, [pc, #108]	; (4065ec <_malloc_r+0x340>)
  40657e:	68bc      	ldr	r4, [r7, #8]
  406580:	681a      	ldr	r2, [r3, #0]
  406582:	4291      	cmp	r1, r2
  406584:	bf88      	it	hi
  406586:	6019      	strhi	r1, [r3, #0]
  406588:	4b19      	ldr	r3, [pc, #100]	; (4065f0 <_malloc_r+0x344>)
  40658a:	681a      	ldr	r2, [r3, #0]
  40658c:	4291      	cmp	r1, r2
  40658e:	6862      	ldr	r2, [r4, #4]
  406590:	bf88      	it	hi
  406592:	6019      	strhi	r1, [r3, #0]
  406594:	f022 0203 	bic.w	r2, r2, #3
  406598:	4295      	cmp	r5, r2
  40659a:	eba2 0305 	sub.w	r3, r2, r5
  40659e:	d801      	bhi.n	4065a4 <_malloc_r+0x2f8>
  4065a0:	2b0f      	cmp	r3, #15
  4065a2:	dc04      	bgt.n	4065ae <_malloc_r+0x302>
  4065a4:	4630      	mov	r0, r6
  4065a6:	f000 f9c3 	bl	406930 <__malloc_unlock>
  4065aa:	2400      	movs	r4, #0
  4065ac:	e6aa      	b.n	406304 <_malloc_r+0x58>
  4065ae:	1962      	adds	r2, r4, r5
  4065b0:	f043 0301 	orr.w	r3, r3, #1
  4065b4:	f045 0501 	orr.w	r5, r5, #1
  4065b8:	6065      	str	r5, [r4, #4]
  4065ba:	4630      	mov	r0, r6
  4065bc:	60ba      	str	r2, [r7, #8]
  4065be:	6053      	str	r3, [r2, #4]
  4065c0:	f000 f9b6 	bl	406930 <__malloc_unlock>
  4065c4:	3408      	adds	r4, #8
  4065c6:	4620      	mov	r0, r4
  4065c8:	b003      	add	sp, #12
  4065ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065ce:	2814      	cmp	r0, #20
  4065d0:	d968      	bls.n	4066a4 <_malloc_r+0x3f8>
  4065d2:	2854      	cmp	r0, #84	; 0x54
  4065d4:	f200 8097 	bhi.w	406706 <_malloc_r+0x45a>
  4065d8:	0b28      	lsrs	r0, r5, #12
  4065da:	306e      	adds	r0, #110	; 0x6e
  4065dc:	0041      	lsls	r1, r0, #1
  4065de:	e6a5      	b.n	40632c <_malloc_r+0x80>
  4065e0:	20000488 	.word	0x20000488
  4065e4:	2001cdbc 	.word	0x2001cdbc
  4065e8:	2001cdc0 	.word	0x2001cdc0
  4065ec:	2001cdb8 	.word	0x2001cdb8
  4065f0:	2001cdb4 	.word	0x2001cdb4
  4065f4:	20000894 	.word	0x20000894
  4065f8:	0a5a      	lsrs	r2, r3, #9
  4065fa:	2a04      	cmp	r2, #4
  4065fc:	d955      	bls.n	4066aa <_malloc_r+0x3fe>
  4065fe:	2a14      	cmp	r2, #20
  406600:	f200 80a7 	bhi.w	406752 <_malloc_r+0x4a6>
  406604:	325b      	adds	r2, #91	; 0x5b
  406606:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40660a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  40660e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4067cc <_malloc_r+0x520>
  406612:	f8dc 1008 	ldr.w	r1, [ip, #8]
  406616:	4561      	cmp	r1, ip
  406618:	d07f      	beq.n	40671a <_malloc_r+0x46e>
  40661a:	684a      	ldr	r2, [r1, #4]
  40661c:	f022 0203 	bic.w	r2, r2, #3
  406620:	4293      	cmp	r3, r2
  406622:	d202      	bcs.n	40662a <_malloc_r+0x37e>
  406624:	6889      	ldr	r1, [r1, #8]
  406626:	458c      	cmp	ip, r1
  406628:	d1f7      	bne.n	40661a <_malloc_r+0x36e>
  40662a:	68ca      	ldr	r2, [r1, #12]
  40662c:	687b      	ldr	r3, [r7, #4]
  40662e:	60e2      	str	r2, [r4, #12]
  406630:	60a1      	str	r1, [r4, #8]
  406632:	6094      	str	r4, [r2, #8]
  406634:	60cc      	str	r4, [r1, #12]
  406636:	e6bb      	b.n	4063b0 <_malloc_r+0x104>
  406638:	1963      	adds	r3, r4, r5
  40663a:	f042 0701 	orr.w	r7, r2, #1
  40663e:	f045 0501 	orr.w	r5, r5, #1
  406642:	6065      	str	r5, [r4, #4]
  406644:	4630      	mov	r0, r6
  406646:	614b      	str	r3, [r1, #20]
  406648:	610b      	str	r3, [r1, #16]
  40664a:	f8c3 e00c 	str.w	lr, [r3, #12]
  40664e:	f8c3 e008 	str.w	lr, [r3, #8]
  406652:	605f      	str	r7, [r3, #4]
  406654:	509a      	str	r2, [r3, r2]
  406656:	3408      	adds	r4, #8
  406658:	f000 f96a 	bl	406930 <__malloc_unlock>
  40665c:	e652      	b.n	406304 <_malloc_r+0x58>
  40665e:	684b      	ldr	r3, [r1, #4]
  406660:	e6a6      	b.n	4063b0 <_malloc_r+0x104>
  406662:	f109 0901 	add.w	r9, r9, #1
  406666:	f019 0f03 	tst.w	r9, #3
  40666a:	f10c 0c08 	add.w	ip, ip, #8
  40666e:	f47f aeb1 	bne.w	4063d4 <_malloc_r+0x128>
  406672:	e02c      	b.n	4066ce <_malloc_r+0x422>
  406674:	f104 0308 	add.w	r3, r4, #8
  406678:	6964      	ldr	r4, [r4, #20]
  40667a:	42a3      	cmp	r3, r4
  40667c:	bf08      	it	eq
  40667e:	3002      	addeq	r0, #2
  406680:	f43f ae69 	beq.w	406356 <_malloc_r+0xaa>
  406684:	e62e      	b.n	4062e4 <_malloc_r+0x38>
  406686:	441a      	add	r2, r3
  406688:	461c      	mov	r4, r3
  40668a:	6851      	ldr	r1, [r2, #4]
  40668c:	68db      	ldr	r3, [r3, #12]
  40668e:	f854 5f08 	ldr.w	r5, [r4, #8]!
  406692:	f041 0101 	orr.w	r1, r1, #1
  406696:	6051      	str	r1, [r2, #4]
  406698:	4630      	mov	r0, r6
  40669a:	60eb      	str	r3, [r5, #12]
  40669c:	609d      	str	r5, [r3, #8]
  40669e:	f000 f947 	bl	406930 <__malloc_unlock>
  4066a2:	e62f      	b.n	406304 <_malloc_r+0x58>
  4066a4:	305b      	adds	r0, #91	; 0x5b
  4066a6:	0041      	lsls	r1, r0, #1
  4066a8:	e640      	b.n	40632c <_malloc_r+0x80>
  4066aa:	099a      	lsrs	r2, r3, #6
  4066ac:	3238      	adds	r2, #56	; 0x38
  4066ae:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4066b2:	e7aa      	b.n	40660a <_malloc_r+0x35e>
  4066b4:	42bc      	cmp	r4, r7
  4066b6:	4b45      	ldr	r3, [pc, #276]	; (4067cc <_malloc_r+0x520>)
  4066b8:	f43f af0e 	beq.w	4064d8 <_malloc_r+0x22c>
  4066bc:	689c      	ldr	r4, [r3, #8]
  4066be:	6862      	ldr	r2, [r4, #4]
  4066c0:	f022 0203 	bic.w	r2, r2, #3
  4066c4:	e768      	b.n	406598 <_malloc_r+0x2ec>
  4066c6:	f8d8 8000 	ldr.w	r8, [r8]
  4066ca:	4598      	cmp	r8, r3
  4066cc:	d17c      	bne.n	4067c8 <_malloc_r+0x51c>
  4066ce:	f010 0f03 	tst.w	r0, #3
  4066d2:	f1a8 0308 	sub.w	r3, r8, #8
  4066d6:	f100 30ff 	add.w	r0, r0, #4294967295
  4066da:	d1f4      	bne.n	4066c6 <_malloc_r+0x41a>
  4066dc:	687b      	ldr	r3, [r7, #4]
  4066de:	ea23 0304 	bic.w	r3, r3, r4
  4066e2:	607b      	str	r3, [r7, #4]
  4066e4:	0064      	lsls	r4, r4, #1
  4066e6:	429c      	cmp	r4, r3
  4066e8:	f63f aeca 	bhi.w	406480 <_malloc_r+0x1d4>
  4066ec:	2c00      	cmp	r4, #0
  4066ee:	f43f aec7 	beq.w	406480 <_malloc_r+0x1d4>
  4066f2:	4223      	tst	r3, r4
  4066f4:	4648      	mov	r0, r9
  4066f6:	f47f ae69 	bne.w	4063cc <_malloc_r+0x120>
  4066fa:	0064      	lsls	r4, r4, #1
  4066fc:	4223      	tst	r3, r4
  4066fe:	f100 0004 	add.w	r0, r0, #4
  406702:	d0fa      	beq.n	4066fa <_malloc_r+0x44e>
  406704:	e662      	b.n	4063cc <_malloc_r+0x120>
  406706:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  40670a:	d818      	bhi.n	40673e <_malloc_r+0x492>
  40670c:	0be8      	lsrs	r0, r5, #15
  40670e:	3077      	adds	r0, #119	; 0x77
  406710:	0041      	lsls	r1, r0, #1
  406712:	e60b      	b.n	40632c <_malloc_r+0x80>
  406714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406718:	e6fb      	b.n	406512 <_malloc_r+0x266>
  40671a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40671e:	1092      	asrs	r2, r2, #2
  406720:	f04f 0c01 	mov.w	ip, #1
  406724:	fa0c f202 	lsl.w	r2, ip, r2
  406728:	4313      	orrs	r3, r2
  40672a:	f8c8 3004 	str.w	r3, [r8, #4]
  40672e:	460a      	mov	r2, r1
  406730:	e77d      	b.n	40662e <_malloc_r+0x382>
  406732:	2301      	movs	r3, #1
  406734:	f8c9 3004 	str.w	r3, [r9, #4]
  406738:	464c      	mov	r4, r9
  40673a:	2200      	movs	r2, #0
  40673c:	e72c      	b.n	406598 <_malloc_r+0x2ec>
  40673e:	f240 5354 	movw	r3, #1364	; 0x554
  406742:	4298      	cmp	r0, r3
  406744:	d81c      	bhi.n	406780 <_malloc_r+0x4d4>
  406746:	0ca8      	lsrs	r0, r5, #18
  406748:	307c      	adds	r0, #124	; 0x7c
  40674a:	0041      	lsls	r1, r0, #1
  40674c:	e5ee      	b.n	40632c <_malloc_r+0x80>
  40674e:	3210      	adds	r2, #16
  406750:	e6b4      	b.n	4064bc <_malloc_r+0x210>
  406752:	2a54      	cmp	r2, #84	; 0x54
  406754:	d823      	bhi.n	40679e <_malloc_r+0x4f2>
  406756:	0b1a      	lsrs	r2, r3, #12
  406758:	326e      	adds	r2, #110	; 0x6e
  40675a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40675e:	e754      	b.n	40660a <_malloc_r+0x35e>
  406760:	68bc      	ldr	r4, [r7, #8]
  406762:	6862      	ldr	r2, [r4, #4]
  406764:	f022 0203 	bic.w	r2, r2, #3
  406768:	e716      	b.n	406598 <_malloc_r+0x2ec>
  40676a:	f3cb 000b 	ubfx	r0, fp, #0, #12
  40676e:	2800      	cmp	r0, #0
  406770:	f47f aeb9 	bne.w	4064e6 <_malloc_r+0x23a>
  406774:	4442      	add	r2, r8
  406776:	68bb      	ldr	r3, [r7, #8]
  406778:	f042 0201 	orr.w	r2, r2, #1
  40677c:	605a      	str	r2, [r3, #4]
  40677e:	e6fd      	b.n	40657c <_malloc_r+0x2d0>
  406780:	21fc      	movs	r1, #252	; 0xfc
  406782:	207e      	movs	r0, #126	; 0x7e
  406784:	e5d2      	b.n	40632c <_malloc_r+0x80>
  406786:	2201      	movs	r2, #1
  406788:	f04f 0a00 	mov.w	sl, #0
  40678c:	e6d4      	b.n	406538 <_malloc_r+0x28c>
  40678e:	f104 0108 	add.w	r1, r4, #8
  406792:	4630      	mov	r0, r6
  406794:	f7ff fa7a 	bl	405c8c <_free_r>
  406798:	f8da 1000 	ldr.w	r1, [sl]
  40679c:	e6ee      	b.n	40657c <_malloc_r+0x2d0>
  40679e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4067a2:	d804      	bhi.n	4067ae <_malloc_r+0x502>
  4067a4:	0bda      	lsrs	r2, r3, #15
  4067a6:	3277      	adds	r2, #119	; 0x77
  4067a8:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4067ac:	e72d      	b.n	40660a <_malloc_r+0x35e>
  4067ae:	f240 5154 	movw	r1, #1364	; 0x554
  4067b2:	428a      	cmp	r2, r1
  4067b4:	d804      	bhi.n	4067c0 <_malloc_r+0x514>
  4067b6:	0c9a      	lsrs	r2, r3, #18
  4067b8:	327c      	adds	r2, #124	; 0x7c
  4067ba:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4067be:	e724      	b.n	40660a <_malloc_r+0x35e>
  4067c0:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  4067c4:	227e      	movs	r2, #126	; 0x7e
  4067c6:	e720      	b.n	40660a <_malloc_r+0x35e>
  4067c8:	687b      	ldr	r3, [r7, #4]
  4067ca:	e78b      	b.n	4066e4 <_malloc_r+0x438>
  4067cc:	20000488 	.word	0x20000488

004067d0 <memchr>:
  4067d0:	0783      	lsls	r3, r0, #30
  4067d2:	b470      	push	{r4, r5, r6}
  4067d4:	b2c9      	uxtb	r1, r1
  4067d6:	d040      	beq.n	40685a <memchr+0x8a>
  4067d8:	1e54      	subs	r4, r2, #1
  4067da:	2a00      	cmp	r2, #0
  4067dc:	d03f      	beq.n	40685e <memchr+0x8e>
  4067de:	7803      	ldrb	r3, [r0, #0]
  4067e0:	428b      	cmp	r3, r1
  4067e2:	bf18      	it	ne
  4067e4:	1c43      	addne	r3, r0, #1
  4067e6:	d106      	bne.n	4067f6 <memchr+0x26>
  4067e8:	e01d      	b.n	406826 <memchr+0x56>
  4067ea:	b1f4      	cbz	r4, 40682a <memchr+0x5a>
  4067ec:	7802      	ldrb	r2, [r0, #0]
  4067ee:	428a      	cmp	r2, r1
  4067f0:	f104 34ff 	add.w	r4, r4, #4294967295
  4067f4:	d017      	beq.n	406826 <memchr+0x56>
  4067f6:	f013 0f03 	tst.w	r3, #3
  4067fa:	4618      	mov	r0, r3
  4067fc:	f103 0301 	add.w	r3, r3, #1
  406800:	d1f3      	bne.n	4067ea <memchr+0x1a>
  406802:	2c03      	cmp	r4, #3
  406804:	d814      	bhi.n	406830 <memchr+0x60>
  406806:	b184      	cbz	r4, 40682a <memchr+0x5a>
  406808:	7803      	ldrb	r3, [r0, #0]
  40680a:	428b      	cmp	r3, r1
  40680c:	d00b      	beq.n	406826 <memchr+0x56>
  40680e:	1905      	adds	r5, r0, r4
  406810:	1c43      	adds	r3, r0, #1
  406812:	e002      	b.n	40681a <memchr+0x4a>
  406814:	7802      	ldrb	r2, [r0, #0]
  406816:	428a      	cmp	r2, r1
  406818:	d005      	beq.n	406826 <memchr+0x56>
  40681a:	42ab      	cmp	r3, r5
  40681c:	4618      	mov	r0, r3
  40681e:	f103 0301 	add.w	r3, r3, #1
  406822:	d1f7      	bne.n	406814 <memchr+0x44>
  406824:	2000      	movs	r0, #0
  406826:	bc70      	pop	{r4, r5, r6}
  406828:	4770      	bx	lr
  40682a:	4620      	mov	r0, r4
  40682c:	bc70      	pop	{r4, r5, r6}
  40682e:	4770      	bx	lr
  406830:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  406834:	4602      	mov	r2, r0
  406836:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40683a:	4610      	mov	r0, r2
  40683c:	3204      	adds	r2, #4
  40683e:	6803      	ldr	r3, [r0, #0]
  406840:	4073      	eors	r3, r6
  406842:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  406846:	ea25 0303 	bic.w	r3, r5, r3
  40684a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40684e:	d1da      	bne.n	406806 <memchr+0x36>
  406850:	3c04      	subs	r4, #4
  406852:	2c03      	cmp	r4, #3
  406854:	4610      	mov	r0, r2
  406856:	d8f0      	bhi.n	40683a <memchr+0x6a>
  406858:	e7d5      	b.n	406806 <memchr+0x36>
  40685a:	4614      	mov	r4, r2
  40685c:	e7d1      	b.n	406802 <memchr+0x32>
  40685e:	4610      	mov	r0, r2
  406860:	e7e1      	b.n	406826 <memchr+0x56>
  406862:	bf00      	nop

00406864 <memmove>:
  406864:	4288      	cmp	r0, r1
  406866:	b5f0      	push	{r4, r5, r6, r7, lr}
  406868:	d90d      	bls.n	406886 <memmove+0x22>
  40686a:	188b      	adds	r3, r1, r2
  40686c:	4298      	cmp	r0, r3
  40686e:	d20a      	bcs.n	406886 <memmove+0x22>
  406870:	1881      	adds	r1, r0, r2
  406872:	2a00      	cmp	r2, #0
  406874:	d054      	beq.n	406920 <memmove+0xbc>
  406876:	1a9a      	subs	r2, r3, r2
  406878:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40687c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  406880:	4293      	cmp	r3, r2
  406882:	d1f9      	bne.n	406878 <memmove+0x14>
  406884:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406886:	2a0f      	cmp	r2, #15
  406888:	d948      	bls.n	40691c <memmove+0xb8>
  40688a:	ea40 0301 	orr.w	r3, r0, r1
  40688e:	079b      	lsls	r3, r3, #30
  406890:	d147      	bne.n	406922 <memmove+0xbe>
  406892:	f100 0410 	add.w	r4, r0, #16
  406896:	f101 0310 	add.w	r3, r1, #16
  40689a:	4615      	mov	r5, r2
  40689c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4068a0:	f844 6c10 	str.w	r6, [r4, #-16]
  4068a4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4068a8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4068ac:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4068b0:	f844 6c08 	str.w	r6, [r4, #-8]
  4068b4:	3d10      	subs	r5, #16
  4068b6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4068ba:	f844 6c04 	str.w	r6, [r4, #-4]
  4068be:	2d0f      	cmp	r5, #15
  4068c0:	f103 0310 	add.w	r3, r3, #16
  4068c4:	f104 0410 	add.w	r4, r4, #16
  4068c8:	d8e8      	bhi.n	40689c <memmove+0x38>
  4068ca:	f1a2 0310 	sub.w	r3, r2, #16
  4068ce:	f023 030f 	bic.w	r3, r3, #15
  4068d2:	f002 0e0f 	and.w	lr, r2, #15
  4068d6:	3310      	adds	r3, #16
  4068d8:	f1be 0f03 	cmp.w	lr, #3
  4068dc:	4419      	add	r1, r3
  4068de:	4403      	add	r3, r0
  4068e0:	d921      	bls.n	406926 <memmove+0xc2>
  4068e2:	1f1e      	subs	r6, r3, #4
  4068e4:	460d      	mov	r5, r1
  4068e6:	4674      	mov	r4, lr
  4068e8:	3c04      	subs	r4, #4
  4068ea:	f855 7b04 	ldr.w	r7, [r5], #4
  4068ee:	f846 7f04 	str.w	r7, [r6, #4]!
  4068f2:	2c03      	cmp	r4, #3
  4068f4:	d8f8      	bhi.n	4068e8 <memmove+0x84>
  4068f6:	f1ae 0404 	sub.w	r4, lr, #4
  4068fa:	f024 0403 	bic.w	r4, r4, #3
  4068fe:	3404      	adds	r4, #4
  406900:	4423      	add	r3, r4
  406902:	4421      	add	r1, r4
  406904:	f002 0203 	and.w	r2, r2, #3
  406908:	b152      	cbz	r2, 406920 <memmove+0xbc>
  40690a:	3b01      	subs	r3, #1
  40690c:	440a      	add	r2, r1
  40690e:	f811 4b01 	ldrb.w	r4, [r1], #1
  406912:	f803 4f01 	strb.w	r4, [r3, #1]!
  406916:	4291      	cmp	r1, r2
  406918:	d1f9      	bne.n	40690e <memmove+0xaa>
  40691a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40691c:	4603      	mov	r3, r0
  40691e:	e7f3      	b.n	406908 <memmove+0xa4>
  406920:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406922:	4603      	mov	r3, r0
  406924:	e7f1      	b.n	40690a <memmove+0xa6>
  406926:	4672      	mov	r2, lr
  406928:	e7ee      	b.n	406908 <memmove+0xa4>
  40692a:	bf00      	nop

0040692c <__malloc_lock>:
  40692c:	4770      	bx	lr
  40692e:	bf00      	nop

00406930 <__malloc_unlock>:
  406930:	4770      	bx	lr
  406932:	bf00      	nop

00406934 <_realloc_r>:
  406934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406938:	4617      	mov	r7, r2
  40693a:	b083      	sub	sp, #12
  40693c:	460e      	mov	r6, r1
  40693e:	2900      	cmp	r1, #0
  406940:	f000 80e7 	beq.w	406b12 <_realloc_r+0x1de>
  406944:	4681      	mov	r9, r0
  406946:	f107 050b 	add.w	r5, r7, #11
  40694a:	f7ff ffef 	bl	40692c <__malloc_lock>
  40694e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406952:	2d16      	cmp	r5, #22
  406954:	f023 0403 	bic.w	r4, r3, #3
  406958:	f1a6 0808 	sub.w	r8, r6, #8
  40695c:	d84c      	bhi.n	4069f8 <_realloc_r+0xc4>
  40695e:	2210      	movs	r2, #16
  406960:	4615      	mov	r5, r2
  406962:	42af      	cmp	r7, r5
  406964:	d84d      	bhi.n	406a02 <_realloc_r+0xce>
  406966:	4294      	cmp	r4, r2
  406968:	f280 8084 	bge.w	406a74 <_realloc_r+0x140>
  40696c:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 406d1c <_realloc_r+0x3e8>
  406970:	f8db 0008 	ldr.w	r0, [fp, #8]
  406974:	eb08 0104 	add.w	r1, r8, r4
  406978:	4288      	cmp	r0, r1
  40697a:	f000 80d6 	beq.w	406b2a <_realloc_r+0x1f6>
  40697e:	6848      	ldr	r0, [r1, #4]
  406980:	f020 0e01 	bic.w	lr, r0, #1
  406984:	448e      	add	lr, r1
  406986:	f8de e004 	ldr.w	lr, [lr, #4]
  40698a:	f01e 0f01 	tst.w	lr, #1
  40698e:	d13f      	bne.n	406a10 <_realloc_r+0xdc>
  406990:	f020 0003 	bic.w	r0, r0, #3
  406994:	4420      	add	r0, r4
  406996:	4290      	cmp	r0, r2
  406998:	f280 80c1 	bge.w	406b1e <_realloc_r+0x1ea>
  40699c:	07db      	lsls	r3, r3, #31
  40699e:	f100 808f 	bmi.w	406ac0 <_realloc_r+0x18c>
  4069a2:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4069a6:	ebc3 0a08 	rsb	sl, r3, r8
  4069aa:	f8da 3004 	ldr.w	r3, [sl, #4]
  4069ae:	f023 0303 	bic.w	r3, r3, #3
  4069b2:	eb00 0e03 	add.w	lr, r0, r3
  4069b6:	4596      	cmp	lr, r2
  4069b8:	db34      	blt.n	406a24 <_realloc_r+0xf0>
  4069ba:	68cb      	ldr	r3, [r1, #12]
  4069bc:	688a      	ldr	r2, [r1, #8]
  4069be:	4657      	mov	r7, sl
  4069c0:	60d3      	str	r3, [r2, #12]
  4069c2:	609a      	str	r2, [r3, #8]
  4069c4:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4069c8:	f8da 300c 	ldr.w	r3, [sl, #12]
  4069cc:	60cb      	str	r3, [r1, #12]
  4069ce:	1f22      	subs	r2, r4, #4
  4069d0:	2a24      	cmp	r2, #36	; 0x24
  4069d2:	6099      	str	r1, [r3, #8]
  4069d4:	f200 8136 	bhi.w	406c44 <_realloc_r+0x310>
  4069d8:	2a13      	cmp	r2, #19
  4069da:	f240 80fd 	bls.w	406bd8 <_realloc_r+0x2a4>
  4069de:	6833      	ldr	r3, [r6, #0]
  4069e0:	f8ca 3008 	str.w	r3, [sl, #8]
  4069e4:	6873      	ldr	r3, [r6, #4]
  4069e6:	f8ca 300c 	str.w	r3, [sl, #12]
  4069ea:	2a1b      	cmp	r2, #27
  4069ec:	f200 8140 	bhi.w	406c70 <_realloc_r+0x33c>
  4069f0:	3608      	adds	r6, #8
  4069f2:	f10a 0310 	add.w	r3, sl, #16
  4069f6:	e0f0      	b.n	406bda <_realloc_r+0x2a6>
  4069f8:	f025 0507 	bic.w	r5, r5, #7
  4069fc:	2d00      	cmp	r5, #0
  4069fe:	462a      	mov	r2, r5
  406a00:	daaf      	bge.n	406962 <_realloc_r+0x2e>
  406a02:	230c      	movs	r3, #12
  406a04:	2000      	movs	r0, #0
  406a06:	f8c9 3000 	str.w	r3, [r9]
  406a0a:	b003      	add	sp, #12
  406a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a10:	07d9      	lsls	r1, r3, #31
  406a12:	d455      	bmi.n	406ac0 <_realloc_r+0x18c>
  406a14:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406a18:	ebc3 0a08 	rsb	sl, r3, r8
  406a1c:	f8da 3004 	ldr.w	r3, [sl, #4]
  406a20:	f023 0303 	bic.w	r3, r3, #3
  406a24:	4423      	add	r3, r4
  406a26:	4293      	cmp	r3, r2
  406a28:	db4a      	blt.n	406ac0 <_realloc_r+0x18c>
  406a2a:	4657      	mov	r7, sl
  406a2c:	f8da 100c 	ldr.w	r1, [sl, #12]
  406a30:	f857 0f08 	ldr.w	r0, [r7, #8]!
  406a34:	1f22      	subs	r2, r4, #4
  406a36:	2a24      	cmp	r2, #36	; 0x24
  406a38:	60c1      	str	r1, [r0, #12]
  406a3a:	6088      	str	r0, [r1, #8]
  406a3c:	f200 810e 	bhi.w	406c5c <_realloc_r+0x328>
  406a40:	2a13      	cmp	r2, #19
  406a42:	f240 8109 	bls.w	406c58 <_realloc_r+0x324>
  406a46:	6831      	ldr	r1, [r6, #0]
  406a48:	f8ca 1008 	str.w	r1, [sl, #8]
  406a4c:	6871      	ldr	r1, [r6, #4]
  406a4e:	f8ca 100c 	str.w	r1, [sl, #12]
  406a52:	2a1b      	cmp	r2, #27
  406a54:	f200 8121 	bhi.w	406c9a <_realloc_r+0x366>
  406a58:	3608      	adds	r6, #8
  406a5a:	f10a 0210 	add.w	r2, sl, #16
  406a5e:	6831      	ldr	r1, [r6, #0]
  406a60:	6011      	str	r1, [r2, #0]
  406a62:	6871      	ldr	r1, [r6, #4]
  406a64:	6051      	str	r1, [r2, #4]
  406a66:	68b1      	ldr	r1, [r6, #8]
  406a68:	6091      	str	r1, [r2, #8]
  406a6a:	461c      	mov	r4, r3
  406a6c:	f8da 3004 	ldr.w	r3, [sl, #4]
  406a70:	463e      	mov	r6, r7
  406a72:	46d0      	mov	r8, sl
  406a74:	1b62      	subs	r2, r4, r5
  406a76:	2a0f      	cmp	r2, #15
  406a78:	f003 0301 	and.w	r3, r3, #1
  406a7c:	d80e      	bhi.n	406a9c <_realloc_r+0x168>
  406a7e:	4323      	orrs	r3, r4
  406a80:	4444      	add	r4, r8
  406a82:	f8c8 3004 	str.w	r3, [r8, #4]
  406a86:	6863      	ldr	r3, [r4, #4]
  406a88:	f043 0301 	orr.w	r3, r3, #1
  406a8c:	6063      	str	r3, [r4, #4]
  406a8e:	4648      	mov	r0, r9
  406a90:	f7ff ff4e 	bl	406930 <__malloc_unlock>
  406a94:	4630      	mov	r0, r6
  406a96:	b003      	add	sp, #12
  406a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a9c:	eb08 0105 	add.w	r1, r8, r5
  406aa0:	431d      	orrs	r5, r3
  406aa2:	f042 0301 	orr.w	r3, r2, #1
  406aa6:	440a      	add	r2, r1
  406aa8:	f8c8 5004 	str.w	r5, [r8, #4]
  406aac:	604b      	str	r3, [r1, #4]
  406aae:	6853      	ldr	r3, [r2, #4]
  406ab0:	f043 0301 	orr.w	r3, r3, #1
  406ab4:	3108      	adds	r1, #8
  406ab6:	6053      	str	r3, [r2, #4]
  406ab8:	4648      	mov	r0, r9
  406aba:	f7ff f8e7 	bl	405c8c <_free_r>
  406abe:	e7e6      	b.n	406a8e <_realloc_r+0x15a>
  406ac0:	4639      	mov	r1, r7
  406ac2:	4648      	mov	r0, r9
  406ac4:	f7ff fbf2 	bl	4062ac <_malloc_r>
  406ac8:	4607      	mov	r7, r0
  406aca:	b1d8      	cbz	r0, 406b04 <_realloc_r+0x1d0>
  406acc:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406ad0:	f023 0201 	bic.w	r2, r3, #1
  406ad4:	4442      	add	r2, r8
  406ad6:	f1a0 0108 	sub.w	r1, r0, #8
  406ada:	4291      	cmp	r1, r2
  406adc:	f000 80ac 	beq.w	406c38 <_realloc_r+0x304>
  406ae0:	1f22      	subs	r2, r4, #4
  406ae2:	2a24      	cmp	r2, #36	; 0x24
  406ae4:	f200 8099 	bhi.w	406c1a <_realloc_r+0x2e6>
  406ae8:	2a13      	cmp	r2, #19
  406aea:	d86a      	bhi.n	406bc2 <_realloc_r+0x28e>
  406aec:	4603      	mov	r3, r0
  406aee:	4632      	mov	r2, r6
  406af0:	6811      	ldr	r1, [r2, #0]
  406af2:	6019      	str	r1, [r3, #0]
  406af4:	6851      	ldr	r1, [r2, #4]
  406af6:	6059      	str	r1, [r3, #4]
  406af8:	6892      	ldr	r2, [r2, #8]
  406afa:	609a      	str	r2, [r3, #8]
  406afc:	4631      	mov	r1, r6
  406afe:	4648      	mov	r0, r9
  406b00:	f7ff f8c4 	bl	405c8c <_free_r>
  406b04:	4648      	mov	r0, r9
  406b06:	f7ff ff13 	bl	406930 <__malloc_unlock>
  406b0a:	4638      	mov	r0, r7
  406b0c:	b003      	add	sp, #12
  406b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b12:	4611      	mov	r1, r2
  406b14:	b003      	add	sp, #12
  406b16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b1a:	f7ff bbc7 	b.w	4062ac <_malloc_r>
  406b1e:	68ca      	ldr	r2, [r1, #12]
  406b20:	6889      	ldr	r1, [r1, #8]
  406b22:	4604      	mov	r4, r0
  406b24:	60ca      	str	r2, [r1, #12]
  406b26:	6091      	str	r1, [r2, #8]
  406b28:	e7a4      	b.n	406a74 <_realloc_r+0x140>
  406b2a:	6841      	ldr	r1, [r0, #4]
  406b2c:	f021 0103 	bic.w	r1, r1, #3
  406b30:	4421      	add	r1, r4
  406b32:	f105 0010 	add.w	r0, r5, #16
  406b36:	4281      	cmp	r1, r0
  406b38:	da5b      	bge.n	406bf2 <_realloc_r+0x2be>
  406b3a:	07db      	lsls	r3, r3, #31
  406b3c:	d4c0      	bmi.n	406ac0 <_realloc_r+0x18c>
  406b3e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406b42:	ebc3 0a08 	rsb	sl, r3, r8
  406b46:	f8da 3004 	ldr.w	r3, [sl, #4]
  406b4a:	f023 0303 	bic.w	r3, r3, #3
  406b4e:	eb01 0c03 	add.w	ip, r1, r3
  406b52:	4560      	cmp	r0, ip
  406b54:	f73f af66 	bgt.w	406a24 <_realloc_r+0xf0>
  406b58:	4657      	mov	r7, sl
  406b5a:	f8da 300c 	ldr.w	r3, [sl, #12]
  406b5e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  406b62:	1f22      	subs	r2, r4, #4
  406b64:	2a24      	cmp	r2, #36	; 0x24
  406b66:	60cb      	str	r3, [r1, #12]
  406b68:	6099      	str	r1, [r3, #8]
  406b6a:	f200 80b8 	bhi.w	406cde <_realloc_r+0x3aa>
  406b6e:	2a13      	cmp	r2, #19
  406b70:	f240 80a9 	bls.w	406cc6 <_realloc_r+0x392>
  406b74:	6833      	ldr	r3, [r6, #0]
  406b76:	f8ca 3008 	str.w	r3, [sl, #8]
  406b7a:	6873      	ldr	r3, [r6, #4]
  406b7c:	f8ca 300c 	str.w	r3, [sl, #12]
  406b80:	2a1b      	cmp	r2, #27
  406b82:	f200 80b5 	bhi.w	406cf0 <_realloc_r+0x3bc>
  406b86:	3608      	adds	r6, #8
  406b88:	f10a 0310 	add.w	r3, sl, #16
  406b8c:	6832      	ldr	r2, [r6, #0]
  406b8e:	601a      	str	r2, [r3, #0]
  406b90:	6872      	ldr	r2, [r6, #4]
  406b92:	605a      	str	r2, [r3, #4]
  406b94:	68b2      	ldr	r2, [r6, #8]
  406b96:	609a      	str	r2, [r3, #8]
  406b98:	eb0a 0205 	add.w	r2, sl, r5
  406b9c:	ebc5 030c 	rsb	r3, r5, ip
  406ba0:	f043 0301 	orr.w	r3, r3, #1
  406ba4:	f8cb 2008 	str.w	r2, [fp, #8]
  406ba8:	6053      	str	r3, [r2, #4]
  406baa:	f8da 3004 	ldr.w	r3, [sl, #4]
  406bae:	f003 0301 	and.w	r3, r3, #1
  406bb2:	431d      	orrs	r5, r3
  406bb4:	4648      	mov	r0, r9
  406bb6:	f8ca 5004 	str.w	r5, [sl, #4]
  406bba:	f7ff feb9 	bl	406930 <__malloc_unlock>
  406bbe:	4638      	mov	r0, r7
  406bc0:	e769      	b.n	406a96 <_realloc_r+0x162>
  406bc2:	6833      	ldr	r3, [r6, #0]
  406bc4:	6003      	str	r3, [r0, #0]
  406bc6:	6873      	ldr	r3, [r6, #4]
  406bc8:	6043      	str	r3, [r0, #4]
  406bca:	2a1b      	cmp	r2, #27
  406bcc:	d829      	bhi.n	406c22 <_realloc_r+0x2ee>
  406bce:	f100 0308 	add.w	r3, r0, #8
  406bd2:	f106 0208 	add.w	r2, r6, #8
  406bd6:	e78b      	b.n	406af0 <_realloc_r+0x1bc>
  406bd8:	463b      	mov	r3, r7
  406bda:	6832      	ldr	r2, [r6, #0]
  406bdc:	601a      	str	r2, [r3, #0]
  406bde:	6872      	ldr	r2, [r6, #4]
  406be0:	605a      	str	r2, [r3, #4]
  406be2:	68b2      	ldr	r2, [r6, #8]
  406be4:	609a      	str	r2, [r3, #8]
  406be6:	463e      	mov	r6, r7
  406be8:	4674      	mov	r4, lr
  406bea:	f8da 3004 	ldr.w	r3, [sl, #4]
  406bee:	46d0      	mov	r8, sl
  406bf0:	e740      	b.n	406a74 <_realloc_r+0x140>
  406bf2:	eb08 0205 	add.w	r2, r8, r5
  406bf6:	1b4b      	subs	r3, r1, r5
  406bf8:	f043 0301 	orr.w	r3, r3, #1
  406bfc:	f8cb 2008 	str.w	r2, [fp, #8]
  406c00:	6053      	str	r3, [r2, #4]
  406c02:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406c06:	f003 0301 	and.w	r3, r3, #1
  406c0a:	431d      	orrs	r5, r3
  406c0c:	4648      	mov	r0, r9
  406c0e:	f846 5c04 	str.w	r5, [r6, #-4]
  406c12:	f7ff fe8d 	bl	406930 <__malloc_unlock>
  406c16:	4630      	mov	r0, r6
  406c18:	e73d      	b.n	406a96 <_realloc_r+0x162>
  406c1a:	4631      	mov	r1, r6
  406c1c:	f7ff fe22 	bl	406864 <memmove>
  406c20:	e76c      	b.n	406afc <_realloc_r+0x1c8>
  406c22:	68b3      	ldr	r3, [r6, #8]
  406c24:	6083      	str	r3, [r0, #8]
  406c26:	68f3      	ldr	r3, [r6, #12]
  406c28:	60c3      	str	r3, [r0, #12]
  406c2a:	2a24      	cmp	r2, #36	; 0x24
  406c2c:	d02c      	beq.n	406c88 <_realloc_r+0x354>
  406c2e:	f100 0310 	add.w	r3, r0, #16
  406c32:	f106 0210 	add.w	r2, r6, #16
  406c36:	e75b      	b.n	406af0 <_realloc_r+0x1bc>
  406c38:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406c3c:	f022 0203 	bic.w	r2, r2, #3
  406c40:	4414      	add	r4, r2
  406c42:	e717      	b.n	406a74 <_realloc_r+0x140>
  406c44:	4631      	mov	r1, r6
  406c46:	4638      	mov	r0, r7
  406c48:	4674      	mov	r4, lr
  406c4a:	463e      	mov	r6, r7
  406c4c:	f7ff fe0a 	bl	406864 <memmove>
  406c50:	46d0      	mov	r8, sl
  406c52:	f8da 3004 	ldr.w	r3, [sl, #4]
  406c56:	e70d      	b.n	406a74 <_realloc_r+0x140>
  406c58:	463a      	mov	r2, r7
  406c5a:	e700      	b.n	406a5e <_realloc_r+0x12a>
  406c5c:	4631      	mov	r1, r6
  406c5e:	4638      	mov	r0, r7
  406c60:	461c      	mov	r4, r3
  406c62:	463e      	mov	r6, r7
  406c64:	f7ff fdfe 	bl	406864 <memmove>
  406c68:	46d0      	mov	r8, sl
  406c6a:	f8da 3004 	ldr.w	r3, [sl, #4]
  406c6e:	e701      	b.n	406a74 <_realloc_r+0x140>
  406c70:	68b3      	ldr	r3, [r6, #8]
  406c72:	f8ca 3010 	str.w	r3, [sl, #16]
  406c76:	68f3      	ldr	r3, [r6, #12]
  406c78:	f8ca 3014 	str.w	r3, [sl, #20]
  406c7c:	2a24      	cmp	r2, #36	; 0x24
  406c7e:	d018      	beq.n	406cb2 <_realloc_r+0x37e>
  406c80:	3610      	adds	r6, #16
  406c82:	f10a 0318 	add.w	r3, sl, #24
  406c86:	e7a8      	b.n	406bda <_realloc_r+0x2a6>
  406c88:	6933      	ldr	r3, [r6, #16]
  406c8a:	6103      	str	r3, [r0, #16]
  406c8c:	6973      	ldr	r3, [r6, #20]
  406c8e:	6143      	str	r3, [r0, #20]
  406c90:	f106 0218 	add.w	r2, r6, #24
  406c94:	f100 0318 	add.w	r3, r0, #24
  406c98:	e72a      	b.n	406af0 <_realloc_r+0x1bc>
  406c9a:	68b1      	ldr	r1, [r6, #8]
  406c9c:	f8ca 1010 	str.w	r1, [sl, #16]
  406ca0:	68f1      	ldr	r1, [r6, #12]
  406ca2:	f8ca 1014 	str.w	r1, [sl, #20]
  406ca6:	2a24      	cmp	r2, #36	; 0x24
  406ca8:	d00f      	beq.n	406cca <_realloc_r+0x396>
  406caa:	3610      	adds	r6, #16
  406cac:	f10a 0218 	add.w	r2, sl, #24
  406cb0:	e6d5      	b.n	406a5e <_realloc_r+0x12a>
  406cb2:	6933      	ldr	r3, [r6, #16]
  406cb4:	f8ca 3018 	str.w	r3, [sl, #24]
  406cb8:	6973      	ldr	r3, [r6, #20]
  406cba:	f8ca 301c 	str.w	r3, [sl, #28]
  406cbe:	3618      	adds	r6, #24
  406cc0:	f10a 0320 	add.w	r3, sl, #32
  406cc4:	e789      	b.n	406bda <_realloc_r+0x2a6>
  406cc6:	463b      	mov	r3, r7
  406cc8:	e760      	b.n	406b8c <_realloc_r+0x258>
  406cca:	6932      	ldr	r2, [r6, #16]
  406ccc:	f8ca 2018 	str.w	r2, [sl, #24]
  406cd0:	6972      	ldr	r2, [r6, #20]
  406cd2:	f8ca 201c 	str.w	r2, [sl, #28]
  406cd6:	3618      	adds	r6, #24
  406cd8:	f10a 0220 	add.w	r2, sl, #32
  406cdc:	e6bf      	b.n	406a5e <_realloc_r+0x12a>
  406cde:	4631      	mov	r1, r6
  406ce0:	4638      	mov	r0, r7
  406ce2:	f8cd c004 	str.w	ip, [sp, #4]
  406ce6:	f7ff fdbd 	bl	406864 <memmove>
  406cea:	f8dd c004 	ldr.w	ip, [sp, #4]
  406cee:	e753      	b.n	406b98 <_realloc_r+0x264>
  406cf0:	68b3      	ldr	r3, [r6, #8]
  406cf2:	f8ca 3010 	str.w	r3, [sl, #16]
  406cf6:	68f3      	ldr	r3, [r6, #12]
  406cf8:	f8ca 3014 	str.w	r3, [sl, #20]
  406cfc:	2a24      	cmp	r2, #36	; 0x24
  406cfe:	d003      	beq.n	406d08 <_realloc_r+0x3d4>
  406d00:	3610      	adds	r6, #16
  406d02:	f10a 0318 	add.w	r3, sl, #24
  406d06:	e741      	b.n	406b8c <_realloc_r+0x258>
  406d08:	6933      	ldr	r3, [r6, #16]
  406d0a:	f8ca 3018 	str.w	r3, [sl, #24]
  406d0e:	6973      	ldr	r3, [r6, #20]
  406d10:	f8ca 301c 	str.w	r3, [sl, #28]
  406d14:	3618      	adds	r6, #24
  406d16:	f10a 0320 	add.w	r3, sl, #32
  406d1a:	e737      	b.n	406b8c <_realloc_r+0x258>
  406d1c:	20000488 	.word	0x20000488

00406d20 <_sbrk_r>:
  406d20:	b538      	push	{r3, r4, r5, lr}
  406d22:	4c07      	ldr	r4, [pc, #28]	; (406d40 <_sbrk_r+0x20>)
  406d24:	2300      	movs	r3, #0
  406d26:	4605      	mov	r5, r0
  406d28:	4608      	mov	r0, r1
  406d2a:	6023      	str	r3, [r4, #0]
  406d2c:	f7fa f806 	bl	400d3c <_sbrk>
  406d30:	1c43      	adds	r3, r0, #1
  406d32:	d000      	beq.n	406d36 <_sbrk_r+0x16>
  406d34:	bd38      	pop	{r3, r4, r5, pc}
  406d36:	6823      	ldr	r3, [r4, #0]
  406d38:	2b00      	cmp	r3, #0
  406d3a:	d0fb      	beq.n	406d34 <_sbrk_r+0x14>
  406d3c:	602b      	str	r3, [r5, #0]
  406d3e:	bd38      	pop	{r3, r4, r5, pc}
  406d40:	2001cf84 	.word	0x2001cf84

00406d44 <__sread>:
  406d44:	b510      	push	{r4, lr}
  406d46:	460c      	mov	r4, r1
  406d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406d4c:	f000 f9bc 	bl	4070c8 <_read_r>
  406d50:	2800      	cmp	r0, #0
  406d52:	db03      	blt.n	406d5c <__sread+0x18>
  406d54:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406d56:	4403      	add	r3, r0
  406d58:	6523      	str	r3, [r4, #80]	; 0x50
  406d5a:	bd10      	pop	{r4, pc}
  406d5c:	89a3      	ldrh	r3, [r4, #12]
  406d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406d62:	81a3      	strh	r3, [r4, #12]
  406d64:	bd10      	pop	{r4, pc}
  406d66:	bf00      	nop

00406d68 <__swrite>:
  406d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d6c:	4616      	mov	r6, r2
  406d6e:	898a      	ldrh	r2, [r1, #12]
  406d70:	461d      	mov	r5, r3
  406d72:	05d3      	lsls	r3, r2, #23
  406d74:	460c      	mov	r4, r1
  406d76:	4607      	mov	r7, r0
  406d78:	d506      	bpl.n	406d88 <__swrite+0x20>
  406d7a:	2200      	movs	r2, #0
  406d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406d80:	2302      	movs	r3, #2
  406d82:	f000 f98d 	bl	4070a0 <_lseek_r>
  406d86:	89a2      	ldrh	r2, [r4, #12]
  406d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406d8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406d90:	81a2      	strh	r2, [r4, #12]
  406d92:	4638      	mov	r0, r7
  406d94:	4632      	mov	r2, r6
  406d96:	462b      	mov	r3, r5
  406d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406d9c:	f000 b8a0 	b.w	406ee0 <_write_r>

00406da0 <__sseek>:
  406da0:	b510      	push	{r4, lr}
  406da2:	460c      	mov	r4, r1
  406da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406da8:	f000 f97a 	bl	4070a0 <_lseek_r>
  406dac:	89a3      	ldrh	r3, [r4, #12]
  406dae:	1c42      	adds	r2, r0, #1
  406db0:	bf0e      	itee	eq
  406db2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406db6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406dba:	6520      	strne	r0, [r4, #80]	; 0x50
  406dbc:	81a3      	strh	r3, [r4, #12]
  406dbe:	bd10      	pop	{r4, pc}

00406dc0 <__sclose>:
  406dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406dc4:	f000 b8f2 	b.w	406fac <_close_r>

00406dc8 <__swbuf_r>:
  406dc8:	b570      	push	{r4, r5, r6, lr}
  406dca:	460d      	mov	r5, r1
  406dcc:	4614      	mov	r4, r2
  406dce:	4606      	mov	r6, r0
  406dd0:	b110      	cbz	r0, 406dd8 <__swbuf_r+0x10>
  406dd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406dd4:	2b00      	cmp	r3, #0
  406dd6:	d048      	beq.n	406e6a <__swbuf_r+0xa2>
  406dd8:	89a2      	ldrh	r2, [r4, #12]
  406dda:	69a3      	ldr	r3, [r4, #24]
  406ddc:	60a3      	str	r3, [r4, #8]
  406dde:	b291      	uxth	r1, r2
  406de0:	0708      	lsls	r0, r1, #28
  406de2:	d538      	bpl.n	406e56 <__swbuf_r+0x8e>
  406de4:	6923      	ldr	r3, [r4, #16]
  406de6:	2b00      	cmp	r3, #0
  406de8:	d035      	beq.n	406e56 <__swbuf_r+0x8e>
  406dea:	0489      	lsls	r1, r1, #18
  406dec:	b2ed      	uxtb	r5, r5
  406dee:	d515      	bpl.n	406e1c <__swbuf_r+0x54>
  406df0:	6822      	ldr	r2, [r4, #0]
  406df2:	6961      	ldr	r1, [r4, #20]
  406df4:	1ad3      	subs	r3, r2, r3
  406df6:	428b      	cmp	r3, r1
  406df8:	da1c      	bge.n	406e34 <__swbuf_r+0x6c>
  406dfa:	3301      	adds	r3, #1
  406dfc:	68a1      	ldr	r1, [r4, #8]
  406dfe:	1c50      	adds	r0, r2, #1
  406e00:	3901      	subs	r1, #1
  406e02:	60a1      	str	r1, [r4, #8]
  406e04:	6020      	str	r0, [r4, #0]
  406e06:	7015      	strb	r5, [r2, #0]
  406e08:	6962      	ldr	r2, [r4, #20]
  406e0a:	429a      	cmp	r2, r3
  406e0c:	d01a      	beq.n	406e44 <__swbuf_r+0x7c>
  406e0e:	89a3      	ldrh	r3, [r4, #12]
  406e10:	07db      	lsls	r3, r3, #31
  406e12:	d501      	bpl.n	406e18 <__swbuf_r+0x50>
  406e14:	2d0a      	cmp	r5, #10
  406e16:	d015      	beq.n	406e44 <__swbuf_r+0x7c>
  406e18:	4628      	mov	r0, r5
  406e1a:	bd70      	pop	{r4, r5, r6, pc}
  406e1c:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406e1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406e22:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406e26:	81a2      	strh	r2, [r4, #12]
  406e28:	6822      	ldr	r2, [r4, #0]
  406e2a:	6661      	str	r1, [r4, #100]	; 0x64
  406e2c:	6961      	ldr	r1, [r4, #20]
  406e2e:	1ad3      	subs	r3, r2, r3
  406e30:	428b      	cmp	r3, r1
  406e32:	dbe2      	blt.n	406dfa <__swbuf_r+0x32>
  406e34:	4630      	mov	r0, r6
  406e36:	4621      	mov	r1, r4
  406e38:	f7fe fdbc 	bl	4059b4 <_fflush_r>
  406e3c:	b940      	cbnz	r0, 406e50 <__swbuf_r+0x88>
  406e3e:	6822      	ldr	r2, [r4, #0]
  406e40:	2301      	movs	r3, #1
  406e42:	e7db      	b.n	406dfc <__swbuf_r+0x34>
  406e44:	4630      	mov	r0, r6
  406e46:	4621      	mov	r1, r4
  406e48:	f7fe fdb4 	bl	4059b4 <_fflush_r>
  406e4c:	2800      	cmp	r0, #0
  406e4e:	d0e3      	beq.n	406e18 <__swbuf_r+0x50>
  406e50:	f04f 30ff 	mov.w	r0, #4294967295
  406e54:	bd70      	pop	{r4, r5, r6, pc}
  406e56:	4630      	mov	r0, r6
  406e58:	4621      	mov	r1, r4
  406e5a:	f7fe fc8f 	bl	40577c <__swsetup_r>
  406e5e:	2800      	cmp	r0, #0
  406e60:	d1f6      	bne.n	406e50 <__swbuf_r+0x88>
  406e62:	89a2      	ldrh	r2, [r4, #12]
  406e64:	6923      	ldr	r3, [r4, #16]
  406e66:	b291      	uxth	r1, r2
  406e68:	e7bf      	b.n	406dea <__swbuf_r+0x22>
  406e6a:	f7fe fe37 	bl	405adc <__sinit>
  406e6e:	e7b3      	b.n	406dd8 <__swbuf_r+0x10>

00406e70 <_wcrtomb_r>:
  406e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e74:	4605      	mov	r5, r0
  406e76:	b086      	sub	sp, #24
  406e78:	461e      	mov	r6, r3
  406e7a:	460c      	mov	r4, r1
  406e7c:	b1a1      	cbz	r1, 406ea8 <_wcrtomb_r+0x38>
  406e7e:	4b10      	ldr	r3, [pc, #64]	; (406ec0 <_wcrtomb_r+0x50>)
  406e80:	4617      	mov	r7, r2
  406e82:	f8d3 8000 	ldr.w	r8, [r3]
  406e86:	f7ff f98f 	bl	4061a8 <__locale_charset>
  406e8a:	9600      	str	r6, [sp, #0]
  406e8c:	4603      	mov	r3, r0
  406e8e:	4621      	mov	r1, r4
  406e90:	463a      	mov	r2, r7
  406e92:	4628      	mov	r0, r5
  406e94:	47c0      	blx	r8
  406e96:	1c43      	adds	r3, r0, #1
  406e98:	d103      	bne.n	406ea2 <_wcrtomb_r+0x32>
  406e9a:	2200      	movs	r2, #0
  406e9c:	238a      	movs	r3, #138	; 0x8a
  406e9e:	6032      	str	r2, [r6, #0]
  406ea0:	602b      	str	r3, [r5, #0]
  406ea2:	b006      	add	sp, #24
  406ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ea8:	4b05      	ldr	r3, [pc, #20]	; (406ec0 <_wcrtomb_r+0x50>)
  406eaa:	681f      	ldr	r7, [r3, #0]
  406eac:	f7ff f97c 	bl	4061a8 <__locale_charset>
  406eb0:	9600      	str	r6, [sp, #0]
  406eb2:	4603      	mov	r3, r0
  406eb4:	4622      	mov	r2, r4
  406eb6:	4628      	mov	r0, r5
  406eb8:	a903      	add	r1, sp, #12
  406eba:	47b8      	blx	r7
  406ebc:	e7eb      	b.n	406e96 <_wcrtomb_r+0x26>
  406ebe:	bf00      	nop
  406ec0:	20000898 	.word	0x20000898

00406ec4 <__ascii_wctomb>:
  406ec4:	b121      	cbz	r1, 406ed0 <__ascii_wctomb+0xc>
  406ec6:	2aff      	cmp	r2, #255	; 0xff
  406ec8:	d804      	bhi.n	406ed4 <__ascii_wctomb+0x10>
  406eca:	700a      	strb	r2, [r1, #0]
  406ecc:	2001      	movs	r0, #1
  406ece:	4770      	bx	lr
  406ed0:	4608      	mov	r0, r1
  406ed2:	4770      	bx	lr
  406ed4:	238a      	movs	r3, #138	; 0x8a
  406ed6:	6003      	str	r3, [r0, #0]
  406ed8:	f04f 30ff 	mov.w	r0, #4294967295
  406edc:	4770      	bx	lr
  406ede:	bf00      	nop

00406ee0 <_write_r>:
  406ee0:	b570      	push	{r4, r5, r6, lr}
  406ee2:	4c08      	ldr	r4, [pc, #32]	; (406f04 <_write_r+0x24>)
  406ee4:	4606      	mov	r6, r0
  406ee6:	2500      	movs	r5, #0
  406ee8:	4608      	mov	r0, r1
  406eea:	4611      	mov	r1, r2
  406eec:	461a      	mov	r2, r3
  406eee:	6025      	str	r5, [r4, #0]
  406ef0:	f7f9 f9aa 	bl	400248 <_write>
  406ef4:	1c43      	adds	r3, r0, #1
  406ef6:	d000      	beq.n	406efa <_write_r+0x1a>
  406ef8:	bd70      	pop	{r4, r5, r6, pc}
  406efa:	6823      	ldr	r3, [r4, #0]
  406efc:	2b00      	cmp	r3, #0
  406efe:	d0fb      	beq.n	406ef8 <_write_r+0x18>
  406f00:	6033      	str	r3, [r6, #0]
  406f02:	bd70      	pop	{r4, r5, r6, pc}
  406f04:	2001cf84 	.word	0x2001cf84

00406f08 <__register_exitproc>:
  406f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406f0c:	4c25      	ldr	r4, [pc, #148]	; (406fa4 <__register_exitproc+0x9c>)
  406f0e:	6825      	ldr	r5, [r4, #0]
  406f10:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  406f14:	4606      	mov	r6, r0
  406f16:	4688      	mov	r8, r1
  406f18:	4692      	mov	sl, r2
  406f1a:	4699      	mov	r9, r3
  406f1c:	b3cc      	cbz	r4, 406f92 <__register_exitproc+0x8a>
  406f1e:	6860      	ldr	r0, [r4, #4]
  406f20:	281f      	cmp	r0, #31
  406f22:	dc18      	bgt.n	406f56 <__register_exitproc+0x4e>
  406f24:	1c43      	adds	r3, r0, #1
  406f26:	b17e      	cbz	r6, 406f48 <__register_exitproc+0x40>
  406f28:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  406f2c:	2101      	movs	r1, #1
  406f2e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  406f32:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  406f36:	fa01 f200 	lsl.w	r2, r1, r0
  406f3a:	4317      	orrs	r7, r2
  406f3c:	2e02      	cmp	r6, #2
  406f3e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406f42:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  406f46:	d01e      	beq.n	406f86 <__register_exitproc+0x7e>
  406f48:	3002      	adds	r0, #2
  406f4a:	6063      	str	r3, [r4, #4]
  406f4c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  406f50:	2000      	movs	r0, #0
  406f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f56:	4b14      	ldr	r3, [pc, #80]	; (406fa8 <__register_exitproc+0xa0>)
  406f58:	b303      	cbz	r3, 406f9c <__register_exitproc+0x94>
  406f5a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406f5e:	f7ff f99d 	bl	40629c <malloc>
  406f62:	4604      	mov	r4, r0
  406f64:	b1d0      	cbz	r0, 406f9c <__register_exitproc+0x94>
  406f66:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  406f6a:	2700      	movs	r7, #0
  406f6c:	e880 0088 	stmia.w	r0, {r3, r7}
  406f70:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406f74:	4638      	mov	r0, r7
  406f76:	2301      	movs	r3, #1
  406f78:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406f7c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  406f80:	2e00      	cmp	r6, #0
  406f82:	d0e1      	beq.n	406f48 <__register_exitproc+0x40>
  406f84:	e7d0      	b.n	406f28 <__register_exitproc+0x20>
  406f86:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  406f8a:	430a      	orrs	r2, r1
  406f8c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  406f90:	e7da      	b.n	406f48 <__register_exitproc+0x40>
  406f92:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  406f96:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406f9a:	e7c0      	b.n	406f1e <__register_exitproc+0x16>
  406f9c:	f04f 30ff 	mov.w	r0, #4294967295
  406fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406fa4:	00407e80 	.word	0x00407e80
  406fa8:	0040629d 	.word	0x0040629d

00406fac <_close_r>:
  406fac:	b538      	push	{r3, r4, r5, lr}
  406fae:	4c07      	ldr	r4, [pc, #28]	; (406fcc <_close_r+0x20>)
  406fb0:	2300      	movs	r3, #0
  406fb2:	4605      	mov	r5, r0
  406fb4:	4608      	mov	r0, r1
  406fb6:	6023      	str	r3, [r4, #0]
  406fb8:	f7f9 feda 	bl	400d70 <_close>
  406fbc:	1c43      	adds	r3, r0, #1
  406fbe:	d000      	beq.n	406fc2 <_close_r+0x16>
  406fc0:	bd38      	pop	{r3, r4, r5, pc}
  406fc2:	6823      	ldr	r3, [r4, #0]
  406fc4:	2b00      	cmp	r3, #0
  406fc6:	d0fb      	beq.n	406fc0 <_close_r+0x14>
  406fc8:	602b      	str	r3, [r5, #0]
  406fca:	bd38      	pop	{r3, r4, r5, pc}
  406fcc:	2001cf84 	.word	0x2001cf84

00406fd0 <_fclose_r>:
  406fd0:	2900      	cmp	r1, #0
  406fd2:	d03d      	beq.n	407050 <_fclose_r+0x80>
  406fd4:	b570      	push	{r4, r5, r6, lr}
  406fd6:	4605      	mov	r5, r0
  406fd8:	460c      	mov	r4, r1
  406fda:	b108      	cbz	r0, 406fe0 <_fclose_r+0x10>
  406fdc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406fde:	b37b      	cbz	r3, 407040 <_fclose_r+0x70>
  406fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406fe4:	b90b      	cbnz	r3, 406fea <_fclose_r+0x1a>
  406fe6:	2000      	movs	r0, #0
  406fe8:	bd70      	pop	{r4, r5, r6, pc}
  406fea:	4628      	mov	r0, r5
  406fec:	4621      	mov	r1, r4
  406fee:	f7fe fc37 	bl	405860 <__sflush_r>
  406ff2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406ff4:	4606      	mov	r6, r0
  406ff6:	b133      	cbz	r3, 407006 <_fclose_r+0x36>
  406ff8:	4628      	mov	r0, r5
  406ffa:	69e1      	ldr	r1, [r4, #28]
  406ffc:	4798      	blx	r3
  406ffe:	2800      	cmp	r0, #0
  407000:	bfb8      	it	lt
  407002:	f04f 36ff 	movlt.w	r6, #4294967295
  407006:	89a3      	ldrh	r3, [r4, #12]
  407008:	061b      	lsls	r3, r3, #24
  40700a:	d41c      	bmi.n	407046 <_fclose_r+0x76>
  40700c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40700e:	b141      	cbz	r1, 407022 <_fclose_r+0x52>
  407010:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407014:	4299      	cmp	r1, r3
  407016:	d002      	beq.n	40701e <_fclose_r+0x4e>
  407018:	4628      	mov	r0, r5
  40701a:	f7fe fe37 	bl	405c8c <_free_r>
  40701e:	2300      	movs	r3, #0
  407020:	6323      	str	r3, [r4, #48]	; 0x30
  407022:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407024:	b121      	cbz	r1, 407030 <_fclose_r+0x60>
  407026:	4628      	mov	r0, r5
  407028:	f7fe fe30 	bl	405c8c <_free_r>
  40702c:	2300      	movs	r3, #0
  40702e:	6463      	str	r3, [r4, #68]	; 0x44
  407030:	f7fe fd5a 	bl	405ae8 <__sfp_lock_acquire>
  407034:	2300      	movs	r3, #0
  407036:	81a3      	strh	r3, [r4, #12]
  407038:	f7fe fd58 	bl	405aec <__sfp_lock_release>
  40703c:	4630      	mov	r0, r6
  40703e:	bd70      	pop	{r4, r5, r6, pc}
  407040:	f7fe fd4c 	bl	405adc <__sinit>
  407044:	e7cc      	b.n	406fe0 <_fclose_r+0x10>
  407046:	4628      	mov	r0, r5
  407048:	6921      	ldr	r1, [r4, #16]
  40704a:	f7fe fe1f 	bl	405c8c <_free_r>
  40704e:	e7dd      	b.n	40700c <_fclose_r+0x3c>
  407050:	2000      	movs	r0, #0
  407052:	4770      	bx	lr

00407054 <_fstat_r>:
  407054:	b538      	push	{r3, r4, r5, lr}
  407056:	4c08      	ldr	r4, [pc, #32]	; (407078 <_fstat_r+0x24>)
  407058:	2300      	movs	r3, #0
  40705a:	4605      	mov	r5, r0
  40705c:	4608      	mov	r0, r1
  40705e:	4611      	mov	r1, r2
  407060:	6023      	str	r3, [r4, #0]
  407062:	f7f9 fe89 	bl	400d78 <_fstat>
  407066:	1c43      	adds	r3, r0, #1
  407068:	d000      	beq.n	40706c <_fstat_r+0x18>
  40706a:	bd38      	pop	{r3, r4, r5, pc}
  40706c:	6823      	ldr	r3, [r4, #0]
  40706e:	2b00      	cmp	r3, #0
  407070:	d0fb      	beq.n	40706a <_fstat_r+0x16>
  407072:	602b      	str	r3, [r5, #0]
  407074:	bd38      	pop	{r3, r4, r5, pc}
  407076:	bf00      	nop
  407078:	2001cf84 	.word	0x2001cf84

0040707c <_isatty_r>:
  40707c:	b538      	push	{r3, r4, r5, lr}
  40707e:	4c07      	ldr	r4, [pc, #28]	; (40709c <_isatty_r+0x20>)
  407080:	2300      	movs	r3, #0
  407082:	4605      	mov	r5, r0
  407084:	4608      	mov	r0, r1
  407086:	6023      	str	r3, [r4, #0]
  407088:	f7f9 fe7c 	bl	400d84 <_isatty>
  40708c:	1c43      	adds	r3, r0, #1
  40708e:	d000      	beq.n	407092 <_isatty_r+0x16>
  407090:	bd38      	pop	{r3, r4, r5, pc}
  407092:	6823      	ldr	r3, [r4, #0]
  407094:	2b00      	cmp	r3, #0
  407096:	d0fb      	beq.n	407090 <_isatty_r+0x14>
  407098:	602b      	str	r3, [r5, #0]
  40709a:	bd38      	pop	{r3, r4, r5, pc}
  40709c:	2001cf84 	.word	0x2001cf84

004070a0 <_lseek_r>:
  4070a0:	b570      	push	{r4, r5, r6, lr}
  4070a2:	4c08      	ldr	r4, [pc, #32]	; (4070c4 <_lseek_r+0x24>)
  4070a4:	4606      	mov	r6, r0
  4070a6:	2500      	movs	r5, #0
  4070a8:	4608      	mov	r0, r1
  4070aa:	4611      	mov	r1, r2
  4070ac:	461a      	mov	r2, r3
  4070ae:	6025      	str	r5, [r4, #0]
  4070b0:	f7f9 fe6a 	bl	400d88 <_lseek>
  4070b4:	1c43      	adds	r3, r0, #1
  4070b6:	d000      	beq.n	4070ba <_lseek_r+0x1a>
  4070b8:	bd70      	pop	{r4, r5, r6, pc}
  4070ba:	6823      	ldr	r3, [r4, #0]
  4070bc:	2b00      	cmp	r3, #0
  4070be:	d0fb      	beq.n	4070b8 <_lseek_r+0x18>
  4070c0:	6033      	str	r3, [r6, #0]
  4070c2:	bd70      	pop	{r4, r5, r6, pc}
  4070c4:	2001cf84 	.word	0x2001cf84

004070c8 <_read_r>:
  4070c8:	b570      	push	{r4, r5, r6, lr}
  4070ca:	4c08      	ldr	r4, [pc, #32]	; (4070ec <_read_r+0x24>)
  4070cc:	4606      	mov	r6, r0
  4070ce:	2500      	movs	r5, #0
  4070d0:	4608      	mov	r0, r1
  4070d2:	4611      	mov	r1, r2
  4070d4:	461a      	mov	r2, r3
  4070d6:	6025      	str	r5, [r4, #0]
  4070d8:	f7f9 f898 	bl	40020c <_read>
  4070dc:	1c43      	adds	r3, r0, #1
  4070de:	d000      	beq.n	4070e2 <_read_r+0x1a>
  4070e0:	bd70      	pop	{r4, r5, r6, pc}
  4070e2:	6823      	ldr	r3, [r4, #0]
  4070e4:	2b00      	cmp	r3, #0
  4070e6:	d0fb      	beq.n	4070e0 <_read_r+0x18>
  4070e8:	6033      	str	r3, [r6, #0]
  4070ea:	bd70      	pop	{r4, r5, r6, pc}
  4070ec:	2001cf84 	.word	0x2001cf84

004070f0 <__aeabi_uldivmod>:
  4070f0:	b953      	cbnz	r3, 407108 <__aeabi_uldivmod+0x18>
  4070f2:	b94a      	cbnz	r2, 407108 <__aeabi_uldivmod+0x18>
  4070f4:	2900      	cmp	r1, #0
  4070f6:	bf08      	it	eq
  4070f8:	2800      	cmpeq	r0, #0
  4070fa:	bf1c      	itt	ne
  4070fc:	f04f 31ff 	movne.w	r1, #4294967295
  407100:	f04f 30ff 	movne.w	r0, #4294967295
  407104:	f000 b83c 	b.w	407180 <__aeabi_idiv0>
  407108:	b082      	sub	sp, #8
  40710a:	46ec      	mov	ip, sp
  40710c:	e92d 5000 	stmdb	sp!, {ip, lr}
  407110:	f000 f81e 	bl	407150 <__gnu_uldivmod_helper>
  407114:	f8dd e004 	ldr.w	lr, [sp, #4]
  407118:	b002      	add	sp, #8
  40711a:	bc0c      	pop	{r2, r3}
  40711c:	4770      	bx	lr
  40711e:	bf00      	nop

00407120 <__gnu_ldivmod_helper>:
  407120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407124:	9c06      	ldr	r4, [sp, #24]
  407126:	4615      	mov	r5, r2
  407128:	4606      	mov	r6, r0
  40712a:	460f      	mov	r7, r1
  40712c:	4698      	mov	r8, r3
  40712e:	f000 f829 	bl	407184 <__divdi3>
  407132:	fb05 f301 	mul.w	r3, r5, r1
  407136:	fb00 3808 	mla	r8, r0, r8, r3
  40713a:	fba5 2300 	umull	r2, r3, r5, r0
  40713e:	1ab2      	subs	r2, r6, r2
  407140:	4443      	add	r3, r8
  407142:	eb67 0303 	sbc.w	r3, r7, r3
  407146:	e9c4 2300 	strd	r2, r3, [r4]
  40714a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40714e:	bf00      	nop

00407150 <__gnu_uldivmod_helper>:
  407150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407154:	9c06      	ldr	r4, [sp, #24]
  407156:	4690      	mov	r8, r2
  407158:	4606      	mov	r6, r0
  40715a:	460f      	mov	r7, r1
  40715c:	461d      	mov	r5, r3
  40715e:	f000 f95f 	bl	407420 <__udivdi3>
  407162:	fb00 f505 	mul.w	r5, r0, r5
  407166:	fba0 2308 	umull	r2, r3, r0, r8
  40716a:	fb08 5501 	mla	r5, r8, r1, r5
  40716e:	1ab2      	subs	r2, r6, r2
  407170:	442b      	add	r3, r5
  407172:	eb67 0303 	sbc.w	r3, r7, r3
  407176:	e9c4 2300 	strd	r2, r3, [r4]
  40717a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40717e:	bf00      	nop

00407180 <__aeabi_idiv0>:
  407180:	4770      	bx	lr
  407182:	bf00      	nop

00407184 <__divdi3>:
  407184:	2900      	cmp	r1, #0
  407186:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40718a:	f2c0 80a6 	blt.w	4072da <__divdi3+0x156>
  40718e:	2600      	movs	r6, #0
  407190:	2b00      	cmp	r3, #0
  407192:	f2c0 809c 	blt.w	4072ce <__divdi3+0x14a>
  407196:	4688      	mov	r8, r1
  407198:	4694      	mov	ip, r2
  40719a:	469e      	mov	lr, r3
  40719c:	4615      	mov	r5, r2
  40719e:	4604      	mov	r4, r0
  4071a0:	460f      	mov	r7, r1
  4071a2:	2b00      	cmp	r3, #0
  4071a4:	d13d      	bne.n	407222 <__divdi3+0x9e>
  4071a6:	428a      	cmp	r2, r1
  4071a8:	d959      	bls.n	40725e <__divdi3+0xda>
  4071aa:	fab2 f382 	clz	r3, r2
  4071ae:	b13b      	cbz	r3, 4071c0 <__divdi3+0x3c>
  4071b0:	f1c3 0220 	rsb	r2, r3, #32
  4071b4:	409f      	lsls	r7, r3
  4071b6:	fa20 f202 	lsr.w	r2, r0, r2
  4071ba:	409d      	lsls	r5, r3
  4071bc:	4317      	orrs	r7, r2
  4071be:	409c      	lsls	r4, r3
  4071c0:	0c29      	lsrs	r1, r5, #16
  4071c2:	0c22      	lsrs	r2, r4, #16
  4071c4:	fbb7 fef1 	udiv	lr, r7, r1
  4071c8:	b2a8      	uxth	r0, r5
  4071ca:	fb01 771e 	mls	r7, r1, lr, r7
  4071ce:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  4071d2:	fb00 f30e 	mul.w	r3, r0, lr
  4071d6:	42bb      	cmp	r3, r7
  4071d8:	d90a      	bls.n	4071f0 <__divdi3+0x6c>
  4071da:	197f      	adds	r7, r7, r5
  4071dc:	f10e 32ff 	add.w	r2, lr, #4294967295
  4071e0:	f080 8105 	bcs.w	4073ee <__divdi3+0x26a>
  4071e4:	42bb      	cmp	r3, r7
  4071e6:	f240 8102 	bls.w	4073ee <__divdi3+0x26a>
  4071ea:	f1ae 0e02 	sub.w	lr, lr, #2
  4071ee:	442f      	add	r7, r5
  4071f0:	1aff      	subs	r7, r7, r3
  4071f2:	b2a4      	uxth	r4, r4
  4071f4:	fbb7 f3f1 	udiv	r3, r7, r1
  4071f8:	fb01 7713 	mls	r7, r1, r3, r7
  4071fc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  407200:	fb00 f003 	mul.w	r0, r0, r3
  407204:	42b8      	cmp	r0, r7
  407206:	d908      	bls.n	40721a <__divdi3+0x96>
  407208:	197f      	adds	r7, r7, r5
  40720a:	f103 32ff 	add.w	r2, r3, #4294967295
  40720e:	f080 80f0 	bcs.w	4073f2 <__divdi3+0x26e>
  407212:	42b8      	cmp	r0, r7
  407214:	f240 80ed 	bls.w	4073f2 <__divdi3+0x26e>
  407218:	3b02      	subs	r3, #2
  40721a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  40721e:	2200      	movs	r2, #0
  407220:	e003      	b.n	40722a <__divdi3+0xa6>
  407222:	428b      	cmp	r3, r1
  407224:	d90f      	bls.n	407246 <__divdi3+0xc2>
  407226:	2200      	movs	r2, #0
  407228:	4613      	mov	r3, r2
  40722a:	1c34      	adds	r4, r6, #0
  40722c:	bf18      	it	ne
  40722e:	2401      	movne	r4, #1
  407230:	4260      	negs	r0, r4
  407232:	f04f 0500 	mov.w	r5, #0
  407236:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40723a:	4058      	eors	r0, r3
  40723c:	4051      	eors	r1, r2
  40723e:	1900      	adds	r0, r0, r4
  407240:	4169      	adcs	r1, r5
  407242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407246:	fab3 f283 	clz	r2, r3
  40724a:	2a00      	cmp	r2, #0
  40724c:	f040 8086 	bne.w	40735c <__divdi3+0x1d8>
  407250:	428b      	cmp	r3, r1
  407252:	d302      	bcc.n	40725a <__divdi3+0xd6>
  407254:	4584      	cmp	ip, r0
  407256:	f200 80db 	bhi.w	407410 <__divdi3+0x28c>
  40725a:	2301      	movs	r3, #1
  40725c:	e7e5      	b.n	40722a <__divdi3+0xa6>
  40725e:	b912      	cbnz	r2, 407266 <__divdi3+0xe2>
  407260:	2301      	movs	r3, #1
  407262:	fbb3 f5f2 	udiv	r5, r3, r2
  407266:	fab5 f085 	clz	r0, r5
  40726a:	2800      	cmp	r0, #0
  40726c:	d13b      	bne.n	4072e6 <__divdi3+0x162>
  40726e:	1b78      	subs	r0, r7, r5
  407270:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  407274:	fa1f fc85 	uxth.w	ip, r5
  407278:	2201      	movs	r2, #1
  40727a:	fbb0 f8fe 	udiv	r8, r0, lr
  40727e:	0c21      	lsrs	r1, r4, #16
  407280:	fb0e 0718 	mls	r7, lr, r8, r0
  407284:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  407288:	fb0c f308 	mul.w	r3, ip, r8
  40728c:	42bb      	cmp	r3, r7
  40728e:	d907      	bls.n	4072a0 <__divdi3+0x11c>
  407290:	197f      	adds	r7, r7, r5
  407292:	f108 31ff 	add.w	r1, r8, #4294967295
  407296:	d202      	bcs.n	40729e <__divdi3+0x11a>
  407298:	42bb      	cmp	r3, r7
  40729a:	f200 80bd 	bhi.w	407418 <__divdi3+0x294>
  40729e:	4688      	mov	r8, r1
  4072a0:	1aff      	subs	r7, r7, r3
  4072a2:	b2a4      	uxth	r4, r4
  4072a4:	fbb7 f3fe 	udiv	r3, r7, lr
  4072a8:	fb0e 7713 	mls	r7, lr, r3, r7
  4072ac:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4072b0:	fb0c fc03 	mul.w	ip, ip, r3
  4072b4:	45bc      	cmp	ip, r7
  4072b6:	d907      	bls.n	4072c8 <__divdi3+0x144>
  4072b8:	197f      	adds	r7, r7, r5
  4072ba:	f103 31ff 	add.w	r1, r3, #4294967295
  4072be:	d202      	bcs.n	4072c6 <__divdi3+0x142>
  4072c0:	45bc      	cmp	ip, r7
  4072c2:	f200 80a7 	bhi.w	407414 <__divdi3+0x290>
  4072c6:	460b      	mov	r3, r1
  4072c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4072cc:	e7ad      	b.n	40722a <__divdi3+0xa6>
  4072ce:	4252      	negs	r2, r2
  4072d0:	ea6f 0606 	mvn.w	r6, r6
  4072d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4072d8:	e75d      	b.n	407196 <__divdi3+0x12>
  4072da:	4240      	negs	r0, r0
  4072dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4072e0:	f04f 36ff 	mov.w	r6, #4294967295
  4072e4:	e754      	b.n	407190 <__divdi3+0xc>
  4072e6:	f1c0 0220 	rsb	r2, r0, #32
  4072ea:	fa24 f102 	lsr.w	r1, r4, r2
  4072ee:	fa07 f300 	lsl.w	r3, r7, r0
  4072f2:	4085      	lsls	r5, r0
  4072f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4072f8:	40d7      	lsrs	r7, r2
  4072fa:	4319      	orrs	r1, r3
  4072fc:	fbb7 f2fe 	udiv	r2, r7, lr
  407300:	0c0b      	lsrs	r3, r1, #16
  407302:	fb0e 7712 	mls	r7, lr, r2, r7
  407306:	fa1f fc85 	uxth.w	ip, r5
  40730a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  40730e:	fb0c f702 	mul.w	r7, ip, r2
  407312:	429f      	cmp	r7, r3
  407314:	fa04 f400 	lsl.w	r4, r4, r0
  407318:	d907      	bls.n	40732a <__divdi3+0x1a6>
  40731a:	195b      	adds	r3, r3, r5
  40731c:	f102 30ff 	add.w	r0, r2, #4294967295
  407320:	d274      	bcs.n	40740c <__divdi3+0x288>
  407322:	429f      	cmp	r7, r3
  407324:	d972      	bls.n	40740c <__divdi3+0x288>
  407326:	3a02      	subs	r2, #2
  407328:	442b      	add	r3, r5
  40732a:	1bdf      	subs	r7, r3, r7
  40732c:	b289      	uxth	r1, r1
  40732e:	fbb7 f8fe 	udiv	r8, r7, lr
  407332:	fb0e 7318 	mls	r3, lr, r8, r7
  407336:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40733a:	fb0c f708 	mul.w	r7, ip, r8
  40733e:	429f      	cmp	r7, r3
  407340:	d908      	bls.n	407354 <__divdi3+0x1d0>
  407342:	195b      	adds	r3, r3, r5
  407344:	f108 31ff 	add.w	r1, r8, #4294967295
  407348:	d25c      	bcs.n	407404 <__divdi3+0x280>
  40734a:	429f      	cmp	r7, r3
  40734c:	d95a      	bls.n	407404 <__divdi3+0x280>
  40734e:	f1a8 0802 	sub.w	r8, r8, #2
  407352:	442b      	add	r3, r5
  407354:	1bd8      	subs	r0, r3, r7
  407356:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40735a:	e78e      	b.n	40727a <__divdi3+0xf6>
  40735c:	f1c2 0320 	rsb	r3, r2, #32
  407360:	fa2c f103 	lsr.w	r1, ip, r3
  407364:	fa0e fe02 	lsl.w	lr, lr, r2
  407368:	fa20 f703 	lsr.w	r7, r0, r3
  40736c:	ea41 0e0e 	orr.w	lr, r1, lr
  407370:	fa08 f002 	lsl.w	r0, r8, r2
  407374:	fa28 f103 	lsr.w	r1, r8, r3
  407378:	ea4f 451e 	mov.w	r5, lr, lsr #16
  40737c:	4338      	orrs	r0, r7
  40737e:	fbb1 f8f5 	udiv	r8, r1, r5
  407382:	0c03      	lsrs	r3, r0, #16
  407384:	fb05 1118 	mls	r1, r5, r8, r1
  407388:	fa1f f78e 	uxth.w	r7, lr
  40738c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  407390:	fb07 f308 	mul.w	r3, r7, r8
  407394:	428b      	cmp	r3, r1
  407396:	fa0c fc02 	lsl.w	ip, ip, r2
  40739a:	d909      	bls.n	4073b0 <__divdi3+0x22c>
  40739c:	eb11 010e 	adds.w	r1, r1, lr
  4073a0:	f108 39ff 	add.w	r9, r8, #4294967295
  4073a4:	d230      	bcs.n	407408 <__divdi3+0x284>
  4073a6:	428b      	cmp	r3, r1
  4073a8:	d92e      	bls.n	407408 <__divdi3+0x284>
  4073aa:	f1a8 0802 	sub.w	r8, r8, #2
  4073ae:	4471      	add	r1, lr
  4073b0:	1ac9      	subs	r1, r1, r3
  4073b2:	b280      	uxth	r0, r0
  4073b4:	fbb1 f3f5 	udiv	r3, r1, r5
  4073b8:	fb05 1113 	mls	r1, r5, r3, r1
  4073bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4073c0:	fb07 f703 	mul.w	r7, r7, r3
  4073c4:	428f      	cmp	r7, r1
  4073c6:	d908      	bls.n	4073da <__divdi3+0x256>
  4073c8:	eb11 010e 	adds.w	r1, r1, lr
  4073cc:	f103 30ff 	add.w	r0, r3, #4294967295
  4073d0:	d216      	bcs.n	407400 <__divdi3+0x27c>
  4073d2:	428f      	cmp	r7, r1
  4073d4:	d914      	bls.n	407400 <__divdi3+0x27c>
  4073d6:	3b02      	subs	r3, #2
  4073d8:	4471      	add	r1, lr
  4073da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4073de:	1bc9      	subs	r1, r1, r7
  4073e0:	fba3 890c 	umull	r8, r9, r3, ip
  4073e4:	4549      	cmp	r1, r9
  4073e6:	d309      	bcc.n	4073fc <__divdi3+0x278>
  4073e8:	d005      	beq.n	4073f6 <__divdi3+0x272>
  4073ea:	2200      	movs	r2, #0
  4073ec:	e71d      	b.n	40722a <__divdi3+0xa6>
  4073ee:	4696      	mov	lr, r2
  4073f0:	e6fe      	b.n	4071f0 <__divdi3+0x6c>
  4073f2:	4613      	mov	r3, r2
  4073f4:	e711      	b.n	40721a <__divdi3+0x96>
  4073f6:	4094      	lsls	r4, r2
  4073f8:	4544      	cmp	r4, r8
  4073fa:	d2f6      	bcs.n	4073ea <__divdi3+0x266>
  4073fc:	3b01      	subs	r3, #1
  4073fe:	e7f4      	b.n	4073ea <__divdi3+0x266>
  407400:	4603      	mov	r3, r0
  407402:	e7ea      	b.n	4073da <__divdi3+0x256>
  407404:	4688      	mov	r8, r1
  407406:	e7a5      	b.n	407354 <__divdi3+0x1d0>
  407408:	46c8      	mov	r8, r9
  40740a:	e7d1      	b.n	4073b0 <__divdi3+0x22c>
  40740c:	4602      	mov	r2, r0
  40740e:	e78c      	b.n	40732a <__divdi3+0x1a6>
  407410:	4613      	mov	r3, r2
  407412:	e70a      	b.n	40722a <__divdi3+0xa6>
  407414:	3b02      	subs	r3, #2
  407416:	e757      	b.n	4072c8 <__divdi3+0x144>
  407418:	f1a8 0802 	sub.w	r8, r8, #2
  40741c:	442f      	add	r7, r5
  40741e:	e73f      	b.n	4072a0 <__divdi3+0x11c>

00407420 <__udivdi3>:
  407420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407424:	2b00      	cmp	r3, #0
  407426:	d144      	bne.n	4074b2 <__udivdi3+0x92>
  407428:	428a      	cmp	r2, r1
  40742a:	4615      	mov	r5, r2
  40742c:	4604      	mov	r4, r0
  40742e:	d94f      	bls.n	4074d0 <__udivdi3+0xb0>
  407430:	fab2 f782 	clz	r7, r2
  407434:	460e      	mov	r6, r1
  407436:	b14f      	cbz	r7, 40744c <__udivdi3+0x2c>
  407438:	f1c7 0320 	rsb	r3, r7, #32
  40743c:	40b9      	lsls	r1, r7
  40743e:	fa20 f603 	lsr.w	r6, r0, r3
  407442:	fa02 f507 	lsl.w	r5, r2, r7
  407446:	430e      	orrs	r6, r1
  407448:	fa00 f407 	lsl.w	r4, r0, r7
  40744c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  407450:	0c23      	lsrs	r3, r4, #16
  407452:	fbb6 f0fe 	udiv	r0, r6, lr
  407456:	b2af      	uxth	r7, r5
  407458:	fb0e 6110 	mls	r1, lr, r0, r6
  40745c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407460:	fb07 f100 	mul.w	r1, r7, r0
  407464:	4299      	cmp	r1, r3
  407466:	d909      	bls.n	40747c <__udivdi3+0x5c>
  407468:	195b      	adds	r3, r3, r5
  40746a:	f100 32ff 	add.w	r2, r0, #4294967295
  40746e:	f080 80ec 	bcs.w	40764a <__udivdi3+0x22a>
  407472:	4299      	cmp	r1, r3
  407474:	f240 80e9 	bls.w	40764a <__udivdi3+0x22a>
  407478:	3802      	subs	r0, #2
  40747a:	442b      	add	r3, r5
  40747c:	1a5a      	subs	r2, r3, r1
  40747e:	b2a4      	uxth	r4, r4
  407480:	fbb2 f3fe 	udiv	r3, r2, lr
  407484:	fb0e 2213 	mls	r2, lr, r3, r2
  407488:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40748c:	fb07 f703 	mul.w	r7, r7, r3
  407490:	4297      	cmp	r7, r2
  407492:	d908      	bls.n	4074a6 <__udivdi3+0x86>
  407494:	1952      	adds	r2, r2, r5
  407496:	f103 31ff 	add.w	r1, r3, #4294967295
  40749a:	f080 80d8 	bcs.w	40764e <__udivdi3+0x22e>
  40749e:	4297      	cmp	r7, r2
  4074a0:	f240 80d5 	bls.w	40764e <__udivdi3+0x22e>
  4074a4:	3b02      	subs	r3, #2
  4074a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4074aa:	2600      	movs	r6, #0
  4074ac:	4631      	mov	r1, r6
  4074ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4074b2:	428b      	cmp	r3, r1
  4074b4:	d847      	bhi.n	407546 <__udivdi3+0x126>
  4074b6:	fab3 f683 	clz	r6, r3
  4074ba:	2e00      	cmp	r6, #0
  4074bc:	d148      	bne.n	407550 <__udivdi3+0x130>
  4074be:	428b      	cmp	r3, r1
  4074c0:	d302      	bcc.n	4074c8 <__udivdi3+0xa8>
  4074c2:	4282      	cmp	r2, r0
  4074c4:	f200 80cd 	bhi.w	407662 <__udivdi3+0x242>
  4074c8:	2001      	movs	r0, #1
  4074ca:	4631      	mov	r1, r6
  4074cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4074d0:	b912      	cbnz	r2, 4074d8 <__udivdi3+0xb8>
  4074d2:	2501      	movs	r5, #1
  4074d4:	fbb5 f5f2 	udiv	r5, r5, r2
  4074d8:	fab5 f885 	clz	r8, r5
  4074dc:	f1b8 0f00 	cmp.w	r8, #0
  4074e0:	d177      	bne.n	4075d2 <__udivdi3+0x1b2>
  4074e2:	1b4a      	subs	r2, r1, r5
  4074e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4074e8:	b2af      	uxth	r7, r5
  4074ea:	2601      	movs	r6, #1
  4074ec:	fbb2 f0fe 	udiv	r0, r2, lr
  4074f0:	0c23      	lsrs	r3, r4, #16
  4074f2:	fb0e 2110 	mls	r1, lr, r0, r2
  4074f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  4074fa:	fb07 f300 	mul.w	r3, r7, r0
  4074fe:	428b      	cmp	r3, r1
  407500:	d907      	bls.n	407512 <__udivdi3+0xf2>
  407502:	1949      	adds	r1, r1, r5
  407504:	f100 32ff 	add.w	r2, r0, #4294967295
  407508:	d202      	bcs.n	407510 <__udivdi3+0xf0>
  40750a:	428b      	cmp	r3, r1
  40750c:	f200 80ba 	bhi.w	407684 <__udivdi3+0x264>
  407510:	4610      	mov	r0, r2
  407512:	1ac9      	subs	r1, r1, r3
  407514:	b2a4      	uxth	r4, r4
  407516:	fbb1 f3fe 	udiv	r3, r1, lr
  40751a:	fb0e 1113 	mls	r1, lr, r3, r1
  40751e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  407522:	fb07 f703 	mul.w	r7, r7, r3
  407526:	42a7      	cmp	r7, r4
  407528:	d908      	bls.n	40753c <__udivdi3+0x11c>
  40752a:	1964      	adds	r4, r4, r5
  40752c:	f103 32ff 	add.w	r2, r3, #4294967295
  407530:	f080 808f 	bcs.w	407652 <__udivdi3+0x232>
  407534:	42a7      	cmp	r7, r4
  407536:	f240 808c 	bls.w	407652 <__udivdi3+0x232>
  40753a:	3b02      	subs	r3, #2
  40753c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407540:	4631      	mov	r1, r6
  407542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407546:	2600      	movs	r6, #0
  407548:	4630      	mov	r0, r6
  40754a:	4631      	mov	r1, r6
  40754c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407550:	f1c6 0420 	rsb	r4, r6, #32
  407554:	fa22 f504 	lsr.w	r5, r2, r4
  407558:	40b3      	lsls	r3, r6
  40755a:	432b      	orrs	r3, r5
  40755c:	fa20 fc04 	lsr.w	ip, r0, r4
  407560:	fa01 f706 	lsl.w	r7, r1, r6
  407564:	fa21 f504 	lsr.w	r5, r1, r4
  407568:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40756c:	ea4c 0707 	orr.w	r7, ip, r7
  407570:	fbb5 f8fe 	udiv	r8, r5, lr
  407574:	0c39      	lsrs	r1, r7, #16
  407576:	fb0e 5518 	mls	r5, lr, r8, r5
  40757a:	fa1f fc83 	uxth.w	ip, r3
  40757e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  407582:	fb0c f108 	mul.w	r1, ip, r8
  407586:	42a9      	cmp	r1, r5
  407588:	fa02 f206 	lsl.w	r2, r2, r6
  40758c:	d904      	bls.n	407598 <__udivdi3+0x178>
  40758e:	18ed      	adds	r5, r5, r3
  407590:	f108 34ff 	add.w	r4, r8, #4294967295
  407594:	d367      	bcc.n	407666 <__udivdi3+0x246>
  407596:	46a0      	mov	r8, r4
  407598:	1a6d      	subs	r5, r5, r1
  40759a:	b2bf      	uxth	r7, r7
  40759c:	fbb5 f4fe 	udiv	r4, r5, lr
  4075a0:	fb0e 5514 	mls	r5, lr, r4, r5
  4075a4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  4075a8:	fb0c fc04 	mul.w	ip, ip, r4
  4075ac:	458c      	cmp	ip, r1
  4075ae:	d904      	bls.n	4075ba <__udivdi3+0x19a>
  4075b0:	18c9      	adds	r1, r1, r3
  4075b2:	f104 35ff 	add.w	r5, r4, #4294967295
  4075b6:	d35c      	bcc.n	407672 <__udivdi3+0x252>
  4075b8:	462c      	mov	r4, r5
  4075ba:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  4075be:	ebcc 0101 	rsb	r1, ip, r1
  4075c2:	fba4 2302 	umull	r2, r3, r4, r2
  4075c6:	4299      	cmp	r1, r3
  4075c8:	d348      	bcc.n	40765c <__udivdi3+0x23c>
  4075ca:	d044      	beq.n	407656 <__udivdi3+0x236>
  4075cc:	4620      	mov	r0, r4
  4075ce:	2600      	movs	r6, #0
  4075d0:	e76c      	b.n	4074ac <__udivdi3+0x8c>
  4075d2:	f1c8 0420 	rsb	r4, r8, #32
  4075d6:	fa01 f308 	lsl.w	r3, r1, r8
  4075da:	fa05 f508 	lsl.w	r5, r5, r8
  4075de:	fa20 f704 	lsr.w	r7, r0, r4
  4075e2:	40e1      	lsrs	r1, r4
  4075e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4075e8:	431f      	orrs	r7, r3
  4075ea:	fbb1 f6fe 	udiv	r6, r1, lr
  4075ee:	0c3a      	lsrs	r2, r7, #16
  4075f0:	fb0e 1116 	mls	r1, lr, r6, r1
  4075f4:	fa1f fc85 	uxth.w	ip, r5
  4075f8:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  4075fc:	fb0c f206 	mul.w	r2, ip, r6
  407600:	429a      	cmp	r2, r3
  407602:	fa00 f408 	lsl.w	r4, r0, r8
  407606:	d907      	bls.n	407618 <__udivdi3+0x1f8>
  407608:	195b      	adds	r3, r3, r5
  40760a:	f106 31ff 	add.w	r1, r6, #4294967295
  40760e:	d237      	bcs.n	407680 <__udivdi3+0x260>
  407610:	429a      	cmp	r2, r3
  407612:	d935      	bls.n	407680 <__udivdi3+0x260>
  407614:	3e02      	subs	r6, #2
  407616:	442b      	add	r3, r5
  407618:	1a9b      	subs	r3, r3, r2
  40761a:	b2bf      	uxth	r7, r7
  40761c:	fbb3 f0fe 	udiv	r0, r3, lr
  407620:	fb0e 3310 	mls	r3, lr, r0, r3
  407624:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  407628:	fb0c f100 	mul.w	r1, ip, r0
  40762c:	4299      	cmp	r1, r3
  40762e:	d907      	bls.n	407640 <__udivdi3+0x220>
  407630:	195b      	adds	r3, r3, r5
  407632:	f100 32ff 	add.w	r2, r0, #4294967295
  407636:	d221      	bcs.n	40767c <__udivdi3+0x25c>
  407638:	4299      	cmp	r1, r3
  40763a:	d91f      	bls.n	40767c <__udivdi3+0x25c>
  40763c:	3802      	subs	r0, #2
  40763e:	442b      	add	r3, r5
  407640:	1a5a      	subs	r2, r3, r1
  407642:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  407646:	4667      	mov	r7, ip
  407648:	e750      	b.n	4074ec <__udivdi3+0xcc>
  40764a:	4610      	mov	r0, r2
  40764c:	e716      	b.n	40747c <__udivdi3+0x5c>
  40764e:	460b      	mov	r3, r1
  407650:	e729      	b.n	4074a6 <__udivdi3+0x86>
  407652:	4613      	mov	r3, r2
  407654:	e772      	b.n	40753c <__udivdi3+0x11c>
  407656:	40b0      	lsls	r0, r6
  407658:	4290      	cmp	r0, r2
  40765a:	d2b7      	bcs.n	4075cc <__udivdi3+0x1ac>
  40765c:	1e60      	subs	r0, r4, #1
  40765e:	2600      	movs	r6, #0
  407660:	e724      	b.n	4074ac <__udivdi3+0x8c>
  407662:	4630      	mov	r0, r6
  407664:	e722      	b.n	4074ac <__udivdi3+0x8c>
  407666:	42a9      	cmp	r1, r5
  407668:	d995      	bls.n	407596 <__udivdi3+0x176>
  40766a:	f1a8 0802 	sub.w	r8, r8, #2
  40766e:	441d      	add	r5, r3
  407670:	e792      	b.n	407598 <__udivdi3+0x178>
  407672:	458c      	cmp	ip, r1
  407674:	d9a0      	bls.n	4075b8 <__udivdi3+0x198>
  407676:	3c02      	subs	r4, #2
  407678:	4419      	add	r1, r3
  40767a:	e79e      	b.n	4075ba <__udivdi3+0x19a>
  40767c:	4610      	mov	r0, r2
  40767e:	e7df      	b.n	407640 <__udivdi3+0x220>
  407680:	460e      	mov	r6, r1
  407682:	e7c9      	b.n	407618 <__udivdi3+0x1f8>
  407684:	3802      	subs	r0, #2
  407686:	4429      	add	r1, r5
  407688:	e743      	b.n	407512 <__udivdi3+0xf2>
  40768a:	bf00      	nop
  40768c:	732f2e2e 	.word	0x732f2e2e
  407690:	412f6372 	.word	0x412f6372
  407694:	742f4653 	.word	0x742f4653
  407698:	64726968 	.word	0x64726968
  40769c:	74726170 	.word	0x74726170
  4076a0:	72662f79 	.word	0x72662f79
  4076a4:	74726565 	.word	0x74726565
  4076a8:	662f736f 	.word	0x662f736f
  4076ac:	72656572 	.word	0x72656572
  4076b0:	2d736f74 	.word	0x2d736f74
  4076b4:	2e332e37 	.word	0x2e332e37
  4076b8:	6f732f30 	.word	0x6f732f30
  4076bc:	65637275 	.word	0x65637275
  4076c0:	6575712f 	.word	0x6575712f
  4076c4:	632e6575 	.word	0x632e6575
  4076c8:	00000000 	.word	0x00000000

004076cc <ucExpectedStackBytes.6044>:
  4076cc:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
  4076dc:	a5a5a5a5 09097325 25096325 75250975     ....%s..%c.%u.%u
  4076ec:	0d752509 0000000a 09097325 30090930     .%u.....%s..0..0
  4076fc:	0a0d2525 00000000 09097325 09097525     %%......%s..%u..
  40770c:	25257525 00000a0d 09097325 09097525     %u%%....%s..%u..
  40771c:	2525313c 00000a0d 732f2e2e 412f6372     <1%%....../src/A
  40772c:	742f4653 64726968 74726170 72662f79     SF/thirdparty/fr
  40773c:	74726565 662f736f 72656572 2d736f74     eertos/freertos-
  40774c:	2e332e37 6f732f30 65637275 7361742f     7.3.0/source/tas
  40775c:	632e736b 00000000 454c4449 00000000     ks.c....IDLE....
  40776c:	20726d54 00637653 732f2e2e 412f6372     Tmr Svc.../src/A
  40777c:	742f4653 64726968 74726170 72662f79     SF/thirdparty/fr
  40778c:	74726565 662f736f 72656572 2d736f74     eertos/freertos-
  40779c:	2e332e37 6f732f30 65637275 6d69742f     7.3.0/source/tim
  4077ac:	2e737265 00000063 67697254 20726567     ers.c...Trigger 
  4077bc:	616d6573 726f6870 6f662065 65732072     semaphore for se
  4077cc:	726f736e 2e2e2e32 2e2e2e2e 2e2e2e2e     nsor2...........
  4077dc:	2e2e2e2e 0d2e2e2e 0000000a 20746547     ............Get 
  4077ec:	61746164 6f726620 6573206d 726f736e     data from sensor
  4077fc:	2e2e2e2e 2e2e2e2e 64252e2e 00000a0d     ..........%d....
  40780c:	28643625 3a296425 00000000 58323025     %6d(%d):....%02X
  40781c:	00000020 72656874 69206f6d 6567616d      ...thermo image
  40782c:	0000203a 6c696146 74206465 7263206f     : ..Failed to cr
  40783c:	65746165 6d655320 6f687061 203a6572     eate Semaphore: 
  40784c:	72617473 65735474 726f736e 636f7250     startTsensorProc
  40785c:	69737365 0d20676e 0000000a 69545454     essing .....TTTi
  40786c:	0072656d 6c696146 74206465 7263206f     mer.Failed to cr
  40787c:	65746165 73547820 6f736e65 6d6f4372     eate xTsensorCom
  40788c:	6d69546d 74756f65 656d6954 0a0d2072     mTimeoutTimer ..
  40789c:	00000000 6d695451 00007265 6c696146     ....QTimer..Fail
  4078ac:	74206465 7263206f 65746165 73547820     ed to create xTs
  4078bc:	6f736e65 74614472 65755161 69547972     ensorDataQueryTi
  4078cc:	2072656d 00000a0d 50534e54 656d6954     mer ....TNSPTime
  4078dc:	00000072 33323130 37363534 62613938     r...0123456789ab
  4078ec:	66656463 00000000 29642528 29732528     cdef....(%d)(%s)
  4078fc:	00000020 65746e65 6f632072 6769666e      ...enter config
  40790c:	646f6d20 000a0d65 66726570 206d726f      mode...perform 
  40791c:	666e6f63 6d206769 0d65646f 0000000a     config mode.....
  40792c:	66726570 206d726f 74736574 6d6f6320     perform test com
  40793c:	646e616d 646f6d20 000a0d65 69666957     mand mode...Wifi
  40794c:	63657220 65766965 74616420 69742061      receive data ti
  40795c:	756f656d 2e2e2e74 2e2e2e2e 2e2e2e2e     meout...........
  40796c:	000a0d2e 70747468 2f2f3a73 752d3373     ....https://s3-u
  40797c:	65772d73 312d7473 616d612e 616e6f7a     s-west-1.amazona
  40798c:	632e7377 6d2f6d6f 73692e6f 6c69616d     ws.com/mo.ismail
  40799c:	6d326d2f 61746f5f 3061335f 6e69622e     /m2m_ota_3a0.bin
  4079ac:	00000000 69726553 49206c61 6425284e     ....Serial IN(%d
  4079bc:	25203a29 000a0d73 61766e49 2064696c     ): %s...Invalid 
  4079cc:	64616568 72207265 69656365 20646576     header received 
  4079dc:	25783028 0d2e2978 0000000a 61766e49     (0x%x)......Inva
  4079ec:	2064696c 2c435243 63655220 65766965     lid CRC, Receive
  4079fc:	52432064 78302843 2c297825 6c614320     d CRC(0x%x), Cal
  407a0c:	616c7563 20646574 28435243 78257830     culated CRC(0x%x
  407a1c:	0a0d2e29 00000000 462d6957 6f4d2069     ).......Wi-Fi Mo
  407a2c:	656c7564 61655220 0d217964 0000000a     dule Ready!.....
  407a3c:	65636552 20657669 20746567 706d6574     Receive get temp
  407a4c:	74617265 20657275 6d6d6f63 2e646e61     erature command.
  407a5c:	00000a0d 65636552 20657669 20746567     ....Receive get 
  407a6c:	70616e73 746f6873 6d6f6320 646e616d     snapshot command
  407a7c:	000a0d2e 69666957 646f6d20 20656c75     ....Wifi module 
  407a8c:	6e6e6f63 20746365 4a206f74 65732044     connect to JD se
  407a9c:	72657672 000a0d2e 6e6e6f43 20746365     rver....Connect 
  407aac:	52206f74 746f6d65 65532065 72657672     to Remote Server
  407abc:	2e4b4f20 00000a0d 6e6e6f43 69746365      OK.....Connecti
  407acc:	62206e6f 68746165 74726165 000a0d2e     on beatheart....
  407adc:	61647055 44206574 20617461 0d2e4b4f     Update Data OK..
  407aec:	0000000a 65736552 6f742074 63614620     ....Reset to Fac
  407afc:	79726f74 2077654e 0d2e4b4f 0000000a     toryNew OK......
  407b0c:	44495555 53455220 4b4f2050 000a0d2e     UUID RESP OK....
  407b1c:	44495555 53455220 72452050 2e726f72     UUID RESP Error.
  407b2c:	00000a0d 72617453 6e732074 65666669     ....Start sniffe
  407b3c:	6f6d2072 2e2e6564 000a0d2e 20746f47     r mode......Got 
  407b4c:	69666977 69737320 25203a64 70202c73     wifi ssid: %s, p
  407b5c:	203a6b73 0a0d7325 00000000 72617453     sk: %s......Star
  407b6c:	69772074 63206966 656e6e6f 73207463     t wifi connect s
  407b7c:	28646973 2c297325 6b737020 29732528     sid(%s), psk(%s)
  407b8c:	000a0d2e 74726f43 41207375 75205050     ....Cortus APP u
  407b9c:	74616470 4b4f2065 000a0d2e 6f727245     pdate OK....Erro
  407bac:	4f203a72 20554154 61766e69 2064696c     r: OTAU invalid 
  407bbc:	2e6c7275 00000a0d 6f727245 4f203a72     url.....Error: O
  407bcc:	20554154 6e776f64 64616f6c 69616620     TAU download fai
  407bdc:	2e64656c 00000a0d 6f727245 53203a72     led.....Error: S
  407bec:	63746977 544f2068 69205541 6567616d     witch OTAU image
  407bfc:	69616620 2e64656c 00000a0d 69466957      failed.....WiFi
  407c0c:	72696620 7261776d 70752065 65746164      firmware update
  407c1c:	2e4b4f20 00000a0d 20746553 20707061      OK.....Set app 
  407c2c:	7561746f 6c727520 2e4b4f20 00000a0d     otau url OK.....
  407c3c:	20746553 69666977 72696620 7261776d     Set wifi firmwar
  407c4c:	746f2065 75207561 4f206c72 0a0d2e4b     e otau url OK...
  407c5c:	00000000 462d6957 6f632069 63656e6e     ....Wi-Fi connec
  407c6c:	6f742074 6f6c4320 4f206475 000a0d4b     t to Cloud OK...
  407c7c:	462d6957 65722069 6e727574 74656720     Wi-Fi return get
  407c8c:	72617520 66632074 4b4f2067 00000a0d      uart cfg OK....
  407c9c:	20504455 6b636170 6a207465 636e6f73     UDP packet jsonc
  407cac:	72746e6f 70206c6f 656b6361 0a0d2e74     ontrol packet...
  407cbc:	00000000 20504455 6b636170 75207465     ....UDP packet u
  407ccc:	6f6e6b6e 70206e77 656b6361 0a0d2e74     nknown packet...
  407cdc:	00000000 6f727245 6f203a72 6f207475     ....Error: out o
  407cec:	656d2066 79726f6d 000a0d2e 63205041     f memory....AP c
  407cfc:	46206e61 646e756f 000a0d2e 6e205041     an Found....AP n
  407d0c:	4620746f 646e756f 000a0d2e 6f727245     ot Found....Erro
  407d1c:	55203a72 20545241 656d6974 2e74756f     r: UART timeout.
  407d2c:	00000a0d 75736e55 726f7070 20646574     ....Unsupported 
  407d3c:	6d6d6f63 28646e61 2e296425 00000a0d     command(%d).....
  407d4c:	6e6f4378 54676966 72656d69 00000000     xConfigTimer....
  407d5c:	6e6f4378 54676966 72656d69 65726320     xConfigTimer cre
  407d6c:	20657461 6c696166 0d2e6465 0000000a     ate failed......
  407d7c:	64654c78 656d6954 00000072 64654c78     xLedTimer...xLed
  407d8c:	65646f4d 656d6954 72632072 65746165     ModeTimer create
  407d9c:	69616620 2e64656c 00000a0d 69726553      failed.....Seri
  407dac:	51206c61 65756575 206e4920 61657263     al Queue In crea
  407dbc:	66206574 656c6961 000a0d64 69726553     te failed...Seri
  407dcc:	51206c61 65756575 74754f20 65726320     al Queue Out cre
  407ddc:	20657461 6c696166 0a0d6465 00000000     ate failed......
  407dec:	69666977 006e695f 69726553 4f206c61     wifi_in.Serial O
  407dfc:	25285455 203a2964 0a0d7325 00000000     UT(%d): %s......
  407e0c:	74412d2d 206c656d 20353547 20546f49     --Atmel G55 IoT 
  407e1c:	0a0d2d2d 53202d2d 35474d41 50585f35     --..-- SAMG55_XP
  407e2c:	4e49414c 505f4445 2d204f52 2d0a0d2d     LAINED_PRO --..-
  407e3c:	6f43202d 6c69706d 203a6465 2074634f     - Compiled: Oct 
  407e4c:	32203031 20363130 323a3131 30303a37     10 2016 11:27:00
  407e5c:	0d2d2d20 00000000 69666977 7361745f      --.....wifi_tas
  407e6c:	0000006b 736e6573 745f726f 006b7361     k...sensor_task.
  407e7c:	00000043                                C...

00407e80 <_global_impure_ptr>:
  407e80:	20000038                                8.. 

00407e84 <zeroes.6869>:
  407e84:	30303030 30303030 30303030 30303030     0000000000000000
  407e94:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  407ea4:	00000000 6c756e28 0000296c              ....(null)..

00407eb0 <blanks.6868>:
  407eb0:	20202020 20202020 20202020 20202020                     

00407ec0 <_init>:
  407ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407ec2:	bf00      	nop
  407ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407ec6:	bc08      	pop	{r3}
  407ec8:	469e      	mov	lr, r3
  407eca:	4770      	bx	lr

00407ecc <__init_array_start>:
  407ecc:	00405841 	.word	0x00405841

00407ed0 <__frame_dummy_init_array_entry>:
  407ed0:	0040016d                                m.@.

00407ed4 <_fini>:
  407ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407ed6:	bf00      	nop
  407ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407eda:	bc08      	pop	{r3}
  407edc:	469e      	mov	lr, r3
  407ede:	4770      	bx	lr

00407ee0 <__fini_array_start>:
  407ee0:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....

20000010 <SystemCoreClock>:
20000010:	1200 007a                                   ..z.

20000014 <uxCriticalNesting>:
20000014:	aaaa aaaa                                   ....

20000018 <xFreeBytesRemaining>:
20000018:	8000 0001                                   ....

2000001c <xNextTaskUnblockTime>:
2000001c:	ffff ffff                                   ....

20000020 <led_blinking_mode>:
20000020:	0002 0000                                   ....

20000024 <resp_out_data.9116>:
20000024:	c500 2001                                   ... 

20000028 <resp_out_data.9164>:
20000028:	c578 2001                                   x.. 

2000002c <resp_out_data.9107>:
2000002c:	c544 2001                                   D.. 

20000030 <button_mode.9232>:
20000030:	0001 0000 0000 0000                         ........

20000038 <impure_data>:
20000038:	0000 0000 0324 2000 038c 2000 03f4 2000     ....$.. ... ... 
	...
2000006c:	7e7c 0040 0000 0000 0000 0000 0000 0000     |~@.............
	...
200000e0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000f0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000460 <_impure_ptr>:
20000460:	0038 2000                                   8.. 

20000464 <lc_ctype_charset>:
20000464:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000484 <__mb_cur_max>:
20000484:	0001 0000                                   ....

20000488 <__malloc_av_>:
	...
20000490:	0488 2000 0488 2000 0490 2000 0490 2000     ... ... ... ... 
200004a0:	0498 2000 0498 2000 04a0 2000 04a0 2000     ... ... ... ... 
200004b0:	04a8 2000 04a8 2000 04b0 2000 04b0 2000     ... ... ... ... 
200004c0:	04b8 2000 04b8 2000 04c0 2000 04c0 2000     ... ... ... ... 
200004d0:	04c8 2000 04c8 2000 04d0 2000 04d0 2000     ... ... ... ... 
200004e0:	04d8 2000 04d8 2000 04e0 2000 04e0 2000     ... ... ... ... 
200004f0:	04e8 2000 04e8 2000 04f0 2000 04f0 2000     ... ... ... ... 
20000500:	04f8 2000 04f8 2000 0500 2000 0500 2000     ... ... ... ... 
20000510:	0508 2000 0508 2000 0510 2000 0510 2000     ... ... ... ... 
20000520:	0518 2000 0518 2000 0520 2000 0520 2000     ... ...  ..  .. 
20000530:	0528 2000 0528 2000 0530 2000 0530 2000     (.. (.. 0.. 0.. 
20000540:	0538 2000 0538 2000 0540 2000 0540 2000     8.. 8.. @.. @.. 
20000550:	0548 2000 0548 2000 0550 2000 0550 2000     H.. H.. P.. P.. 
20000560:	0558 2000 0558 2000 0560 2000 0560 2000     X.. X.. `.. `.. 
20000570:	0568 2000 0568 2000 0570 2000 0570 2000     h.. h.. p.. p.. 
20000580:	0578 2000 0578 2000 0580 2000 0580 2000     x.. x.. ... ... 
20000590:	0588 2000 0588 2000 0590 2000 0590 2000     ... ... ... ... 
200005a0:	0598 2000 0598 2000 05a0 2000 05a0 2000     ... ... ... ... 
200005b0:	05a8 2000 05a8 2000 05b0 2000 05b0 2000     ... ... ... ... 
200005c0:	05b8 2000 05b8 2000 05c0 2000 05c0 2000     ... ... ... ... 
200005d0:	05c8 2000 05c8 2000 05d0 2000 05d0 2000     ... ... ... ... 
200005e0:	05d8 2000 05d8 2000 05e0 2000 05e0 2000     ... ... ... ... 
200005f0:	05e8 2000 05e8 2000 05f0 2000 05f0 2000     ... ... ... ... 
20000600:	05f8 2000 05f8 2000 0600 2000 0600 2000     ... ... ... ... 
20000610:	0608 2000 0608 2000 0610 2000 0610 2000     ... ... ... ... 
20000620:	0618 2000 0618 2000 0620 2000 0620 2000     ... ...  ..  .. 
20000630:	0628 2000 0628 2000 0630 2000 0630 2000     (.. (.. 0.. 0.. 
20000640:	0638 2000 0638 2000 0640 2000 0640 2000     8.. 8.. @.. @.. 
20000650:	0648 2000 0648 2000 0650 2000 0650 2000     H.. H.. P.. P.. 
20000660:	0658 2000 0658 2000 0660 2000 0660 2000     X.. X.. `.. `.. 
20000670:	0668 2000 0668 2000 0670 2000 0670 2000     h.. h.. p.. p.. 
20000680:	0678 2000 0678 2000 0680 2000 0680 2000     x.. x.. ... ... 
20000690:	0688 2000 0688 2000 0690 2000 0690 2000     ... ... ... ... 
200006a0:	0698 2000 0698 2000 06a0 2000 06a0 2000     ... ... ... ... 
200006b0:	06a8 2000 06a8 2000 06b0 2000 06b0 2000     ... ... ... ... 
200006c0:	06b8 2000 06b8 2000 06c0 2000 06c0 2000     ... ... ... ... 
200006d0:	06c8 2000 06c8 2000 06d0 2000 06d0 2000     ... ... ... ... 
200006e0:	06d8 2000 06d8 2000 06e0 2000 06e0 2000     ... ... ... ... 
200006f0:	06e8 2000 06e8 2000 06f0 2000 06f0 2000     ... ... ... ... 
20000700:	06f8 2000 06f8 2000 0700 2000 0700 2000     ... ... ... ... 
20000710:	0708 2000 0708 2000 0710 2000 0710 2000     ... ... ... ... 
20000720:	0718 2000 0718 2000 0720 2000 0720 2000     ... ...  ..  .. 
20000730:	0728 2000 0728 2000 0730 2000 0730 2000     (.. (.. 0.. 0.. 
20000740:	0738 2000 0738 2000 0740 2000 0740 2000     8.. 8.. @.. @.. 
20000750:	0748 2000 0748 2000 0750 2000 0750 2000     H.. H.. P.. P.. 
20000760:	0758 2000 0758 2000 0760 2000 0760 2000     X.. X.. `.. `.. 
20000770:	0768 2000 0768 2000 0770 2000 0770 2000     h.. h.. p.. p.. 
20000780:	0778 2000 0778 2000 0780 2000 0780 2000     x.. x.. ... ... 
20000790:	0788 2000 0788 2000 0790 2000 0790 2000     ... ... ... ... 
200007a0:	0798 2000 0798 2000 07a0 2000 07a0 2000     ... ... ... ... 
200007b0:	07a8 2000 07a8 2000 07b0 2000 07b0 2000     ... ... ... ... 
200007c0:	07b8 2000 07b8 2000 07c0 2000 07c0 2000     ... ... ... ... 
200007d0:	07c8 2000 07c8 2000 07d0 2000 07d0 2000     ... ... ... ... 
200007e0:	07d8 2000 07d8 2000 07e0 2000 07e0 2000     ... ... ... ... 
200007f0:	07e8 2000 07e8 2000 07f0 2000 07f0 2000     ... ... ... ... 
20000800:	07f8 2000 07f8 2000 0800 2000 0800 2000     ... ... ... ... 
20000810:	0808 2000 0808 2000 0810 2000 0810 2000     ... ... ... ... 
20000820:	0818 2000 0818 2000 0820 2000 0820 2000     ... ...  ..  .. 
20000830:	0828 2000 0828 2000 0830 2000 0830 2000     (.. (.. 0.. 0.. 
20000840:	0838 2000 0838 2000 0840 2000 0840 2000     8.. 8.. @.. @.. 
20000850:	0848 2000 0848 2000 0850 2000 0850 2000     H.. H.. P.. P.. 
20000860:	0858 2000 0858 2000 0860 2000 0860 2000     X.. X.. `.. `.. 
20000870:	0868 2000 0868 2000 0870 2000 0870 2000     h.. h.. p.. p.. 
20000880:	0878 2000 0878 2000 0880 2000 0880 2000     x.. x.. ... ... 

20000890 <__malloc_trim_threshold>:
20000890:	0000 0002                                   ....

20000894 <__malloc_sbrk_base>:
20000894:	ffff ffff                                   ....

20000898 <__wctomb>:
20000898:	6ec5 0040                                   .n@.
