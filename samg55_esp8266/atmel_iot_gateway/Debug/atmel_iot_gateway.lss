
atmel_iot_gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007df4  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407df4  00407df4  0000fdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000894  20000000  00407dfc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0001a1d0  20000898  00408698  00010898  2**3
                  ALLOC
  4 .stack        00003000  2001aa68  00422868  00010898  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00010894  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000108c2  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015f11  00000000  00000000  0001091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000037ff  00000000  00000000  0002682e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009278  00000000  00000000  0002a02d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000de0  00000000  00000000  000332a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d08  00000000  00000000  00034085  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a4b3  00000000  00000000  00034d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000117b6  00000000  00000000  0003f240  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00058f29  00000000  00000000  000509f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002db8  00000000  00000000  000a9920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2001da68 	.word	0x2001da68
  400004:	00400aa5 	.word	0x00400aa5
  400008:	00400aa1 	.word	0x00400aa1
  40000c:	00400aa1 	.word	0x00400aa1
  400010:	00400aa1 	.word	0x00400aa1
  400014:	00400aa1 	.word	0x00400aa1
  400018:	00400aa1 	.word	0x00400aa1
	...
  40002c:	00400e65 	.word	0x00400e65
  400030:	00400aa1 	.word	0x00400aa1
  400034:	00000000 	.word	0x00000000
  400038:	00400edd 	.word	0x00400edd
  40003c:	00400f2d 	.word	0x00400f2d
  400040:	00400aa1 	.word	0x00400aa1
  400044:	00400aa1 	.word	0x00400aa1
  400048:	00400aa1 	.word	0x00400aa1
  40004c:	00400aa1 	.word	0x00400aa1
  400050:	00400aa1 	.word	0x00400aa1
  400054:	00400aa1 	.word	0x00400aa1
  400058:	00400aa1 	.word	0x00400aa1
  40005c:	00400aa1 	.word	0x00400aa1
  400060:	00402b31 	.word	0x00402b31
  400064:	00400aa1 	.word	0x00400aa1
  400068:	00000000 	.word	0x00000000
  40006c:	004006bd 	.word	0x004006bd
  400070:	004006d1 	.word	0x004006d1
  400074:	00400aa1 	.word	0x00400aa1
  400078:	00400aa1 	.word	0x00400aa1
  40007c:	00400aa1 	.word	0x00400aa1
  400080:	00400aa1 	.word	0x00400aa1
  400084:	00400aa1 	.word	0x00400aa1
  400088:	00400aa1 	.word	0x00400aa1
  40008c:	00402595 	.word	0x00402595
  400090:	00400aa1 	.word	0x00400aa1
  400094:	00400aa1 	.word	0x00400aa1
  400098:	00400aa1 	.word	0x00400aa1
  40009c:	00400aa1 	.word	0x00400aa1
  4000a0:	00400aa1 	.word	0x00400aa1
  4000a4:	00400aa1 	.word	0x00400aa1
  4000a8:	00400aa1 	.word	0x00400aa1
  4000ac:	00400aa1 	.word	0x00400aa1
  4000b0:	00400aa1 	.word	0x00400aa1
  4000b4:	00400aa1 	.word	0x00400aa1
  4000b8:	00400aa1 	.word	0x00400aa1
	...
  4000fc:	00400aa1 	.word	0x00400aa1
  400100:	00400aa1 	.word	0x00400aa1
  400104:	00400aa1 	.word	0x00400aa1
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20000898 	.word	0x20000898
  400164:	00000000 	.word	0x00000000
  400168:	00407dfc 	.word	0x00407dfc

0040016c <frame_dummy>:
  40016c:	4b08      	ldr	r3, [pc, #32]	; (400190 <frame_dummy+0x24>)
  40016e:	b510      	push	{r4, lr}
  400170:	b11b      	cbz	r3, 40017a <frame_dummy+0xe>
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x28>)
  400174:	4908      	ldr	r1, [pc, #32]	; (400198 <frame_dummy+0x2c>)
  400176:	f3af 8000 	nop.w
  40017a:	4808      	ldr	r0, [pc, #32]	; (40019c <frame_dummy+0x30>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b903      	cbnz	r3, 400182 <frame_dummy+0x16>
  400180:	bd10      	pop	{r4, pc}
  400182:	4b07      	ldr	r3, [pc, #28]	; (4001a0 <frame_dummy+0x34>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0fb      	beq.n	400180 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	bf00      	nop
  400190:	00000000 	.word	0x00000000
  400194:	00407dfc 	.word	0x00407dfc
  400198:	2000089c 	.word	0x2000089c
  40019c:	00407dfc 	.word	0x00407dfc
  4001a0:	00000000 	.word	0x00000000

004001a4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  4001a4:	b510      	push	{r4, lr}
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001a6:	480e      	ldr	r0, [pc, #56]	; (4001e0 <sysclk_init+0x3c>)
  4001a8:	4b0e      	ldr	r3, [pc, #56]	; (4001e4 <sysclk_init+0x40>)
  4001aa:	4798      	blx	r3
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001ac:	2000      	movs	r0, #0
  4001ae:	4b0e      	ldr	r3, [pc, #56]	; (4001e8 <sysclk_init+0x44>)
  4001b0:	4798      	blx	r3
	case OSC_SLCK_32K_RC:
		return 1;

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4001b2:	4c0e      	ldr	r4, [pc, #56]	; (4001ec <sysclk_init+0x48>)
  4001b4:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001b6:	2800      	cmp	r0, #0
  4001b8:	d0fc      	beq.n	4001b4 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ba:	4b0d      	ldr	r3, [pc, #52]	; (4001f0 <sysclk_init+0x4c>)
  4001bc:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  4001be:	4a0d      	ldr	r2, [pc, #52]	; (4001f4 <sysclk_init+0x50>)
  4001c0:	4b0d      	ldr	r3, [pc, #52]	; (4001f8 <sysclk_init+0x54>)
  4001c2:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4001c4:	4c0d      	ldr	r4, [pc, #52]	; (4001fc <sysclk_init+0x58>)
  4001c6:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001c8:	2800      	cmp	r0, #0
  4001ca:	d0fc      	beq.n	4001c6 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001cc:	2000      	movs	r0, #0
  4001ce:	4b0c      	ldr	r3, [pc, #48]	; (400200 <sysclk_init+0x5c>)
  4001d0:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001d2:	4b0c      	ldr	r3, [pc, #48]	; (400204 <sysclk_init+0x60>)
  4001d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001d6:	480c      	ldr	r0, [pc, #48]	; (400208 <sysclk_init+0x64>)
  4001d8:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <sysclk_init+0x40>)
  4001da:	4798      	blx	r3
  4001dc:	bd10      	pop	{r4, pc}
  4001de:	bf00      	nop
  4001e0:	07270e00 	.word	0x07270e00
  4001e4:	00400c71 	.word	0x00400c71
  4001e8:	004007cd 	.word	0x004007cd
  4001ec:	004007f1 	.word	0x004007f1
  4001f0:	00400811 	.word	0x00400811
  4001f4:	0e4d3f01 	.word	0x0e4d3f01
  4001f8:	400e0400 	.word	0x400e0400
  4001fc:	0040081d 	.word	0x0040081d
  400200:	00400765 	.word	0x00400765
  400204:	00400b89 	.word	0x00400b89
  400208:	07270000 	.word	0x07270000

0040020c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40020c:	b9a8      	cbnz	r0, 40023a <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40020e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400212:	460c      	mov	r4, r1
  400214:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400216:	2a00      	cmp	r2, #0
  400218:	dd0a      	ble.n	400230 <_read+0x24>
  40021a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40021c:	4e08      	ldr	r6, [pc, #32]	; (400240 <_read+0x34>)
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <_read+0x38>)
  400220:	6830      	ldr	r0, [r6, #0]
  400222:	4621      	mov	r1, r4
  400224:	682b      	ldr	r3, [r5, #0]
  400226:	4798      	blx	r3
		ptr++;
  400228:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40022a:	42bc      	cmp	r4, r7
  40022c:	d1f8      	bne.n	400220 <_read+0x14>
  40022e:	e001      	b.n	400234 <_read+0x28>
  400230:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400234:	4640      	mov	r0, r8
  400236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  40023a:	f04f 30ff 	mov.w	r0, #4294967295
  40023e:	4770      	bx	lr
  400240:	2001a8d8 	.word	0x2001a8d8
  400244:	2001a8d0 	.word	0x2001a8d0

00400248 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400248:	3801      	subs	r0, #1
  40024a:	2802      	cmp	r0, #2
  40024c:	d818      	bhi.n	400280 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40024e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400252:	460e      	mov	r6, r1
  400254:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400256:	b182      	cbz	r2, 40027a <_write+0x32>
  400258:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40025a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400294 <_write+0x4c>
  40025e:	4f0c      	ldr	r7, [pc, #48]	; (400290 <_write+0x48>)
  400260:	f8d8 0000 	ldr.w	r0, [r8]
  400264:	f815 1b01 	ldrb.w	r1, [r5], #1
  400268:	683b      	ldr	r3, [r7, #0]
  40026a:	4798      	blx	r3
  40026c:	2800      	cmp	r0, #0
  40026e:	db0a      	blt.n	400286 <_write+0x3e>
  400270:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400272:	3c01      	subs	r4, #1
  400274:	d1f4      	bne.n	400260 <_write+0x18>
  400276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40027a:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  40027c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400280:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400284:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400286:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40028e:	bf00      	nop
  400290:	2001a8d4 	.word	0x2001a8d4
  400294:	2001a8d8 	.word	0x2001a8d8

00400298 <Button1_Handler>:
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {	
  400298:	280c      	cmp	r0, #12
  40029a:	d105      	bne.n	4002a8 <Button1_Handler+0x10>
  40029c:	2901      	cmp	r1, #1
  40029e:	d103      	bne.n	4002a8 <Button1_Handler+0x10>
 *
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
  4002a0:	b508      	push	{r3, lr}
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {	
		extern void vFNBtton_Click_Hook( void );
		vFNBtton_Click_Hook();
  4002a2:	4b02      	ldr	r3, [pc, #8]	; (4002ac <Button1_Handler+0x14>)
  4002a4:	4798      	blx	r3
  4002a6:	bd08      	pop	{r3, pc}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	00403f75 	.word	0x00403f75

004002b0 <system_board_init>:
#  pragma weak board_init=system_board_init
#endif

static void Button1_Handler(uint32_t id, uint32_t mask);
void system_board_init(void)
{
  4002b0:	b570      	push	{r4, r5, r6, lr}
  4002b2:	b082      	sub	sp, #8

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002b8:	4b50      	ldr	r3, [pc, #320]	; (4003fc <system_board_init+0x14c>)
  4002ba:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002bc:	200b      	movs	r0, #11
  4002be:	4c50      	ldr	r4, [pc, #320]	; (400400 <system_board_init+0x150>)
  4002c0:	47a0      	blx	r4
  4002c2:	200c      	movs	r0, #12
  4002c4:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002c6:	4c4f      	ldr	r4, [pc, #316]	; (400404 <system_board_init+0x154>)
  4002c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4002cc:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002ce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002d2:	6323      	str	r3, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  4002d8:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002da:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002de:	6323      	str	r3, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002e0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  4002e4:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002e6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002ea:	6323      	str	r3, [r4, #48]	; 0x30

	/* Initialize SW0 */
	//ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);

	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  4002ec:	4d46      	ldr	r5, [pc, #280]	; (400408 <system_board_init+0x158>)
  4002ee:	4628      	mov	r0, r5
  4002f0:	2101      	movs	r1, #1
  4002f2:	220a      	movs	r2, #10
  4002f4:	4b45      	ldr	r3, [pc, #276]	; (40040c <system_board_init+0x15c>)
  4002f6:	4798      	blx	r3
	/* Interrupt on rising edge  */
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  4002f8:	4b45      	ldr	r3, [pc, #276]	; (400410 <system_board_init+0x160>)
  4002fa:	9300      	str	r3, [sp, #0]
  4002fc:	4628      	mov	r0, r5
  4002fe:	210c      	movs	r1, #12
  400300:	2201      	movs	r2, #1
  400302:	2359      	movs	r3, #89	; 0x59
  400304:	4e43      	ldr	r6, [pc, #268]	; (400414 <system_board_init+0x164>)
  400306:	47b0      	blx	r6
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400308:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  40030c:	4b42      	ldr	r3, [pc, #264]	; (400418 <system_board_init+0x168>)
  40030e:	601e      	str	r6, [r3, #0]
	PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO,
  400310:	4628      	mov	r0, r5
  400312:	210c      	movs	r1, #12
  400314:	2200      	movs	r2, #0
  400316:	4b41      	ldr	r3, [pc, #260]	; (40041c <system_board_init+0x16c>)
  400318:	4798      	blx	r3
	(IRQn_Type) PIN_PUSHBUTTON_1_ID, 0);
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  40031a:	4628      	mov	r0, r5
  40031c:	2101      	movs	r1, #1
  40031e:	4b40      	ldr	r3, [pc, #256]	; (400420 <system_board_init+0x170>)
  400320:	4798      	blx	r3
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400322:	f44f 7340 	mov.w	r3, #768	; 0x300
  400326:	662b      	str	r3, [r5, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400328:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40032c:	656b      	str	r3, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40032e:	626b      	str	r3, [r5, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400330:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400334:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400336:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  40033a:	672a      	str	r2, [r5, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40033c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  40033e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  400342:	676a      	str	r2, [r5, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400344:	606b      	str	r3, [r5, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400346:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  40034a:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40034c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400350:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400352:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400354:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400358:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40035a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  40035e:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400360:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400362:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  400366:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400368:	6063      	str	r3, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40036a:	6626      	str	r6, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40036c:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400370:	6566      	str	r6, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400372:	6266      	str	r6, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400374:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400378:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40037a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40037e:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400380:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400386:	6763      	str	r3, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400388:	6066      	str	r6, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40038a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40038e:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400390:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400394:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400396:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400398:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40039c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40039e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4003a2:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003a4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4003a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4003aa:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ac:	6063      	str	r3, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4003b2:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003b4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003b8:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003ba:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003c0:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4003c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  4003c6:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003c8:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4003ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  4003ce:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003d0:	6063      	str	r3, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003d6:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003d8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003dc:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003de:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003e0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003e4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4003e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4003ea:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003ec:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4003ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4003f2:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f4:	6063      	str	r3, [r4, #4]
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif
}
  4003f6:	b002      	add	sp, #8
  4003f8:	bd70      	pop	{r4, r5, r6, pc}
  4003fa:	bf00      	nop
  4003fc:	400e1450 	.word	0x400e1450
  400400:	0040082d 	.word	0x0040082d
  400404:	400e0e00 	.word	0x400e0e00
  400408:	400e1000 	.word	0x400e1000
  40040c:	004005cd 	.word	0x004005cd
  400410:	00400299 	.word	0x00400299
  400414:	0040067d 	.word	0x0040067d
  400418:	e000e100 	.word	0xe000e100
  40041c:	004006e5 	.word	0x004006e5
  400420:	00400619 	.word	0x00400619

00400424 <flexcom_enable>:
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  400424:	b508      	push	{r3, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400426:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40042a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40042c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400430:	2100      	movs	r1, #0
  400432:	4a4a      	ldr	r2, [pc, #296]	; (40055c <flexcom_enable+0x138>)
  400434:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400436:	494a      	ldr	r1, [pc, #296]	; (400560 <flexcom_enable+0x13c>)
  400438:	780a      	ldrb	r2, [r1, #0]
  40043a:	3201      	adds	r2, #1
  40043c:	700a      	strb	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40043e:	b92b      	cbnz	r3, 40044c <flexcom_enable+0x28>
		cpu_irq_enable();
  400440:	2201      	movs	r2, #1
  400442:	4b46      	ldr	r3, [pc, #280]	; (40055c <flexcom_enable+0x138>)
  400444:	701a      	strb	r2, [r3, #0]
  400446:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40044a:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  40044c:	4b45      	ldr	r3, [pc, #276]	; (400564 <flexcom_enable+0x140>)
  40044e:	4298      	cmp	r0, r3
  400450:	d10d      	bne.n	40046e <flexcom_enable+0x4a>
  400452:	2007      	movs	r0, #7
  400454:	4b44      	ldr	r3, [pc, #272]	; (400568 <flexcom_enable+0x144>)
  400456:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  400458:	2007      	movs	r0, #7
  40045a:	4b44      	ldr	r3, [pc, #272]	; (40056c <flexcom_enable+0x148>)
  40045c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  40045e:	2007      	movs	r0, #7
  400460:	2100      	movs	r1, #0
  400462:	4b43      	ldr	r3, [pc, #268]	; (400570 <flexcom_enable+0x14c>)
  400464:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  400466:	2007      	movs	r0, #7
  400468:	4b42      	ldr	r3, [pc, #264]	; (400574 <flexcom_enable+0x150>)
  40046a:	4798      	blx	r3
  40046c:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM6
	if (p_flexcom == FLEXCOM6) {
  40046e:	4b42      	ldr	r3, [pc, #264]	; (400578 <flexcom_enable+0x154>)
  400470:	4298      	cmp	r0, r3
  400472:	d10d      	bne.n	400490 <flexcom_enable+0x6c>
  400474:	2016      	movs	r0, #22
  400476:	4b3c      	ldr	r3, [pc, #240]	; (400568 <flexcom_enable+0x144>)
  400478:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  40047a:	2007      	movs	r0, #7
  40047c:	4b3b      	ldr	r3, [pc, #236]	; (40056c <flexcom_enable+0x148>)
  40047e:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  400480:	2007      	movs	r0, #7
  400482:	2100      	movs	r1, #0
  400484:	4b3a      	ldr	r3, [pc, #232]	; (400570 <flexcom_enable+0x14c>)
  400486:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  400488:	2007      	movs	r0, #7
  40048a:	4b3a      	ldr	r3, [pc, #232]	; (400574 <flexcom_enable+0x150>)
  40048c:	4798      	blx	r3
  40048e:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM5
	if (p_flexcom == FLEXCOM5) {
  400490:	4b3a      	ldr	r3, [pc, #232]	; (40057c <flexcom_enable+0x158>)
  400492:	4298      	cmp	r0, r3
  400494:	d10d      	bne.n	4004b2 <flexcom_enable+0x8e>
  400496:	2015      	movs	r0, #21
  400498:	4b33      	ldr	r3, [pc, #204]	; (400568 <flexcom_enable+0x144>)
  40049a:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  40049c:	2007      	movs	r0, #7
  40049e:	4b33      	ldr	r3, [pc, #204]	; (40056c <flexcom_enable+0x148>)
  4004a0:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4004a2:	2007      	movs	r0, #7
  4004a4:	2100      	movs	r1, #0
  4004a6:	4b32      	ldr	r3, [pc, #200]	; (400570 <flexcom_enable+0x14c>)
  4004a8:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4004aa:	2007      	movs	r0, #7
  4004ac:	4b31      	ldr	r3, [pc, #196]	; (400574 <flexcom_enable+0x150>)
  4004ae:	4798      	blx	r3
  4004b0:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM4
	if (p_flexcom == FLEXCOM4) {
  4004b2:	4b33      	ldr	r3, [pc, #204]	; (400580 <flexcom_enable+0x15c>)
  4004b4:	4298      	cmp	r0, r3
  4004b6:	d10d      	bne.n	4004d4 <flexcom_enable+0xb0>
  4004b8:	2014      	movs	r0, #20
  4004ba:	4b2b      	ldr	r3, [pc, #172]	; (400568 <flexcom_enable+0x144>)
  4004bc:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  4004be:	2007      	movs	r0, #7
  4004c0:	4b2a      	ldr	r3, [pc, #168]	; (40056c <flexcom_enable+0x148>)
  4004c2:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4004c4:	2007      	movs	r0, #7
  4004c6:	2100      	movs	r1, #0
  4004c8:	4b29      	ldr	r3, [pc, #164]	; (400570 <flexcom_enable+0x14c>)
  4004ca:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4004cc:	2007      	movs	r0, #7
  4004ce:	4b29      	ldr	r3, [pc, #164]	; (400574 <flexcom_enable+0x150>)
  4004d0:	4798      	blx	r3
  4004d2:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM3
	if (p_flexcom == FLEXCOM3) {
  4004d4:	4b2b      	ldr	r3, [pc, #172]	; (400584 <flexcom_enable+0x160>)
  4004d6:	4298      	cmp	r0, r3
  4004d8:	d10d      	bne.n	4004f6 <flexcom_enable+0xd2>
  4004da:	2013      	movs	r0, #19
  4004dc:	4b22      	ldr	r3, [pc, #136]	; (400568 <flexcom_enable+0x144>)
  4004de:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  4004e0:	2006      	movs	r0, #6
  4004e2:	4b22      	ldr	r3, [pc, #136]	; (40056c <flexcom_enable+0x148>)
  4004e4:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4004e6:	2006      	movs	r0, #6
  4004e8:	2100      	movs	r1, #0
  4004ea:	4b21      	ldr	r3, [pc, #132]	; (400570 <flexcom_enable+0x14c>)
  4004ec:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4004ee:	2006      	movs	r0, #6
  4004f0:	4b20      	ldr	r3, [pc, #128]	; (400574 <flexcom_enable+0x150>)
  4004f2:	4798      	blx	r3
  4004f4:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM2
	if (p_flexcom == FLEXCOM2) {
  4004f6:	4b24      	ldr	r3, [pc, #144]	; (400588 <flexcom_enable+0x164>)
  4004f8:	4298      	cmp	r0, r3
  4004fa:	d10d      	bne.n	400518 <flexcom_enable+0xf4>
  4004fc:	200e      	movs	r0, #14
  4004fe:	4b1a      	ldr	r3, [pc, #104]	; (400568 <flexcom_enable+0x144>)
  400500:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  400502:	2006      	movs	r0, #6
  400504:	4b19      	ldr	r3, [pc, #100]	; (40056c <flexcom_enable+0x148>)
  400506:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  400508:	2006      	movs	r0, #6
  40050a:	2100      	movs	r1, #0
  40050c:	4b18      	ldr	r3, [pc, #96]	; (400570 <flexcom_enable+0x14c>)
  40050e:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400510:	2006      	movs	r0, #6
  400512:	4b18      	ldr	r3, [pc, #96]	; (400574 <flexcom_enable+0x150>)
  400514:	4798      	blx	r3
  400516:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM1
	if (p_flexcom == FLEXCOM1) {
  400518:	4b1c      	ldr	r3, [pc, #112]	; (40058c <flexcom_enable+0x168>)
  40051a:	4298      	cmp	r0, r3
  40051c:	d10d      	bne.n	40053a <flexcom_enable+0x116>
  40051e:	2009      	movs	r0, #9
  400520:	4b11      	ldr	r3, [pc, #68]	; (400568 <flexcom_enable+0x144>)
  400522:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  400524:	2006      	movs	r0, #6
  400526:	4b11      	ldr	r3, [pc, #68]	; (40056c <flexcom_enable+0x148>)
  400528:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40052a:	2006      	movs	r0, #6
  40052c:	2100      	movs	r1, #0
  40052e:	4b10      	ldr	r3, [pc, #64]	; (400570 <flexcom_enable+0x14c>)
  400530:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400532:	2006      	movs	r0, #6
  400534:	4b0f      	ldr	r3, [pc, #60]	; (400574 <flexcom_enable+0x150>)
  400536:	4798      	blx	r3
  400538:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM0
	if (p_flexcom == FLEXCOM0) {
  40053a:	4b15      	ldr	r3, [pc, #84]	; (400590 <flexcom_enable+0x16c>)
  40053c:	4298      	cmp	r0, r3
  40053e:	d10c      	bne.n	40055a <flexcom_enable+0x136>
  400540:	2008      	movs	r0, #8
  400542:	4b09      	ldr	r3, [pc, #36]	; (400568 <flexcom_enable+0x144>)
  400544:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  400546:	2006      	movs	r0, #6
  400548:	4b08      	ldr	r3, [pc, #32]	; (40056c <flexcom_enable+0x148>)
  40054a:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40054c:	2006      	movs	r0, #6
  40054e:	2100      	movs	r1, #0
  400550:	4b07      	ldr	r3, [pc, #28]	; (400570 <flexcom_enable+0x14c>)
  400552:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400554:	2006      	movs	r0, #6
  400556:	4b07      	ldr	r3, [pc, #28]	; (400574 <flexcom_enable+0x150>)
  400558:	4798      	blx	r3
  40055a:	bd08      	pop	{r3, pc}
  40055c:	2000000c 	.word	0x2000000c
  400560:	2001a8c8 	.word	0x2001a8c8
  400564:	40034000 	.word	0x40034000
  400568:	0040082d 	.word	0x0040082d
  40056c:	004008d5 	.word	0x004008d5
  400570:	00400881 	.word	0x00400881
  400574:	004008c5 	.word	0x004008c5
  400578:	40040000 	.word	0x40040000
  40057c:	40008000 	.word	0x40008000
  400580:	4001c000 	.word	0x4001c000
  400584:	40018000 	.word	0x40018000
  400588:	40024000 	.word	0x40024000
  40058c:	40020000 	.word	0x40020000
  400590:	4000c000 	.word	0x4000c000

00400594 <flexcom_set_opmode>:
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
	p_flexcom->FLEXCOM_MR = opmode;
  400594:	6001      	str	r1, [r0, #0]
  400596:	4770      	bx	lr

00400598 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400598:	460b      	mov	r3, r1
  40059a:	b119      	cbz	r1, 4005a4 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  40059c:	6809      	ldr	r1, [r1, #0]
  40059e:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  4005a0:	685b      	ldr	r3, [r3, #4]
  4005a2:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
  4005a4:	b11a      	cbz	r2, 4005ae <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  4005a6:	6813      	ldr	r3, [r2, #0]
  4005a8:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  4005aa:	6853      	ldr	r3, [r2, #4]
  4005ac:	61c3      	str	r3, [r0, #28]
  4005ae:	4770      	bx	lr

004005b0 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  4005b0:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  4005b4:	05c9      	lsls	r1, r1, #23
  4005b6:	0dc9      	lsrs	r1, r1, #23
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  4005b8:	6201      	str	r1, [r0, #32]
  4005ba:	4770      	bx	lr

004005bc <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  4005bc:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  4005c0:	f021 0101 	bic.w	r1, r1, #1
  4005c4:	0589      	lsls	r1, r1, #22
  4005c6:	0d89      	lsrs	r1, r1, #22
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  4005c8:	6201      	str	r1, [r0, #32]
  4005ca:	4770      	bx	lr

004005cc <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4005cc:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4005d0:	0052      	lsls	r2, r2, #1
  4005d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4005d6:	fbb3 f2f2 	udiv	r2, r3, r2
  4005da:	3a01      	subs	r2, #1
  4005dc:	f3c2 020d 	ubfx	r2, r2, #0, #14
  4005e0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  4005e4:	4770      	bx	lr
  4005e6:	bf00      	nop

004005e8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4005e8:	f012 0f10 	tst.w	r2, #16
  4005ec:	d010      	beq.n	400610 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4005ee:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4005f2:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4005f6:	bf14      	ite	ne
  4005f8:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4005fc:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400600:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400604:	bf14      	ite	ne
  400606:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40060a:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  40060e:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400610:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400614:	4770      	bx	lr
  400616:	bf00      	nop

00400618 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  400618:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  40061a:	6401      	str	r1, [r0, #64]	; 0x40
  40061c:	4770      	bx	lr
  40061e:	bf00      	nop

00400620 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400620:	6441      	str	r1, [r0, #68]	; 0x44
  400622:	4770      	bx	lr

00400624 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400624:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400626:	4770      	bx	lr

00400628 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400628:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40062a:	4770      	bx	lr

0040062c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40062c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400630:	4604      	mov	r4, r0
  400632:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400634:	4b0e      	ldr	r3, [pc, #56]	; (400670 <pio_handler_process+0x44>)
  400636:	4798      	blx	r3
  400638:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40063a:	4620      	mov	r0, r4
  40063c:	4b0d      	ldr	r3, [pc, #52]	; (400674 <pio_handler_process+0x48>)
  40063e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400640:	4005      	ands	r5, r0
  400642:	d013      	beq.n	40066c <pio_handler_process+0x40>
  400644:	4c0c      	ldr	r4, [pc, #48]	; (400678 <pio_handler_process+0x4c>)
  400646:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40064a:	6823      	ldr	r3, [r4, #0]
  40064c:	4543      	cmp	r3, r8
  40064e:	d108      	bne.n	400662 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400650:	6861      	ldr	r1, [r4, #4]
  400652:	4229      	tst	r1, r5
  400654:	d005      	beq.n	400662 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400656:	68e3      	ldr	r3, [r4, #12]
  400658:	4640      	mov	r0, r8
  40065a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40065c:	6863      	ldr	r3, [r4, #4]
  40065e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400662:	42b4      	cmp	r4, r6
  400664:	d002      	beq.n	40066c <pio_handler_process+0x40>
  400666:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400668:	2d00      	cmp	r5, #0
  40066a:	d1ee      	bne.n	40064a <pio_handler_process+0x1e>
  40066c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400670:	00400625 	.word	0x00400625
  400674:	00400629 	.word	0x00400629
  400678:	200008b8 	.word	0x200008b8

0040067c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40067e:	4c0c      	ldr	r4, [pc, #48]	; (4006b0 <pio_handler_set+0x34>)
  400680:	6824      	ldr	r4, [r4, #0]
  400682:	2c06      	cmp	r4, #6
  400684:	d811      	bhi.n	4006aa <pio_handler_set+0x2e>
  400686:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  400688:	4f0a      	ldr	r7, [pc, #40]	; (4006b4 <pio_handler_set+0x38>)
  40068a:	0122      	lsls	r2, r4, #4
  40068c:	18be      	adds	r6, r7, r2
  40068e:	50b9      	str	r1, [r7, r2]
	pSource->mask = ul_mask;
  400690:	6075      	str	r5, [r6, #4]
	pSource->attr = ul_attr;
  400692:	60b3      	str	r3, [r6, #8]
	pSource->handler = p_handler;
  400694:	9a06      	ldr	r2, [sp, #24]
  400696:	60f2      	str	r2, [r6, #12]
	gs_ul_nb_sources++;
  400698:	3401      	adds	r4, #1
  40069a:	4a05      	ldr	r2, [pc, #20]	; (4006b0 <pio_handler_set+0x34>)
  40069c:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40069e:	4629      	mov	r1, r5
  4006a0:	461a      	mov	r2, r3
  4006a2:	4b05      	ldr	r3, [pc, #20]	; (4006b8 <pio_handler_set+0x3c>)
  4006a4:	4798      	blx	r3

	return 0;
  4006a6:	2000      	movs	r0, #0
  4006a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4006aa:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4006ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006ae:	bf00      	nop
  4006b0:	200008b4 	.word	0x200008b4
  4006b4:	200008b8 	.word	0x200008b8
  4006b8:	004005e9 	.word	0x004005e9

004006bc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4006bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4006be:	4802      	ldr	r0, [pc, #8]	; (4006c8 <PIOA_Handler+0xc>)
  4006c0:	210b      	movs	r1, #11
  4006c2:	4b02      	ldr	r3, [pc, #8]	; (4006cc <PIOA_Handler+0x10>)
  4006c4:	4798      	blx	r3
  4006c6:	bd08      	pop	{r3, pc}
  4006c8:	400e0e00 	.word	0x400e0e00
  4006cc:	0040062d 	.word	0x0040062d

004006d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4006d0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4006d2:	4802      	ldr	r0, [pc, #8]	; (4006dc <PIOB_Handler+0xc>)
  4006d4:	210c      	movs	r1, #12
  4006d6:	4b02      	ldr	r3, [pc, #8]	; (4006e0 <PIOB_Handler+0x10>)
  4006d8:	4798      	blx	r3
  4006da:	bd08      	pop	{r3, pc}
  4006dc:	400e1000 	.word	0x400e1000
  4006e0:	0040062d 	.word	0x0040062d

004006e4 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006e6:	4605      	mov	r5, r0
  4006e8:	460c      	mov	r4, r1
  4006ea:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  4006ec:	4b18      	ldr	r3, [pc, #96]	; (400750 <pio_handler_set_priority+0x6c>)
  4006ee:	4798      	blx	r3
  4006f0:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4006f2:	4628      	mov	r0, r5
  4006f4:	f04f 31ff 	mov.w	r1, #4294967295
  4006f8:	4b16      	ldr	r3, [pc, #88]	; (400754 <pio_handler_set_priority+0x70>)
  4006fa:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4006fc:	4628      	mov	r0, r5
  4006fe:	4b16      	ldr	r3, [pc, #88]	; (400758 <pio_handler_set_priority+0x74>)
  400700:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400702:	b2e2      	uxtb	r2, r4
  400704:	f002 031f 	and.w	r3, r2, #31
  400708:	2101      	movs	r1, #1
  40070a:	4099      	lsls	r1, r3
  40070c:	0963      	lsrs	r3, r4, #5
  40070e:	009b      	lsls	r3, r3, #2
  400710:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  400714:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  400718:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40071c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400720:	2c00      	cmp	r4, #0
  400722:	da06      	bge.n	400732 <pio_handler_set_priority+0x4e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400724:	f002 020f 	and.w	r2, r2, #15
  400728:	013f      	lsls	r7, r7, #4
  40072a:	b2ff      	uxtb	r7, r7
  40072c:	480b      	ldr	r0, [pc, #44]	; (40075c <pio_handler_set_priority+0x78>)
  40072e:	5487      	strb	r7, [r0, r2]
  400730:	e007      	b.n	400742 <pio_handler_set_priority+0x5e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400732:	013f      	lsls	r7, r7, #4
  400734:	b2ff      	uxtb	r7, r7
  400736:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  40073a:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  40073e:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400742:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  400744:	4628      	mov	r0, r5
  400746:	4631      	mov	r1, r6
  400748:	4b05      	ldr	r3, [pc, #20]	; (400760 <pio_handler_set_priority+0x7c>)
  40074a:	4798      	blx	r3
  40074c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40074e:	bf00      	nop
  400750:	00400629 	.word	0x00400629
  400754:	00400621 	.word	0x00400621
  400758:	00400625 	.word	0x00400625
  40075c:	e000ed14 	.word	0xe000ed14
  400760:	00400619 	.word	0x00400619

00400764 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400764:	4a18      	ldr	r2, [pc, #96]	; (4007c8 <pmc_switch_mck_to_pllack+0x64>)
  400766:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40076c:	4318      	orrs	r0, r3
  40076e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400770:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400772:	f013 0f08 	tst.w	r3, #8
  400776:	d003      	beq.n	400780 <pmc_switch_mck_to_pllack+0x1c>
  400778:	e009      	b.n	40078e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40077a:	3b01      	subs	r3, #1
  40077c:	d103      	bne.n	400786 <pmc_switch_mck_to_pllack+0x22>
  40077e:	e01e      	b.n	4007be <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400780:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400784:	4910      	ldr	r1, [pc, #64]	; (4007c8 <pmc_switch_mck_to_pllack+0x64>)
  400786:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400788:	f012 0f08 	tst.w	r2, #8
  40078c:	d0f5      	beq.n	40077a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40078e:	4a0e      	ldr	r2, [pc, #56]	; (4007c8 <pmc_switch_mck_to_pllack+0x64>)
  400790:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400792:	f023 0303 	bic.w	r3, r3, #3
  400796:	f043 0302 	orr.w	r3, r3, #2
  40079a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40079c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40079e:	f010 0008 	ands.w	r0, r0, #8
  4007a2:	d004      	beq.n	4007ae <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4007a4:	2000      	movs	r0, #0
  4007a6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007a8:	3b01      	subs	r3, #1
  4007aa:	d103      	bne.n	4007b4 <pmc_switch_mck_to_pllack+0x50>
  4007ac:	e009      	b.n	4007c2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007b2:	4905      	ldr	r1, [pc, #20]	; (4007c8 <pmc_switch_mck_to_pllack+0x64>)
  4007b4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007b6:	f012 0f08 	tst.w	r2, #8
  4007ba:	d0f5      	beq.n	4007a8 <pmc_switch_mck_to_pllack+0x44>
  4007bc:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007be:	2001      	movs	r0, #1
  4007c0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007c2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007c4:	4770      	bx	lr
  4007c6:	bf00      	nop
  4007c8:	400e0400 	.word	0x400e0400

004007cc <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4007cc:	2801      	cmp	r0, #1
  4007ce:	d106      	bne.n	4007de <pmc_switch_sclk_to_32kxtal+0x12>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4007d0:	4a05      	ldr	r2, [pc, #20]	; (4007e8 <pmc_switch_sclk_to_32kxtal+0x1c>)
  4007d2:	6893      	ldr	r3, [r2, #8]
  4007d4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4007d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4007dc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4007de:	4a03      	ldr	r2, [pc, #12]	; (4007ec <pmc_switch_sclk_to_32kxtal+0x20>)
  4007e0:	4b01      	ldr	r3, [pc, #4]	; (4007e8 <pmc_switch_sclk_to_32kxtal+0x1c>)
  4007e2:	601a      	str	r2, [r3, #0]
  4007e4:	4770      	bx	lr
  4007e6:	bf00      	nop
  4007e8:	400e1410 	.word	0x400e1410
  4007ec:	a5000008 	.word	0xa5000008

004007f0 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4007f0:	4b05      	ldr	r3, [pc, #20]	; (400808 <pmc_osc_is_ready_32kxtal+0x18>)
  4007f2:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4007f4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4007f8:	bf1d      	ittte	ne
  4007fa:	4b04      	ldrne	r3, [pc, #16]	; (40080c <pmc_osc_is_ready_32kxtal+0x1c>)
  4007fc:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  4007fe:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  400802:	2000      	moveq	r0, #0
}
  400804:	4770      	bx	lr
  400806:	bf00      	nop
  400808:	400e1410 	.word	0x400e1410
  40080c:	400e0400 	.word	0x400e0400

00400810 <pmc_disable_pllack>:
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  400810:	2200      	movs	r2, #0
  400812:	4b01      	ldr	r3, [pc, #4]	; (400818 <pmc_disable_pllack+0x8>)
  400814:	629a      	str	r2, [r3, #40]	; 0x28
  400816:	4770      	bx	lr
  400818:	400e0400 	.word	0x400e0400

0040081c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40081c:	4b02      	ldr	r3, [pc, #8]	; (400828 <pmc_is_locked_pllack+0xc>)
  40081e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400820:	f000 0002 	and.w	r0, r0, #2
  400824:	4770      	bx	lr
  400826:	bf00      	nop
  400828:	400e0400 	.word	0x400e0400

0040082c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40082c:	2832      	cmp	r0, #50	; 0x32
  40082e:	d81e      	bhi.n	40086e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400830:	281f      	cmp	r0, #31
  400832:	d80c      	bhi.n	40084e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400834:	4b11      	ldr	r3, [pc, #68]	; (40087c <pmc_enable_periph_clk+0x50>)
  400836:	699a      	ldr	r2, [r3, #24]
  400838:	2301      	movs	r3, #1
  40083a:	4083      	lsls	r3, r0
  40083c:	401a      	ands	r2, r3
  40083e:	4293      	cmp	r3, r2
  400840:	d017      	beq.n	400872 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400842:	2301      	movs	r3, #1
  400844:	4083      	lsls	r3, r0
  400846:	4a0d      	ldr	r2, [pc, #52]	; (40087c <pmc_enable_periph_clk+0x50>)
  400848:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40084a:	2000      	movs	r0, #0
  40084c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40084e:	4b0b      	ldr	r3, [pc, #44]	; (40087c <pmc_enable_periph_clk+0x50>)
  400850:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
  400854:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400856:	2301      	movs	r3, #1
  400858:	4083      	lsls	r3, r0
  40085a:	401a      	ands	r2, r3
  40085c:	4293      	cmp	r3, r2
  40085e:	d00a      	beq.n	400876 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400860:	2301      	movs	r3, #1
  400862:	4083      	lsls	r3, r0
  400864:	4a05      	ldr	r2, [pc, #20]	; (40087c <pmc_enable_periph_clk+0x50>)
  400866:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40086a:	2000      	movs	r0, #0
  40086c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40086e:	2001      	movs	r0, #1
  400870:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400872:	2000      	movs	r0, #0
  400874:	4770      	bx	lr
  400876:	2000      	movs	r0, #0
}
  400878:	4770      	bx	lr
  40087a:	bf00      	nop
  40087c:	400e0400 	.word	0x400e0400

00400880 <pmc_switch_pck_to_mck>:
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  400880:	f041 0104 	orr.w	r1, r1, #4
  400884:	4b0e      	ldr	r3, [pc, #56]	; (4008c0 <pmc_switch_pck_to_mck+0x40>)
  400886:	f100 0210 	add.w	r2, r0, #16
  40088a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  40088e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400890:	f44f 7180 	mov.w	r1, #256	; 0x100
  400894:	4081      	lsls	r1, r0
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  400896:	ea11 0003 	ands.w	r0, r1, r3
  40089a:	d004      	beq.n	4008a6 <pmc_switch_pck_to_mck+0x26>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40089c:	2000      	movs	r0, #0
}
  40089e:	4770      	bx	lr
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  4008a0:	3b01      	subs	r3, #1
  4008a2:	d104      	bne.n	4008ae <pmc_switch_pck_to_mck+0x2e>
  4008a4:	e007      	b.n	4008b6 <pmc_switch_pck_to_mck+0x36>
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
  4008a6:	b410      	push	{r4}
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  4008a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4008ac:	4c04      	ldr	r4, [pc, #16]	; (4008c0 <pmc_switch_pck_to_mck+0x40>)
  4008ae:	6ea2      	ldr	r2, [r4, #104]	; 0x68
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  4008b0:	4211      	tst	r1, r2
  4008b2:	d0f5      	beq.n	4008a0 <pmc_switch_pck_to_mck+0x20>
  4008b4:	e000      	b.n	4008b8 <pmc_switch_pck_to_mck+0x38>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4008b6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4008b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop
  4008c0:	400e0400 	.word	0x400e0400

004008c4 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4008c4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4008c8:	4083      	lsls	r3, r0
  4008ca:	4a01      	ldr	r2, [pc, #4]	; (4008d0 <pmc_enable_pck+0xc>)
  4008cc:	6013      	str	r3, [r2, #0]
  4008ce:	4770      	bx	lr
  4008d0:	400e0400 	.word	0x400e0400

004008d4 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  4008d4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4008d8:	4083      	lsls	r3, r0
  4008da:	4a01      	ldr	r2, [pc, #4]	; (4008e0 <pmc_disable_pck+0xc>)
  4008dc:	6053      	str	r3, [r2, #4]
  4008de:	4770      	bx	lr
  4008e0:	400e0400 	.word	0x400e0400

004008e4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4008e4:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4008e6:	010b      	lsls	r3, r1, #4
  4008e8:	4293      	cmp	r3, r2
  4008ea:	d90f      	bls.n	40090c <usart_set_async_baudrate+0x28>
  4008ec:	e01c      	b.n	400928 <usart_set_async_baudrate+0x44>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
  4008ee:	f002 0207 	and.w	r2, r2, #7
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4008f2:	6841      	ldr	r1, [r0, #4]
  4008f4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4008f8:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4008fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4008fe:	6202      	str	r2, [r0, #32]

	return 0;
  400900:	2000      	movs	r0, #0
  400902:	e01e      	b.n	400942 <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  400904:	2001      	movs	r0, #1
  400906:	e01c      	b.n	400942 <usart_set_async_baudrate+0x5e>
  400908:	2001      	movs	r0, #1
  40090a:	e01a      	b.n	400942 <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40090c:	00d2      	lsls	r2, r2, #3
  40090e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
  400912:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400916:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400918:	1e5c      	subs	r4, r3, #1
  40091a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40091e:	428c      	cmp	r4, r1
  400920:	d8f0      	bhi.n	400904 <usart_set_async_baudrate+0x20>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
  400922:	f002 0207 	and.w	r2, r2, #7
  400926:	e7e8      	b.n	4008fa <usart_set_async_baudrate+0x16>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400928:	00c9      	lsls	r1, r1, #3
  40092a:	00d2      	lsls	r2, r2, #3
  40092c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  400930:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400934:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400936:	1e5c      	subs	r4, r3, #1
  400938:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40093c:	428c      	cmp	r4, r1
  40093e:	d9d6      	bls.n	4008ee <usart_set_async_baudrate+0xa>
  400940:	e7e2      	b.n	400908 <usart_set_async_baudrate+0x24>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  400942:	f85d 4b04 	ldr.w	r4, [sp], #4
  400946:	4770      	bx	lr

00400948 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400948:	4b08      	ldr	r3, [pc, #32]	; (40096c <usart_reset+0x24>)
  40094a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40094e:	2300      	movs	r3, #0
  400950:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400952:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400954:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400956:	2388      	movs	r3, #136	; 0x88
  400958:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40095a:	2324      	movs	r3, #36	; 0x24
  40095c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  40095e:	f44f 7380 	mov.w	r3, #256	; 0x100
  400962:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  400964:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400968:	6003      	str	r3, [r0, #0]
  40096a:	4770      	bx	lr
  40096c:	55534100 	.word	0x55534100

00400970 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400970:	b570      	push	{r4, r5, r6, lr}
  400972:	4605      	mov	r5, r0
  400974:	460c      	mov	r4, r1
  400976:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400978:	4b0f      	ldr	r3, [pc, #60]	; (4009b8 <usart_init_rs232+0x48>)
  40097a:	4798      	blx	r3

	ul_reg_val = 0;
  40097c:	2200      	movs	r2, #0
  40097e:	4b0f      	ldr	r3, [pc, #60]	; (4009bc <usart_init_rs232+0x4c>)
  400980:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400982:	b19c      	cbz	r4, 4009ac <usart_init_rs232+0x3c>
  400984:	4628      	mov	r0, r5
  400986:	6821      	ldr	r1, [r4, #0]
  400988:	4632      	mov	r2, r6
  40098a:	4b0d      	ldr	r3, [pc, #52]	; (4009c0 <usart_init_rs232+0x50>)
  40098c:	4798      	blx	r3
  40098e:	4602      	mov	r2, r0
  400990:	b970      	cbnz	r0, 4009b0 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400992:	68a1      	ldr	r1, [r4, #8]
  400994:	6863      	ldr	r3, [r4, #4]
  400996:	4319      	orrs	r1, r3
  400998:	6923      	ldr	r3, [r4, #16]
  40099a:	4319      	orrs	r1, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40099c:	68e3      	ldr	r3, [r4, #12]
  40099e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009a0:	4906      	ldr	r1, [pc, #24]	; (4009bc <usart_init_rs232+0x4c>)
  4009a2:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  4009a4:	6869      	ldr	r1, [r5, #4]
  4009a6:	430b      	orrs	r3, r1
  4009a8:	606b      	str	r3, [r5, #4]

	return 0;
  4009aa:	e002      	b.n	4009b2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4009ac:	2201      	movs	r2, #1
  4009ae:	e000      	b.n	4009b2 <usart_init_rs232+0x42>
  4009b0:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4009b2:	4610      	mov	r0, r2
  4009b4:	bd70      	pop	{r4, r5, r6, pc}
  4009b6:	bf00      	nop
  4009b8:	00400949 	.word	0x00400949
  4009bc:	20000928 	.word	0x20000928
  4009c0:	004008e5 	.word	0x004008e5

004009c4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  4009c4:	2340      	movs	r3, #64	; 0x40
  4009c6:	6003      	str	r3, [r0, #0]
  4009c8:	4770      	bx	lr
  4009ca:	bf00      	nop

004009cc <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  4009cc:	2310      	movs	r3, #16
  4009ce:	6003      	str	r3, [r0, #0]
  4009d0:	4770      	bx	lr
  4009d2:	bf00      	nop

004009d4 <usart_set_rx_timeout>:
 * \param p_usart Pointer to a USART instance.
 * \param timeout The value of receive timeout.
 */
void usart_set_rx_timeout(Usart *p_usart, uint32_t timeout)
{
	p_usart->US_RTOR = timeout;
  4009d4:	6241      	str	r1, [r0, #36]	; 0x24
  4009d6:	4770      	bx	lr

004009d8 <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
  4009d8:	6081      	str	r1, [r0, #8]
  4009da:	4770      	bx	lr

004009dc <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
  4009dc:	60c1      	str	r1, [r0, #12]
  4009de:	4770      	bx	lr

004009e0 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
  4009e0:	6940      	ldr	r0, [r0, #20]
}
  4009e2:	4770      	bx	lr

004009e4 <usart_start_rx_timeout>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_start_rx_timeout(Usart *p_usart)
{
	p_usart->US_CR = US_CR_STTTO;
  4009e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4009e8:	6003      	str	r3, [r0, #0]
  4009ea:	4770      	bx	lr

004009ec <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4009ec:	6943      	ldr	r3, [r0, #20]
  4009ee:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4009f2:	bf1d      	ittte	ne
  4009f4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4009f8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4009fa:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4009fc:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4009fe:	4770      	bx	lr

00400a00 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a00:	6943      	ldr	r3, [r0, #20]
  400a02:	f013 0f01 	tst.w	r3, #1
  400a06:	d005      	beq.n	400a14 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a08:	6983      	ldr	r3, [r0, #24]
  400a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a0e:	600b      	str	r3, [r1, #0]

	return 0;
  400a10:	2000      	movs	r0, #0
  400a12:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400a14:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400a16:	4770      	bx	lr

00400a18 <usart_get_pdc_base>:
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  400a18:	4b18      	ldr	r3, [pc, #96]	; (400a7c <usart_get_pdc_base+0x64>)
  400a1a:	4298      	cmp	r0, r3
  400a1c:	d01f      	beq.n	400a5e <usart_get_pdc_base+0x46>
		p_pdc_base = PDC_USART0;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  400a1e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
  400a22:	4298      	cmp	r0, r3
  400a24:	d01d      	beq.n	400a62 <usart_get_pdc_base+0x4a>
		p_pdc_base = PDC_USART1;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
  400a26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  400a2a:	4298      	cmp	r0, r3
  400a2c:	d01b      	beq.n	400a66 <usart_get_pdc_base+0x4e>
		p_pdc_base = PDC_USART2;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART3
	else if (p_usart == USART3) {
  400a2e:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
  400a32:	4298      	cmp	r0, r3
  400a34:	d019      	beq.n	400a6a <usart_get_pdc_base+0x52>
		p_pdc_base = PDC_USART3;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART4
	else if (p_usart == USART4) {
  400a36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  400a3a:	4298      	cmp	r0, r3
  400a3c:	d017      	beq.n	400a6e <usart_get_pdc_base+0x56>
		p_pdc_base = PDC_USART4;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART5
	else if (p_usart == USART5) {
  400a3e:	f5a3 33a0 	sub.w	r3, r3, #81920	; 0x14000
  400a42:	4298      	cmp	r0, r3
  400a44:	d015      	beq.n	400a72 <usart_get_pdc_base+0x5a>
		p_pdc_base = PDC_USART5;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART6
	else if (p_usart == USART6) {
  400a46:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  400a4a:	4298      	cmp	r0, r3
  400a4c:	d013      	beq.n	400a76 <usart_get_pdc_base+0x5e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  400a4e:	f5a3 433f 	sub.w	r3, r3, #48896	; 0xbf00
  400a52:	4a0b      	ldr	r2, [pc, #44]	; (400a80 <usart_get_pdc_base+0x68>)
  400a54:	4290      	cmp	r0, r2
  400a56:	bf0c      	ite	eq
  400a58:	4618      	moveq	r0, r3
  400a5a:	2000      	movne	r0, #0
  400a5c:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
		p_pdc_base = PDC_USART0;
		return p_pdc_base;
  400a5e:	4809      	ldr	r0, [pc, #36]	; (400a84 <usart_get_pdc_base+0x6c>)
  400a60:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
		p_pdc_base = PDC_USART1;
		return p_pdc_base;
  400a62:	4809      	ldr	r0, [pc, #36]	; (400a88 <usart_get_pdc_base+0x70>)
  400a64:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
		p_pdc_base = PDC_USART2;
		return p_pdc_base;
  400a66:	4809      	ldr	r0, [pc, #36]	; (400a8c <usart_get_pdc_base+0x74>)
  400a68:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART3
	else if (p_usart == USART3) {
		p_pdc_base = PDC_USART3;
		return p_pdc_base;
  400a6a:	4809      	ldr	r0, [pc, #36]	; (400a90 <usart_get_pdc_base+0x78>)
  400a6c:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART4
	else if (p_usart == USART4) {
		p_pdc_base = PDC_USART4;
		return p_pdc_base;
  400a6e:	4809      	ldr	r0, [pc, #36]	; (400a94 <usart_get_pdc_base+0x7c>)
  400a70:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART5
	else if (p_usart == USART5) {
		p_pdc_base = PDC_USART5;
		return p_pdc_base;
  400a72:	4809      	ldr	r0, [pc, #36]	; (400a98 <usart_get_pdc_base+0x80>)
  400a74:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART6
	else if (p_usart == USART6) {
		p_pdc_base = PDC_USART6;
		return p_pdc_base;
  400a76:	4809      	ldr	r0, [pc, #36]	; (400a9c <usart_get_pdc_base+0x84>)
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
}
  400a78:	4770      	bx	lr
  400a7a:	bf00      	nop
  400a7c:	4000c200 	.word	0x4000c200
  400a80:	40034200 	.word	0x40034200
  400a84:	4000c300 	.word	0x4000c300
  400a88:	40020300 	.word	0x40020300
  400a8c:	40024300 	.word	0x40024300
  400a90:	40018300 	.word	0x40018300
  400a94:	4001c300 	.word	0x4001c300
  400a98:	40008300 	.word	0x40008300
  400a9c:	40040300 	.word	0x40040300

00400aa0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  400aa0:	e7fe      	b.n	400aa0 <Dummy_Handler>
  400aa2:	bf00      	nop

00400aa4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400aa4:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  400aa6:	4b2a      	ldr	r3, [pc, #168]	; (400b50 <Reset_Handler+0xac>)
  400aa8:	4a2a      	ldr	r2, [pc, #168]	; (400b54 <Reset_Handler+0xb0>)
  400aaa:	429a      	cmp	r2, r3
  400aac:	d003      	beq.n	400ab6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  400aae:	4b2a      	ldr	r3, [pc, #168]	; (400b58 <Reset_Handler+0xb4>)
  400ab0:	4a27      	ldr	r2, [pc, #156]	; (400b50 <Reset_Handler+0xac>)
  400ab2:	429a      	cmp	r2, r3
  400ab4:	d304      	bcc.n	400ac0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400ab6:	4b29      	ldr	r3, [pc, #164]	; (400b5c <Reset_Handler+0xb8>)
  400ab8:	4a29      	ldr	r2, [pc, #164]	; (400b60 <Reset_Handler+0xbc>)
  400aba:	429a      	cmp	r2, r3
  400abc:	d310      	bcc.n	400ae0 <Reset_Handler+0x3c>
  400abe:	e01b      	b.n	400af8 <Reset_Handler+0x54>
  400ac0:	4923      	ldr	r1, [pc, #140]	; (400b50 <Reset_Handler+0xac>)
  400ac2:	1d0a      	adds	r2, r1, #4
  400ac4:	4b27      	ldr	r3, [pc, #156]	; (400b64 <Reset_Handler+0xc0>)
  400ac6:	1a9b      	subs	r3, r3, r2
  400ac8:	f023 0303 	bic.w	r3, r3, #3
  400acc:	3304      	adds	r3, #4
  400ace:	4a21      	ldr	r2, [pc, #132]	; (400b54 <Reset_Handler+0xb0>)
  400ad0:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  400ad2:	f852 0b04 	ldr.w	r0, [r2], #4
  400ad6:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400ada:	429a      	cmp	r2, r3
  400adc:	d1f9      	bne.n	400ad2 <Reset_Handler+0x2e>
  400ade:	e7ea      	b.n	400ab6 <Reset_Handler+0x12>
  400ae0:	4b21      	ldr	r3, [pc, #132]	; (400b68 <Reset_Handler+0xc4>)
  400ae2:	4a22      	ldr	r2, [pc, #136]	; (400b6c <Reset_Handler+0xc8>)
  400ae4:	1ad2      	subs	r2, r2, r3
  400ae6:	f022 0203 	bic.w	r2, r2, #3
  400aea:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400aec:	3b04      	subs	r3, #4
                *pDest++ = 0;
  400aee:	2100      	movs	r1, #0
  400af0:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400af4:	4293      	cmp	r3, r2
  400af6:	d1fb      	bne.n	400af0 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400af8:	4b1d      	ldr	r3, [pc, #116]	; (400b70 <Reset_Handler+0xcc>)
  400afa:	f023 017f 	bic.w	r1, r3, #127	; 0x7f
  400afe:	4a1d      	ldr	r2, [pc, #116]	; (400b74 <Reset_Handler+0xd0>)
  400b00:	6091      	str	r1, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400b02:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400b06:	b672      	cpsid	i
  400b08:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400b0c:	2000      	movs	r0, #0
  400b0e:	491a      	ldr	r1, [pc, #104]	; (400b78 <Reset_Handler+0xd4>)
  400b10:	7008      	strb	r0, [r1, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400b12:	481a      	ldr	r0, [pc, #104]	; (400b7c <Reset_Handler+0xd8>)
  400b14:	6801      	ldr	r1, [r0, #0]
  400b16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400b1a:	6001      	str	r1, [r0, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400b1c:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400b20:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400b24:	b92a      	cbnz	r2, 400b32 <Reset_Handler+0x8e>
		cpu_irq_enable();
  400b26:	2101      	movs	r1, #1
  400b28:	4a13      	ldr	r2, [pc, #76]	; (400b78 <Reset_Handler+0xd4>)
  400b2a:	7011      	strb	r1, [r2, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400b2c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400b30:	b662      	cpsie	i

#if __FPU_USED
	fpu_enable();
#endif

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  400b32:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  400b36:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
  400b3a:	d204      	bcs.n	400b46 <Reset_Handler+0xa2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  400b3c:	4a0d      	ldr	r2, [pc, #52]	; (400b74 <Reset_Handler+0xd0>)
  400b3e:	6893      	ldr	r3, [r2, #8]
  400b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400b44:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  400b46:	4b0e      	ldr	r3, [pc, #56]	; (400b80 <Reset_Handler+0xdc>)
  400b48:	4798      	blx	r3

        /* Branch to main function */
        main();
  400b4a:	4b0e      	ldr	r3, [pc, #56]	; (400b84 <Reset_Handler+0xe0>)
  400b4c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400b4e:	e7fe      	b.n	400b4e <Reset_Handler+0xaa>
  400b50:	20000000 	.word	0x20000000
  400b54:	00407dfc 	.word	0x00407dfc
  400b58:	20000894 	.word	0x20000894
  400b5c:	2001aa68 	.word	0x2001aa68
  400b60:	20000898 	.word	0x20000898
  400b64:	20000897 	.word	0x20000897
  400b68:	2000089c 	.word	0x2000089c
  400b6c:	2001aa6b 	.word	0x2001aa6b
  400b70:	00400000 	.word	0x00400000
  400b74:	e000ed00 	.word	0xe000ed00
  400b78:	2000000c 	.word	0x2000000c
  400b7c:	e000ed88 	.word	0xe000ed88
  400b80:	004044d1 	.word	0x004044d1
  400b84:	004041a5 	.word	0x004041a5

00400b88 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400b88:	4b31      	ldr	r3, [pc, #196]	; (400c50 <SystemCoreClockUpdate+0xc8>)
  400b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b8c:	f003 0303 	and.w	r3, r3, #3
  400b90:	2b01      	cmp	r3, #1
  400b92:	d00f      	beq.n	400bb4 <SystemCoreClockUpdate+0x2c>
  400b94:	b113      	cbz	r3, 400b9c <SystemCoreClockUpdate+0x14>
  400b96:	2b02      	cmp	r3, #2
  400b98:	d029      	beq.n	400bee <SystemCoreClockUpdate+0x66>
  400b9a:	e042      	b.n	400c22 <SystemCoreClockUpdate+0x9a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400b9c:	4b2d      	ldr	r3, [pc, #180]	; (400c54 <SystemCoreClockUpdate+0xcc>)
  400b9e:	695b      	ldr	r3, [r3, #20]
  400ba0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ba4:	bf14      	ite	ne
  400ba6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400baa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400bae:	4b2a      	ldr	r3, [pc, #168]	; (400c58 <SystemCoreClockUpdate+0xd0>)
  400bb0:	601a      	str	r2, [r3, #0]
  400bb2:	e036      	b.n	400c22 <SystemCoreClockUpdate+0x9a>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400bb4:	4b26      	ldr	r3, [pc, #152]	; (400c50 <SystemCoreClockUpdate+0xc8>)
  400bb6:	6a1b      	ldr	r3, [r3, #32]
  400bb8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bbc:	d003      	beq.n	400bc6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400bbe:	4a27      	ldr	r2, [pc, #156]	; (400c5c <SystemCoreClockUpdate+0xd4>)
  400bc0:	4b25      	ldr	r3, [pc, #148]	; (400c58 <SystemCoreClockUpdate+0xd0>)
  400bc2:	601a      	str	r2, [r3, #0]
  400bc4:	e02d      	b.n	400c22 <SystemCoreClockUpdate+0x9a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400bc6:	4a26      	ldr	r2, [pc, #152]	; (400c60 <SystemCoreClockUpdate+0xd8>)
  400bc8:	4b23      	ldr	r3, [pc, #140]	; (400c58 <SystemCoreClockUpdate+0xd0>)
  400bca:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400bcc:	4b20      	ldr	r3, [pc, #128]	; (400c50 <SystemCoreClockUpdate+0xc8>)
  400bce:	6a1b      	ldr	r3, [r3, #32]
  400bd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bd4:	2b10      	cmp	r3, #16
  400bd6:	d002      	beq.n	400bde <SystemCoreClockUpdate+0x56>
  400bd8:	2b20      	cmp	r3, #32
  400bda:	d004      	beq.n	400be6 <SystemCoreClockUpdate+0x5e>
  400bdc:	e021      	b.n	400c22 <SystemCoreClockUpdate+0x9a>
			case CKGR_MOR_MOSCRCF_8_MHz:
				break;
			case CKGR_MOR_MOSCRCF_16_MHz:
				SystemCoreClock *= 2U;
  400bde:	4a21      	ldr	r2, [pc, #132]	; (400c64 <SystemCoreClockUpdate+0xdc>)
  400be0:	4b1d      	ldr	r3, [pc, #116]	; (400c58 <SystemCoreClockUpdate+0xd0>)
  400be2:	601a      	str	r2, [r3, #0]
				break;
  400be4:	e01d      	b.n	400c22 <SystemCoreClockUpdate+0x9a>
			case CKGR_MOR_MOSCRCF_24_MHz:
				SystemCoreClock *= 3U;
  400be6:	4a20      	ldr	r2, [pc, #128]	; (400c68 <SystemCoreClockUpdate+0xe0>)
  400be8:	4b1b      	ldr	r3, [pc, #108]	; (400c58 <SystemCoreClockUpdate+0xd0>)
  400bea:	601a      	str	r2, [r3, #0]
				break;
  400bec:	e019      	b.n	400c22 <SystemCoreClockUpdate+0x9a>
				break;
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400bee:	4b19      	ldr	r3, [pc, #100]	; (400c54 <SystemCoreClockUpdate+0xcc>)
  400bf0:	695b      	ldr	r3, [r3, #20]
  400bf2:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400bf6:	bf14      	ite	ne
  400bf8:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400bfc:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c00:	4b15      	ldr	r3, [pc, #84]	; (400c58 <SystemCoreClockUpdate+0xd0>)
  400c02:	601a      	str	r2, [r3, #0]
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  400c04:	4b12      	ldr	r3, [pc, #72]	; (400c50 <SystemCoreClockUpdate+0xc8>)
  400c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c08:	f003 0303 	and.w	r3, r3, #3
  400c0c:	2b02      	cmp	r3, #2
  400c0e:	d108      	bne.n	400c22 <SystemCoreClockUpdate+0x9a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  400c10:	4b0f      	ldr	r3, [pc, #60]	; (400c50 <SystemCoreClockUpdate+0xc8>)
  400c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400c14:	4910      	ldr	r1, [pc, #64]	; (400c58 <SystemCoreClockUpdate+0xd0>)
  400c16:	f3c3 420c 	ubfx	r2, r3, #16, #13
  400c1a:	680b      	ldr	r3, [r1, #0]
  400c1c:	fb02 3303 	mla	r3, r2, r3, r3
  400c20:	600b      	str	r3, [r1, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400c22:	4b0b      	ldr	r3, [pc, #44]	; (400c50 <SystemCoreClockUpdate+0xc8>)
  400c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c2a:	2b70      	cmp	r3, #112	; 0x70
  400c2c:	d107      	bne.n	400c3e <SystemCoreClockUpdate+0xb6>
		SystemCoreClock /= 3U;
  400c2e:	4a0a      	ldr	r2, [pc, #40]	; (400c58 <SystemCoreClockUpdate+0xd0>)
  400c30:	6813      	ldr	r3, [r2, #0]
  400c32:	490e      	ldr	r1, [pc, #56]	; (400c6c <SystemCoreClockUpdate+0xe4>)
  400c34:	fba1 1303 	umull	r1, r3, r1, r3
  400c38:	085b      	lsrs	r3, r3, #1
  400c3a:	6013      	str	r3, [r2, #0]
  400c3c:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c3e:	4b04      	ldr	r3, [pc, #16]	; (400c50 <SystemCoreClockUpdate+0xc8>)
  400c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400c42:	4905      	ldr	r1, [pc, #20]	; (400c58 <SystemCoreClockUpdate+0xd0>)
  400c44:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400c48:	680b      	ldr	r3, [r1, #0]
  400c4a:	40d3      	lsrs	r3, r2
  400c4c:	600b      	str	r3, [r1, #0]
  400c4e:	4770      	bx	lr
  400c50:	400e0400 	.word	0x400e0400
  400c54:	400e1410 	.word	0x400e1410
  400c58:	20000010 	.word	0x20000010
  400c5c:	00b71b00 	.word	0x00b71b00
  400c60:	007a1200 	.word	0x007a1200
  400c64:	00f42400 	.word	0x00f42400
  400c68:	016e3600 	.word	0x016e3600
  400c6c:	aaaaaaab 	.word	0xaaaaaaab

00400c70 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  400c70:	4b1d      	ldr	r3, [pc, #116]	; (400ce8 <system_init_flash+0x78>)
  400c72:	4298      	cmp	r0, r3
  400c74:	d804      	bhi.n	400c80 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c76:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c7a:	4b1c      	ldr	r3, [pc, #112]	; (400cec <system_init_flash+0x7c>)
  400c7c:	601a      	str	r2, [r3, #0]
  400c7e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  400c80:	4b1b      	ldr	r3, [pc, #108]	; (400cf0 <system_init_flash+0x80>)
  400c82:	4298      	cmp	r0, r3
  400c84:	d803      	bhi.n	400c8e <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c86:	4a1b      	ldr	r2, [pc, #108]	; (400cf4 <system_init_flash+0x84>)
  400c88:	4b18      	ldr	r3, [pc, #96]	; (400cec <system_init_flash+0x7c>)
  400c8a:	601a      	str	r2, [r3, #0]
  400c8c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  400c8e:	4b1a      	ldr	r3, [pc, #104]	; (400cf8 <system_init_flash+0x88>)
  400c90:	4298      	cmp	r0, r3
  400c92:	d803      	bhi.n	400c9c <system_init_flash+0x2c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c94:	4a19      	ldr	r2, [pc, #100]	; (400cfc <system_init_flash+0x8c>)
  400c96:	4b15      	ldr	r3, [pc, #84]	; (400cec <system_init_flash+0x7c>)
  400c98:	601a      	str	r2, [r3, #0]
  400c9a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  400c9c:	4b18      	ldr	r3, [pc, #96]	; (400d00 <system_init_flash+0x90>)
  400c9e:	4298      	cmp	r0, r3
  400ca0:	d803      	bhi.n	400caa <system_init_flash+0x3a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400ca2:	4a18      	ldr	r2, [pc, #96]	; (400d04 <system_init_flash+0x94>)
  400ca4:	4b11      	ldr	r3, [pc, #68]	; (400cec <system_init_flash+0x7c>)
  400ca6:	601a      	str	r2, [r3, #0]
  400ca8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  400caa:	4b17      	ldr	r3, [pc, #92]	; (400d08 <system_init_flash+0x98>)
  400cac:	4298      	cmp	r0, r3
  400cae:	d804      	bhi.n	400cba <system_init_flash+0x4a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400cb0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400cb4:	4b0d      	ldr	r3, [pc, #52]	; (400cec <system_init_flash+0x7c>)
  400cb6:	601a      	str	r2, [r3, #0]
  400cb8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_5) {
  400cba:	4b14      	ldr	r3, [pc, #80]	; (400d0c <system_init_flash+0x9c>)
  400cbc:	4298      	cmp	r0, r3
  400cbe:	d803      	bhi.n	400cc8 <system_init_flash+0x58>
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400cc0:	4a13      	ldr	r2, [pc, #76]	; (400d10 <system_init_flash+0xa0>)
  400cc2:	4b0a      	ldr	r3, [pc, #40]	; (400cec <system_init_flash+0x7c>)
  400cc4:	601a      	str	r2, [r3, #0]
  400cc6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_6) {
  400cc8:	4b12      	ldr	r3, [pc, #72]	; (400d14 <system_init_flash+0xa4>)
  400cca:	4298      	cmp	r0, r3
  400ccc:	d803      	bhi.n	400cd6 <system_init_flash+0x66>
		EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400cce:	4a12      	ldr	r2, [pc, #72]	; (400d18 <system_init_flash+0xa8>)
  400cd0:	4b06      	ldr	r3, [pc, #24]	; (400cec <system_init_flash+0x7c>)
  400cd2:	601a      	str	r2, [r3, #0]
  400cd4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_7) {
  400cd6:	4b11      	ldr	r3, [pc, #68]	; (400d1c <system_init_flash+0xac>)
  400cd8:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(7)|EEFC_FMR_CLOE;
  400cda:	bf94      	ite	ls
  400cdc:	4a10      	ldrls	r2, [pc, #64]	; (400d20 <system_init_flash+0xb0>)
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(8)|EEFC_FMR_CLOE;
  400cde:	4a11      	ldrhi	r2, [pc, #68]	; (400d24 <system_init_flash+0xb4>)
  400ce0:	4b02      	ldr	r3, [pc, #8]	; (400cec <system_init_flash+0x7c>)
  400ce2:	601a      	str	r2, [r3, #0]
  400ce4:	4770      	bx	lr
  400ce6:	bf00      	nop
  400ce8:	00d59f7f 	.word	0x00d59f7f
  400cec:	400e0a00 	.word	0x400e0a00
  400cf0:	01ab3eff 	.word	0x01ab3eff
  400cf4:	04000100 	.word	0x04000100
  400cf8:	0280de7f 	.word	0x0280de7f
  400cfc:	04000200 	.word	0x04000200
  400d00:	03567dff 	.word	0x03567dff
  400d04:	04000300 	.word	0x04000300
  400d08:	042c1d7f 	.word	0x042c1d7f
  400d0c:	0501bcff 	.word	0x0501bcff
  400d10:	04000500 	.word	0x04000500
  400d14:	05b8d7ff 	.word	0x05b8d7ff
  400d18:	04000600 	.word	0x04000600
  400d1c:	066ff2ff 	.word	0x066ff2ff
  400d20:	04000700 	.word	0x04000700
  400d24:	04000800 	.word	0x04000800

00400d28 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400d28:	4b09      	ldr	r3, [pc, #36]	; (400d50 <_sbrk+0x28>)
  400d2a:	681b      	ldr	r3, [r3, #0]
  400d2c:	b913      	cbnz	r3, 400d34 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400d2e:	4a09      	ldr	r2, [pc, #36]	; (400d54 <_sbrk+0x2c>)
  400d30:	4b07      	ldr	r3, [pc, #28]	; (400d50 <_sbrk+0x28>)
  400d32:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400d34:	4b06      	ldr	r3, [pc, #24]	; (400d50 <_sbrk+0x28>)
  400d36:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400d38:	181a      	adds	r2, r3, r0
  400d3a:	4907      	ldr	r1, [pc, #28]	; (400d58 <_sbrk+0x30>)
  400d3c:	4291      	cmp	r1, r2
  400d3e:	db04      	blt.n	400d4a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400d40:	4610      	mov	r0, r2
  400d42:	4a03      	ldr	r2, [pc, #12]	; (400d50 <_sbrk+0x28>)
  400d44:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400d46:	4618      	mov	r0, r3
  400d48:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400d4a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400d4e:	4770      	bx	lr
  400d50:	2000092c 	.word	0x2000092c
  400d54:	2001da68 	.word	0x2001da68
  400d58:	20027ffc 	.word	0x20027ffc

00400d5c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400d5c:	f04f 30ff 	mov.w	r0, #4294967295
  400d60:	4770      	bx	lr
  400d62:	bf00      	nop

00400d64 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400d68:	604b      	str	r3, [r1, #4]

	return 0;
}
  400d6a:	2000      	movs	r0, #0
  400d6c:	4770      	bx	lr
  400d6e:	bf00      	nop

00400d70 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400d70:	2001      	movs	r0, #1
  400d72:	4770      	bx	lr

00400d74 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400d74:	2000      	movs	r0, #0
  400d76:	4770      	bx	lr

00400d78 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  400d78:	f100 0308 	add.w	r3, r0, #8
  400d7c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400d7e:	f04f 32ff 	mov.w	r2, #4294967295
  400d82:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  400d84:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400d86:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  400d88:	2300      	movs	r3, #0
  400d8a:	6003      	str	r3, [r0, #0]
  400d8c:	4770      	bx	lr
  400d8e:	bf00      	nop

00400d90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400d90:	2300      	movs	r3, #0
  400d92:	6103      	str	r3, [r0, #16]
  400d94:	4770      	bx	lr
  400d96:	bf00      	nop

00400d98 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  400d98:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
  400d9a:	685a      	ldr	r2, [r3, #4]
  400d9c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  400d9e:	6842      	ldr	r2, [r0, #4]
  400da0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400da2:	685a      	ldr	r2, [r3, #4]
  400da4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  400da6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  400da8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400daa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400dac:	6803      	ldr	r3, [r0, #0]
  400dae:	3301      	adds	r3, #1
  400db0:	6003      	str	r3, [r0, #0]
  400db2:	4770      	bx	lr

00400db4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  400db4:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  400db6:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400db8:	f1b4 3fff 	cmp.w	r4, #4294967295
  400dbc:	d101      	bne.n	400dc2 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400dbe:	6903      	ldr	r3, [r0, #16]
  400dc0:	e00a      	b.n	400dd8 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  400dc2:	f100 0308 	add.w	r3, r0, #8
  400dc6:	68c2      	ldr	r2, [r0, #12]
  400dc8:	6812      	ldr	r2, [r2, #0]
  400dca:	4294      	cmp	r4, r2
  400dcc:	d304      	bcc.n	400dd8 <vListInsert+0x24>
  400dce:	685b      	ldr	r3, [r3, #4]
  400dd0:	685a      	ldr	r2, [r3, #4]
  400dd2:	6812      	ldr	r2, [r2, #0]
  400dd4:	4294      	cmp	r4, r2
  400dd6:	d2fa      	bcs.n	400dce <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400dd8:	685a      	ldr	r2, [r3, #4]
  400dda:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400ddc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400dde:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  400de0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400de2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400de4:	6803      	ldr	r3, [r0, #0]
  400de6:	3301      	adds	r3, #1
  400de8:	6003      	str	r3, [r0, #0]
}
  400dea:	f85d 4b04 	ldr.w	r4, [sp], #4
  400dee:	4770      	bx	lr

00400df0 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400df0:	6843      	ldr	r3, [r0, #4]
  400df2:	6882      	ldr	r2, [r0, #8]
  400df4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400df6:	6883      	ldr	r3, [r0, #8]
  400df8:	6842      	ldr	r2, [r0, #4]
  400dfa:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  400dfc:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400dfe:	685a      	ldr	r2, [r3, #4]
  400e00:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400e02:	bf04      	itt	eq
  400e04:	6882      	ldreq	r2, [r0, #8]
  400e06:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  400e08:	2200      	movs	r2, #0
  400e0a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400e0c:	681a      	ldr	r2, [r3, #0]
  400e0e:	3a01      	subs	r2, #1
  400e10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400e12:	6818      	ldr	r0, [r3, #0]
}
  400e14:	4770      	bx	lr
  400e16:	bf00      	nop

00400e18 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  400e18:	4803      	ldr	r0, [pc, #12]	; (400e28 <prvPortStartFirstTask+0x10>)
  400e1a:	6800      	ldr	r0, [r0, #0]
  400e1c:	6800      	ldr	r0, [r0, #0]
  400e1e:	f380 8808 	msr	MSP, r0
  400e22:	b662      	cpsie	i
  400e24:	df00      	svc	0
  400e26:	bf00      	nop
  400e28:	e000ed08 	.word	0xe000ed08

00400e2c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400e2c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400e3c <vPortEnableVFP+0x10>
  400e30:	6801      	ldr	r1, [r0, #0]
  400e32:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400e36:	6001      	str	r1, [r0, #0]
  400e38:	4770      	bx	lr
  400e3a:	0000      	.short	0x0000
  400e3c:	e000ed88 	.word	0xe000ed88

00400e40 <pxPortInitialiseStack>:
	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  400e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400e44:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400e48:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;    /* LR */
  400e4c:	2300      	movs	r3, #0
  400e4e:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  400e52:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400e56:	f06f 0302 	mvn.w	r3, #2
  400e5a:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  400e5e:	3844      	subs	r0, #68	; 0x44
  400e60:	4770      	bx	lr
  400e62:	bf00      	nop

00400e64 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  400e64:	4b05      	ldr	r3, [pc, #20]	; (400e7c <pxCurrentTCBConst2>)
  400e66:	6819      	ldr	r1, [r3, #0]
  400e68:	6808      	ldr	r0, [r1, #0]
  400e6a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e6e:	f380 8809 	msr	PSP, r0
  400e72:	f04f 0000 	mov.w	r0, #0
  400e76:	f380 8811 	msr	BASEPRI, r0
  400e7a:	4770      	bx	lr

00400e7c <pxCurrentTCBConst2>:
  400e7c:	20018ab8 	.word	0x20018ab8

00400e80 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e84:	4b01      	ldr	r3, [pc, #4]	; (400e8c <vPortYieldFromISR+0xc>)
  400e86:	601a      	str	r2, [r3, #0]
  400e88:	4770      	bx	lr
  400e8a:	bf00      	nop
  400e8c:	e000ed04 	.word	0xe000ed04

00400e90 <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  400e90:	f3ef 8011 	mrs	r0, BASEPRI
  400e94:	f04f 0150 	mov.w	r1, #80	; 0x50
  400e98:	f381 8811 	msr	BASEPRI, r1
  400e9c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
}
  400e9e:	2000      	movs	r0, #0

00400ea0 <vPortEnterCritical>:
}

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400ea0:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  400ea2:	4b03      	ldr	r3, [pc, #12]	; (400eb0 <vPortEnterCritical+0x10>)
  400ea4:	4798      	blx	r3
	uxCriticalNesting++;
  400ea6:	4a03      	ldr	r2, [pc, #12]	; (400eb4 <vPortEnterCritical+0x14>)
  400ea8:	6813      	ldr	r3, [r2, #0]
  400eaa:	3301      	adds	r3, #1
  400eac:	6013      	str	r3, [r2, #0]
  400eae:	bd08      	pop	{r3, pc}
  400eb0:	00400e91 	.word	0x00400e91
  400eb4:	20000014 	.word	0x20000014

00400eb8 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  400eb8:	f380 8811 	msr	BASEPRI, r0
  400ebc:	4770      	bx	lr
  400ebe:	bf00      	nop

00400ec0 <vPortExitCritical>:
}

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  400ec0:	b508      	push	{r3, lr}
	uxCriticalNesting--;
  400ec2:	4a04      	ldr	r2, [pc, #16]	; (400ed4 <vPortExitCritical+0x14>)
  400ec4:	6813      	ldr	r3, [r2, #0]
  400ec6:	3b01      	subs	r3, #1
  400ec8:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  400eca:	b913      	cbnz	r3, 400ed2 <vPortExitCritical+0x12>
		portENABLE_INTERRUPTS();
  400ecc:	2000      	movs	r0, #0
  400ece:	4b02      	ldr	r3, [pc, #8]	; (400ed8 <vPortExitCritical+0x18>)
  400ed0:	4798      	blx	r3
  400ed2:	bd08      	pop	{r3, pc}
  400ed4:	20000014 	.word	0x20000014
  400ed8:	00400eb9 	.word	0x00400eb9

00400edc <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  400edc:	f3ef 8009 	mrs	r0, PSP
  400ee0:	4b11      	ldr	r3, [pc, #68]	; (400f28 <pxCurrentTCBConst>)
  400ee2:	681a      	ldr	r2, [r3, #0]
  400ee4:	f01e 0f10 	tst.w	lr, #16
  400ee8:	bf08      	it	eq
  400eea:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400eee:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ef2:	6010      	str	r0, [r2, #0]
  400ef4:	e92d 4008 	stmdb	sp!, {r3, lr}
  400ef8:	f04f 0050 	mov.w	r0, #80	; 0x50
  400efc:	f380 8811 	msr	BASEPRI, r0
  400f00:	f000 fed8 	bl	401cb4 <vTaskSwitchContext>
  400f04:	f04f 0000 	mov.w	r0, #0
  400f08:	f380 8811 	msr	BASEPRI, r0
  400f0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400f10:	6819      	ldr	r1, [r3, #0]
  400f12:	6808      	ldr	r0, [r1, #0]
  400f14:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f18:	f01e 0f10 	tst.w	lr, #16
  400f1c:	bf08      	it	eq
  400f1e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400f22:	f380 8809 	msr	PSP, r0
  400f26:	4770      	bx	lr

00400f28 <pxCurrentTCBConst>:
  400f28:	20018ab8 	.word	0x20018ab8

00400f2c <SysTick_Handler>:
	);
}

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  400f2c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f32:	4b05      	ldr	r3, [pc, #20]	; (400f48 <SysTick_Handler+0x1c>)
  400f34:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  400f36:	4b05      	ldr	r3, [pc, #20]	; (400f4c <SysTick_Handler+0x20>)
  400f38:	4798      	blx	r3
	{
		vTaskIncrementTick();
  400f3a:	4b05      	ldr	r3, [pc, #20]	; (400f50 <SysTick_Handler+0x24>)
  400f3c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  400f3e:	2000      	movs	r0, #0
  400f40:	4b04      	ldr	r3, [pc, #16]	; (400f54 <SysTick_Handler+0x28>)
  400f42:	4798      	blx	r3
  400f44:	bd08      	pop	{r3, pc}
  400f46:	bf00      	nop
  400f48:	e000ed04 	.word	0xe000ed04
  400f4c:	00400e91 	.word	0x00400e91
  400f50:	004019f9 	.word	0x004019f9
  400f54:	00400eb9 	.word	0x00400eb9

00400f58 <vPortSetupTimerInterrupt>:
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  400f58:	4a03      	ldr	r2, [pc, #12]	; (400f68 <vPortSetupTimerInterrupt+0x10>)
  400f5a:	4b04      	ldr	r3, [pc, #16]	; (400f6c <vPortSetupTimerInterrupt+0x14>)
  400f5c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400f5e:	2207      	movs	r2, #7
  400f60:	3b04      	subs	r3, #4
  400f62:	601a      	str	r2, [r3, #0]
  400f64:	4770      	bx	lr
  400f66:	bf00      	nop
  400f68:	0001d4bb 	.word	0x0001d4bb
  400f6c:	e000e014 	.word	0xe000e014

00400f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  400f70:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400f72:	4b0c      	ldr	r3, [pc, #48]	; (400fa4 <xPortStartScheduler+0x34>)
  400f74:	681a      	ldr	r2, [r3, #0]
  400f76:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  400f7a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400f7c:	681a      	ldr	r2, [r3, #0]
  400f7e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  400f82:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  400f84:	4b08      	ldr	r3, [pc, #32]	; (400fa8 <xPortStartScheduler+0x38>)
  400f86:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400f88:	2400      	movs	r4, #0
  400f8a:	4b08      	ldr	r3, [pc, #32]	; (400fac <xPortStartScheduler+0x3c>)
  400f8c:	601c      	str	r4, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400f8e:	4b08      	ldr	r3, [pc, #32]	; (400fb0 <xPortStartScheduler+0x40>)
  400f90:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  400f92:	4a08      	ldr	r2, [pc, #32]	; (400fb4 <xPortStartScheduler+0x44>)
  400f94:	6813      	ldr	r3, [r2, #0]
  400f96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400f9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400f9c:	4b06      	ldr	r3, [pc, #24]	; (400fb8 <xPortStartScheduler+0x48>)
  400f9e:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
  400fa0:	4620      	mov	r0, r4
  400fa2:	bd10      	pop	{r4, pc}
  400fa4:	e000ed20 	.word	0xe000ed20
  400fa8:	00400f59 	.word	0x00400f59
  400fac:	20000014 	.word	0x20000014
  400fb0:	00400e2d 	.word	0x00400e2d
  400fb4:	e000ef34 	.word	0xe000ef34
  400fb8:	00400e19 	.word	0x00400e19

00400fbc <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400fbc:	4a13      	ldr	r2, [pc, #76]	; (40100c <prvInsertBlockIntoFreeList+0x50>)
  400fbe:	e000      	b.n	400fc2 <prvInsertBlockIntoFreeList+0x6>
  400fc0:	461a      	mov	r2, r3
  400fc2:	6813      	ldr	r3, [r2, #0]
  400fc4:	4283      	cmp	r3, r0
  400fc6:	d3fb      	bcc.n	400fc0 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400fc8:	b430      	push	{r4, r5}
  400fca:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  400fcc:	6854      	ldr	r4, [r2, #4]
  400fce:	1915      	adds	r5, r2, r4
  400fd0:	4285      	cmp	r5, r0
  400fd2:	d103      	bne.n	400fdc <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400fd4:	6868      	ldr	r0, [r5, #4]
  400fd6:	4404      	add	r4, r0
  400fd8:	6054      	str	r4, [r2, #4]
  400fda:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  400fdc:	6842      	ldr	r2, [r0, #4]
  400fde:	1884      	adds	r4, r0, r2
  400fe0:	429c      	cmp	r4, r3
  400fe2:	d10c      	bne.n	400ffe <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  400fe4:	4b0a      	ldr	r3, [pc, #40]	; (401010 <prvInsertBlockIntoFreeList+0x54>)
  400fe6:	681b      	ldr	r3, [r3, #0]
  400fe8:	429c      	cmp	r4, r3
  400fea:	d006      	beq.n	400ffa <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  400fec:	6863      	ldr	r3, [r4, #4]
  400fee:	441a      	add	r2, r3
  400ff0:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  400ff2:	680b      	ldr	r3, [r1, #0]
  400ff4:	681b      	ldr	r3, [r3, #0]
  400ff6:	6003      	str	r3, [r0, #0]
  400ff8:	e002      	b.n	401000 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  400ffa:	6004      	str	r4, [r0, #0]
  400ffc:	e000      	b.n	401000 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  400ffe:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  401000:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  401002:	bf18      	it	ne
  401004:	6008      	strne	r0, [r1, #0]
	}
}
  401006:	bc30      	pop	{r4, r5}
  401008:	4770      	bx	lr
  40100a:	bf00      	nop
  40100c:	20018934 	.word	0x20018934
  401010:	20018930 	.word	0x20018930

00401014 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401014:	b538      	push	{r3, r4, r5, lr}
  401016:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
  401018:	4b2c      	ldr	r3, [pc, #176]	; (4010cc <pvPortMalloc+0xb8>)
  40101a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  40101c:	4b2c      	ldr	r3, [pc, #176]	; (4010d0 <pvPortMalloc+0xbc>)
  40101e:	681b      	ldr	r3, [r3, #0]
  401020:	b9ab      	cbnz	r3, 40104e <pvPortMalloc+0x3a>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  401022:	4a2c      	ldr	r2, [pc, #176]	; (4010d4 <pvPortMalloc+0xc0>)
  401024:	4b2c      	ldr	r3, [pc, #176]	; (4010d8 <pvPortMalloc+0xc4>)
  401026:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
  401028:	2100      	movs	r1, #0
  40102a:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
  40102c:	f503 32bf 	add.w	r2, r3, #97792	; 0x17e00
  401030:	f502 70f8 	add.w	r0, r2, #496	; 0x1f0
  401034:	4d26      	ldr	r5, [pc, #152]	; (4010d0 <pvPortMalloc+0xbc>)
  401036:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
  401038:	f8c2 11f4 	str.w	r1, [r2, #500]	; 0x1f4
	pxEnd->pxNextFreeBlock = NULL;
  40103c:	f8c2 11f0 	str.w	r1, [r2, #496]	; 0x1f0

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  401040:	4a26      	ldr	r2, [pc, #152]	; (4010dc <pvPortMalloc+0xc8>)
  401042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  401044:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  401046:	4a26      	ldr	r2, [pc, #152]	; (4010e0 <pvPortMalloc+0xcc>)
  401048:	6813      	ldr	r3, [r2, #0]
  40104a:	3b10      	subs	r3, #16
  40104c:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  40104e:	2c00      	cmp	r4, #0
  401050:	d036      	beq.n	4010c0 <pvPortMalloc+0xac>
		{
			xWantedSize += heapSTRUCT_SIZE;
  401052:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  401056:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40105a:	bf1c      	itt	ne
  40105c:	f022 0207 	bicne.w	r2, r2, #7
  401060:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  401062:	1e51      	subs	r1, r2, #1
  401064:	4b1f      	ldr	r3, [pc, #124]	; (4010e4 <pvPortMalloc+0xd0>)
  401066:	4299      	cmp	r1, r3
  401068:	d827      	bhi.n	4010ba <pvPortMalloc+0xa6>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
  40106a:	491a      	ldr	r1, [pc, #104]	; (4010d4 <pvPortMalloc+0xc0>)
  40106c:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40106e:	e001      	b.n	401074 <pvPortMalloc+0x60>
  401070:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
  401072:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  401074:	6863      	ldr	r3, [r4, #4]
  401076:	429a      	cmp	r2, r3
  401078:	d902      	bls.n	401080 <pvPortMalloc+0x6c>
  40107a:	6823      	ldr	r3, [r4, #0]
  40107c:	2b00      	cmp	r3, #0
  40107e:	d1f7      	bne.n	401070 <pvPortMalloc+0x5c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  401080:	4b13      	ldr	r3, [pc, #76]	; (4010d0 <pvPortMalloc+0xbc>)
  401082:	681b      	ldr	r3, [r3, #0]
  401084:	429c      	cmp	r4, r3
  401086:	d018      	beq.n	4010ba <pvPortMalloc+0xa6>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  401088:	680d      	ldr	r5, [r1, #0]
  40108a:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  40108c:	6823      	ldr	r3, [r4, #0]
  40108e:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  401090:	6863      	ldr	r3, [r4, #4]
  401092:	1a9b      	subs	r3, r3, r2
  401094:	2b20      	cmp	r3, #32
  401096:	d904      	bls.n	4010a2 <pvPortMalloc+0x8e>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  401098:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40109a:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
  40109c:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  40109e:	4b12      	ldr	r3, [pc, #72]	; (4010e8 <pvPortMalloc+0xd4>)
  4010a0:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  4010a2:	4a0f      	ldr	r2, [pc, #60]	; (4010e0 <pvPortMalloc+0xcc>)
  4010a4:	6813      	ldr	r3, [r2, #0]
  4010a6:	6861      	ldr	r1, [r4, #4]
  4010a8:	1a5b      	subs	r3, r3, r1
  4010aa:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  4010ac:	4b0f      	ldr	r3, [pc, #60]	; (4010ec <pvPortMalloc+0xd8>)
  4010ae:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4010b0:	b94d      	cbnz	r5, 4010c6 <pvPortMalloc+0xb2>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  4010b2:	4b0f      	ldr	r3, [pc, #60]	; (4010f0 <pvPortMalloc+0xdc>)
  4010b4:	4798      	blx	r3
  4010b6:	2500      	movs	r5, #0
  4010b8:	e005      	b.n	4010c6 <pvPortMalloc+0xb2>

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
  4010ba:	4b0c      	ldr	r3, [pc, #48]	; (4010ec <pvPortMalloc+0xd8>)
  4010bc:	4798      	blx	r3
  4010be:	e7f8      	b.n	4010b2 <pvPortMalloc+0x9e>
  4010c0:	4b0a      	ldr	r3, [pc, #40]	; (4010ec <pvPortMalloc+0xd8>)
  4010c2:	4798      	blx	r3
  4010c4:	e7f5      	b.n	4010b2 <pvPortMalloc+0x9e>
		}
	}
	#endif

	return pvReturn;
}
  4010c6:	4628      	mov	r0, r5
  4010c8:	bd38      	pop	{r3, r4, r5, pc}
  4010ca:	bf00      	nop
  4010cc:	00401981 	.word	0x00401981
  4010d0:	20018930 	.word	0x20018930
  4010d4:	20018934 	.word	0x20018934
  4010d8:	20000930 	.word	0x20000930
  4010dc:	00017ff0 	.word	0x00017ff0
  4010e0:	20000018 	.word	0x20000018
  4010e4:	00017ffe 	.word	0x00017ffe
  4010e8:	00400fbd 	.word	0x00400fbd
  4010ec:	00401b25 	.word	0x00401b25
  4010f0:	00404339 	.word	0x00404339

004010f4 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
  4010f4:	b180      	cbz	r0, 401118 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  4010f6:	b510      	push	{r4, lr}
  4010f8:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
  4010fa:	4b08      	ldr	r3, [pc, #32]	; (40111c <vPortFree+0x28>)
  4010fc:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4010fe:	4a08      	ldr	r2, [pc, #32]	; (401120 <vPortFree+0x2c>)
  401100:	6811      	ldr	r1, [r2, #0]
  401102:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  401106:	440b      	add	r3, r1
  401108:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  40110a:	f1a4 0010 	sub.w	r0, r4, #16
  40110e:	4b05      	ldr	r3, [pc, #20]	; (401124 <vPortFree+0x30>)
  401110:	4798      	blx	r3
		}
		xTaskResumeAll();
  401112:	4b05      	ldr	r3, [pc, #20]	; (401128 <vPortFree+0x34>)
  401114:	4798      	blx	r3
  401116:	bd10      	pop	{r4, pc}
  401118:	4770      	bx	lr
  40111a:	bf00      	nop
  40111c:	00401981 	.word	0x00401981
  401120:	20000018 	.word	0x20000018
  401124:	00400fbd 	.word	0x00400fbd
  401128:	00401b25 	.word	0x00401b25

0040112c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  40112c:	b510      	push	{r4, lr}
  40112e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  401130:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401132:	b93b      	cbnz	r3, 401144 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401134:	6803      	ldr	r3, [r0, #0]
  401136:	bb1b      	cbnz	r3, 401180 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401138:	6840      	ldr	r0, [r0, #4]
  40113a:	4b13      	ldr	r3, [pc, #76]	; (401188 <prvCopyDataToQueue+0x5c>)
  40113c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40113e:	2300      	movs	r3, #0
  401140:	6063      	str	r3, [r4, #4]
  401142:	e01d      	b.n	401180 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  401144:	b96a      	cbnz	r2, 401162 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  401146:	6880      	ldr	r0, [r0, #8]
  401148:	461a      	mov	r2, r3
  40114a:	4b10      	ldr	r3, [pc, #64]	; (40118c <prvCopyDataToQueue+0x60>)
  40114c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40114e:	68a2      	ldr	r2, [r4, #8]
  401150:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401152:	4413      	add	r3, r2
  401154:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  401156:	6862      	ldr	r2, [r4, #4]
  401158:	4293      	cmp	r3, r2
  40115a:	d311      	bcc.n	401180 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40115c:	6823      	ldr	r3, [r4, #0]
  40115e:	60a3      	str	r3, [r4, #8]
  401160:	e00e      	b.n	401180 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  401162:	68c0      	ldr	r0, [r0, #12]
  401164:	461a      	mov	r2, r3
  401166:	4b09      	ldr	r3, [pc, #36]	; (40118c <prvCopyDataToQueue+0x60>)
  401168:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  40116a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40116c:	425b      	negs	r3, r3
  40116e:	68e2      	ldr	r2, [r4, #12]
  401170:	441a      	add	r2, r3
  401172:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  401174:	6821      	ldr	r1, [r4, #0]
  401176:	428a      	cmp	r2, r1
  401178:	d202      	bcs.n	401180 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40117a:	6862      	ldr	r2, [r4, #4]
  40117c:	4413      	add	r3, r2
  40117e:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401182:	3301      	adds	r3, #1
  401184:	63a3      	str	r3, [r4, #56]	; 0x38
  401186:	bd10      	pop	{r4, pc}
  401188:	004020a1 	.word	0x004020a1
  40118c:	004045ad 	.word	0x004045ad

00401190 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  401190:	b538      	push	{r3, r4, r5, lr}
  401192:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  401194:	6800      	ldr	r0, [r0, #0]
  401196:	b158      	cbz	r0, 4011b0 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  401198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  40119a:	68dc      	ldr	r4, [r3, #12]
  40119c:	4414      	add	r4, r2
  40119e:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  4011a0:	685d      	ldr	r5, [r3, #4]
  4011a2:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  4011a4:	bf28      	it	cs
  4011a6:	60d8      	strcs	r0, [r3, #12]
  4011a8:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  4011aa:	68d9      	ldr	r1, [r3, #12]
  4011ac:	4b01      	ldr	r3, [pc, #4]	; (4011b4 <prvCopyDataFromQueue+0x24>)
  4011ae:	4798      	blx	r3
  4011b0:	bd38      	pop	{r3, r4, r5, pc}
  4011b2:	bf00      	nop
  4011b4:	004045ad 	.word	0x004045ad

004011b8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  4011b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011ba:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  4011bc:	4b1e      	ldr	r3, [pc, #120]	; (401238 <prvUnlockQueue+0x80>)
  4011be:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4011c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011c2:	2b00      	cmp	r3, #0
  4011c4:	dd13      	ble.n	4011ee <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4011c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011c8:	b91b      	cbnz	r3, 4011d2 <prvUnlockQueue+0x1a>
  4011ca:	e010      	b.n	4011ee <prvUnlockQueue+0x36>
  4011cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011ce:	b923      	cbnz	r3, 4011da <prvUnlockQueue+0x22>
  4011d0:	e00d      	b.n	4011ee <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011d2:	f104 0624 	add.w	r6, r4, #36	; 0x24
  4011d6:	4d19      	ldr	r5, [pc, #100]	; (40123c <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  4011d8:	4f19      	ldr	r7, [pc, #100]	; (401240 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011da:	4630      	mov	r0, r6
  4011dc:	47a8      	blx	r5
  4011de:	b100      	cbz	r0, 4011e2 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  4011e0:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
  4011e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011e4:	3b01      	subs	r3, #1
  4011e6:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4011e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011ea:	2b00      	cmp	r3, #0
  4011ec:	dcee      	bgt.n	4011cc <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  4011ee:	f04f 33ff 	mov.w	r3, #4294967295
  4011f2:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  4011f4:	4b13      	ldr	r3, [pc, #76]	; (401244 <prvUnlockQueue+0x8c>)
  4011f6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  4011f8:	4b0f      	ldr	r3, [pc, #60]	; (401238 <prvUnlockQueue+0x80>)
  4011fa:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4011fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4011fe:	2b00      	cmp	r3, #0
  401200:	dd13      	ble.n	40122a <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401202:	6923      	ldr	r3, [r4, #16]
  401204:	b91b      	cbnz	r3, 40120e <prvUnlockQueue+0x56>
  401206:	e010      	b.n	40122a <prvUnlockQueue+0x72>
  401208:	6923      	ldr	r3, [r4, #16]
  40120a:	b923      	cbnz	r3, 401216 <prvUnlockQueue+0x5e>
  40120c:	e00d      	b.n	40122a <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40120e:	f104 0610 	add.w	r6, r4, #16
  401212:	4d0a      	ldr	r5, [pc, #40]	; (40123c <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
  401214:	4f0a      	ldr	r7, [pc, #40]	; (401240 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401216:	4630      	mov	r0, r6
  401218:	47a8      	blx	r5
  40121a:	b100      	cbz	r0, 40121e <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
  40121c:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
  40121e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401220:	3b01      	subs	r3, #1
  401222:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401224:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401226:	2b00      	cmp	r3, #0
  401228:	dcee      	bgt.n	401208 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  40122a:	f04f 33ff 	mov.w	r3, #4294967295
  40122e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  401230:	4b04      	ldr	r3, [pc, #16]	; (401244 <prvUnlockQueue+0x8c>)
  401232:	4798      	blx	r3
  401234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401236:	bf00      	nop
  401238:	00400ea1 	.word	0x00400ea1
  40123c:	00401e89 	.word	0x00401e89
  401240:	00401fcd 	.word	0x00401fcd
  401244:	00400ec1 	.word	0x00400ec1

00401248 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  401248:	b538      	push	{r3, r4, r5, lr}
  40124a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
  40124c:	4604      	mov	r4, r0
  40124e:	b920      	cbnz	r0, 40125a <xQueueGenericReset+0x12>
  401250:	4817      	ldr	r0, [pc, #92]	; (4012b0 <xQueueGenericReset+0x68>)
  401252:	f44f 718f 	mov.w	r1, #286	; 0x11e
  401256:	4b17      	ldr	r3, [pc, #92]	; (4012b4 <xQueueGenericReset+0x6c>)
  401258:	4798      	blx	r3

	taskENTER_CRITICAL();
  40125a:	4b17      	ldr	r3, [pc, #92]	; (4012b8 <xQueueGenericReset+0x70>)
  40125c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40125e:	6822      	ldr	r2, [r4, #0]
  401260:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401262:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401264:	fb03 f301 	mul.w	r3, r3, r1
  401268:	18d0      	adds	r0, r2, r3
  40126a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  40126c:	2000      	movs	r0, #0
  40126e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401270:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  401272:	1a5b      	subs	r3, r3, r1
  401274:	4413      	add	r3, r2
  401276:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401278:	f04f 33ff 	mov.w	r3, #4294967295
  40127c:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  40127e:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  401280:	b955      	cbnz	r5, 401298 <xQueueGenericReset+0x50>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401282:	6923      	ldr	r3, [r4, #16]
  401284:	b17b      	cbz	r3, 4012a6 <xQueueGenericReset+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401286:	f104 0010 	add.w	r0, r4, #16
  40128a:	4b0c      	ldr	r3, [pc, #48]	; (4012bc <xQueueGenericReset+0x74>)
  40128c:	4798      	blx	r3
  40128e:	2801      	cmp	r0, #1
  401290:	d109      	bne.n	4012a6 <xQueueGenericReset+0x5e>
				{
					portYIELD_WITHIN_API();
  401292:	4b0b      	ldr	r3, [pc, #44]	; (4012c0 <xQueueGenericReset+0x78>)
  401294:	4798      	blx	r3
  401296:	e006      	b.n	4012a6 <xQueueGenericReset+0x5e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401298:	f104 0010 	add.w	r0, r4, #16
  40129c:	4d09      	ldr	r5, [pc, #36]	; (4012c4 <xQueueGenericReset+0x7c>)
  40129e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4012a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4012a4:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  4012a6:	4b08      	ldr	r3, [pc, #32]	; (4012c8 <xQueueGenericReset+0x80>)
  4012a8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  4012aa:	2001      	movs	r0, #1
  4012ac:	bd38      	pop	{r3, r4, r5, pc}
  4012ae:	bf00      	nop
  4012b0:	004075c4 	.word	0x004075c4
  4012b4:	00404419 	.word	0x00404419
  4012b8:	00400ea1 	.word	0x00400ea1
  4012bc:	00401e89 	.word	0x00401e89
  4012c0:	00400e81 	.word	0x00400e81
  4012c4:	00400d79 	.word	0x00400d79
  4012c8:	00400ec1 	.word	0x00400ec1

004012cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  4012ce:	b1d0      	cbz	r0, 401306 <xQueueGenericCreate+0x3a>
  4012d0:	460d      	mov	r5, r1
  4012d2:	4617      	mov	r7, r2
  4012d4:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  4012d6:	2050      	movs	r0, #80	; 0x50
  4012d8:	4b0f      	ldr	r3, [pc, #60]	; (401318 <xQueueGenericCreate+0x4c>)
  4012da:	4798      	blx	r3
		if( pxNewQueue != NULL )
  4012dc:	4604      	mov	r4, r0
  4012de:	b190      	cbz	r0, 401306 <xQueueGenericCreate+0x3a>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  4012e0:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  4012e4:	3001      	adds	r0, #1
  4012e6:	4b0c      	ldr	r3, [pc, #48]	; (401318 <xQueueGenericCreate+0x4c>)
  4012e8:	4798      	blx	r3
  4012ea:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
  4012ec:	b140      	cbz	r0, 401300 <xQueueGenericCreate+0x34>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  4012ee:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  4012f0:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  4012f2:	4620      	mov	r0, r4
  4012f4:	2101      	movs	r1, #1
  4012f6:	4b09      	ldr	r3, [pc, #36]	; (40131c <xQueueGenericCreate+0x50>)
  4012f8:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  4012fa:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
  4012fe:	e008      	b.n	401312 <xQueueGenericCreate+0x46>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  401300:	4620      	mov	r0, r4
  401302:	4b07      	ldr	r3, [pc, #28]	; (401320 <xQueueGenericCreate+0x54>)
  401304:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  401306:	4807      	ldr	r0, [pc, #28]	; (401324 <xQueueGenericCreate+0x58>)
  401308:	f44f 71ba 	mov.w	r1, #372	; 0x174
  40130c:	4b06      	ldr	r3, [pc, #24]	; (401328 <xQueueGenericCreate+0x5c>)
  40130e:	4798      	blx	r3
  401310:	2400      	movs	r4, #0

	return xReturn;
}
  401312:	4620      	mov	r0, r4
  401314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401316:	bf00      	nop
  401318:	00401015 	.word	0x00401015
  40131c:	00401249 	.word	0x00401249
  401320:	004010f5 	.word	0x004010f5
  401324:	004075c4 	.word	0x004075c4
  401328:	00404419 	.word	0x00404419

0040132c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  40132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401330:	b085      	sub	sp, #20
  401332:	468b      	mov	fp, r1
  401334:	9201      	str	r2, [sp, #4]
  401336:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  401338:	4604      	mov	r4, r0
  40133a:	b920      	cbnz	r0, 401346 <xQueueGenericSend+0x1a>
  40133c:	483a      	ldr	r0, [pc, #232]	; (401428 <xQueueGenericSend+0xfc>)
  40133e:	f240 214b 	movw	r1, #587	; 0x24b
  401342:	4b3a      	ldr	r3, [pc, #232]	; (40142c <xQueueGenericSend+0x100>)
  401344:	4798      	blx	r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401346:	f1bb 0f00 	cmp.w	fp, #0
  40134a:	d106      	bne.n	40135a <xQueueGenericSend+0x2e>
  40134c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40134e:	b123      	cbz	r3, 40135a <xQueueGenericSend+0x2e>
  401350:	4835      	ldr	r0, [pc, #212]	; (401428 <xQueueGenericSend+0xfc>)
  401352:	f44f 7113 	mov.w	r1, #588	; 0x24c
  401356:	4b35      	ldr	r3, [pc, #212]	; (40142c <xQueueGenericSend+0x100>)
  401358:	4798      	blx	r3

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  40135a:	f04f 0900 	mov.w	r9, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40135e:	4d34      	ldr	r5, [pc, #208]	; (401430 <xQueueGenericSend+0x104>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401360:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 401458 <xQueueGenericSend+0x12c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  401364:	4e33      	ldr	r6, [pc, #204]	; (401434 <xQueueGenericSend+0x108>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401366:	47a8      	blx	r5
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401368:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40136a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40136c:	429a      	cmp	r2, r3
  40136e:	d212      	bcs.n	401396 <xQueueGenericSend+0x6a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401370:	4620      	mov	r0, r4
  401372:	4659      	mov	r1, fp
  401374:	9a00      	ldr	r2, [sp, #0]
  401376:	4b30      	ldr	r3, [pc, #192]	; (401438 <xQueueGenericSend+0x10c>)
  401378:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40137a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40137c:	b13b      	cbz	r3, 40138e <xQueueGenericSend+0x62>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40137e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401382:	4b2e      	ldr	r3, [pc, #184]	; (40143c <xQueueGenericSend+0x110>)
  401384:	4798      	blx	r3
  401386:	2801      	cmp	r0, #1
  401388:	d101      	bne.n	40138e <xQueueGenericSend+0x62>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  40138a:	4b2d      	ldr	r3, [pc, #180]	; (401440 <xQueueGenericSend+0x114>)
  40138c:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  40138e:	4b29      	ldr	r3, [pc, #164]	; (401434 <xQueueGenericSend+0x108>)
  401390:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  401392:	2001      	movs	r0, #1
  401394:	e044      	b.n	401420 <xQueueGenericSend+0xf4>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  401396:	9b01      	ldr	r3, [sp, #4]
  401398:	b91b      	cbnz	r3, 4013a2 <xQueueGenericSend+0x76>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40139a:	4b26      	ldr	r3, [pc, #152]	; (401434 <xQueueGenericSend+0x108>)
  40139c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  40139e:	2000      	movs	r0, #0
  4013a0:	e03e      	b.n	401420 <xQueueGenericSend+0xf4>
				}
				else if( xEntryTimeSet == pdFALSE )
  4013a2:	f1b9 0f00 	cmp.w	r9, #0
  4013a6:	d103      	bne.n	4013b0 <xQueueGenericSend+0x84>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4013a8:	a802      	add	r0, sp, #8
  4013aa:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  4013ac:	f04f 0901 	mov.w	r9, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  4013b0:	47b0      	blx	r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4013b2:	4b24      	ldr	r3, [pc, #144]	; (401444 <xQueueGenericSend+0x118>)
  4013b4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4013b6:	47a8      	blx	r5
  4013b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4013ba:	f1b3 3fff 	cmp.w	r3, #4294967295
  4013be:	bf04      	itt	eq
  4013c0:	2300      	moveq	r3, #0
  4013c2:	6463      	streq	r3, [r4, #68]	; 0x44
  4013c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4013c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4013ca:	bf04      	itt	eq
  4013cc:	2300      	moveq	r3, #0
  4013ce:	64a3      	streq	r3, [r4, #72]	; 0x48
  4013d0:	47b0      	blx	r6

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4013d2:	a802      	add	r0, sp, #8
  4013d4:	a901      	add	r1, sp, #4
  4013d6:	4b1c      	ldr	r3, [pc, #112]	; (401448 <xQueueGenericSend+0x11c>)
  4013d8:	4798      	blx	r3
  4013da:	b9d8      	cbnz	r0, 401414 <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4013dc:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  4013de:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
  4013e2:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4013e4:	47b0      	blx	r6
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4013e6:	45b8      	cmp	r8, r7
  4013e8:	d10e      	bne.n	401408 <xQueueGenericSend+0xdc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4013ea:	f104 0010 	add.w	r0, r4, #16
  4013ee:	9901      	ldr	r1, [sp, #4]
  4013f0:	4b16      	ldr	r3, [pc, #88]	; (40144c <xQueueGenericSend+0x120>)
  4013f2:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  4013f4:	4620      	mov	r0, r4
  4013f6:	4b16      	ldr	r3, [pc, #88]	; (401450 <xQueueGenericSend+0x124>)
  4013f8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  4013fa:	4b16      	ldr	r3, [pc, #88]	; (401454 <xQueueGenericSend+0x128>)
  4013fc:	4798      	blx	r3
  4013fe:	2800      	cmp	r0, #0
  401400:	d1b1      	bne.n	401366 <xQueueGenericSend+0x3a>
				{
					portYIELD_WITHIN_API();
  401402:	4b0f      	ldr	r3, [pc, #60]	; (401440 <xQueueGenericSend+0x114>)
  401404:	4798      	blx	r3
  401406:	e7ae      	b.n	401366 <xQueueGenericSend+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401408:	4620      	mov	r0, r4
  40140a:	4b11      	ldr	r3, [pc, #68]	; (401450 <xQueueGenericSend+0x124>)
  40140c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40140e:	4b11      	ldr	r3, [pc, #68]	; (401454 <xQueueGenericSend+0x128>)
  401410:	4798      	blx	r3
  401412:	e7a8      	b.n	401366 <xQueueGenericSend+0x3a>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  401414:	4620      	mov	r0, r4
  401416:	4b0e      	ldr	r3, [pc, #56]	; (401450 <xQueueGenericSend+0x124>)
  401418:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40141a:	4b0e      	ldr	r3, [pc, #56]	; (401454 <xQueueGenericSend+0x128>)
  40141c:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  40141e:	2000      	movs	r0, #0
		}
	}
}
  401420:	b005      	add	sp, #20
  401422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401426:	bf00      	nop
  401428:	004075c4 	.word	0x004075c4
  40142c:	00404419 	.word	0x00404419
  401430:	00400ea1 	.word	0x00400ea1
  401434:	00400ec1 	.word	0x00400ec1
  401438:	0040112d 	.word	0x0040112d
  40143c:	00401e89 	.word	0x00401e89
  401440:	00400e81 	.word	0x00400e81
  401444:	00401981 	.word	0x00401981
  401448:	00401f41 	.word	0x00401f41
  40144c:	00401d9d 	.word	0x00401d9d
  401450:	004011b9 	.word	0x004011b9
  401454:	00401b25 	.word	0x00401b25
  401458:	00401f11 	.word	0x00401f11

0040145c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  40145c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401460:	460d      	mov	r5, r1
  401462:	4617      	mov	r7, r2
  401464:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  401466:	4604      	mov	r4, r0
  401468:	b920      	cbnz	r0, 401474 <xQueueGenericSendFromISR+0x18>
  40146a:	481d      	ldr	r0, [pc, #116]	; (4014e0 <xQueueGenericSendFromISR+0x84>)
  40146c:	f240 3192 	movw	r1, #914	; 0x392
  401470:	4b1c      	ldr	r3, [pc, #112]	; (4014e4 <xQueueGenericSendFromISR+0x88>)
  401472:	4798      	blx	r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401474:	b935      	cbnz	r5, 401484 <xQueueGenericSendFromISR+0x28>
  401476:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401478:	b123      	cbz	r3, 401484 <xQueueGenericSendFromISR+0x28>
  40147a:	4819      	ldr	r0, [pc, #100]	; (4014e0 <xQueueGenericSendFromISR+0x84>)
  40147c:	f240 3193 	movw	r1, #915	; 0x393
  401480:	4b18      	ldr	r3, [pc, #96]	; (4014e4 <xQueueGenericSendFromISR+0x88>)
  401482:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  401484:	4b18      	ldr	r3, [pc, #96]	; (4014e8 <xQueueGenericSendFromISR+0x8c>)
  401486:	4798      	blx	r3
  401488:	4606      	mov	r6, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40148a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40148c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40148e:	429a      	cmp	r2, r3
  401490:	d218      	bcs.n	4014c4 <xQueueGenericSendFromISR+0x68>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401492:	4620      	mov	r0, r4
  401494:	4629      	mov	r1, r5
  401496:	4642      	mov	r2, r8
  401498:	4b14      	ldr	r3, [pc, #80]	; (4014ec <xQueueGenericSendFromISR+0x90>)
  40149a:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  40149c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40149e:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014a2:	d10a      	bne.n	4014ba <xQueueGenericSendFromISR+0x5e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4014a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014a6:	b17b      	cbz	r3, 4014c8 <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4014a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014ac:	4b10      	ldr	r3, [pc, #64]	; (4014f0 <xQueueGenericSendFromISR+0x94>)
  4014ae:	4798      	blx	r3
  4014b0:	b160      	cbz	r0, 4014cc <xQueueGenericSendFromISR+0x70>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  4014b2:	b16f      	cbz	r7, 4014d0 <xQueueGenericSendFromISR+0x74>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  4014b4:	2401      	movs	r4, #1
  4014b6:	603c      	str	r4, [r7, #0]
  4014b8:	e00b      	b.n	4014d2 <xQueueGenericSendFromISR+0x76>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  4014ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014bc:	3301      	adds	r3, #1
  4014be:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  4014c0:	2401      	movs	r4, #1
  4014c2:	e006      	b.n	4014d2 <xQueueGenericSendFromISR+0x76>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  4014c4:	2400      	movs	r4, #0
  4014c6:	e004      	b.n	4014d2 <xQueueGenericSendFromISR+0x76>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  4014c8:	2401      	movs	r4, #1
  4014ca:	e002      	b.n	4014d2 <xQueueGenericSendFromISR+0x76>
  4014cc:	2401      	movs	r4, #1
  4014ce:	e000      	b.n	4014d2 <xQueueGenericSendFromISR+0x76>
  4014d0:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  4014d2:	4630      	mov	r0, r6
  4014d4:	4b07      	ldr	r3, [pc, #28]	; (4014f4 <xQueueGenericSendFromISR+0x98>)
  4014d6:	4798      	blx	r3

	return xReturn;
}
  4014d8:	4620      	mov	r0, r4
  4014da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014de:	bf00      	nop
  4014e0:	004075c4 	.word	0x004075c4
  4014e4:	00404419 	.word	0x00404419
  4014e8:	00400e91 	.word	0x00400e91
  4014ec:	0040112d 	.word	0x0040112d
  4014f0:	00401e89 	.word	0x00401e89
  4014f4:	00400eb9 	.word	0x00400eb9

004014f8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  4014f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014fc:	b085      	sub	sp, #20
  4014fe:	4689      	mov	r9, r1
  401500:	9201      	str	r2, [sp, #4]
  401502:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  401504:	4604      	mov	r4, r0
  401506:	b920      	cbnz	r0, 401512 <xQueueGenericReceive+0x1a>
  401508:	4845      	ldr	r0, [pc, #276]	; (401620 <xQueueGenericReceive+0x128>)
  40150a:	f240 31ce 	movw	r1, #974	; 0x3ce
  40150e:	4b45      	ldr	r3, [pc, #276]	; (401624 <xQueueGenericReceive+0x12c>)
  401510:	4798      	blx	r3
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401512:	f1b9 0f00 	cmp.w	r9, #0
  401516:	d106      	bne.n	401526 <xQueueGenericReceive+0x2e>
  401518:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40151a:	b123      	cbz	r3, 401526 <xQueueGenericReceive+0x2e>
  40151c:	4840      	ldr	r0, [pc, #256]	; (401620 <xQueueGenericReceive+0x128>)
  40151e:	f240 31cf 	movw	r1, #975	; 0x3cf
  401522:	4b40      	ldr	r3, [pc, #256]	; (401624 <xQueueGenericReceive+0x12c>)
  401524:	4798      	blx	r3
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  401526:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401528:	4d3f      	ldr	r5, [pc, #252]	; (401628 <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40152a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 401658 <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  40152e:	4e3f      	ldr	r6, [pc, #252]	; (40162c <xQueueGenericReceive+0x134>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401530:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  401532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401534:	b343      	cbz	r3, 401588 <xQueueGenericReceive+0x90>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  401536:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401538:	4620      	mov	r0, r4
  40153a:	4649      	mov	r1, r9
  40153c:	4b3c      	ldr	r3, [pc, #240]	; (401630 <xQueueGenericReceive+0x138>)
  40153e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  401540:	f1ba 0f00 	cmp.w	sl, #0
  401544:	d112      	bne.n	40156c <xQueueGenericReceive+0x74>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  401546:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401548:	3b01      	subs	r3, #1
  40154a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40154c:	6823      	ldr	r3, [r4, #0]
  40154e:	b913      	cbnz	r3, 401556 <xQueueGenericReceive+0x5e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  401550:	4b38      	ldr	r3, [pc, #224]	; (401634 <xQueueGenericReceive+0x13c>)
  401552:	4798      	blx	r3
  401554:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401556:	6923      	ldr	r3, [r4, #16]
  401558:	b193      	cbz	r3, 401580 <xQueueGenericReceive+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40155a:	f104 0010 	add.w	r0, r4, #16
  40155e:	4b36      	ldr	r3, [pc, #216]	; (401638 <xQueueGenericReceive+0x140>)
  401560:	4798      	blx	r3
  401562:	2801      	cmp	r0, #1
  401564:	d10c      	bne.n	401580 <xQueueGenericReceive+0x88>
						{
							portYIELD_WITHIN_API();
  401566:	4b35      	ldr	r3, [pc, #212]	; (40163c <xQueueGenericReceive+0x144>)
  401568:	4798      	blx	r3
  40156a:	e009      	b.n	401580 <xQueueGenericReceive+0x88>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  40156c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40156e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401570:	b133      	cbz	r3, 401580 <xQueueGenericReceive+0x88>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401572:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401576:	4b30      	ldr	r3, [pc, #192]	; (401638 <xQueueGenericReceive+0x140>)
  401578:	4798      	blx	r3
  40157a:	b108      	cbz	r0, 401580 <xQueueGenericReceive+0x88>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  40157c:	4b2f      	ldr	r3, [pc, #188]	; (40163c <xQueueGenericReceive+0x144>)
  40157e:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  401580:	4b2a      	ldr	r3, [pc, #168]	; (40162c <xQueueGenericReceive+0x134>)
  401582:	4798      	blx	r3
				return pdPASS;
  401584:	2001      	movs	r0, #1
  401586:	e048      	b.n	40161a <xQueueGenericReceive+0x122>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  401588:	9b01      	ldr	r3, [sp, #4]
  40158a:	b91b      	cbnz	r3, 401594 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40158c:	4b27      	ldr	r3, [pc, #156]	; (40162c <xQueueGenericReceive+0x134>)
  40158e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401590:	2000      	movs	r0, #0
  401592:	e042      	b.n	40161a <xQueueGenericReceive+0x122>
				}
				else if( xEntryTimeSet == pdFALSE )
  401594:	b917      	cbnz	r7, 40159c <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401596:	a802      	add	r0, sp, #8
  401598:	47c0      	blx	r8
					xEntryTimeSet = pdTRUE;
  40159a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  40159c:	47b0      	blx	r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40159e:	4b28      	ldr	r3, [pc, #160]	; (401640 <xQueueGenericReceive+0x148>)
  4015a0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4015a2:	47a8      	blx	r5
  4015a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4015a6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015aa:	bf04      	itt	eq
  4015ac:	2300      	moveq	r3, #0
  4015ae:	6463      	streq	r3, [r4, #68]	; 0x44
  4015b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015b2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015b6:	bf04      	itt	eq
  4015b8:	2300      	moveq	r3, #0
  4015ba:	64a3      	streq	r3, [r4, #72]	; 0x48
  4015bc:	47b0      	blx	r6

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4015be:	a802      	add	r0, sp, #8
  4015c0:	a901      	add	r1, sp, #4
  4015c2:	4b20      	ldr	r3, [pc, #128]	; (401644 <xQueueGenericReceive+0x14c>)
  4015c4:	4798      	blx	r3
  4015c6:	bb10      	cbnz	r0, 40160e <xQueueGenericReceive+0x116>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4015c8:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  4015ca:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4015ce:	47b0      	blx	r6
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4015d0:	f1bb 0f00 	cmp.w	fp, #0
  4015d4:	d115      	bne.n	401602 <xQueueGenericReceive+0x10a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4015d6:	6823      	ldr	r3, [r4, #0]
  4015d8:	b923      	cbnz	r3, 4015e4 <xQueueGenericReceive+0xec>
					{
						portENTER_CRITICAL();
  4015da:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4015dc:	6860      	ldr	r0, [r4, #4]
  4015de:	4b1a      	ldr	r3, [pc, #104]	; (401648 <xQueueGenericReceive+0x150>)
  4015e0:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  4015e2:	47b0      	blx	r6
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4015e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015e8:	9901      	ldr	r1, [sp, #4]
  4015ea:	4b18      	ldr	r3, [pc, #96]	; (40164c <xQueueGenericReceive+0x154>)
  4015ec:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4015ee:	4620      	mov	r0, r4
  4015f0:	4b17      	ldr	r3, [pc, #92]	; (401650 <xQueueGenericReceive+0x158>)
  4015f2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4015f4:	4b17      	ldr	r3, [pc, #92]	; (401654 <xQueueGenericReceive+0x15c>)
  4015f6:	4798      	blx	r3
  4015f8:	2800      	cmp	r0, #0
  4015fa:	d199      	bne.n	401530 <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
  4015fc:	4b0f      	ldr	r3, [pc, #60]	; (40163c <xQueueGenericReceive+0x144>)
  4015fe:	4798      	blx	r3
  401600:	e796      	b.n	401530 <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401602:	4620      	mov	r0, r4
  401604:	4b12      	ldr	r3, [pc, #72]	; (401650 <xQueueGenericReceive+0x158>)
  401606:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401608:	4b12      	ldr	r3, [pc, #72]	; (401654 <xQueueGenericReceive+0x15c>)
  40160a:	4798      	blx	r3
  40160c:	e790      	b.n	401530 <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  40160e:	4620      	mov	r0, r4
  401610:	4b0f      	ldr	r3, [pc, #60]	; (401650 <xQueueGenericReceive+0x158>)
  401612:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401614:	4b0f      	ldr	r3, [pc, #60]	; (401654 <xQueueGenericReceive+0x15c>)
  401616:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  401618:	2000      	movs	r0, #0
		}
	}
}
  40161a:	b005      	add	sp, #20
  40161c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401620:	004075c4 	.word	0x004075c4
  401624:	00404419 	.word	0x00404419
  401628:	00400ea1 	.word	0x00400ea1
  40162c:	00400ec1 	.word	0x00400ec1
  401630:	00401191 	.word	0x00401191
  401634:	00401fd9 	.word	0x00401fd9
  401638:	00401e89 	.word	0x00401e89
  40163c:	00400e81 	.word	0x00400e81
  401640:	00401981 	.word	0x00401981
  401644:	00401f41 	.word	0x00401f41
  401648:	00402005 	.word	0x00402005
  40164c:	00401d9d 	.word	0x00401d9d
  401650:	004011b9 	.word	0x004011b9
  401654:	00401b25 	.word	0x00401b25
  401658:	00401f11 	.word	0x00401f11

0040165c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  40165c:	b538      	push	{r3, r4, r5, lr}
  40165e:	4604      	mov	r4, r0
  401660:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401662:	4b0d      	ldr	r3, [pc, #52]	; (401698 <vQueueWaitForMessageRestricted+0x3c>)
  401664:	4798      	blx	r3
  401666:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401668:	f1b3 3fff 	cmp.w	r3, #4294967295
  40166c:	bf04      	itt	eq
  40166e:	2300      	moveq	r3, #0
  401670:	6463      	streq	r3, [r4, #68]	; 0x44
  401672:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401674:	f1b3 3fff 	cmp.w	r3, #4294967295
  401678:	bf04      	itt	eq
  40167a:	2300      	moveq	r3, #0
  40167c:	64a3      	streq	r3, [r4, #72]	; 0x48
  40167e:	4b07      	ldr	r3, [pc, #28]	; (40169c <vQueueWaitForMessageRestricted+0x40>)
  401680:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  401682:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401684:	b923      	cbnz	r3, 401690 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401686:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40168a:	4629      	mov	r1, r5
  40168c:	4b04      	ldr	r3, [pc, #16]	; (4016a0 <vQueueWaitForMessageRestricted+0x44>)
  40168e:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  401690:	4620      	mov	r0, r4
  401692:	4b04      	ldr	r3, [pc, #16]	; (4016a4 <vQueueWaitForMessageRestricted+0x48>)
  401694:	4798      	blx	r3
  401696:	bd38      	pop	{r3, r4, r5, pc}
  401698:	00400ea1 	.word	0x00400ea1
  40169c:	00400ec1 	.word	0x00400ec1
  4016a0:	00401e21 	.word	0x00401e21
  4016a4:	004011b9 	.word	0x004011b9

004016a8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  4016a8:	b510      	push	{r4, lr}
  4016aa:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4016ac:	4b0e      	ldr	r3, [pc, #56]	; (4016e8 <prvAddCurrentTaskToDelayedList+0x40>)
  4016ae:	681b      	ldr	r3, [r3, #0]
  4016b0:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4016b2:	4b0e      	ldr	r3, [pc, #56]	; (4016ec <prvAddCurrentTaskToDelayedList+0x44>)
  4016b4:	681b      	ldr	r3, [r3, #0]
  4016b6:	4298      	cmp	r0, r3
  4016b8:	d207      	bcs.n	4016ca <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4016ba:	4b0d      	ldr	r3, [pc, #52]	; (4016f0 <prvAddCurrentTaskToDelayedList+0x48>)
  4016bc:	6818      	ldr	r0, [r3, #0]
  4016be:	4b0a      	ldr	r3, [pc, #40]	; (4016e8 <prvAddCurrentTaskToDelayedList+0x40>)
  4016c0:	6819      	ldr	r1, [r3, #0]
  4016c2:	3104      	adds	r1, #4
  4016c4:	4b0b      	ldr	r3, [pc, #44]	; (4016f4 <prvAddCurrentTaskToDelayedList+0x4c>)
  4016c6:	4798      	blx	r3
  4016c8:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4016ca:	4b0b      	ldr	r3, [pc, #44]	; (4016f8 <prvAddCurrentTaskToDelayedList+0x50>)
  4016cc:	6818      	ldr	r0, [r3, #0]
  4016ce:	4b06      	ldr	r3, [pc, #24]	; (4016e8 <prvAddCurrentTaskToDelayedList+0x40>)
  4016d0:	6819      	ldr	r1, [r3, #0]
  4016d2:	3104      	adds	r1, #4
  4016d4:	4b07      	ldr	r3, [pc, #28]	; (4016f4 <prvAddCurrentTaskToDelayedList+0x4c>)
  4016d6:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4016d8:	4b08      	ldr	r3, [pc, #32]	; (4016fc <prvAddCurrentTaskToDelayedList+0x54>)
  4016da:	681b      	ldr	r3, [r3, #0]
  4016dc:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
  4016de:	bf3c      	itt	cc
  4016e0:	4b06      	ldrcc	r3, [pc, #24]	; (4016fc <prvAddCurrentTaskToDelayedList+0x54>)
  4016e2:	601c      	strcc	r4, [r3, #0]
  4016e4:	bd10      	pop	{r4, pc}
  4016e6:	bf00      	nop
  4016e8:	20018ab8 	.word	0x20018ab8
  4016ec:	20018944 	.word	0x20018944
  4016f0:	20018a74 	.word	0x20018a74
  4016f4:	00400db5 	.word	0x00400db5
  4016f8:	20018a8c 	.word	0x20018a8c
  4016fc:	2000001c 	.word	0x2000001c

00401700 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  401700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401704:	b083      	sub	sp, #12
  401706:	4688      	mov	r8, r1
  401708:	4615      	mov	r5, r2
  40170a:	9301      	str	r3, [sp, #4]
  40170c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40170e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  401712:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  401714:	9000      	str	r0, [sp, #0]
  401716:	b920      	cbnz	r0, 401722 <xTaskGenericCreate+0x22>
  401718:	485f      	ldr	r0, [pc, #380]	; (401898 <xTaskGenericCreate+0x198>)
  40171a:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
  40171e:	4b5f      	ldr	r3, [pc, #380]	; (40189c <xTaskGenericCreate+0x19c>)
  401720:	4798      	blx	r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  401722:	2f0e      	cmp	r7, #14
  401724:	d904      	bls.n	401730 <xTaskGenericCreate+0x30>
  401726:	485c      	ldr	r0, [pc, #368]	; (401898 <xTaskGenericCreate+0x198>)
  401728:	f240 11ef 	movw	r1, #495	; 0x1ef
  40172c:	4b5b      	ldr	r3, [pc, #364]	; (40189c <xTaskGenericCreate+0x19c>)
  40172e:	4798      	blx	r3
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401730:	2050      	movs	r0, #80	; 0x50
  401732:	4b5b      	ldr	r3, [pc, #364]	; (4018a0 <xTaskGenericCreate+0x1a0>)
  401734:	4798      	blx	r3

	if( pxNewTCB != NULL )
  401736:	4604      	mov	r4, r0
  401738:	2800      	cmp	r0, #0
  40173a:	f000 80a7 	beq.w	40188c <xTaskGenericCreate+0x18c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  40173e:	2e00      	cmp	r6, #0
  401740:	f040 80a1 	bne.w	401886 <xTaskGenericCreate+0x186>
  401744:	00a8      	lsls	r0, r5, #2
  401746:	4b56      	ldr	r3, [pc, #344]	; (4018a0 <xTaskGenericCreate+0x1a0>)
  401748:	4798      	blx	r3
  40174a:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  40174c:	b918      	cbnz	r0, 401756 <xTaskGenericCreate+0x56>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  40174e:	4620      	mov	r0, r4
  401750:	4b54      	ldr	r3, [pc, #336]	; (4018a4 <xTaskGenericCreate+0x1a4>)
  401752:	4798      	blx	r3
  401754:	e09a      	b.n	40188c <xTaskGenericCreate+0x18c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  401756:	21a5      	movs	r1, #165	; 0xa5
  401758:	00aa      	lsls	r2, r5, #2
  40175a:	4b53      	ldr	r3, [pc, #332]	; (4018a8 <xTaskGenericCreate+0x1a8>)
  40175c:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  40175e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  401762:	3d01      	subs	r5, #1
  401764:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401766:	eb03 0585 	add.w	r5, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  40176a:	f025 0507 	bic.w	r5, r5, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  40176e:	f104 0034 	add.w	r0, r4, #52	; 0x34
  401772:	4641      	mov	r1, r8
  401774:	220a      	movs	r2, #10
  401776:	4b4d      	ldr	r3, [pc, #308]	; (4018ac <xTaskGenericCreate+0x1ac>)
  401778:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  40177a:	f04f 0a00 	mov.w	sl, #0
  40177e:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d
  401782:	463e      	mov	r6, r7
  401784:	2f0e      	cmp	r7, #14
  401786:	bf28      	it	cs
  401788:	260e      	movcs	r6, #14
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
  40178a:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  40178c:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40178e:	f104 0804 	add.w	r8, r4, #4
  401792:	4640      	mov	r0, r8
  401794:	f8df b164 	ldr.w	fp, [pc, #356]	; 4018fc <xTaskGenericCreate+0x1fc>
  401798:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40179a:	f104 0018 	add.w	r0, r4, #24
  40179e:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4017a0:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  4017a2:	f1c6 060f 	rsb	r6, r6, #15
  4017a6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4017a8:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
  4017aa:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4017ae:	4628      	mov	r0, r5
  4017b0:	9900      	ldr	r1, [sp, #0]
  4017b2:	9a01      	ldr	r2, [sp, #4]
  4017b4:	4b3e      	ldr	r3, [pc, #248]	; (4018b0 <xTaskGenericCreate+0x1b0>)
  4017b6:	4798      	blx	r3
  4017b8:	6020      	str	r0, [r4, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  4017ba:	f1b9 0f00 	cmp.w	r9, #0
  4017be:	d001      	beq.n	4017c4 <xTaskGenericCreate+0xc4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  4017c0:	f8c9 4000 	str.w	r4, [r9]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  4017c4:	4b3b      	ldr	r3, [pc, #236]	; (4018b4 <xTaskGenericCreate+0x1b4>)
  4017c6:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4017c8:	4a3b      	ldr	r2, [pc, #236]	; (4018b8 <xTaskGenericCreate+0x1b8>)
  4017ca:	6813      	ldr	r3, [r2, #0]
  4017cc:	3301      	adds	r3, #1
  4017ce:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4017d0:	4b3a      	ldr	r3, [pc, #232]	; (4018bc <xTaskGenericCreate+0x1bc>)
  4017d2:	681b      	ldr	r3, [r3, #0]
  4017d4:	bb0b      	cbnz	r3, 40181a <xTaskGenericCreate+0x11a>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4017d6:	4b39      	ldr	r3, [pc, #228]	; (4018bc <xTaskGenericCreate+0x1bc>)
  4017d8:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4017da:	6813      	ldr	r3, [r2, #0]
  4017dc:	2b01      	cmp	r3, #1
  4017de:	d126      	bne.n	40182e <xTaskGenericCreate+0x12e>
  4017e0:	4d37      	ldr	r5, [pc, #220]	; (4018c0 <xTaskGenericCreate+0x1c0>)
  4017e2:	f505 7996 	add.w	r9, r5, #300	; 0x12c
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4017e6:	4e37      	ldr	r6, [pc, #220]	; (4018c4 <xTaskGenericCreate+0x1c4>)
  4017e8:	4628      	mov	r0, r5
  4017ea:	47b0      	blx	r6
  4017ec:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4017ee:	454d      	cmp	r5, r9
  4017f0:	d1fa      	bne.n	4017e8 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  4017f2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 401900 <xTaskGenericCreate+0x200>
  4017f6:	4648      	mov	r0, r9
  4017f8:	4d32      	ldr	r5, [pc, #200]	; (4018c4 <xTaskGenericCreate+0x1c4>)
  4017fa:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  4017fc:	4e32      	ldr	r6, [pc, #200]	; (4018c8 <xTaskGenericCreate+0x1c8>)
  4017fe:	4630      	mov	r0, r6
  401800:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
  401802:	4832      	ldr	r0, [pc, #200]	; (4018cc <xTaskGenericCreate+0x1cc>)
  401804:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  401806:	4832      	ldr	r0, [pc, #200]	; (4018d0 <xTaskGenericCreate+0x1d0>)
  401808:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  40180a:	4832      	ldr	r0, [pc, #200]	; (4018d4 <xTaskGenericCreate+0x1d4>)
  40180c:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  40180e:	4b32      	ldr	r3, [pc, #200]	; (4018d8 <xTaskGenericCreate+0x1d8>)
  401810:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401814:	4b31      	ldr	r3, [pc, #196]	; (4018dc <xTaskGenericCreate+0x1dc>)
  401816:	601e      	str	r6, [r3, #0]
  401818:	e009      	b.n	40182e <xTaskGenericCreate+0x12e>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40181a:	4b31      	ldr	r3, [pc, #196]	; (4018e0 <xTaskGenericCreate+0x1e0>)
  40181c:	681b      	ldr	r3, [r3, #0]
  40181e:	b933      	cbnz	r3, 40182e <xTaskGenericCreate+0x12e>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401820:	4b26      	ldr	r3, [pc, #152]	; (4018bc <xTaskGenericCreate+0x1bc>)
  401822:	681b      	ldr	r3, [r3, #0]
  401824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401826:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
  401828:	bf24      	itt	cs
  40182a:	4b24      	ldrcs	r3, [pc, #144]	; (4018bc <xTaskGenericCreate+0x1bc>)
  40182c:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  40182e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401830:	4b2c      	ldr	r3, [pc, #176]	; (4018e4 <xTaskGenericCreate+0x1e4>)
  401832:	681b      	ldr	r3, [r3, #0]
  401834:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  401836:	bf84      	itt	hi
  401838:	4b2a      	ldrhi	r3, [pc, #168]	; (4018e4 <xTaskGenericCreate+0x1e4>)
  40183a:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40183c:	4a2a      	ldr	r2, [pc, #168]	; (4018e8 <xTaskGenericCreate+0x1e8>)
  40183e:	6813      	ldr	r3, [r2, #0]
  401840:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  401842:	3301      	adds	r3, #1
  401844:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  401846:	4929      	ldr	r1, [pc, #164]	; (4018ec <xTaskGenericCreate+0x1ec>)
  401848:	680a      	ldr	r2, [r1, #0]
  40184a:	2301      	movs	r3, #1
  40184c:	4083      	lsls	r3, r0
  40184e:	4313      	orrs	r3, r2
  401850:	600b      	str	r3, [r1, #0]
  401852:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401856:	4b1a      	ldr	r3, [pc, #104]	; (4018c0 <xTaskGenericCreate+0x1c0>)
  401858:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40185c:	4641      	mov	r1, r8
  40185e:	4b24      	ldr	r3, [pc, #144]	; (4018f0 <xTaskGenericCreate+0x1f0>)
  401860:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401862:	4b24      	ldr	r3, [pc, #144]	; (4018f4 <xTaskGenericCreate+0x1f4>)
  401864:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  401866:	4b1e      	ldr	r3, [pc, #120]	; (4018e0 <xTaskGenericCreate+0x1e0>)
  401868:	681b      	ldr	r3, [r3, #0]
  40186a:	b143      	cbz	r3, 40187e <xTaskGenericCreate+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  40186c:	4b13      	ldr	r3, [pc, #76]	; (4018bc <xTaskGenericCreate+0x1bc>)
  40186e:	681b      	ldr	r3, [r3, #0]
  401870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401872:	429f      	cmp	r7, r3
  401874:	d905      	bls.n	401882 <xTaskGenericCreate+0x182>
			{
				portYIELD_WITHIN_API();
  401876:	4b20      	ldr	r3, [pc, #128]	; (4018f8 <xTaskGenericCreate+0x1f8>)
  401878:	4798      	blx	r3
  40187a:	2001      	movs	r0, #1
  40187c:	e008      	b.n	401890 <xTaskGenericCreate+0x190>
  40187e:	2001      	movs	r0, #1
  401880:	e006      	b.n	401890 <xTaskGenericCreate+0x190>
  401882:	2001      	movs	r0, #1
  401884:	e004      	b.n	401890 <xTaskGenericCreate+0x190>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401886:	6306      	str	r6, [r0, #48]	; 0x30
  401888:	4630      	mov	r0, r6
  40188a:	e764      	b.n	401756 <xTaskGenericCreate+0x56>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40188c:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
  401890:	b003      	add	sp, #12
  401892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401896:	bf00      	nop
  401898:	0040765c 	.word	0x0040765c
  40189c:	00404419 	.word	0x00404419
  4018a0:	00401015 	.word	0x00401015
  4018a4:	004010f5 	.word	0x004010f5
  4018a8:	004046e1 	.word	0x004046e1
  4018ac:	0040494d 	.word	0x0040494d
  4018b0:	00400e41 	.word	0x00400e41
  4018b4:	00400ea1 	.word	0x00400ea1
  4018b8:	20018a90 	.word	0x20018a90
  4018bc:	20018ab8 	.word	0x20018ab8
  4018c0:	20018948 	.word	0x20018948
  4018c4:	00400d79 	.word	0x00400d79
  4018c8:	20018ae4 	.word	0x20018ae4
  4018cc:	20018a94 	.word	0x20018a94
  4018d0:	20018a78 	.word	0x20018a78
  4018d4:	20018abc 	.word	0x20018abc
  4018d8:	20018a8c 	.word	0x20018a8c
  4018dc:	20018a74 	.word	0x20018a74
  4018e0:	20018aa8 	.word	0x20018aa8
  4018e4:	20018b04 	.word	0x20018b04
  4018e8:	20018ab4 	.word	0x20018ab4
  4018ec:	2001893c 	.word	0x2001893c
  4018f0:	00400d99 	.word	0x00400d99
  4018f4:	00400ec1 	.word	0x00400ec1
  4018f8:	00400e81 	.word	0x00400e81
  4018fc:	00400d91 	.word	0x00400d91
  401900:	20018ad0 	.word	0x20018ad0

00401904 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  401904:	b510      	push	{r4, lr}
  401906:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  401908:	2300      	movs	r3, #0
  40190a:	9300      	str	r3, [sp, #0]
  40190c:	9301      	str	r3, [sp, #4]
  40190e:	9302      	str	r3, [sp, #8]
  401910:	9303      	str	r3, [sp, #12]
  401912:	4810      	ldr	r0, [pc, #64]	; (401954 <vTaskStartScheduler+0x50>)
  401914:	4910      	ldr	r1, [pc, #64]	; (401958 <vTaskStartScheduler+0x54>)
  401916:	2282      	movs	r2, #130	; 0x82
  401918:	4c10      	ldr	r4, [pc, #64]	; (40195c <vTaskStartScheduler+0x58>)
  40191a:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  40191c:	2801      	cmp	r0, #1
  40191e:	d110      	bne.n	401942 <vTaskStartScheduler+0x3e>
		{
			xReturn = xTimerCreateTimerTask();
  401920:	4b0f      	ldr	r3, [pc, #60]	; (401960 <vTaskStartScheduler+0x5c>)
  401922:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
  401924:	2801      	cmp	r0, #1
  401926:	d10c      	bne.n	401942 <vTaskStartScheduler+0x3e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  401928:	4b0e      	ldr	r3, [pc, #56]	; (401964 <vTaskStartScheduler+0x60>)
  40192a:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  40192c:	2201      	movs	r2, #1
  40192e:	4b0e      	ldr	r3, [pc, #56]	; (401968 <vTaskStartScheduler+0x64>)
  401930:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  401932:	2200      	movs	r2, #0
  401934:	4b0d      	ldr	r3, [pc, #52]	; (40196c <vTaskStartScheduler+0x68>)
  401936:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
  401938:	4b0d      	ldr	r3, [pc, #52]	; (401970 <vTaskStartScheduler+0x6c>)
  40193a:	4798      	blx	r3

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  40193c:	4b0d      	ldr	r3, [pc, #52]	; (401974 <vTaskStartScheduler+0x70>)
  40193e:	4798      	blx	r3
  401940:	e005      	b.n	40194e <vTaskStartScheduler+0x4a>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  401942:	b920      	cbnz	r0, 40194e <vTaskStartScheduler+0x4a>
  401944:	480c      	ldr	r0, [pc, #48]	; (401978 <vTaskStartScheduler+0x74>)
  401946:	f240 5116 	movw	r1, #1302	; 0x516
  40194a:	4b0c      	ldr	r3, [pc, #48]	; (40197c <vTaskStartScheduler+0x78>)
  40194c:	4798      	blx	r3
}
  40194e:	b004      	add	sp, #16
  401950:	bd10      	pop	{r4, pc}
  401952:	bf00      	nop
  401954:	00401c31 	.word	0x00401c31
  401958:	0040769c 	.word	0x0040769c
  40195c:	00401701 	.word	0x00401701
  401960:	004021b9 	.word	0x004021b9
  401964:	00400e91 	.word	0x00400e91
  401968:	20018aa8 	.word	0x20018aa8
  40196c:	20018944 	.word	0x20018944
  401970:	0040446d 	.word	0x0040446d
  401974:	00400f71 	.word	0x00400f71
  401978:	0040765c 	.word	0x0040765c
  40197c:	00404419 	.word	0x00404419

00401980 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  401980:	4a02      	ldr	r2, [pc, #8]	; (40198c <vTaskSuspendAll+0xc>)
  401982:	6813      	ldr	r3, [r2, #0]
  401984:	3301      	adds	r3, #1
  401986:	6013      	str	r3, [r2, #0]
  401988:	4770      	bx	lr
  40198a:	bf00      	nop
  40198c:	20018af8 	.word	0x20018af8

00401990 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  401990:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  401992:	4b04      	ldr	r3, [pc, #16]	; (4019a4 <xTaskGetTickCount+0x14>)
  401994:	4798      	blx	r3
	{
		xTicks = xTickCount;
  401996:	4b04      	ldr	r3, [pc, #16]	; (4019a8 <xTaskGetTickCount+0x18>)
  401998:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
  40199a:	4b04      	ldr	r3, [pc, #16]	; (4019ac <xTaskGetTickCount+0x1c>)
  40199c:	4798      	blx	r3

	return xTicks;
}
  40199e:	4620      	mov	r0, r4
  4019a0:	bd10      	pop	{r4, pc}
  4019a2:	bf00      	nop
  4019a4:	00400ea1 	.word	0x00400ea1
  4019a8:	20018944 	.word	0x20018944
  4019ac:	00400ec1 	.word	0x00400ec1

004019b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
  4019b0:	b510      	push	{r4, lr}
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  4019b2:	4b04      	ldr	r3, [pc, #16]	; (4019c4 <xTaskGetTickCountFromISR+0x14>)
  4019b4:	4798      	blx	r3
	xReturn = xTickCount;
  4019b6:	4b04      	ldr	r3, [pc, #16]	; (4019c8 <xTaskGetTickCountFromISR+0x18>)
  4019b8:	681c      	ldr	r4, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  4019ba:	4b04      	ldr	r3, [pc, #16]	; (4019cc <xTaskGetTickCountFromISR+0x1c>)
  4019bc:	4798      	blx	r3

	return xReturn;
}
  4019be:	4620      	mov	r0, r4
  4019c0:	bd10      	pop	{r4, pc}
  4019c2:	bf00      	nop
  4019c4:	00400e91 	.word	0x00400e91
  4019c8:	20018944 	.word	0x20018944
  4019cc:	00400eb9 	.word	0x00400eb9

004019d0 <pcTaskGetTaskName>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_pcTaskGetTaskName == 1 )

	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
  4019d0:	b510      	push	{r4, lr}
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
  4019d2:	4604      	mov	r4, r0
  4019d4:	b938      	cbnz	r0, 4019e6 <pcTaskGetTaskName+0x16>
  4019d6:	4b05      	ldr	r3, [pc, #20]	; (4019ec <pcTaskGetTaskName+0x1c>)
  4019d8:	681c      	ldr	r4, [r3, #0]
		configASSERT( pxTCB );
  4019da:	b924      	cbnz	r4, 4019e6 <pcTaskGetTaskName+0x16>
  4019dc:	4804      	ldr	r0, [pc, #16]	; (4019f0 <pcTaskGetTaskName+0x20>)
  4019de:	f240 51cc 	movw	r1, #1484	; 0x5cc
  4019e2:	4b04      	ldr	r3, [pc, #16]	; (4019f4 <pcTaskGetTaskName+0x24>)
  4019e4:	4798      	blx	r3
		return &( pxTCB->pcTaskName[ 0 ] );
	}
  4019e6:	f104 0034 	add.w	r0, r4, #52	; 0x34
  4019ea:	bd10      	pop	{r4, pc}
  4019ec:	20018ab8 	.word	0x20018ab8
  4019f0:	0040765c 	.word	0x0040765c
  4019f4:	00404419 	.word	0x00404419

004019f8 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4019f8:	4b3d      	ldr	r3, [pc, #244]	; (401af0 <vTaskIncrementTick+0xf8>)
  4019fa:	681b      	ldr	r3, [r3, #0]
  4019fc:	2b00      	cmp	r3, #0
  4019fe:	d16f      	bne.n	401ae0 <vTaskIncrementTick+0xe8>
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  401a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
	{
		++xTickCount;
  401a04:	4b3b      	ldr	r3, [pc, #236]	; (401af4 <vTaskIncrementTick+0xfc>)
  401a06:	681a      	ldr	r2, [r3, #0]
  401a08:	3201      	adds	r2, #1
  401a0a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  401a0c:	681b      	ldr	r3, [r3, #0]
  401a0e:	bb0b      	cbnz	r3, 401a54 <vTaskIncrementTick+0x5c>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  401a10:	4b39      	ldr	r3, [pc, #228]	; (401af8 <vTaskIncrementTick+0x100>)
  401a12:	681b      	ldr	r3, [r3, #0]
  401a14:	681b      	ldr	r3, [r3, #0]
  401a16:	b123      	cbz	r3, 401a22 <vTaskIncrementTick+0x2a>
  401a18:	4838      	ldr	r0, [pc, #224]	; (401afc <vTaskIncrementTick+0x104>)
  401a1a:	f240 618f 	movw	r1, #1679	; 0x68f
  401a1e:	4b38      	ldr	r3, [pc, #224]	; (401b00 <vTaskIncrementTick+0x108>)
  401a20:	4798      	blx	r3

			pxTemp = pxDelayedTaskList;
  401a22:	4b35      	ldr	r3, [pc, #212]	; (401af8 <vTaskIncrementTick+0x100>)
  401a24:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  401a26:	4a37      	ldr	r2, [pc, #220]	; (401b04 <vTaskIncrementTick+0x10c>)
  401a28:	6810      	ldr	r0, [r2, #0]
  401a2a:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  401a2c:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
  401a2e:	4936      	ldr	r1, [pc, #216]	; (401b08 <vTaskIncrementTick+0x110>)
  401a30:	680a      	ldr	r2, [r1, #0]
  401a32:	3201      	adds	r2, #1
  401a34:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401a36:	681b      	ldr	r3, [r3, #0]
  401a38:	681b      	ldr	r3, [r3, #0]
  401a3a:	b923      	cbnz	r3, 401a46 <vTaskIncrementTick+0x4e>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  401a3c:	f04f 32ff 	mov.w	r2, #4294967295
  401a40:	4b32      	ldr	r3, [pc, #200]	; (401b0c <vTaskIncrementTick+0x114>)
  401a42:	601a      	str	r2, [r3, #0]
  401a44:	e006      	b.n	401a54 <vTaskIncrementTick+0x5c>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401a46:	4b2c      	ldr	r3, [pc, #176]	; (401af8 <vTaskIncrementTick+0x100>)
  401a48:	681b      	ldr	r3, [r3, #0]
  401a4a:	68db      	ldr	r3, [r3, #12]
  401a4c:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401a4e:	685a      	ldr	r2, [r3, #4]
  401a50:	4b2e      	ldr	r3, [pc, #184]	; (401b0c <vTaskIncrementTick+0x114>)
  401a52:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  401a54:	4b27      	ldr	r3, [pc, #156]	; (401af4 <vTaskIncrementTick+0xfc>)
  401a56:	681a      	ldr	r2, [r3, #0]
  401a58:	4b2c      	ldr	r3, [pc, #176]	; (401b0c <vTaskIncrementTick+0x114>)
  401a5a:	681b      	ldr	r3, [r3, #0]
  401a5c:	429a      	cmp	r2, r3
  401a5e:	d344      	bcc.n	401aea <vTaskIncrementTick+0xf2>
  401a60:	4b25      	ldr	r3, [pc, #148]	; (401af8 <vTaskIncrementTick+0x100>)
  401a62:	681b      	ldr	r3, [r3, #0]
  401a64:	681b      	ldr	r3, [r3, #0]
  401a66:	b16b      	cbz	r3, 401a84 <vTaskIncrementTick+0x8c>
  401a68:	4b23      	ldr	r3, [pc, #140]	; (401af8 <vTaskIncrementTick+0x100>)
  401a6a:	681b      	ldr	r3, [r3, #0]
  401a6c:	68db      	ldr	r3, [r3, #12]
  401a6e:	68dc      	ldr	r4, [r3, #12]
  401a70:	6863      	ldr	r3, [r4, #4]
  401a72:	4a20      	ldr	r2, [pc, #128]	; (401af4 <vTaskIncrementTick+0xfc>)
  401a74:	6812      	ldr	r2, [r2, #0]
  401a76:	4293      	cmp	r3, r2
  401a78:	d813      	bhi.n	401aa2 <vTaskIncrementTick+0xaa>
  401a7a:	4f25      	ldr	r7, [pc, #148]	; (401b10 <vTaskIncrementTick+0x118>)
  401a7c:	4e25      	ldr	r6, [pc, #148]	; (401b14 <vTaskIncrementTick+0x11c>)
  401a7e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 401b20 <vTaskIncrementTick+0x128>
  401a82:	e012      	b.n	401aaa <vTaskIncrementTick+0xb2>
  401a84:	f04f 32ff 	mov.w	r2, #4294967295
  401a88:	4b20      	ldr	r3, [pc, #128]	; (401b0c <vTaskIncrementTick+0x114>)
  401a8a:	601a      	str	r2, [r3, #0]
  401a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401a90:	4b19      	ldr	r3, [pc, #100]	; (401af8 <vTaskIncrementTick+0x100>)
  401a92:	681b      	ldr	r3, [r3, #0]
  401a94:	68db      	ldr	r3, [r3, #12]
  401a96:	68dc      	ldr	r4, [r3, #12]
  401a98:	6863      	ldr	r3, [r4, #4]
  401a9a:	4a16      	ldr	r2, [pc, #88]	; (401af4 <vTaskIncrementTick+0xfc>)
  401a9c:	6812      	ldr	r2, [r2, #0]
  401a9e:	4293      	cmp	r3, r2
  401aa0:	d903      	bls.n	401aaa <vTaskIncrementTick+0xb2>
  401aa2:	4a1a      	ldr	r2, [pc, #104]	; (401b0c <vTaskIncrementTick+0x114>)
  401aa4:	6013      	str	r3, [r2, #0]
  401aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401aaa:	1d25      	adds	r5, r4, #4
  401aac:	4628      	mov	r0, r5
  401aae:	47b8      	blx	r7
  401ab0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401ab2:	b113      	cbz	r3, 401aba <vTaskIncrementTick+0xc2>
  401ab4:	f104 0018 	add.w	r0, r4, #24
  401ab8:	47b8      	blx	r7
  401aba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401abc:	6832      	ldr	r2, [r6, #0]
  401abe:	2301      	movs	r3, #1
  401ac0:	4083      	lsls	r3, r0
  401ac2:	4313      	orrs	r3, r2
  401ac4:	6033      	str	r3, [r6, #0]
  401ac6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401aca:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  401ace:	4629      	mov	r1, r5
  401ad0:	4b11      	ldr	r3, [pc, #68]	; (401b18 <vTaskIncrementTick+0x120>)
  401ad2:	4798      	blx	r3
  401ad4:	4b08      	ldr	r3, [pc, #32]	; (401af8 <vTaskIncrementTick+0x100>)
  401ad6:	681b      	ldr	r3, [r3, #0]
  401ad8:	681b      	ldr	r3, [r3, #0]
  401ada:	2b00      	cmp	r3, #0
  401adc:	d1d8      	bne.n	401a90 <vTaskIncrementTick+0x98>
  401ade:	e7d1      	b.n	401a84 <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
  401ae0:	4a0e      	ldr	r2, [pc, #56]	; (401b1c <vTaskIncrementTick+0x124>)
  401ae2:	6813      	ldr	r3, [r2, #0]
  401ae4:	3301      	adds	r3, #1
  401ae6:	6013      	str	r3, [r2, #0]
  401ae8:	4770      	bx	lr
  401aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401aee:	bf00      	nop
  401af0:	20018af8 	.word	0x20018af8
  401af4:	20018944 	.word	0x20018944
  401af8:	20018a8c 	.word	0x20018a8c
  401afc:	0040765c 	.word	0x0040765c
  401b00:	00404419 	.word	0x00404419
  401b04:	20018a74 	.word	0x20018a74
  401b08:	20018b00 	.word	0x20018b00
  401b0c:	2000001c 	.word	0x2000001c
  401b10:	00400df1 	.word	0x00400df1
  401b14:	2001893c 	.word	0x2001893c
  401b18:	00400d99 	.word	0x00400d99
  401b1c:	20018afc 	.word	0x20018afc
  401b20:	20018948 	.word	0x20018948

00401b24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  401b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401b28:	4b31      	ldr	r3, [pc, #196]	; (401bf0 <xTaskResumeAll+0xcc>)
  401b2a:	681b      	ldr	r3, [r3, #0]
  401b2c:	b923      	cbnz	r3, 401b38 <xTaskResumeAll+0x14>
  401b2e:	4831      	ldr	r0, [pc, #196]	; (401bf4 <xTaskResumeAll+0xd0>)
  401b30:	f44f 61aa 	mov.w	r1, #1360	; 0x550
  401b34:	4b30      	ldr	r3, [pc, #192]	; (401bf8 <xTaskResumeAll+0xd4>)
  401b36:	4798      	blx	r3
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401b38:	4b30      	ldr	r3, [pc, #192]	; (401bfc <xTaskResumeAll+0xd8>)
  401b3a:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401b3c:	4b2c      	ldr	r3, [pc, #176]	; (401bf0 <xTaskResumeAll+0xcc>)
  401b3e:	681a      	ldr	r2, [r3, #0]
  401b40:	3a01      	subs	r2, #1
  401b42:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401b44:	681b      	ldr	r3, [r3, #0]
  401b46:	2b00      	cmp	r3, #0
  401b48:	d14a      	bne.n	401be0 <xTaskResumeAll+0xbc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  401b4a:	4b2d      	ldr	r3, [pc, #180]	; (401c00 <xTaskResumeAll+0xdc>)
  401b4c:	681b      	ldr	r3, [r3, #0]
  401b4e:	bb0b      	cbnz	r3, 401b94 <xTaskResumeAll+0x70>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  401b50:	2400      	movs	r4, #0
  401b52:	e048      	b.n	401be6 <xTaskResumeAll+0xc2>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  401b54:	68f3      	ldr	r3, [r6, #12]
  401b56:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  401b58:	f104 0018 	add.w	r0, r4, #24
  401b5c:	47c8      	blx	r9
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401b5e:	1d25      	adds	r5, r4, #4
  401b60:	4628      	mov	r0, r5
  401b62:	47c8      	blx	r9
					prvAddTaskToReadyQueue( pxTCB );
  401b64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401b66:	f8d8 2000 	ldr.w	r2, [r8]
  401b6a:	2301      	movs	r3, #1
  401b6c:	4083      	lsls	r3, r0
  401b6e:	4313      	orrs	r3, r2
  401b70:	f8c8 3000 	str.w	r3, [r8]
  401b74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b78:	4b22      	ldr	r3, [pc, #136]	; (401c04 <xTaskResumeAll+0xe0>)
  401b7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b7e:	4629      	mov	r1, r5
  401b80:	4b21      	ldr	r3, [pc, #132]	; (401c08 <xTaskResumeAll+0xe4>)
  401b82:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401b84:	4b21      	ldr	r3, [pc, #132]	; (401c0c <xTaskResumeAll+0xe8>)
  401b86:	681b      	ldr	r3, [r3, #0]
  401b88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
  401b8c:	429a      	cmp	r2, r3
  401b8e:	bf28      	it	cs
  401b90:	2701      	movcs	r7, #1
  401b92:	e005      	b.n	401ba0 <xTaskResumeAll+0x7c>
  401b94:	2700      	movs	r7, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401b96:	4e1e      	ldr	r6, [pc, #120]	; (401c10 <xTaskResumeAll+0xec>)
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
  401b98:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401c28 <xTaskResumeAll+0x104>
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
  401b9c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401c2c <xTaskResumeAll+0x108>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401ba0:	6833      	ldr	r3, [r6, #0]
  401ba2:	2b00      	cmp	r3, #0
  401ba4:	d1d6      	bne.n	401b54 <xTaskResumeAll+0x30>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401ba6:	4b1b      	ldr	r3, [pc, #108]	; (401c14 <xTaskResumeAll+0xf0>)
  401ba8:	681b      	ldr	r3, [r3, #0]
  401baa:	b163      	cbz	r3, 401bc6 <xTaskResumeAll+0xa2>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401bac:	4b19      	ldr	r3, [pc, #100]	; (401c14 <xTaskResumeAll+0xf0>)
  401bae:	681b      	ldr	r3, [r3, #0]
  401bb0:	b17b      	cbz	r3, 401bd2 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  401bb2:	4d19      	ldr	r5, [pc, #100]	; (401c18 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
  401bb4:	4c17      	ldr	r4, [pc, #92]	; (401c14 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
  401bb6:	47a8      	blx	r5
						--uxMissedTicks;
  401bb8:	6823      	ldr	r3, [r4, #0]
  401bba:	3b01      	subs	r3, #1
  401bbc:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401bbe:	6823      	ldr	r3, [r4, #0]
  401bc0:	2b00      	cmp	r3, #0
  401bc2:	d1f8      	bne.n	401bb6 <xTaskResumeAll+0x92>
  401bc4:	e005      	b.n	401bd2 <xTaskResumeAll+0xae>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  401bc6:	2f01      	cmp	r7, #1
  401bc8:	d003      	beq.n	401bd2 <xTaskResumeAll+0xae>
  401bca:	4b14      	ldr	r3, [pc, #80]	; (401c1c <xTaskResumeAll+0xf8>)
  401bcc:	681b      	ldr	r3, [r3, #0]
  401bce:	2b01      	cmp	r3, #1
  401bd0:	d108      	bne.n	401be4 <xTaskResumeAll+0xc0>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
  401bd2:	2200      	movs	r2, #0
  401bd4:	4b11      	ldr	r3, [pc, #68]	; (401c1c <xTaskResumeAll+0xf8>)
  401bd6:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  401bd8:	4b11      	ldr	r3, [pc, #68]	; (401c20 <xTaskResumeAll+0xfc>)
  401bda:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
  401bdc:	2401      	movs	r4, #1
  401bde:	e002      	b.n	401be6 <xTaskResumeAll+0xc2>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  401be0:	2400      	movs	r4, #0
  401be2:	e000      	b.n	401be6 <xTaskResumeAll+0xc2>
  401be4:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  401be6:	4b0f      	ldr	r3, [pc, #60]	; (401c24 <xTaskResumeAll+0x100>)
  401be8:	4798      	blx	r3

	return xAlreadyYielded;
}
  401bea:	4620      	mov	r0, r4
  401bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401bf0:	20018af8 	.word	0x20018af8
  401bf4:	0040765c 	.word	0x0040765c
  401bf8:	00404419 	.word	0x00404419
  401bfc:	00400ea1 	.word	0x00400ea1
  401c00:	20018a90 	.word	0x20018a90
  401c04:	20018948 	.word	0x20018948
  401c08:	00400d99 	.word	0x00400d99
  401c0c:	20018ab8 	.word	0x20018ab8
  401c10:	20018a94 	.word	0x20018a94
  401c14:	20018afc 	.word	0x20018afc
  401c18:	004019f9 	.word	0x004019f9
  401c1c:	20018ab0 	.word	0x20018ab0
  401c20:	00400e81 	.word	0x00400e81
  401c24:	00400ec1 	.word	0x00400ec1
  401c28:	00400df1 	.word	0x00400df1
  401c2c:	2001893c 	.word	0x2001893c

00401c30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401c30:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401c32:	4d15      	ldr	r5, [pc, #84]	; (401c88 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401c34:	4e15      	ldr	r6, [pc, #84]	; (401c8c <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  401c36:	f8df 8074 	ldr.w	r8, [pc, #116]	; 401cac <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
  401c3a:	4f15      	ldr	r7, [pc, #84]	; (401c90 <prvIdleTask+0x60>)
  401c3c:	e019      	b.n	401c72 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  401c3e:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401c40:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
  401c42:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  401c44:	b1ac      	cbz	r4, 401c72 <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  401c46:	4b13      	ldr	r3, [pc, #76]	; (401c94 <prvIdleTask+0x64>)
  401c48:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401c4a:	68f3      	ldr	r3, [r6, #12]
  401c4c:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401c4e:	1d20      	adds	r0, r4, #4
  401c50:	4b11      	ldr	r3, [pc, #68]	; (401c98 <prvIdleTask+0x68>)
  401c52:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401c54:	4a11      	ldr	r2, [pc, #68]	; (401c9c <prvIdleTask+0x6c>)
  401c56:	6813      	ldr	r3, [r2, #0]
  401c58:	3b01      	subs	r3, #1
  401c5a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401c5c:	682b      	ldr	r3, [r5, #0]
  401c5e:	3b01      	subs	r3, #1
  401c60:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401c62:	4b0f      	ldr	r3, [pc, #60]	; (401ca0 <prvIdleTask+0x70>)
  401c64:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401c66:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401c68:	f8df 9044 	ldr.w	r9, [pc, #68]	; 401cb0 <prvIdleTask+0x80>
  401c6c:	47c8      	blx	r9
		vPortFree( pxTCB );
  401c6e:	4620      	mov	r0, r4
  401c70:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401c72:	682b      	ldr	r3, [r5, #0]
  401c74:	2b00      	cmp	r3, #0
  401c76:	d1e2      	bne.n	401c3e <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  401c78:	4b0a      	ldr	r3, [pc, #40]	; (401ca4 <prvIdleTask+0x74>)
  401c7a:	681b      	ldr	r3, [r3, #0]
  401c7c:	2b01      	cmp	r3, #1
  401c7e:	d9f8      	bls.n	401c72 <prvIdleTask+0x42>
			{
				taskYIELD();
  401c80:	4b09      	ldr	r3, [pc, #36]	; (401ca8 <prvIdleTask+0x78>)
  401c82:	4798      	blx	r3
  401c84:	e7d7      	b.n	401c36 <prvIdleTask+0x6>
  401c86:	bf00      	nop
  401c88:	20018940 	.word	0x20018940
  401c8c:	20018a78 	.word	0x20018a78
  401c90:	00401b25 	.word	0x00401b25
  401c94:	00400ea1 	.word	0x00400ea1
  401c98:	00400df1 	.word	0x00400df1
  401c9c:	20018a90 	.word	0x20018a90
  401ca0:	00400ec1 	.word	0x00400ec1
  401ca4:	20018948 	.word	0x20018948
  401ca8:	00400e81 	.word	0x00400e81
  401cac:	00401981 	.word	0x00401981
  401cb0:	004010f5 	.word	0x004010f5

00401cb4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401cb4:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  401cb6:	4b2d      	ldr	r3, [pc, #180]	; (401d6c <vTaskSwitchContext+0xb8>)
  401cb8:	681b      	ldr	r3, [r3, #0]
  401cba:	b11b      	cbz	r3, 401cc4 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  401cbc:	2201      	movs	r2, #1
  401cbe:	4b2c      	ldr	r3, [pc, #176]	; (401d70 <vTaskSwitchContext+0xbc>)
  401cc0:	601a      	str	r2, [r3, #0]
  401cc2:	bd38      	pop	{r3, r4, r5, pc}
			unsigned long ulTempCounter;

				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
  401cc4:	4b2b      	ldr	r3, [pc, #172]	; (401d74 <vTaskSwitchContext+0xc0>)
  401cc6:	4798      	blx	r3
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
  401cc8:	4a2b      	ldr	r2, [pc, #172]	; (401d78 <vTaskSwitchContext+0xc4>)
  401cca:	6814      	ldr	r4, [r2, #0]
  401ccc:	492b      	ldr	r1, [pc, #172]	; (401d7c <vTaskSwitchContext+0xc8>)
  401cce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401cd0:	680d      	ldr	r5, [r1, #0]
  401cd2:	1b5b      	subs	r3, r3, r5
  401cd4:	4403      	add	r3, r0
  401cd6:	64e3      	str	r3, [r4, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
  401cd8:	6008      	str	r0, [r1, #0]
		}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
  401cda:	6811      	ldr	r1, [r2, #0]
  401cdc:	6813      	ldr	r3, [r2, #0]
  401cde:	680a      	ldr	r2, [r1, #0]
  401ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ce2:	429a      	cmp	r2, r3
  401ce4:	d805      	bhi.n	401cf2 <vTaskSwitchContext+0x3e>
  401ce6:	4b24      	ldr	r3, [pc, #144]	; (401d78 <vTaskSwitchContext+0xc4>)
  401ce8:	6818      	ldr	r0, [r3, #0]
  401cea:	6819      	ldr	r1, [r3, #0]
  401cec:	3134      	adds	r1, #52	; 0x34
  401cee:	4b24      	ldr	r3, [pc, #144]	; (401d80 <vTaskSwitchContext+0xcc>)
  401cf0:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
  401cf2:	4b21      	ldr	r3, [pc, #132]	; (401d78 <vTaskSwitchContext+0xc4>)
  401cf4:	681b      	ldr	r3, [r3, #0]
  401cf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401cf8:	4922      	ldr	r1, [pc, #136]	; (401d84 <vTaskSwitchContext+0xd0>)
  401cfa:	2214      	movs	r2, #20
  401cfc:	4b22      	ldr	r3, [pc, #136]	; (401d88 <vTaskSwitchContext+0xd4>)
  401cfe:	4798      	blx	r3
  401d00:	b128      	cbz	r0, 401d0e <vTaskSwitchContext+0x5a>
  401d02:	4b1d      	ldr	r3, [pc, #116]	; (401d78 <vTaskSwitchContext+0xc4>)
  401d04:	6818      	ldr	r0, [r3, #0]
  401d06:	6819      	ldr	r1, [r3, #0]
  401d08:	3134      	adds	r1, #52	; 0x34
  401d0a:	4b1d      	ldr	r3, [pc, #116]	; (401d80 <vTaskSwitchContext+0xcc>)
  401d0c:	4798      	blx	r3

		taskSELECT_HIGHEST_PRIORITY_TASK();
  401d0e:	4b1f      	ldr	r3, [pc, #124]	; (401d8c <vTaskSwitchContext+0xd8>)
  401d10:	681c      	ldr	r4, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline unsigned char ucPortCountLeadingZeros( unsigned long ulBitmap )
	{
	unsigned char ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401d12:	fab4 f484 	clz	r4, r4
  401d16:	b2e4      	uxtb	r4, r4
  401d18:	f1c4 041f 	rsb	r4, r4, #31
  401d1c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401d20:	009b      	lsls	r3, r3, #2
  401d22:	4a1b      	ldr	r2, [pc, #108]	; (401d90 <vTaskSwitchContext+0xdc>)
  401d24:	58d3      	ldr	r3, [r2, r3]
  401d26:	b923      	cbnz	r3, 401d32 <vTaskSwitchContext+0x7e>
  401d28:	481a      	ldr	r0, [pc, #104]	; (401d94 <vTaskSwitchContext+0xe0>)
  401d2a:	f240 7141 	movw	r1, #1857	; 0x741
  401d2e:	4b1a      	ldr	r3, [pc, #104]	; (401d98 <vTaskSwitchContext+0xe4>)
  401d30:	4798      	blx	r3
  401d32:	4b17      	ldr	r3, [pc, #92]	; (401d90 <vTaskSwitchContext+0xdc>)
  401d34:	00a2      	lsls	r2, r4, #2
  401d36:	1911      	adds	r1, r2, r4
  401d38:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401d3c:	6848      	ldr	r0, [r1, #4]
  401d3e:	6840      	ldr	r0, [r0, #4]
  401d40:	6048      	str	r0, [r1, #4]
  401d42:	460b      	mov	r3, r1
  401d44:	3308      	adds	r3, #8
  401d46:	4298      	cmp	r0, r3
  401d48:	d106      	bne.n	401d58 <vTaskSwitchContext+0xa4>
  401d4a:	6841      	ldr	r1, [r0, #4]
  401d4c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401d50:	4a0f      	ldr	r2, [pc, #60]	; (401d90 <vTaskSwitchContext+0xdc>)
  401d52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401d56:	6059      	str	r1, [r3, #4]
  401d58:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401d5c:	4b0c      	ldr	r3, [pc, #48]	; (401d90 <vTaskSwitchContext+0xdc>)
  401d5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  401d62:	6863      	ldr	r3, [r4, #4]
  401d64:	68da      	ldr	r2, [r3, #12]
  401d66:	4b04      	ldr	r3, [pc, #16]	; (401d78 <vTaskSwitchContext+0xc4>)
  401d68:	601a      	str	r2, [r3, #0]
  401d6a:	bd38      	pop	{r3, r4, r5, pc}
  401d6c:	20018af8 	.word	0x20018af8
  401d70:	20018ab0 	.word	0x20018ab0
  401d74:	0040447d 	.word	0x0040447d
  401d78:	20018ab8 	.word	0x20018ab8
  401d7c:	20018aac 	.word	0x20018aac
  401d80:	004043a9 	.word	0x004043a9
  401d84:	00407604 	.word	0x00407604
  401d88:	00404549 	.word	0x00404549
  401d8c:	2001893c 	.word	0x2001893c
  401d90:	20018948 	.word	0x20018948
  401d94:	0040765c 	.word	0x0040765c
  401d98:	00404419 	.word	0x00404419

00401d9c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  401d9c:	b570      	push	{r4, r5, r6, lr}
  401d9e:	460d      	mov	r5, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
  401da0:	4606      	mov	r6, r0
  401da2:	b920      	cbnz	r0, 401dae <vTaskPlaceOnEventList+0x12>
  401da4:	4814      	ldr	r0, [pc, #80]	; (401df8 <vTaskPlaceOnEventList+0x5c>)
  401da6:	f240 714c 	movw	r1, #1868	; 0x74c
  401daa:	4b14      	ldr	r3, [pc, #80]	; (401dfc <vTaskPlaceOnEventList+0x60>)
  401dac:	4798      	blx	r3
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401dae:	4c14      	ldr	r4, [pc, #80]	; (401e00 <vTaskPlaceOnEventList+0x64>)
  401db0:	6821      	ldr	r1, [r4, #0]
  401db2:	4630      	mov	r0, r6
  401db4:	3118      	adds	r1, #24
  401db6:	4b13      	ldr	r3, [pc, #76]	; (401e04 <vTaskPlaceOnEventList+0x68>)
  401db8:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401dba:	6820      	ldr	r0, [r4, #0]
  401dbc:	3004      	adds	r0, #4
  401dbe:	4b12      	ldr	r3, [pc, #72]	; (401e08 <vTaskPlaceOnEventList+0x6c>)
  401dc0:	4798      	blx	r3
  401dc2:	b940      	cbnz	r0, 401dd6 <vTaskPlaceOnEventList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401dc4:	6823      	ldr	r3, [r4, #0]
  401dc6:	4911      	ldr	r1, [pc, #68]	; (401e0c <vTaskPlaceOnEventList+0x70>)
  401dc8:	680a      	ldr	r2, [r1, #0]
  401dca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401dcc:	2301      	movs	r3, #1
  401dce:	4083      	lsls	r3, r0
  401dd0:	ea22 0303 	bic.w	r3, r2, r3
  401dd4:	600b      	str	r3, [r1, #0]
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401dd6:	f1b5 3fff 	cmp.w	r5, #4294967295
  401dda:	d106      	bne.n	401dea <vTaskPlaceOnEventList+0x4e>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401ddc:	4b08      	ldr	r3, [pc, #32]	; (401e00 <vTaskPlaceOnEventList+0x64>)
  401dde:	6819      	ldr	r1, [r3, #0]
  401de0:	480b      	ldr	r0, [pc, #44]	; (401e10 <vTaskPlaceOnEventList+0x74>)
  401de2:	3104      	adds	r1, #4
  401de4:	4b0b      	ldr	r3, [pc, #44]	; (401e14 <vTaskPlaceOnEventList+0x78>)
  401de6:	4798      	blx	r3
  401de8:	bd70      	pop	{r4, r5, r6, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  401dea:	4b0b      	ldr	r3, [pc, #44]	; (401e18 <vTaskPlaceOnEventList+0x7c>)
  401dec:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401dee:	4428      	add	r0, r5
  401df0:	4b0a      	ldr	r3, [pc, #40]	; (401e1c <vTaskPlaceOnEventList+0x80>)
  401df2:	4798      	blx	r3
  401df4:	bd70      	pop	{r4, r5, r6, pc}
  401df6:	bf00      	nop
  401df8:	0040765c 	.word	0x0040765c
  401dfc:	00404419 	.word	0x00404419
  401e00:	20018ab8 	.word	0x20018ab8
  401e04:	00400db5 	.word	0x00400db5
  401e08:	00400df1 	.word	0x00400df1
  401e0c:	2001893c 	.word	0x2001893c
  401e10:	20018abc 	.word	0x20018abc
  401e14:	00400d99 	.word	0x00400d99
  401e18:	20018944 	.word	0x20018944
  401e1c:	004016a9 	.word	0x004016a9

00401e20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  401e20:	b570      	push	{r4, r5, r6, lr}
  401e22:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  401e24:	4606      	mov	r6, r0
  401e26:	b920      	cbnz	r0, 401e32 <vTaskPlaceOnEventListRestricted+0x12>
  401e28:	480f      	ldr	r0, [pc, #60]	; (401e68 <vTaskPlaceOnEventListRestricted+0x48>)
  401e2a:	f240 7182 	movw	r1, #1922	; 0x782
  401e2e:	4b0f      	ldr	r3, [pc, #60]	; (401e6c <vTaskPlaceOnEventListRestricted+0x4c>)
  401e30:	4798      	blx	r3

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401e32:	4c0f      	ldr	r4, [pc, #60]	; (401e70 <vTaskPlaceOnEventListRestricted+0x50>)
  401e34:	6821      	ldr	r1, [r4, #0]
  401e36:	4630      	mov	r0, r6
  401e38:	3118      	adds	r1, #24
  401e3a:	4b0e      	ldr	r3, [pc, #56]	; (401e74 <vTaskPlaceOnEventListRestricted+0x54>)
  401e3c:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401e3e:	6820      	ldr	r0, [r4, #0]
  401e40:	3004      	adds	r0, #4
  401e42:	4b0d      	ldr	r3, [pc, #52]	; (401e78 <vTaskPlaceOnEventListRestricted+0x58>)
  401e44:	4798      	blx	r3
  401e46:	b940      	cbnz	r0, 401e5a <vTaskPlaceOnEventListRestricted+0x3a>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401e48:	6823      	ldr	r3, [r4, #0]
  401e4a:	490c      	ldr	r1, [pc, #48]	; (401e7c <vTaskPlaceOnEventListRestricted+0x5c>)
  401e4c:	680a      	ldr	r2, [r1, #0]
  401e4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401e50:	2301      	movs	r3, #1
  401e52:	4083      	lsls	r3, r0
  401e54:	ea22 0303 	bic.w	r3, r2, r3
  401e58:	600b      	str	r3, [r1, #0]
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  401e5a:	4b09      	ldr	r3, [pc, #36]	; (401e80 <vTaskPlaceOnEventListRestricted+0x60>)
  401e5c:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  401e5e:	4428      	add	r0, r5
  401e60:	4b08      	ldr	r3, [pc, #32]	; (401e84 <vTaskPlaceOnEventListRestricted+0x64>)
  401e62:	4798      	blx	r3
  401e64:	bd70      	pop	{r4, r5, r6, pc}
  401e66:	bf00      	nop
  401e68:	0040765c 	.word	0x0040765c
  401e6c:	00404419 	.word	0x00404419
  401e70:	20018ab8 	.word	0x20018ab8
  401e74:	00400d99 	.word	0x00400d99
  401e78:	00400df1 	.word	0x00400df1
  401e7c:	2001893c 	.word	0x2001893c
  401e80:	20018944 	.word	0x20018944
  401e84:	004016a9 	.word	0x004016a9

00401e88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  401e88:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401e8a:	68c3      	ldr	r3, [r0, #12]
  401e8c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401e8e:	b924      	cbnz	r4, 401e9a <xTaskRemoveFromEventList+0x12>
  401e90:	4816      	ldr	r0, [pc, #88]	; (401eec <xTaskRemoveFromEventList+0x64>)
  401e92:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
  401e96:	4b16      	ldr	r3, [pc, #88]	; (401ef0 <xTaskRemoveFromEventList+0x68>)
  401e98:	4798      	blx	r3
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401e9a:	f104 0518 	add.w	r5, r4, #24
  401e9e:	4628      	mov	r0, r5
  401ea0:	4b14      	ldr	r3, [pc, #80]	; (401ef4 <xTaskRemoveFromEventList+0x6c>)
  401ea2:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401ea4:	4b14      	ldr	r3, [pc, #80]	; (401ef8 <xTaskRemoveFromEventList+0x70>)
  401ea6:	681b      	ldr	r3, [r3, #0]
  401ea8:	b99b      	cbnz	r3, 401ed2 <xTaskRemoveFromEventList+0x4a>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401eaa:	1d25      	adds	r5, r4, #4
  401eac:	4628      	mov	r0, r5
  401eae:	4b11      	ldr	r3, [pc, #68]	; (401ef4 <xTaskRemoveFromEventList+0x6c>)
  401eb0:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  401eb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401eb4:	4911      	ldr	r1, [pc, #68]	; (401efc <xTaskRemoveFromEventList+0x74>)
  401eb6:	680a      	ldr	r2, [r1, #0]
  401eb8:	2301      	movs	r3, #1
  401eba:	4083      	lsls	r3, r0
  401ebc:	4313      	orrs	r3, r2
  401ebe:	600b      	str	r3, [r1, #0]
  401ec0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ec4:	4b0e      	ldr	r3, [pc, #56]	; (401f00 <xTaskRemoveFromEventList+0x78>)
  401ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401eca:	4629      	mov	r1, r5
  401ecc:	4b0d      	ldr	r3, [pc, #52]	; (401f04 <xTaskRemoveFromEventList+0x7c>)
  401ece:	4798      	blx	r3
  401ed0:	e003      	b.n	401eda <xTaskRemoveFromEventList+0x52>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401ed2:	480d      	ldr	r0, [pc, #52]	; (401f08 <xTaskRemoveFromEventList+0x80>)
  401ed4:	4629      	mov	r1, r5
  401ed6:	4b0b      	ldr	r3, [pc, #44]	; (401f04 <xTaskRemoveFromEventList+0x7c>)
  401ed8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401eda:	4b0c      	ldr	r3, [pc, #48]	; (401f0c <xTaskRemoveFromEventList+0x84>)
  401edc:	681b      	ldr	r3, [r3, #0]
  401ede:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
  401ee2:	4298      	cmp	r0, r3
  401ee4:	bf34      	ite	cc
  401ee6:	2000      	movcc	r0, #0
  401ee8:	2001      	movcs	r0, #1
  401eea:	bd38      	pop	{r3, r4, r5, pc}
  401eec:	0040765c 	.word	0x0040765c
  401ef0:	00404419 	.word	0x00404419
  401ef4:	00400df1 	.word	0x00400df1
  401ef8:	20018af8 	.word	0x20018af8
  401efc:	2001893c 	.word	0x2001893c
  401f00:	20018948 	.word	0x20018948
  401f04:	00400d99 	.word	0x00400d99
  401f08:	20018a94 	.word	0x20018a94
  401f0c:	20018ab8 	.word	0x20018ab8

00401f10 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  401f10:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
  401f12:	4604      	mov	r4, r0
  401f14:	b920      	cbnz	r0, 401f20 <vTaskSetTimeOutState+0x10>
  401f16:	4806      	ldr	r0, [pc, #24]	; (401f30 <vTaskSetTimeOutState+0x20>)
  401f18:	f240 71da 	movw	r1, #2010	; 0x7da
  401f1c:	4b05      	ldr	r3, [pc, #20]	; (401f34 <vTaskSetTimeOutState+0x24>)
  401f1e:	4798      	blx	r3
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401f20:	4b05      	ldr	r3, [pc, #20]	; (401f38 <vTaskSetTimeOutState+0x28>)
  401f22:	681b      	ldr	r3, [r3, #0]
  401f24:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401f26:	4b05      	ldr	r3, [pc, #20]	; (401f3c <vTaskSetTimeOutState+0x2c>)
  401f28:	681b      	ldr	r3, [r3, #0]
  401f2a:	6063      	str	r3, [r4, #4]
  401f2c:	bd10      	pop	{r4, pc}
  401f2e:	bf00      	nop
  401f30:	0040765c 	.word	0x0040765c
  401f34:	00404419 	.word	0x00404419
  401f38:	20018b00 	.word	0x20018b00
  401f3c:	20018944 	.word	0x20018944

00401f40 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  401f40:	b538      	push	{r3, r4, r5, lr}
  401f42:	460c      	mov	r4, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  401f44:	4605      	mov	r5, r0
  401f46:	b920      	cbnz	r0, 401f52 <xTaskCheckForTimeOut+0x12>
  401f48:	4819      	ldr	r0, [pc, #100]	; (401fb0 <xTaskCheckForTimeOut+0x70>)
  401f4a:	f240 71e4 	movw	r1, #2020	; 0x7e4
  401f4e:	4b19      	ldr	r3, [pc, #100]	; (401fb4 <xTaskCheckForTimeOut+0x74>)
  401f50:	4798      	blx	r3
	configASSERT( pxTicksToWait );
  401f52:	b924      	cbnz	r4, 401f5e <xTaskCheckForTimeOut+0x1e>
  401f54:	4816      	ldr	r0, [pc, #88]	; (401fb0 <xTaskCheckForTimeOut+0x70>)
  401f56:	f240 71e5 	movw	r1, #2021	; 0x7e5
  401f5a:	4b16      	ldr	r3, [pc, #88]	; (401fb4 <xTaskCheckForTimeOut+0x74>)
  401f5c:	4798      	blx	r3

	taskENTER_CRITICAL();
  401f5e:	4b16      	ldr	r3, [pc, #88]	; (401fb8 <xTaskCheckForTimeOut+0x78>)
  401f60:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401f62:	6823      	ldr	r3, [r4, #0]
  401f64:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f68:	d019      	beq.n	401f9e <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  401f6a:	4a14      	ldr	r2, [pc, #80]	; (401fbc <xTaskCheckForTimeOut+0x7c>)
  401f6c:	6812      	ldr	r2, [r2, #0]
  401f6e:	6829      	ldr	r1, [r5, #0]
  401f70:	4291      	cmp	r1, r2
  401f72:	d004      	beq.n	401f7e <xTaskCheckForTimeOut+0x3e>
  401f74:	4a12      	ldr	r2, [pc, #72]	; (401fc0 <xTaskCheckForTimeOut+0x80>)
  401f76:	6812      	ldr	r2, [r2, #0]
  401f78:	6869      	ldr	r1, [r5, #4]
  401f7a:	4291      	cmp	r1, r2
  401f7c:	d911      	bls.n	401fa2 <xTaskCheckForTimeOut+0x62>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  401f7e:	4a10      	ldr	r2, [pc, #64]	; (401fc0 <xTaskCheckForTimeOut+0x80>)
  401f80:	6812      	ldr	r2, [r2, #0]
  401f82:	6869      	ldr	r1, [r5, #4]
  401f84:	1a52      	subs	r2, r2, r1
  401f86:	4293      	cmp	r3, r2
  401f88:	d90d      	bls.n	401fa6 <xTaskCheckForTimeOut+0x66>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  401f8a:	4a0d      	ldr	r2, [pc, #52]	; (401fc0 <xTaskCheckForTimeOut+0x80>)
  401f8c:	6812      	ldr	r2, [r2, #0]
  401f8e:	1a51      	subs	r1, r2, r1
  401f90:	1a5b      	subs	r3, r3, r1
  401f92:	6023      	str	r3, [r4, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401f94:	4628      	mov	r0, r5
  401f96:	4b0b      	ldr	r3, [pc, #44]	; (401fc4 <xTaskCheckForTimeOut+0x84>)
  401f98:	4798      	blx	r3
			xReturn = pdFALSE;
  401f9a:	2400      	movs	r4, #0
  401f9c:	e004      	b.n	401fa8 <xTaskCheckForTimeOut+0x68>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  401f9e:	2400      	movs	r4, #0
  401fa0:	e002      	b.n	401fa8 <xTaskCheckForTimeOut+0x68>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401fa2:	2401      	movs	r4, #1
  401fa4:	e000      	b.n	401fa8 <xTaskCheckForTimeOut+0x68>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  401fa6:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  401fa8:	4b07      	ldr	r3, [pc, #28]	; (401fc8 <xTaskCheckForTimeOut+0x88>)
  401faa:	4798      	blx	r3

	return xReturn;
}
  401fac:	4620      	mov	r0, r4
  401fae:	bd38      	pop	{r3, r4, r5, pc}
  401fb0:	0040765c 	.word	0x0040765c
  401fb4:	00404419 	.word	0x00404419
  401fb8:	00400ea1 	.word	0x00400ea1
  401fbc:	20018b00 	.word	0x20018b00
  401fc0:	20018944 	.word	0x20018944
  401fc4:	00401f11 	.word	0x00401f11
  401fc8:	00400ec1 	.word	0x00400ec1

00401fcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
  401fcc:	2201      	movs	r2, #1
  401fce:	4b01      	ldr	r3, [pc, #4]	; (401fd4 <vTaskMissedYield+0x8>)
  401fd0:	601a      	str	r2, [r3, #0]
  401fd2:	4770      	bx	lr
  401fd4:	20018ab0 	.word	0x20018ab0

00401fd8 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401fd8:	4b01      	ldr	r3, [pc, #4]	; (401fe0 <xTaskGetCurrentTaskHandle+0x8>)
  401fda:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
  401fdc:	4770      	bx	lr
  401fde:	bf00      	nop
  401fe0:	20018ab8 	.word	0x20018ab8

00401fe4 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  401fe4:	4b05      	ldr	r3, [pc, #20]	; (401ffc <xTaskGetSchedulerState+0x18>)
  401fe6:	681b      	ldr	r3, [r3, #0]
  401fe8:	b133      	cbz	r3, 401ff8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401fea:	4b05      	ldr	r3, [pc, #20]	; (402000 <xTaskGetSchedulerState+0x1c>)
  401fec:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401fee:	2b00      	cmp	r3, #0
  401ff0:	bf0c      	ite	eq
  401ff2:	2001      	moveq	r0, #1
  401ff4:	2002      	movne	r0, #2
  401ff6:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401ff8:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  401ffa:	4770      	bx	lr
  401ffc:	20018aa8 	.word	0x20018aa8
  402000:	20018af8 	.word	0x20018af8

00402004 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402004:	2800      	cmp	r0, #0
  402006:	d040      	beq.n	40208a <vTaskPriorityInherit+0x86>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  402008:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40200a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40200c:	491f      	ldr	r1, [pc, #124]	; (40208c <vTaskPriorityInherit+0x88>)
  40200e:	6809      	ldr	r1, [r1, #0]
  402010:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402012:	428b      	cmp	r3, r1
  402014:	d238      	bcs.n	402088 <vTaskPriorityInherit+0x84>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  402016:	491d      	ldr	r1, [pc, #116]	; (40208c <vTaskPriorityInherit+0x88>)
  402018:	6809      	ldr	r1, [r1, #0]
  40201a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40201c:	f1c1 010f 	rsb	r1, r1, #15
  402020:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402022:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402026:	491a      	ldr	r1, [pc, #104]	; (402090 <vTaskPriorityInherit+0x8c>)
  402028:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40202c:	6941      	ldr	r1, [r0, #20]
  40202e:	4299      	cmp	r1, r3
  402030:	d126      	bne.n	402080 <vTaskPriorityInherit+0x7c>
  402032:	4604      	mov	r4, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  402034:	1d05      	adds	r5, r0, #4
  402036:	4628      	mov	r0, r5
  402038:	4b16      	ldr	r3, [pc, #88]	; (402094 <vTaskPriorityInherit+0x90>)
  40203a:	4798      	blx	r3
  40203c:	b968      	cbnz	r0, 40205a <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40203e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402040:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  402044:	009b      	lsls	r3, r3, #2
  402046:	4912      	ldr	r1, [pc, #72]	; (402090 <vTaskPriorityInherit+0x8c>)
  402048:	58cb      	ldr	r3, [r1, r3]
  40204a:	b933      	cbnz	r3, 40205a <vTaskPriorityInherit+0x56>
  40204c:	4812      	ldr	r0, [pc, #72]	; (402098 <vTaskPriorityInherit+0x94>)
  40204e:	6801      	ldr	r1, [r0, #0]
  402050:	2301      	movs	r3, #1
  402052:	4093      	lsls	r3, r2
  402054:	ea21 0303 	bic.w	r3, r1, r3
  402058:	6003      	str	r3, [r0, #0]
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40205a:	4b0c      	ldr	r3, [pc, #48]	; (40208c <vTaskPriorityInherit+0x88>)
  40205c:	681b      	ldr	r3, [r3, #0]
  40205e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402060:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  402062:	490d      	ldr	r1, [pc, #52]	; (402098 <vTaskPriorityInherit+0x94>)
  402064:	680a      	ldr	r2, [r1, #0]
  402066:	2301      	movs	r3, #1
  402068:	4083      	lsls	r3, r0
  40206a:	4313      	orrs	r3, r2
  40206c:	600b      	str	r3, [r1, #0]
  40206e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402072:	4b07      	ldr	r3, [pc, #28]	; (402090 <vTaskPriorityInherit+0x8c>)
  402074:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402078:	4629      	mov	r1, r5
  40207a:	4b08      	ldr	r3, [pc, #32]	; (40209c <vTaskPriorityInherit+0x98>)
  40207c:	4798      	blx	r3
  40207e:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402080:	4b02      	ldr	r3, [pc, #8]	; (40208c <vTaskPriorityInherit+0x88>)
  402082:	681b      	ldr	r3, [r3, #0]
  402084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402086:	62c3      	str	r3, [r0, #44]	; 0x2c
  402088:	bd38      	pop	{r3, r4, r5, pc}
  40208a:	4770      	bx	lr
  40208c:	20018ab8 	.word	0x20018ab8
  402090:	20018948 	.word	0x20018948
  402094:	00400df1 	.word	0x00400df1
  402098:	2001893c 	.word	0x2001893c
  40209c:	00400d99 	.word	0x00400d99

004020a0 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
  4020a0:	2800      	cmp	r0, #0
  4020a2:	d02c      	beq.n	4020fe <vTaskPriorityDisinherit+0x5e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  4020a4:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4020a6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  4020a8:	6c82      	ldr	r2, [r0, #72]	; 0x48
  4020aa:	4291      	cmp	r1, r2
  4020ac:	d026      	beq.n	4020fc <vTaskPriorityDisinherit+0x5c>
  4020ae:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4020b0:	1d05      	adds	r5, r0, #4
  4020b2:	4628      	mov	r0, r5
  4020b4:	4b12      	ldr	r3, [pc, #72]	; (402100 <vTaskPriorityDisinherit+0x60>)
  4020b6:	4798      	blx	r3
  4020b8:	b968      	cbnz	r0, 4020d6 <vTaskPriorityDisinherit+0x36>
				{
					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4020ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4020bc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  4020c0:	009b      	lsls	r3, r3, #2
  4020c2:	4910      	ldr	r1, [pc, #64]	; (402104 <vTaskPriorityDisinherit+0x64>)
  4020c4:	58cb      	ldr	r3, [r1, r3]
  4020c6:	b933      	cbnz	r3, 4020d6 <vTaskPriorityDisinherit+0x36>
  4020c8:	480f      	ldr	r0, [pc, #60]	; (402108 <vTaskPriorityDisinherit+0x68>)
  4020ca:	6801      	ldr	r1, [r0, #0]
  4020cc:	2301      	movs	r3, #1
  4020ce:	4093      	lsls	r3, r2
  4020d0:	ea21 0303 	bic.w	r3, r1, r3
  4020d4:	6003      	str	r3, [r0, #0]
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  4020d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4020d8:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  4020da:	f1c3 020f 	rsb	r2, r3, #15
  4020de:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
  4020e0:	4809      	ldr	r0, [pc, #36]	; (402108 <vTaskPriorityDisinherit+0x68>)
  4020e2:	6801      	ldr	r1, [r0, #0]
  4020e4:	2201      	movs	r2, #1
  4020e6:	409a      	lsls	r2, r3
  4020e8:	430a      	orrs	r2, r1
  4020ea:	6002      	str	r2, [r0, #0]
  4020ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4020f0:	4804      	ldr	r0, [pc, #16]	; (402104 <vTaskPriorityDisinherit+0x64>)
  4020f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  4020f6:	4629      	mov	r1, r5
  4020f8:	4b04      	ldr	r3, [pc, #16]	; (40210c <vTaskPriorityDisinherit+0x6c>)
  4020fa:	4798      	blx	r3
  4020fc:	bd38      	pop	{r3, r4, r5, pc}
  4020fe:	4770      	bx	lr
  402100:	00400df1 	.word	0x00400df1
  402104:	20018948 	.word	0x20018948
  402108:	2001893c 	.word	0x2001893c
  40210c:	00400d99 	.word	0x00400d99

00402110 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  402110:	b510      	push	{r4, lr}
  402112:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402114:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402116:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  402118:	4291      	cmp	r1, r2
  40211a:	d80a      	bhi.n	402132 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  40211c:	1ad2      	subs	r2, r2, r3
  40211e:	6983      	ldr	r3, [r0, #24]
  402120:	429a      	cmp	r2, r3
  402122:	d211      	bcs.n	402148 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402124:	4b0a      	ldr	r3, [pc, #40]	; (402150 <prvInsertTimerInActiveList+0x40>)
  402126:	6818      	ldr	r0, [r3, #0]
  402128:	1d21      	adds	r1, r4, #4
  40212a:	4b0a      	ldr	r3, [pc, #40]	; (402154 <prvInsertTimerInActiveList+0x44>)
  40212c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  40212e:	2000      	movs	r0, #0
  402130:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402132:	429a      	cmp	r2, r3
  402134:	d201      	bcs.n	40213a <prvInsertTimerInActiveList+0x2a>
  402136:	4299      	cmp	r1, r3
  402138:	d208      	bcs.n	40214c <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40213a:	4b07      	ldr	r3, [pc, #28]	; (402158 <prvInsertTimerInActiveList+0x48>)
  40213c:	6818      	ldr	r0, [r3, #0]
  40213e:	1d21      	adds	r1, r4, #4
  402140:	4b04      	ldr	r3, [pc, #16]	; (402154 <prvInsertTimerInActiveList+0x44>)
  402142:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  402144:	2000      	movs	r0, #0
  402146:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402148:	2001      	movs	r0, #1
  40214a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40214c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40214e:	bd10      	pop	{r4, pc}
  402150:	20018b3c 	.word	0x20018b3c
  402154:	00400db5 	.word	0x00400db5
  402158:	20018b08 	.word	0x20018b08

0040215c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  40215c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40215e:	4b0d      	ldr	r3, [pc, #52]	; (402194 <prvCheckForValidListAndQueue+0x38>)
  402160:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402162:	4b0d      	ldr	r3, [pc, #52]	; (402198 <prvCheckForValidListAndQueue+0x3c>)
  402164:	681b      	ldr	r3, [r3, #0]
  402166:	b98b      	cbnz	r3, 40218c <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
  402168:	4d0c      	ldr	r5, [pc, #48]	; (40219c <prvCheckForValidListAndQueue+0x40>)
  40216a:	4628      	mov	r0, r5
  40216c:	4e0c      	ldr	r6, [pc, #48]	; (4021a0 <prvCheckForValidListAndQueue+0x44>)
  40216e:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402170:	4c0c      	ldr	r4, [pc, #48]	; (4021a4 <prvCheckForValidListAndQueue+0x48>)
  402172:	4620      	mov	r0, r4
  402174:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402176:	4b0c      	ldr	r3, [pc, #48]	; (4021a8 <prvCheckForValidListAndQueue+0x4c>)
  402178:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40217a:	4b0c      	ldr	r3, [pc, #48]	; (4021ac <prvCheckForValidListAndQueue+0x50>)
  40217c:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  40217e:	2005      	movs	r0, #5
  402180:	210c      	movs	r1, #12
  402182:	2200      	movs	r2, #0
  402184:	4b0a      	ldr	r3, [pc, #40]	; (4021b0 <prvCheckForValidListAndQueue+0x54>)
  402186:	4798      	blx	r3
  402188:	4b03      	ldr	r3, [pc, #12]	; (402198 <prvCheckForValidListAndQueue+0x3c>)
  40218a:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  40218c:	4b09      	ldr	r3, [pc, #36]	; (4021b4 <prvCheckForValidListAndQueue+0x58>)
  40218e:	4798      	blx	r3
  402190:	bd70      	pop	{r4, r5, r6, pc}
  402192:	bf00      	nop
  402194:	00400ea1 	.word	0x00400ea1
  402198:	20018b38 	.word	0x20018b38
  40219c:	20018b0c 	.word	0x20018b0c
  4021a0:	00400d79 	.word	0x00400d79
  4021a4:	20018b20 	.word	0x20018b20
  4021a8:	20018b08 	.word	0x20018b08
  4021ac:	20018b3c 	.word	0x20018b3c
  4021b0:	004012cd 	.word	0x004012cd
  4021b4:	00400ec1 	.word	0x00400ec1

004021b8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  4021b8:	b510      	push	{r4, lr}
  4021ba:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4021bc:	4b0d      	ldr	r3, [pc, #52]	; (4021f4 <xTimerCreateTimerTask+0x3c>)
  4021be:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4021c0:	4b0d      	ldr	r3, [pc, #52]	; (4021f8 <xTimerCreateTimerTask+0x40>)
  4021c2:	681b      	ldr	r3, [r3, #0]
  4021c4:	b16b      	cbz	r3, 4021e2 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4021c6:	230e      	movs	r3, #14
  4021c8:	9300      	str	r3, [sp, #0]
  4021ca:	2300      	movs	r3, #0
  4021cc:	9301      	str	r3, [sp, #4]
  4021ce:	9302      	str	r3, [sp, #8]
  4021d0:	9303      	str	r3, [sp, #12]
  4021d2:	480a      	ldr	r0, [pc, #40]	; (4021fc <xTimerCreateTimerTask+0x44>)
  4021d4:	490a      	ldr	r1, [pc, #40]	; (402200 <xTimerCreateTimerTask+0x48>)
  4021d6:	f44f 7243 	mov.w	r2, #780	; 0x30c
  4021da:	4c0a      	ldr	r4, [pc, #40]	; (402204 <xTimerCreateTimerTask+0x4c>)
  4021dc:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
  4021de:	4603      	mov	r3, r0
  4021e0:	b920      	cbnz	r0, 4021ec <xTimerCreateTimerTask+0x34>
  4021e2:	4809      	ldr	r0, [pc, #36]	; (402208 <xTimerCreateTimerTask+0x50>)
  4021e4:	21da      	movs	r1, #218	; 0xda
  4021e6:	4b09      	ldr	r3, [pc, #36]	; (40220c <xTimerCreateTimerTask+0x54>)
  4021e8:	4798      	blx	r3
  4021ea:	2300      	movs	r3, #0
	return xReturn;
}
  4021ec:	4618      	mov	r0, r3
  4021ee:	b004      	add	sp, #16
  4021f0:	bd10      	pop	{r4, pc}
  4021f2:	bf00      	nop
  4021f4:	0040215d 	.word	0x0040215d
  4021f8:	20018b38 	.word	0x20018b38
  4021fc:	00402379 	.word	0x00402379
  402200:	004076a4 	.word	0x004076a4
  402204:	00401701 	.word	0x00401701
  402208:	004076ac 	.word	0x004076ac
  40220c:	00404419 	.word	0x00404419

00402210 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
  402210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
  402214:	b929      	cbnz	r1, 402222 <xTimerCreate+0x12>
	{
		pxNewTimer = NULL;
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
  402216:	480f      	ldr	r0, [pc, #60]	; (402254 <xTimerCreate+0x44>)
  402218:	21e7      	movs	r1, #231	; 0xe7
  40221a:	4b0f      	ldr	r3, [pc, #60]	; (402258 <xTimerCreate+0x48>)
  40221c:	4798      	blx	r3
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
	{
		pxNewTimer = NULL;
  40221e:	2400      	movs	r4, #0
  402220:	e014      	b.n	40224c <xTimerCreate+0x3c>
  402222:	4680      	mov	r8, r0
  402224:	4616      	mov	r6, r2
  402226:	461d      	mov	r5, r3
  402228:	460f      	mov	r7, r1
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
  40222a:	2028      	movs	r0, #40	; 0x28
  40222c:	4b0b      	ldr	r3, [pc, #44]	; (40225c <xTimerCreate+0x4c>)
  40222e:	4798      	blx	r3
		if( pxNewTimer != NULL )
  402230:	4604      	mov	r4, r0
  402232:	b158      	cbz	r0, 40224c <xTimerCreate+0x3c>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  402234:	4b0a      	ldr	r3, [pc, #40]	; (402260 <xTimerCreate+0x50>)
  402236:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  402238:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  40223c:	61a7      	str	r7, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  40223e:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  402240:	6225      	str	r5, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  402242:	9b06      	ldr	r3, [sp, #24]
  402244:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  402246:	1d20      	adds	r0, r4, #4
  402248:	4b06      	ldr	r3, [pc, #24]	; (402264 <xTimerCreate+0x54>)
  40224a:	4798      	blx	r3
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
}
  40224c:	4620      	mov	r0, r4
  40224e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402252:	bf00      	nop
  402254:	004076ac 	.word	0x004076ac
  402258:	00404419 	.word	0x00404419
  40225c:	00401015 	.word	0x00401015
  402260:	0040215d 	.word	0x0040215d
  402264:	00400d91 	.word	0x00400d91

00402268 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  402268:	b530      	push	{r4, r5, lr}
  40226a:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  40226c:	4c0f      	ldr	r4, [pc, #60]	; (4022ac <xTimerGenericCommand+0x44>)
  40226e:	6825      	ldr	r5, [r4, #0]
  402270:	b1c5      	cbz	r5, 4022a4 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402272:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
  402274:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  402276:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
  402278:	b96b      	cbnz	r3, 402296 <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40227a:	4b0d      	ldr	r3, [pc, #52]	; (4022b0 <xTimerGenericCommand+0x48>)
  40227c:	4798      	blx	r3
  40227e:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  402280:	4b0a      	ldr	r3, [pc, #40]	; (4022ac <xTimerGenericCommand+0x44>)
  402282:	6818      	ldr	r0, [r3, #0]
  402284:	a901      	add	r1, sp, #4
  402286:	bf07      	ittee	eq
  402288:	9a08      	ldreq	r2, [sp, #32]
  40228a:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40228c:	2200      	movne	r2, #0
  40228e:	4613      	movne	r3, r2
  402290:	4c08      	ldr	r4, [pc, #32]	; (4022b4 <xTimerGenericCommand+0x4c>)
  402292:	47a0      	blx	r4
  402294:	e007      	b.n	4022a6 <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402296:	4628      	mov	r0, r5
  402298:	a901      	add	r1, sp, #4
  40229a:	461a      	mov	r2, r3
  40229c:	2300      	movs	r3, #0
  40229e:	4c06      	ldr	r4, [pc, #24]	; (4022b8 <xTimerGenericCommand+0x50>)
  4022a0:	47a0      	blx	r4
  4022a2:	e000      	b.n	4022a6 <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
  4022a4:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
  4022a6:	b005      	add	sp, #20
  4022a8:	bd30      	pop	{r4, r5, pc}
  4022aa:	bf00      	nop
  4022ac:	20018b38 	.word	0x20018b38
  4022b0:	00401fe5 	.word	0x00401fe5
  4022b4:	0040132d 	.word	0x0040132d
  4022b8:	0040145d 	.word	0x0040145d

004022bc <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  4022bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4022c0:	b082      	sub	sp, #8
  4022c2:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  4022c4:	4b23      	ldr	r3, [pc, #140]	; (402354 <prvSampleTimeNow+0x98>)
  4022c6:	4798      	blx	r3
  4022c8:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
  4022ca:	4b23      	ldr	r3, [pc, #140]	; (402358 <prvSampleTimeNow+0x9c>)
  4022cc:	681b      	ldr	r3, [r3, #0]
  4022ce:	4298      	cmp	r0, r3
  4022d0:	d236      	bcs.n	402340 <prvSampleTimeNow+0x84>
  4022d2:	e026      	b.n	402322 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4022d4:	68da      	ldr	r2, [r3, #12]
  4022d6:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4022da:	68db      	ldr	r3, [r3, #12]
  4022dc:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4022de:	1d25      	adds	r5, r4, #4
  4022e0:	4628      	mov	r0, r5
  4022e2:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4022e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4022e6:	4620      	mov	r0, r4
  4022e8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4022ea:	69e3      	ldr	r3, [r4, #28]
  4022ec:	2b01      	cmp	r3, #1
  4022ee:	d11a      	bne.n	402326 <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4022f0:	69a3      	ldr	r3, [r4, #24]
  4022f2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4022f4:	4553      	cmp	r3, sl
  4022f6:	d906      	bls.n	402306 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4022f8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4022fa:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4022fc:	6830      	ldr	r0, [r6, #0]
  4022fe:	4629      	mov	r1, r5
  402300:	4b16      	ldr	r3, [pc, #88]	; (40235c <prvSampleTimeNow+0xa0>)
  402302:	4798      	blx	r3
  402304:	e00f      	b.n	402326 <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  402306:	2300      	movs	r3, #0
  402308:	9300      	str	r3, [sp, #0]
  40230a:	4620      	mov	r0, r4
  40230c:	4619      	mov	r1, r3
  40230e:	4652      	mov	r2, sl
  402310:	4c13      	ldr	r4, [pc, #76]	; (402360 <prvSampleTimeNow+0xa4>)
  402312:	47a0      	blx	r4
				configASSERT( xResult );
  402314:	b938      	cbnz	r0, 402326 <prvSampleTimeNow+0x6a>
  402316:	4813      	ldr	r0, [pc, #76]	; (402364 <prvSampleTimeNow+0xa8>)
  402318:	f240 2175 	movw	r1, #629	; 0x275
  40231c:	4b12      	ldr	r3, [pc, #72]	; (402368 <prvSampleTimeNow+0xac>)
  40231e:	4798      	blx	r3
  402320:	e001      	b.n	402326 <prvSampleTimeNow+0x6a>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402322:	4e12      	ldr	r6, [pc, #72]	; (40236c <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
  402324:	4f12      	ldr	r7, [pc, #72]	; (402370 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402326:	6833      	ldr	r3, [r6, #0]
  402328:	681a      	ldr	r2, [r3, #0]
  40232a:	2a00      	cmp	r2, #0
  40232c:	d1d2      	bne.n	4022d4 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  40232e:	4a11      	ldr	r2, [pc, #68]	; (402374 <prvSampleTimeNow+0xb8>)
  402330:	6810      	ldr	r0, [r2, #0]
  402332:	490e      	ldr	r1, [pc, #56]	; (40236c <prvSampleTimeNow+0xb0>)
  402334:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402336:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
  402338:	2301      	movs	r3, #1
  40233a:	f8c9 3000 	str.w	r3, [r9]
  40233e:	e002      	b.n	402346 <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402340:	2300      	movs	r3, #0
  402342:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
  402346:	4b04      	ldr	r3, [pc, #16]	; (402358 <prvSampleTimeNow+0x9c>)
  402348:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
  40234c:	4640      	mov	r0, r8
  40234e:	b002      	add	sp, #8
  402350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402354:	00401991 	.word	0x00401991
  402358:	20018b34 	.word	0x20018b34
  40235c:	00400db5 	.word	0x00400db5
  402360:	00402269 	.word	0x00402269
  402364:	004076ac 	.word	0x004076ac
  402368:	00404419 	.word	0x00404419
  40236c:	20018b08 	.word	0x20018b08
  402370:	00400df1 	.word	0x00400df1
  402374:	20018b3c 	.word	0x20018b3c

00402378 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  402378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40237c:	b087      	sub	sp, #28
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40237e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 4024ec <prvTimerTask+0x174>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  402382:	f8df b16c 	ldr.w	fp, [pc, #364]	; 4024f0 <prvTimerTask+0x178>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  402386:	4e4e      	ldr	r6, [pc, #312]	; (4024c0 <prvTimerTask+0x148>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
  402388:	f8df 8168 	ldr.w	r8, [pc, #360]	; 4024f4 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40238c:	f8da 3000 	ldr.w	r3, [sl]
  402390:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402392:	2a00      	cmp	r2, #0
  402394:	f000 808b 	beq.w	4024ae <prvTimerTask+0x136>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402398:	68db      	ldr	r3, [r3, #12]
  40239a:	681d      	ldr	r5, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  40239c:	47d8      	blx	fp
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40239e:	a803      	add	r0, sp, #12
  4023a0:	4b48      	ldr	r3, [pc, #288]	; (4024c4 <prvTimerTask+0x14c>)
  4023a2:	4798      	blx	r3
  4023a4:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4023a6:	9b03      	ldr	r3, [sp, #12]
  4023a8:	2b00      	cmp	r3, #0
  4023aa:	d131      	bne.n	402410 <prvTimerTask+0x98>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4023ac:	4285      	cmp	r5, r0
  4023ae:	d825      	bhi.n	4023fc <prvTimerTask+0x84>
			{
				xTaskResumeAll();
  4023b0:	4b45      	ldr	r3, [pc, #276]	; (4024c8 <prvTimerTask+0x150>)
  4023b2:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4023b4:	f8da 3000 	ldr.w	r3, [sl]
  4023b8:	68db      	ldr	r3, [r3, #12]
  4023ba:	68df      	ldr	r7, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  4023bc:	1d38      	adds	r0, r7, #4
  4023be:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4023c0:	69fb      	ldr	r3, [r7, #28]
  4023c2:	2b01      	cmp	r3, #1
  4023c4:	d115      	bne.n	4023f2 <prvTimerTask+0x7a>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4023c6:	69b9      	ldr	r1, [r7, #24]
  4023c8:	4638      	mov	r0, r7
  4023ca:	4429      	add	r1, r5
  4023cc:	4622      	mov	r2, r4
  4023ce:	462b      	mov	r3, r5
  4023d0:	4c3e      	ldr	r4, [pc, #248]	; (4024cc <prvTimerTask+0x154>)
  4023d2:	47a0      	blx	r4
  4023d4:	2801      	cmp	r0, #1
  4023d6:	d10c      	bne.n	4023f2 <prvTimerTask+0x7a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4023d8:	2300      	movs	r3, #0
  4023da:	9300      	str	r3, [sp, #0]
  4023dc:	4638      	mov	r0, r7
  4023de:	4619      	mov	r1, r3
  4023e0:	462a      	mov	r2, r5
  4023e2:	4c3b      	ldr	r4, [pc, #236]	; (4024d0 <prvTimerTask+0x158>)
  4023e4:	47a0      	blx	r4
			configASSERT( xResult );
  4023e6:	b920      	cbnz	r0, 4023f2 <prvTimerTask+0x7a>
  4023e8:	483a      	ldr	r0, [pc, #232]	; (4024d4 <prvTimerTask+0x15c>)
  4023ea:	f44f 71a9 	mov.w	r1, #338	; 0x152
  4023ee:	4b3a      	ldr	r3, [pc, #232]	; (4024d8 <prvTimerTask+0x160>)
  4023f0:	4798      	blx	r3
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4023f4:	4638      	mov	r0, r7
  4023f6:	4798      	blx	r3
  4023f8:	e00c      	b.n	402414 <prvTimerTask+0x9c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  4023fa:	2500      	movs	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  4023fc:	6830      	ldr	r0, [r6, #0]
  4023fe:	1b29      	subs	r1, r5, r4
  402400:	4b36      	ldr	r3, [pc, #216]	; (4024dc <prvTimerTask+0x164>)
  402402:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  402404:	4b30      	ldr	r3, [pc, #192]	; (4024c8 <prvTimerTask+0x150>)
  402406:	4798      	blx	r3
  402408:	b920      	cbnz	r0, 402414 <prvTimerTask+0x9c>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  40240a:	4b35      	ldr	r3, [pc, #212]	; (4024e0 <prvTimerTask+0x168>)
  40240c:	4798      	blx	r3
  40240e:	e001      	b.n	402414 <prvTimerTask+0x9c>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  402410:	4b2d      	ldr	r3, [pc, #180]	; (4024c8 <prvTimerTask+0x150>)
  402412:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402414:	a802      	add	r0, sp, #8
  402416:	4b2b      	ldr	r3, [pc, #172]	; (4024c4 <prvTimerTask+0x14c>)
  402418:	4798      	blx	r3
  40241a:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40241c:	4d31      	ldr	r5, [pc, #196]	; (4024e4 <prvTimerTask+0x16c>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40241e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 4024cc <prvTimerTask+0x154>
  402422:	e03c      	b.n	40249e <prvTimerTask+0x126>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
  402424:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  402426:	b11c      	cbz	r4, 402430 <prvTimerTask+0xb8>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402428:	6963      	ldr	r3, [r4, #20]
  40242a:	b10b      	cbz	r3, 402430 <prvTimerTask+0xb8>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  40242c:	1d20      	adds	r0, r4, #4
  40242e:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  402430:	9b03      	ldr	r3, [sp, #12]
  402432:	2b02      	cmp	r3, #2
  402434:	d021      	beq.n	40247a <prvTimerTask+0x102>
  402436:	2b03      	cmp	r3, #3
  402438:	d02e      	beq.n	402498 <prvTimerTask+0x120>
  40243a:	2b00      	cmp	r3, #0
  40243c:	d12f      	bne.n	40249e <prvTimerTask+0x126>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  40243e:	9b04      	ldr	r3, [sp, #16]
  402440:	69a1      	ldr	r1, [r4, #24]
  402442:	4620      	mov	r0, r4
  402444:	4419      	add	r1, r3
  402446:	463a      	mov	r2, r7
  402448:	47c8      	blx	r9
  40244a:	2801      	cmp	r0, #1
  40244c:	d127      	bne.n	40249e <prvTimerTask+0x126>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40244e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402450:	4620      	mov	r0, r4
  402452:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402454:	69e3      	ldr	r3, [r4, #28]
  402456:	2b01      	cmp	r3, #1
  402458:	d121      	bne.n	40249e <prvTimerTask+0x126>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40245a:	69a2      	ldr	r2, [r4, #24]
  40245c:	2300      	movs	r3, #0
  40245e:	9300      	str	r3, [sp, #0]
  402460:	4620      	mov	r0, r4
  402462:	4619      	mov	r1, r3
  402464:	9c04      	ldr	r4, [sp, #16]
  402466:	4422      	add	r2, r4
  402468:	4c19      	ldr	r4, [pc, #100]	; (4024d0 <prvTimerTask+0x158>)
  40246a:	47a0      	blx	r4
						configASSERT( xResult );
  40246c:	b9b8      	cbnz	r0, 40249e <prvTimerTask+0x126>
  40246e:	4819      	ldr	r0, [pc, #100]	; (4024d4 <prvTimerTask+0x15c>)
  402470:	f240 2129 	movw	r1, #553	; 0x229
  402474:	4b18      	ldr	r3, [pc, #96]	; (4024d8 <prvTimerTask+0x160>)
  402476:	4798      	blx	r3
  402478:	e011      	b.n	40249e <prvTimerTask+0x126>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  40247a:	9b04      	ldr	r3, [sp, #16]
  40247c:	61a3      	str	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40247e:	b923      	cbnz	r3, 40248a <prvTimerTask+0x112>
  402480:	4814      	ldr	r0, [pc, #80]	; (4024d4 <prvTimerTask+0x15c>)
  402482:	f240 2136 	movw	r1, #566	; 0x236
  402486:	4b14      	ldr	r3, [pc, #80]	; (4024d8 <prvTimerTask+0x160>)
  402488:	4798      	blx	r3
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40248a:	69a1      	ldr	r1, [r4, #24]
  40248c:	4620      	mov	r0, r4
  40248e:	4439      	add	r1, r7
  402490:	463a      	mov	r2, r7
  402492:	463b      	mov	r3, r7
  402494:	47c8      	blx	r9
  402496:	e002      	b.n	40249e <prvTimerTask+0x126>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  402498:	4620      	mov	r0, r4
  40249a:	4b13      	ldr	r3, [pc, #76]	; (4024e8 <prvTimerTask+0x170>)
  40249c:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40249e:	6830      	ldr	r0, [r6, #0]
  4024a0:	a903      	add	r1, sp, #12
  4024a2:	2200      	movs	r2, #0
  4024a4:	4613      	mov	r3, r2
  4024a6:	47a8      	blx	r5
  4024a8:	2800      	cmp	r0, #0
  4024aa:	d1bb      	bne.n	402424 <prvTimerTask+0xac>
  4024ac:	e76e      	b.n	40238c <prvTimerTask+0x14>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  4024ae:	47d8      	blx	fp
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4024b0:	a803      	add	r0, sp, #12
  4024b2:	4b04      	ldr	r3, [pc, #16]	; (4024c4 <prvTimerTask+0x14c>)
  4024b4:	4798      	blx	r3
  4024b6:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4024b8:	9b03      	ldr	r3, [sp, #12]
  4024ba:	2b00      	cmp	r3, #0
  4024bc:	d09d      	beq.n	4023fa <prvTimerTask+0x82>
  4024be:	e7a7      	b.n	402410 <prvTimerTask+0x98>
  4024c0:	20018b38 	.word	0x20018b38
  4024c4:	004022bd 	.word	0x004022bd
  4024c8:	00401b25 	.word	0x00401b25
  4024cc:	00402111 	.word	0x00402111
  4024d0:	00402269 	.word	0x00402269
  4024d4:	004076ac 	.word	0x004076ac
  4024d8:	00404419 	.word	0x00404419
  4024dc:	0040165d 	.word	0x0040165d
  4024e0:	00400e81 	.word	0x00400e81
  4024e4:	004014f9 	.word	0x004014f9
  4024e8:	004010f5 	.word	0x004010f5
  4024ec:	20018b08 	.word	0x20018b08
  4024f0:	00401981 	.word	0x00401981
  4024f4:	00400df1 	.word	0x00400df1

004024f8 <tSensor_serial_init>:
}UARTStateMachine_t;

UARTStateMachine_t uartStateMachine = UART_STATE_MACHINE_SYMBOL_H;

void tSensor_serial_init(void)
{
  4024f8:	b510      	push	{r4, lr}
  4024fa:	b086      	sub	sp, #24
	uint32_t rx_timeout = (SERIAL_FRAME_INTERVAL * USART_BAUDRATE) / 1000;
	sam_usart_opt_t usart_settings = {
  4024fc:	2300      	movs	r3, #0
  4024fe:	9302      	str	r3, [sp, #8]
  402500:	9303      	str	r3, [sp, #12]
  402502:	9304      	str	r3, [sp, #16]
  402504:	9305      	str	r3, [sp, #20]
  402506:	4b17      	ldr	r3, [pc, #92]	; (402564 <tSensor_serial_init+0x6c>)
  402508:	9300      	str	r3, [sp, #0]
  40250a:	23c0      	movs	r3, #192	; 0xc0
  40250c:	9301      	str	r3, [sp, #4]
		.char_length = USART_CHRL,
		.parity_type = USART_PARITY,
		.stop_bits = USART_NBSTOP,
		.channel_mode = US_MR_CHMODE_NORMAL
	};
	flexcom_enable(TSENSOR_SERIAL_PORT_FLEXCOM);
  40250e:	4c16      	ldr	r4, [pc, #88]	; (402568 <tSensor_serial_init+0x70>)
  402510:	4620      	mov	r0, r4
  402512:	4b16      	ldr	r3, [pc, #88]	; (40256c <tSensor_serial_init+0x74>)
  402514:	4798      	blx	r3
	flexcom_set_opmode(TSENSOR_SERIAL_PORT_FLEXCOM, FLEXCOM_USART);
  402516:	4620      	mov	r0, r4
  402518:	2101      	movs	r1, #1
  40251a:	4b15      	ldr	r3, [pc, #84]	; (402570 <tSensor_serial_init+0x78>)
  40251c:	4798      	blx	r3
	
	/* Configure USART */
	usart_init_rs232(TSENSOR_SERIAL_PORT, &usart_settings,
  40251e:	f504 7400 	add.w	r4, r4, #512	; 0x200
  402522:	4620      	mov	r0, r4
  402524:	4669      	mov	r1, sp
  402526:	4a13      	ldr	r2, [pc, #76]	; (402574 <tSensor_serial_init+0x7c>)
  402528:	4b13      	ldr	r3, [pc, #76]	; (402578 <tSensor_serial_init+0x80>)
  40252a:	4798      	blx	r3
	sysclk_get_peripheral_hz());
	
	usart_set_rx_timeout(TSENSOR_SERIAL_PORT, rx_timeout);
  40252c:	4620      	mov	r0, r4
  40252e:	f240 71a1 	movw	r1, #1953	; 0x7a1
  402532:	4b12      	ldr	r3, [pc, #72]	; (40257c <tSensor_serial_init+0x84>)
  402534:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402536:	4b12      	ldr	r3, [pc, #72]	; (402580 <tSensor_serial_init+0x88>)
  402538:	22e0      	movs	r2, #224	; 0xe0
  40253a:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40253e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402542:	601a      	str	r2, [r3, #0]
	
	/* Enable USART1 RX interrupt. */
	NVIC_SetPriority(TSENSOR_SERIAL_PORT_IRQn, SERIAL_PORT_INT_PRIO);
	NVIC_EnableIRQ((IRQn_Type)TSENSOR_SERIAL_PORT_FLEXCOM_ID);
	usart_enable_interrupt(TSENSOR_SERIAL_PORT, (US_IER_TIMEOUT | US_IER_RXRDY));
  402544:	4620      	mov	r0, r4
  402546:	f240 1101 	movw	r1, #257	; 0x101
  40254a:	4b0e      	ldr	r3, [pc, #56]	; (402584 <tSensor_serial_init+0x8c>)
  40254c:	4798      	blx	r3
	
	/* Enable the receiver and transmitter. */
	usart_start_rx_timeout(TSENSOR_SERIAL_PORT);
  40254e:	4620      	mov	r0, r4
  402550:	4b0d      	ldr	r3, [pc, #52]	; (402588 <tSensor_serial_init+0x90>)
  402552:	4798      	blx	r3
	usart_enable_tx(TSENSOR_SERIAL_PORT);
  402554:	4620      	mov	r0, r4
  402556:	4b0d      	ldr	r3, [pc, #52]	; (40258c <tSensor_serial_init+0x94>)
  402558:	4798      	blx	r3
	usart_enable_rx(TSENSOR_SERIAL_PORT);
  40255a:	4620      	mov	r0, r4
  40255c:	4b0c      	ldr	r3, [pc, #48]	; (402590 <tSensor_serial_init+0x98>)
  40255e:	4798      	blx	r3
	
	/* Init thermo board only for once at start*/
	//Temp_Measure_Command_Send(INIT_SENSATION_MEASUREMENT);
}
  402560:	b006      	add	sp, #24
  402562:	bd10      	pop	{r4, pc}
  402564:	0002faf0 	.word	0x0002faf0
  402568:	40018000 	.word	0x40018000
  40256c:	00400425 	.word	0x00400425
  402570:	00400595 	.word	0x00400595
  402574:	07270000 	.word	0x07270000
  402578:	00400971 	.word	0x00400971
  40257c:	004009d5 	.word	0x004009d5
  402580:	e000e100 	.word	0xe000e100
  402584:	004009d9 	.word	0x004009d9
  402588:	004009e5 	.word	0x004009e5
  40258c:	004009c5 	.word	0x004009c5
  402590:	004009cd 	.word	0x004009cd

00402594 <FLEXCOM3_Handler>:


void tSensor_uart_isr_handler(void)
{
  402594:	b510      	push	{r4, lr}
  402596:	b082      	sub	sp, #8
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t status;
	uint32_t symbol;
	Pdc *p_pdc = NULL;
	status = usart_get_status(TSENSOR_SERIAL_PORT);
  402598:	4817      	ldr	r0, [pc, #92]	; (4025f8 <FLEXCOM3_Handler+0x64>)
  40259a:	4b18      	ldr	r3, [pc, #96]	; (4025fc <FLEXCOM3_Handler+0x68>)
  40259c:	4798      	blx	r3
	if(status & US_CSR_RXRDY) {
  40259e:	f010 0f01 	tst.w	r0, #1
  4025a2:	d011      	beq.n	4025c8 <FLEXCOM3_Handler+0x34>
		if(usart_read(TSENSOR_SERIAL_PORT, &symbol) == 0) {
  4025a4:	4814      	ldr	r0, [pc, #80]	; (4025f8 <FLEXCOM3_Handler+0x64>)
  4025a6:	a901      	add	r1, sp, #4
  4025a8:	4b15      	ldr	r3, [pc, #84]	; (402600 <FLEXCOM3_Handler+0x6c>)
  4025aa:	4798      	blx	r3
  4025ac:	bb10      	cbnz	r0, 4025f4 <FLEXCOM3_Handler+0x60>
			if (tempUartRecvBuff.len < TSENSOR_RECV_BUFF_SIZE){
  4025ae:	4b15      	ldr	r3, [pc, #84]	; (402604 <FLEXCOM3_Handler+0x70>)
  4025b0:	881b      	ldrh	r3, [r3, #0]
  4025b2:	f241 3287 	movw	r2, #4999	; 0x1387
  4025b6:	4293      	cmp	r3, r2
  4025b8:	d81c      	bhi.n	4025f4 <FLEXCOM3_Handler+0x60>
				tempUartRecvBuff.payload[tempUartRecvBuff.len++] = (uint8_t)symbol;
  4025ba:	4a12      	ldr	r2, [pc, #72]	; (402604 <FLEXCOM3_Handler+0x70>)
  4025bc:	1c59      	adds	r1, r3, #1
  4025be:	8011      	strh	r1, [r2, #0]
  4025c0:	4413      	add	r3, r2
  4025c2:	9a01      	ldr	r2, [sp, #4]
  4025c4:	709a      	strb	r2, [r3, #2]
  4025c6:	e015      	b.n	4025f4 <FLEXCOM3_Handler+0x60>
			}
		}
	}else if(status & US_CSR_TIMEOUT) {
  4025c8:	f410 7f80 	tst.w	r0, #256	; 0x100
  4025cc:	d003      	beq.n	4025d6 <FLEXCOM3_Handler+0x42>
			// notice task to process
			//tsensorDataWaitforHandling = true;
			//printf("Trigger semaphore for sensor..........\r\n");
			//xSemaphoreGiveFromISR(startTsensorProcessing, &higher_priority_task_woken);
		}
		usart_start_rx_timeout(TSENSOR_SERIAL_PORT);
  4025ce:	480a      	ldr	r0, [pc, #40]	; (4025f8 <FLEXCOM3_Handler+0x64>)
  4025d0:	4b0d      	ldr	r3, [pc, #52]	; (402608 <FLEXCOM3_Handler+0x74>)
  4025d2:	4798      	blx	r3
  4025d4:	e00e      	b.n	4025f4 <FLEXCOM3_Handler+0x60>
	}else if(status & US_CSR_ENDTX) {
  4025d6:	f010 0f10 	tst.w	r0, #16
  4025da:	d00b      	beq.n	4025f4 <FLEXCOM3_Handler+0x60>
		p_pdc = usart_get_pdc_base(TSENSOR_SERIAL_PORT);
  4025dc:	4c06      	ldr	r4, [pc, #24]	; (4025f8 <FLEXCOM3_Handler+0x64>)
  4025de:	4620      	mov	r0, r4
  4025e0:	4b0a      	ldr	r3, [pc, #40]	; (40260c <FLEXCOM3_Handler+0x78>)
  4025e2:	4798      	blx	r3
		pdc_disable_transfer(p_pdc, PERIPH_PTCR_TXTDIS);
  4025e4:	f44f 7100 	mov.w	r1, #512	; 0x200
  4025e8:	4b09      	ldr	r3, [pc, #36]	; (402610 <FLEXCOM3_Handler+0x7c>)
  4025ea:	4798      	blx	r3
		usart_disable_interrupt(TSENSOR_SERIAL_PORT, US_IDR_ENDTX);
  4025ec:	4620      	mov	r0, r4
  4025ee:	2110      	movs	r1, #16
  4025f0:	4b08      	ldr	r3, [pc, #32]	; (402614 <FLEXCOM3_Handler+0x80>)
  4025f2:	4798      	blx	r3
	}else{
		/* Do nothing */
	}
}
  4025f4:	b002      	add	sp, #8
  4025f6:	bd10      	pop	{r4, pc}
  4025f8:	40018200 	.word	0x40018200
  4025fc:	004009e1 	.word	0x004009e1
  402600:	00400a01 	.word	0x00400a01
  402604:	20018b40 	.word	0x20018b40
  402608:	004009e5 	.word	0x004009e5
  40260c:	00400a19 	.word	0x00400a19
  402610:	004005bd 	.word	0x004005bd
  402614:	004009dd 	.word	0x004009dd

00402618 <vLedModeCallback>:
	}
}

static void vLedModeCallback( xTimerHandle pxTimer )
{
	switch(led_blinking_mode){
  402618:	4b1e      	ldr	r3, [pc, #120]	; (402694 <vLedModeCallback+0x7c>)
  40261a:	781b      	ldrb	r3, [r3, #0]
  40261c:	3b01      	subs	r3, #1
  40261e:	2b03      	cmp	r3, #3
  402620:	d837      	bhi.n	402692 <vLedModeCallback+0x7a>
  402622:	e8df f003 	tbb	[pc, r3]
  402626:	2202      	.short	0x2202
  402628:	122c      	.short	0x122c
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40262a:	4b1b      	ldr	r3, [pc, #108]	; (402698 <vLedModeCallback+0x80>)
  40262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40262e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
		port->PIO_CODR = mask;
  402632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402636:	4b18      	ldr	r3, [pc, #96]	; (402698 <vLedModeCallback+0x80>)
  402638:	bf14      	ite	ne
  40263a:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  40263c:	631a      	streq	r2, [r3, #48]	; 0x30
		case LED_MODE_CONNECT:
		{
			LED_Toggle(LED0);
			led_state = led_state^1;
  40263e:	4a17      	ldr	r2, [pc, #92]	; (40269c <vLedModeCallback+0x84>)
  402640:	7813      	ldrb	r3, [r2, #0]
  402642:	f083 0301 	eor.w	r3, r3, #1
  402646:	7013      	strb	r3, [r2, #0]
			break;
  402648:	4770      	bx	lr
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40264a:	4b13      	ldr	r3, [pc, #76]	; (402698 <vLedModeCallback+0x80>)
  40264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40264e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
		port->PIO_CODR = mask;
  402652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402656:	4b10      	ldr	r3, [pc, #64]	; (402698 <vLedModeCallback+0x80>)
  402658:	bf14      	ite	ne
  40265a:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  40265c:	631a      	streq	r2, [r3, #48]	; 0x30
		}
		case LED_MODE_OTAU:
		{
			LED_Toggle(LED0);
			led_state = led_state^1;
  40265e:	4a0f      	ldr	r2, [pc, #60]	; (40269c <vLedModeCallback+0x84>)
  402660:	7813      	ldrb	r3, [r2, #0]
  402662:	f083 0301 	eor.w	r3, r3, #1
  402666:	7013      	strb	r3, [r2, #0]
			break;
  402668:	4770      	bx	lr
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40266a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40266e:	4b0a      	ldr	r3, [pc, #40]	; (402698 <vLedModeCallback+0x80>)
  402670:	631a      	str	r2, [r3, #48]	; 0x30
		}
		case LED_MODE_OFF:
		{
			LED_Off(LED0);
			led_state = 0;
  402672:	2300      	movs	r3, #0
  402674:	4a09      	ldr	r2, [pc, #36]	; (40269c <vLedModeCallback+0x84>)
  402676:	7013      	strb	r3, [r2, #0]
			led_blinking_mode = LED_MODE_NONE;
  402678:	4a06      	ldr	r2, [pc, #24]	; (402694 <vLedModeCallback+0x7c>)
  40267a:	7013      	strb	r3, [r2, #0]
			break;
  40267c:	4770      	bx	lr
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40267e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402682:	4b05      	ldr	r3, [pc, #20]	; (402698 <vLedModeCallback+0x80>)
  402684:	635a      	str	r2, [r3, #52]	; 0x34
		}
		case LED_MODE_ON:
		{
			LED_On(LED0);
			led_state = 1;
  402686:	2201      	movs	r2, #1
  402688:	4b04      	ldr	r3, [pc, #16]	; (40269c <vLedModeCallback+0x84>)
  40268a:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_NONE;
  40268c:	2200      	movs	r2, #0
  40268e:	4b01      	ldr	r3, [pc, #4]	; (402694 <vLedModeCallback+0x7c>)
  402690:	701a      	strb	r2, [r3, #0]
  402692:	4770      	bx	lr
  402694:	20019ed8 	.word	0x20019ed8
  402698:	400e0e00 	.word	0x400e0e00
  40269c:	2001a060 	.word	0x2001a060

004026a0 <serial_resp_out>:

	return (p - buf);
}

static void serial_resp_out(uint8_t resp_id, uint8_t status)
{
  4026a0:	b510      	push	{r4, lr}
	static uint8_t resp_buf[8];
	uint8_t *p = &resp_buf[0];
	static serial_out_pk_t resp_send_packet;
	static serial_out_pk_t *resp_out_data = &resp_send_packet;

	*p++ = SERIAL_SOF;
  4026a2:	4b0c      	ldr	r3, [pc, #48]	; (4026d4 <serial_resp_out+0x34>)
  4026a4:	227e      	movs	r2, #126	; 0x7e
  4026a6:	701a      	strb	r2, [r3, #0]
	//*p++ = ENCRYPT_MODE;
	*p++ = 2;
  4026a8:	2202      	movs	r2, #2
  4026aa:	705a      	strb	r2, [r3, #1]
	*p++ = resp_id;
  4026ac:	7098      	strb	r0, [r3, #2]
	*p++ = status;
  4026ae:	70d9      	strb	r1, [r3, #3]
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
	{
		checksum += A[i];
  4026b0:	f080 0080 	eor.w	r0, r0, #128	; 0x80
  4026b4:	4401      	add	r1, r0
	*p++ = SERIAL_SOF;
	//*p++ = ENCRYPT_MODE;
	*p++ = 2;
	*p++ = resp_id;
	*p++ = status;
	*p = sum8(&resp_buf[0], p - &resp_buf[0]);
  4026b6:	7119      	strb	r1, [r3, #4]
	p++;
	resp_out_data->buf = resp_buf;
  4026b8:	4907      	ldr	r1, [pc, #28]	; (4026d8 <serial_resp_out+0x38>)
  4026ba:	680a      	ldr	r2, [r1, #0]
  4026bc:	6013      	str	r3, [r2, #0]
	resp_out_data->len = p - resp_buf;
  4026be:	680b      	ldr	r3, [r1, #0]
  4026c0:	2205      	movs	r2, #5
  4026c2:	605a      	str	r2, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &resp_out_data, 1000);
  4026c4:	4b05      	ldr	r3, [pc, #20]	; (4026dc <serial_resp_out+0x3c>)
  4026c6:	6818      	ldr	r0, [r3, #0]
  4026c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4026cc:	2300      	movs	r3, #0
  4026ce:	4c04      	ldr	r4, [pc, #16]	; (4026e0 <serial_resp_out+0x40>)
  4026d0:	47a0      	blx	r4
  4026d2:	bd10      	pop	{r4, pc}
  4026d4:	20019ed0 	.word	0x20019ed0
  4026d8:	20000024 	.word	0x20000024
  4026dc:	2001a884 	.word	0x2001a884
  4026e0:	0040132d 	.word	0x0040132d

004026e4 <byte2hexstrstr>:
	ioport_set_pin_level(WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	delay_ms(100);
}

static int byte2hexstrstr(const uint8_t *pBytes, uint32_t srcLen, uint8_t *pDstStr, uint32_t dstLen)
{
  4026e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4026e8:	b086      	sub	sp, #24
  4026ea:	4606      	mov	r6, r0
  4026ec:	460c      	mov	r4, r1
  4026ee:	4615      	mov	r5, r2
  4026f0:	4698      	mov	r8, r3
	const char tab[] = "0123456789abcdef";
  4026f2:	af01      	add	r7, sp, #4
  4026f4:	f8df e068 	ldr.w	lr, [pc, #104]	; 402760 <byte2hexstrstr+0x7c>
  4026f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  4026fc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  4026fe:	f8de 3000 	ldr.w	r3, [lr]
  402702:	703b      	strb	r3, [r7, #0]
	uint32_t i = 0;

	memset(pDstStr, 0, dstLen);
  402704:	4628      	mov	r0, r5
  402706:	2100      	movs	r1, #0
  402708:	4642      	mov	r2, r8
  40270a:	4b14      	ldr	r3, [pc, #80]	; (40275c <byte2hexstrstr+0x78>)
  40270c:	4798      	blx	r3

	if (dstLen < srcLen * 2)
  40270e:	ebb8 0f44 	cmp.w	r8, r4, lsl #1
	srcLen = (dstLen - 1) / 2;
  402712:	bf3c      	itt	cc
  402714:	f108 34ff 	addcc.w	r4, r8, #4294967295
  402718:	0864      	lsrcc	r4, r4, #1

	for (i = 0; i < srcLen; i++)
  40271a:	b1cc      	cbz	r4, 402750 <byte2hexstrstr+0x6c>
  40271c:	1ca9      	adds	r1, r5, #2
  40271e:	4632      	mov	r2, r6
  402720:	1930      	adds	r0, r6, r4
  402722:	4616      	mov	r6, r2
	{
		*pDstStr++ = tab[*pBytes >> 4];
  402724:	f812 3b01 	ldrb.w	r3, [r2], #1
  402728:	af06      	add	r7, sp, #24
  40272a:	eb07 1313 	add.w	r3, r7, r3, lsr #4
  40272e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
  402732:	f801 3c02 	strb.w	r3, [r1, #-2]
		*pDstStr++ = tab[*pBytes & 0x0f];
  402736:	7833      	ldrb	r3, [r6, #0]
  402738:	f003 030f 	and.w	r3, r3, #15
  40273c:	443b      	add	r3, r7
  40273e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
  402742:	f801 3c01 	strb.w	r3, [r1, #-1]
  402746:	3102      	adds	r1, #2
	memset(pDstStr, 0, dstLen);

	if (dstLen < srcLen * 2)
	srcLen = (dstLen - 1) / 2;

	for (i = 0; i < srcLen; i++)
  402748:	4282      	cmp	r2, r0
  40274a:	d1ea      	bne.n	402722 <byte2hexstrstr+0x3e>
  40274c:	eb05 0544 	add.w	r5, r5, r4, lsl #1
	{
		*pDstStr++ = tab[*pBytes >> 4];
		*pDstStr++ = tab[*pBytes & 0x0f];
		pBytes++;
	}
	*pDstStr++ = 0;
  402750:	2300      	movs	r3, #0
  402752:	702b      	strb	r3, [r5, #0]
	return srcLen * 2;
}
  402754:	0060      	lsls	r0, r4, #1
  402756:	b006      	add	sp, #24
  402758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40275c:	004046e1 	.word	0x004046e1
  402760:	004076ec 	.word	0x004076ec

00402764 <signal_to_wifi>:
	IoT_xQueueSend(serial_out_queue, &resp_out_data, 1000);
	//nm_uart_send(UART1, &buf[0], p - &buf[0]);
}

static void signal_to_wifi(uint8_t resp_id, uint8_t *data, uint8_t datalen)
{
  402764:	b538      	push	{r3, r4, r5, lr}
  402766:	4614      	mov	r4, r2
	static uint8_t resp_buf[256];
	uint8_t *p = &resp_buf[0];
	static serial_out_pk_t resp_send_packet;
	static serial_out_pk_t *resp_out_data = &resp_send_packet;

	*p++ = SERIAL_SOF;
  402768:	4b1b      	ldr	r3, [pc, #108]	; (4027d8 <signal_to_wifi+0x74>)
  40276a:	227e      	movs	r2, #126	; 0x7e
  40276c:	701a      	strb	r2, [r3, #0]
	*p++ = ENCRYPT_MODE;
  40276e:	2200      	movs	r2, #0
  402770:	705a      	strb	r2, [r3, #1]
	*p++ = 1 + datalen;
  402772:	1c62      	adds	r2, r4, #1
  402774:	709a      	strb	r2, [r3, #2]
	*p++ = resp_id;
  402776:	70d8      	strb	r0, [r3, #3]

	if((data != NULL) && (datalen > 0)) {
  402778:	b139      	cbz	r1, 40278a <signal_to_wifi+0x26>
  40277a:	b144      	cbz	r4, 40278e <signal_to_wifi+0x2a>
		memcpy(p, data, datalen);
  40277c:	4d17      	ldr	r5, [pc, #92]	; (4027dc <signal_to_wifi+0x78>)
  40277e:	4628      	mov	r0, r5
  402780:	4622      	mov	r2, r4
  402782:	4b17      	ldr	r3, [pc, #92]	; (4027e0 <signal_to_wifi+0x7c>)
  402784:	4798      	blx	r3
		p = p + datalen;
  402786:	442c      	add	r4, r5
  402788:	e002      	b.n	402790 <signal_to_wifi+0x2c>
	static serial_out_pk_t *resp_out_data = &resp_send_packet;

	*p++ = SERIAL_SOF;
	*p++ = ENCRYPT_MODE;
	*p++ = 1 + datalen;
	*p++ = resp_id;
  40278a:	4c14      	ldr	r4, [pc, #80]	; (4027dc <signal_to_wifi+0x78>)
  40278c:	e000      	b.n	402790 <signal_to_wifi+0x2c>
  40278e:	4c13      	ldr	r4, [pc, #76]	; (4027dc <signal_to_wifi+0x78>)

	if((data != NULL) && (datalen > 0)) {
		memcpy(p, data, datalen);
		p = p + datalen;
	}
	*p = sum8(&resp_buf[0], p - resp_buf);
  402790:	4d11      	ldr	r5, [pc, #68]	; (4027d8 <signal_to_wifi+0x74>)
  402792:	1b60      	subs	r0, r4, r5

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
  402794:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
  402798:	d00b      	beq.n	4027b2 <signal_to_wifi+0x4e>
  40279a:	1e6a      	subs	r2, r5, #1
  40279c:	3801      	subs	r0, #1
  40279e:	fa55 f080 	uxtab	r0, r5, r0
  4027a2:	2300      	movs	r3, #0
	{
		checksum += A[i];
  4027a4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4027a8:	440b      	add	r3, r1
  4027aa:	b2db      	uxtb	r3, r3

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
  4027ac:	4282      	cmp	r2, r0
  4027ae:	d1f9      	bne.n	4027a4 <signal_to_wifi+0x40>
  4027b0:	e000      	b.n	4027b4 <signal_to_wifi+0x50>
}

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
  4027b2:	2300      	movs	r3, #0

	if((data != NULL) && (datalen > 0)) {
		memcpy(p, data, datalen);
		p = p + datalen;
	}
	*p = sum8(&resp_buf[0], p - resp_buf);
  4027b4:	4622      	mov	r2, r4
  4027b6:	f802 3b01 	strb.w	r3, [r2], #1
	p++;
	resp_out_data->buf = resp_buf;
  4027ba:	490a      	ldr	r1, [pc, #40]	; (4027e4 <signal_to_wifi+0x80>)
  4027bc:	680b      	ldr	r3, [r1, #0]
  4027be:	4806      	ldr	r0, [pc, #24]	; (4027d8 <signal_to_wifi+0x74>)
  4027c0:	6018      	str	r0, [r3, #0]
	resp_out_data->len = p - resp_buf;
  4027c2:	680b      	ldr	r3, [r1, #0]
  4027c4:	1b52      	subs	r2, r2, r5
  4027c6:	605a      	str	r2, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &resp_out_data, 1000);
  4027c8:	4b07      	ldr	r3, [pc, #28]	; (4027e8 <signal_to_wifi+0x84>)
  4027ca:	6818      	ldr	r0, [r3, #0]
  4027cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4027d0:	2300      	movs	r3, #0
  4027d2:	4c06      	ldr	r4, [pc, #24]	; (4027ec <signal_to_wifi+0x88>)
  4027d4:	47a0      	blx	r4
  4027d6:	bd38      	pop	{r3, r4, r5, pc}
  4027d8:	20019edc 	.word	0x20019edc
  4027dc:	20019ee0 	.word	0x20019ee0
  4027e0:	004045ad 	.word	0x004045ad
  4027e4:	20000028 	.word	0x20000028
  4027e8:	2001a884 	.word	0x2001a884
  4027ec:	0040132d 	.word	0x0040132d

004027f0 <form_serial_packet>:
	}
	return(checksum);
}

static uint16_t form_serial_packet(uint8_t cmdid, uint8_t *data, uint8_t datalen, uint8_t *buf)
{
  4027f0:	b570      	push	{r4, r5, r6, lr}
  4027f2:	4616      	mov	r6, r2
  4027f4:	461d      	mov	r5, r3
	uint8_t *p = buf;

	*p++ = SERIAL_SOF;
  4027f6:	237e      	movs	r3, #126	; 0x7e
  4027f8:	702b      	strb	r3, [r5, #0]
	*p++ = ENCRYPT_MODE;
  4027fa:	2300      	movs	r3, #0
  4027fc:	706b      	strb	r3, [r5, #1]
	*p++ = datalen + 1;
  4027fe:	1c53      	adds	r3, r2, #1
  402800:	70ab      	strb	r3, [r5, #2]
	*p++ = cmdid;
  402802:	1d2c      	adds	r4, r5, #4
  402804:	70e8      	strb	r0, [r5, #3]
	if((data != NULL) && (datalen > 0)) {
  402806:	b121      	cbz	r1, 402812 <form_serial_packet+0x22>
  402808:	b11a      	cbz	r2, 402812 <form_serial_packet+0x22>
		memcpy(p, data, datalen);
  40280a:	4620      	mov	r0, r4
  40280c:	4b0c      	ldr	r3, [pc, #48]	; (402840 <form_serial_packet+0x50>)
  40280e:	4798      	blx	r3
		p = p + datalen;
  402810:	4434      	add	r4, r6
	}
	*p = sum8(buf, (p - buf));
  402812:	1b60      	subs	r0, r4, r5

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
  402814:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
  402818:	d00b      	beq.n	402832 <form_serial_packet+0x42>
  40281a:	1e6a      	subs	r2, r5, #1
  40281c:	3801      	subs	r0, #1
  40281e:	fa55 f080 	uxtab	r0, r5, r0
  402822:	2300      	movs	r3, #0
	{
		checksum += A[i];
  402824:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402828:	440b      	add	r3, r1
  40282a:	b2db      	uxtb	r3, r3

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
  40282c:	4282      	cmp	r2, r0
  40282e:	d1f9      	bne.n	402824 <form_serial_packet+0x34>
  402830:	e000      	b.n	402834 <form_serial_packet+0x44>
}

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
  402832:	2300      	movs	r3, #0
	*p++ = cmdid;
	if((data != NULL) && (datalen > 0)) {
		memcpy(p, data, datalen);
		p = p + datalen;
	}
	*p = sum8(buf, (p - buf));
  402834:	f804 3b01 	strb.w	r3, [r4], #1
	p++;

	return (p - buf);
  402838:	1b60      	subs	r0, r4, r5
}
  40283a:	b280      	uxth	r0, r0
  40283c:	bd70      	pop	{r4, r5, r6, pc}
  40283e:	bf00      	nop
  402840:	004045ad 	.word	0x004045ad

00402844 <vConfigModeCallback>:
		break;
	}
}

static void vConfigModeCallback( xTimerHandle pxTimer )
{
  402844:	b530      	push	{r4, r5, lr}
  402846:	b085      	sub	sp, #20
	
	static uint8_t pkt_buf[16];
	static uint16_t pkt_len;

	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  402848:	4b62      	ldr	r3, [pc, #392]	; (4029d4 <vConfigModeCallback+0x190>)
  40284a:	9303      	str	r3, [sp, #12]
	
	
	IoT_vPortEnterCritical();
  40284c:	4b62      	ldr	r3, [pc, #392]	; (4029d8 <vConfigModeCallback+0x194>)
  40284e:	4798      	blx	r3
	count++;
  402850:	4a62      	ldr	r2, [pc, #392]	; (4029dc <vConfigModeCallback+0x198>)
  402852:	7813      	ldrb	r3, [r2, #0]
  402854:	3301      	adds	r3, #1
  402856:	7013      	strb	r3, [r2, #0]
	IoT_vPortExitCritical();
  402858:	4b61      	ldr	r3, [pc, #388]	; (4029e0 <vConfigModeCallback+0x19c>)
  40285a:	4798      	blx	r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40285c:	4b61      	ldr	r3, [pc, #388]	; (4029e4 <vConfigModeCallback+0x1a0>)
  40285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	
	if(!ioport_get_pin_level(BUTTON_0_PIN)){
  402860:	f013 0f01 	tst.w	r3, #1
  402864:	d12c      	bne.n	4028c0 <vConfigModeCallback+0x7c>
		if(count >= 5){
  402866:	4b5d      	ldr	r3, [pc, #372]	; (4029dc <vConfigModeCallback+0x198>)
  402868:	781b      	ldrb	r3, [r3, #0]
  40286a:	2b04      	cmp	r3, #4
  40286c:	f240 80af 	bls.w	4029ce <vConfigModeCallback+0x18a>
			IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("enter config mode\r\n"));
  402870:	4b5d      	ldr	r3, [pc, #372]	; (4029e8 <vConfigModeCallback+0x1a4>)
  402872:	6818      	ldr	r0, [r3, #0]
  402874:	b1d0      	cbz	r0, 4028ac <vConfigModeCallback+0x68>
  402876:	2100      	movs	r1, #0
  402878:	f04f 32ff 	mov.w	r2, #4294967295
  40287c:	460b      	mov	r3, r1
  40287e:	4c5b      	ldr	r4, [pc, #364]	; (4029ec <vConfigModeCallback+0x1a8>)
  402880:	47a0      	blx	r4
  402882:	4b5b      	ldr	r3, [pc, #364]	; (4029f0 <vConfigModeCallback+0x1ac>)
  402884:	4798      	blx	r3
  402886:	4604      	mov	r4, r0
  402888:	2000      	movs	r0, #0
  40288a:	4b5a      	ldr	r3, [pc, #360]	; (4029f4 <vConfigModeCallback+0x1b0>)
  40288c:	4798      	blx	r3
  40288e:	4602      	mov	r2, r0
  402890:	4859      	ldr	r0, [pc, #356]	; (4029f8 <vConfigModeCallback+0x1b4>)
  402892:	4621      	mov	r1, r4
  402894:	4c59      	ldr	r4, [pc, #356]	; (4029fc <vConfigModeCallback+0x1b8>)
  402896:	47a0      	blx	r4
  402898:	4859      	ldr	r0, [pc, #356]	; (402a00 <vConfigModeCallback+0x1bc>)
  40289a:	47a0      	blx	r4
  40289c:	4b52      	ldr	r3, [pc, #328]	; (4029e8 <vConfigModeCallback+0x1a4>)
  40289e:	6818      	ldr	r0, [r3, #0]
  4028a0:	2100      	movs	r1, #0
  4028a2:	460a      	mov	r2, r1
  4028a4:	460b      	mov	r3, r1
  4028a6:	4c57      	ldr	r4, [pc, #348]	; (402a04 <vConfigModeCallback+0x1c0>)
  4028a8:	47a0      	blx	r4
  4028aa:	e002      	b.n	4028b2 <vConfigModeCallback+0x6e>
  4028ac:	4854      	ldr	r0, [pc, #336]	; (402a00 <vConfigModeCallback+0x1bc>)
  4028ae:	4b53      	ldr	r3, [pc, #332]	; (4029fc <vConfigModeCallback+0x1b8>)
  4028b0:	4798      	blx	r3
			button_mode = ENTER_CONFIG_MODE;
  4028b2:	2200      	movs	r2, #0
  4028b4:	4b54      	ldr	r3, [pc, #336]	; (402a08 <vConfigModeCallback+0x1c4>)
  4028b6:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_ON;
  4028b8:	2203      	movs	r2, #3
  4028ba:	4b54      	ldr	r3, [pc, #336]	; (402a0c <vConfigModeCallback+0x1c8>)
  4028bc:	701a      	strb	r2, [r3, #0]
  4028be:	e086      	b.n	4029ce <vConfigModeCallback+0x18a>
			//button_mode = ENTER_GENERAL_MODE;
		}
	}
	else{
		//button released, exit FN mode
		if(button_mode == ENTER_CONFIG_MODE){
  4028c0:	4b51      	ldr	r3, [pc, #324]	; (402a08 <vConfigModeCallback+0x1c4>)
  4028c2:	781b      	ldrb	r3, [r3, #0]
  4028c4:	2b00      	cmp	r3, #0
  4028c6:	d139      	bne.n	40293c <vConfigModeCallback+0xf8>
			IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("perform config mode\r\n"));
  4028c8:	4b47      	ldr	r3, [pc, #284]	; (4029e8 <vConfigModeCallback+0x1a4>)
  4028ca:	6818      	ldr	r0, [r3, #0]
  4028cc:	b1d0      	cbz	r0, 402904 <vConfigModeCallback+0xc0>
  4028ce:	2100      	movs	r1, #0
  4028d0:	f04f 32ff 	mov.w	r2, #4294967295
  4028d4:	460b      	mov	r3, r1
  4028d6:	4c45      	ldr	r4, [pc, #276]	; (4029ec <vConfigModeCallback+0x1a8>)
  4028d8:	47a0      	blx	r4
  4028da:	4b45      	ldr	r3, [pc, #276]	; (4029f0 <vConfigModeCallback+0x1ac>)
  4028dc:	4798      	blx	r3
  4028de:	4604      	mov	r4, r0
  4028e0:	2000      	movs	r0, #0
  4028e2:	4b44      	ldr	r3, [pc, #272]	; (4029f4 <vConfigModeCallback+0x1b0>)
  4028e4:	4798      	blx	r3
  4028e6:	4602      	mov	r2, r0
  4028e8:	4843      	ldr	r0, [pc, #268]	; (4029f8 <vConfigModeCallback+0x1b4>)
  4028ea:	4621      	mov	r1, r4
  4028ec:	4c43      	ldr	r4, [pc, #268]	; (4029fc <vConfigModeCallback+0x1b8>)
  4028ee:	47a0      	blx	r4
  4028f0:	4847      	ldr	r0, [pc, #284]	; (402a10 <vConfigModeCallback+0x1cc>)
  4028f2:	47a0      	blx	r4
  4028f4:	4b3c      	ldr	r3, [pc, #240]	; (4029e8 <vConfigModeCallback+0x1a4>)
  4028f6:	6818      	ldr	r0, [r3, #0]
  4028f8:	2100      	movs	r1, #0
  4028fa:	460a      	mov	r2, r1
  4028fc:	460b      	mov	r3, r1
  4028fe:	4c41      	ldr	r4, [pc, #260]	; (402a04 <vConfigModeCallback+0x1c0>)
  402900:	47a0      	blx	r4
  402902:	e002      	b.n	40290a <vConfigModeCallback+0xc6>
  402904:	4842      	ldr	r0, [pc, #264]	; (402a10 <vConfigModeCallback+0x1cc>)
  402906:	4b3d      	ldr	r3, [pc, #244]	; (4029fc <vConfigModeCallback+0x1b8>)
  402908:	4798      	blx	r3
			led_blinking_mode = LED_MODE_CONNECT;
  40290a:	2201      	movs	r2, #1
  40290c:	4b3f      	ldr	r3, [pc, #252]	; (402a0c <vConfigModeCallback+0x1c8>)
  40290e:	701a      	strb	r2, [r3, #0]
			pkt_len = form_serial_packet(CUSTOMIZE_CMD_FACTORY_RESET, NULL, 0, pkt_buf);
  402910:	4c40      	ldr	r4, [pc, #256]	; (402a14 <vConfigModeCallback+0x1d0>)
  402912:	2002      	movs	r0, #2
  402914:	2100      	movs	r1, #0
  402916:	460a      	mov	r2, r1
  402918:	4623      	mov	r3, r4
  40291a:	4d3f      	ldr	r5, [pc, #252]	; (402a18 <vConfigModeCallback+0x1d4>)
  40291c:	47a8      	blx	r5
  40291e:	4b3f      	ldr	r3, [pc, #252]	; (402a1c <vConfigModeCallback+0x1d8>)
  402920:	8018      	strh	r0, [r3, #0]
			out_data->buf = pkt_buf;
  402922:	9b03      	ldr	r3, [sp, #12]
  402924:	601c      	str	r4, [r3, #0]
			out_data->len = pkt_len;
  402926:	a904      	add	r1, sp, #16
  402928:	f851 3d04 	ldr.w	r3, [r1, #-4]!
  40292c:	6058      	str	r0, [r3, #4]
			IoT_xQueueSend(serial_out_queue, &out_data, 0);
  40292e:	4b3c      	ldr	r3, [pc, #240]	; (402a20 <vConfigModeCallback+0x1dc>)
  402930:	6818      	ldr	r0, [r3, #0]
  402932:	2200      	movs	r2, #0
  402934:	4613      	mov	r3, r2
  402936:	4c33      	ldr	r4, [pc, #204]	; (402a04 <vConfigModeCallback+0x1c0>)
  402938:	47a0      	blx	r4
  40293a:	e037      	b.n	4029ac <vConfigModeCallback+0x168>
		}
		else if (button_mode == ENTER_GENERAL_MODE){
  40293c:	2b01      	cmp	r3, #1
  40293e:	d135      	bne.n	4029ac <vConfigModeCallback+0x168>
			IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("perform test command mode\r\n"));
  402940:	4b29      	ldr	r3, [pc, #164]	; (4029e8 <vConfigModeCallback+0x1a4>)
  402942:	6818      	ldr	r0, [r3, #0]
  402944:	b1d0      	cbz	r0, 40297c <vConfigModeCallback+0x138>
  402946:	2100      	movs	r1, #0
  402948:	f04f 32ff 	mov.w	r2, #4294967295
  40294c:	460b      	mov	r3, r1
  40294e:	4c27      	ldr	r4, [pc, #156]	; (4029ec <vConfigModeCallback+0x1a8>)
  402950:	47a0      	blx	r4
  402952:	4b27      	ldr	r3, [pc, #156]	; (4029f0 <vConfigModeCallback+0x1ac>)
  402954:	4798      	blx	r3
  402956:	4604      	mov	r4, r0
  402958:	2000      	movs	r0, #0
  40295a:	4b26      	ldr	r3, [pc, #152]	; (4029f4 <vConfigModeCallback+0x1b0>)
  40295c:	4798      	blx	r3
  40295e:	4602      	mov	r2, r0
  402960:	4825      	ldr	r0, [pc, #148]	; (4029f8 <vConfigModeCallback+0x1b4>)
  402962:	4621      	mov	r1, r4
  402964:	4c25      	ldr	r4, [pc, #148]	; (4029fc <vConfigModeCallback+0x1b8>)
  402966:	47a0      	blx	r4
  402968:	482e      	ldr	r0, [pc, #184]	; (402a24 <vConfigModeCallback+0x1e0>)
  40296a:	47a0      	blx	r4
  40296c:	4b1e      	ldr	r3, [pc, #120]	; (4029e8 <vConfigModeCallback+0x1a4>)
  40296e:	6818      	ldr	r0, [r3, #0]
  402970:	2100      	movs	r1, #0
  402972:	460a      	mov	r2, r1
  402974:	460b      	mov	r3, r1
  402976:	4c23      	ldr	r4, [pc, #140]	; (402a04 <vConfigModeCallback+0x1c0>)
  402978:	47a0      	blx	r4
  40297a:	e002      	b.n	402982 <vConfigModeCallback+0x13e>
  40297c:	4829      	ldr	r0, [pc, #164]	; (402a24 <vConfigModeCallback+0x1e0>)
  40297e:	4b1f      	ldr	r3, [pc, #124]	; (4029fc <vConfigModeCallback+0x1b8>)
  402980:	4798      	blx	r3
static void auto_states_upload()
{

	static uint8_t pkt_buf[16];
	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  402982:	4b29      	ldr	r3, [pc, #164]	; (402a28 <vConfigModeCallback+0x1e4>)
  402984:	9302      	str	r3, [sp, #8]
	uint16_t pkt_len;
	
	pkt_len = form_serial_packet(CUSTOMIZE_CMD_DATA_UPLOAD, &g_virtual_dev, sizeof(g_virtual_dev), pkt_buf);
  402986:	4c29      	ldr	r4, [pc, #164]	; (402a2c <vConfigModeCallback+0x1e8>)
  402988:	2009      	movs	r0, #9
  40298a:	4929      	ldr	r1, [pc, #164]	; (402a30 <vConfigModeCallback+0x1ec>)
  40298c:	2205      	movs	r2, #5
  40298e:	4623      	mov	r3, r4
  402990:	4d21      	ldr	r5, [pc, #132]	; (402a18 <vConfigModeCallback+0x1d4>)
  402992:	47a8      	blx	r5
	out_data->buf = pkt_buf;
  402994:	9b02      	ldr	r3, [sp, #8]
  402996:	601c      	str	r4, [r3, #0]
	out_data->len = pkt_len;
  402998:	a904      	add	r1, sp, #16
  40299a:	f851 3d08 	ldr.w	r3, [r1, #-8]!
  40299e:	6058      	str	r0, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &out_data, 0);
  4029a0:	4b1f      	ldr	r3, [pc, #124]	; (402a20 <vConfigModeCallback+0x1dc>)
  4029a2:	6818      	ldr	r0, [r3, #0]
  4029a4:	2200      	movs	r2, #0
  4029a6:	4613      	mov	r3, r2
  4029a8:	4c16      	ldr	r4, [pc, #88]	; (402a04 <vConfigModeCallback+0x1c0>)
  4029aa:	47a0      	blx	r4
			//out_data->len = pkt_len;
			//IoT_xQueueSend(serial_out_queue, &out_data, 0);
			auto_states_upload();
			
		}
		IoT_vPortEnterCritical();
  4029ac:	4b0a      	ldr	r3, [pc, #40]	; (4029d8 <vConfigModeCallback+0x194>)
  4029ae:	4798      	blx	r3
		count = 0;
  4029b0:	2400      	movs	r4, #0
  4029b2:	4b0a      	ldr	r3, [pc, #40]	; (4029dc <vConfigModeCallback+0x198>)
  4029b4:	701c      	strb	r4, [r3, #0]
		IoT_vPortExitCritical();
  4029b6:	4b0a      	ldr	r3, [pc, #40]	; (4029e0 <vConfigModeCallback+0x19c>)
  4029b8:	4798      	blx	r3
		button_mode = ENTER_GENERAL_MODE;
  4029ba:	2101      	movs	r1, #1
  4029bc:	4b12      	ldr	r3, [pc, #72]	; (402a08 <vConfigModeCallback+0x1c4>)
  4029be:	7019      	strb	r1, [r3, #0]
		xTimerStop(xConfigTimer, 0);
  4029c0:	4b1c      	ldr	r3, [pc, #112]	; (402a34 <vConfigModeCallback+0x1f0>)
  4029c2:	6818      	ldr	r0, [r3, #0]
  4029c4:	9400      	str	r4, [sp, #0]
  4029c6:	4622      	mov	r2, r4
  4029c8:	4623      	mov	r3, r4
  4029ca:	4c1b      	ldr	r4, [pc, #108]	; (402a38 <vConfigModeCallback+0x1f4>)
  4029cc:	47a0      	blx	r4
	}
}
  4029ce:	b005      	add	sp, #20
  4029d0:	bd30      	pop	{r4, r5, pc}
  4029d2:	bf00      	nop
  4029d4:	20019fdc 	.word	0x20019fdc
  4029d8:	00400ea1 	.word	0x00400ea1
  4029dc:	2001a028 	.word	0x2001a028
  4029e0:	00400ec1 	.word	0x00400ec1
  4029e4:	400e1000 	.word	0x400e1000
  4029e8:	2001a88c 	.word	0x2001a88c
  4029ec:	004014f9 	.word	0x004014f9
  4029f0:	00401991 	.word	0x00401991
  4029f4:	004019d1 	.word	0x004019d1
  4029f8:	00407700 	.word	0x00407700
  4029fc:	00404521 	.word	0x00404521
  402a00:	0040770c 	.word	0x0040770c
  402a04:	0040132d 	.word	0x0040132d
  402a08:	20000020 	.word	0x20000020
  402a0c:	20019ed8 	.word	0x20019ed8
  402a10:	00407720 	.word	0x00407720
  402a14:	2001a050 	.word	0x2001a050
  402a18:	004027f1 	.word	0x004027f1
  402a1c:	2001a018 	.word	0x2001a018
  402a20:	2001a884 	.word	0x2001a884
  402a24:	00407738 	.word	0x00407738
  402a28:	2001a064 	.word	0x2001a064
  402a2c:	20019ffc 	.word	0x20019ffc
  402a30:	2001aa5c 	.word	0x2001aa5c
  402a34:	2001a03c 	.word	0x2001a03c
  402a38:	00402269 	.word	0x00402269

00402a3c <wifi_module_reset>:


//void USART1_Handler(void);

void wifi_module_reset(void)
{
  402a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402a3e:	4e07      	ldr	r6, [pc, #28]	; (402a5c <wifi_module_reset+0x20>)
  402a40:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
  402a44:	6377      	str	r7, [r6, #52]	; 0x34
	//ioport_set_pin_level(WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	delay_ms(100);
  402a46:	4d06      	ldr	r5, [pc, #24]	; (402a60 <wifi_module_reset+0x24>)
  402a48:	4628      	mov	r0, r5
  402a4a:	4c06      	ldr	r4, [pc, #24]	; (402a64 <wifi_module_reset+0x28>)
  402a4c:	47a0      	blx	r4
	//ioport_set_pin_level(WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	delay_ms(100);
  402a4e:	4628      	mov	r0, r5
  402a50:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402a52:	6337      	str	r7, [r6, #48]	; 0x30
	ioport_set_pin_level(WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	delay_ms(100);
  402a54:	4628      	mov	r0, r5
  402a56:	47a0      	blx	r4
  402a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a5a:	bf00      	nop
  402a5c:	400e0e00 	.word	0x400e0e00
  402a60:	000d141e 	.word	0x000d141e
  402a64:	20000001 	.word	0x20000001

00402a68 <wifi_serial_init>:
	*pDstStr++ = 0;
	return srcLen * 2;
}

void wifi_serial_init(uint32_t baudspeed)
{
  402a68:	b530      	push	{r4, r5, lr}
  402a6a:	b087      	sub	sp, #28
  402a6c:	4604      	mov	r4, r0
	uint32_t rx_timeout = (SERIAL_FRAME_INTERVAL * baudspeed) / 1000;
	sam_usart_opt_t usart_settings = {
  402a6e:	2300      	movs	r3, #0
  402a70:	9303      	str	r3, [sp, #12]
  402a72:	9304      	str	r3, [sp, #16]
  402a74:	9305      	str	r3, [sp, #20]
  402a76:	9000      	str	r0, [sp, #0]
  402a78:	23c0      	movs	r3, #192	; 0xc0
  402a7a:	9301      	str	r3, [sp, #4]
  402a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402a80:	9302      	str	r3, [sp, #8]
		.char_length = USART_CHRL,
		.parity_type = USART_PARITY,
		.stop_bits = USART_NBSTOP,
		.channel_mode = US_MR_CHMODE_NORMAL
	};
	flexcom_enable(WIFI_SERIAL_PORT_FLEXCOM);
  402a82:	4d1b      	ldr	r5, [pc, #108]	; (402af0 <wifi_serial_init+0x88>)
  402a84:	4628      	mov	r0, r5
  402a86:	4b1b      	ldr	r3, [pc, #108]	; (402af4 <wifi_serial_init+0x8c>)
  402a88:	4798      	blx	r3
	flexcom_set_opmode(WIFI_SERIAL_PORT_FLEXCOM, FLEXCOM_USART);
  402a8a:	4628      	mov	r0, r5
  402a8c:	2101      	movs	r1, #1
  402a8e:	4b1a      	ldr	r3, [pc, #104]	; (402af8 <wifi_serial_init+0x90>)
  402a90:	4798      	blx	r3
	
	/* Configure USART */
	usart_init_rs232(WIFI_SERIAL_PORT, &usart_settings,
  402a92:	f505 7500 	add.w	r5, r5, #512	; 0x200
  402a96:	4628      	mov	r0, r5
  402a98:	4669      	mov	r1, sp
  402a9a:	4a18      	ldr	r2, [pc, #96]	; (402afc <wifi_serial_init+0x94>)
  402a9c:	4b18      	ldr	r3, [pc, #96]	; (402b00 <wifi_serial_init+0x98>)
  402a9e:	4798      	blx	r3
	return srcLen * 2;
}

void wifi_serial_init(uint32_t baudspeed)
{
	uint32_t rx_timeout = (SERIAL_FRAME_INTERVAL * baudspeed) / 1000;
  402aa0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402aa4:	0064      	lsls	r4, r4, #1
  402aa6:	4917      	ldr	r1, [pc, #92]	; (402b04 <wifi_serial_init+0x9c>)
  402aa8:	fba1 3104 	umull	r3, r1, r1, r4
	
	/* Configure USART */
	usart_init_rs232(WIFI_SERIAL_PORT, &usart_settings,
	sysclk_get_peripheral_hz());
	
	usart_set_rx_timeout(WIFI_SERIAL_PORT, rx_timeout);
  402aac:	4628      	mov	r0, r5
  402aae:	0989      	lsrs	r1, r1, #6
  402ab0:	4b15      	ldr	r3, [pc, #84]	; (402b08 <wifi_serial_init+0xa0>)
  402ab2:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402ab4:	4b15      	ldr	r3, [pc, #84]	; (402b0c <wifi_serial_init+0xa4>)
  402ab6:	22e0      	movs	r2, #224	; 0xe0
  402ab8:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402abc:	f44f 7280 	mov.w	r2, #256	; 0x100
  402ac0:	601a      	str	r2, [r3, #0]
	
	/* Enable USART1 RX interrupt. */
	NVIC_SetPriority(WIFI_SERIAL_PORT_IRQn, SERIAL_PORT_INT_PRIO);
	NVIC_EnableIRQ((IRQn_Type)WIFI_SERIAL_PORT_FLEXCOM_ID);
	usart_enable_interrupt(WIFI_SERIAL_PORT, (US_IER_TIMEOUT | US_IER_RXRDY));
  402ac2:	4628      	mov	r0, r5
  402ac4:	f240 1101 	movw	r1, #257	; 0x101
  402ac8:	4b11      	ldr	r3, [pc, #68]	; (402b10 <wifi_serial_init+0xa8>)
  402aca:	4798      	blx	r3
	
	serial_recving = &serial_pk0;
  402acc:	4a11      	ldr	r2, [pc, #68]	; (402b14 <wifi_serial_init+0xac>)
  402ace:	4b12      	ldr	r3, [pc, #72]	; (402b18 <wifi_serial_init+0xb0>)
  402ad0:	601a      	str	r2, [r3, #0]
	serial_recved = &serial_pk1;
  402ad2:	4a12      	ldr	r2, [pc, #72]	; (402b1c <wifi_serial_init+0xb4>)
  402ad4:	4b12      	ldr	r3, [pc, #72]	; (402b20 <wifi_serial_init+0xb8>)
  402ad6:	601a      	str	r2, [r3, #0]
	
	/* Enable the receiver and transmitter. */
	usart_start_rx_timeout(WIFI_SERIAL_PORT);
  402ad8:	4628      	mov	r0, r5
  402ada:	4b12      	ldr	r3, [pc, #72]	; (402b24 <wifi_serial_init+0xbc>)
  402adc:	4798      	blx	r3
	usart_enable_tx(WIFI_SERIAL_PORT);
  402ade:	4628      	mov	r0, r5
  402ae0:	4b11      	ldr	r3, [pc, #68]	; (402b28 <wifi_serial_init+0xc0>)
  402ae2:	4798      	blx	r3
	usart_enable_rx(WIFI_SERIAL_PORT);
  402ae4:	4628      	mov	r0, r5
  402ae6:	4b11      	ldr	r3, [pc, #68]	; (402b2c <wifi_serial_init+0xc4>)
  402ae8:	4798      	blx	r3
}
  402aea:	b007      	add	sp, #28
  402aec:	bd30      	pop	{r4, r5, pc}
  402aee:	bf00      	nop
  402af0:	4000c000 	.word	0x4000c000
  402af4:	00400425 	.word	0x00400425
  402af8:	00400595 	.word	0x00400595
  402afc:	07270000 	.word	0x07270000
  402b00:	00400971 	.word	0x00400971
  402b04:	10624dd3 	.word	0x10624dd3
  402b08:	004009d5 	.word	0x004009d5
  402b0c:	e000e100 	.word	0xe000e100
  402b10:	004009d9 	.word	0x004009d9
  402b14:	2001a070 	.word	0x2001a070
  402b18:	2001a880 	.word	0x2001a880
  402b1c:	2001a474 	.word	0x2001a474
  402b20:	2001a87c 	.word	0x2001a87c
  402b24:	004009e5 	.word	0x004009e5
  402b28:	004009c5 	.word	0x004009c5
  402b2c:	004009cd 	.word	0x004009cd

00402b30 <FLEXCOM0_Handler>:

void WIFI_SERIAL_PORT_HANDLER(void)
{
  402b30:	b530      	push	{r4, r5, lr}
  402b32:	b083      	sub	sp, #12
	uint32_t status;
	uint32_t symbol;
	Pdc *p_pdc = NULL;
	serial_in_pk_t *ptemp = NULL;
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
  402b34:	2300      	movs	r3, #0
  402b36:	9300      	str	r3, [sp, #0]

	status = usart_get_status(WIFI_SERIAL_PORT);
  402b38:	4823      	ldr	r0, [pc, #140]	; (402bc8 <FLEXCOM0_Handler+0x98>)
  402b3a:	4b24      	ldr	r3, [pc, #144]	; (402bcc <FLEXCOM0_Handler+0x9c>)
  402b3c:	4798      	blx	r3
	//printf("USART6_Handler\r\n");
	if(status & US_CSR_RXRDY) {
  402b3e:	f010 0f01 	tst.w	r0, #1
  402b42:	d012      	beq.n	402b6a <FLEXCOM0_Handler+0x3a>
		
		if(usart_read(WIFI_SERIAL_PORT, &symbol) == 0) {
  402b44:	4820      	ldr	r0, [pc, #128]	; (402bc8 <FLEXCOM0_Handler+0x98>)
  402b46:	a901      	add	r1, sp, #4
  402b48:	4b21      	ldr	r3, [pc, #132]	; (402bd0 <FLEXCOM0_Handler+0xa0>)
  402b4a:	4798      	blx	r3
  402b4c:	2800      	cmp	r0, #0
  402b4e:	d139      	bne.n	402bc4 <FLEXCOM0_Handler+0x94>
			if(recv_idx < MAXIMUM_DATA_LENGTH) {
  402b50:	4b20      	ldr	r3, [pc, #128]	; (402bd4 <FLEXCOM0_Handler+0xa4>)
  402b52:	681b      	ldr	r3, [r3, #0]
  402b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  402b58:	d234      	bcs.n	402bc4 <FLEXCOM0_Handler+0x94>
				serial_recving->buf[recv_idx] = (uint8_t)symbol;
  402b5a:	4a1f      	ldr	r2, [pc, #124]	; (402bd8 <FLEXCOM0_Handler+0xa8>)
  402b5c:	6812      	ldr	r2, [r2, #0]
  402b5e:	9901      	ldr	r1, [sp, #4]
  402b60:	54d1      	strb	r1, [r2, r3]
				recv_idx++;
  402b62:	3301      	adds	r3, #1
  402b64:	4a1b      	ldr	r2, [pc, #108]	; (402bd4 <FLEXCOM0_Handler+0xa4>)
  402b66:	6013      	str	r3, [r2, #0]
  402b68:	e02c      	b.n	402bc4 <FLEXCOM0_Handler+0x94>
			}
		}
	}
	else if(status & US_CSR_TIMEOUT) {
  402b6a:	f410 7f80 	tst.w	r0, #256	; 0x100
  402b6e:	d01a      	beq.n	402ba6 <FLEXCOM0_Handler+0x76>
		IoT_xTimerStartFromISR(serial_tmr, &xHigherPriorityTaskWoken);
		if(xHigherPriorityTaskWoken != pdFALSE) {
			IoT_vPortYieldFromISR();
		}
		*/
		ptemp = serial_recving;
  402b70:	4b19      	ldr	r3, [pc, #100]	; (402bd8 <FLEXCOM0_Handler+0xa8>)
  402b72:	681a      	ldr	r2, [r3, #0]
		serial_recving = serial_recved;
  402b74:	4c19      	ldr	r4, [pc, #100]	; (402bdc <FLEXCOM0_Handler+0xac>)
  402b76:	6821      	ldr	r1, [r4, #0]
  402b78:	6019      	str	r1, [r3, #0]
		serial_recved = ptemp;
  402b7a:	6022      	str	r2, [r4, #0]
		serial_recved->len = recv_idx;
  402b7c:	4b15      	ldr	r3, [pc, #84]	; (402bd4 <FLEXCOM0_Handler+0xa4>)
  402b7e:	6819      	ldr	r1, [r3, #0]
  402b80:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
		
		//serial_recving->len = recv_idx;
		recv_idx = 0;
  402b84:	2500      	movs	r5, #0
  402b86:	601d      	str	r5, [r3, #0]
		usart_start_rx_timeout(WIFI_SERIAL_PORT);
  402b88:	480f      	ldr	r0, [pc, #60]	; (402bc8 <FLEXCOM0_Handler+0x98>)
  402b8a:	4b15      	ldr	r3, [pc, #84]	; (402be0 <FLEXCOM0_Handler+0xb0>)
  402b8c:	4798      	blx	r3
		IoT_xQueueSendFromISR(serial_in_queue, &serial_recved, &xHigherPriorityTaskWoken);
  402b8e:	4b15      	ldr	r3, [pc, #84]	; (402be4 <FLEXCOM0_Handler+0xb4>)
  402b90:	6818      	ldr	r0, [r3, #0]
  402b92:	4621      	mov	r1, r4
  402b94:	466a      	mov	r2, sp
  402b96:	462b      	mov	r3, r5
  402b98:	4c13      	ldr	r4, [pc, #76]	; (402be8 <FLEXCOM0_Handler+0xb8>)
  402b9a:	47a0      	blx	r4
		if(xHigherPriorityTaskWoken != pdFALSE) {
  402b9c:	9b00      	ldr	r3, [sp, #0]
  402b9e:	b18b      	cbz	r3, 402bc4 <FLEXCOM0_Handler+0x94>
			IoT_vPortYieldFromISR();
  402ba0:	4b12      	ldr	r3, [pc, #72]	; (402bec <FLEXCOM0_Handler+0xbc>)
  402ba2:	4798      	blx	r3
  402ba4:	e00e      	b.n	402bc4 <FLEXCOM0_Handler+0x94>
		}
	}
	else if(status & US_CSR_ENDTX) {
  402ba6:	f010 0f10 	tst.w	r0, #16
  402baa:	d00b      	beq.n	402bc4 <FLEXCOM0_Handler+0x94>
		p_pdc = usart_get_pdc_base(WIFI_SERIAL_PORT);
  402bac:	4c06      	ldr	r4, [pc, #24]	; (402bc8 <FLEXCOM0_Handler+0x98>)
  402bae:	4620      	mov	r0, r4
  402bb0:	4b0f      	ldr	r3, [pc, #60]	; (402bf0 <FLEXCOM0_Handler+0xc0>)
  402bb2:	4798      	blx	r3
		pdc_disable_transfer(p_pdc, PERIPH_PTCR_TXTDIS);
  402bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
  402bb8:	4b0e      	ldr	r3, [pc, #56]	; (402bf4 <FLEXCOM0_Handler+0xc4>)
  402bba:	4798      	blx	r3
		usart_disable_interrupt(WIFI_SERIAL_PORT, US_IDR_ENDTX);
  402bbc:	4620      	mov	r0, r4
  402bbe:	2110      	movs	r1, #16
  402bc0:	4b0d      	ldr	r3, [pc, #52]	; (402bf8 <FLEXCOM0_Handler+0xc8>)
  402bc2:	4798      	blx	r3
	}
	else {
		/* Do nothing */
	}
}
  402bc4:	b003      	add	sp, #12
  402bc6:	bd30      	pop	{r4, r5, pc}
  402bc8:	4000c200 	.word	0x4000c200
  402bcc:	004009e1 	.word	0x004009e1
  402bd0:	00400a01 	.word	0x00400a01
  402bd4:	20019fe8 	.word	0x20019fe8
  402bd8:	2001a880 	.word	0x2001a880
  402bdc:	2001a87c 	.word	0x2001a87c
  402be0:	004009e5 	.word	0x004009e5
  402be4:	20019ecc 	.word	0x20019ecc
  402be8:	0040145d 	.word	0x0040145d
  402bec:	00400e81 	.word	0x00400e81
  402bf0:	00400a19 	.word	0x00400a19
  402bf4:	004005bd 	.word	0x004005bd
  402bf8:	004009dd 	.word	0x004009dd

00402bfc <config_wifi_fw_otau_url>:
	out_data->len = pkt_len;
	IoT_xQueueSend(serial_out_queue, &out_data, portMAX_DELAY);
}

void config_wifi_fw_otau_url(void)
{
  402bfc:	b530      	push	{r4, r5, lr}
  402bfe:	b083      	sub	sp, #12
	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  402c00:	4b0b      	ldr	r3, [pc, #44]	; (402c30 <config_wifi_fw_otau_url+0x34>)
  402c02:	9301      	str	r3, [sp, #4]
	uint16_t pkt_len;
	
	pkt_len = form_serial_packet(CMD_REQ_SET_WIFI_FW_OTAU_URL, APP_OTA_URL, strlen(APP_OTA_URL), url_buf);
  402c04:	4c0b      	ldr	r4, [pc, #44]	; (402c34 <config_wifi_fw_otau_url+0x38>)
  402c06:	202a      	movs	r0, #42	; 0x2a
  402c08:	490b      	ldr	r1, [pc, #44]	; (402c38 <config_wifi_fw_otau_url+0x3c>)
  402c0a:	223c      	movs	r2, #60	; 0x3c
  402c0c:	4623      	mov	r3, r4
  402c0e:	4d0b      	ldr	r5, [pc, #44]	; (402c3c <config_wifi_fw_otau_url+0x40>)
  402c10:	47a8      	blx	r5
	out_data->buf = url_buf;
  402c12:	9b01      	ldr	r3, [sp, #4]
  402c14:	601c      	str	r4, [r3, #0]
	out_data->len = pkt_len;
  402c16:	a902      	add	r1, sp, #8
  402c18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
  402c1c:	6058      	str	r0, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &out_data, portMAX_DELAY);
  402c1e:	4b08      	ldr	r3, [pc, #32]	; (402c40 <config_wifi_fw_otau_url+0x44>)
  402c20:	6818      	ldr	r0, [r3, #0]
  402c22:	f04f 32ff 	mov.w	r2, #4294967295
  402c26:	2300      	movs	r3, #0
  402c28:	4c06      	ldr	r4, [pc, #24]	; (402c44 <config_wifi_fw_otau_url+0x48>)
  402c2a:	47a0      	blx	r4
}
  402c2c:	b003      	add	sp, #12
  402c2e:	bd30      	pop	{r4, r5, pc}
  402c30:	2001a040 	.word	0x2001a040
  402c34:	2001a8dc 	.word	0x2001a8dc
  402c38:	00407754 	.word	0x00407754
  402c3c:	004027f1 	.word	0x004027f1
  402c40:	2001a884 	.word	0x2001a884
  402c44:	0040132d 	.word	0x0040132d

00402c48 <parse_serial_packet>:

	}
}

void parse_serial_packet(uint8_t *buf, uint8_t buflen)
{
  402c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c4c:	b083      	sub	sp, #12
  402c4e:	4604      	mov	r4, r0
  402c50:	460d      	mov	r5, r1
	uint8_t *p = buf;
	uint8_t *data = NULL;
	uint8_t resp = CMD_SUCCESS;
	uint8_t len, crc, cmdid;
	
	byte2hexstrstr(buf, buflen, serial_buf_test, 256);
  402c52:	4ab6      	ldr	r2, [pc, #728]	; (402f2c <parse_serial_packet+0x2e4>)
  402c54:	f44f 7380 	mov.w	r3, #256	; 0x100
  402c58:	4eb5      	ldr	r6, [pc, #724]	; (402f30 <parse_serial_packet+0x2e8>)
  402c5a:	47b0      	blx	r6
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial IN(%d): %s\r\n", buflen, serial_buf_test));
  402c5c:	4bb5      	ldr	r3, [pc, #724]	; (402f34 <parse_serial_packet+0x2ec>)
  402c5e:	6818      	ldr	r0, [r3, #0]
  402c60:	b330      	cbz	r0, 402cb0 <parse_serial_packet+0x68>
  402c62:	2100      	movs	r1, #0
  402c64:	f04f 32ff 	mov.w	r2, #4294967295
  402c68:	460b      	mov	r3, r1
  402c6a:	4eb3      	ldr	r6, [pc, #716]	; (402f38 <parse_serial_packet+0x2f0>)
  402c6c:	47b0      	blx	r6
  402c6e:	4bb3      	ldr	r3, [pc, #716]	; (402f3c <parse_serial_packet+0x2f4>)
  402c70:	4798      	blx	r3
  402c72:	4606      	mov	r6, r0
  402c74:	2000      	movs	r0, #0
  402c76:	4bb2      	ldr	r3, [pc, #712]	; (402f40 <parse_serial_packet+0x2f8>)
  402c78:	4798      	blx	r3
  402c7a:	4602      	mov	r2, r0
  402c7c:	48b1      	ldr	r0, [pc, #708]	; (402f44 <parse_serial_packet+0x2fc>)
  402c7e:	4631      	mov	r1, r6
  402c80:	4eb1      	ldr	r6, [pc, #708]	; (402f48 <parse_serial_packet+0x300>)
  402c82:	47b0      	blx	r6
  402c84:	48b1      	ldr	r0, [pc, #708]	; (402f4c <parse_serial_packet+0x304>)
  402c86:	4629      	mov	r1, r5
  402c88:	4aa8      	ldr	r2, [pc, #672]	; (402f2c <parse_serial_packet+0x2e4>)
  402c8a:	47b0      	blx	r6
  402c8c:	4ba9      	ldr	r3, [pc, #676]	; (402f34 <parse_serial_packet+0x2ec>)
  402c8e:	6818      	ldr	r0, [r3, #0]
  402c90:	2100      	movs	r1, #0
  402c92:	460a      	mov	r2, r1
  402c94:	460b      	mov	r3, r1
  402c96:	4eae      	ldr	r6, [pc, #696]	; (402f50 <parse_serial_packet+0x308>)
  402c98:	47b0      	blx	r6
	
	while(buflen > 3) {
  402c9a:	2d03      	cmp	r5, #3
  402c9c:	f240 8786 	bls.w	403bac <parse_serial_packet+0xf64>
		if(*p != SERIAL_SOF) {
  402ca0:	7821      	ldrb	r1, [r4, #0]
  402ca2:	297e      	cmp	r1, #126	; 0x7e
  402ca4:	d10d      	bne.n	402cc2 <parse_serial_packet+0x7a>
			}
			else if(*data == CMD_OTAU_DL_FAILED) {
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU download failed.\r\n"));
			}
			else if(*data == CMD_OTAU_SW_FAILED) {
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: Switch OTAU image failed.\r\n"));
  402ca6:	4ea3      	ldr	r6, [pc, #652]	; (402f34 <parse_serial_packet+0x2ec>)
  402ca8:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 402f70 <parse_serial_packet+0x328>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402cac:	4fa9      	ldr	r7, [pc, #676]	; (402f54 <parse_serial_packet+0x30c>)
  402cae:	e035      	b.n	402d1c <parse_serial_packet+0xd4>
	uint8_t *data = NULL;
	uint8_t resp = CMD_SUCCESS;
	uint8_t len, crc, cmdid;
	
	byte2hexstrstr(buf, buflen, serial_buf_test, 256);
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial IN(%d): %s\r\n", buflen, serial_buf_test));
  402cb0:	48a6      	ldr	r0, [pc, #664]	; (402f4c <parse_serial_packet+0x304>)
  402cb2:	4629      	mov	r1, r5
  402cb4:	4a9d      	ldr	r2, [pc, #628]	; (402f2c <parse_serial_packet+0x2e4>)
  402cb6:	4ba4      	ldr	r3, [pc, #656]	; (402f48 <parse_serial_packet+0x300>)
  402cb8:	4798      	blx	r3
  402cba:	e7ee      	b.n	402c9a <parse_serial_packet+0x52>
	
	while(buflen > 3) {
		if(*p != SERIAL_SOF) {
  402cbc:	7821      	ldrb	r1, [r4, #0]
  402cbe:	297e      	cmp	r1, #126	; 0x7e
  402cc0:	d02c      	beq.n	402d1c <parse_serial_packet+0xd4>
			if (uart_ready == 0)
  402cc2:	4ba5      	ldr	r3, [pc, #660]	; (402f58 <parse_serial_packet+0x310>)
  402cc4:	781b      	ldrb	r3, [r3, #0]
  402cc6:	2b00      	cmp	r3, #0
  402cc8:	f000 8770 	beq.w	403bac <parse_serial_packet+0xf64>
				return;
			resp = CMD_INVALID_HEAD;
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("Invalid header received (0x%x).\r\n", *p));
  402ccc:	4b99      	ldr	r3, [pc, #612]	; (402f34 <parse_serial_packet+0x2ec>)
  402cce:	6818      	ldr	r0, [r3, #0]
  402cd0:	b1d8      	cbz	r0, 402d0a <parse_serial_packet+0xc2>
  402cd2:	2100      	movs	r1, #0
  402cd4:	f04f 32ff 	mov.w	r2, #4294967295
  402cd8:	460b      	mov	r3, r1
  402cda:	4d97      	ldr	r5, [pc, #604]	; (402f38 <parse_serial_packet+0x2f0>)
  402cdc:	47a8      	blx	r5
  402cde:	4b97      	ldr	r3, [pc, #604]	; (402f3c <parse_serial_packet+0x2f4>)
  402ce0:	4798      	blx	r3
  402ce2:	4605      	mov	r5, r0
  402ce4:	2000      	movs	r0, #0
  402ce6:	4b96      	ldr	r3, [pc, #600]	; (402f40 <parse_serial_packet+0x2f8>)
  402ce8:	4798      	blx	r3
  402cea:	4602      	mov	r2, r0
  402cec:	4895      	ldr	r0, [pc, #596]	; (402f44 <parse_serial_packet+0x2fc>)
  402cee:	4629      	mov	r1, r5
  402cf0:	4d95      	ldr	r5, [pc, #596]	; (402f48 <parse_serial_packet+0x300>)
  402cf2:	47a8      	blx	r5
  402cf4:	4899      	ldr	r0, [pc, #612]	; (402f5c <parse_serial_packet+0x314>)
  402cf6:	7821      	ldrb	r1, [r4, #0]
  402cf8:	47a8      	blx	r5
  402cfa:	4b8e      	ldr	r3, [pc, #568]	; (402f34 <parse_serial_packet+0x2ec>)
  402cfc:	6818      	ldr	r0, [r3, #0]
  402cfe:	2100      	movs	r1, #0
  402d00:	460a      	mov	r2, r1
  402d02:	460b      	mov	r3, r1
  402d04:	4c92      	ldr	r4, [pc, #584]	; (402f50 <parse_serial_packet+0x308>)
  402d06:	47a0      	blx	r4
  402d08:	e002      	b.n	402d10 <parse_serial_packet+0xc8>
  402d0a:	4894      	ldr	r0, [pc, #592]	; (402f5c <parse_serial_packet+0x314>)
  402d0c:	4b8e      	ldr	r3, [pc, #568]	; (402f48 <parse_serial_packet+0x300>)
  402d0e:	4798      	blx	r3
			serial_resp_out(CMD_PACKET_ERROR_RESP, resp);
  402d10:	20a0      	movs	r0, #160	; 0xa0
  402d12:	2101      	movs	r1, #1
  402d14:	4b92      	ldr	r3, [pc, #584]	; (402f60 <parse_serial_packet+0x318>)
  402d16:	4798      	blx	r3
			return;
  402d18:	f000 bf48 	b.w	403bac <parse_serial_packet+0xf64>
		}
	
		len = *(p + 1 + 1) + 3;
  402d1c:	78a0      	ldrb	r0, [r4, #2]
  402d1e:	f100 0e03 	add.w	lr, r0, #3

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
  402d22:	f01e 0eff 	ands.w	lr, lr, #255	; 0xff
  402d26:	d00d      	beq.n	402d44 <parse_serial_packet+0xfc>
  402d28:	1e62      	subs	r2, r4, #1
  402d2a:	1c81      	adds	r1, r0, #2
  402d2c:	fa54 f181 	uxtab	r1, r4, r1
  402d30:	f04f 0900 	mov.w	r9, #0
	{
		checksum += A[i];
  402d34:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  402d38:	444b      	add	r3, r9
  402d3a:	fa5f f983 	uxtb.w	r9, r3

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
  402d3e:	428a      	cmp	r2, r1
  402d40:	d1f8      	bne.n	402d34 <parse_serial_packet+0xec>
  402d42:	e001      	b.n	402d48 <parse_serial_packet+0x100>
}

static unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
  402d44:	f04f 0900 	mov.w	r9, #0
	
		len = *(p + 1 + 1) + 3;

		crc = sum8(p, len);

		if(*(p + len) != crc) {
  402d48:	eb04 0a0e 	add.w	sl, r4, lr
  402d4c:	f814 100e 	ldrb.w	r1, [r4, lr]
  402d50:	4549      	cmp	r1, r9
  402d52:	d02a      	beq.n	402daa <parse_serial_packet+0x162>
			resp = CMD_CRC_ERROR;
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("Invalid CRC, Received CRC(0x%x), Calculated CRC(0x%x).\r\n", *(p + len), crc));
  402d54:	4b77      	ldr	r3, [pc, #476]	; (402f34 <parse_serial_packet+0x2ec>)
  402d56:	6818      	ldr	r0, [r3, #0]
  402d58:	b1e8      	cbz	r0, 402d96 <parse_serial_packet+0x14e>
  402d5a:	2100      	movs	r1, #0
  402d5c:	f04f 32ff 	mov.w	r2, #4294967295
  402d60:	460b      	mov	r3, r1
  402d62:	4c75      	ldr	r4, [pc, #468]	; (402f38 <parse_serial_packet+0x2f0>)
  402d64:	47a0      	blx	r4
  402d66:	4b75      	ldr	r3, [pc, #468]	; (402f3c <parse_serial_packet+0x2f4>)
  402d68:	4798      	blx	r3
  402d6a:	4604      	mov	r4, r0
  402d6c:	2000      	movs	r0, #0
  402d6e:	4b74      	ldr	r3, [pc, #464]	; (402f40 <parse_serial_packet+0x2f8>)
  402d70:	4798      	blx	r3
  402d72:	4602      	mov	r2, r0
  402d74:	4873      	ldr	r0, [pc, #460]	; (402f44 <parse_serial_packet+0x2fc>)
  402d76:	4621      	mov	r1, r4
  402d78:	4c73      	ldr	r4, [pc, #460]	; (402f48 <parse_serial_packet+0x300>)
  402d7a:	47a0      	blx	r4
  402d7c:	4879      	ldr	r0, [pc, #484]	; (402f64 <parse_serial_packet+0x31c>)
  402d7e:	f89a 1000 	ldrb.w	r1, [sl]
  402d82:	464a      	mov	r2, r9
  402d84:	47a0      	blx	r4
  402d86:	4b6b      	ldr	r3, [pc, #428]	; (402f34 <parse_serial_packet+0x2ec>)
  402d88:	6818      	ldr	r0, [r3, #0]
  402d8a:	2100      	movs	r1, #0
  402d8c:	460a      	mov	r2, r1
  402d8e:	460b      	mov	r3, r1
  402d90:	4c6f      	ldr	r4, [pc, #444]	; (402f50 <parse_serial_packet+0x308>)
  402d92:	47a0      	blx	r4
  402d94:	e003      	b.n	402d9e <parse_serial_packet+0x156>
  402d96:	4873      	ldr	r0, [pc, #460]	; (402f64 <parse_serial_packet+0x31c>)
  402d98:	464a      	mov	r2, r9
  402d9a:	4b6b      	ldr	r3, [pc, #428]	; (402f48 <parse_serial_packet+0x300>)
  402d9c:	4798      	blx	r3
			serial_resp_out(CMD_PACKET_ERROR_RESP, CMD_CRC_ERROR);
  402d9e:	20a0      	movs	r0, #160	; 0xa0
  402da0:	2102      	movs	r1, #2
  402da2:	4b6f      	ldr	r3, [pc, #444]	; (402f60 <parse_serial_packet+0x318>)
  402da4:	4798      	blx	r3
			return;
  402da6:	f000 bf01 	b.w	403bac <parse_serial_packet+0xf64>
		}
		cmdid = *(p + 3);
  402daa:	f894 9003 	ldrb.w	r9, [r4, #3]
	{
		.cmd_index = 0,
		.value = 0
	};
	
	switch(cmdid)
  402dae:	f1b9 0fa8 	cmp.w	r9, #168	; 0xa8
  402db2:	f000 847c 	beq.w	4036ae <parse_serial_packet+0xa66>
  402db6:	d837      	bhi.n	402e28 <parse_serial_packet+0x1e0>
  402db8:	f1b9 0f84 	cmp.w	r9, #132	; 0x84
  402dbc:	f000 865e 	beq.w	403a7c <parse_serial_packet+0xe34>
  402dc0:	d818      	bhi.n	402df4 <parse_serial_packet+0x1ac>
  402dc2:	f1b9 0f0a 	cmp.w	r9, #10
  402dc6:	f000 8090 	beq.w	402eea <parse_serial_packet+0x2a2>
  402dca:	d809      	bhi.n	402de0 <parse_serial_packet+0x198>
  402dcc:	f1b9 0f03 	cmp.w	r9, #3
  402dd0:	f000 8149 	beq.w	403066 <parse_serial_packet+0x41e>
  402dd4:	f1b9 0f08 	cmp.w	r9, #8
  402dd8:	f000 811c 	beq.w	403014 <parse_serial_packet+0x3cc>
  402ddc:	f000 beb9 	b.w	403b52 <parse_serial_packet+0xf0a>
  402de0:	f1b9 0f81 	cmp.w	r9, #129	; 0x81
  402de4:	f000 8599 	beq.w	40391a <parse_serial_packet+0xcd2>
  402de8:	f1b9 0f82 	cmp.w	r9, #130	; 0x82
  402dec:	f000 8270 	beq.w	4032d0 <parse_serial_packet+0x688>
  402df0:	f000 beaf 	b.w	403b52 <parse_serial_packet+0xf0a>
  402df4:	f1b9 0fa0 	cmp.w	r9, #160	; 0xa0
  402df8:	d050      	beq.n	402e9c <parse_serial_packet+0x254>
  402dfa:	d809      	bhi.n	402e10 <parse_serial_packet+0x1c8>
  402dfc:	f1b9 0f89 	cmp.w	r9, #137	; 0x89
  402e00:	f000 8241 	beq.w	403286 <parse_serial_packet+0x63e>
  402e04:	f1b9 0f8b 	cmp.w	r9, #139	; 0x8b
  402e08:	f000 80fc 	beq.w	403004 <parse_serial_packet+0x3bc>
  402e0c:	f000 bea1 	b.w	403b52 <parse_serial_packet+0xf0a>
  402e10:	f1b9 0fa6 	cmp.w	r9, #166	; 0xa6
  402e14:	f000 8287 	beq.w	403326 <parse_serial_packet+0x6de>
  402e18:	f200 83a8 	bhi.w	40356c <parse_serial_packet+0x924>
  402e1c:	f1b9 0fa1 	cmp.w	r9, #161	; 0xa1
  402e20:	f000 81be 	beq.w	4031a0 <parse_serial_packet+0x558>
  402e24:	f000 be95 	b.w	403b52 <parse_serial_packet+0xf0a>
  402e28:	f1b9 0fcd 	cmp.w	r9, #205	; 0xcd
  402e2c:	f000 866e 	beq.w	403b0c <parse_serial_packet+0xec4>
  402e30:	d818      	bhi.n	402e64 <parse_serial_packet+0x21c>
  402e32:	f1b9 0fca 	cmp.w	r9, #202	; 0xca
  402e36:	f000 8593 	beq.w	403960 <parse_serial_packet+0xd18>
  402e3a:	d809      	bhi.n	402e50 <parse_serial_packet+0x208>
  402e3c:	f1b9 0fa9 	cmp.w	r9, #169	; 0xa9
  402e40:	f000 84e6 	beq.w	403810 <parse_serial_packet+0xbc8>
  402e44:	f1b9 0faa 	cmp.w	r9, #170	; 0xaa
  402e48:	f000 8507 	beq.w	40385a <parse_serial_packet+0xc12>
  402e4c:	f000 be81 	b.w	403b52 <parse_serial_packet+0xf0a>
  402e50:	f1b9 0fcb 	cmp.w	r9, #203	; 0xcb
  402e54:	f000 85a7 	beq.w	4039a6 <parse_serial_packet+0xd5e>
  402e58:	f1b9 0fcc 	cmp.w	r9, #204	; 0xcc
  402e5c:	f000 85c6 	beq.w	4039ec <parse_serial_packet+0xda4>
  402e60:	f000 be77 	b.w	403b52 <parse_serial_packet+0xf0a>
  402e64:	f1b9 0ffa 	cmp.w	r9, #250	; 0xfa
  402e68:	f000 81e4 	beq.w	403234 <parse_serial_packet+0x5ec>
  402e6c:	d809      	bhi.n	402e82 <parse_serial_packet+0x23a>
  402e6e:	f1b9 0ff8 	cmp.w	r9, #248	; 0xf8
  402e72:	f000 852f 	beq.w	4038d4 <parse_serial_packet+0xc8c>
  402e76:	f1b9 0ff9 	cmp.w	r9, #249	; 0xf9
  402e7a:	f000 8349 	beq.w	403510 <parse_serial_packet+0x8c8>
  402e7e:	f000 be68 	b.w	403b52 <parse_serial_packet+0xf0a>
  402e82:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
  402e86:	f000 82bb 	beq.w	403400 <parse_serial_packet+0x7b8>
  402e8a:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
  402e8e:	f000 8294 	beq.w	4033ba <parse_serial_packet+0x772>
  402e92:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
  402e96:	f040 865c 	bne.w	403b52 <parse_serial_packet+0xf0a>
  402e9a:	e2e4      	b.n	403466 <parse_serial_packet+0x81e>
	{
		case CMD_PACKET_ERROR_RESP:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Receive packet error response, err(%d).\r\n", *data));
  402e9c:	6830      	ldr	r0, [r6, #0]
  402e9e:	b1f0      	cbz	r0, 402ede <parse_serial_packet+0x296>
  402ea0:	2100      	movs	r1, #0
  402ea2:	f04f 32ff 	mov.w	r2, #4294967295
  402ea6:	460b      	mov	r3, r1
  402ea8:	f8df c08c 	ldr.w	ip, [pc, #140]	; 402f38 <parse_serial_packet+0x2f0>
  402eac:	47e0      	blx	ip
  402eae:	4b23      	ldr	r3, [pc, #140]	; (402f3c <parse_serial_packet+0x2f4>)
  402eb0:	4798      	blx	r3
  402eb2:	4681      	mov	r9, r0
  402eb4:	2000      	movs	r0, #0
  402eb6:	4b22      	ldr	r3, [pc, #136]	; (402f40 <parse_serial_packet+0x2f8>)
  402eb8:	4798      	blx	r3
  402eba:	4602      	mov	r2, r0
  402ebc:	4821      	ldr	r0, [pc, #132]	; (402f44 <parse_serial_packet+0x2fc>)
  402ebe:	4649      	mov	r1, r9
  402ec0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402f48 <parse_serial_packet+0x300>
  402ec4:	47c8      	blx	r9
  402ec6:	4828      	ldr	r0, [pc, #160]	; (402f68 <parse_serial_packet+0x320>)
  402ec8:	7921      	ldrb	r1, [r4, #4]
  402eca:	47c8      	blx	r9
  402ecc:	6830      	ldr	r0, [r6, #0]
  402ece:	2100      	movs	r1, #0
  402ed0:	460a      	mov	r2, r1
  402ed2:	460b      	mov	r3, r1
  402ed4:	f8df c078 	ldr.w	ip, [pc, #120]	; 402f50 <parse_serial_packet+0x308>
  402ed8:	47e0      	blx	ip
  402eda:	f000 be5e 	b.w	403b9a <parse_serial_packet+0xf52>
  402ede:	4822      	ldr	r0, [pc, #136]	; (402f68 <parse_serial_packet+0x320>)
  402ee0:	7921      	ldrb	r1, [r4, #4]
  402ee2:	4b19      	ldr	r3, [pc, #100]	; (402f48 <parse_serial_packet+0x300>)
  402ee4:	4798      	blx	r3
  402ee6:	f000 be58 	b.w	403b9a <parse_serial_packet+0xf52>
		break;

		case CUSTOMIZE_CMD_DEV_CTRL:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Receive control command.\r\n"));
  402eea:	6830      	ldr	r0, [r6, #0]
  402eec:	2800      	cmp	r0, #0
  402eee:	d041      	beq.n	402f74 <parse_serial_packet+0x32c>
  402ef0:	2100      	movs	r1, #0
  402ef2:	f04f 32ff 	mov.w	r2, #4294967295
  402ef6:	460b      	mov	r3, r1
  402ef8:	f8df c03c 	ldr.w	ip, [pc, #60]	; 402f38 <parse_serial_packet+0x2f0>
  402efc:	47e0      	blx	ip
  402efe:	4b0f      	ldr	r3, [pc, #60]	; (402f3c <parse_serial_packet+0x2f4>)
  402f00:	4798      	blx	r3
  402f02:	4681      	mov	r9, r0
  402f04:	2000      	movs	r0, #0
  402f06:	4b0e      	ldr	r3, [pc, #56]	; (402f40 <parse_serial_packet+0x2f8>)
  402f08:	4798      	blx	r3
  402f0a:	4602      	mov	r2, r0
  402f0c:	480d      	ldr	r0, [pc, #52]	; (402f44 <parse_serial_packet+0x2fc>)
  402f0e:	4649      	mov	r1, r9
  402f10:	f8df 9034 	ldr.w	r9, [pc, #52]	; 402f48 <parse_serial_packet+0x300>
  402f14:	47c8      	blx	r9
  402f16:	4815      	ldr	r0, [pc, #84]	; (402f6c <parse_serial_packet+0x324>)
  402f18:	47c8      	blx	r9
  402f1a:	6830      	ldr	r0, [r6, #0]
  402f1c:	2100      	movs	r1, #0
  402f1e:	460a      	mov	r2, r1
  402f20:	460b      	mov	r3, r1
  402f22:	f8df c02c 	ldr.w	ip, [pc, #44]	; 402f50 <parse_serial_packet+0x308>
  402f26:	47e0      	blx	ip
  402f28:	e027      	b.n	402f7a <parse_serial_packet+0x332>
  402f2a:	bf00      	nop
  402f2c:	2001a95c 	.word	0x2001a95c
  402f30:	004026e5 	.word	0x004026e5
  402f34:	2001a88c 	.word	0x2001a88c
  402f38:	004014f9 	.word	0x004014f9
  402f3c:	00401991 	.word	0x00401991
  402f40:	004019d1 	.word	0x004019d1
  402f44:	00407700 	.word	0x00407700
  402f48:	00404521 	.word	0x00404521
  402f4c:	00407794 	.word	0x00407794
  402f50:	0040132d 	.word	0x0040132d
  402f54:	400e0e00 	.word	0x400e0e00
  402f58:	2001a04c 	.word	0x2001a04c
  402f5c:	004077a8 	.word	0x004077a8
  402f60:	004026a1 	.word	0x004026a1
  402f64:	004077cc 	.word	0x004077cc
  402f68:	00407808 	.word	0x00407808
  402f6c:	00407834 	.word	0x00407834
  402f70:	00407a64 	.word	0x00407a64
  402f74:	489d      	ldr	r0, [pc, #628]	; (4031ec <parse_serial_packet+0x5a4>)
  402f76:	4b9e      	ldr	r3, [pc, #632]	; (4031f0 <parse_serial_packet+0x5a8>)
  402f78:	4798      	blx	r3
			g_virtual_dev.power = *(data + 2);
  402f7a:	79a2      	ldrb	r2, [r4, #6]
  402f7c:	4b9d      	ldr	r3, [pc, #628]	; (4031f4 <parse_serial_packet+0x5ac>)
  402f7e:	701a      	strb	r2, [r3, #0]
			g_virtual_dev.work_mode = *(data + 3);
  402f80:	79e1      	ldrb	r1, [r4, #7]
  402f82:	7059      	strb	r1, [r3, #1]
			g_virtual_dev.temp_value = *(data + 4);
  402f84:	7a21      	ldrb	r1, [r4, #8]
  402f86:	7099      	strb	r1, [r3, #2]
			g_virtual_dev.light_value = *(data + 5);
  402f88:	7a61      	ldrb	r1, [r4, #9]
  402f8a:	70d9      	strb	r1, [r3, #3]
			g_virtual_dev.time_delay = *(data + 6);
  402f8c:	7aa1      	ldrb	r1, [r4, #10]
  402f8e:	7119      	strb	r1, [r3, #4]
			if(g_virtual_dev.power == 0) {
  402f90:	b92a      	cbnz	r2, 402f9e <parse_serial_packet+0x356>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402f96:	633b      	str	r3, [r7, #48]	; 0x30
				LED_Off(LED0);
				led_state = OFF;
  402f98:	4b97      	ldr	r3, [pc, #604]	; (4031f8 <parse_serial_packet+0x5b0>)
  402f9a:	701a      	strb	r2, [r3, #0]
  402f9c:	e02b      	b.n	402ff6 <parse_serial_packet+0x3ae>
			}
			else if(g_virtual_dev.power == 1) {
  402f9e:	2a01      	cmp	r2, #1
  402fa0:	d105      	bne.n	402fae <parse_serial_packet+0x366>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402fa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402fa6:	637b      	str	r3, [r7, #52]	; 0x34
				LED_On(LED0);
				led_state = ON;
  402fa8:	4b93      	ldr	r3, [pc, #588]	; (4031f8 <parse_serial_packet+0x5b0>)
  402faa:	701a      	strb	r2, [r3, #0]
  402fac:	e023      	b.n	402ff6 <parse_serial_packet+0x3ae>
			}
			else {
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("No such control command(0x%x).\r\n", *data));
  402fae:	6830      	ldr	r0, [r6, #0]
  402fb0:	b1e8      	cbz	r0, 402fee <parse_serial_packet+0x3a6>
  402fb2:	2100      	movs	r1, #0
  402fb4:	f04f 32ff 	mov.w	r2, #4294967295
  402fb8:	460b      	mov	r3, r1
  402fba:	f8df c270 	ldr.w	ip, [pc, #624]	; 40322c <parse_serial_packet+0x5e4>
  402fbe:	47e0      	blx	ip
  402fc0:	4b8e      	ldr	r3, [pc, #568]	; (4031fc <parse_serial_packet+0x5b4>)
  402fc2:	4798      	blx	r3
  402fc4:	4681      	mov	r9, r0
  402fc6:	2000      	movs	r0, #0
  402fc8:	4b8d      	ldr	r3, [pc, #564]	; (403200 <parse_serial_packet+0x5b8>)
  402fca:	4798      	blx	r3
  402fcc:	4602      	mov	r2, r0
  402fce:	488d      	ldr	r0, [pc, #564]	; (403204 <parse_serial_packet+0x5bc>)
  402fd0:	4649      	mov	r1, r9
  402fd2:	f8df 921c 	ldr.w	r9, [pc, #540]	; 4031f0 <parse_serial_packet+0x5a8>
  402fd6:	47c8      	blx	r9
  402fd8:	488b      	ldr	r0, [pc, #556]	; (403208 <parse_serial_packet+0x5c0>)
  402fda:	7921      	ldrb	r1, [r4, #4]
  402fdc:	47c8      	blx	r9
  402fde:	6830      	ldr	r0, [r6, #0]
  402fe0:	2100      	movs	r1, #0
  402fe2:	460a      	mov	r2, r1
  402fe4:	460b      	mov	r3, r1
  402fe6:	f8df c248 	ldr.w	ip, [pc, #584]	; 403230 <parse_serial_packet+0x5e8>
  402fea:	47e0      	blx	ip
  402fec:	e003      	b.n	402ff6 <parse_serial_packet+0x3ae>
  402fee:	4886      	ldr	r0, [pc, #536]	; (403208 <parse_serial_packet+0x5c0>)
  402ff0:	7921      	ldrb	r1, [r4, #4]
  402ff2:	4b7f      	ldr	r3, [pc, #508]	; (4031f0 <parse_serial_packet+0x5a8>)
  402ff4:	4798      	blx	r3
			}
			signal_to_wifi(CUSTOMIZE_CMD_DEV_CTRL_RESP, &g_virtual_dev, sizeof(g_virtual_dev));
  402ff6:	208a      	movs	r0, #138	; 0x8a
  402ff8:	497e      	ldr	r1, [pc, #504]	; (4031f4 <parse_serial_packet+0x5ac>)
  402ffa:	2205      	movs	r2, #5
  402ffc:	4b83      	ldr	r3, [pc, #524]	; (40320c <parse_serial_packet+0x5c4>)
  402ffe:	4798      	blx	r3
  403000:	f000 bdcb 	b.w	403b9a <parse_serial_packet+0xf52>
			serial_resp_out(CMD_PACKET_ERROR_RESP, CMD_CRC_ERROR);
			return;
		}
		cmdid = *(p + 3);
		data = p + 4;
		len = *(p + 1 + 1) - 1;
  403004:	1e42      	subs	r2, r0, #1
			signal_to_wifi(CUSTOMIZE_CMD_DEV_CTRL_RESP, &g_virtual_dev, sizeof(g_virtual_dev));

		break;
		
		case CUSTOMIZE_CMD_RECIPE_DOWN_RESP:
			signal_to_wifi(CUSTOMIZE_CMD_DEV_CTRL_RESP, data, datalen);
  403006:	208a      	movs	r0, #138	; 0x8a
  403008:	1d21      	adds	r1, r4, #4
  40300a:	b2d2      	uxtb	r2, r2
  40300c:	4b7f      	ldr	r3, [pc, #508]	; (40320c <parse_serial_packet+0x5c4>)
  40300e:	4798      	blx	r3
  403010:	f000 bdc3 	b.w	403b9a <parse_serial_packet+0xf52>
			//uint8_t uuid[6] = {'4','K','D','3','R','C'};
			//signal_to_wifi(CUSTOMIZE_CMD_UUID_READ_RESP, uuid, sizeof(uuid));
		//break;
		//
		case CUSTOMIZE_CMD_GET_SNAPSHOT:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Get device states.\r\n"));
  403014:	6830      	ldr	r0, [r6, #0]
  403016:	b1e0      	cbz	r0, 403052 <parse_serial_packet+0x40a>
  403018:	2100      	movs	r1, #0
  40301a:	f04f 32ff 	mov.w	r2, #4294967295
  40301e:	460b      	mov	r3, r1
  403020:	f8df c208 	ldr.w	ip, [pc, #520]	; 40322c <parse_serial_packet+0x5e4>
  403024:	47e0      	blx	ip
  403026:	4b75      	ldr	r3, [pc, #468]	; (4031fc <parse_serial_packet+0x5b4>)
  403028:	4798      	blx	r3
  40302a:	4681      	mov	r9, r0
  40302c:	2000      	movs	r0, #0
  40302e:	4b74      	ldr	r3, [pc, #464]	; (403200 <parse_serial_packet+0x5b8>)
  403030:	4798      	blx	r3
  403032:	4602      	mov	r2, r0
  403034:	4873      	ldr	r0, [pc, #460]	; (403204 <parse_serial_packet+0x5bc>)
  403036:	4649      	mov	r1, r9
  403038:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 4031f0 <parse_serial_packet+0x5a8>
  40303c:	47c8      	blx	r9
  40303e:	4874      	ldr	r0, [pc, #464]	; (403210 <parse_serial_packet+0x5c8>)
  403040:	47c8      	blx	r9
  403042:	6830      	ldr	r0, [r6, #0]
  403044:	2100      	movs	r1, #0
  403046:	460a      	mov	r2, r1
  403048:	460b      	mov	r3, r1
  40304a:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 403230 <parse_serial_packet+0x5e8>
  40304e:	47e0      	blx	ip
  403050:	e002      	b.n	403058 <parse_serial_packet+0x410>
  403052:	486f      	ldr	r0, [pc, #444]	; (403210 <parse_serial_packet+0x5c8>)
  403054:	4b66      	ldr	r3, [pc, #408]	; (4031f0 <parse_serial_packet+0x5a8>)
  403056:	4798      	blx	r3
			//data_upload.led_state = led_state;
			signal_to_wifi(CUSTOMIZE_CMD_GET_SNAPSHOT_RESP, &data_upload, sizeof(data_upload));
  403058:	2088      	movs	r0, #136	; 0x88
  40305a:	496e      	ldr	r1, [pc, #440]	; (403214 <parse_serial_packet+0x5cc>)
  40305c:	2202      	movs	r2, #2
  40305e:	4b6b      	ldr	r3, [pc, #428]	; (40320c <parse_serial_packet+0x5c4>)
  403060:	4798      	blx	r3
  403062:	f000 bd9a 	b.w	403b9a <parse_serial_packet+0xf52>
		break;
		
		case CUSTOMIZE_CMD_STATUS_REPORT:
		{
			uint8_t states = *data;
  403066:	7923      	ldrb	r3, [r4, #4]
			if(states == 0) {
  403068:	bb23      	cbnz	r3, 4030b4 <parse_serial_packet+0x46c>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wifi disconnect.\r\n"));
  40306a:	6830      	ldr	r0, [r6, #0]
  40306c:	b1e8      	cbz	r0, 4030aa <parse_serial_packet+0x462>
  40306e:	2100      	movs	r1, #0
  403070:	f04f 32ff 	mov.w	r2, #4294967295
  403074:	460b      	mov	r3, r1
  403076:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 40322c <parse_serial_packet+0x5e4>
  40307a:	47e0      	blx	ip
  40307c:	4b5f      	ldr	r3, [pc, #380]	; (4031fc <parse_serial_packet+0x5b4>)
  40307e:	4798      	blx	r3
  403080:	4681      	mov	r9, r0
  403082:	2000      	movs	r0, #0
  403084:	4b5e      	ldr	r3, [pc, #376]	; (403200 <parse_serial_packet+0x5b8>)
  403086:	4798      	blx	r3
  403088:	4602      	mov	r2, r0
  40308a:	485e      	ldr	r0, [pc, #376]	; (403204 <parse_serial_packet+0x5bc>)
  40308c:	4649      	mov	r1, r9
  40308e:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4031f0 <parse_serial_packet+0x5a8>
  403092:	47c8      	blx	r9
  403094:	4860      	ldr	r0, [pc, #384]	; (403218 <parse_serial_packet+0x5d0>)
  403096:	47c8      	blx	r9
  403098:	6830      	ldr	r0, [r6, #0]
  40309a:	2100      	movs	r1, #0
  40309c:	460a      	mov	r2, r1
  40309e:	460b      	mov	r3, r1
  4030a0:	f8df c18c 	ldr.w	ip, [pc, #396]	; 403230 <parse_serial_packet+0x5e8>
  4030a4:	47e0      	blx	ip
  4030a6:	f000 bd78 	b.w	403b9a <parse_serial_packet+0xf52>
  4030aa:	485b      	ldr	r0, [pc, #364]	; (403218 <parse_serial_packet+0x5d0>)
  4030ac:	4b50      	ldr	r3, [pc, #320]	; (4031f0 <parse_serial_packet+0x5a8>)
  4030ae:	4798      	blx	r3
  4030b0:	f000 bd73 	b.w	403b9a <parse_serial_packet+0xf52>
			}
			else if(states == 1) {
  4030b4:	2b01      	cmp	r3, #1
  4030b6:	d124      	bne.n	403102 <parse_serial_packet+0x4ba>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wifi module in sniffer mode.\r\n"));
  4030b8:	6830      	ldr	r0, [r6, #0]
  4030ba:	b1e8      	cbz	r0, 4030f8 <parse_serial_packet+0x4b0>
  4030bc:	2100      	movs	r1, #0
  4030be:	f04f 32ff 	mov.w	r2, #4294967295
  4030c2:	460b      	mov	r3, r1
  4030c4:	f8df c164 	ldr.w	ip, [pc, #356]	; 40322c <parse_serial_packet+0x5e4>
  4030c8:	47e0      	blx	ip
  4030ca:	4b4c      	ldr	r3, [pc, #304]	; (4031fc <parse_serial_packet+0x5b4>)
  4030cc:	4798      	blx	r3
  4030ce:	4681      	mov	r9, r0
  4030d0:	2000      	movs	r0, #0
  4030d2:	4b4b      	ldr	r3, [pc, #300]	; (403200 <parse_serial_packet+0x5b8>)
  4030d4:	4798      	blx	r3
  4030d6:	4602      	mov	r2, r0
  4030d8:	484a      	ldr	r0, [pc, #296]	; (403204 <parse_serial_packet+0x5bc>)
  4030da:	4649      	mov	r1, r9
  4030dc:	f8df 9110 	ldr.w	r9, [pc, #272]	; 4031f0 <parse_serial_packet+0x5a8>
  4030e0:	47c8      	blx	r9
  4030e2:	484e      	ldr	r0, [pc, #312]	; (40321c <parse_serial_packet+0x5d4>)
  4030e4:	47c8      	blx	r9
  4030e6:	6830      	ldr	r0, [r6, #0]
  4030e8:	2100      	movs	r1, #0
  4030ea:	460a      	mov	r2, r1
  4030ec:	460b      	mov	r3, r1
  4030ee:	f8df c140 	ldr.w	ip, [pc, #320]	; 403230 <parse_serial_packet+0x5e8>
  4030f2:	47e0      	blx	ip
  4030f4:	f000 bd51 	b.w	403b9a <parse_serial_packet+0xf52>
  4030f8:	4848      	ldr	r0, [pc, #288]	; (40321c <parse_serial_packet+0x5d4>)
  4030fa:	4b3d      	ldr	r3, [pc, #244]	; (4031f0 <parse_serial_packet+0x5a8>)
  4030fc:	4798      	blx	r3
  4030fe:	f000 bd4c 	b.w	403b9a <parse_serial_packet+0xf52>
			}
			else if (states == 2) {
  403102:	2b02      	cmp	r3, #2
  403104:	d124      	bne.n	403150 <parse_serial_packet+0x508>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wifi module connect to wifi router.\r\n"));
  403106:	6830      	ldr	r0, [r6, #0]
  403108:	b1e8      	cbz	r0, 403146 <parse_serial_packet+0x4fe>
  40310a:	2100      	movs	r1, #0
  40310c:	f04f 32ff 	mov.w	r2, #4294967295
  403110:	460b      	mov	r3, r1
  403112:	f8df c118 	ldr.w	ip, [pc, #280]	; 40322c <parse_serial_packet+0x5e4>
  403116:	47e0      	blx	ip
  403118:	4b38      	ldr	r3, [pc, #224]	; (4031fc <parse_serial_packet+0x5b4>)
  40311a:	4798      	blx	r3
  40311c:	4681      	mov	r9, r0
  40311e:	2000      	movs	r0, #0
  403120:	4b37      	ldr	r3, [pc, #220]	; (403200 <parse_serial_packet+0x5b8>)
  403122:	4798      	blx	r3
  403124:	4602      	mov	r2, r0
  403126:	4837      	ldr	r0, [pc, #220]	; (403204 <parse_serial_packet+0x5bc>)
  403128:	4649      	mov	r1, r9
  40312a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 4031f0 <parse_serial_packet+0x5a8>
  40312e:	47c8      	blx	r9
  403130:	483b      	ldr	r0, [pc, #236]	; (403220 <parse_serial_packet+0x5d8>)
  403132:	47c8      	blx	r9
  403134:	6830      	ldr	r0, [r6, #0]
  403136:	2100      	movs	r1, #0
  403138:	460a      	mov	r2, r1
  40313a:	460b      	mov	r3, r1
  40313c:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 403230 <parse_serial_packet+0x5e8>
  403140:	47e0      	blx	ip
  403142:	f000 bd2a 	b.w	403b9a <parse_serial_packet+0xf52>
  403146:	4836      	ldr	r0, [pc, #216]	; (403220 <parse_serial_packet+0x5d8>)
  403148:	4b29      	ldr	r3, [pc, #164]	; (4031f0 <parse_serial_packet+0x5a8>)
  40314a:	4798      	blx	r3
  40314c:	f000 bd25 	b.w	403b9a <parse_serial_packet+0xf52>
			}
			else if(states == 3) {
  403150:	2b03      	cmp	r3, #3
  403152:	f040 8522 	bne.w	403b9a <parse_serial_packet+0xf52>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wifi module connect to JD server.\r\n"));
  403156:	6830      	ldr	r0, [r6, #0]
  403158:	b1e8      	cbz	r0, 403196 <parse_serial_packet+0x54e>
  40315a:	2100      	movs	r1, #0
  40315c:	f04f 32ff 	mov.w	r2, #4294967295
  403160:	460b      	mov	r3, r1
  403162:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 40322c <parse_serial_packet+0x5e4>
  403166:	47e0      	blx	ip
  403168:	4b24      	ldr	r3, [pc, #144]	; (4031fc <parse_serial_packet+0x5b4>)
  40316a:	4798      	blx	r3
  40316c:	4681      	mov	r9, r0
  40316e:	2000      	movs	r0, #0
  403170:	4b23      	ldr	r3, [pc, #140]	; (403200 <parse_serial_packet+0x5b8>)
  403172:	4798      	blx	r3
  403174:	4602      	mov	r2, r0
  403176:	4823      	ldr	r0, [pc, #140]	; (403204 <parse_serial_packet+0x5bc>)
  403178:	4649      	mov	r1, r9
  40317a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4031f0 <parse_serial_packet+0x5a8>
  40317e:	47c8      	blx	r9
  403180:	4828      	ldr	r0, [pc, #160]	; (403224 <parse_serial_packet+0x5dc>)
  403182:	47c8      	blx	r9
  403184:	6830      	ldr	r0, [r6, #0]
  403186:	2100      	movs	r1, #0
  403188:	460a      	mov	r2, r1
  40318a:	460b      	mov	r3, r1
  40318c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 403230 <parse_serial_packet+0x5e8>
  403190:	47e0      	blx	ip
  403192:	f000 bd02 	b.w	403b9a <parse_serial_packet+0xf52>
  403196:	4823      	ldr	r0, [pc, #140]	; (403224 <parse_serial_packet+0x5dc>)
  403198:	4b15      	ldr	r3, [pc, #84]	; (4031f0 <parse_serial_packet+0x5a8>)
  40319a:	4798      	blx	r3
  40319c:	f000 bcfd 	b.w	403b9a <parse_serial_packet+0xf52>
			//sniffer_mode = 0;
			//LED_Off(LED0);
			//led_state = 0;

			//led_states_upload(led_state);
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Connect to Remote Server OK.\r\n"));
  4031a0:	6830      	ldr	r0, [r6, #0]
  4031a2:	b1e8      	cbz	r0, 4031e0 <parse_serial_packet+0x598>
  4031a4:	2100      	movs	r1, #0
  4031a6:	f04f 32ff 	mov.w	r2, #4294967295
  4031aa:	460b      	mov	r3, r1
  4031ac:	f8df c07c 	ldr.w	ip, [pc, #124]	; 40322c <parse_serial_packet+0x5e4>
  4031b0:	47e0      	blx	ip
  4031b2:	4b12      	ldr	r3, [pc, #72]	; (4031fc <parse_serial_packet+0x5b4>)
  4031b4:	4798      	blx	r3
  4031b6:	4681      	mov	r9, r0
  4031b8:	2000      	movs	r0, #0
  4031ba:	4b11      	ldr	r3, [pc, #68]	; (403200 <parse_serial_packet+0x5b8>)
  4031bc:	4798      	blx	r3
  4031be:	4602      	mov	r2, r0
  4031c0:	4810      	ldr	r0, [pc, #64]	; (403204 <parse_serial_packet+0x5bc>)
  4031c2:	4649      	mov	r1, r9
  4031c4:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4031f0 <parse_serial_packet+0x5a8>
  4031c8:	47c8      	blx	r9
  4031ca:	4817      	ldr	r0, [pc, #92]	; (403228 <parse_serial_packet+0x5e0>)
  4031cc:	47c8      	blx	r9
  4031ce:	6830      	ldr	r0, [r6, #0]
  4031d0:	2100      	movs	r1, #0
  4031d2:	460a      	mov	r2, r1
  4031d4:	460b      	mov	r3, r1
  4031d6:	f8df c058 	ldr.w	ip, [pc, #88]	; 403230 <parse_serial_packet+0x5e8>
  4031da:	47e0      	blx	ip
  4031dc:	f000 bcdd 	b.w	403b9a <parse_serial_packet+0xf52>
  4031e0:	4811      	ldr	r0, [pc, #68]	; (403228 <parse_serial_packet+0x5e0>)
  4031e2:	4b03      	ldr	r3, [pc, #12]	; (4031f0 <parse_serial_packet+0x5a8>)
  4031e4:	4798      	blx	r3
  4031e6:	f000 bcd8 	b.w	403b9a <parse_serial_packet+0xf52>
  4031ea:	bf00      	nop
  4031ec:	00407834 	.word	0x00407834
  4031f0:	00404521 	.word	0x00404521
  4031f4:	2001aa5c 	.word	0x2001aa5c
  4031f8:	2001a060 	.word	0x2001a060
  4031fc:	00401991 	.word	0x00401991
  403200:	004019d1 	.word	0x004019d1
  403204:	00407700 	.word	0x00407700
  403208:	00407850 	.word	0x00407850
  40320c:	00402765 	.word	0x00402765
  403210:	00407874 	.word	0x00407874
  403214:	2001a888 	.word	0x2001a888
  403218:	0040788c 	.word	0x0040788c
  40321c:	004078a0 	.word	0x004078a0
  403220:	004078c0 	.word	0x004078c0
  403224:	004078e8 	.word	0x004078e8
  403228:	0040790c 	.word	0x0040790c
  40322c:	004014f9 	.word	0x004014f9
  403230:	0040132d 	.word	0x0040132d
		break;
		
		case CMD_CONNECTION_BEATHEART:
			uart_beatheart++;
  403234:	4aa5      	ldr	r2, [pc, #660]	; (4034cc <parse_serial_packet+0x884>)
  403236:	6813      	ldr	r3, [r2, #0]
  403238:	3301      	adds	r3, #1
  40323a:	6013      	str	r3, [r2, #0]
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Connection beatheart.\r\n"));
  40323c:	6830      	ldr	r0, [r6, #0]
  40323e:	b1e8      	cbz	r0, 40327c <parse_serial_packet+0x634>
  403240:	2100      	movs	r1, #0
  403242:	f04f 32ff 	mov.w	r2, #4294967295
  403246:	460b      	mov	r3, r1
  403248:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 403508 <parse_serial_packet+0x8c0>
  40324c:	47e0      	blx	ip
  40324e:	4ba0      	ldr	r3, [pc, #640]	; (4034d0 <parse_serial_packet+0x888>)
  403250:	4798      	blx	r3
  403252:	4681      	mov	r9, r0
  403254:	2000      	movs	r0, #0
  403256:	4b9f      	ldr	r3, [pc, #636]	; (4034d4 <parse_serial_packet+0x88c>)
  403258:	4798      	blx	r3
  40325a:	4602      	mov	r2, r0
  40325c:	489e      	ldr	r0, [pc, #632]	; (4034d8 <parse_serial_packet+0x890>)
  40325e:	4649      	mov	r1, r9
  403260:	f8df 927c 	ldr.w	r9, [pc, #636]	; 4034e0 <parse_serial_packet+0x898>
  403264:	47c8      	blx	r9
  403266:	489d      	ldr	r0, [pc, #628]	; (4034dc <parse_serial_packet+0x894>)
  403268:	47c8      	blx	r9
  40326a:	6830      	ldr	r0, [r6, #0]
  40326c:	2100      	movs	r1, #0
  40326e:	460a      	mov	r2, r1
  403270:	460b      	mov	r3, r1
  403272:	f8df c298 	ldr.w	ip, [pc, #664]	; 40350c <parse_serial_packet+0x8c4>
  403276:	47e0      	blx	ip
  403278:	f000 bc8f 	b.w	403b9a <parse_serial_packet+0xf52>
  40327c:	4897      	ldr	r0, [pc, #604]	; (4034dc <parse_serial_packet+0x894>)
  40327e:	4b98      	ldr	r3, [pc, #608]	; (4034e0 <parse_serial_packet+0x898>)
  403280:	4798      	blx	r3
  403282:	f000 bc8a 	b.w	403b9a <parse_serial_packet+0xf52>
		break;
		
		case CUSTOMIZE_CMD_DATA_UPLOAD_RESP:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Update Data OK.\r\n"));
  403286:	6830      	ldr	r0, [r6, #0]
  403288:	b1e8      	cbz	r0, 4032c6 <parse_serial_packet+0x67e>
  40328a:	2100      	movs	r1, #0
  40328c:	f04f 32ff 	mov.w	r2, #4294967295
  403290:	460b      	mov	r3, r1
  403292:	f8df c274 	ldr.w	ip, [pc, #628]	; 403508 <parse_serial_packet+0x8c0>
  403296:	47e0      	blx	ip
  403298:	4b8d      	ldr	r3, [pc, #564]	; (4034d0 <parse_serial_packet+0x888>)
  40329a:	4798      	blx	r3
  40329c:	4681      	mov	r9, r0
  40329e:	2000      	movs	r0, #0
  4032a0:	4b8c      	ldr	r3, [pc, #560]	; (4034d4 <parse_serial_packet+0x88c>)
  4032a2:	4798      	blx	r3
  4032a4:	4602      	mov	r2, r0
  4032a6:	488c      	ldr	r0, [pc, #560]	; (4034d8 <parse_serial_packet+0x890>)
  4032a8:	4649      	mov	r1, r9
  4032aa:	f8df 9234 	ldr.w	r9, [pc, #564]	; 4034e0 <parse_serial_packet+0x898>
  4032ae:	47c8      	blx	r9
  4032b0:	488c      	ldr	r0, [pc, #560]	; (4034e4 <parse_serial_packet+0x89c>)
  4032b2:	47c8      	blx	r9
  4032b4:	6830      	ldr	r0, [r6, #0]
  4032b6:	2100      	movs	r1, #0
  4032b8:	460a      	mov	r2, r1
  4032ba:	460b      	mov	r3, r1
  4032bc:	f8df c24c 	ldr.w	ip, [pc, #588]	; 40350c <parse_serial_packet+0x8c4>
  4032c0:	47e0      	blx	ip
  4032c2:	f000 bc6a 	b.w	403b9a <parse_serial_packet+0xf52>
  4032c6:	4887      	ldr	r0, [pc, #540]	; (4034e4 <parse_serial_packet+0x89c>)
  4032c8:	4b85      	ldr	r3, [pc, #532]	; (4034e0 <parse_serial_packet+0x898>)
  4032ca:	4798      	blx	r3
  4032cc:	f000 bc65 	b.w	403b9a <parse_serial_packet+0xf52>
  4032d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4032d4:	637b      	str	r3, [r7, #52]	; 0x34
		break;
		
		case CUSTOMIZE_CMD_FACTORY_RESET_RESP:
		{
			LED_On(LED0);
			led_state = ON;
  4032d6:	2201      	movs	r2, #1
  4032d8:	4b83      	ldr	r3, [pc, #524]	; (4034e8 <parse_serial_packet+0x8a0>)
  4032da:	701a      	strb	r2, [r3, #0]
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Reset to FactoryNew OK.\r\n"));
  4032dc:	6830      	ldr	r0, [r6, #0]
  4032de:	b1e8      	cbz	r0, 40331c <parse_serial_packet+0x6d4>
  4032e0:	2100      	movs	r1, #0
  4032e2:	f04f 32ff 	mov.w	r2, #4294967295
  4032e6:	460b      	mov	r3, r1
  4032e8:	f8df c21c 	ldr.w	ip, [pc, #540]	; 403508 <parse_serial_packet+0x8c0>
  4032ec:	47e0      	blx	ip
  4032ee:	4b78      	ldr	r3, [pc, #480]	; (4034d0 <parse_serial_packet+0x888>)
  4032f0:	4798      	blx	r3
  4032f2:	4681      	mov	r9, r0
  4032f4:	2000      	movs	r0, #0
  4032f6:	4b77      	ldr	r3, [pc, #476]	; (4034d4 <parse_serial_packet+0x88c>)
  4032f8:	4798      	blx	r3
  4032fa:	4602      	mov	r2, r0
  4032fc:	4876      	ldr	r0, [pc, #472]	; (4034d8 <parse_serial_packet+0x890>)
  4032fe:	4649      	mov	r1, r9
  403300:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 4034e0 <parse_serial_packet+0x898>
  403304:	47c8      	blx	r9
  403306:	4879      	ldr	r0, [pc, #484]	; (4034ec <parse_serial_packet+0x8a4>)
  403308:	47c8      	blx	r9
  40330a:	6830      	ldr	r0, [r6, #0]
  40330c:	2100      	movs	r1, #0
  40330e:	460a      	mov	r2, r1
  403310:	460b      	mov	r3, r1
  403312:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 40350c <parse_serial_packet+0x8c4>
  403316:	47e0      	blx	ip
  403318:	f000 bc3f 	b.w	403b9a <parse_serial_packet+0xf52>
  40331c:	4873      	ldr	r0, [pc, #460]	; (4034ec <parse_serial_packet+0x8a4>)
  40331e:	4b70      	ldr	r3, [pc, #448]	; (4034e0 <parse_serial_packet+0x898>)
  403320:	4798      	blx	r3
  403322:	f000 bc3a 	b.w	403b9a <parse_serial_packet+0xf52>
			//winc1500_module_reset();
		}
		break;
		
		case CMD_DEVICE_UUID_RESP:
			if(*data == CMD_SUCCESS) {
  403326:	7923      	ldrb	r3, [r4, #4]
  403328:	bb23      	cbnz	r3, 403374 <parse_serial_packet+0x72c>
				//Wi-Fi module will connect the remote server automatically after it gets the UUID.
				//start_wifi_connect();
				//config_wifi_app_otau_url();
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UUID RESP OK.\r\n"));
  40332a:	6830      	ldr	r0, [r6, #0]
  40332c:	b1e8      	cbz	r0, 40336a <parse_serial_packet+0x722>
  40332e:	2100      	movs	r1, #0
  403330:	f04f 32ff 	mov.w	r2, #4294967295
  403334:	460b      	mov	r3, r1
  403336:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 403508 <parse_serial_packet+0x8c0>
  40333a:	47e0      	blx	ip
  40333c:	4b64      	ldr	r3, [pc, #400]	; (4034d0 <parse_serial_packet+0x888>)
  40333e:	4798      	blx	r3
  403340:	4681      	mov	r9, r0
  403342:	2000      	movs	r0, #0
  403344:	4b63      	ldr	r3, [pc, #396]	; (4034d4 <parse_serial_packet+0x88c>)
  403346:	4798      	blx	r3
  403348:	4602      	mov	r2, r0
  40334a:	4863      	ldr	r0, [pc, #396]	; (4034d8 <parse_serial_packet+0x890>)
  40334c:	4649      	mov	r1, r9
  40334e:	f8df 9190 	ldr.w	r9, [pc, #400]	; 4034e0 <parse_serial_packet+0x898>
  403352:	47c8      	blx	r9
  403354:	4866      	ldr	r0, [pc, #408]	; (4034f0 <parse_serial_packet+0x8a8>)
  403356:	47c8      	blx	r9
  403358:	6830      	ldr	r0, [r6, #0]
  40335a:	2100      	movs	r1, #0
  40335c:	460a      	mov	r2, r1
  40335e:	460b      	mov	r3, r1
  403360:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 40350c <parse_serial_packet+0x8c4>
  403364:	47e0      	blx	ip
  403366:	f000 bc18 	b.w	403b9a <parse_serial_packet+0xf52>
  40336a:	4861      	ldr	r0, [pc, #388]	; (4034f0 <parse_serial_packet+0x8a8>)
  40336c:	4b5c      	ldr	r3, [pc, #368]	; (4034e0 <parse_serial_packet+0x898>)
  40336e:	4798      	blx	r3
  403370:	f000 bc13 	b.w	403b9a <parse_serial_packet+0xf52>
			}
			else {
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UUID RESP Error.\r\n"));
  403374:	6830      	ldr	r0, [r6, #0]
  403376:	b1e0      	cbz	r0, 4033b2 <parse_serial_packet+0x76a>
  403378:	2100      	movs	r1, #0
  40337a:	f04f 32ff 	mov.w	r2, #4294967295
  40337e:	460b      	mov	r3, r1
  403380:	f8df c184 	ldr.w	ip, [pc, #388]	; 403508 <parse_serial_packet+0x8c0>
  403384:	47e0      	blx	ip
  403386:	4b52      	ldr	r3, [pc, #328]	; (4034d0 <parse_serial_packet+0x888>)
  403388:	4798      	blx	r3
  40338a:	4681      	mov	r9, r0
  40338c:	2000      	movs	r0, #0
  40338e:	4b51      	ldr	r3, [pc, #324]	; (4034d4 <parse_serial_packet+0x88c>)
  403390:	4798      	blx	r3
  403392:	4602      	mov	r2, r0
  403394:	4850      	ldr	r0, [pc, #320]	; (4034d8 <parse_serial_packet+0x890>)
  403396:	4649      	mov	r1, r9
  403398:	f8df 9144 	ldr.w	r9, [pc, #324]	; 4034e0 <parse_serial_packet+0x898>
  40339c:	47c8      	blx	r9
  40339e:	4855      	ldr	r0, [pc, #340]	; (4034f4 <parse_serial_packet+0x8ac>)
  4033a0:	47c8      	blx	r9
  4033a2:	6830      	ldr	r0, [r6, #0]
  4033a4:	2100      	movs	r1, #0
  4033a6:	460a      	mov	r2, r1
  4033a8:	460b      	mov	r3, r1
  4033aa:	f8df c160 	ldr.w	ip, [pc, #352]	; 40350c <parse_serial_packet+0x8c4>
  4033ae:	47e0      	blx	ip
  4033b0:	e3f3      	b.n	403b9a <parse_serial_packet+0xf52>
  4033b2:	4850      	ldr	r0, [pc, #320]	; (4034f4 <parse_serial_packet+0x8ac>)
  4033b4:	4b4a      	ldr	r3, [pc, #296]	; (4034e0 <parse_serial_packet+0x898>)
  4033b6:	4798      	blx	r3
  4033b8:	e3ef      	b.n	403b9a <parse_serial_packet+0xf52>
			}
		break;
		
		case CMD_START_SNIFFER_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Start sniffer mode...\r\n"));
  4033ba:	6830      	ldr	r0, [r6, #0]
  4033bc:	b1e0      	cbz	r0, 4033f8 <parse_serial_packet+0x7b0>
  4033be:	2100      	movs	r1, #0
  4033c0:	f04f 32ff 	mov.w	r2, #4294967295
  4033c4:	460b      	mov	r3, r1
  4033c6:	f8df c140 	ldr.w	ip, [pc, #320]	; 403508 <parse_serial_packet+0x8c0>
  4033ca:	47e0      	blx	ip
  4033cc:	4b40      	ldr	r3, [pc, #256]	; (4034d0 <parse_serial_packet+0x888>)
  4033ce:	4798      	blx	r3
  4033d0:	4681      	mov	r9, r0
  4033d2:	2000      	movs	r0, #0
  4033d4:	4b3f      	ldr	r3, [pc, #252]	; (4034d4 <parse_serial_packet+0x88c>)
  4033d6:	4798      	blx	r3
  4033d8:	4602      	mov	r2, r0
  4033da:	483f      	ldr	r0, [pc, #252]	; (4034d8 <parse_serial_packet+0x890>)
  4033dc:	4649      	mov	r1, r9
  4033de:	f8df 9100 	ldr.w	r9, [pc, #256]	; 4034e0 <parse_serial_packet+0x898>
  4033e2:	47c8      	blx	r9
  4033e4:	4844      	ldr	r0, [pc, #272]	; (4034f8 <parse_serial_packet+0x8b0>)
  4033e6:	47c8      	blx	r9
  4033e8:	6830      	ldr	r0, [r6, #0]
  4033ea:	2100      	movs	r1, #0
  4033ec:	460a      	mov	r2, r1
  4033ee:	460b      	mov	r3, r1
  4033f0:	f8df c118 	ldr.w	ip, [pc, #280]	; 40350c <parse_serial_packet+0x8c4>
  4033f4:	47e0      	blx	ip
  4033f6:	e3d0      	b.n	403b9a <parse_serial_packet+0xf52>
  4033f8:	483f      	ldr	r0, [pc, #252]	; (4034f8 <parse_serial_packet+0x8b0>)
  4033fa:	4b39      	ldr	r3, [pc, #228]	; (4034e0 <parse_serial_packet+0x898>)
  4033fc:	4798      	blx	r3
  4033fe:	e3cc      	b.n	403b9a <parse_serial_packet+0xf52>
			break;
		}
		
		case CMD_GOT_SSID_PSK_RESP:
		{
			p = data + 1;
  403400:	f104 0a05 	add.w	sl, r4, #5
			len = strlen(p);
  403404:	4650      	mov	r0, sl
  403406:	4b3d      	ldr	r3, [pc, #244]	; (4034fc <parse_serial_packet+0x8b4>)
  403408:	4798      	blx	r3
  40340a:	4681      	mov	r9, r0
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Got wifi ssid: %s, psk: %s\r\n", p, p + len + 1));
  40340c:	6830      	ldr	r0, [r6, #0]
  40340e:	b308      	cbz	r0, 403454 <parse_serial_packet+0x80c>
  403410:	2100      	movs	r1, #0
  403412:	f04f 32ff 	mov.w	r2, #4294967295
  403416:	460b      	mov	r3, r1
  403418:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 403508 <parse_serial_packet+0x8c0>
  40341c:	47e0      	blx	ip
  40341e:	4b2c      	ldr	r3, [pc, #176]	; (4034d0 <parse_serial_packet+0x888>)
  403420:	4798      	blx	r3
  403422:	4683      	mov	fp, r0
  403424:	2000      	movs	r0, #0
  403426:	4b2b      	ldr	r3, [pc, #172]	; (4034d4 <parse_serial_packet+0x88c>)
  403428:	4798      	blx	r3
  40342a:	4602      	mov	r2, r0
  40342c:	482a      	ldr	r0, [pc, #168]	; (4034d8 <parse_serial_packet+0x890>)
  40342e:	4659      	mov	r1, fp
  403430:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 4034e0 <parse_serial_packet+0x898>
  403434:	47d8      	blx	fp
  403436:	fa1f f289 	uxth.w	r2, r9
  40343a:	3201      	adds	r2, #1
  40343c:	4830      	ldr	r0, [pc, #192]	; (403500 <parse_serial_packet+0x8b8>)
  40343e:	4651      	mov	r1, sl
  403440:	4452      	add	r2, sl
  403442:	47d8      	blx	fp
  403444:	6830      	ldr	r0, [r6, #0]
  403446:	2100      	movs	r1, #0
  403448:	460a      	mov	r2, r1
  40344a:	460b      	mov	r3, r1
  40344c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 40350c <parse_serial_packet+0x8c4>
  403450:	47e0      	blx	ip
  403452:	e3a2      	b.n	403b9a <parse_serial_packet+0xf52>
  403454:	fa1f f289 	uxth.w	r2, r9
  403458:	3201      	adds	r2, #1
  40345a:	4829      	ldr	r0, [pc, #164]	; (403500 <parse_serial_packet+0x8b8>)
  40345c:	4651      	mov	r1, sl
  40345e:	4452      	add	r2, sl
  403460:	4b1f      	ldr	r3, [pc, #124]	; (4034e0 <parse_serial_packet+0x898>)
  403462:	4798      	blx	r3
  403464:	e399      	b.n	403b9a <parse_serial_packet+0xf52>
			break;
		}
		
		case CMD_START_WIFI_CONNECT_RESP:
		{
			p = data + 1;
  403466:	f104 0a05 	add.w	sl, r4, #5
			len = strlen(p);
  40346a:	4650      	mov	r0, sl
  40346c:	4b23      	ldr	r3, [pc, #140]	; (4034fc <parse_serial_packet+0x8b4>)
  40346e:	4798      	blx	r3
  403470:	4681      	mov	r9, r0
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Start wifi connect ssid(%s), psk(%s).\r\n", p, p + len + 1));
  403472:	6830      	ldr	r0, [r6, #0]
  403474:	b308      	cbz	r0, 4034ba <parse_serial_packet+0x872>
  403476:	2100      	movs	r1, #0
  403478:	f04f 32ff 	mov.w	r2, #4294967295
  40347c:	460b      	mov	r3, r1
  40347e:	f8df c088 	ldr.w	ip, [pc, #136]	; 403508 <parse_serial_packet+0x8c0>
  403482:	47e0      	blx	ip
  403484:	4b12      	ldr	r3, [pc, #72]	; (4034d0 <parse_serial_packet+0x888>)
  403486:	4798      	blx	r3
  403488:	4683      	mov	fp, r0
  40348a:	2000      	movs	r0, #0
  40348c:	4b11      	ldr	r3, [pc, #68]	; (4034d4 <parse_serial_packet+0x88c>)
  40348e:	4798      	blx	r3
  403490:	4602      	mov	r2, r0
  403492:	4811      	ldr	r0, [pc, #68]	; (4034d8 <parse_serial_packet+0x890>)
  403494:	4659      	mov	r1, fp
  403496:	f8df b048 	ldr.w	fp, [pc, #72]	; 4034e0 <parse_serial_packet+0x898>
  40349a:	47d8      	blx	fp
  40349c:	fa1f f289 	uxth.w	r2, r9
  4034a0:	3201      	adds	r2, #1
  4034a2:	4818      	ldr	r0, [pc, #96]	; (403504 <parse_serial_packet+0x8bc>)
  4034a4:	4651      	mov	r1, sl
  4034a6:	4452      	add	r2, sl
  4034a8:	47d8      	blx	fp
  4034aa:	6830      	ldr	r0, [r6, #0]
  4034ac:	2100      	movs	r1, #0
  4034ae:	460a      	mov	r2, r1
  4034b0:	460b      	mov	r3, r1
  4034b2:	f8df c058 	ldr.w	ip, [pc, #88]	; 40350c <parse_serial_packet+0x8c4>
  4034b6:	47e0      	blx	ip
  4034b8:	e36f      	b.n	403b9a <parse_serial_packet+0xf52>
  4034ba:	fa1f f289 	uxth.w	r2, r9
  4034be:	3201      	adds	r2, #1
  4034c0:	4810      	ldr	r0, [pc, #64]	; (403504 <parse_serial_packet+0x8bc>)
  4034c2:	4651      	mov	r1, sl
  4034c4:	4452      	add	r2, sl
  4034c6:	4b06      	ldr	r3, [pc, #24]	; (4034e0 <parse_serial_packet+0x898>)
  4034c8:	4798      	blx	r3
  4034ca:	e366      	b.n	403b9a <parse_serial_packet+0xf52>
  4034cc:	2001a878 	.word	0x2001a878
  4034d0:	00401991 	.word	0x00401991
  4034d4:	004019d1 	.word	0x004019d1
  4034d8:	00407700 	.word	0x00407700
  4034dc:	0040792c 	.word	0x0040792c
  4034e0:	00404521 	.word	0x00404521
  4034e4:	00407944 	.word	0x00407944
  4034e8:	2001a060 	.word	0x2001a060
  4034ec:	00407958 	.word	0x00407958
  4034f0:	00407974 	.word	0x00407974
  4034f4:	00407984 	.word	0x00407984
  4034f8:	00407998 	.word	0x00407998
  4034fc:	004048f1 	.word	0x004048f1
  403500:	004079b0 	.word	0x004079b0
  403504:	004079d0 	.word	0x004079d0
  403508:	004014f9 	.word	0x004014f9
  40350c:	0040132d 	.word	0x0040132d
			break;
		}
		
		case CMD_WIFI_MODULE_READY:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wi-Fi Module Ready!\r\n"));
  403510:	6830      	ldr	r0, [r6, #0]
  403512:	b1e0      	cbz	r0, 40354e <parse_serial_packet+0x906>
  403514:	2100      	movs	r1, #0
  403516:	f04f 32ff 	mov.w	r2, #4294967295
  40351a:	460b      	mov	r3, r1
  40351c:	f8df c29c 	ldr.w	ip, [pc, #668]	; 4037bc <parse_serial_packet+0xb74>
  403520:	47e0      	blx	ip
  403522:	4b9a      	ldr	r3, [pc, #616]	; (40378c <parse_serial_packet+0xb44>)
  403524:	4798      	blx	r3
  403526:	4681      	mov	r9, r0
  403528:	2000      	movs	r0, #0
  40352a:	4b99      	ldr	r3, [pc, #612]	; (403790 <parse_serial_packet+0xb48>)
  40352c:	4798      	blx	r3
  40352e:	4602      	mov	r2, r0
  403530:	4898      	ldr	r0, [pc, #608]	; (403794 <parse_serial_packet+0xb4c>)
  403532:	4649      	mov	r1, r9
  403534:	f8df 9264 	ldr.w	r9, [pc, #612]	; 40379c <parse_serial_packet+0xb54>
  403538:	47c8      	blx	r9
  40353a:	4897      	ldr	r0, [pc, #604]	; (403798 <parse_serial_packet+0xb50>)
  40353c:	47c8      	blx	r9
  40353e:	6830      	ldr	r0, [r6, #0]
  403540:	2100      	movs	r1, #0
  403542:	460a      	mov	r2, r1
  403544:	460b      	mov	r3, r1
  403546:	f8df c278 	ldr.w	ip, [pc, #632]	; 4037c0 <parse_serial_packet+0xb78>
  40354a:	47e0      	blx	ip
  40354c:	e002      	b.n	403554 <parse_serial_packet+0x90c>
  40354e:	4892      	ldr	r0, [pc, #584]	; (403798 <parse_serial_packet+0xb50>)
  403550:	4b92      	ldr	r3, [pc, #584]	; (40379c <parse_serial_packet+0xb54>)
  403552:	4798      	blx	r3
			uart_ready = 1;
  403554:	2301      	movs	r3, #1
  403556:	4a92      	ldr	r2, [pc, #584]	; (4037a0 <parse_serial_packet+0xb58>)
  403558:	7013      	strb	r3, [r2, #0]
			led_blinking_mode = LED_MODE_OFF;
  40355a:	2102      	movs	r1, #2
  40355c:	4a91      	ldr	r2, [pc, #580]	; (4037a4 <parse_serial_packet+0xb5c>)
  40355e:	7011      	strb	r1, [r2, #0]
  403560:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403564:	637a      	str	r2, [r7, #52]	; 0x34
			LED_On(LED0);
			led_state = ON;
  403566:	4a90      	ldr	r2, [pc, #576]	; (4037a8 <parse_serial_packet+0xb60>)
  403568:	7013      	strb	r3, [r2, #0]
  40356a:	e316      	b.n	403b9a <parse_serial_packet+0xf52>
			break;
		}
		
		case CMD_REQ_APP_OTAU_RESP:
		{
			if(*data == CMD_SUCCESS) {
  40356c:	7923      	ldrb	r3, [r4, #4]
  40356e:	bb2b      	cbnz	r3, 4035bc <parse_serial_packet+0x974>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Cortus APP update OK.\r\n"));
  403570:	6830      	ldr	r0, [r6, #0]
  403572:	b1e0      	cbz	r0, 4035ae <parse_serial_packet+0x966>
  403574:	2100      	movs	r1, #0
  403576:	f04f 32ff 	mov.w	r2, #4294967295
  40357a:	460b      	mov	r3, r1
  40357c:	f8df c23c 	ldr.w	ip, [pc, #572]	; 4037bc <parse_serial_packet+0xb74>
  403580:	47e0      	blx	ip
  403582:	4b82      	ldr	r3, [pc, #520]	; (40378c <parse_serial_packet+0xb44>)
  403584:	4798      	blx	r3
  403586:	4681      	mov	r9, r0
  403588:	2000      	movs	r0, #0
  40358a:	4b81      	ldr	r3, [pc, #516]	; (403790 <parse_serial_packet+0xb48>)
  40358c:	4798      	blx	r3
  40358e:	4602      	mov	r2, r0
  403590:	4880      	ldr	r0, [pc, #512]	; (403794 <parse_serial_packet+0xb4c>)
  403592:	4649      	mov	r1, r9
  403594:	f8df 9204 	ldr.w	r9, [pc, #516]	; 40379c <parse_serial_packet+0xb54>
  403598:	47c8      	blx	r9
  40359a:	4884      	ldr	r0, [pc, #528]	; (4037ac <parse_serial_packet+0xb64>)
  40359c:	47c8      	blx	r9
  40359e:	6830      	ldr	r0, [r6, #0]
  4035a0:	2100      	movs	r1, #0
  4035a2:	460a      	mov	r2, r1
  4035a4:	460b      	mov	r3, r1
  4035a6:	f8df c218 	ldr.w	ip, [pc, #536]	; 4037c0 <parse_serial_packet+0xb78>
  4035aa:	47e0      	blx	ip
  4035ac:	e002      	b.n	4035b4 <parse_serial_packet+0x96c>
  4035ae:	487f      	ldr	r0, [pc, #508]	; (4037ac <parse_serial_packet+0xb64>)
  4035b0:	4b7a      	ldr	r3, [pc, #488]	; (40379c <parse_serial_packet+0xb54>)
  4035b2:	4798      	blx	r3
				led_blinking_mode = LED_MODE_OFF;
  4035b4:	2202      	movs	r2, #2
  4035b6:	4b7b      	ldr	r3, [pc, #492]	; (4037a4 <parse_serial_packet+0xb5c>)
  4035b8:	701a      	strb	r2, [r3, #0]
  4035ba:	e2ee      	b.n	403b9a <parse_serial_packet+0xf52>
			}
			else if(*data == CMD_INVALID_URL) {
  4035bc:	2b07      	cmp	r3, #7
  4035be:	d125      	bne.n	40360c <parse_serial_packet+0x9c4>
				led_blinking_mode = LED_MODE_ON;
  4035c0:	2203      	movs	r2, #3
  4035c2:	4b78      	ldr	r3, [pc, #480]	; (4037a4 <parse_serial_packet+0xb5c>)
  4035c4:	701a      	strb	r2, [r3, #0]
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU invalid url.\r\n"));
  4035c6:	6830      	ldr	r0, [r6, #0]
  4035c8:	b1e0      	cbz	r0, 403604 <parse_serial_packet+0x9bc>
  4035ca:	2100      	movs	r1, #0
  4035cc:	f04f 32ff 	mov.w	r2, #4294967295
  4035d0:	460b      	mov	r3, r1
  4035d2:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 4037bc <parse_serial_packet+0xb74>
  4035d6:	47e0      	blx	ip
  4035d8:	4b6c      	ldr	r3, [pc, #432]	; (40378c <parse_serial_packet+0xb44>)
  4035da:	4798      	blx	r3
  4035dc:	4681      	mov	r9, r0
  4035de:	2000      	movs	r0, #0
  4035e0:	4b6b      	ldr	r3, [pc, #428]	; (403790 <parse_serial_packet+0xb48>)
  4035e2:	4798      	blx	r3
  4035e4:	4602      	mov	r2, r0
  4035e6:	486b      	ldr	r0, [pc, #428]	; (403794 <parse_serial_packet+0xb4c>)
  4035e8:	4649      	mov	r1, r9
  4035ea:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 40379c <parse_serial_packet+0xb54>
  4035ee:	47c8      	blx	r9
  4035f0:	486f      	ldr	r0, [pc, #444]	; (4037b0 <parse_serial_packet+0xb68>)
  4035f2:	47c8      	blx	r9
  4035f4:	6830      	ldr	r0, [r6, #0]
  4035f6:	2100      	movs	r1, #0
  4035f8:	460a      	mov	r2, r1
  4035fa:	460b      	mov	r3, r1
  4035fc:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 4037c0 <parse_serial_packet+0xb78>
  403600:	47e0      	blx	ip
  403602:	e2ca      	b.n	403b9a <parse_serial_packet+0xf52>
  403604:	486a      	ldr	r0, [pc, #424]	; (4037b0 <parse_serial_packet+0xb68>)
  403606:	4b65      	ldr	r3, [pc, #404]	; (40379c <parse_serial_packet+0xb54>)
  403608:	4798      	blx	r3
  40360a:	e2c6      	b.n	403b9a <parse_serial_packet+0xf52>
			}
			else if(*data == CMD_OTAU_DL_FAILED) {
  40360c:	2b08      	cmp	r3, #8
  40360e:	d125      	bne.n	40365c <parse_serial_packet+0xa14>
				led_blinking_mode = LED_MODE_ON;
  403610:	2203      	movs	r2, #3
  403612:	4b64      	ldr	r3, [pc, #400]	; (4037a4 <parse_serial_packet+0xb5c>)
  403614:	701a      	strb	r2, [r3, #0]
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU download failed.\r\n"));
  403616:	6830      	ldr	r0, [r6, #0]
  403618:	b1e0      	cbz	r0, 403654 <parse_serial_packet+0xa0c>
  40361a:	2100      	movs	r1, #0
  40361c:	f04f 32ff 	mov.w	r2, #4294967295
  403620:	460b      	mov	r3, r1
  403622:	f8df c198 	ldr.w	ip, [pc, #408]	; 4037bc <parse_serial_packet+0xb74>
  403626:	47e0      	blx	ip
  403628:	4b58      	ldr	r3, [pc, #352]	; (40378c <parse_serial_packet+0xb44>)
  40362a:	4798      	blx	r3
  40362c:	4681      	mov	r9, r0
  40362e:	2000      	movs	r0, #0
  403630:	4b57      	ldr	r3, [pc, #348]	; (403790 <parse_serial_packet+0xb48>)
  403632:	4798      	blx	r3
  403634:	4602      	mov	r2, r0
  403636:	4857      	ldr	r0, [pc, #348]	; (403794 <parse_serial_packet+0xb4c>)
  403638:	4649      	mov	r1, r9
  40363a:	f8df 9160 	ldr.w	r9, [pc, #352]	; 40379c <parse_serial_packet+0xb54>
  40363e:	47c8      	blx	r9
  403640:	485c      	ldr	r0, [pc, #368]	; (4037b4 <parse_serial_packet+0xb6c>)
  403642:	47c8      	blx	r9
  403644:	6830      	ldr	r0, [r6, #0]
  403646:	2100      	movs	r1, #0
  403648:	460a      	mov	r2, r1
  40364a:	460b      	mov	r3, r1
  40364c:	f8df c170 	ldr.w	ip, [pc, #368]	; 4037c0 <parse_serial_packet+0xb78>
  403650:	47e0      	blx	ip
  403652:	e2a2      	b.n	403b9a <parse_serial_packet+0xf52>
  403654:	4857      	ldr	r0, [pc, #348]	; (4037b4 <parse_serial_packet+0xb6c>)
  403656:	4b51      	ldr	r3, [pc, #324]	; (40379c <parse_serial_packet+0xb54>)
  403658:	4798      	blx	r3
  40365a:	e29e      	b.n	403b9a <parse_serial_packet+0xf52>
			}
			else if(*data == CMD_OTAU_SW_FAILED) {
  40365c:	2b09      	cmp	r3, #9
  40365e:	f040 829c 	bne.w	403b9a <parse_serial_packet+0xf52>
				led_blinking_mode = LED_MODE_ON;
  403662:	2203      	movs	r2, #3
  403664:	4b4f      	ldr	r3, [pc, #316]	; (4037a4 <parse_serial_packet+0xb5c>)
  403666:	701a      	strb	r2, [r3, #0]
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: Switch OTAU image failed.\r\n"));
  403668:	6830      	ldr	r0, [r6, #0]
  40366a:	b1e0      	cbz	r0, 4036a6 <parse_serial_packet+0xa5e>
  40366c:	2100      	movs	r1, #0
  40366e:	f04f 32ff 	mov.w	r2, #4294967295
  403672:	460b      	mov	r3, r1
  403674:	f8df c144 	ldr.w	ip, [pc, #324]	; 4037bc <parse_serial_packet+0xb74>
  403678:	47e0      	blx	ip
  40367a:	4b44      	ldr	r3, [pc, #272]	; (40378c <parse_serial_packet+0xb44>)
  40367c:	4798      	blx	r3
  40367e:	4681      	mov	r9, r0
  403680:	2000      	movs	r0, #0
  403682:	4b43      	ldr	r3, [pc, #268]	; (403790 <parse_serial_packet+0xb48>)
  403684:	4798      	blx	r3
  403686:	4602      	mov	r2, r0
  403688:	4842      	ldr	r0, [pc, #264]	; (403794 <parse_serial_packet+0xb4c>)
  40368a:	4649      	mov	r1, r9
  40368c:	f8df 910c 	ldr.w	r9, [pc, #268]	; 40379c <parse_serial_packet+0xb54>
  403690:	47c8      	blx	r9
  403692:	4640      	mov	r0, r8
  403694:	47c8      	blx	r9
  403696:	6830      	ldr	r0, [r6, #0]
  403698:	2100      	movs	r1, #0
  40369a:	460a      	mov	r2, r1
  40369c:	460b      	mov	r3, r1
  40369e:	f8df c120 	ldr.w	ip, [pc, #288]	; 4037c0 <parse_serial_packet+0xb78>
  4036a2:	47e0      	blx	ip
  4036a4:	e279      	b.n	403b9a <parse_serial_packet+0xf52>
  4036a6:	4640      	mov	r0, r8
  4036a8:	4b3c      	ldr	r3, [pc, #240]	; (40379c <parse_serial_packet+0xb54>)
  4036aa:	4798      	blx	r3
  4036ac:	e275      	b.n	403b9a <parse_serial_packet+0xf52>
			break;
		}
		
		case CMD_REQ_WIFI_FW_OTAU_RESP:
		{
			if(*data == CMD_SUCCESS) {
  4036ae:	7923      	ldrb	r3, [r4, #4]
  4036b0:	bb13      	cbnz	r3, 4036f8 <parse_serial_packet+0xab0>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("WiFi firmware update OK.\r\n"));
  4036b2:	6830      	ldr	r0, [r6, #0]
  4036b4:	b1e0      	cbz	r0, 4036f0 <parse_serial_packet+0xaa8>
  4036b6:	2100      	movs	r1, #0
  4036b8:	f04f 32ff 	mov.w	r2, #4294967295
  4036bc:	460b      	mov	r3, r1
  4036be:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 4037bc <parse_serial_packet+0xb74>
  4036c2:	47e0      	blx	ip
  4036c4:	4b31      	ldr	r3, [pc, #196]	; (40378c <parse_serial_packet+0xb44>)
  4036c6:	4798      	blx	r3
  4036c8:	4681      	mov	r9, r0
  4036ca:	2000      	movs	r0, #0
  4036cc:	4b30      	ldr	r3, [pc, #192]	; (403790 <parse_serial_packet+0xb48>)
  4036ce:	4798      	blx	r3
  4036d0:	4602      	mov	r2, r0
  4036d2:	4830      	ldr	r0, [pc, #192]	; (403794 <parse_serial_packet+0xb4c>)
  4036d4:	4649      	mov	r1, r9
  4036d6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 40379c <parse_serial_packet+0xb54>
  4036da:	47c8      	blx	r9
  4036dc:	4836      	ldr	r0, [pc, #216]	; (4037b8 <parse_serial_packet+0xb70>)
  4036de:	47c8      	blx	r9
  4036e0:	6830      	ldr	r0, [r6, #0]
  4036e2:	2100      	movs	r1, #0
  4036e4:	460a      	mov	r2, r1
  4036e6:	460b      	mov	r3, r1
  4036e8:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 4037c0 <parse_serial_packet+0xb78>
  4036ec:	47e0      	blx	ip
  4036ee:	e254      	b.n	403b9a <parse_serial_packet+0xf52>
  4036f0:	4831      	ldr	r0, [pc, #196]	; (4037b8 <parse_serial_packet+0xb70>)
  4036f2:	4b2a      	ldr	r3, [pc, #168]	; (40379c <parse_serial_packet+0xb54>)
  4036f4:	4798      	blx	r3
  4036f6:	e250      	b.n	403b9a <parse_serial_packet+0xf52>
			}
			else if(*data == CMD_INVALID_URL) {
  4036f8:	2b07      	cmp	r3, #7
  4036fa:	d122      	bne.n	403742 <parse_serial_packet+0xafa>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU invalid url.\r\n"));
  4036fc:	6830      	ldr	r0, [r6, #0]
  4036fe:	b1e0      	cbz	r0, 40373a <parse_serial_packet+0xaf2>
  403700:	2100      	movs	r1, #0
  403702:	f04f 32ff 	mov.w	r2, #4294967295
  403706:	460b      	mov	r3, r1
  403708:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 4037bc <parse_serial_packet+0xb74>
  40370c:	47e0      	blx	ip
  40370e:	4b1f      	ldr	r3, [pc, #124]	; (40378c <parse_serial_packet+0xb44>)
  403710:	4798      	blx	r3
  403712:	4681      	mov	r9, r0
  403714:	2000      	movs	r0, #0
  403716:	4b1e      	ldr	r3, [pc, #120]	; (403790 <parse_serial_packet+0xb48>)
  403718:	4798      	blx	r3
  40371a:	4602      	mov	r2, r0
  40371c:	481d      	ldr	r0, [pc, #116]	; (403794 <parse_serial_packet+0xb4c>)
  40371e:	4649      	mov	r1, r9
  403720:	f8df 9078 	ldr.w	r9, [pc, #120]	; 40379c <parse_serial_packet+0xb54>
  403724:	47c8      	blx	r9
  403726:	4822      	ldr	r0, [pc, #136]	; (4037b0 <parse_serial_packet+0xb68>)
  403728:	47c8      	blx	r9
  40372a:	6830      	ldr	r0, [r6, #0]
  40372c:	2100      	movs	r1, #0
  40372e:	460a      	mov	r2, r1
  403730:	460b      	mov	r3, r1
  403732:	f8df c08c 	ldr.w	ip, [pc, #140]	; 4037c0 <parse_serial_packet+0xb78>
  403736:	47e0      	blx	ip
  403738:	e22f      	b.n	403b9a <parse_serial_packet+0xf52>
  40373a:	481d      	ldr	r0, [pc, #116]	; (4037b0 <parse_serial_packet+0xb68>)
  40373c:	4b17      	ldr	r3, [pc, #92]	; (40379c <parse_serial_packet+0xb54>)
  40373e:	4798      	blx	r3
  403740:	e22b      	b.n	403b9a <parse_serial_packet+0xf52>
			}
			else if(*data == CMD_OTAU_DL_FAILED) {
  403742:	2b08      	cmp	r3, #8
  403744:	d13e      	bne.n	4037c4 <parse_serial_packet+0xb7c>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU download failed.\r\n"));
  403746:	6830      	ldr	r0, [r6, #0]
  403748:	b1e0      	cbz	r0, 403784 <parse_serial_packet+0xb3c>
  40374a:	2100      	movs	r1, #0
  40374c:	f04f 32ff 	mov.w	r2, #4294967295
  403750:	460b      	mov	r3, r1
  403752:	f8df c068 	ldr.w	ip, [pc, #104]	; 4037bc <parse_serial_packet+0xb74>
  403756:	47e0      	blx	ip
  403758:	4b0c      	ldr	r3, [pc, #48]	; (40378c <parse_serial_packet+0xb44>)
  40375a:	4798      	blx	r3
  40375c:	4681      	mov	r9, r0
  40375e:	2000      	movs	r0, #0
  403760:	4b0b      	ldr	r3, [pc, #44]	; (403790 <parse_serial_packet+0xb48>)
  403762:	4798      	blx	r3
  403764:	4602      	mov	r2, r0
  403766:	480b      	ldr	r0, [pc, #44]	; (403794 <parse_serial_packet+0xb4c>)
  403768:	4649      	mov	r1, r9
  40376a:	f8df 9030 	ldr.w	r9, [pc, #48]	; 40379c <parse_serial_packet+0xb54>
  40376e:	47c8      	blx	r9
  403770:	4810      	ldr	r0, [pc, #64]	; (4037b4 <parse_serial_packet+0xb6c>)
  403772:	47c8      	blx	r9
  403774:	6830      	ldr	r0, [r6, #0]
  403776:	2100      	movs	r1, #0
  403778:	460a      	mov	r2, r1
  40377a:	460b      	mov	r3, r1
  40377c:	f8df c040 	ldr.w	ip, [pc, #64]	; 4037c0 <parse_serial_packet+0xb78>
  403780:	47e0      	blx	ip
  403782:	e20a      	b.n	403b9a <parse_serial_packet+0xf52>
  403784:	480b      	ldr	r0, [pc, #44]	; (4037b4 <parse_serial_packet+0xb6c>)
  403786:	4b05      	ldr	r3, [pc, #20]	; (40379c <parse_serial_packet+0xb54>)
  403788:	4798      	blx	r3
  40378a:	e206      	b.n	403b9a <parse_serial_packet+0xf52>
  40378c:	00401991 	.word	0x00401991
  403790:	004019d1 	.word	0x004019d1
  403794:	00407700 	.word	0x00407700
  403798:	004079f8 	.word	0x004079f8
  40379c:	00404521 	.word	0x00404521
  4037a0:	2001a04c 	.word	0x2001a04c
  4037a4:	20019ed8 	.word	0x20019ed8
  4037a8:	2001a060 	.word	0x2001a060
  4037ac:	00407a10 	.word	0x00407a10
  4037b0:	00407a28 	.word	0x00407a28
  4037b4:	00407a44 	.word	0x00407a44
  4037b8:	00407a88 	.word	0x00407a88
  4037bc:	004014f9 	.word	0x004014f9
  4037c0:	0040132d 	.word	0x0040132d
			}
			else if(*data == CMD_OTAU_SW_FAILED) {
  4037c4:	2b09      	cmp	r3, #9
  4037c6:	f040 81e8 	bne.w	403b9a <parse_serial_packet+0xf52>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: Switch OTAU image failed.\r\n"));
  4037ca:	6830      	ldr	r0, [r6, #0]
  4037cc:	b1e0      	cbz	r0, 403808 <parse_serial_packet+0xbc0>
  4037ce:	2100      	movs	r1, #0
  4037d0:	f04f 32ff 	mov.w	r2, #4294967295
  4037d4:	460b      	mov	r3, r1
  4037d6:	f8df c294 	ldr.w	ip, [pc, #660]	; 403a6c <parse_serial_packet+0xe24>
  4037da:	47e0      	blx	ip
  4037dc:	4b95      	ldr	r3, [pc, #596]	; (403a34 <parse_serial_packet+0xdec>)
  4037de:	4798      	blx	r3
  4037e0:	4681      	mov	r9, r0
  4037e2:	2000      	movs	r0, #0
  4037e4:	4b94      	ldr	r3, [pc, #592]	; (403a38 <parse_serial_packet+0xdf0>)
  4037e6:	4798      	blx	r3
  4037e8:	4602      	mov	r2, r0
  4037ea:	4894      	ldr	r0, [pc, #592]	; (403a3c <parse_serial_packet+0xdf4>)
  4037ec:	4649      	mov	r1, r9
  4037ee:	f8df 9250 	ldr.w	r9, [pc, #592]	; 403a40 <parse_serial_packet+0xdf8>
  4037f2:	47c8      	blx	r9
  4037f4:	4640      	mov	r0, r8
  4037f6:	47c8      	blx	r9
  4037f8:	6830      	ldr	r0, [r6, #0]
  4037fa:	2100      	movs	r1, #0
  4037fc:	460a      	mov	r2, r1
  4037fe:	460b      	mov	r3, r1
  403800:	f8df c26c 	ldr.w	ip, [pc, #620]	; 403a70 <parse_serial_packet+0xe28>
  403804:	47e0      	blx	ip
  403806:	e1c8      	b.n	403b9a <parse_serial_packet+0xf52>
  403808:	4640      	mov	r0, r8
  40380a:	4b8d      	ldr	r3, [pc, #564]	; (403a40 <parse_serial_packet+0xdf8>)
  40380c:	4798      	blx	r3
  40380e:	e1c4      	b.n	403b9a <parse_serial_packet+0xf52>
			break;
		}
		
		case CMD_REQ_SET_APP_OTAU_URL_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Set app otau url OK.\r\n"));
  403810:	6830      	ldr	r0, [r6, #0]
  403812:	b1e0      	cbz	r0, 40384e <parse_serial_packet+0xc06>
  403814:	2100      	movs	r1, #0
  403816:	f04f 32ff 	mov.w	r2, #4294967295
  40381a:	460b      	mov	r3, r1
  40381c:	f8df c24c 	ldr.w	ip, [pc, #588]	; 403a6c <parse_serial_packet+0xe24>
  403820:	47e0      	blx	ip
  403822:	4b84      	ldr	r3, [pc, #528]	; (403a34 <parse_serial_packet+0xdec>)
  403824:	4798      	blx	r3
  403826:	4681      	mov	r9, r0
  403828:	2000      	movs	r0, #0
  40382a:	4b83      	ldr	r3, [pc, #524]	; (403a38 <parse_serial_packet+0xdf0>)
  40382c:	4798      	blx	r3
  40382e:	4602      	mov	r2, r0
  403830:	4882      	ldr	r0, [pc, #520]	; (403a3c <parse_serial_packet+0xdf4>)
  403832:	4649      	mov	r1, r9
  403834:	f8df 9208 	ldr.w	r9, [pc, #520]	; 403a40 <parse_serial_packet+0xdf8>
  403838:	47c8      	blx	r9
  40383a:	4882      	ldr	r0, [pc, #520]	; (403a44 <parse_serial_packet+0xdfc>)
  40383c:	47c8      	blx	r9
  40383e:	6830      	ldr	r0, [r6, #0]
  403840:	2100      	movs	r1, #0
  403842:	460a      	mov	r2, r1
  403844:	460b      	mov	r3, r1
  403846:	f8df c228 	ldr.w	ip, [pc, #552]	; 403a70 <parse_serial_packet+0xe28>
  40384a:	47e0      	blx	ip
  40384c:	e002      	b.n	403854 <parse_serial_packet+0xc0c>
  40384e:	487d      	ldr	r0, [pc, #500]	; (403a44 <parse_serial_packet+0xdfc>)
  403850:	4b7b      	ldr	r3, [pc, #492]	; (403a40 <parse_serial_packet+0xdf8>)
  403852:	4798      	blx	r3
			config_wifi_fw_otau_url();
  403854:	4b7c      	ldr	r3, [pc, #496]	; (403a48 <parse_serial_packet+0xe00>)
  403856:	4798      	blx	r3
  403858:	e19f      	b.n	403b9a <parse_serial_packet+0xf52>
			break;
		}
		
		case CMD_REQ_SET_WIFI_FW_OTAU_URL_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Set wifi firmware otau url OK.\r\n"));
  40385a:	6830      	ldr	r0, [r6, #0]
  40385c:	b1e0      	cbz	r0, 403898 <parse_serial_packet+0xc50>
  40385e:	2100      	movs	r1, #0
  403860:	f04f 32ff 	mov.w	r2, #4294967295
  403864:	460b      	mov	r3, r1
  403866:	f8df c204 	ldr.w	ip, [pc, #516]	; 403a6c <parse_serial_packet+0xe24>
  40386a:	47e0      	blx	ip
  40386c:	4b71      	ldr	r3, [pc, #452]	; (403a34 <parse_serial_packet+0xdec>)
  40386e:	4798      	blx	r3
  403870:	4681      	mov	r9, r0
  403872:	2000      	movs	r0, #0
  403874:	4b70      	ldr	r3, [pc, #448]	; (403a38 <parse_serial_packet+0xdf0>)
  403876:	4798      	blx	r3
  403878:	4602      	mov	r2, r0
  40387a:	4870      	ldr	r0, [pc, #448]	; (403a3c <parse_serial_packet+0xdf4>)
  40387c:	4649      	mov	r1, r9
  40387e:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 403a40 <parse_serial_packet+0xdf8>
  403882:	47c8      	blx	r9
  403884:	4871      	ldr	r0, [pc, #452]	; (403a4c <parse_serial_packet+0xe04>)
  403886:	47c8      	blx	r9
  403888:	6830      	ldr	r0, [r6, #0]
  40388a:	2100      	movs	r1, #0
  40388c:	460a      	mov	r2, r1
  40388e:	460b      	mov	r3, r1
  403890:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 403a70 <parse_serial_packet+0xe28>
  403894:	47e0      	blx	ip
  403896:	e002      	b.n	40389e <parse_serial_packet+0xc56>
  403898:	486c      	ldr	r0, [pc, #432]	; (403a4c <parse_serial_packet+0xe04>)
  40389a:	4b69      	ldr	r3, [pc, #420]	; (403a40 <parse_serial_packet+0xdf8>)
  40389c:	4798      	blx	r3

/* Send connect command to start server connecting */
static void start_wifi_connect(void)
{
	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  40389e:	4b6c      	ldr	r3, [pc, #432]	; (403a50 <parse_serial_packet+0xe08>)
  4038a0:	9301      	str	r3, [sp, #4]
	static uint8_t pkt_buf[16];
	uint16_t pkt_len;
	
	pkt_len = form_serial_packet(CMD_CONNECT, NULL, 0, pkt_buf);
  4038a2:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 403a74 <parse_serial_packet+0xe2c>
  4038a6:	2021      	movs	r0, #33	; 0x21
  4038a8:	2100      	movs	r1, #0
  4038aa:	460a      	mov	r2, r1
  4038ac:	464b      	mov	r3, r9
  4038ae:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 403a78 <parse_serial_packet+0xe30>
  4038b2:	47e0      	blx	ip
	out_data->buf = pkt_buf;
  4038b4:	9b01      	ldr	r3, [sp, #4]
  4038b6:	f8c3 9000 	str.w	r9, [r3]
	out_data->len = pkt_len;
  4038ba:	a902      	add	r1, sp, #8
  4038bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
  4038c0:	6058      	str	r0, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &out_data, portMAX_DELAY);
  4038c2:	4b64      	ldr	r3, [pc, #400]	; (403a54 <parse_serial_packet+0xe0c>)
  4038c4:	6818      	ldr	r0, [r3, #0]
  4038c6:	f04f 32ff 	mov.w	r2, #4294967295
  4038ca:	2300      	movs	r3, #0
  4038cc:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 403a70 <parse_serial_packet+0xe28>
  4038d0:	47e0      	blx	ip
  4038d2:	e162      	b.n	403b9a <parse_serial_packet+0xf52>
			break;
		}
		
		case CMD_WIFI_CLOUD_READY:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wi-Fi connect to Cloud OK\r\n"));
  4038d4:	6830      	ldr	r0, [r6, #0]
  4038d6:	b1e0      	cbz	r0, 403912 <parse_serial_packet+0xcca>
  4038d8:	2100      	movs	r1, #0
  4038da:	f04f 32ff 	mov.w	r2, #4294967295
  4038de:	460b      	mov	r3, r1
  4038e0:	f8df c188 	ldr.w	ip, [pc, #392]	; 403a6c <parse_serial_packet+0xe24>
  4038e4:	47e0      	blx	ip
  4038e6:	4b53      	ldr	r3, [pc, #332]	; (403a34 <parse_serial_packet+0xdec>)
  4038e8:	4798      	blx	r3
  4038ea:	4681      	mov	r9, r0
  4038ec:	2000      	movs	r0, #0
  4038ee:	4b52      	ldr	r3, [pc, #328]	; (403a38 <parse_serial_packet+0xdf0>)
  4038f0:	4798      	blx	r3
  4038f2:	4602      	mov	r2, r0
  4038f4:	4851      	ldr	r0, [pc, #324]	; (403a3c <parse_serial_packet+0xdf4>)
  4038f6:	4649      	mov	r1, r9
  4038f8:	f8df 9144 	ldr.w	r9, [pc, #324]	; 403a40 <parse_serial_packet+0xdf8>
  4038fc:	47c8      	blx	r9
  4038fe:	4856      	ldr	r0, [pc, #344]	; (403a58 <parse_serial_packet+0xe10>)
  403900:	47c8      	blx	r9
  403902:	6830      	ldr	r0, [r6, #0]
  403904:	2100      	movs	r1, #0
  403906:	460a      	mov	r2, r1
  403908:	460b      	mov	r3, r1
  40390a:	f8df c164 	ldr.w	ip, [pc, #356]	; 403a70 <parse_serial_packet+0xe28>
  40390e:	47e0      	blx	ip
  403910:	e143      	b.n	403b9a <parse_serial_packet+0xf52>
  403912:	4851      	ldr	r0, [pc, #324]	; (403a58 <parse_serial_packet+0xe10>)
  403914:	4b4a      	ldr	r3, [pc, #296]	; (403a40 <parse_serial_packet+0xdf8>)
  403916:	4798      	blx	r3
  403918:	e13f      	b.n	403b9a <parse_serial_packet+0xf52>
			break;
		}
		case CUSTOMIZE_CMD_CHANGE_UART_CFG_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wi-Fi return get uart cfg OK\r\n"));
  40391a:	6830      	ldr	r0, [r6, #0]
  40391c:	b1e0      	cbz	r0, 403958 <parse_serial_packet+0xd10>
  40391e:	2100      	movs	r1, #0
  403920:	f04f 32ff 	mov.w	r2, #4294967295
  403924:	460b      	mov	r3, r1
  403926:	f8df c144 	ldr.w	ip, [pc, #324]	; 403a6c <parse_serial_packet+0xe24>
  40392a:	47e0      	blx	ip
  40392c:	4b41      	ldr	r3, [pc, #260]	; (403a34 <parse_serial_packet+0xdec>)
  40392e:	4798      	blx	r3
  403930:	4681      	mov	r9, r0
  403932:	2000      	movs	r0, #0
  403934:	4b40      	ldr	r3, [pc, #256]	; (403a38 <parse_serial_packet+0xdf0>)
  403936:	4798      	blx	r3
  403938:	4602      	mov	r2, r0
  40393a:	4840      	ldr	r0, [pc, #256]	; (403a3c <parse_serial_packet+0xdf4>)
  40393c:	4649      	mov	r1, r9
  40393e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 403a40 <parse_serial_packet+0xdf8>
  403942:	47c8      	blx	r9
  403944:	4845      	ldr	r0, [pc, #276]	; (403a5c <parse_serial_packet+0xe14>)
  403946:	47c8      	blx	r9
  403948:	6830      	ldr	r0, [r6, #0]
  40394a:	2100      	movs	r1, #0
  40394c:	460a      	mov	r2, r1
  40394e:	460b      	mov	r3, r1
  403950:	f8df c11c 	ldr.w	ip, [pc, #284]	; 403a70 <parse_serial_packet+0xe28>
  403954:	47e0      	blx	ip
  403956:	e120      	b.n	403b9a <parse_serial_packet+0xf52>
  403958:	4840      	ldr	r0, [pc, #256]	; (403a5c <parse_serial_packet+0xe14>)
  40395a:	4b39      	ldr	r3, [pc, #228]	; (403a40 <parse_serial_packet+0xdf8>)
  40395c:	4798      	blx	r3
  40395e:	e11c      	b.n	403b9a <parse_serial_packet+0xf52>
			}
			break;
		}

		case CMD_UDP_PACKET_JSONCONTROL_PACKET:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UDP packet jsoncontrol packet.\r\n"));
  403960:	6830      	ldr	r0, [r6, #0]
  403962:	b1e0      	cbz	r0, 40399e <parse_serial_packet+0xd56>
  403964:	2100      	movs	r1, #0
  403966:	f04f 32ff 	mov.w	r2, #4294967295
  40396a:	460b      	mov	r3, r1
  40396c:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 403a6c <parse_serial_packet+0xe24>
  403970:	47e0      	blx	ip
  403972:	4b30      	ldr	r3, [pc, #192]	; (403a34 <parse_serial_packet+0xdec>)
  403974:	4798      	blx	r3
  403976:	4681      	mov	r9, r0
  403978:	2000      	movs	r0, #0
  40397a:	4b2f      	ldr	r3, [pc, #188]	; (403a38 <parse_serial_packet+0xdf0>)
  40397c:	4798      	blx	r3
  40397e:	4602      	mov	r2, r0
  403980:	482e      	ldr	r0, [pc, #184]	; (403a3c <parse_serial_packet+0xdf4>)
  403982:	4649      	mov	r1, r9
  403984:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 403a40 <parse_serial_packet+0xdf8>
  403988:	47c8      	blx	r9
  40398a:	4835      	ldr	r0, [pc, #212]	; (403a60 <parse_serial_packet+0xe18>)
  40398c:	47c8      	blx	r9
  40398e:	6830      	ldr	r0, [r6, #0]
  403990:	2100      	movs	r1, #0
  403992:	460a      	mov	r2, r1
  403994:	460b      	mov	r3, r1
  403996:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 403a70 <parse_serial_packet+0xe28>
  40399a:	47e0      	blx	ip
  40399c:	e0fd      	b.n	403b9a <parse_serial_packet+0xf52>
  40399e:	4830      	ldr	r0, [pc, #192]	; (403a60 <parse_serial_packet+0xe18>)
  4039a0:	4b27      	ldr	r3, [pc, #156]	; (403a40 <parse_serial_packet+0xdf8>)
  4039a2:	4798      	blx	r3
  4039a4:	e0f9      	b.n	403b9a <parse_serial_packet+0xf52>
		break;
		
		case CMD_UDP_PACKET_UNKNOWN_PACKET:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UDP packet unknown packet.\r\n"));
  4039a6:	6830      	ldr	r0, [r6, #0]
  4039a8:	b1e0      	cbz	r0, 4039e4 <parse_serial_packet+0xd9c>
  4039aa:	2100      	movs	r1, #0
  4039ac:	f04f 32ff 	mov.w	r2, #4294967295
  4039b0:	460b      	mov	r3, r1
  4039b2:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 403a6c <parse_serial_packet+0xe24>
  4039b6:	47e0      	blx	ip
  4039b8:	4b1e      	ldr	r3, [pc, #120]	; (403a34 <parse_serial_packet+0xdec>)
  4039ba:	4798      	blx	r3
  4039bc:	4681      	mov	r9, r0
  4039be:	2000      	movs	r0, #0
  4039c0:	4b1d      	ldr	r3, [pc, #116]	; (403a38 <parse_serial_packet+0xdf0>)
  4039c2:	4798      	blx	r3
  4039c4:	4602      	mov	r2, r0
  4039c6:	481d      	ldr	r0, [pc, #116]	; (403a3c <parse_serial_packet+0xdf4>)
  4039c8:	4649      	mov	r1, r9
  4039ca:	f8df 9074 	ldr.w	r9, [pc, #116]	; 403a40 <parse_serial_packet+0xdf8>
  4039ce:	47c8      	blx	r9
  4039d0:	4824      	ldr	r0, [pc, #144]	; (403a64 <parse_serial_packet+0xe1c>)
  4039d2:	47c8      	blx	r9
  4039d4:	6830      	ldr	r0, [r6, #0]
  4039d6:	2100      	movs	r1, #0
  4039d8:	460a      	mov	r2, r1
  4039da:	460b      	mov	r3, r1
  4039dc:	f8df c090 	ldr.w	ip, [pc, #144]	; 403a70 <parse_serial_packet+0xe28>
  4039e0:	47e0      	blx	ip
  4039e2:	e0da      	b.n	403b9a <parse_serial_packet+0xf52>
  4039e4:	481f      	ldr	r0, [pc, #124]	; (403a64 <parse_serial_packet+0xe1c>)
  4039e6:	4b16      	ldr	r3, [pc, #88]	; (403a40 <parse_serial_packet+0xdf8>)
  4039e8:	4798      	blx	r3
  4039ea:	e0d6      	b.n	403b9a <parse_serial_packet+0xf52>
		break;
		
		case CMD_OUT_OF_MEMORY:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: out of memory.\r\n"));
  4039ec:	6830      	ldr	r0, [r6, #0]
  4039ee:	b1e0      	cbz	r0, 403a2a <parse_serial_packet+0xde2>
  4039f0:	2100      	movs	r1, #0
  4039f2:	f04f 32ff 	mov.w	r2, #4294967295
  4039f6:	460b      	mov	r3, r1
  4039f8:	f8df c070 	ldr.w	ip, [pc, #112]	; 403a6c <parse_serial_packet+0xe24>
  4039fc:	47e0      	blx	ip
  4039fe:	4b0d      	ldr	r3, [pc, #52]	; (403a34 <parse_serial_packet+0xdec>)
  403a00:	4798      	blx	r3
  403a02:	4681      	mov	r9, r0
  403a04:	2000      	movs	r0, #0
  403a06:	4b0c      	ldr	r3, [pc, #48]	; (403a38 <parse_serial_packet+0xdf0>)
  403a08:	4798      	blx	r3
  403a0a:	4602      	mov	r2, r0
  403a0c:	480b      	ldr	r0, [pc, #44]	; (403a3c <parse_serial_packet+0xdf4>)
  403a0e:	4649      	mov	r1, r9
  403a10:	f8df 902c 	ldr.w	r9, [pc, #44]	; 403a40 <parse_serial_packet+0xdf8>
  403a14:	47c8      	blx	r9
  403a16:	4814      	ldr	r0, [pc, #80]	; (403a68 <parse_serial_packet+0xe20>)
  403a18:	47c8      	blx	r9
  403a1a:	6830      	ldr	r0, [r6, #0]
  403a1c:	2100      	movs	r1, #0
  403a1e:	460a      	mov	r2, r1
  403a20:	460b      	mov	r3, r1
  403a22:	f8df c04c 	ldr.w	ip, [pc, #76]	; 403a70 <parse_serial_packet+0xe28>
  403a26:	47e0      	blx	ip
  403a28:	e0b7      	b.n	403b9a <parse_serial_packet+0xf52>
  403a2a:	480f      	ldr	r0, [pc, #60]	; (403a68 <parse_serial_packet+0xe20>)
  403a2c:	4b04      	ldr	r3, [pc, #16]	; (403a40 <parse_serial_packet+0xdf8>)
  403a2e:	4798      	blx	r3
  403a30:	e0b3      	b.n	403b9a <parse_serial_packet+0xf52>
  403a32:	bf00      	nop
  403a34:	00401991 	.word	0x00401991
  403a38:	004019d1 	.word	0x004019d1
  403a3c:	00407700 	.word	0x00407700
  403a40:	00404521 	.word	0x00404521
  403a44:	00407aa4 	.word	0x00407aa4
  403a48:	00402bfd 	.word	0x00402bfd
  403a4c:	00407abc 	.word	0x00407abc
  403a50:	2001a01c 	.word	0x2001a01c
  403a54:	2001a884 	.word	0x2001a884
  403a58:	00407ae0 	.word	0x00407ae0
  403a5c:	00407afc 	.word	0x00407afc
  403a60:	00407b1c 	.word	0x00407b1c
  403a64:	00407b40 	.word	0x00407b40
  403a68:	00407b60 	.word	0x00407b60
  403a6c:	004014f9 	.word	0x004014f9
  403a70:	0040132d 	.word	0x0040132d
  403a74:	20019fec 	.word	0x20019fec
  403a78:	004027f1 	.word	0x004027f1
		break;
		
		case CUSTOMIZE_CMD_FACTORY_TEST_RESP:
			if(*data == 0x0) {
  403a7c:	7923      	ldrb	r3, [r4, #4]
  403a7e:	bb13      	cbnz	r3, 403ac6 <parse_serial_packet+0xe7e>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("AP can Found.\r\n"));
  403a80:	6830      	ldr	r0, [r6, #0]
  403a82:	b1e0      	cbz	r0, 403abe <parse_serial_packet+0xe76>
  403a84:	2100      	movs	r1, #0
  403a86:	f04f 32ff 	mov.w	r2, #4294967295
  403a8a:	460b      	mov	r3, r1
  403a8c:	f8df c144 	ldr.w	ip, [pc, #324]	; 403bd4 <parse_serial_packet+0xf8c>
  403a90:	47e0      	blx	ip
  403a92:	4b48      	ldr	r3, [pc, #288]	; (403bb4 <parse_serial_packet+0xf6c>)
  403a94:	4798      	blx	r3
  403a96:	4681      	mov	r9, r0
  403a98:	2000      	movs	r0, #0
  403a9a:	4b47      	ldr	r3, [pc, #284]	; (403bb8 <parse_serial_packet+0xf70>)
  403a9c:	4798      	blx	r3
  403a9e:	4602      	mov	r2, r0
  403aa0:	4846      	ldr	r0, [pc, #280]	; (403bbc <parse_serial_packet+0xf74>)
  403aa2:	4649      	mov	r1, r9
  403aa4:	f8df 911c 	ldr.w	r9, [pc, #284]	; 403bc4 <parse_serial_packet+0xf7c>
  403aa8:	47c8      	blx	r9
  403aaa:	4845      	ldr	r0, [pc, #276]	; (403bc0 <parse_serial_packet+0xf78>)
  403aac:	47c8      	blx	r9
  403aae:	6830      	ldr	r0, [r6, #0]
  403ab0:	2100      	movs	r1, #0
  403ab2:	460a      	mov	r2, r1
  403ab4:	460b      	mov	r3, r1
  403ab6:	f8df c120 	ldr.w	ip, [pc, #288]	; 403bd8 <parse_serial_packet+0xf90>
  403aba:	47e0      	blx	ip
  403abc:	e06d      	b.n	403b9a <parse_serial_packet+0xf52>
  403abe:	4840      	ldr	r0, [pc, #256]	; (403bc0 <parse_serial_packet+0xf78>)
  403ac0:	4b40      	ldr	r3, [pc, #256]	; (403bc4 <parse_serial_packet+0xf7c>)
  403ac2:	4798      	blx	r3
  403ac4:	e069      	b.n	403b9a <parse_serial_packet+0xf52>
			}
			else {
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("AP not Found.\r\n"));
  403ac6:	6830      	ldr	r0, [r6, #0]
  403ac8:	b1e0      	cbz	r0, 403b04 <parse_serial_packet+0xebc>
  403aca:	2100      	movs	r1, #0
  403acc:	f04f 32ff 	mov.w	r2, #4294967295
  403ad0:	460b      	mov	r3, r1
  403ad2:	f8df c100 	ldr.w	ip, [pc, #256]	; 403bd4 <parse_serial_packet+0xf8c>
  403ad6:	47e0      	blx	ip
  403ad8:	4b36      	ldr	r3, [pc, #216]	; (403bb4 <parse_serial_packet+0xf6c>)
  403ada:	4798      	blx	r3
  403adc:	4681      	mov	r9, r0
  403ade:	2000      	movs	r0, #0
  403ae0:	4b35      	ldr	r3, [pc, #212]	; (403bb8 <parse_serial_packet+0xf70>)
  403ae2:	4798      	blx	r3
  403ae4:	4602      	mov	r2, r0
  403ae6:	4835      	ldr	r0, [pc, #212]	; (403bbc <parse_serial_packet+0xf74>)
  403ae8:	4649      	mov	r1, r9
  403aea:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 403bc4 <parse_serial_packet+0xf7c>
  403aee:	47c8      	blx	r9
  403af0:	4835      	ldr	r0, [pc, #212]	; (403bc8 <parse_serial_packet+0xf80>)
  403af2:	47c8      	blx	r9
  403af4:	6830      	ldr	r0, [r6, #0]
  403af6:	2100      	movs	r1, #0
  403af8:	460a      	mov	r2, r1
  403afa:	460b      	mov	r3, r1
  403afc:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 403bd8 <parse_serial_packet+0xf90>
  403b00:	47e0      	blx	ip
  403b02:	e04a      	b.n	403b9a <parse_serial_packet+0xf52>
  403b04:	4830      	ldr	r0, [pc, #192]	; (403bc8 <parse_serial_packet+0xf80>)
  403b06:	4b2f      	ldr	r3, [pc, #188]	; (403bc4 <parse_serial_packet+0xf7c>)
  403b08:	4798      	blx	r3
  403b0a:	e046      	b.n	403b9a <parse_serial_packet+0xf52>
			}
		break;
		
		case CMD_UART_TIMEOUT:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: UART timeout.\r\n"));
  403b0c:	6830      	ldr	r0, [r6, #0]
  403b0e:	b1e0      	cbz	r0, 403b4a <parse_serial_packet+0xf02>
  403b10:	2100      	movs	r1, #0
  403b12:	f04f 32ff 	mov.w	r2, #4294967295
  403b16:	460b      	mov	r3, r1
  403b18:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 403bd4 <parse_serial_packet+0xf8c>
  403b1c:	47e0      	blx	ip
  403b1e:	4b25      	ldr	r3, [pc, #148]	; (403bb4 <parse_serial_packet+0xf6c>)
  403b20:	4798      	blx	r3
  403b22:	4681      	mov	r9, r0
  403b24:	2000      	movs	r0, #0
  403b26:	4b24      	ldr	r3, [pc, #144]	; (403bb8 <parse_serial_packet+0xf70>)
  403b28:	4798      	blx	r3
  403b2a:	4602      	mov	r2, r0
  403b2c:	4823      	ldr	r0, [pc, #140]	; (403bbc <parse_serial_packet+0xf74>)
  403b2e:	4649      	mov	r1, r9
  403b30:	f8df 9090 	ldr.w	r9, [pc, #144]	; 403bc4 <parse_serial_packet+0xf7c>
  403b34:	47c8      	blx	r9
  403b36:	4825      	ldr	r0, [pc, #148]	; (403bcc <parse_serial_packet+0xf84>)
  403b38:	47c8      	blx	r9
  403b3a:	6830      	ldr	r0, [r6, #0]
  403b3c:	2100      	movs	r1, #0
  403b3e:	460a      	mov	r2, r1
  403b40:	460b      	mov	r3, r1
  403b42:	f8df c094 	ldr.w	ip, [pc, #148]	; 403bd8 <parse_serial_packet+0xf90>
  403b46:	47e0      	blx	ip
  403b48:	e027      	b.n	403b9a <parse_serial_packet+0xf52>
  403b4a:	4820      	ldr	r0, [pc, #128]	; (403bcc <parse_serial_packet+0xf84>)
  403b4c:	4b1d      	ldr	r3, [pc, #116]	; (403bc4 <parse_serial_packet+0xf7c>)
  403b4e:	4798      	blx	r3
  403b50:	e023      	b.n	403b9a <parse_serial_packet+0xf52>
		break;
		
		default:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Unsupported command(%d).\r\n", cmdid));
  403b52:	6830      	ldr	r0, [r6, #0]
  403b54:	b1e8      	cbz	r0, 403b92 <parse_serial_packet+0xf4a>
  403b56:	2100      	movs	r1, #0
  403b58:	f04f 32ff 	mov.w	r2, #4294967295
  403b5c:	460b      	mov	r3, r1
  403b5e:	f8df c074 	ldr.w	ip, [pc, #116]	; 403bd4 <parse_serial_packet+0xf8c>
  403b62:	47e0      	blx	ip
  403b64:	4b13      	ldr	r3, [pc, #76]	; (403bb4 <parse_serial_packet+0xf6c>)
  403b66:	4798      	blx	r3
  403b68:	4682      	mov	sl, r0
  403b6a:	2000      	movs	r0, #0
  403b6c:	4b12      	ldr	r3, [pc, #72]	; (403bb8 <parse_serial_packet+0xf70>)
  403b6e:	4798      	blx	r3
  403b70:	4602      	mov	r2, r0
  403b72:	4812      	ldr	r0, [pc, #72]	; (403bbc <parse_serial_packet+0xf74>)
  403b74:	4651      	mov	r1, sl
  403b76:	f8df a04c 	ldr.w	sl, [pc, #76]	; 403bc4 <parse_serial_packet+0xf7c>
  403b7a:	47d0      	blx	sl
  403b7c:	4814      	ldr	r0, [pc, #80]	; (403bd0 <parse_serial_packet+0xf88>)
  403b7e:	4649      	mov	r1, r9
  403b80:	47d0      	blx	sl
  403b82:	6830      	ldr	r0, [r6, #0]
  403b84:	2100      	movs	r1, #0
  403b86:	460a      	mov	r2, r1
  403b88:	460b      	mov	r3, r1
  403b8a:	f8df c04c 	ldr.w	ip, [pc, #76]	; 403bd8 <parse_serial_packet+0xf90>
  403b8e:	47e0      	blx	ip
  403b90:	e003      	b.n	403b9a <parse_serial_packet+0xf52>
  403b92:	480f      	ldr	r0, [pc, #60]	; (403bd0 <parse_serial_packet+0xf88>)
  403b94:	4649      	mov	r1, r9
  403b96:	4b0b      	ldr	r3, [pc, #44]	; (403bc4 <parse_serial_packet+0xf7c>)
  403b98:	4798      	blx	r3
		cmdid = *(p + 3);
		data = p + 4;
		len = *(p + 1 + 1) - 1;
		execute_serial_cmd(cmdid, data, len);
		//in case two packet coming together
		len = *(p + 1 + 1) + 4;
  403b9a:	78a3      	ldrb	r3, [r4, #2]
  403b9c:	3304      	adds	r3, #4
  403b9e:	b2db      	uxtb	r3, r3
		p = p + len;
  403ba0:	441c      	add	r4, r3
		buflen = buflen - len;
  403ba2:	1aed      	subs	r5, r5, r3
  403ba4:	b2ed      	uxtb	r5, r5
	uint8_t len, crc, cmdid;
	
	byte2hexstrstr(buf, buflen, serial_buf_test, 256);
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial IN(%d): %s\r\n", buflen, serial_buf_test));
	
	while(buflen > 3) {
  403ba6:	2d03      	cmp	r5, #3
  403ba8:	f63f a888 	bhi.w	402cbc <parse_serial_packet+0x74>
		len = *(p + 1 + 1) + 4;
		p = p + len;
		buflen = buflen - len;
	}
	return;
}
  403bac:	b003      	add	sp, #12
  403bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bb2:	bf00      	nop
  403bb4:	00401991 	.word	0x00401991
  403bb8:	004019d1 	.word	0x004019d1
  403bbc:	00407700 	.word	0x00407700
  403bc0:	00407b78 	.word	0x00407b78
  403bc4:	00404521 	.word	0x00404521
  403bc8:	00407b88 	.word	0x00407b88
  403bcc:	00407b98 	.word	0x00407b98
  403bd0:	00407bb0 	.word	0x00407bb0
  403bd4:	004014f9 	.word	0x004014f9
  403bd8:	0040132d 	.word	0x0040132d

00403bdc <wifi_serial_in>:

void wifi_serial_in(void *parameter)
{
  403bdc:	b570      	push	{r4, r5, r6, lr}
  403bde:	b082      	sub	sp, #8
	serial_in_pk_t *in_data = NULL;
  403be0:	2300      	movs	r3, #0
  403be2:	9301      	str	r3, [sp, #4]
	wifi_module_reset();
  403be4:	4b18      	ldr	r3, [pc, #96]	; (403c48 <wifi_serial_in+0x6c>)
  403be6:	4798      	blx	r3
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("serial_in task started\r\n"));
  403be8:	4b18      	ldr	r3, [pc, #96]	; (403c4c <wifi_serial_in+0x70>)
  403bea:	6818      	ldr	r0, [r3, #0]
  403bec:	b1d0      	cbz	r0, 403c24 <wifi_serial_in+0x48>
  403bee:	2100      	movs	r1, #0
  403bf0:	f04f 32ff 	mov.w	r2, #4294967295
  403bf4:	460b      	mov	r3, r1
  403bf6:	4c16      	ldr	r4, [pc, #88]	; (403c50 <wifi_serial_in+0x74>)
  403bf8:	47a0      	blx	r4
  403bfa:	4b16      	ldr	r3, [pc, #88]	; (403c54 <wifi_serial_in+0x78>)
  403bfc:	4798      	blx	r3
  403bfe:	4604      	mov	r4, r0
  403c00:	2000      	movs	r0, #0
  403c02:	4b15      	ldr	r3, [pc, #84]	; (403c58 <wifi_serial_in+0x7c>)
  403c04:	4798      	blx	r3
  403c06:	4602      	mov	r2, r0
  403c08:	4814      	ldr	r0, [pc, #80]	; (403c5c <wifi_serial_in+0x80>)
  403c0a:	4621      	mov	r1, r4
  403c0c:	4c14      	ldr	r4, [pc, #80]	; (403c60 <wifi_serial_in+0x84>)
  403c0e:	47a0      	blx	r4
  403c10:	4814      	ldr	r0, [pc, #80]	; (403c64 <wifi_serial_in+0x88>)
  403c12:	47a0      	blx	r4
  403c14:	4b0d      	ldr	r3, [pc, #52]	; (403c4c <wifi_serial_in+0x70>)
  403c16:	6818      	ldr	r0, [r3, #0]
  403c18:	2100      	movs	r1, #0
  403c1a:	460a      	mov	r2, r1
  403c1c:	460b      	mov	r3, r1
  403c1e:	4c12      	ldr	r4, [pc, #72]	; (403c68 <wifi_serial_in+0x8c>)
  403c20:	47a0      	blx	r4
  403c22:	e002      	b.n	403c2a <wifi_serial_in+0x4e>
  403c24:	480f      	ldr	r0, [pc, #60]	; (403c64 <wifi_serial_in+0x88>)
  403c26:	4b0e      	ldr	r3, [pc, #56]	; (403c60 <wifi_serial_in+0x84>)
  403c28:	4798      	blx	r3
	for(;;) {
		IoT_xQueueReceive(serial_in_queue, &in_data, portMAX_DELAY);
  403c2a:	4e10      	ldr	r6, [pc, #64]	; (403c6c <wifi_serial_in+0x90>)
  403c2c:	4d08      	ldr	r5, [pc, #32]	; (403c50 <wifi_serial_in+0x74>)
		parse_serial_packet(in_data->buf, in_data->len);
  403c2e:	4c10      	ldr	r4, [pc, #64]	; (403c70 <wifi_serial_in+0x94>)
{
	serial_in_pk_t *in_data = NULL;
	wifi_module_reset();
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("serial_in task started\r\n"));
	for(;;) {
		IoT_xQueueReceive(serial_in_queue, &in_data, portMAX_DELAY);
  403c30:	6830      	ldr	r0, [r6, #0]
  403c32:	a901      	add	r1, sp, #4
  403c34:	f04f 32ff 	mov.w	r2, #4294967295
  403c38:	2300      	movs	r3, #0
  403c3a:	47a8      	blx	r5
		parse_serial_packet(in_data->buf, in_data->len);
  403c3c:	9b01      	ldr	r3, [sp, #4]
  403c3e:	4618      	mov	r0, r3
  403c40:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
  403c44:	47a0      	blx	r4
	}
  403c46:	e7f3      	b.n	403c30 <wifi_serial_in+0x54>
  403c48:	00402a3d 	.word	0x00402a3d
  403c4c:	2001a88c 	.word	0x2001a88c
  403c50:	004014f9 	.word	0x004014f9
  403c54:	00401991 	.word	0x00401991
  403c58:	004019d1 	.word	0x004019d1
  403c5c:	00407700 	.word	0x00407700
  403c60:	00404521 	.word	0x00404521
  403c64:	00407bcc 	.word	0x00407bcc
  403c68:	0040132d 	.word	0x0040132d
  403c6c:	20019ecc 	.word	0x20019ecc
  403c70:	00402c49 	.word	0x00402c49

00403c74 <wifi_serial_out>:
		xTimerStop(xConfigTimer, 0);
	}
}

void wifi_serial_out(void *parameter)
{
  403c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403c78:	b0a8      	sub	sp, #160	; 0xa0
	(void) parameter;
	Pdc *p_pdc = NULL;
	pdc_packet_t packet;
	serial_out_pk_t *out_data = NULL;
  403c7a:	2300      	movs	r3, #0
  403c7c:	9325      	str	r3, [sp, #148]	; 0x94
	//uint32_t pdc_status;
	//uint8_t out_status;
	
	xConfigTimer = xTimerCreate("xConfigTimer", 1000 , pdTRUE, ( void * ) 0, vConfigModeCallback);
  403c7e:	4a8d      	ldr	r2, [pc, #564]	; (403eb4 <wifi_serial_out+0x240>)
  403c80:	9200      	str	r2, [sp, #0]
  403c82:	488d      	ldr	r0, [pc, #564]	; (403eb8 <wifi_serial_out+0x244>)
  403c84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403c88:	2201      	movs	r2, #1
  403c8a:	4c8c      	ldr	r4, [pc, #560]	; (403ebc <wifi_serial_out+0x248>)
  403c8c:	47a0      	blx	r4
  403c8e:	4b8c      	ldr	r3, [pc, #560]	; (403ec0 <wifi_serial_out+0x24c>)
  403c90:	6018      	str	r0, [r3, #0]
	if(xConfigTimer == NULL ){
  403c92:	bb00      	cbnz	r0, 403cd6 <wifi_serial_out+0x62>
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_SERIOUS, ("xConfigTimer create failed.\r\n"));
  403c94:	4b8b      	ldr	r3, [pc, #556]	; (403ec4 <wifi_serial_out+0x250>)
  403c96:	6818      	ldr	r0, [r3, #0]
  403c98:	b1d0      	cbz	r0, 403cd0 <wifi_serial_out+0x5c>
  403c9a:	2100      	movs	r1, #0
  403c9c:	f04f 32ff 	mov.w	r2, #4294967295
  403ca0:	460b      	mov	r3, r1
  403ca2:	4c89      	ldr	r4, [pc, #548]	; (403ec8 <wifi_serial_out+0x254>)
  403ca4:	47a0      	blx	r4
  403ca6:	4b89      	ldr	r3, [pc, #548]	; (403ecc <wifi_serial_out+0x258>)
  403ca8:	4798      	blx	r3
  403caa:	4604      	mov	r4, r0
  403cac:	2000      	movs	r0, #0
  403cae:	4b88      	ldr	r3, [pc, #544]	; (403ed0 <wifi_serial_out+0x25c>)
  403cb0:	4798      	blx	r3
  403cb2:	4602      	mov	r2, r0
  403cb4:	4887      	ldr	r0, [pc, #540]	; (403ed4 <wifi_serial_out+0x260>)
  403cb6:	4621      	mov	r1, r4
  403cb8:	4c87      	ldr	r4, [pc, #540]	; (403ed8 <wifi_serial_out+0x264>)
  403cba:	47a0      	blx	r4
  403cbc:	4887      	ldr	r0, [pc, #540]	; (403edc <wifi_serial_out+0x268>)
  403cbe:	47a0      	blx	r4
  403cc0:	4b80      	ldr	r3, [pc, #512]	; (403ec4 <wifi_serial_out+0x250>)
  403cc2:	6818      	ldr	r0, [r3, #0]
  403cc4:	2100      	movs	r1, #0
  403cc6:	460a      	mov	r2, r1
  403cc8:	460b      	mov	r3, r1
  403cca:	4c85      	ldr	r4, [pc, #532]	; (403ee0 <wifi_serial_out+0x26c>)
  403ccc:	47a0      	blx	r4
  403cce:	e002      	b.n	403cd6 <wifi_serial_out+0x62>
  403cd0:	4882      	ldr	r0, [pc, #520]	; (403edc <wifi_serial_out+0x268>)
  403cd2:	4b81      	ldr	r3, [pc, #516]	; (403ed8 <wifi_serial_out+0x264>)
  403cd4:	4798      	blx	r3
	}
	
	xLedModeTimer = xTimerCreate("xLedTimer", 250 , pdTRUE, ( void * ) 0, vLedModeCallback);
  403cd6:	4b83      	ldr	r3, [pc, #524]	; (403ee4 <wifi_serial_out+0x270>)
  403cd8:	9300      	str	r3, [sp, #0]
  403cda:	4883      	ldr	r0, [pc, #524]	; (403ee8 <wifi_serial_out+0x274>)
  403cdc:	21fa      	movs	r1, #250	; 0xfa
  403cde:	2201      	movs	r2, #1
  403ce0:	2300      	movs	r3, #0
  403ce2:	4c76      	ldr	r4, [pc, #472]	; (403ebc <wifi_serial_out+0x248>)
  403ce4:	47a0      	blx	r4
  403ce6:	4604      	mov	r4, r0
  403ce8:	4b80      	ldr	r3, [pc, #512]	; (403eec <wifi_serial_out+0x278>)
  403cea:	6018      	str	r0, [r3, #0]
	if(xLedModeTimer != NULL ){
  403cec:	b148      	cbz	r0, 403d02 <wifi_serial_out+0x8e>
		xTimerStart(xLedModeTimer, 0 );
  403cee:	4b77      	ldr	r3, [pc, #476]	; (403ecc <wifi_serial_out+0x258>)
  403cf0:	4798      	blx	r3
  403cf2:	4602      	mov	r2, r0
  403cf4:	2300      	movs	r3, #0
  403cf6:	9300      	str	r3, [sp, #0]
  403cf8:	4620      	mov	r0, r4
  403cfa:	4619      	mov	r1, r3
  403cfc:	4c7c      	ldr	r4, [pc, #496]	; (403ef0 <wifi_serial_out+0x27c>)
  403cfe:	47a0      	blx	r4
  403d00:	e020      	b.n	403d44 <wifi_serial_out+0xd0>
		// The timer was not created.
	}
	else{
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_SERIOUS, ("xLedModeTimer create failed.\r\n"));
  403d02:	4b70      	ldr	r3, [pc, #448]	; (403ec4 <wifi_serial_out+0x250>)
  403d04:	6818      	ldr	r0, [r3, #0]
  403d06:	b1d0      	cbz	r0, 403d3e <wifi_serial_out+0xca>
  403d08:	2100      	movs	r1, #0
  403d0a:	f04f 32ff 	mov.w	r2, #4294967295
  403d0e:	460b      	mov	r3, r1
  403d10:	4c6d      	ldr	r4, [pc, #436]	; (403ec8 <wifi_serial_out+0x254>)
  403d12:	47a0      	blx	r4
  403d14:	4b6d      	ldr	r3, [pc, #436]	; (403ecc <wifi_serial_out+0x258>)
  403d16:	4798      	blx	r3
  403d18:	4604      	mov	r4, r0
  403d1a:	2000      	movs	r0, #0
  403d1c:	4b6c      	ldr	r3, [pc, #432]	; (403ed0 <wifi_serial_out+0x25c>)
  403d1e:	4798      	blx	r3
  403d20:	4602      	mov	r2, r0
  403d22:	486c      	ldr	r0, [pc, #432]	; (403ed4 <wifi_serial_out+0x260>)
  403d24:	4621      	mov	r1, r4
  403d26:	4c6c      	ldr	r4, [pc, #432]	; (403ed8 <wifi_serial_out+0x264>)
  403d28:	47a0      	blx	r4
  403d2a:	4872      	ldr	r0, [pc, #456]	; (403ef4 <wifi_serial_out+0x280>)
  403d2c:	47a0      	blx	r4
  403d2e:	4b65      	ldr	r3, [pc, #404]	; (403ec4 <wifi_serial_out+0x250>)
  403d30:	6818      	ldr	r0, [r3, #0]
  403d32:	2100      	movs	r1, #0
  403d34:	460a      	mov	r2, r1
  403d36:	460b      	mov	r3, r1
  403d38:	4c69      	ldr	r4, [pc, #420]	; (403ee0 <wifi_serial_out+0x26c>)
  403d3a:	47a0      	blx	r4
  403d3c:	e002      	b.n	403d44 <wifi_serial_out+0xd0>
  403d3e:	486d      	ldr	r0, [pc, #436]	; (403ef4 <wifi_serial_out+0x280>)
  403d40:	4b65      	ldr	r3, [pc, #404]	; (403ed8 <wifi_serial_out+0x264>)
  403d42:	4798      	blx	r3
	}
		
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("serial_out task started\r\n"));
  403d44:	4b5f      	ldr	r3, [pc, #380]	; (403ec4 <wifi_serial_out+0x250>)
  403d46:	6818      	ldr	r0, [r3, #0]
  403d48:	b1d0      	cbz	r0, 403d80 <wifi_serial_out+0x10c>
  403d4a:	2100      	movs	r1, #0
  403d4c:	f04f 32ff 	mov.w	r2, #4294967295
  403d50:	460b      	mov	r3, r1
  403d52:	4c5d      	ldr	r4, [pc, #372]	; (403ec8 <wifi_serial_out+0x254>)
  403d54:	47a0      	blx	r4
  403d56:	4b5d      	ldr	r3, [pc, #372]	; (403ecc <wifi_serial_out+0x258>)
  403d58:	4798      	blx	r3
  403d5a:	4604      	mov	r4, r0
  403d5c:	2000      	movs	r0, #0
  403d5e:	4b5c      	ldr	r3, [pc, #368]	; (403ed0 <wifi_serial_out+0x25c>)
  403d60:	4798      	blx	r3
  403d62:	4602      	mov	r2, r0
  403d64:	485b      	ldr	r0, [pc, #364]	; (403ed4 <wifi_serial_out+0x260>)
  403d66:	4621      	mov	r1, r4
  403d68:	4c5b      	ldr	r4, [pc, #364]	; (403ed8 <wifi_serial_out+0x264>)
  403d6a:	47a0      	blx	r4
  403d6c:	4862      	ldr	r0, [pc, #392]	; (403ef8 <wifi_serial_out+0x284>)
  403d6e:	47a0      	blx	r4
  403d70:	4b54      	ldr	r3, [pc, #336]	; (403ec4 <wifi_serial_out+0x250>)
  403d72:	6818      	ldr	r0, [r3, #0]
  403d74:	2100      	movs	r1, #0
  403d76:	460a      	mov	r2, r1
  403d78:	460b      	mov	r3, r1
  403d7a:	4c59      	ldr	r4, [pc, #356]	; (403ee0 <wifi_serial_out+0x26c>)
  403d7c:	47a0      	blx	r4
  403d7e:	e002      	b.n	403d86 <wifi_serial_out+0x112>
  403d80:	485d      	ldr	r0, [pc, #372]	; (403ef8 <wifi_serial_out+0x284>)
  403d82:	4b55      	ldr	r3, [pc, #340]	; (403ed8 <wifi_serial_out+0x264>)
  403d84:	4798      	blx	r3

	
	//uint8_t test_len = sizeof(dataupload_t);
	//IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("test len: %d\r\n", test_len));

	serial_in_queue = IoT_xQueueCreate(SERIAL_IN_QUEUE_LEN, sizeof(void *));
  403d86:	2001      	movs	r0, #1
  403d88:	2104      	movs	r1, #4
  403d8a:	2200      	movs	r2, #0
  403d8c:	4b5b      	ldr	r3, [pc, #364]	; (403efc <wifi_serial_out+0x288>)
  403d8e:	4798      	blx	r3
  403d90:	4b5b      	ldr	r3, [pc, #364]	; (403f00 <wifi_serial_out+0x28c>)
  403d92:	6018      	str	r0, [r3, #0]
	if(serial_in_queue == NULL) {
  403d94:	bb08      	cbnz	r0, 403dda <wifi_serial_out+0x166>
		IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("Serial Queue In create failed\r\n"));
  403d96:	4b4b      	ldr	r3, [pc, #300]	; (403ec4 <wifi_serial_out+0x250>)
  403d98:	6818      	ldr	r0, [r3, #0]
  403d9a:	b1d0      	cbz	r0, 403dd2 <wifi_serial_out+0x15e>
  403d9c:	2100      	movs	r1, #0
  403d9e:	f04f 32ff 	mov.w	r2, #4294967295
  403da2:	460b      	mov	r3, r1
  403da4:	4c48      	ldr	r4, [pc, #288]	; (403ec8 <wifi_serial_out+0x254>)
  403da6:	47a0      	blx	r4
  403da8:	4b48      	ldr	r3, [pc, #288]	; (403ecc <wifi_serial_out+0x258>)
  403daa:	4798      	blx	r3
  403dac:	4604      	mov	r4, r0
  403dae:	2000      	movs	r0, #0
  403db0:	4b47      	ldr	r3, [pc, #284]	; (403ed0 <wifi_serial_out+0x25c>)
  403db2:	4798      	blx	r3
  403db4:	4602      	mov	r2, r0
  403db6:	4847      	ldr	r0, [pc, #284]	; (403ed4 <wifi_serial_out+0x260>)
  403db8:	4621      	mov	r1, r4
  403dba:	4c47      	ldr	r4, [pc, #284]	; (403ed8 <wifi_serial_out+0x264>)
  403dbc:	47a0      	blx	r4
  403dbe:	4851      	ldr	r0, [pc, #324]	; (403f04 <wifi_serial_out+0x290>)
  403dc0:	47a0      	blx	r4
  403dc2:	4b40      	ldr	r3, [pc, #256]	; (403ec4 <wifi_serial_out+0x250>)
  403dc4:	6818      	ldr	r0, [r3, #0]
  403dc6:	2100      	movs	r1, #0
  403dc8:	460a      	mov	r2, r1
  403dca:	460b      	mov	r3, r1
  403dcc:	4c44      	ldr	r4, [pc, #272]	; (403ee0 <wifi_serial_out+0x26c>)
  403dce:	47a0      	blx	r4
  403dd0:	e002      	b.n	403dd8 <wifi_serial_out+0x164>
  403dd2:	484c      	ldr	r0, [pc, #304]	; (403f04 <wifi_serial_out+0x290>)
  403dd4:	4b40      	ldr	r3, [pc, #256]	; (403ed8 <wifi_serial_out+0x264>)
  403dd6:	4798      	blx	r3
		while(true);
  403dd8:	e7fe      	b.n	403dd8 <wifi_serial_out+0x164>
	}
	serial_out_queue = IoT_xQueueCreate(SERIAL_OUT_QUEUE_LEN, sizeof(void *));
  403dda:	2001      	movs	r0, #1
  403ddc:	2104      	movs	r1, #4
  403dde:	2200      	movs	r2, #0
  403de0:	4b46      	ldr	r3, [pc, #280]	; (403efc <wifi_serial_out+0x288>)
  403de2:	4798      	blx	r3
  403de4:	4b48      	ldr	r3, [pc, #288]	; (403f08 <wifi_serial_out+0x294>)
  403de6:	6018      	str	r0, [r3, #0]
	if(serial_out_queue == NULL) {
  403de8:	bb08      	cbnz	r0, 403e2e <wifi_serial_out+0x1ba>
		IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("Serial Queue Out create failed\r\n"));
  403dea:	4b36      	ldr	r3, [pc, #216]	; (403ec4 <wifi_serial_out+0x250>)
  403dec:	6818      	ldr	r0, [r3, #0]
  403dee:	b1d0      	cbz	r0, 403e26 <wifi_serial_out+0x1b2>
  403df0:	2100      	movs	r1, #0
  403df2:	f04f 32ff 	mov.w	r2, #4294967295
  403df6:	460b      	mov	r3, r1
  403df8:	4c33      	ldr	r4, [pc, #204]	; (403ec8 <wifi_serial_out+0x254>)
  403dfa:	47a0      	blx	r4
  403dfc:	4b33      	ldr	r3, [pc, #204]	; (403ecc <wifi_serial_out+0x258>)
  403dfe:	4798      	blx	r3
  403e00:	4604      	mov	r4, r0
  403e02:	2000      	movs	r0, #0
  403e04:	4b32      	ldr	r3, [pc, #200]	; (403ed0 <wifi_serial_out+0x25c>)
  403e06:	4798      	blx	r3
  403e08:	4602      	mov	r2, r0
  403e0a:	4832      	ldr	r0, [pc, #200]	; (403ed4 <wifi_serial_out+0x260>)
  403e0c:	4621      	mov	r1, r4
  403e0e:	4c32      	ldr	r4, [pc, #200]	; (403ed8 <wifi_serial_out+0x264>)
  403e10:	47a0      	blx	r4
  403e12:	483e      	ldr	r0, [pc, #248]	; (403f0c <wifi_serial_out+0x298>)
  403e14:	47a0      	blx	r4
  403e16:	4b2b      	ldr	r3, [pc, #172]	; (403ec4 <wifi_serial_out+0x250>)
  403e18:	6818      	ldr	r0, [r3, #0]
  403e1a:	2100      	movs	r1, #0
  403e1c:	460a      	mov	r2, r1
  403e1e:	460b      	mov	r3, r1
  403e20:	4c2f      	ldr	r4, [pc, #188]	; (403ee0 <wifi_serial_out+0x26c>)
  403e22:	47a0      	blx	r4
  403e24:	e002      	b.n	403e2c <wifi_serial_out+0x1b8>
  403e26:	4839      	ldr	r0, [pc, #228]	; (403f0c <wifi_serial_out+0x298>)
  403e28:	4b2b      	ldr	r3, [pc, #172]	; (403ed8 <wifi_serial_out+0x264>)
  403e2a:	4798      	blx	r3
		while(true);
  403e2c:	e7fe      	b.n	403e2c <wifi_serial_out+0x1b8>
	}
	
	IoT_xTaskCreate(wifi_serial_in, "wifi_serial_in", WIFI_RECV_TASK_STACK_SIZE, NULL, WIFI_RECV_TASK_PRIORITY, NULL);
  403e2e:	2305      	movs	r3, #5
  403e30:	9300      	str	r3, [sp, #0]
  403e32:	2300      	movs	r3, #0
  403e34:	9301      	str	r3, [sp, #4]
  403e36:	9302      	str	r3, [sp, #8]
  403e38:	9303      	str	r3, [sp, #12]
  403e3a:	4835      	ldr	r0, [pc, #212]	; (403f10 <wifi_serial_out+0x29c>)
  403e3c:	4935      	ldr	r1, [pc, #212]	; (403f14 <wifi_serial_out+0x2a0>)
  403e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403e42:	4c35      	ldr	r4, [pc, #212]	; (403f18 <wifi_serial_out+0x2a4>)
  403e44:	47a0      	blx	r4
	
	for(;;) {

		p_pdc = usart_get_pdc_base(WIFI_SERIAL_PORT);
  403e46:	4e35      	ldr	r6, [pc, #212]	; (403f1c <wifi_serial_out+0x2a8>)
  403e48:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 403f28 <wifi_serial_out+0x2b4>
		
		/* Pended here if no message received */
		IoT_xQueueReceive(serial_out_queue, &out_data, portMAX_DELAY);
  403e4c:	4f2e      	ldr	r7, [pc, #184]	; (403f08 <wifi_serial_out+0x294>)
	
	IoT_xTaskCreate(wifi_serial_in, "wifi_serial_in", WIFI_RECV_TASK_STACK_SIZE, NULL, WIFI_RECV_TASK_PRIORITY, NULL);
	
	for(;;) {

		p_pdc = usart_get_pdc_base(WIFI_SERIAL_PORT);
  403e4e:	4630      	mov	r0, r6
  403e50:	47c0      	blx	r8
  403e52:	4604      	mov	r4, r0
		
		/* Pended here if no message received */
		IoT_xQueueReceive(serial_out_queue, &out_data, portMAX_DELAY);
  403e54:	6838      	ldr	r0, [r7, #0]
  403e56:	a925      	add	r1, sp, #148	; 0x94
  403e58:	f04f 32ff 	mov.w	r2, #4294967295
  403e5c:	2300      	movs	r3, #0
  403e5e:	4d1a      	ldr	r5, [pc, #104]	; (403ec8 <wifi_serial_out+0x254>)
  403e60:	47a8      	blx	r5
		
		uint8_t rbuf[128];
		byte2hexstrstr(out_data->buf, out_data->len, rbuf, 128);
  403e62:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403e64:	6818      	ldr	r0, [r3, #0]
  403e66:	6859      	ldr	r1, [r3, #4]
  403e68:	aa05      	add	r2, sp, #20
  403e6a:	2380      	movs	r3, #128	; 0x80
  403e6c:	4d2c      	ldr	r5, [pc, #176]	; (403f20 <wifi_serial_out+0x2ac>)
  403e6e:	47a8      	blx	r5
		IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial OUT(%d): %s\r\n", out_data->len, rbuf));
  403e70:	4b14      	ldr	r3, [pc, #80]	; (403ec4 <wifi_serial_out+0x250>)
  403e72:	6818      	ldr	r0, [r3, #0]
  403e74:	2800      	cmp	r0, #0
  403e76:	d059      	beq.n	403f2c <wifi_serial_out+0x2b8>
  403e78:	2100      	movs	r1, #0
  403e7a:	f04f 32ff 	mov.w	r2, #4294967295
  403e7e:	460b      	mov	r3, r1
  403e80:	4d11      	ldr	r5, [pc, #68]	; (403ec8 <wifi_serial_out+0x254>)
  403e82:	47a8      	blx	r5
  403e84:	4b11      	ldr	r3, [pc, #68]	; (403ecc <wifi_serial_out+0x258>)
  403e86:	4798      	blx	r3
  403e88:	4605      	mov	r5, r0
  403e8a:	2000      	movs	r0, #0
  403e8c:	4b10      	ldr	r3, [pc, #64]	; (403ed0 <wifi_serial_out+0x25c>)
  403e8e:	4798      	blx	r3
  403e90:	4602      	mov	r2, r0
  403e92:	4810      	ldr	r0, [pc, #64]	; (403ed4 <wifi_serial_out+0x260>)
  403e94:	4629      	mov	r1, r5
  403e96:	4d10      	ldr	r5, [pc, #64]	; (403ed8 <wifi_serial_out+0x264>)
  403e98:	47a8      	blx	r5
  403e9a:	4822      	ldr	r0, [pc, #136]	; (403f24 <wifi_serial_out+0x2b0>)
  403e9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403e9e:	6859      	ldr	r1, [r3, #4]
  403ea0:	aa05      	add	r2, sp, #20
  403ea2:	47a8      	blx	r5
  403ea4:	4b07      	ldr	r3, [pc, #28]	; (403ec4 <wifi_serial_out+0x250>)
  403ea6:	6818      	ldr	r0, [r3, #0]
  403ea8:	2100      	movs	r1, #0
  403eaa:	460a      	mov	r2, r1
  403eac:	460b      	mov	r3, r1
  403eae:	4d0c      	ldr	r5, [pc, #48]	; (403ee0 <wifi_serial_out+0x26c>)
  403eb0:	47a8      	blx	r5
  403eb2:	e041      	b.n	403f38 <wifi_serial_out+0x2c4>
  403eb4:	00402845 	.word	0x00402845
  403eb8:	00407be8 	.word	0x00407be8
  403ebc:	00402211 	.word	0x00402211
  403ec0:	2001a03c 	.word	0x2001a03c
  403ec4:	2001a88c 	.word	0x2001a88c
  403ec8:	004014f9 	.word	0x004014f9
  403ecc:	00401991 	.word	0x00401991
  403ed0:	004019d1 	.word	0x004019d1
  403ed4:	00407700 	.word	0x00407700
  403ed8:	00404521 	.word	0x00404521
  403edc:	00407bf8 	.word	0x00407bf8
  403ee0:	0040132d 	.word	0x0040132d
  403ee4:	00402619 	.word	0x00402619
  403ee8:	00407c18 	.word	0x00407c18
  403eec:	2001a02c 	.word	0x2001a02c
  403ef0:	00402269 	.word	0x00402269
  403ef4:	00407c24 	.word	0x00407c24
  403ef8:	00407c44 	.word	0x00407c44
  403efc:	004012cd 	.word	0x004012cd
  403f00:	20019ecc 	.word	0x20019ecc
  403f04:	00407c60 	.word	0x00407c60
  403f08:	2001a884 	.word	0x2001a884
  403f0c:	00407c80 	.word	0x00407c80
  403f10:	00403bdd 	.word	0x00403bdd
  403f14:	00407ca4 	.word	0x00407ca4
  403f18:	00401701 	.word	0x00401701
  403f1c:	4000c200 	.word	0x4000c200
  403f20:	004026e5 	.word	0x004026e5
  403f24:	00407cb4 	.word	0x00407cb4
  403f28:	00400a19 	.word	0x00400a19
  403f2c:	480c      	ldr	r0, [pc, #48]	; (403f60 <wifi_serial_out+0x2ec>)
  403f2e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403f30:	6859      	ldr	r1, [r3, #4]
  403f32:	aa05      	add	r2, sp, #20
  403f34:	4b0b      	ldr	r3, [pc, #44]	; (403f64 <wifi_serial_out+0x2f0>)
  403f36:	4798      	blx	r3
		
		//IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("sending packet\r\n"));
		packet.ul_addr = (uint32_t)out_data->buf;
  403f38:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403f3a:	681a      	ldr	r2, [r3, #0]
  403f3c:	9226      	str	r2, [sp, #152]	; 0x98
		packet.ul_size = out_data->len;
  403f3e:	685b      	ldr	r3, [r3, #4]
  403f40:	9327      	str	r3, [sp, #156]	; 0x9c
		
		pdc_tx_init(p_pdc, &packet, NULL);
  403f42:	4620      	mov	r0, r4
  403f44:	a926      	add	r1, sp, #152	; 0x98
  403f46:	2200      	movs	r2, #0
  403f48:	4b07      	ldr	r3, [pc, #28]	; (403f68 <wifi_serial_out+0x2f4>)
  403f4a:	4798      	blx	r3
		pdc_enable_transfer(p_pdc, PERIPH_PTCR_TXTEN);
  403f4c:	4620      	mov	r0, r4
  403f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
  403f52:	4b06      	ldr	r3, [pc, #24]	; (403f6c <wifi_serial_out+0x2f8>)
  403f54:	4798      	blx	r3
		usart_enable_interrupt(WIFI_SERIAL_PORT, US_IER_ENDTX);
  403f56:	4630      	mov	r0, r6
  403f58:	2110      	movs	r1, #16
  403f5a:	4b05      	ldr	r3, [pc, #20]	; (403f70 <wifi_serial_out+0x2fc>)
  403f5c:	4798      	blx	r3

	}
  403f5e:	e776      	b.n	403e4e <wifi_serial_out+0x1da>
  403f60:	00407cb4 	.word	0x00407cb4
  403f64:	00404521 	.word	0x00404521
  403f68:	00400599 	.word	0x00400599
  403f6c:	004005b1 	.word	0x004005b1
  403f70:	004009d9 	.word	0x004009d9

00403f74 <vFNBtton_Click_Hook>:
}

void vFNBtton_Click_Hook( void )
{
  403f74:	b570      	push	{r4, r5, r6, lr}
  403f76:	b084      	sub	sp, #16
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
  403f78:	2500      	movs	r5, #0
  403f7a:	ac04      	add	r4, sp, #16
  403f7c:	f844 5d04 	str.w	r5, [r4, #-4]!
	
	xTimerStartFromISR(xConfigTimer, &xHigherPriorityTaskWoken );
  403f80:	4b08      	ldr	r3, [pc, #32]	; (403fa4 <vFNBtton_Click_Hook+0x30>)
  403f82:	681e      	ldr	r6, [r3, #0]
  403f84:	4b08      	ldr	r3, [pc, #32]	; (403fa8 <vFNBtton_Click_Hook+0x34>)
  403f86:	4798      	blx	r3
  403f88:	4602      	mov	r2, r0
  403f8a:	9500      	str	r5, [sp, #0]
  403f8c:	4630      	mov	r0, r6
  403f8e:	4629      	mov	r1, r5
  403f90:	4623      	mov	r3, r4
  403f92:	4c06      	ldr	r4, [pc, #24]	; (403fac <vFNBtton_Click_Hook+0x38>)
  403f94:	47a0      	blx	r4
	if(xHigherPriorityTaskWoken != pdFALSE) {
  403f96:	9b03      	ldr	r3, [sp, #12]
  403f98:	b10b      	cbz	r3, 403f9e <vFNBtton_Click_Hook+0x2a>
		IoT_vPortYieldFromISR();
  403f9a:	4b05      	ldr	r3, [pc, #20]	; (403fb0 <vFNBtton_Click_Hook+0x3c>)
  403f9c:	4798      	blx	r3
	}
	
  403f9e:	b004      	add	sp, #16
  403fa0:	bd70      	pop	{r4, r5, r6, pc}
  403fa2:	bf00      	nop
  403fa4:	2001a03c 	.word	0x2001a03c
  403fa8:	004019b1 	.word	0x004019b1
  403fac:	00402269 	.word	0x00402269
  403fb0:	00400e81 	.word	0x00400e81

00403fb4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  403fb6:	b083      	sub	sp, #12
  403fb8:	4604      	mov	r4, r0
  403fba:	460e      	mov	r6, r1
	uint32_t val = 0;
  403fbc:	2300      	movs	r3, #0
  403fbe:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403fc0:	4b34      	ldr	r3, [pc, #208]	; (404094 <usart_serial_getchar+0xe0>)
  403fc2:	4298      	cmp	r0, r3
  403fc4:	d109      	bne.n	403fda <usart_serial_getchar+0x26>
		while (usart_read(p_usart, &val));
  403fc6:	461f      	mov	r7, r3
  403fc8:	4d33      	ldr	r5, [pc, #204]	; (404098 <usart_serial_getchar+0xe4>)
  403fca:	4638      	mov	r0, r7
  403fcc:	a901      	add	r1, sp, #4
  403fce:	47a8      	blx	r5
  403fd0:	2800      	cmp	r0, #0
  403fd2:	d1fa      	bne.n	403fca <usart_serial_getchar+0x16>
		*data = (uint8_t)(val & 0xFF);
  403fd4:	9b01      	ldr	r3, [sp, #4]
  403fd6:	7033      	strb	r3, [r6, #0]
  403fd8:	e019      	b.n	40400e <usart_serial_getchar+0x5a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403fda:	4b30      	ldr	r3, [pc, #192]	; (40409c <usart_serial_getchar+0xe8>)
  403fdc:	4298      	cmp	r0, r3
  403fde:	d109      	bne.n	403ff4 <usart_serial_getchar+0x40>
		while (usart_read(p_usart, &val));
  403fe0:	461f      	mov	r7, r3
  403fe2:	4d2d      	ldr	r5, [pc, #180]	; (404098 <usart_serial_getchar+0xe4>)
  403fe4:	4638      	mov	r0, r7
  403fe6:	a901      	add	r1, sp, #4
  403fe8:	47a8      	blx	r5
  403fea:	2800      	cmp	r0, #0
  403fec:	d1fa      	bne.n	403fe4 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
  403fee:	9b01      	ldr	r3, [sp, #4]
  403ff0:	7033      	strb	r3, [r6, #0]
  403ff2:	e019      	b.n	404028 <usart_serial_getchar+0x74>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403ff4:	4b2a      	ldr	r3, [pc, #168]	; (4040a0 <usart_serial_getchar+0xec>)
  403ff6:	4298      	cmp	r0, r3
  403ff8:	d109      	bne.n	40400e <usart_serial_getchar+0x5a>
		while (usart_read(p_usart, &val));
  403ffa:	461f      	mov	r7, r3
  403ffc:	4d26      	ldr	r5, [pc, #152]	; (404098 <usart_serial_getchar+0xe4>)
  403ffe:	4638      	mov	r0, r7
  404000:	a901      	add	r1, sp, #4
  404002:	47a8      	blx	r5
  404004:	2800      	cmp	r0, #0
  404006:	d1fa      	bne.n	403ffe <usart_serial_getchar+0x4a>
		*data = (uint8_t)(val & 0xFF);
  404008:	9b01      	ldr	r3, [sp, #4]
  40400a:	7033      	strb	r3, [r6, #0]
  40400c:	e019      	b.n	404042 <usart_serial_getchar+0x8e>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  40400e:	4b25      	ldr	r3, [pc, #148]	; (4040a4 <usart_serial_getchar+0xf0>)
  404010:	429c      	cmp	r4, r3
  404012:	d109      	bne.n	404028 <usart_serial_getchar+0x74>
		while (usart_read(p_usart, &val));
  404014:	461f      	mov	r7, r3
  404016:	4d20      	ldr	r5, [pc, #128]	; (404098 <usart_serial_getchar+0xe4>)
  404018:	4638      	mov	r0, r7
  40401a:	a901      	add	r1, sp, #4
  40401c:	47a8      	blx	r5
  40401e:	2800      	cmp	r0, #0
  404020:	d1fa      	bne.n	404018 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
  404022:	9b01      	ldr	r3, [sp, #4]
  404024:	7033      	strb	r3, [r6, #0]
  404026:	e019      	b.n	40405c <usart_serial_getchar+0xa8>
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  404028:	4b1f      	ldr	r3, [pc, #124]	; (4040a8 <usart_serial_getchar+0xf4>)
  40402a:	429c      	cmp	r4, r3
  40402c:	d109      	bne.n	404042 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
  40402e:	461f      	mov	r7, r3
  404030:	4d19      	ldr	r5, [pc, #100]	; (404098 <usart_serial_getchar+0xe4>)
  404032:	4638      	mov	r0, r7
  404034:	a901      	add	r1, sp, #4
  404036:	47a8      	blx	r5
  404038:	2800      	cmp	r0, #0
  40403a:	d1fa      	bne.n	404032 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40403c:	9b01      	ldr	r3, [sp, #4]
  40403e:	7033      	strb	r3, [r6, #0]
  404040:	e019      	b.n	404076 <usart_serial_getchar+0xc2>
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  404042:	4b1a      	ldr	r3, [pc, #104]	; (4040ac <usart_serial_getchar+0xf8>)
  404044:	429c      	cmp	r4, r3
  404046:	d109      	bne.n	40405c <usart_serial_getchar+0xa8>
		while (usart_read(p_usart, &val));
  404048:	461d      	mov	r5, r3
  40404a:	4c13      	ldr	r4, [pc, #76]	; (404098 <usart_serial_getchar+0xe4>)
  40404c:	4628      	mov	r0, r5
  40404e:	a901      	add	r1, sp, #4
  404050:	47a0      	blx	r4
  404052:	2800      	cmp	r0, #0
  404054:	d1fa      	bne.n	40404c <usart_serial_getchar+0x98>
		*data = (uint8_t)(val & 0xFF);
  404056:	9b01      	ldr	r3, [sp, #4]
  404058:	7033      	strb	r3, [r6, #0]
  40405a:	e018      	b.n	40408e <usart_serial_getchar+0xda>
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  40405c:	4b14      	ldr	r3, [pc, #80]	; (4040b0 <usart_serial_getchar+0xfc>)
  40405e:	429c      	cmp	r4, r3
  404060:	d109      	bne.n	404076 <usart_serial_getchar+0xc2>
		while (usart_read(p_usart, &val));
  404062:	461d      	mov	r5, r3
  404064:	4c0c      	ldr	r4, [pc, #48]	; (404098 <usart_serial_getchar+0xe4>)
  404066:	4628      	mov	r0, r5
  404068:	a901      	add	r1, sp, #4
  40406a:	47a0      	blx	r4
  40406c:	2800      	cmp	r0, #0
  40406e:	d1fa      	bne.n	404066 <usart_serial_getchar+0xb2>
		*data = (uint8_t)(val & 0xFF);
  404070:	9b01      	ldr	r3, [sp, #4]
  404072:	7033      	strb	r3, [r6, #0]
  404074:	e00b      	b.n	40408e <usart_serial_getchar+0xda>
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  404076:	4b0f      	ldr	r3, [pc, #60]	; (4040b4 <usart_serial_getchar+0x100>)
  404078:	429c      	cmp	r4, r3
  40407a:	d108      	bne.n	40408e <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  40407c:	461d      	mov	r5, r3
  40407e:	4c06      	ldr	r4, [pc, #24]	; (404098 <usart_serial_getchar+0xe4>)
  404080:	4628      	mov	r0, r5
  404082:	a901      	add	r1, sp, #4
  404084:	47a0      	blx	r4
  404086:	2800      	cmp	r0, #0
  404088:	d1fa      	bne.n	404080 <usart_serial_getchar+0xcc>
		*data = (uint8_t)(val & 0xFF);
  40408a:	9b01      	ldr	r3, [sp, #4]
  40408c:	7033      	strb	r3, [r6, #0]
	}
# endif
#endif /* ifdef USART */

}
  40408e:	b003      	add	sp, #12
  404090:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404092:	bf00      	nop
  404094:	4000c200 	.word	0x4000c200
  404098:	00400a01 	.word	0x00400a01
  40409c:	40020200 	.word	0x40020200
  4040a0:	40024200 	.word	0x40024200
  4040a4:	40018200 	.word	0x40018200
  4040a8:	4001c200 	.word	0x4001c200
  4040ac:	40008200 	.word	0x40008200
  4040b0:	40040200 	.word	0x40040200
  4040b4:	40034200 	.word	0x40034200

004040b8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4040b8:	b570      	push	{r4, r5, r6, lr}
  4040ba:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4040bc:	4b30      	ldr	r3, [pc, #192]	; (404180 <usart_serial_putchar+0xc8>)
  4040be:	4298      	cmp	r0, r3
  4040c0:	d108      	bne.n	4040d4 <usart_serial_putchar+0x1c>
		while (usart_write(p_usart, c)!=0);
  4040c2:	461e      	mov	r6, r3
  4040c4:	4d2f      	ldr	r5, [pc, #188]	; (404184 <usart_serial_putchar+0xcc>)
  4040c6:	4630      	mov	r0, r6
  4040c8:	4621      	mov	r1, r4
  4040ca:	47a8      	blx	r5
  4040cc:	2800      	cmp	r0, #0
  4040ce:	d1fa      	bne.n	4040c6 <usart_serial_putchar+0xe>
		return 1;
  4040d0:	2001      	movs	r0, #1
  4040d2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4040d4:	4b2c      	ldr	r3, [pc, #176]	; (404188 <usart_serial_putchar+0xd0>)
  4040d6:	4298      	cmp	r0, r3
  4040d8:	d108      	bne.n	4040ec <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
  4040da:	461e      	mov	r6, r3
  4040dc:	4d29      	ldr	r5, [pc, #164]	; (404184 <usart_serial_putchar+0xcc>)
  4040de:	4630      	mov	r0, r6
  4040e0:	4621      	mov	r1, r4
  4040e2:	47a8      	blx	r5
  4040e4:	2800      	cmp	r0, #0
  4040e6:	d1fa      	bne.n	4040de <usart_serial_putchar+0x26>
		return 1;
  4040e8:	2001      	movs	r0, #1
  4040ea:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4040ec:	4b27      	ldr	r3, [pc, #156]	; (40418c <usart_serial_putchar+0xd4>)
  4040ee:	4298      	cmp	r0, r3
  4040f0:	d108      	bne.n	404104 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4040f2:	461e      	mov	r6, r3
  4040f4:	4d23      	ldr	r5, [pc, #140]	; (404184 <usart_serial_putchar+0xcc>)
  4040f6:	4630      	mov	r0, r6
  4040f8:	4621      	mov	r1, r4
  4040fa:	47a8      	blx	r5
  4040fc:	2800      	cmp	r0, #0
  4040fe:	d1fa      	bne.n	4040f6 <usart_serial_putchar+0x3e>
		return 1;
  404100:	2001      	movs	r0, #1
  404102:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  404104:	4b22      	ldr	r3, [pc, #136]	; (404190 <usart_serial_putchar+0xd8>)
  404106:	4298      	cmp	r0, r3
  404108:	d108      	bne.n	40411c <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  40410a:	461e      	mov	r6, r3
  40410c:	4d1d      	ldr	r5, [pc, #116]	; (404184 <usart_serial_putchar+0xcc>)
  40410e:	4630      	mov	r0, r6
  404110:	4621      	mov	r1, r4
  404112:	47a8      	blx	r5
  404114:	2800      	cmp	r0, #0
  404116:	d1fa      	bne.n	40410e <usart_serial_putchar+0x56>
		return 1;
  404118:	2001      	movs	r0, #1
  40411a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  40411c:	4b1d      	ldr	r3, [pc, #116]	; (404194 <usart_serial_putchar+0xdc>)
  40411e:	4298      	cmp	r0, r3
  404120:	d108      	bne.n	404134 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  404122:	461e      	mov	r6, r3
  404124:	4d17      	ldr	r5, [pc, #92]	; (404184 <usart_serial_putchar+0xcc>)
  404126:	4630      	mov	r0, r6
  404128:	4621      	mov	r1, r4
  40412a:	47a8      	blx	r5
  40412c:	2800      	cmp	r0, #0
  40412e:	d1fa      	bne.n	404126 <usart_serial_putchar+0x6e>
		return 1;
  404130:	2001      	movs	r0, #1
  404132:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  404134:	4b18      	ldr	r3, [pc, #96]	; (404198 <usart_serial_putchar+0xe0>)
  404136:	4298      	cmp	r0, r3
  404138:	d108      	bne.n	40414c <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  40413a:	461e      	mov	r6, r3
  40413c:	4d11      	ldr	r5, [pc, #68]	; (404184 <usart_serial_putchar+0xcc>)
  40413e:	4630      	mov	r0, r6
  404140:	4621      	mov	r1, r4
  404142:	47a8      	blx	r5
  404144:	2800      	cmp	r0, #0
  404146:	d1fa      	bne.n	40413e <usart_serial_putchar+0x86>
		return 1;
  404148:	2001      	movs	r0, #1
  40414a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  40414c:	4b13      	ldr	r3, [pc, #76]	; (40419c <usart_serial_putchar+0xe4>)
  40414e:	4298      	cmp	r0, r3
  404150:	d108      	bne.n	404164 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  404152:	461e      	mov	r6, r3
  404154:	4d0b      	ldr	r5, [pc, #44]	; (404184 <usart_serial_putchar+0xcc>)
  404156:	4630      	mov	r0, r6
  404158:	4621      	mov	r1, r4
  40415a:	47a8      	blx	r5
  40415c:	2800      	cmp	r0, #0
  40415e:	d1fa      	bne.n	404156 <usart_serial_putchar+0x9e>
		return 1;
  404160:	2001      	movs	r0, #1
  404162:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  404164:	4b0e      	ldr	r3, [pc, #56]	; (4041a0 <usart_serial_putchar+0xe8>)
  404166:	4298      	cmp	r0, r3
  404168:	d108      	bne.n	40417c <usart_serial_putchar+0xc4>
		while (usart_write(p_usart, c)!=0);
  40416a:	461e      	mov	r6, r3
  40416c:	4d05      	ldr	r5, [pc, #20]	; (404184 <usart_serial_putchar+0xcc>)
  40416e:	4630      	mov	r0, r6
  404170:	4621      	mov	r1, r4
  404172:	47a8      	blx	r5
  404174:	2800      	cmp	r0, #0
  404176:	d1fa      	bne.n	40416e <usart_serial_putchar+0xb6>
		return 1;
  404178:	2001      	movs	r0, #1
  40417a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
#endif /* ifdef USART */

	return 0;
  40417c:	2000      	movs	r0, #0
}
  40417e:	bd70      	pop	{r4, r5, r6, pc}
  404180:	4000c200 	.word	0x4000c200
  404184:	004009ed 	.word	0x004009ed
  404188:	40020200 	.word	0x40020200
  40418c:	40024200 	.word	0x40024200
  404190:	40018200 	.word	0x40018200
  404194:	4001c200 	.word	0x4001c200
  404198:	40008200 	.word	0x40008200
  40419c:	40040200 	.word	0x40040200
  4041a0:	40034200 	.word	0x40034200

004041a4 <main>:
	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART_CONSOLE, &uart_serial_options);
}

int main(void){
  4041a4:	b580      	push	{r7, lr}
  4041a6:	b08a      	sub	sp, #40	; 0x28
/*-----------------------------------------------------------*/

static void prvSetupHardware(void)
{
	/* ASF function to setup clocking. */
	sysclk_init();
  4041a8:	4b3f      	ldr	r3, [pc, #252]	; (4042a8 <main+0x104>)
  4041aa:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  4041ac:	4a3f      	ldr	r2, [pc, #252]	; (4042ac <main+0x108>)
  4041ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  4041b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  4041b4:	041b      	lsls	r3, r3, #16
  4041b6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                 |
  4041b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  4041bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  4041c0:	60d3      	str	r3, [r2, #12]
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();	
  4041c2:	4b3b      	ldr	r3, [pc, #236]	; (4042b0 <main+0x10c>)
  4041c4:	4798      	blx	r3
  4041c6:	2014      	movs	r0, #20
  4041c8:	4b3a      	ldr	r3, [pc, #232]	; (4042b4 <main+0x110>)
  4041ca:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4041cc:	4d3a      	ldr	r5, [pc, #232]	; (4042b8 <main+0x114>)
  4041ce:	4b3b      	ldr	r3, [pc, #236]	; (4042bc <main+0x118>)
  4041d0:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4041d2:	4a3b      	ldr	r2, [pc, #236]	; (4042c0 <main+0x11c>)
  4041d4:	4b3b      	ldr	r3, [pc, #236]	; (4042c4 <main+0x120>)
  4041d6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4041d8:	4a3b      	ldr	r2, [pc, #236]	; (4042c8 <main+0x124>)
  4041da:	4b3c      	ldr	r3, [pc, #240]	; (4042cc <main+0x128>)
  4041dc:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4041de:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  4041e2:	9604      	str	r6, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4041e4:	23c0      	movs	r3, #192	; 0xc0
  4041e6:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4041e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4041ec:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4041ee:	2400      	movs	r4, #0
  4041f0:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4041f2:	9408      	str	r4, [sp, #32]
# endif
# ifdef USART4
	if (USART4 == p_usart) {
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM4);
  4041f4:	4f36      	ldr	r7, [pc, #216]	; (4042d0 <main+0x12c>)
  4041f6:	4638      	mov	r0, r7
  4041f8:	4b36      	ldr	r3, [pc, #216]	; (4042d4 <main+0x130>)
  4041fa:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM4, FLEXCOM_USART);
  4041fc:	4638      	mov	r0, r7
  4041fe:	2101      	movs	r1, #1
  404200:	4b35      	ldr	r3, [pc, #212]	; (4042d8 <main+0x134>)
  404202:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART4);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  404204:	4628      	mov	r0, r5
  404206:	a904      	add	r1, sp, #16
  404208:	4a34      	ldr	r2, [pc, #208]	; (4042dc <main+0x138>)
  40420a:	4b35      	ldr	r3, [pc, #212]	; (4042e0 <main+0x13c>)
  40420c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40420e:	4628      	mov	r0, r5
  404210:	4b34      	ldr	r3, [pc, #208]	; (4042e4 <main+0x140>)
  404212:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404214:	4628      	mov	r0, r5
  404216:	4b34      	ldr	r3, [pc, #208]	; (4042e8 <main+0x144>)
  404218:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40421a:	4f34      	ldr	r7, [pc, #208]	; (4042ec <main+0x148>)
  40421c:	683b      	ldr	r3, [r7, #0]
  40421e:	6898      	ldr	r0, [r3, #8]
  404220:	4621      	mov	r1, r4
  404222:	4d33      	ldr	r5, [pc, #204]	; (4042f0 <main+0x14c>)
  404224:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404226:	683b      	ldr	r3, [r7, #0]
  404228:	6858      	ldr	r0, [r3, #4]
  40422a:	4621      	mov	r1, r4
  40422c:	47a8      	blx	r5
	/* Prepare the console*/
	configure_console();
	
	tSensor_serial_init();
  40422e:	4b31      	ldr	r3, [pc, #196]	; (4042f4 <main+0x150>)
  404230:	4798      	blx	r3
	wifi_serial_init(BIT_RATE_115200);
  404232:	4630      	mov	r0, r6
  404234:	4b30      	ldr	r3, [pc, #192]	; (4042f8 <main+0x154>)
  404236:	4798      	blx	r3
	
	puts(STRING_HEADER);
  404238:	4830      	ldr	r0, [pc, #192]	; (4042fc <main+0x158>)
  40423a:	4b31      	ldr	r3, [pc, #196]	; (404300 <main+0x15c>)
  40423c:	4798      	blx	r3
	/* Prepare the hardware to run this demo. */
	prvSetupHardware();
	
#ifdef __IoT_DEBUG__
	//void create_dbg_sem();
	create_dbg_sem();
  40423e:	4b31      	ldr	r3, [pc, #196]	; (404304 <main+0x160>)
  404240:	4798      	blx	r3
#endif

	if(xTaskCreate(wifi_serial_out, "wifi_task", WIFI_SERIAL_TASK_STACK_SIZE, NULL, WIFI_SERIAL_TASK_PRIORITY, NULL) != pdPASS)
  404242:	2302      	movs	r3, #2
  404244:	9300      	str	r3, [sp, #0]
  404246:	9401      	str	r4, [sp, #4]
  404248:	9402      	str	r4, [sp, #8]
  40424a:	9403      	str	r4, [sp, #12]
  40424c:	482e      	ldr	r0, [pc, #184]	; (404308 <main+0x164>)
  40424e:	492f      	ldr	r1, [pc, #188]	; (40430c <main+0x168>)
  404250:	f44f 6280 	mov.w	r2, #1024	; 0x400
  404254:	4623      	mov	r3, r4
  404256:	4c2e      	ldr	r4, [pc, #184]	; (404310 <main+0x16c>)
  404258:	47a0      	blx	r4
  40425a:	2801      	cmp	r0, #1
  40425c:	d020      	beq.n	4042a0 <main+0xfc>
	{
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_WARNING, ("wifi task create failed\r\n"));
  40425e:	4b2d      	ldr	r3, [pc, #180]	; (404314 <main+0x170>)
  404260:	6818      	ldr	r0, [r3, #0]
  404262:	b1d0      	cbz	r0, 40429a <main+0xf6>
  404264:	2100      	movs	r1, #0
  404266:	f04f 32ff 	mov.w	r2, #4294967295
  40426a:	460b      	mov	r3, r1
  40426c:	4c2a      	ldr	r4, [pc, #168]	; (404318 <main+0x174>)
  40426e:	47a0      	blx	r4
  404270:	4b2a      	ldr	r3, [pc, #168]	; (40431c <main+0x178>)
  404272:	4798      	blx	r3
  404274:	4604      	mov	r4, r0
  404276:	2000      	movs	r0, #0
  404278:	4b29      	ldr	r3, [pc, #164]	; (404320 <main+0x17c>)
  40427a:	4798      	blx	r3
  40427c:	4602      	mov	r2, r0
  40427e:	4829      	ldr	r0, [pc, #164]	; (404324 <main+0x180>)
  404280:	4621      	mov	r1, r4
  404282:	4c29      	ldr	r4, [pc, #164]	; (404328 <main+0x184>)
  404284:	47a0      	blx	r4
  404286:	4829      	ldr	r0, [pc, #164]	; (40432c <main+0x188>)
  404288:	47a0      	blx	r4
  40428a:	4b22      	ldr	r3, [pc, #136]	; (404314 <main+0x170>)
  40428c:	6818      	ldr	r0, [r3, #0]
  40428e:	2100      	movs	r1, #0
  404290:	460a      	mov	r2, r1
  404292:	460b      	mov	r3, r1
  404294:	4c26      	ldr	r4, [pc, #152]	; (404330 <main+0x18c>)
  404296:	47a0      	blx	r4
  404298:	e002      	b.n	4042a0 <main+0xfc>
  40429a:	4824      	ldr	r0, [pc, #144]	; (40432c <main+0x188>)
  40429c:	4b22      	ldr	r3, [pc, #136]	; (404328 <main+0x184>)
  40429e:	4798      	blx	r3
	/*if (xTaskCreate(sensor_task, "sensor_task", TSENSOR_TASK_STACK_SIZE, NULL, TSENSOR_TASK_PRIORITY, NULL)!=pdPASS){
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_WARNING, ("sensor task create failed\r\n"));
	}*/
	
	/* Start the RTOS scheduler. */
	vTaskStartScheduler();
  4042a0:	4b24      	ldr	r3, [pc, #144]	; (404334 <main+0x190>)
  4042a2:	4798      	blx	r3
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for (;;) {
	}
  4042a4:	e7fe      	b.n	4042a4 <main+0x100>
  4042a6:	bf00      	nop
  4042a8:	004001a5 	.word	0x004001a5
  4042ac:	e000ed00 	.word	0xe000ed00
  4042b0:	004002b1 	.word	0x004002b1
  4042b4:	0040082d 	.word	0x0040082d
  4042b8:	4001c200 	.word	0x4001c200
  4042bc:	2001a8d8 	.word	0x2001a8d8
  4042c0:	004040b9 	.word	0x004040b9
  4042c4:	2001a8d4 	.word	0x2001a8d4
  4042c8:	00403fb5 	.word	0x00403fb5
  4042cc:	2001a8d0 	.word	0x2001a8d0
  4042d0:	4001c000 	.word	0x4001c000
  4042d4:	00400425 	.word	0x00400425
  4042d8:	00400595 	.word	0x00400595
  4042dc:	07270000 	.word	0x07270000
  4042e0:	00400971 	.word	0x00400971
  4042e4:	004009c5 	.word	0x004009c5
  4042e8:	004009cd 	.word	0x004009cd
  4042ec:	20000458 	.word	0x20000458
  4042f0:	004047e9 	.word	0x004047e9
  4042f4:	004024f9 	.word	0x004024f9
  4042f8:	00402a69 	.word	0x00402a69
  4042fc:	00407ccc 	.word	0x00407ccc
  404300:	004047d9 	.word	0x004047d9
  404304:	00404441 	.word	0x00404441
  404308:	00403c75 	.word	0x00403c75
  40430c:	00407d24 	.word	0x00407d24
  404310:	00401701 	.word	0x00401701
  404314:	2001a88c 	.word	0x2001a88c
  404318:	004014f9 	.word	0x004014f9
  40431c:	00401991 	.word	0x00401991
  404320:	004019d1 	.word	0x004019d1
  404324:	00407700 	.word	0x00407700
  404328:	00404521 	.word	0x00404521
  40432c:	00407d30 	.word	0x00407d30
  404330:	0040132d 	.word	0x0040132d
  404334:	00401905 	.word	0x00401905

00404338 <vApplicationMallocFailedHook>:
}

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook(void)
{
  404338:	b508      	push	{r3, lr}
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("vApplicationMallocFailedHook\r\n"));
  40433a:	4b12      	ldr	r3, [pc, #72]	; (404384 <vApplicationMallocFailedHook+0x4c>)
  40433c:	6818      	ldr	r0, [r3, #0]
  40433e:	b1d0      	cbz	r0, 404376 <vApplicationMallocFailedHook+0x3e>
  404340:	2100      	movs	r1, #0
  404342:	f04f 32ff 	mov.w	r2, #4294967295
  404346:	460b      	mov	r3, r1
  404348:	4c0f      	ldr	r4, [pc, #60]	; (404388 <vApplicationMallocFailedHook+0x50>)
  40434a:	47a0      	blx	r4
  40434c:	4b0f      	ldr	r3, [pc, #60]	; (40438c <vApplicationMallocFailedHook+0x54>)
  40434e:	4798      	blx	r3
  404350:	4604      	mov	r4, r0
  404352:	2000      	movs	r0, #0
  404354:	4b0e      	ldr	r3, [pc, #56]	; (404390 <vApplicationMallocFailedHook+0x58>)
  404356:	4798      	blx	r3
  404358:	4602      	mov	r2, r0
  40435a:	480e      	ldr	r0, [pc, #56]	; (404394 <vApplicationMallocFailedHook+0x5c>)
  40435c:	4621      	mov	r1, r4
  40435e:	4c0e      	ldr	r4, [pc, #56]	; (404398 <vApplicationMallocFailedHook+0x60>)
  404360:	47a0      	blx	r4
  404362:	480e      	ldr	r0, [pc, #56]	; (40439c <vApplicationMallocFailedHook+0x64>)
  404364:	47a0      	blx	r4
  404366:	4b07      	ldr	r3, [pc, #28]	; (404384 <vApplicationMallocFailedHook+0x4c>)
  404368:	6818      	ldr	r0, [r3, #0]
  40436a:	2100      	movs	r1, #0
  40436c:	460a      	mov	r2, r1
  40436e:	460b      	mov	r3, r1
  404370:	4c0b      	ldr	r4, [pc, #44]	; (4043a0 <vApplicationMallocFailedHook+0x68>)
  404372:	47a0      	blx	r4
  404374:	e002      	b.n	40437c <vApplicationMallocFailedHook+0x44>
  404376:	4809      	ldr	r0, [pc, #36]	; (40439c <vApplicationMallocFailedHook+0x64>)
  404378:	4b07      	ldr	r3, [pc, #28]	; (404398 <vApplicationMallocFailedHook+0x60>)
  40437a:	4798      	blx	r3
	taskDISABLE_INTERRUPTS();
  40437c:	4b09      	ldr	r3, [pc, #36]	; (4043a4 <vApplicationMallocFailedHook+0x6c>)
  40437e:	4798      	blx	r3
	for (;;) {
	}
  404380:	e7fe      	b.n	404380 <vApplicationMallocFailedHook+0x48>
  404382:	bf00      	nop
  404384:	2001a88c 	.word	0x2001a88c
  404388:	004014f9 	.word	0x004014f9
  40438c:	00401991 	.word	0x00401991
  404390:	004019d1 	.word	0x004019d1
  404394:	00407700 	.word	0x00407700
  404398:	00404521 	.word	0x00404521
  40439c:	00407d4c 	.word	0x00407d4c
  4043a0:	0040132d 	.word	0x0040132d
  4043a4:	00400e91 	.word	0x00400e91

004043a8 <vApplicationStackOverflowHook>:

/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook(xTaskHandle pxTask,
		signed char *pcTaskName)
{
  4043a8:	b508      	push	{r3, lr}
	(void) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("vApplicationStackOverflowHook\r\n"));
  4043aa:	4b12      	ldr	r3, [pc, #72]	; (4043f4 <vApplicationStackOverflowHook+0x4c>)
  4043ac:	6818      	ldr	r0, [r3, #0]
  4043ae:	b1d0      	cbz	r0, 4043e6 <vApplicationStackOverflowHook+0x3e>
  4043b0:	2100      	movs	r1, #0
  4043b2:	f04f 32ff 	mov.w	r2, #4294967295
  4043b6:	460b      	mov	r3, r1
  4043b8:	4c0f      	ldr	r4, [pc, #60]	; (4043f8 <vApplicationStackOverflowHook+0x50>)
  4043ba:	47a0      	blx	r4
  4043bc:	4b0f      	ldr	r3, [pc, #60]	; (4043fc <vApplicationStackOverflowHook+0x54>)
  4043be:	4798      	blx	r3
  4043c0:	4604      	mov	r4, r0
  4043c2:	2000      	movs	r0, #0
  4043c4:	4b0e      	ldr	r3, [pc, #56]	; (404400 <vApplicationStackOverflowHook+0x58>)
  4043c6:	4798      	blx	r3
  4043c8:	4602      	mov	r2, r0
  4043ca:	480e      	ldr	r0, [pc, #56]	; (404404 <vApplicationStackOverflowHook+0x5c>)
  4043cc:	4621      	mov	r1, r4
  4043ce:	4c0e      	ldr	r4, [pc, #56]	; (404408 <vApplicationStackOverflowHook+0x60>)
  4043d0:	47a0      	blx	r4
  4043d2:	480e      	ldr	r0, [pc, #56]	; (40440c <vApplicationStackOverflowHook+0x64>)
  4043d4:	47a0      	blx	r4
  4043d6:	4b07      	ldr	r3, [pc, #28]	; (4043f4 <vApplicationStackOverflowHook+0x4c>)
  4043d8:	6818      	ldr	r0, [r3, #0]
  4043da:	2100      	movs	r1, #0
  4043dc:	460a      	mov	r2, r1
  4043de:	460b      	mov	r3, r1
  4043e0:	4c0b      	ldr	r4, [pc, #44]	; (404410 <vApplicationStackOverflowHook+0x68>)
  4043e2:	47a0      	blx	r4
  4043e4:	e002      	b.n	4043ec <vApplicationStackOverflowHook+0x44>
  4043e6:	4809      	ldr	r0, [pc, #36]	; (40440c <vApplicationStackOverflowHook+0x64>)
  4043e8:	4b07      	ldr	r3, [pc, #28]	; (404408 <vApplicationStackOverflowHook+0x60>)
  4043ea:	4798      	blx	r3
	taskDISABLE_INTERRUPTS();
  4043ec:	4b09      	ldr	r3, [pc, #36]	; (404414 <vApplicationStackOverflowHook+0x6c>)
  4043ee:	4798      	blx	r3
	for (;;) {
	}
  4043f0:	e7fe      	b.n	4043f0 <vApplicationStackOverflowHook+0x48>
  4043f2:	bf00      	nop
  4043f4:	2001a88c 	.word	0x2001a88c
  4043f8:	004014f9 	.word	0x004014f9
  4043fc:	00401991 	.word	0x00401991
  404400:	004019d1 	.word	0x004019d1
  404404:	00407700 	.word	0x00407700
  404408:	00404521 	.word	0x00404521
  40440c:	00407d6c 	.word	0x00407d6c
  404410:	0040132d 	.word	0x0040132d
  404414:	00400e91 	.word	0x00400e91

00404418 <assert_triggered>:
}

/*-----------------------------------------------------------*/

void assert_triggered(const char *file, uint32_t line)
{
  404418:	b500      	push	{lr}
  40441a:	b083      	sub	sp, #12
	volatile uint32_t block_var = 0, line_in;
  40441c:	2300      	movs	r3, #0
  40441e:	9301      	str	r3, [sp, #4]
	const char *file_in;

	/* These assignments are made to prevent the compiler optimizing the
	values away. */
	file_in = file;
	line_in = line;
  404420:	9100      	str	r1, [sp, #0]
	(void) file_in;
	(void) line_in;
  404422:	9b00      	ldr	r3, [sp, #0]

	taskENTER_CRITICAL();
  404424:	4b04      	ldr	r3, [pc, #16]	; (404438 <assert_triggered+0x20>)
  404426:	4798      	blx	r3
	{
		while (block_var == 0) {
  404428:	9b01      	ldr	r3, [sp, #4]
  40442a:	2b00      	cmp	r3, #0
  40442c:	d0fc      	beq.n	404428 <assert_triggered+0x10>
			/* Set block_var to a non-zero value in the debugger to
			step out of this function. */
		}
	}
	taskEXIT_CRITICAL();
  40442e:	4b03      	ldr	r3, [pc, #12]	; (40443c <assert_triggered+0x24>)
  404430:	4798      	blx	r3
}
  404432:	b003      	add	sp, #12
  404434:	f85d fb04 	ldr.w	pc, [sp], #4
  404438:	00400ea1 	.word	0x00400ea1
  40443c:	00400ec1 	.word	0x00400ec1

00404440 <create_dbg_sem>:

xSemaphoreHandle xsem_dbg = NULL;


void create_dbg_sem(void)
{
  404440:	b510      	push	{r4, lr}
	IoT_vSemaphoreCreateBinary(xsem_dbg);
  404442:	2001      	movs	r0, #1
  404444:	2100      	movs	r1, #0
  404446:	2203      	movs	r2, #3
  404448:	4b05      	ldr	r3, [pc, #20]	; (404460 <create_dbg_sem+0x20>)
  40444a:	4798      	blx	r3
  40444c:	4b05      	ldr	r3, [pc, #20]	; (404464 <create_dbg_sem+0x24>)
  40444e:	6018      	str	r0, [r3, #0]
  404450:	b120      	cbz	r0, 40445c <create_dbg_sem+0x1c>
  404452:	2100      	movs	r1, #0
  404454:	460a      	mov	r2, r1
  404456:	460b      	mov	r3, r1
  404458:	4c03      	ldr	r4, [pc, #12]	; (404468 <create_dbg_sem+0x28>)
  40445a:	47a0      	blx	r4
  40445c:	bd10      	pop	{r4, pc}
  40445e:	bf00      	nop
  404460:	004012cd 	.word	0x004012cd
  404464:	2001a88c 	.word	0x2001a88c
  404468:	0040132d 	.word	0x0040132d

0040446c <configure_timer_for_run_time_stats>:
/*-----------------------------------------------------------*/

void configure_timer_for_run_time_stats(void)
{
	/* How many clocks are there per tenth of a millisecond? */
	clocks_per_10th_ms = configCPU_CLOCK_HZ / 10000UL;
  40446c:	f642 62df 	movw	r2, #11999	; 0x2edf
  404470:	4b01      	ldr	r3, [pc, #4]	; (404478 <configure_timer_for_run_time_stats+0xc>)
  404472:	601a      	str	r2, [r3, #0]
  404474:	4770      	bx	lr
  404476:	bf00      	nop
  404478:	2001a890 	.word	0x2001a890

0040447c <get_run_time_counter_value>:
}

/*-----------------------------------------------------------*/

uint32_t get_run_time_counter_value(void)
{
  40447c:	b538      	push	{r3, r4, r5, lr}
	used anyway to keep the examples simple, and to avoid reliance on a
	separate timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it
	was last reloaded? */
	sys_tick_counts = sys_tick_reload_value - *current_sys_tick_count;
  40447e:	4b0f      	ldr	r3, [pc, #60]	; (4044bc <get_run_time_counter_value+0x40>)
  404480:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	tick_count = xTaskGetTickCountFromISR();
  404482:	4b0f      	ldr	r3, [pc, #60]	; (4044c0 <get_run_time_counter_value+0x44>)
  404484:	4798      	blx	r3
  404486:	4605      	mov	r5, r0

	/* This is called from the context switch, so will be called from a
	critical section.  xTaskGetTickCountFromISR() contains its own critical
	section, and the ISR safe critical sections are not designed to nest,
	so reset the critical section. */
	ulReturn = portSET_INTERRUPT_MASK_FROM_ISR();
  404488:	4b0e      	ldr	r3, [pc, #56]	; (4044c4 <get_run_time_counter_value+0x48>)
  40448a:	4798      	blx	r3
	(void) ulReturn;

	/* Is there a SysTick interrupt pending? */
	if ((*interrupt_ctrl_statee & sys_tick_pending_bit) != 0UL) {
  40448c:	4b0e      	ldr	r3, [pc, #56]	; (4044c8 <get_run_time_counter_value+0x4c>)
  40448e:	681b      	ldr	r3, [r3, #0]
  404490:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  404494:	d103      	bne.n	40449e <get_run_time_counter_value+0x22>
	used anyway to keep the examples simple, and to avoid reliance on a
	separate timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it
	was last reloaded? */
	sys_tick_counts = sys_tick_reload_value - *current_sys_tick_count;
  404496:	f5c4 33ea 	rsb	r3, r4, #119808	; 0x1d400
  40449a:	33bb      	adds	r3, #187	; 0xbb
  40449c:	e005      	b.n	4044aa <get_run_time_counter_value+0x2e>

	/* Is there a SysTick interrupt pending? */
	if ((*interrupt_ctrl_statee & sys_tick_pending_bit) != 0UL) {
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		tick_count++;
  40449e:	3501      	adds	r5, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		sys_tick_counts = sys_tick_reload_value -
				*current_sys_tick_count;
  4044a0:	4b06      	ldr	r3, [pc, #24]	; (4044bc <get_run_time_counter_value+0x40>)
  4044a2:	681b      	ldr	r3, [r3, #0]
		but the tick count not yet incremented. */
		tick_count++;

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		sys_tick_counts = sys_tick_reload_value -
  4044a4:	f5c3 33ea 	rsb	r3, r3, #119808	; 0x1d400
  4044a8:	33bb      	adds	r3, #187	; 0xbb
				*current_sys_tick_count;
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = (tick_count * 10UL);
  4044aa:	eb05 0585 	add.w	r5, r5, r5, lsl #2

	/* Add on the number of tenths of a millisecond that have passed since
	the tick count last got updated. */
	ulReturn += (sys_tick_counts / clocks_per_10th_ms);
  4044ae:	4a07      	ldr	r2, [pc, #28]	; (4044cc <get_run_time_counter_value+0x50>)
  4044b0:	6810      	ldr	r0, [r2, #0]
  4044b2:	fbb3 f0f0 	udiv	r0, r3, r0

	return ulReturn;
}
  4044b6:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  4044ba:	bd38      	pop	{r3, r4, r5, pc}
  4044bc:	e000e018 	.word	0xe000e018
  4044c0:	004019b1 	.word	0x004019b1
  4044c4:	00400e91 	.word	0x00400e91
  4044c8:	e000ed04 	.word	0xe000ed04
  4044cc:	2001a890 	.word	0x2001a890

004044d0 <__libc_init_array>:
  4044d0:	b570      	push	{r4, r5, r6, lr}
  4044d2:	4e0f      	ldr	r6, [pc, #60]	; (404510 <__libc_init_array+0x40>)
  4044d4:	4d0f      	ldr	r5, [pc, #60]	; (404514 <__libc_init_array+0x44>)
  4044d6:	1b76      	subs	r6, r6, r5
  4044d8:	10b6      	asrs	r6, r6, #2
  4044da:	bf18      	it	ne
  4044dc:	2400      	movne	r4, #0
  4044de:	d005      	beq.n	4044ec <__libc_init_array+0x1c>
  4044e0:	3401      	adds	r4, #1
  4044e2:	f855 3b04 	ldr.w	r3, [r5], #4
  4044e6:	4798      	blx	r3
  4044e8:	42a6      	cmp	r6, r4
  4044ea:	d1f9      	bne.n	4044e0 <__libc_init_array+0x10>
  4044ec:	4e0a      	ldr	r6, [pc, #40]	; (404518 <__libc_init_array+0x48>)
  4044ee:	4d0b      	ldr	r5, [pc, #44]	; (40451c <__libc_init_array+0x4c>)
  4044f0:	1b76      	subs	r6, r6, r5
  4044f2:	f003 fc6d 	bl	407dd0 <_init>
  4044f6:	10b6      	asrs	r6, r6, #2
  4044f8:	bf18      	it	ne
  4044fa:	2400      	movne	r4, #0
  4044fc:	d006      	beq.n	40450c <__libc_init_array+0x3c>
  4044fe:	3401      	adds	r4, #1
  404500:	f855 3b04 	ldr.w	r3, [r5], #4
  404504:	4798      	blx	r3
  404506:	42a6      	cmp	r6, r4
  404508:	d1f9      	bne.n	4044fe <__libc_init_array+0x2e>
  40450a:	bd70      	pop	{r4, r5, r6, pc}
  40450c:	bd70      	pop	{r4, r5, r6, pc}
  40450e:	bf00      	nop
  404510:	00407ddc 	.word	0x00407ddc
  404514:	00407ddc 	.word	0x00407ddc
  404518:	00407de4 	.word	0x00407de4
  40451c:	00407ddc 	.word	0x00407ddc

00404520 <iprintf>:
  404520:	b40f      	push	{r0, r1, r2, r3}
  404522:	b500      	push	{lr}
  404524:	4907      	ldr	r1, [pc, #28]	; (404544 <iprintf+0x24>)
  404526:	b083      	sub	sp, #12
  404528:	ab04      	add	r3, sp, #16
  40452a:	6808      	ldr	r0, [r1, #0]
  40452c:	f853 2b04 	ldr.w	r2, [r3], #4
  404530:	6881      	ldr	r1, [r0, #8]
  404532:	9301      	str	r3, [sp, #4]
  404534:	f000 fa7a 	bl	404a2c <_vfiprintf_r>
  404538:	b003      	add	sp, #12
  40453a:	f85d eb04 	ldr.w	lr, [sp], #4
  40453e:	b004      	add	sp, #16
  404540:	4770      	bx	lr
  404542:	bf00      	nop
  404544:	20000458 	.word	0x20000458

00404548 <memcmp>:
  404548:	2a03      	cmp	r2, #3
  40454a:	b470      	push	{r4, r5, r6}
  40454c:	d926      	bls.n	40459c <memcmp+0x54>
  40454e:	ea40 0301 	orr.w	r3, r0, r1
  404552:	079b      	lsls	r3, r3, #30
  404554:	d011      	beq.n	40457a <memcmp+0x32>
  404556:	7804      	ldrb	r4, [r0, #0]
  404558:	780d      	ldrb	r5, [r1, #0]
  40455a:	42ac      	cmp	r4, r5
  40455c:	d122      	bne.n	4045a4 <memcmp+0x5c>
  40455e:	4402      	add	r2, r0
  404560:	1c43      	adds	r3, r0, #1
  404562:	e005      	b.n	404570 <memcmp+0x28>
  404564:	f813 4b01 	ldrb.w	r4, [r3], #1
  404568:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40456c:	42ac      	cmp	r4, r5
  40456e:	d119      	bne.n	4045a4 <memcmp+0x5c>
  404570:	4293      	cmp	r3, r2
  404572:	d1f7      	bne.n	404564 <memcmp+0x1c>
  404574:	2000      	movs	r0, #0
  404576:	bc70      	pop	{r4, r5, r6}
  404578:	4770      	bx	lr
  40457a:	460c      	mov	r4, r1
  40457c:	4603      	mov	r3, r0
  40457e:	681e      	ldr	r6, [r3, #0]
  404580:	6825      	ldr	r5, [r4, #0]
  404582:	42ae      	cmp	r6, r5
  404584:	4618      	mov	r0, r3
  404586:	4621      	mov	r1, r4
  404588:	f103 0304 	add.w	r3, r3, #4
  40458c:	f104 0404 	add.w	r4, r4, #4
  404590:	d104      	bne.n	40459c <memcmp+0x54>
  404592:	3a04      	subs	r2, #4
  404594:	2a03      	cmp	r2, #3
  404596:	4618      	mov	r0, r3
  404598:	4621      	mov	r1, r4
  40459a:	d8f0      	bhi.n	40457e <memcmp+0x36>
  40459c:	2a00      	cmp	r2, #0
  40459e:	d1da      	bne.n	404556 <memcmp+0xe>
  4045a0:	4610      	mov	r0, r2
  4045a2:	e7e8      	b.n	404576 <memcmp+0x2e>
  4045a4:	1b60      	subs	r0, r4, r5
  4045a6:	bc70      	pop	{r4, r5, r6}
  4045a8:	4770      	bx	lr
  4045aa:	bf00      	nop

004045ac <memcpy>:
  4045ac:	4684      	mov	ip, r0
  4045ae:	ea41 0300 	orr.w	r3, r1, r0
  4045b2:	f013 0303 	ands.w	r3, r3, #3
  4045b6:	d16d      	bne.n	404694 <memcpy+0xe8>
  4045b8:	3a40      	subs	r2, #64	; 0x40
  4045ba:	d341      	bcc.n	404640 <memcpy+0x94>
  4045bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4045c0:	f840 3b04 	str.w	r3, [r0], #4
  4045c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045c8:	f840 3b04 	str.w	r3, [r0], #4
  4045cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4045d0:	f840 3b04 	str.w	r3, [r0], #4
  4045d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045d8:	f840 3b04 	str.w	r3, [r0], #4
  4045dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4045e0:	f840 3b04 	str.w	r3, [r0], #4
  4045e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045e8:	f840 3b04 	str.w	r3, [r0], #4
  4045ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4045f0:	f840 3b04 	str.w	r3, [r0], #4
  4045f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045f8:	f840 3b04 	str.w	r3, [r0], #4
  4045fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404600:	f840 3b04 	str.w	r3, [r0], #4
  404604:	f851 3b04 	ldr.w	r3, [r1], #4
  404608:	f840 3b04 	str.w	r3, [r0], #4
  40460c:	f851 3b04 	ldr.w	r3, [r1], #4
  404610:	f840 3b04 	str.w	r3, [r0], #4
  404614:	f851 3b04 	ldr.w	r3, [r1], #4
  404618:	f840 3b04 	str.w	r3, [r0], #4
  40461c:	f851 3b04 	ldr.w	r3, [r1], #4
  404620:	f840 3b04 	str.w	r3, [r0], #4
  404624:	f851 3b04 	ldr.w	r3, [r1], #4
  404628:	f840 3b04 	str.w	r3, [r0], #4
  40462c:	f851 3b04 	ldr.w	r3, [r1], #4
  404630:	f840 3b04 	str.w	r3, [r0], #4
  404634:	f851 3b04 	ldr.w	r3, [r1], #4
  404638:	f840 3b04 	str.w	r3, [r0], #4
  40463c:	3a40      	subs	r2, #64	; 0x40
  40463e:	d2bd      	bcs.n	4045bc <memcpy+0x10>
  404640:	3230      	adds	r2, #48	; 0x30
  404642:	d311      	bcc.n	404668 <memcpy+0xbc>
  404644:	f851 3b04 	ldr.w	r3, [r1], #4
  404648:	f840 3b04 	str.w	r3, [r0], #4
  40464c:	f851 3b04 	ldr.w	r3, [r1], #4
  404650:	f840 3b04 	str.w	r3, [r0], #4
  404654:	f851 3b04 	ldr.w	r3, [r1], #4
  404658:	f840 3b04 	str.w	r3, [r0], #4
  40465c:	f851 3b04 	ldr.w	r3, [r1], #4
  404660:	f840 3b04 	str.w	r3, [r0], #4
  404664:	3a10      	subs	r2, #16
  404666:	d2ed      	bcs.n	404644 <memcpy+0x98>
  404668:	320c      	adds	r2, #12
  40466a:	d305      	bcc.n	404678 <memcpy+0xcc>
  40466c:	f851 3b04 	ldr.w	r3, [r1], #4
  404670:	f840 3b04 	str.w	r3, [r0], #4
  404674:	3a04      	subs	r2, #4
  404676:	d2f9      	bcs.n	40466c <memcpy+0xc0>
  404678:	3204      	adds	r2, #4
  40467a:	d008      	beq.n	40468e <memcpy+0xe2>
  40467c:	07d2      	lsls	r2, r2, #31
  40467e:	bf1c      	itt	ne
  404680:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404684:	f800 3b01 	strbne.w	r3, [r0], #1
  404688:	d301      	bcc.n	40468e <memcpy+0xe2>
  40468a:	880b      	ldrh	r3, [r1, #0]
  40468c:	8003      	strh	r3, [r0, #0]
  40468e:	4660      	mov	r0, ip
  404690:	4770      	bx	lr
  404692:	bf00      	nop
  404694:	2a08      	cmp	r2, #8
  404696:	d313      	bcc.n	4046c0 <memcpy+0x114>
  404698:	078b      	lsls	r3, r1, #30
  40469a:	d08d      	beq.n	4045b8 <memcpy+0xc>
  40469c:	f010 0303 	ands.w	r3, r0, #3
  4046a0:	d08a      	beq.n	4045b8 <memcpy+0xc>
  4046a2:	f1c3 0304 	rsb	r3, r3, #4
  4046a6:	1ad2      	subs	r2, r2, r3
  4046a8:	07db      	lsls	r3, r3, #31
  4046aa:	bf1c      	itt	ne
  4046ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4046b0:	f800 3b01 	strbne.w	r3, [r0], #1
  4046b4:	d380      	bcc.n	4045b8 <memcpy+0xc>
  4046b6:	f831 3b02 	ldrh.w	r3, [r1], #2
  4046ba:	f820 3b02 	strh.w	r3, [r0], #2
  4046be:	e77b      	b.n	4045b8 <memcpy+0xc>
  4046c0:	3a04      	subs	r2, #4
  4046c2:	d3d9      	bcc.n	404678 <memcpy+0xcc>
  4046c4:	3a01      	subs	r2, #1
  4046c6:	f811 3b01 	ldrb.w	r3, [r1], #1
  4046ca:	f800 3b01 	strb.w	r3, [r0], #1
  4046ce:	d2f9      	bcs.n	4046c4 <memcpy+0x118>
  4046d0:	780b      	ldrb	r3, [r1, #0]
  4046d2:	7003      	strb	r3, [r0, #0]
  4046d4:	784b      	ldrb	r3, [r1, #1]
  4046d6:	7043      	strb	r3, [r0, #1]
  4046d8:	788b      	ldrb	r3, [r1, #2]
  4046da:	7083      	strb	r3, [r0, #2]
  4046dc:	4660      	mov	r0, ip
  4046de:	4770      	bx	lr

004046e0 <memset>:
  4046e0:	b470      	push	{r4, r5, r6}
  4046e2:	0784      	lsls	r4, r0, #30
  4046e4:	d046      	beq.n	404774 <memset+0x94>
  4046e6:	1e54      	subs	r4, r2, #1
  4046e8:	2a00      	cmp	r2, #0
  4046ea:	d041      	beq.n	404770 <memset+0x90>
  4046ec:	b2cd      	uxtb	r5, r1
  4046ee:	4603      	mov	r3, r0
  4046f0:	e002      	b.n	4046f8 <memset+0x18>
  4046f2:	1e62      	subs	r2, r4, #1
  4046f4:	b3e4      	cbz	r4, 404770 <memset+0x90>
  4046f6:	4614      	mov	r4, r2
  4046f8:	f803 5b01 	strb.w	r5, [r3], #1
  4046fc:	079a      	lsls	r2, r3, #30
  4046fe:	d1f8      	bne.n	4046f2 <memset+0x12>
  404700:	2c03      	cmp	r4, #3
  404702:	d92e      	bls.n	404762 <memset+0x82>
  404704:	b2cd      	uxtb	r5, r1
  404706:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40470a:	2c0f      	cmp	r4, #15
  40470c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404710:	d919      	bls.n	404746 <memset+0x66>
  404712:	f103 0210 	add.w	r2, r3, #16
  404716:	4626      	mov	r6, r4
  404718:	3e10      	subs	r6, #16
  40471a:	2e0f      	cmp	r6, #15
  40471c:	f842 5c10 	str.w	r5, [r2, #-16]
  404720:	f842 5c0c 	str.w	r5, [r2, #-12]
  404724:	f842 5c08 	str.w	r5, [r2, #-8]
  404728:	f842 5c04 	str.w	r5, [r2, #-4]
  40472c:	f102 0210 	add.w	r2, r2, #16
  404730:	d8f2      	bhi.n	404718 <memset+0x38>
  404732:	f1a4 0210 	sub.w	r2, r4, #16
  404736:	f022 020f 	bic.w	r2, r2, #15
  40473a:	f004 040f 	and.w	r4, r4, #15
  40473e:	3210      	adds	r2, #16
  404740:	2c03      	cmp	r4, #3
  404742:	4413      	add	r3, r2
  404744:	d90d      	bls.n	404762 <memset+0x82>
  404746:	461e      	mov	r6, r3
  404748:	4622      	mov	r2, r4
  40474a:	3a04      	subs	r2, #4
  40474c:	2a03      	cmp	r2, #3
  40474e:	f846 5b04 	str.w	r5, [r6], #4
  404752:	d8fa      	bhi.n	40474a <memset+0x6a>
  404754:	1f22      	subs	r2, r4, #4
  404756:	f022 0203 	bic.w	r2, r2, #3
  40475a:	3204      	adds	r2, #4
  40475c:	4413      	add	r3, r2
  40475e:	f004 0403 	and.w	r4, r4, #3
  404762:	b12c      	cbz	r4, 404770 <memset+0x90>
  404764:	b2c9      	uxtb	r1, r1
  404766:	441c      	add	r4, r3
  404768:	f803 1b01 	strb.w	r1, [r3], #1
  40476c:	42a3      	cmp	r3, r4
  40476e:	d1fb      	bne.n	404768 <memset+0x88>
  404770:	bc70      	pop	{r4, r5, r6}
  404772:	4770      	bx	lr
  404774:	4614      	mov	r4, r2
  404776:	4603      	mov	r3, r0
  404778:	e7c2      	b.n	404700 <memset+0x20>
  40477a:	bf00      	nop

0040477c <_puts_r>:
  40477c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40477e:	4604      	mov	r4, r0
  404780:	b089      	sub	sp, #36	; 0x24
  404782:	4608      	mov	r0, r1
  404784:	460d      	mov	r5, r1
  404786:	f000 f8b3 	bl	4048f0 <strlen>
  40478a:	68a3      	ldr	r3, [r4, #8]
  40478c:	4f11      	ldr	r7, [pc, #68]	; (4047d4 <_puts_r+0x58>)
  40478e:	899a      	ldrh	r2, [r3, #12]
  404790:	9504      	str	r5, [sp, #16]
  404792:	2102      	movs	r1, #2
  404794:	f100 0e01 	add.w	lr, r0, #1
  404798:	2601      	movs	r6, #1
  40479a:	ad04      	add	r5, sp, #16
  40479c:	9102      	str	r1, [sp, #8]
  40479e:	0491      	lsls	r1, r2, #18
  4047a0:	9005      	str	r0, [sp, #20]
  4047a2:	f8cd e00c 	str.w	lr, [sp, #12]
  4047a6:	9706      	str	r7, [sp, #24]
  4047a8:	9607      	str	r6, [sp, #28]
  4047aa:	9501      	str	r5, [sp, #4]
  4047ac:	d406      	bmi.n	4047bc <_puts_r+0x40>
  4047ae:	6e59      	ldr	r1, [r3, #100]	; 0x64
  4047b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4047b4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4047b8:	819a      	strh	r2, [r3, #12]
  4047ba:	6659      	str	r1, [r3, #100]	; 0x64
  4047bc:	4620      	mov	r0, r4
  4047be:	4619      	mov	r1, r3
  4047c0:	aa01      	add	r2, sp, #4
  4047c2:	f001 fad7 	bl	405d74 <__sfvwrite_r>
  4047c6:	2800      	cmp	r0, #0
  4047c8:	bf14      	ite	ne
  4047ca:	f04f 30ff 	movne.w	r0, #4294967295
  4047ce:	200a      	moveq	r0, #10
  4047d0:	b009      	add	sp, #36	; 0x24
  4047d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4047d4:	00407a0c 	.word	0x00407a0c

004047d8 <puts>:
  4047d8:	4b02      	ldr	r3, [pc, #8]	; (4047e4 <puts+0xc>)
  4047da:	4601      	mov	r1, r0
  4047dc:	6818      	ldr	r0, [r3, #0]
  4047de:	f7ff bfcd 	b.w	40477c <_puts_r>
  4047e2:	bf00      	nop
  4047e4:	20000458 	.word	0x20000458

004047e8 <setbuf>:
  4047e8:	2900      	cmp	r1, #0
  4047ea:	bf0c      	ite	eq
  4047ec:	2202      	moveq	r2, #2
  4047ee:	2200      	movne	r2, #0
  4047f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4047f4:	f000 b800 	b.w	4047f8 <setvbuf>

004047f8 <setvbuf>:
  4047f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4047fc:	4c3a      	ldr	r4, [pc, #232]	; (4048e8 <setvbuf+0xf0>)
  4047fe:	6826      	ldr	r6, [r4, #0]
  404800:	460d      	mov	r5, r1
  404802:	4604      	mov	r4, r0
  404804:	4690      	mov	r8, r2
  404806:	461f      	mov	r7, r3
  404808:	b116      	cbz	r6, 404810 <setvbuf+0x18>
  40480a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  40480c:	2b00      	cmp	r3, #0
  40480e:	d03c      	beq.n	40488a <setvbuf+0x92>
  404810:	f1b8 0f02 	cmp.w	r8, #2
  404814:	d82f      	bhi.n	404876 <setvbuf+0x7e>
  404816:	2f00      	cmp	r7, #0
  404818:	db2d      	blt.n	404876 <setvbuf+0x7e>
  40481a:	4621      	mov	r1, r4
  40481c:	4630      	mov	r0, r6
  40481e:	f001 f865 	bl	4058ec <_fflush_r>
  404822:	89a1      	ldrh	r1, [r4, #12]
  404824:	2300      	movs	r3, #0
  404826:	6063      	str	r3, [r4, #4]
  404828:	61a3      	str	r3, [r4, #24]
  40482a:	060b      	lsls	r3, r1, #24
  40482c:	d427      	bmi.n	40487e <setvbuf+0x86>
  40482e:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  404832:	b289      	uxth	r1, r1
  404834:	f1b8 0f02 	cmp.w	r8, #2
  404838:	81a1      	strh	r1, [r4, #12]
  40483a:	d02a      	beq.n	404892 <setvbuf+0x9a>
  40483c:	2d00      	cmp	r5, #0
  40483e:	d036      	beq.n	4048ae <setvbuf+0xb6>
  404840:	f1b8 0f01 	cmp.w	r8, #1
  404844:	d011      	beq.n	40486a <setvbuf+0x72>
  404846:	b289      	uxth	r1, r1
  404848:	f001 0008 	and.w	r0, r1, #8
  40484c:	4b27      	ldr	r3, [pc, #156]	; (4048ec <setvbuf+0xf4>)
  40484e:	63f3      	str	r3, [r6, #60]	; 0x3c
  404850:	b280      	uxth	r0, r0
  404852:	6025      	str	r5, [r4, #0]
  404854:	6125      	str	r5, [r4, #16]
  404856:	6167      	str	r7, [r4, #20]
  404858:	b178      	cbz	r0, 40487a <setvbuf+0x82>
  40485a:	f011 0f03 	tst.w	r1, #3
  40485e:	bf18      	it	ne
  404860:	2700      	movne	r7, #0
  404862:	60a7      	str	r7, [r4, #8]
  404864:	2000      	movs	r0, #0
  404866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40486a:	f041 0101 	orr.w	r1, r1, #1
  40486e:	427b      	negs	r3, r7
  404870:	81a1      	strh	r1, [r4, #12]
  404872:	61a3      	str	r3, [r4, #24]
  404874:	e7e7      	b.n	404846 <setvbuf+0x4e>
  404876:	f04f 30ff 	mov.w	r0, #4294967295
  40487a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40487e:	6921      	ldr	r1, [r4, #16]
  404880:	4630      	mov	r0, r6
  404882:	f001 f99f 	bl	405bc4 <_free_r>
  404886:	89a1      	ldrh	r1, [r4, #12]
  404888:	e7d1      	b.n	40482e <setvbuf+0x36>
  40488a:	4630      	mov	r0, r6
  40488c:	f001 f8c2 	bl	405a14 <__sinit>
  404890:	e7be      	b.n	404810 <setvbuf+0x18>
  404892:	2000      	movs	r0, #0
  404894:	f104 0343 	add.w	r3, r4, #67	; 0x43
  404898:	f041 0102 	orr.w	r1, r1, #2
  40489c:	2500      	movs	r5, #0
  40489e:	2201      	movs	r2, #1
  4048a0:	81a1      	strh	r1, [r4, #12]
  4048a2:	60a5      	str	r5, [r4, #8]
  4048a4:	6023      	str	r3, [r4, #0]
  4048a6:	6123      	str	r3, [r4, #16]
  4048a8:	6162      	str	r2, [r4, #20]
  4048aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4048ae:	2f00      	cmp	r7, #0
  4048b0:	bf08      	it	eq
  4048b2:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  4048b6:	4638      	mov	r0, r7
  4048b8:	f001 fc8c 	bl	4061d4 <malloc>
  4048bc:	4605      	mov	r5, r0
  4048be:	b128      	cbz	r0, 4048cc <setvbuf+0xd4>
  4048c0:	89a1      	ldrh	r1, [r4, #12]
  4048c2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4048c6:	b289      	uxth	r1, r1
  4048c8:	81a1      	strh	r1, [r4, #12]
  4048ca:	e7b9      	b.n	404840 <setvbuf+0x48>
  4048cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4048d0:	f001 fc80 	bl	4061d4 <malloc>
  4048d4:	4605      	mov	r5, r0
  4048d6:	b918      	cbnz	r0, 4048e0 <setvbuf+0xe8>
  4048d8:	89a1      	ldrh	r1, [r4, #12]
  4048da:	f04f 30ff 	mov.w	r0, #4294967295
  4048de:	e7d9      	b.n	404894 <setvbuf+0x9c>
  4048e0:	f44f 6780 	mov.w	r7, #1024	; 0x400
  4048e4:	e7ec      	b.n	4048c0 <setvbuf+0xc8>
  4048e6:	bf00      	nop
  4048e8:	20000458 	.word	0x20000458
  4048ec:	00405919 	.word	0x00405919

004048f0 <strlen>:
  4048f0:	f020 0103 	bic.w	r1, r0, #3
  4048f4:	f010 0003 	ands.w	r0, r0, #3
  4048f8:	f1c0 0000 	rsb	r0, r0, #0
  4048fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404900:	f100 0c04 	add.w	ip, r0, #4
  404904:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  404908:	f06f 0200 	mvn.w	r2, #0
  40490c:	bf1c      	itt	ne
  40490e:	fa22 f20c 	lsrne.w	r2, r2, ip
  404912:	4313      	orrne	r3, r2
  404914:	f04f 0c01 	mov.w	ip, #1
  404918:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40491c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  404920:	eba3 020c 	sub.w	r2, r3, ip
  404924:	ea22 0203 	bic.w	r2, r2, r3
  404928:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40492c:	bf04      	itt	eq
  40492e:	f851 3b04 	ldreq.w	r3, [r1], #4
  404932:	3004      	addeq	r0, #4
  404934:	d0f4      	beq.n	404920 <strlen+0x30>
  404936:	f1c2 0100 	rsb	r1, r2, #0
  40493a:	ea02 0201 	and.w	r2, r2, r1
  40493e:	fab2 f282 	clz	r2, r2
  404942:	f1c2 021f 	rsb	r2, r2, #31
  404946:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40494a:	4770      	bx	lr

0040494c <strncpy>:
  40494c:	ea40 0301 	orr.w	r3, r0, r1
  404950:	079b      	lsls	r3, r3, #30
  404952:	b470      	push	{r4, r5, r6}
  404954:	d12b      	bne.n	4049ae <strncpy+0x62>
  404956:	2a03      	cmp	r2, #3
  404958:	d929      	bls.n	4049ae <strncpy+0x62>
  40495a:	460c      	mov	r4, r1
  40495c:	4603      	mov	r3, r0
  40495e:	4621      	mov	r1, r4
  404960:	f854 6b04 	ldr.w	r6, [r4], #4
  404964:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  404968:	ea25 0506 	bic.w	r5, r5, r6
  40496c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  404970:	d105      	bne.n	40497e <strncpy+0x32>
  404972:	3a04      	subs	r2, #4
  404974:	2a03      	cmp	r2, #3
  404976:	f843 6b04 	str.w	r6, [r3], #4
  40497a:	4621      	mov	r1, r4
  40497c:	d8ef      	bhi.n	40495e <strncpy+0x12>
  40497e:	b1a2      	cbz	r2, 4049aa <strncpy+0x5e>
  404980:	780c      	ldrb	r4, [r1, #0]
  404982:	701c      	strb	r4, [r3, #0]
  404984:	3a01      	subs	r2, #1
  404986:	3301      	adds	r3, #1
  404988:	3101      	adds	r1, #1
  40498a:	b13c      	cbz	r4, 40499c <strncpy+0x50>
  40498c:	b16a      	cbz	r2, 4049aa <strncpy+0x5e>
  40498e:	f811 4b01 	ldrb.w	r4, [r1], #1
  404992:	f803 4b01 	strb.w	r4, [r3], #1
  404996:	3a01      	subs	r2, #1
  404998:	2c00      	cmp	r4, #0
  40499a:	d1f7      	bne.n	40498c <strncpy+0x40>
  40499c:	b12a      	cbz	r2, 4049aa <strncpy+0x5e>
  40499e:	441a      	add	r2, r3
  4049a0:	2100      	movs	r1, #0
  4049a2:	f803 1b01 	strb.w	r1, [r3], #1
  4049a6:	4293      	cmp	r3, r2
  4049a8:	d1fb      	bne.n	4049a2 <strncpy+0x56>
  4049aa:	bc70      	pop	{r4, r5, r6}
  4049ac:	4770      	bx	lr
  4049ae:	4603      	mov	r3, r0
  4049b0:	e7e5      	b.n	40497e <strncpy+0x32>
  4049b2:	bf00      	nop

004049b4 <__sprint_r.part.0>:
  4049b4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4049b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4049ba:	049c      	lsls	r4, r3, #18
  4049bc:	460f      	mov	r7, r1
  4049be:	4692      	mov	sl, r2
  4049c0:	d52b      	bpl.n	404a1a <__sprint_r.part.0+0x66>
  4049c2:	6893      	ldr	r3, [r2, #8]
  4049c4:	6812      	ldr	r2, [r2, #0]
  4049c6:	b333      	cbz	r3, 404a16 <__sprint_r.part.0+0x62>
  4049c8:	4680      	mov	r8, r0
  4049ca:	f102 0908 	add.w	r9, r2, #8
  4049ce:	e919 0060 	ldmdb	r9, {r5, r6}
  4049d2:	08b6      	lsrs	r6, r6, #2
  4049d4:	d017      	beq.n	404a06 <__sprint_r.part.0+0x52>
  4049d6:	3d04      	subs	r5, #4
  4049d8:	2400      	movs	r4, #0
  4049da:	e001      	b.n	4049e0 <__sprint_r.part.0+0x2c>
  4049dc:	42a6      	cmp	r6, r4
  4049de:	d010      	beq.n	404a02 <__sprint_r.part.0+0x4e>
  4049e0:	4640      	mov	r0, r8
  4049e2:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4049e6:	463a      	mov	r2, r7
  4049e8:	f001 f88c 	bl	405b04 <_fputwc_r>
  4049ec:	1c43      	adds	r3, r0, #1
  4049ee:	f104 0401 	add.w	r4, r4, #1
  4049f2:	d1f3      	bne.n	4049dc <__sprint_r.part.0+0x28>
  4049f4:	2300      	movs	r3, #0
  4049f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4049fa:	f8ca 3004 	str.w	r3, [sl, #4]
  4049fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404a02:	f8da 3008 	ldr.w	r3, [sl, #8]
  404a06:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  404a0a:	f8ca 3008 	str.w	r3, [sl, #8]
  404a0e:	f109 0908 	add.w	r9, r9, #8
  404a12:	2b00      	cmp	r3, #0
  404a14:	d1db      	bne.n	4049ce <__sprint_r.part.0+0x1a>
  404a16:	2000      	movs	r0, #0
  404a18:	e7ec      	b.n	4049f4 <__sprint_r.part.0+0x40>
  404a1a:	f001 f9ab 	bl	405d74 <__sfvwrite_r>
  404a1e:	2300      	movs	r3, #0
  404a20:	f8ca 3008 	str.w	r3, [sl, #8]
  404a24:	f8ca 3004 	str.w	r3, [sl, #4]
  404a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404a2c <_vfiprintf_r>:
  404a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a30:	b0ab      	sub	sp, #172	; 0xac
  404a32:	461c      	mov	r4, r3
  404a34:	9100      	str	r1, [sp, #0]
  404a36:	4693      	mov	fp, r2
  404a38:	9304      	str	r3, [sp, #16]
  404a3a:	9001      	str	r0, [sp, #4]
  404a3c:	b118      	cbz	r0, 404a46 <_vfiprintf_r+0x1a>
  404a3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404a40:	2b00      	cmp	r3, #0
  404a42:	f000 80e3 	beq.w	404c0c <_vfiprintf_r+0x1e0>
  404a46:	9b00      	ldr	r3, [sp, #0]
  404a48:	8999      	ldrh	r1, [r3, #12]
  404a4a:	b28a      	uxth	r2, r1
  404a4c:	0490      	lsls	r0, r2, #18
  404a4e:	d408      	bmi.n	404a62 <_vfiprintf_r+0x36>
  404a50:	4618      	mov	r0, r3
  404a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  404a54:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  404a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404a5c:	8182      	strh	r2, [r0, #12]
  404a5e:	6643      	str	r3, [r0, #100]	; 0x64
  404a60:	b292      	uxth	r2, r2
  404a62:	0711      	lsls	r1, r2, #28
  404a64:	f140 80b2 	bpl.w	404bcc <_vfiprintf_r+0x1a0>
  404a68:	9b00      	ldr	r3, [sp, #0]
  404a6a:	691b      	ldr	r3, [r3, #16]
  404a6c:	2b00      	cmp	r3, #0
  404a6e:	f000 80ad 	beq.w	404bcc <_vfiprintf_r+0x1a0>
  404a72:	f002 021a 	and.w	r2, r2, #26
  404a76:	2a0a      	cmp	r2, #10
  404a78:	f000 80b4 	beq.w	404be4 <_vfiprintf_r+0x1b8>
  404a7c:	2300      	movs	r3, #0
  404a7e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  404a82:	9309      	str	r3, [sp, #36]	; 0x24
  404a84:	930f      	str	r3, [sp, #60]	; 0x3c
  404a86:	930e      	str	r3, [sp, #56]	; 0x38
  404a88:	9302      	str	r3, [sp, #8]
  404a8a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  404a8e:	4654      	mov	r4, sl
  404a90:	f89b 3000 	ldrb.w	r3, [fp]
  404a94:	2b00      	cmp	r3, #0
  404a96:	f000 84a3 	beq.w	4053e0 <_vfiprintf_r+0x9b4>
  404a9a:	2b25      	cmp	r3, #37	; 0x25
  404a9c:	f000 84a0 	beq.w	4053e0 <_vfiprintf_r+0x9b4>
  404aa0:	465a      	mov	r2, fp
  404aa2:	e001      	b.n	404aa8 <_vfiprintf_r+0x7c>
  404aa4:	2b25      	cmp	r3, #37	; 0x25
  404aa6:	d003      	beq.n	404ab0 <_vfiprintf_r+0x84>
  404aa8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  404aac:	2b00      	cmp	r3, #0
  404aae:	d1f9      	bne.n	404aa4 <_vfiprintf_r+0x78>
  404ab0:	ebcb 0602 	rsb	r6, fp, r2
  404ab4:	4615      	mov	r5, r2
  404ab6:	b196      	cbz	r6, 404ade <_vfiprintf_r+0xb2>
  404ab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404aba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404abc:	f8c4 b000 	str.w	fp, [r4]
  404ac0:	3301      	adds	r3, #1
  404ac2:	4432      	add	r2, r6
  404ac4:	2b07      	cmp	r3, #7
  404ac6:	6066      	str	r6, [r4, #4]
  404ac8:	920f      	str	r2, [sp, #60]	; 0x3c
  404aca:	930e      	str	r3, [sp, #56]	; 0x38
  404acc:	dd79      	ble.n	404bc2 <_vfiprintf_r+0x196>
  404ace:	2a00      	cmp	r2, #0
  404ad0:	f040 84af 	bne.w	405432 <_vfiprintf_r+0xa06>
  404ad4:	9b02      	ldr	r3, [sp, #8]
  404ad6:	920e      	str	r2, [sp, #56]	; 0x38
  404ad8:	4433      	add	r3, r6
  404ada:	4654      	mov	r4, sl
  404adc:	9302      	str	r3, [sp, #8]
  404ade:	782b      	ldrb	r3, [r5, #0]
  404ae0:	2b00      	cmp	r3, #0
  404ae2:	f000 8360 	beq.w	4051a6 <_vfiprintf_r+0x77a>
  404ae6:	2100      	movs	r1, #0
  404ae8:	f04f 0300 	mov.w	r3, #0
  404aec:	f04f 3cff 	mov.w	ip, #4294967295
  404af0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404af4:	1c68      	adds	r0, r5, #1
  404af6:	786b      	ldrb	r3, [r5, #1]
  404af8:	4688      	mov	r8, r1
  404afa:	460d      	mov	r5, r1
  404afc:	4666      	mov	r6, ip
  404afe:	f100 0b01 	add.w	fp, r0, #1
  404b02:	f1a3 0220 	sub.w	r2, r3, #32
  404b06:	2a58      	cmp	r2, #88	; 0x58
  404b08:	f200 82ab 	bhi.w	405062 <_vfiprintf_r+0x636>
  404b0c:	e8df f012 	tbh	[pc, r2, lsl #1]
  404b10:	02a9029b 	.word	0x02a9029b
  404b14:	02a302a9 	.word	0x02a302a9
  404b18:	02a902a9 	.word	0x02a902a9
  404b1c:	02a902a9 	.word	0x02a902a9
  404b20:	02a902a9 	.word	0x02a902a9
  404b24:	02620255 	.word	0x02620255
  404b28:	010d02a9 	.word	0x010d02a9
  404b2c:	02a9026e 	.word	0x02a9026e
  404b30:	012f0129 	.word	0x012f0129
  404b34:	012f012f 	.word	0x012f012f
  404b38:	012f012f 	.word	0x012f012f
  404b3c:	012f012f 	.word	0x012f012f
  404b40:	012f012f 	.word	0x012f012f
  404b44:	02a902a9 	.word	0x02a902a9
  404b48:	02a902a9 	.word	0x02a902a9
  404b4c:	02a902a9 	.word	0x02a902a9
  404b50:	02a902a9 	.word	0x02a902a9
  404b54:	02a902a9 	.word	0x02a902a9
  404b58:	02a9013d 	.word	0x02a9013d
  404b5c:	02a902a9 	.word	0x02a902a9
  404b60:	02a902a9 	.word	0x02a902a9
  404b64:	02a902a9 	.word	0x02a902a9
  404b68:	02a902a9 	.word	0x02a902a9
  404b6c:	017402a9 	.word	0x017402a9
  404b70:	02a902a9 	.word	0x02a902a9
  404b74:	02a902a9 	.word	0x02a902a9
  404b78:	018b02a9 	.word	0x018b02a9
  404b7c:	02a902a9 	.word	0x02a902a9
  404b80:	02a901a3 	.word	0x02a901a3
  404b84:	02a902a9 	.word	0x02a902a9
  404b88:	02a902a9 	.word	0x02a902a9
  404b8c:	02a902a9 	.word	0x02a902a9
  404b90:	02a902a9 	.word	0x02a902a9
  404b94:	01c702a9 	.word	0x01c702a9
  404b98:	02a901da 	.word	0x02a901da
  404b9c:	02a902a9 	.word	0x02a902a9
  404ba0:	01da0123 	.word	0x01da0123
  404ba4:	02a902a9 	.word	0x02a902a9
  404ba8:	02a9024c 	.word	0x02a9024c
  404bac:	0113028a 	.word	0x0113028a
  404bb0:	020701f3 	.word	0x020701f3
  404bb4:	020d02a9 	.word	0x020d02a9
  404bb8:	008102a9 	.word	0x008102a9
  404bbc:	02a902a9 	.word	0x02a902a9
  404bc0:	0233      	.short	0x0233
  404bc2:	3408      	adds	r4, #8
  404bc4:	9b02      	ldr	r3, [sp, #8]
  404bc6:	4433      	add	r3, r6
  404bc8:	9302      	str	r3, [sp, #8]
  404bca:	e788      	b.n	404ade <_vfiprintf_r+0xb2>
  404bcc:	9801      	ldr	r0, [sp, #4]
  404bce:	9900      	ldr	r1, [sp, #0]
  404bd0:	f000 fd70 	bl	4056b4 <__swsetup_r>
  404bd4:	b9a8      	cbnz	r0, 404c02 <_vfiprintf_r+0x1d6>
  404bd6:	9b00      	ldr	r3, [sp, #0]
  404bd8:	899a      	ldrh	r2, [r3, #12]
  404bda:	f002 021a 	and.w	r2, r2, #26
  404bde:	2a0a      	cmp	r2, #10
  404be0:	f47f af4c 	bne.w	404a7c <_vfiprintf_r+0x50>
  404be4:	9b00      	ldr	r3, [sp, #0]
  404be6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  404bea:	2b00      	cmp	r3, #0
  404bec:	f6ff af46 	blt.w	404a7c <_vfiprintf_r+0x50>
  404bf0:	9801      	ldr	r0, [sp, #4]
  404bf2:	9900      	ldr	r1, [sp, #0]
  404bf4:	465a      	mov	r2, fp
  404bf6:	4623      	mov	r3, r4
  404bf8:	f000 fd20 	bl	40563c <__sbprintf>
  404bfc:	b02b      	add	sp, #172	; 0xac
  404bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c02:	f04f 30ff 	mov.w	r0, #4294967295
  404c06:	b02b      	add	sp, #172	; 0xac
  404c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c0c:	f000 ff02 	bl	405a14 <__sinit>
  404c10:	e719      	b.n	404a46 <_vfiprintf_r+0x1a>
  404c12:	f018 0f20 	tst.w	r8, #32
  404c16:	9503      	str	r5, [sp, #12]
  404c18:	46b4      	mov	ip, r6
  404c1a:	f000 810c 	beq.w	404e36 <_vfiprintf_r+0x40a>
  404c1e:	9b04      	ldr	r3, [sp, #16]
  404c20:	3307      	adds	r3, #7
  404c22:	f023 0307 	bic.w	r3, r3, #7
  404c26:	f103 0208 	add.w	r2, r3, #8
  404c2a:	e9d3 6700 	ldrd	r6, r7, [r3]
  404c2e:	9204      	str	r2, [sp, #16]
  404c30:	2301      	movs	r3, #1
  404c32:	f04f 0200 	mov.w	r2, #0
  404c36:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404c3a:	46e1      	mov	r9, ip
  404c3c:	2500      	movs	r5, #0
  404c3e:	f1bc 0f00 	cmp.w	ip, #0
  404c42:	bfa8      	it	ge
  404c44:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  404c48:	ea56 0207 	orrs.w	r2, r6, r7
  404c4c:	f040 80c4 	bne.w	404dd8 <_vfiprintf_r+0x3ac>
  404c50:	f1bc 0f00 	cmp.w	ip, #0
  404c54:	f000 8381 	beq.w	40535a <_vfiprintf_r+0x92e>
  404c58:	2b01      	cmp	r3, #1
  404c5a:	f000 80c5 	beq.w	404de8 <_vfiprintf_r+0x3bc>
  404c5e:	2b02      	cmp	r3, #2
  404c60:	f000 8387 	beq.w	405372 <_vfiprintf_r+0x946>
  404c64:	4651      	mov	r1, sl
  404c66:	08f2      	lsrs	r2, r6, #3
  404c68:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404c6c:	08f8      	lsrs	r0, r7, #3
  404c6e:	f006 0307 	and.w	r3, r6, #7
  404c72:	4607      	mov	r7, r0
  404c74:	4616      	mov	r6, r2
  404c76:	3330      	adds	r3, #48	; 0x30
  404c78:	ea56 0207 	orrs.w	r2, r6, r7
  404c7c:	f801 3d01 	strb.w	r3, [r1, #-1]!
  404c80:	d1f1      	bne.n	404c66 <_vfiprintf_r+0x23a>
  404c82:	f018 0f01 	tst.w	r8, #1
  404c86:	9107      	str	r1, [sp, #28]
  404c88:	f040 83fc 	bne.w	405484 <_vfiprintf_r+0xa58>
  404c8c:	ebc1 090a 	rsb	r9, r1, sl
  404c90:	45e1      	cmp	r9, ip
  404c92:	464e      	mov	r6, r9
  404c94:	bfb8      	it	lt
  404c96:	4666      	movlt	r6, ip
  404c98:	b105      	cbz	r5, 404c9c <_vfiprintf_r+0x270>
  404c9a:	3601      	adds	r6, #1
  404c9c:	f018 0302 	ands.w	r3, r8, #2
  404ca0:	9305      	str	r3, [sp, #20]
  404ca2:	bf18      	it	ne
  404ca4:	3602      	addne	r6, #2
  404ca6:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  404caa:	9306      	str	r3, [sp, #24]
  404cac:	f040 81fa 	bne.w	4050a4 <_vfiprintf_r+0x678>
  404cb0:	9b03      	ldr	r3, [sp, #12]
  404cb2:	1b9d      	subs	r5, r3, r6
  404cb4:	2d00      	cmp	r5, #0
  404cb6:	f340 81f5 	ble.w	4050a4 <_vfiprintf_r+0x678>
  404cba:	2d10      	cmp	r5, #16
  404cbc:	f340 848c 	ble.w	4055d8 <_vfiprintf_r+0xbac>
  404cc0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  404cc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404cc6:	4fc6      	ldr	r7, [pc, #792]	; (404fe0 <_vfiprintf_r+0x5b4>)
  404cc8:	4620      	mov	r0, r4
  404cca:	2310      	movs	r3, #16
  404ccc:	4664      	mov	r4, ip
  404cce:	4671      	mov	r1, lr
  404cd0:	4684      	mov	ip, r0
  404cd2:	e007      	b.n	404ce4 <_vfiprintf_r+0x2b8>
  404cd4:	f101 0e02 	add.w	lr, r1, #2
  404cd8:	f10c 0c08 	add.w	ip, ip, #8
  404cdc:	4601      	mov	r1, r0
  404cde:	3d10      	subs	r5, #16
  404ce0:	2d10      	cmp	r5, #16
  404ce2:	dd13      	ble.n	404d0c <_vfiprintf_r+0x2e0>
  404ce4:	1c48      	adds	r0, r1, #1
  404ce6:	3210      	adds	r2, #16
  404ce8:	2807      	cmp	r0, #7
  404cea:	920f      	str	r2, [sp, #60]	; 0x3c
  404cec:	f8cc 7000 	str.w	r7, [ip]
  404cf0:	f8cc 3004 	str.w	r3, [ip, #4]
  404cf4:	900e      	str	r0, [sp, #56]	; 0x38
  404cf6:	dded      	ble.n	404cd4 <_vfiprintf_r+0x2a8>
  404cf8:	2a00      	cmp	r2, #0
  404cfa:	f040 81c3 	bne.w	405084 <_vfiprintf_r+0x658>
  404cfe:	3d10      	subs	r5, #16
  404d00:	2d10      	cmp	r5, #16
  404d02:	4611      	mov	r1, r2
  404d04:	f04f 0e01 	mov.w	lr, #1
  404d08:	46d4      	mov	ip, sl
  404d0a:	dceb      	bgt.n	404ce4 <_vfiprintf_r+0x2b8>
  404d0c:	4663      	mov	r3, ip
  404d0e:	4671      	mov	r1, lr
  404d10:	46a4      	mov	ip, r4
  404d12:	461c      	mov	r4, r3
  404d14:	442a      	add	r2, r5
  404d16:	2907      	cmp	r1, #7
  404d18:	920f      	str	r2, [sp, #60]	; 0x3c
  404d1a:	6027      	str	r7, [r4, #0]
  404d1c:	6065      	str	r5, [r4, #4]
  404d1e:	910e      	str	r1, [sp, #56]	; 0x38
  404d20:	f300 8346 	bgt.w	4053b0 <_vfiprintf_r+0x984>
  404d24:	3408      	adds	r4, #8
  404d26:	1c48      	adds	r0, r1, #1
  404d28:	e1bf      	b.n	4050aa <_vfiprintf_r+0x67e>
  404d2a:	4658      	mov	r0, fp
  404d2c:	f048 0804 	orr.w	r8, r8, #4
  404d30:	f89b 3000 	ldrb.w	r3, [fp]
  404d34:	e6e3      	b.n	404afe <_vfiprintf_r+0xd2>
  404d36:	f018 0320 	ands.w	r3, r8, #32
  404d3a:	9503      	str	r5, [sp, #12]
  404d3c:	46b4      	mov	ip, r6
  404d3e:	d062      	beq.n	404e06 <_vfiprintf_r+0x3da>
  404d40:	9b04      	ldr	r3, [sp, #16]
  404d42:	3307      	adds	r3, #7
  404d44:	f023 0307 	bic.w	r3, r3, #7
  404d48:	f103 0208 	add.w	r2, r3, #8
  404d4c:	e9d3 6700 	ldrd	r6, r7, [r3]
  404d50:	9204      	str	r2, [sp, #16]
  404d52:	2300      	movs	r3, #0
  404d54:	e76d      	b.n	404c32 <_vfiprintf_r+0x206>
  404d56:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  404d5a:	f89b 3000 	ldrb.w	r3, [fp]
  404d5e:	4658      	mov	r0, fp
  404d60:	e6cd      	b.n	404afe <_vfiprintf_r+0xd2>
  404d62:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  404d66:	f89b 3000 	ldrb.w	r3, [fp]
  404d6a:	4658      	mov	r0, fp
  404d6c:	e6c7      	b.n	404afe <_vfiprintf_r+0xd2>
  404d6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404d72:	2500      	movs	r5, #0
  404d74:	f81b 3b01 	ldrb.w	r3, [fp], #1
  404d78:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  404d7c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  404d80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404d84:	2a09      	cmp	r2, #9
  404d86:	d9f5      	bls.n	404d74 <_vfiprintf_r+0x348>
  404d88:	e6bb      	b.n	404b02 <_vfiprintf_r+0xd6>
  404d8a:	f048 0810 	orr.w	r8, r8, #16
  404d8e:	f018 0f20 	tst.w	r8, #32
  404d92:	9503      	str	r5, [sp, #12]
  404d94:	46b4      	mov	ip, r6
  404d96:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404d9a:	f000 809b 	beq.w	404ed4 <_vfiprintf_r+0x4a8>
  404d9e:	9904      	ldr	r1, [sp, #16]
  404da0:	3107      	adds	r1, #7
  404da2:	f021 0107 	bic.w	r1, r1, #7
  404da6:	e9d1 2300 	ldrd	r2, r3, [r1]
  404daa:	3108      	adds	r1, #8
  404dac:	9104      	str	r1, [sp, #16]
  404dae:	4616      	mov	r6, r2
  404db0:	461f      	mov	r7, r3
  404db2:	2a00      	cmp	r2, #0
  404db4:	f173 0300 	sbcs.w	r3, r3, #0
  404db8:	f2c0 83a6 	blt.w	405508 <_vfiprintf_r+0xadc>
  404dbc:	f1bc 0f00 	cmp.w	ip, #0
  404dc0:	bfa8      	it	ge
  404dc2:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  404dc6:	ea56 0207 	orrs.w	r2, r6, r7
  404dca:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  404dce:	46e1      	mov	r9, ip
  404dd0:	f04f 0301 	mov.w	r3, #1
  404dd4:	f43f af3c 	beq.w	404c50 <_vfiprintf_r+0x224>
  404dd8:	2b01      	cmp	r3, #1
  404dda:	f47f af40 	bne.w	404c5e <_vfiprintf_r+0x232>
  404dde:	2f00      	cmp	r7, #0
  404de0:	bf08      	it	eq
  404de2:	2e0a      	cmpeq	r6, #10
  404de4:	f080 8334 	bcs.w	405450 <_vfiprintf_r+0xa24>
  404de8:	ab2a      	add	r3, sp, #168	; 0xa8
  404dea:	3630      	adds	r6, #48	; 0x30
  404dec:	f803 6d41 	strb.w	r6, [r3, #-65]!
  404df0:	ebc3 090a 	rsb	r9, r3, sl
  404df4:	9307      	str	r3, [sp, #28]
  404df6:	e74b      	b.n	404c90 <_vfiprintf_r+0x264>
  404df8:	f048 0810 	orr.w	r8, r8, #16
  404dfc:	f018 0320 	ands.w	r3, r8, #32
  404e00:	9503      	str	r5, [sp, #12]
  404e02:	46b4      	mov	ip, r6
  404e04:	d19c      	bne.n	404d40 <_vfiprintf_r+0x314>
  404e06:	f018 0210 	ands.w	r2, r8, #16
  404e0a:	f040 82f7 	bne.w	4053fc <_vfiprintf_r+0x9d0>
  404e0e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  404e12:	f000 82f3 	beq.w	4053fc <_vfiprintf_r+0x9d0>
  404e16:	9904      	ldr	r1, [sp, #16]
  404e18:	4613      	mov	r3, r2
  404e1a:	460a      	mov	r2, r1
  404e1c:	3204      	adds	r2, #4
  404e1e:	880e      	ldrh	r6, [r1, #0]
  404e20:	9204      	str	r2, [sp, #16]
  404e22:	2700      	movs	r7, #0
  404e24:	e705      	b.n	404c32 <_vfiprintf_r+0x206>
  404e26:	f048 0810 	orr.w	r8, r8, #16
  404e2a:	f018 0f20 	tst.w	r8, #32
  404e2e:	9503      	str	r5, [sp, #12]
  404e30:	46b4      	mov	ip, r6
  404e32:	f47f aef4 	bne.w	404c1e <_vfiprintf_r+0x1f2>
  404e36:	9a04      	ldr	r2, [sp, #16]
  404e38:	f018 0f10 	tst.w	r8, #16
  404e3c:	4613      	mov	r3, r2
  404e3e:	f040 82e4 	bne.w	40540a <_vfiprintf_r+0x9de>
  404e42:	f018 0f40 	tst.w	r8, #64	; 0x40
  404e46:	f000 82e0 	beq.w	40540a <_vfiprintf_r+0x9de>
  404e4a:	8816      	ldrh	r6, [r2, #0]
  404e4c:	3204      	adds	r2, #4
  404e4e:	2700      	movs	r7, #0
  404e50:	2301      	movs	r3, #1
  404e52:	9204      	str	r2, [sp, #16]
  404e54:	e6ed      	b.n	404c32 <_vfiprintf_r+0x206>
  404e56:	4a63      	ldr	r2, [pc, #396]	; (404fe4 <_vfiprintf_r+0x5b8>)
  404e58:	9503      	str	r5, [sp, #12]
  404e5a:	f018 0f20 	tst.w	r8, #32
  404e5e:	46b4      	mov	ip, r6
  404e60:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404e64:	9209      	str	r2, [sp, #36]	; 0x24
  404e66:	f000 8090 	beq.w	404f8a <_vfiprintf_r+0x55e>
  404e6a:	9a04      	ldr	r2, [sp, #16]
  404e6c:	3207      	adds	r2, #7
  404e6e:	f022 0207 	bic.w	r2, r2, #7
  404e72:	e9d2 6700 	ldrd	r6, r7, [r2]
  404e76:	f102 0108 	add.w	r1, r2, #8
  404e7a:	9104      	str	r1, [sp, #16]
  404e7c:	f018 0f01 	tst.w	r8, #1
  404e80:	f000 8290 	beq.w	4053a4 <_vfiprintf_r+0x978>
  404e84:	ea56 0207 	orrs.w	r2, r6, r7
  404e88:	f000 828c 	beq.w	4053a4 <_vfiprintf_r+0x978>
  404e8c:	2230      	movs	r2, #48	; 0x30
  404e8e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  404e92:	f048 0802 	orr.w	r8, r8, #2
  404e96:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  404e9a:	2302      	movs	r3, #2
  404e9c:	e6c9      	b.n	404c32 <_vfiprintf_r+0x206>
  404e9e:	9a04      	ldr	r2, [sp, #16]
  404ea0:	9503      	str	r5, [sp, #12]
  404ea2:	6813      	ldr	r3, [r2, #0]
  404ea4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  404ea8:	4613      	mov	r3, r2
  404eaa:	3304      	adds	r3, #4
  404eac:	2601      	movs	r6, #1
  404eae:	f04f 0100 	mov.w	r1, #0
  404eb2:	9304      	str	r3, [sp, #16]
  404eb4:	ab10      	add	r3, sp, #64	; 0x40
  404eb6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404eba:	46b1      	mov	r9, r6
  404ebc:	9307      	str	r3, [sp, #28]
  404ebe:	f04f 0c00 	mov.w	ip, #0
  404ec2:	e6eb      	b.n	404c9c <_vfiprintf_r+0x270>
  404ec4:	f018 0f20 	tst.w	r8, #32
  404ec8:	9503      	str	r5, [sp, #12]
  404eca:	46b4      	mov	ip, r6
  404ecc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404ed0:	f47f af65 	bne.w	404d9e <_vfiprintf_r+0x372>
  404ed4:	f018 0f10 	tst.w	r8, #16
  404ed8:	f040 82a2 	bne.w	405420 <_vfiprintf_r+0x9f4>
  404edc:	f018 0f40 	tst.w	r8, #64	; 0x40
  404ee0:	f000 829e 	beq.w	405420 <_vfiprintf_r+0x9f4>
  404ee4:	9904      	ldr	r1, [sp, #16]
  404ee6:	f9b1 6000 	ldrsh.w	r6, [r1]
  404eea:	3104      	adds	r1, #4
  404eec:	17f7      	asrs	r7, r6, #31
  404eee:	4632      	mov	r2, r6
  404ef0:	463b      	mov	r3, r7
  404ef2:	9104      	str	r1, [sp, #16]
  404ef4:	e75d      	b.n	404db2 <_vfiprintf_r+0x386>
  404ef6:	9904      	ldr	r1, [sp, #16]
  404ef8:	9503      	str	r5, [sp, #12]
  404efa:	2330      	movs	r3, #48	; 0x30
  404efc:	460a      	mov	r2, r1
  404efe:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  404f02:	2378      	movs	r3, #120	; 0x78
  404f04:	3204      	adds	r2, #4
  404f06:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  404f0a:	4b37      	ldr	r3, [pc, #220]	; (404fe8 <_vfiprintf_r+0x5bc>)
  404f0c:	9309      	str	r3, [sp, #36]	; 0x24
  404f0e:	46b4      	mov	ip, r6
  404f10:	f048 0802 	orr.w	r8, r8, #2
  404f14:	680e      	ldr	r6, [r1, #0]
  404f16:	9204      	str	r2, [sp, #16]
  404f18:	2700      	movs	r7, #0
  404f1a:	2302      	movs	r3, #2
  404f1c:	e689      	b.n	404c32 <_vfiprintf_r+0x206>
  404f1e:	f048 0820 	orr.w	r8, r8, #32
  404f22:	f89b 3000 	ldrb.w	r3, [fp]
  404f26:	4658      	mov	r0, fp
  404f28:	e5e9      	b.n	404afe <_vfiprintf_r+0xd2>
  404f2a:	9a04      	ldr	r2, [sp, #16]
  404f2c:	9503      	str	r5, [sp, #12]
  404f2e:	6813      	ldr	r3, [r2, #0]
  404f30:	9307      	str	r3, [sp, #28]
  404f32:	f04f 0100 	mov.w	r1, #0
  404f36:	46b4      	mov	ip, r6
  404f38:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404f3c:	1d16      	adds	r6, r2, #4
  404f3e:	2b00      	cmp	r3, #0
  404f40:	f000 8350 	beq.w	4055e4 <_vfiprintf_r+0xbb8>
  404f44:	f1bc 0f00 	cmp.w	ip, #0
  404f48:	f2c0 832a 	blt.w	4055a0 <_vfiprintf_r+0xb74>
  404f4c:	9d07      	ldr	r5, [sp, #28]
  404f4e:	f8cd c010 	str.w	ip, [sp, #16]
  404f52:	4662      	mov	r2, ip
  404f54:	4628      	mov	r0, r5
  404f56:	2100      	movs	r1, #0
  404f58:	f001 fbd6 	bl	406708 <memchr>
  404f5c:	f8dd c010 	ldr.w	ip, [sp, #16]
  404f60:	2800      	cmp	r0, #0
  404f62:	f000 8350 	beq.w	405606 <_vfiprintf_r+0xbda>
  404f66:	ebc5 0900 	rsb	r9, r5, r0
  404f6a:	9604      	str	r6, [sp, #16]
  404f6c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  404f70:	f04f 0c00 	mov.w	ip, #0
  404f74:	e68c      	b.n	404c90 <_vfiprintf_r+0x264>
  404f76:	4a1c      	ldr	r2, [pc, #112]	; (404fe8 <_vfiprintf_r+0x5bc>)
  404f78:	9503      	str	r5, [sp, #12]
  404f7a:	f018 0f20 	tst.w	r8, #32
  404f7e:	46b4      	mov	ip, r6
  404f80:	9209      	str	r2, [sp, #36]	; 0x24
  404f82:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404f86:	f47f af70 	bne.w	404e6a <_vfiprintf_r+0x43e>
  404f8a:	9904      	ldr	r1, [sp, #16]
  404f8c:	f018 0f10 	tst.w	r8, #16
  404f90:	460a      	mov	r2, r1
  404f92:	f040 8240 	bne.w	405416 <_vfiprintf_r+0x9ea>
  404f96:	f018 0f40 	tst.w	r8, #64	; 0x40
  404f9a:	f000 823c 	beq.w	405416 <_vfiprintf_r+0x9ea>
  404f9e:	3204      	adds	r2, #4
  404fa0:	880e      	ldrh	r6, [r1, #0]
  404fa2:	9204      	str	r2, [sp, #16]
  404fa4:	2700      	movs	r7, #0
  404fa6:	e769      	b.n	404e7c <_vfiprintf_r+0x450>
  404fa8:	f89b 3000 	ldrb.w	r3, [fp]
  404fac:	2b6c      	cmp	r3, #108	; 0x6c
  404fae:	f000 82ea 	beq.w	405586 <_vfiprintf_r+0xb5a>
  404fb2:	f048 0810 	orr.w	r8, r8, #16
  404fb6:	4658      	mov	r0, fp
  404fb8:	e5a1      	b.n	404afe <_vfiprintf_r+0xd2>
  404fba:	9a04      	ldr	r2, [sp, #16]
  404fbc:	6815      	ldr	r5, [r2, #0]
  404fbe:	4613      	mov	r3, r2
  404fc0:	2d00      	cmp	r5, #0
  404fc2:	f103 0304 	add.w	r3, r3, #4
  404fc6:	f2c0 82e6 	blt.w	405596 <_vfiprintf_r+0xb6a>
  404fca:	9304      	str	r3, [sp, #16]
  404fcc:	f89b 3000 	ldrb.w	r3, [fp]
  404fd0:	4658      	mov	r0, fp
  404fd2:	e594      	b.n	404afe <_vfiprintf_r+0xd2>
  404fd4:	f89b 3000 	ldrb.w	r3, [fp]
  404fd8:	4658      	mov	r0, fp
  404fda:	212b      	movs	r1, #43	; 0x2b
  404fdc:	e58f      	b.n	404afe <_vfiprintf_r+0xd2>
  404fde:	bf00      	nop
  404fe0:	00407dc0 	.word	0x00407dc0
  404fe4:	00407da4 	.word	0x00407da4
  404fe8:	004076ec 	.word	0x004076ec
  404fec:	f89b 3000 	ldrb.w	r3, [fp]
  404ff0:	2b2a      	cmp	r3, #42	; 0x2a
  404ff2:	f10b 0001 	add.w	r0, fp, #1
  404ff6:	f000 830f 	beq.w	405618 <_vfiprintf_r+0xbec>
  404ffa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404ffe:	2a09      	cmp	r2, #9
  405000:	4683      	mov	fp, r0
  405002:	f04f 0600 	mov.w	r6, #0
  405006:	f63f ad7c 	bhi.w	404b02 <_vfiprintf_r+0xd6>
  40500a:	f81b 3b01 	ldrb.w	r3, [fp], #1
  40500e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405012:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  405016:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40501a:	2a09      	cmp	r2, #9
  40501c:	d9f5      	bls.n	40500a <_vfiprintf_r+0x5de>
  40501e:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  405022:	e56e      	b.n	404b02 <_vfiprintf_r+0xd6>
  405024:	f018 0f20 	tst.w	r8, #32
  405028:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40502c:	f000 8283 	beq.w	405536 <_vfiprintf_r+0xb0a>
  405030:	9a04      	ldr	r2, [sp, #16]
  405032:	9902      	ldr	r1, [sp, #8]
  405034:	6813      	ldr	r3, [r2, #0]
  405036:	17cf      	asrs	r7, r1, #31
  405038:	4608      	mov	r0, r1
  40503a:	3204      	adds	r2, #4
  40503c:	4639      	mov	r1, r7
  40503e:	9204      	str	r2, [sp, #16]
  405040:	e9c3 0100 	strd	r0, r1, [r3]
  405044:	e524      	b.n	404a90 <_vfiprintf_r+0x64>
  405046:	4658      	mov	r0, fp
  405048:	f89b 3000 	ldrb.w	r3, [fp]
  40504c:	2900      	cmp	r1, #0
  40504e:	f47f ad56 	bne.w	404afe <_vfiprintf_r+0xd2>
  405052:	2120      	movs	r1, #32
  405054:	e553      	b.n	404afe <_vfiprintf_r+0xd2>
  405056:	f048 0801 	orr.w	r8, r8, #1
  40505a:	4658      	mov	r0, fp
  40505c:	f89b 3000 	ldrb.w	r3, [fp]
  405060:	e54d      	b.n	404afe <_vfiprintf_r+0xd2>
  405062:	9503      	str	r5, [sp, #12]
  405064:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  405068:	2b00      	cmp	r3, #0
  40506a:	f000 809c 	beq.w	4051a6 <_vfiprintf_r+0x77a>
  40506e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  405072:	f04f 0300 	mov.w	r3, #0
  405076:	2601      	movs	r6, #1
  405078:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40507c:	ab10      	add	r3, sp, #64	; 0x40
  40507e:	46b1      	mov	r9, r6
  405080:	9307      	str	r3, [sp, #28]
  405082:	e71c      	b.n	404ebe <_vfiprintf_r+0x492>
  405084:	9801      	ldr	r0, [sp, #4]
  405086:	9900      	ldr	r1, [sp, #0]
  405088:	9308      	str	r3, [sp, #32]
  40508a:	aa0d      	add	r2, sp, #52	; 0x34
  40508c:	f7ff fc92 	bl	4049b4 <__sprint_r.part.0>
  405090:	2800      	cmp	r0, #0
  405092:	f040 808f 	bne.w	4051b4 <_vfiprintf_r+0x788>
  405096:	990e      	ldr	r1, [sp, #56]	; 0x38
  405098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40509a:	9b08      	ldr	r3, [sp, #32]
  40509c:	f101 0e01 	add.w	lr, r1, #1
  4050a0:	46d4      	mov	ip, sl
  4050a2:	e61c      	b.n	404cde <_vfiprintf_r+0x2b2>
  4050a4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4050a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4050a8:	1c48      	adds	r0, r1, #1
  4050aa:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4050ae:	b16b      	cbz	r3, 4050cc <_vfiprintf_r+0x6a0>
  4050b0:	3201      	adds	r2, #1
  4050b2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  4050b6:	2101      	movs	r1, #1
  4050b8:	2807      	cmp	r0, #7
  4050ba:	920f      	str	r2, [sp, #60]	; 0x3c
  4050bc:	900e      	str	r0, [sp, #56]	; 0x38
  4050be:	6023      	str	r3, [r4, #0]
  4050c0:	6061      	str	r1, [r4, #4]
  4050c2:	f300 8134 	bgt.w	40532e <_vfiprintf_r+0x902>
  4050c6:	4601      	mov	r1, r0
  4050c8:	3408      	adds	r4, #8
  4050ca:	3001      	adds	r0, #1
  4050cc:	9b05      	ldr	r3, [sp, #20]
  4050ce:	b163      	cbz	r3, 4050ea <_vfiprintf_r+0x6be>
  4050d0:	3202      	adds	r2, #2
  4050d2:	a90c      	add	r1, sp, #48	; 0x30
  4050d4:	2302      	movs	r3, #2
  4050d6:	2807      	cmp	r0, #7
  4050d8:	920f      	str	r2, [sp, #60]	; 0x3c
  4050da:	900e      	str	r0, [sp, #56]	; 0x38
  4050dc:	e884 000a 	stmia.w	r4, {r1, r3}
  4050e0:	f300 8134 	bgt.w	40534c <_vfiprintf_r+0x920>
  4050e4:	4601      	mov	r1, r0
  4050e6:	3408      	adds	r4, #8
  4050e8:	3001      	adds	r0, #1
  4050ea:	9b06      	ldr	r3, [sp, #24]
  4050ec:	2b80      	cmp	r3, #128	; 0x80
  4050ee:	f000 80d4 	beq.w	40529a <_vfiprintf_r+0x86e>
  4050f2:	ebc9 070c 	rsb	r7, r9, ip
  4050f6:	2f00      	cmp	r7, #0
  4050f8:	dd2b      	ble.n	405152 <_vfiprintf_r+0x726>
  4050fa:	2f10      	cmp	r7, #16
  4050fc:	4daa      	ldr	r5, [pc, #680]	; (4053a8 <_vfiprintf_r+0x97c>)
  4050fe:	dd1f      	ble.n	405140 <_vfiprintf_r+0x714>
  405100:	46a6      	mov	lr, r4
  405102:	2310      	movs	r3, #16
  405104:	9c01      	ldr	r4, [sp, #4]
  405106:	e007      	b.n	405118 <_vfiprintf_r+0x6ec>
  405108:	f101 0c02 	add.w	ip, r1, #2
  40510c:	f10e 0e08 	add.w	lr, lr, #8
  405110:	4601      	mov	r1, r0
  405112:	3f10      	subs	r7, #16
  405114:	2f10      	cmp	r7, #16
  405116:	dd11      	ble.n	40513c <_vfiprintf_r+0x710>
  405118:	1c48      	adds	r0, r1, #1
  40511a:	3210      	adds	r2, #16
  40511c:	2807      	cmp	r0, #7
  40511e:	920f      	str	r2, [sp, #60]	; 0x3c
  405120:	f8ce 5000 	str.w	r5, [lr]
  405124:	f8ce 3004 	str.w	r3, [lr, #4]
  405128:	900e      	str	r0, [sp, #56]	; 0x38
  40512a:	dded      	ble.n	405108 <_vfiprintf_r+0x6dc>
  40512c:	bb6a      	cbnz	r2, 40518a <_vfiprintf_r+0x75e>
  40512e:	3f10      	subs	r7, #16
  405130:	2f10      	cmp	r7, #16
  405132:	f04f 0c01 	mov.w	ip, #1
  405136:	4611      	mov	r1, r2
  405138:	46d6      	mov	lr, sl
  40513a:	dced      	bgt.n	405118 <_vfiprintf_r+0x6ec>
  40513c:	4674      	mov	r4, lr
  40513e:	4660      	mov	r0, ip
  405140:	443a      	add	r2, r7
  405142:	2807      	cmp	r0, #7
  405144:	920f      	str	r2, [sp, #60]	; 0x3c
  405146:	e884 00a0 	stmia.w	r4, {r5, r7}
  40514a:	900e      	str	r0, [sp, #56]	; 0x38
  40514c:	dc3b      	bgt.n	4051c6 <_vfiprintf_r+0x79a>
  40514e:	3408      	adds	r4, #8
  405150:	3001      	adds	r0, #1
  405152:	eb02 0309 	add.w	r3, r2, r9
  405156:	9a07      	ldr	r2, [sp, #28]
  405158:	930f      	str	r3, [sp, #60]	; 0x3c
  40515a:	2807      	cmp	r0, #7
  40515c:	e884 0204 	stmia.w	r4, {r2, r9}
  405160:	900e      	str	r0, [sp, #56]	; 0x38
  405162:	dd3d      	ble.n	4051e0 <_vfiprintf_r+0x7b4>
  405164:	2b00      	cmp	r3, #0
  405166:	f040 813e 	bne.w	4053e6 <_vfiprintf_r+0x9ba>
  40516a:	f018 0f04 	tst.w	r8, #4
  40516e:	930e      	str	r3, [sp, #56]	; 0x38
  405170:	f040 812f 	bne.w	4053d2 <_vfiprintf_r+0x9a6>
  405174:	9b02      	ldr	r3, [sp, #8]
  405176:	9a03      	ldr	r2, [sp, #12]
  405178:	4296      	cmp	r6, r2
  40517a:	bfac      	ite	ge
  40517c:	199b      	addge	r3, r3, r6
  40517e:	189b      	addlt	r3, r3, r2
  405180:	9302      	str	r3, [sp, #8]
  405182:	2300      	movs	r3, #0
  405184:	930e      	str	r3, [sp, #56]	; 0x38
  405186:	4654      	mov	r4, sl
  405188:	e482      	b.n	404a90 <_vfiprintf_r+0x64>
  40518a:	4620      	mov	r0, r4
  40518c:	9900      	ldr	r1, [sp, #0]
  40518e:	9305      	str	r3, [sp, #20]
  405190:	aa0d      	add	r2, sp, #52	; 0x34
  405192:	f7ff fc0f 	bl	4049b4 <__sprint_r.part.0>
  405196:	b968      	cbnz	r0, 4051b4 <_vfiprintf_r+0x788>
  405198:	990e      	ldr	r1, [sp, #56]	; 0x38
  40519a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40519c:	9b05      	ldr	r3, [sp, #20]
  40519e:	f101 0c01 	add.w	ip, r1, #1
  4051a2:	46d6      	mov	lr, sl
  4051a4:	e7b5      	b.n	405112 <_vfiprintf_r+0x6e6>
  4051a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4051a8:	b123      	cbz	r3, 4051b4 <_vfiprintf_r+0x788>
  4051aa:	9801      	ldr	r0, [sp, #4]
  4051ac:	9900      	ldr	r1, [sp, #0]
  4051ae:	aa0d      	add	r2, sp, #52	; 0x34
  4051b0:	f7ff fc00 	bl	4049b4 <__sprint_r.part.0>
  4051b4:	9b00      	ldr	r3, [sp, #0]
  4051b6:	899b      	ldrh	r3, [r3, #12]
  4051b8:	065b      	lsls	r3, r3, #25
  4051ba:	f53f ad22 	bmi.w	404c02 <_vfiprintf_r+0x1d6>
  4051be:	9802      	ldr	r0, [sp, #8]
  4051c0:	b02b      	add	sp, #172	; 0xac
  4051c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051c6:	2a00      	cmp	r2, #0
  4051c8:	f040 8191 	bne.w	4054ee <_vfiprintf_r+0xac2>
  4051cc:	2201      	movs	r2, #1
  4051ce:	9907      	ldr	r1, [sp, #28]
  4051d0:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  4051d4:	464b      	mov	r3, r9
  4051d6:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4051da:	911a      	str	r1, [sp, #104]	; 0x68
  4051dc:	920e      	str	r2, [sp, #56]	; 0x38
  4051de:	4654      	mov	r4, sl
  4051e0:	f104 0208 	add.w	r2, r4, #8
  4051e4:	f018 0f04 	tst.w	r8, #4
  4051e8:	d039      	beq.n	40525e <_vfiprintf_r+0x832>
  4051ea:	9903      	ldr	r1, [sp, #12]
  4051ec:	1b8d      	subs	r5, r1, r6
  4051ee:	2d00      	cmp	r5, #0
  4051f0:	dd35      	ble.n	40525e <_vfiprintf_r+0x832>
  4051f2:	2d10      	cmp	r5, #16
  4051f4:	f340 8202 	ble.w	4055fc <_vfiprintf_r+0xbd0>
  4051f8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4051fa:	4f6c      	ldr	r7, [pc, #432]	; (4053ac <_vfiprintf_r+0x980>)
  4051fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
  405200:	f8dd 9000 	ldr.w	r9, [sp]
  405204:	2410      	movs	r4, #16
  405206:	e006      	b.n	405216 <_vfiprintf_r+0x7ea>
  405208:	f100 0e02 	add.w	lr, r0, #2
  40520c:	3208      	adds	r2, #8
  40520e:	4608      	mov	r0, r1
  405210:	3d10      	subs	r5, #16
  405212:	2d10      	cmp	r5, #16
  405214:	dd10      	ble.n	405238 <_vfiprintf_r+0x80c>
  405216:	1c41      	adds	r1, r0, #1
  405218:	3310      	adds	r3, #16
  40521a:	2907      	cmp	r1, #7
  40521c:	930f      	str	r3, [sp, #60]	; 0x3c
  40521e:	6017      	str	r7, [r2, #0]
  405220:	6054      	str	r4, [r2, #4]
  405222:	910e      	str	r1, [sp, #56]	; 0x38
  405224:	ddf0      	ble.n	405208 <_vfiprintf_r+0x7dc>
  405226:	2b00      	cmp	r3, #0
  405228:	d12a      	bne.n	405280 <_vfiprintf_r+0x854>
  40522a:	3d10      	subs	r5, #16
  40522c:	2d10      	cmp	r5, #16
  40522e:	f04f 0e01 	mov.w	lr, #1
  405232:	4618      	mov	r0, r3
  405234:	4652      	mov	r2, sl
  405236:	dcee      	bgt.n	405216 <_vfiprintf_r+0x7ea>
  405238:	442b      	add	r3, r5
  40523a:	f1be 0f07 	cmp.w	lr, #7
  40523e:	930f      	str	r3, [sp, #60]	; 0x3c
  405240:	6017      	str	r7, [r2, #0]
  405242:	6055      	str	r5, [r2, #4]
  405244:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405248:	dd09      	ble.n	40525e <_vfiprintf_r+0x832>
  40524a:	2b00      	cmp	r3, #0
  40524c:	d092      	beq.n	405174 <_vfiprintf_r+0x748>
  40524e:	9801      	ldr	r0, [sp, #4]
  405250:	9900      	ldr	r1, [sp, #0]
  405252:	aa0d      	add	r2, sp, #52	; 0x34
  405254:	f7ff fbae 	bl	4049b4 <__sprint_r.part.0>
  405258:	2800      	cmp	r0, #0
  40525a:	d1ab      	bne.n	4051b4 <_vfiprintf_r+0x788>
  40525c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40525e:	9a02      	ldr	r2, [sp, #8]
  405260:	9903      	ldr	r1, [sp, #12]
  405262:	428e      	cmp	r6, r1
  405264:	bfac      	ite	ge
  405266:	1992      	addge	r2, r2, r6
  405268:	1852      	addlt	r2, r2, r1
  40526a:	9202      	str	r2, [sp, #8]
  40526c:	2b00      	cmp	r3, #0
  40526e:	d088      	beq.n	405182 <_vfiprintf_r+0x756>
  405270:	9801      	ldr	r0, [sp, #4]
  405272:	9900      	ldr	r1, [sp, #0]
  405274:	aa0d      	add	r2, sp, #52	; 0x34
  405276:	f7ff fb9d 	bl	4049b4 <__sprint_r.part.0>
  40527a:	2800      	cmp	r0, #0
  40527c:	d081      	beq.n	405182 <_vfiprintf_r+0x756>
  40527e:	e799      	b.n	4051b4 <_vfiprintf_r+0x788>
  405280:	4640      	mov	r0, r8
  405282:	4649      	mov	r1, r9
  405284:	aa0d      	add	r2, sp, #52	; 0x34
  405286:	f7ff fb95 	bl	4049b4 <__sprint_r.part.0>
  40528a:	2800      	cmp	r0, #0
  40528c:	d192      	bne.n	4051b4 <_vfiprintf_r+0x788>
  40528e:	980e      	ldr	r0, [sp, #56]	; 0x38
  405290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405292:	f100 0e01 	add.w	lr, r0, #1
  405296:	4652      	mov	r2, sl
  405298:	e7ba      	b.n	405210 <_vfiprintf_r+0x7e4>
  40529a:	9b03      	ldr	r3, [sp, #12]
  40529c:	1b9f      	subs	r7, r3, r6
  40529e:	2f00      	cmp	r7, #0
  4052a0:	f77f af27 	ble.w	4050f2 <_vfiprintf_r+0x6c6>
  4052a4:	2f10      	cmp	r7, #16
  4052a6:	4d40      	ldr	r5, [pc, #256]	; (4053a8 <_vfiprintf_r+0x97c>)
  4052a8:	f340 81b4 	ble.w	405614 <_vfiprintf_r+0xbe8>
  4052ac:	4620      	mov	r0, r4
  4052ae:	2310      	movs	r3, #16
  4052b0:	4664      	mov	r4, ip
  4052b2:	4684      	mov	ip, r0
  4052b4:	e007      	b.n	4052c6 <_vfiprintf_r+0x89a>
  4052b6:	f101 0e02 	add.w	lr, r1, #2
  4052ba:	f10c 0c08 	add.w	ip, ip, #8
  4052be:	4601      	mov	r1, r0
  4052c0:	3f10      	subs	r7, #16
  4052c2:	2f10      	cmp	r7, #16
  4052c4:	dd11      	ble.n	4052ea <_vfiprintf_r+0x8be>
  4052c6:	1c48      	adds	r0, r1, #1
  4052c8:	3210      	adds	r2, #16
  4052ca:	2807      	cmp	r0, #7
  4052cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4052ce:	f8cc 5000 	str.w	r5, [ip]
  4052d2:	f8cc 3004 	str.w	r3, [ip, #4]
  4052d6:	900e      	str	r0, [sp, #56]	; 0x38
  4052d8:	dded      	ble.n	4052b6 <_vfiprintf_r+0x88a>
  4052da:	b9c2      	cbnz	r2, 40530e <_vfiprintf_r+0x8e2>
  4052dc:	3f10      	subs	r7, #16
  4052de:	2f10      	cmp	r7, #16
  4052e0:	f04f 0e01 	mov.w	lr, #1
  4052e4:	4611      	mov	r1, r2
  4052e6:	46d4      	mov	ip, sl
  4052e8:	dced      	bgt.n	4052c6 <_vfiprintf_r+0x89a>
  4052ea:	4663      	mov	r3, ip
  4052ec:	46a4      	mov	ip, r4
  4052ee:	461c      	mov	r4, r3
  4052f0:	443a      	add	r2, r7
  4052f2:	f1be 0f07 	cmp.w	lr, #7
  4052f6:	920f      	str	r2, [sp, #60]	; 0x3c
  4052f8:	e884 00a0 	stmia.w	r4, {r5, r7}
  4052fc:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405300:	f300 80ef 	bgt.w	4054e2 <_vfiprintf_r+0xab6>
  405304:	3408      	adds	r4, #8
  405306:	f10e 0001 	add.w	r0, lr, #1
  40530a:	4671      	mov	r1, lr
  40530c:	e6f1      	b.n	4050f2 <_vfiprintf_r+0x6c6>
  40530e:	9801      	ldr	r0, [sp, #4]
  405310:	9900      	ldr	r1, [sp, #0]
  405312:	9305      	str	r3, [sp, #20]
  405314:	aa0d      	add	r2, sp, #52	; 0x34
  405316:	f7ff fb4d 	bl	4049b4 <__sprint_r.part.0>
  40531a:	2800      	cmp	r0, #0
  40531c:	f47f af4a 	bne.w	4051b4 <_vfiprintf_r+0x788>
  405320:	990e      	ldr	r1, [sp, #56]	; 0x38
  405322:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405324:	9b05      	ldr	r3, [sp, #20]
  405326:	f101 0e01 	add.w	lr, r1, #1
  40532a:	46d4      	mov	ip, sl
  40532c:	e7c8      	b.n	4052c0 <_vfiprintf_r+0x894>
  40532e:	2a00      	cmp	r2, #0
  405330:	f040 80c6 	bne.w	4054c0 <_vfiprintf_r+0xa94>
  405334:	9b05      	ldr	r3, [sp, #20]
  405336:	2b00      	cmp	r3, #0
  405338:	f000 8086 	beq.w	405448 <_vfiprintf_r+0xa1c>
  40533c:	aa0c      	add	r2, sp, #48	; 0x30
  40533e:	2302      	movs	r3, #2
  405340:	921a      	str	r2, [sp, #104]	; 0x68
  405342:	4608      	mov	r0, r1
  405344:	931b      	str	r3, [sp, #108]	; 0x6c
  405346:	461a      	mov	r2, r3
  405348:	4654      	mov	r4, sl
  40534a:	e6cb      	b.n	4050e4 <_vfiprintf_r+0x6b8>
  40534c:	2a00      	cmp	r2, #0
  40534e:	f040 80a6 	bne.w	40549e <_vfiprintf_r+0xa72>
  405352:	2001      	movs	r0, #1
  405354:	4611      	mov	r1, r2
  405356:	4654      	mov	r4, sl
  405358:	e6c7      	b.n	4050ea <_vfiprintf_r+0x6be>
  40535a:	bb03      	cbnz	r3, 40539e <_vfiprintf_r+0x972>
  40535c:	f018 0f01 	tst.w	r8, #1
  405360:	d01d      	beq.n	40539e <_vfiprintf_r+0x972>
  405362:	ab2a      	add	r3, sp, #168	; 0xa8
  405364:	2230      	movs	r2, #48	; 0x30
  405366:	f803 2d41 	strb.w	r2, [r3, #-65]!
  40536a:	ebc3 090a 	rsb	r9, r3, sl
  40536e:	9307      	str	r3, [sp, #28]
  405370:	e48e      	b.n	404c90 <_vfiprintf_r+0x264>
  405372:	9809      	ldr	r0, [sp, #36]	; 0x24
  405374:	46d1      	mov	r9, sl
  405376:	0933      	lsrs	r3, r6, #4
  405378:	f006 010f 	and.w	r1, r6, #15
  40537c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405380:	093a      	lsrs	r2, r7, #4
  405382:	461e      	mov	r6, r3
  405384:	4617      	mov	r7, r2
  405386:	5c43      	ldrb	r3, [r0, r1]
  405388:	f809 3d01 	strb.w	r3, [r9, #-1]!
  40538c:	ea56 0307 	orrs.w	r3, r6, r7
  405390:	d1f1      	bne.n	405376 <_vfiprintf_r+0x94a>
  405392:	464b      	mov	r3, r9
  405394:	f8cd 901c 	str.w	r9, [sp, #28]
  405398:	ebc3 090a 	rsb	r9, r3, sl
  40539c:	e478      	b.n	404c90 <_vfiprintf_r+0x264>
  40539e:	f8cd a01c 	str.w	sl, [sp, #28]
  4053a2:	e475      	b.n	404c90 <_vfiprintf_r+0x264>
  4053a4:	2302      	movs	r3, #2
  4053a6:	e444      	b.n	404c32 <_vfiprintf_r+0x206>
  4053a8:	00407d94 	.word	0x00407d94
  4053ac:	00407dc0 	.word	0x00407dc0
  4053b0:	2a00      	cmp	r2, #0
  4053b2:	f040 80d7 	bne.w	405564 <_vfiprintf_r+0xb38>
  4053b6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4053ba:	2b00      	cmp	r3, #0
  4053bc:	f000 80ae 	beq.w	40551c <_vfiprintf_r+0xaf0>
  4053c0:	2301      	movs	r3, #1
  4053c2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4053c6:	4618      	mov	r0, r3
  4053c8:	931b      	str	r3, [sp, #108]	; 0x6c
  4053ca:	461a      	mov	r2, r3
  4053cc:	911a      	str	r1, [sp, #104]	; 0x68
  4053ce:	4654      	mov	r4, sl
  4053d0:	e679      	b.n	4050c6 <_vfiprintf_r+0x69a>
  4053d2:	9a03      	ldr	r2, [sp, #12]
  4053d4:	1b95      	subs	r5, r2, r6
  4053d6:	2d00      	cmp	r5, #0
  4053d8:	4652      	mov	r2, sl
  4053da:	f73f af0a 	bgt.w	4051f2 <_vfiprintf_r+0x7c6>
  4053de:	e6c9      	b.n	405174 <_vfiprintf_r+0x748>
  4053e0:	465d      	mov	r5, fp
  4053e2:	f7ff bb7c 	b.w	404ade <_vfiprintf_r+0xb2>
  4053e6:	9801      	ldr	r0, [sp, #4]
  4053e8:	9900      	ldr	r1, [sp, #0]
  4053ea:	aa0d      	add	r2, sp, #52	; 0x34
  4053ec:	f7ff fae2 	bl	4049b4 <__sprint_r.part.0>
  4053f0:	2800      	cmp	r0, #0
  4053f2:	f47f aedf 	bne.w	4051b4 <_vfiprintf_r+0x788>
  4053f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4053f8:	4652      	mov	r2, sl
  4053fa:	e6f3      	b.n	4051e4 <_vfiprintf_r+0x7b8>
  4053fc:	9904      	ldr	r1, [sp, #16]
  4053fe:	460a      	mov	r2, r1
  405400:	3204      	adds	r2, #4
  405402:	680e      	ldr	r6, [r1, #0]
  405404:	9204      	str	r2, [sp, #16]
  405406:	2700      	movs	r7, #0
  405408:	e413      	b.n	404c32 <_vfiprintf_r+0x206>
  40540a:	3204      	adds	r2, #4
  40540c:	681e      	ldr	r6, [r3, #0]
  40540e:	9204      	str	r2, [sp, #16]
  405410:	2301      	movs	r3, #1
  405412:	2700      	movs	r7, #0
  405414:	e40d      	b.n	404c32 <_vfiprintf_r+0x206>
  405416:	6816      	ldr	r6, [r2, #0]
  405418:	3204      	adds	r2, #4
  40541a:	9204      	str	r2, [sp, #16]
  40541c:	2700      	movs	r7, #0
  40541e:	e52d      	b.n	404e7c <_vfiprintf_r+0x450>
  405420:	9a04      	ldr	r2, [sp, #16]
  405422:	6816      	ldr	r6, [r2, #0]
  405424:	4613      	mov	r3, r2
  405426:	3304      	adds	r3, #4
  405428:	17f7      	asrs	r7, r6, #31
  40542a:	9304      	str	r3, [sp, #16]
  40542c:	4632      	mov	r2, r6
  40542e:	463b      	mov	r3, r7
  405430:	e4bf      	b.n	404db2 <_vfiprintf_r+0x386>
  405432:	9801      	ldr	r0, [sp, #4]
  405434:	9900      	ldr	r1, [sp, #0]
  405436:	aa0d      	add	r2, sp, #52	; 0x34
  405438:	f7ff fabc 	bl	4049b4 <__sprint_r.part.0>
  40543c:	2800      	cmp	r0, #0
  40543e:	f47f aeb9 	bne.w	4051b4 <_vfiprintf_r+0x788>
  405442:	4654      	mov	r4, sl
  405444:	f7ff bbbe 	b.w	404bc4 <_vfiprintf_r+0x198>
  405448:	4608      	mov	r0, r1
  40544a:	4654      	mov	r4, sl
  40544c:	4611      	mov	r1, r2
  40544e:	e64c      	b.n	4050ea <_vfiprintf_r+0x6be>
  405450:	46d1      	mov	r9, sl
  405452:	f8cd c014 	str.w	ip, [sp, #20]
  405456:	4630      	mov	r0, r6
  405458:	4639      	mov	r1, r7
  40545a:	220a      	movs	r2, #10
  40545c:	2300      	movs	r3, #0
  40545e:	f001 fde3 	bl	407028 <__aeabi_uldivmod>
  405462:	3230      	adds	r2, #48	; 0x30
  405464:	4630      	mov	r0, r6
  405466:	4639      	mov	r1, r7
  405468:	f809 2d01 	strb.w	r2, [r9, #-1]!
  40546c:	2300      	movs	r3, #0
  40546e:	220a      	movs	r2, #10
  405470:	f001 fdda 	bl	407028 <__aeabi_uldivmod>
  405474:	4606      	mov	r6, r0
  405476:	460f      	mov	r7, r1
  405478:	ea56 0307 	orrs.w	r3, r6, r7
  40547c:	d1eb      	bne.n	405456 <_vfiprintf_r+0xa2a>
  40547e:	f8dd c014 	ldr.w	ip, [sp, #20]
  405482:	e786      	b.n	405392 <_vfiprintf_r+0x966>
  405484:	2b30      	cmp	r3, #48	; 0x30
  405486:	9b07      	ldr	r3, [sp, #28]
  405488:	d086      	beq.n	405398 <_vfiprintf_r+0x96c>
  40548a:	3b01      	subs	r3, #1
  40548c:	461a      	mov	r2, r3
  40548e:	9307      	str	r3, [sp, #28]
  405490:	2330      	movs	r3, #48	; 0x30
  405492:	ebc2 090a 	rsb	r9, r2, sl
  405496:	f801 3c01 	strb.w	r3, [r1, #-1]
  40549a:	f7ff bbf9 	b.w	404c90 <_vfiprintf_r+0x264>
  40549e:	9801      	ldr	r0, [sp, #4]
  4054a0:	9900      	ldr	r1, [sp, #0]
  4054a2:	f8cd c014 	str.w	ip, [sp, #20]
  4054a6:	aa0d      	add	r2, sp, #52	; 0x34
  4054a8:	f7ff fa84 	bl	4049b4 <__sprint_r.part.0>
  4054ac:	2800      	cmp	r0, #0
  4054ae:	f47f ae81 	bne.w	4051b4 <_vfiprintf_r+0x788>
  4054b2:	990e      	ldr	r1, [sp, #56]	; 0x38
  4054b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4054b6:	f8dd c014 	ldr.w	ip, [sp, #20]
  4054ba:	1c48      	adds	r0, r1, #1
  4054bc:	4654      	mov	r4, sl
  4054be:	e614      	b.n	4050ea <_vfiprintf_r+0x6be>
  4054c0:	9801      	ldr	r0, [sp, #4]
  4054c2:	9900      	ldr	r1, [sp, #0]
  4054c4:	f8cd c020 	str.w	ip, [sp, #32]
  4054c8:	aa0d      	add	r2, sp, #52	; 0x34
  4054ca:	f7ff fa73 	bl	4049b4 <__sprint_r.part.0>
  4054ce:	2800      	cmp	r0, #0
  4054d0:	f47f ae70 	bne.w	4051b4 <_vfiprintf_r+0x788>
  4054d4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4054d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4054d8:	f8dd c020 	ldr.w	ip, [sp, #32]
  4054dc:	1c48      	adds	r0, r1, #1
  4054de:	4654      	mov	r4, sl
  4054e0:	e5f4      	b.n	4050cc <_vfiprintf_r+0x6a0>
  4054e2:	2a00      	cmp	r2, #0
  4054e4:	d167      	bne.n	4055b6 <_vfiprintf_r+0xb8a>
  4054e6:	2001      	movs	r0, #1
  4054e8:	4611      	mov	r1, r2
  4054ea:	4654      	mov	r4, sl
  4054ec:	e601      	b.n	4050f2 <_vfiprintf_r+0x6c6>
  4054ee:	9801      	ldr	r0, [sp, #4]
  4054f0:	9900      	ldr	r1, [sp, #0]
  4054f2:	aa0d      	add	r2, sp, #52	; 0x34
  4054f4:	f7ff fa5e 	bl	4049b4 <__sprint_r.part.0>
  4054f8:	2800      	cmp	r0, #0
  4054fa:	f47f ae5b 	bne.w	4051b4 <_vfiprintf_r+0x788>
  4054fe:	980e      	ldr	r0, [sp, #56]	; 0x38
  405500:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405502:	3001      	adds	r0, #1
  405504:	4654      	mov	r4, sl
  405506:	e624      	b.n	405152 <_vfiprintf_r+0x726>
  405508:	252d      	movs	r5, #45	; 0x2d
  40550a:	4276      	negs	r6, r6
  40550c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405510:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  405514:	46e1      	mov	r9, ip
  405516:	2301      	movs	r3, #1
  405518:	f7ff bb91 	b.w	404c3e <_vfiprintf_r+0x212>
  40551c:	9b05      	ldr	r3, [sp, #20]
  40551e:	4611      	mov	r1, r2
  405520:	2001      	movs	r0, #1
  405522:	4654      	mov	r4, sl
  405524:	2b00      	cmp	r3, #0
  405526:	f43f ade4 	beq.w	4050f2 <_vfiprintf_r+0x6c6>
  40552a:	aa0c      	add	r2, sp, #48	; 0x30
  40552c:	2302      	movs	r3, #2
  40552e:	e88a 000c 	stmia.w	sl, {r2, r3}
  405532:	461a      	mov	r2, r3
  405534:	e5d6      	b.n	4050e4 <_vfiprintf_r+0x6b8>
  405536:	f018 0f10 	tst.w	r8, #16
  40553a:	d10b      	bne.n	405554 <_vfiprintf_r+0xb28>
  40553c:	f018 0f40 	tst.w	r8, #64	; 0x40
  405540:	d008      	beq.n	405554 <_vfiprintf_r+0xb28>
  405542:	9a04      	ldr	r2, [sp, #16]
  405544:	6813      	ldr	r3, [r2, #0]
  405546:	3204      	adds	r2, #4
  405548:	9204      	str	r2, [sp, #16]
  40554a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40554e:	801a      	strh	r2, [r3, #0]
  405550:	f7ff ba9e 	b.w	404a90 <_vfiprintf_r+0x64>
  405554:	9a04      	ldr	r2, [sp, #16]
  405556:	6813      	ldr	r3, [r2, #0]
  405558:	3204      	adds	r2, #4
  40555a:	9204      	str	r2, [sp, #16]
  40555c:	9a02      	ldr	r2, [sp, #8]
  40555e:	601a      	str	r2, [r3, #0]
  405560:	f7ff ba96 	b.w	404a90 <_vfiprintf_r+0x64>
  405564:	9801      	ldr	r0, [sp, #4]
  405566:	9900      	ldr	r1, [sp, #0]
  405568:	f8cd c020 	str.w	ip, [sp, #32]
  40556c:	aa0d      	add	r2, sp, #52	; 0x34
  40556e:	f7ff fa21 	bl	4049b4 <__sprint_r.part.0>
  405572:	2800      	cmp	r0, #0
  405574:	f47f ae1e 	bne.w	4051b4 <_vfiprintf_r+0x788>
  405578:	990e      	ldr	r1, [sp, #56]	; 0x38
  40557a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40557c:	f8dd c020 	ldr.w	ip, [sp, #32]
  405580:	1c48      	adds	r0, r1, #1
  405582:	4654      	mov	r4, sl
  405584:	e591      	b.n	4050aa <_vfiprintf_r+0x67e>
  405586:	f048 0820 	orr.w	r8, r8, #32
  40558a:	f10b 0001 	add.w	r0, fp, #1
  40558e:	f89b 3001 	ldrb.w	r3, [fp, #1]
  405592:	f7ff bab4 	b.w	404afe <_vfiprintf_r+0xd2>
  405596:	426d      	negs	r5, r5
  405598:	9304      	str	r3, [sp, #16]
  40559a:	4658      	mov	r0, fp
  40559c:	f7ff bbc6 	b.w	404d2c <_vfiprintf_r+0x300>
  4055a0:	9807      	ldr	r0, [sp, #28]
  4055a2:	9604      	str	r6, [sp, #16]
  4055a4:	f7ff f9a4 	bl	4048f0 <strlen>
  4055a8:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  4055ac:	4681      	mov	r9, r0
  4055ae:	f04f 0c00 	mov.w	ip, #0
  4055b2:	f7ff bb6d 	b.w	404c90 <_vfiprintf_r+0x264>
  4055b6:	9801      	ldr	r0, [sp, #4]
  4055b8:	9900      	ldr	r1, [sp, #0]
  4055ba:	f8cd c014 	str.w	ip, [sp, #20]
  4055be:	aa0d      	add	r2, sp, #52	; 0x34
  4055c0:	f7ff f9f8 	bl	4049b4 <__sprint_r.part.0>
  4055c4:	2800      	cmp	r0, #0
  4055c6:	f47f adf5 	bne.w	4051b4 <_vfiprintf_r+0x788>
  4055ca:	990e      	ldr	r1, [sp, #56]	; 0x38
  4055cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4055ce:	f8dd c014 	ldr.w	ip, [sp, #20]
  4055d2:	1c48      	adds	r0, r1, #1
  4055d4:	4654      	mov	r4, sl
  4055d6:	e58c      	b.n	4050f2 <_vfiprintf_r+0x6c6>
  4055d8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4055da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4055dc:	4f15      	ldr	r7, [pc, #84]	; (405634 <_vfiprintf_r+0xc08>)
  4055de:	3101      	adds	r1, #1
  4055e0:	f7ff bb98 	b.w	404d14 <_vfiprintf_r+0x2e8>
  4055e4:	f1bc 0f06 	cmp.w	ip, #6
  4055e8:	bf28      	it	cs
  4055ea:	f04f 0c06 	movcs.w	ip, #6
  4055ee:	4b12      	ldr	r3, [pc, #72]	; (405638 <_vfiprintf_r+0xc0c>)
  4055f0:	9604      	str	r6, [sp, #16]
  4055f2:	46e1      	mov	r9, ip
  4055f4:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  4055f8:	9307      	str	r3, [sp, #28]
  4055fa:	e460      	b.n	404ebe <_vfiprintf_r+0x492>
  4055fc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4055fe:	4f0d      	ldr	r7, [pc, #52]	; (405634 <_vfiprintf_r+0xc08>)
  405600:	f101 0e01 	add.w	lr, r1, #1
  405604:	e618      	b.n	405238 <_vfiprintf_r+0x80c>
  405606:	46e1      	mov	r9, ip
  405608:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40560c:	9604      	str	r6, [sp, #16]
  40560e:	4684      	mov	ip, r0
  405610:	f7ff bb3e 	b.w	404c90 <_vfiprintf_r+0x264>
  405614:	4686      	mov	lr, r0
  405616:	e66b      	b.n	4052f0 <_vfiprintf_r+0x8c4>
  405618:	9a04      	ldr	r2, [sp, #16]
  40561a:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40561e:	6816      	ldr	r6, [r2, #0]
  405620:	3204      	adds	r2, #4
  405622:	2e00      	cmp	r6, #0
  405624:	9204      	str	r2, [sp, #16]
  405626:	f6bf aa6a 	bge.w	404afe <_vfiprintf_r+0xd2>
  40562a:	f04f 36ff 	mov.w	r6, #4294967295
  40562e:	f7ff ba66 	b.w	404afe <_vfiprintf_r+0xd2>
  405632:	bf00      	nop
  405634:	00407dc0 	.word	0x00407dc0
  405638:	00407db8 	.word	0x00407db8

0040563c <__sbprintf>:
  40563c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  405640:	460c      	mov	r4, r1
  405642:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405646:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40564a:	69e7      	ldr	r7, [r4, #28]
  40564c:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40564e:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  405652:	9119      	str	r1, [sp, #100]	; 0x64
  405654:	ad1a      	add	r5, sp, #104	; 0x68
  405656:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40565a:	f02e 0e02 	bic.w	lr, lr, #2
  40565e:	f04f 0c00 	mov.w	ip, #0
  405662:	9707      	str	r7, [sp, #28]
  405664:	4669      	mov	r1, sp
  405666:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405668:	9500      	str	r5, [sp, #0]
  40566a:	9504      	str	r5, [sp, #16]
  40566c:	9602      	str	r6, [sp, #8]
  40566e:	9605      	str	r6, [sp, #20]
  405670:	f8ad e00c 	strh.w	lr, [sp, #12]
  405674:	f8ad 900e 	strh.w	r9, [sp, #14]
  405678:	9709      	str	r7, [sp, #36]	; 0x24
  40567a:	f8cd c018 	str.w	ip, [sp, #24]
  40567e:	4606      	mov	r6, r0
  405680:	f7ff f9d4 	bl	404a2c <_vfiprintf_r>
  405684:	1e05      	subs	r5, r0, #0
  405686:	db07      	blt.n	405698 <__sbprintf+0x5c>
  405688:	4630      	mov	r0, r6
  40568a:	4669      	mov	r1, sp
  40568c:	f000 f92e 	bl	4058ec <_fflush_r>
  405690:	2800      	cmp	r0, #0
  405692:	bf18      	it	ne
  405694:	f04f 35ff 	movne.w	r5, #4294967295
  405698:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40569c:	065b      	lsls	r3, r3, #25
  40569e:	d503      	bpl.n	4056a8 <__sbprintf+0x6c>
  4056a0:	89a3      	ldrh	r3, [r4, #12]
  4056a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4056a6:	81a3      	strh	r3, [r4, #12]
  4056a8:	4628      	mov	r0, r5
  4056aa:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4056ae:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  4056b2:	bf00      	nop

004056b4 <__swsetup_r>:
  4056b4:	b538      	push	{r3, r4, r5, lr}
  4056b6:	4b2f      	ldr	r3, [pc, #188]	; (405774 <__swsetup_r+0xc0>)
  4056b8:	681b      	ldr	r3, [r3, #0]
  4056ba:	4605      	mov	r5, r0
  4056bc:	460c      	mov	r4, r1
  4056be:	b113      	cbz	r3, 4056c6 <__swsetup_r+0x12>
  4056c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4056c2:	2a00      	cmp	r2, #0
  4056c4:	d036      	beq.n	405734 <__swsetup_r+0x80>
  4056c6:	89a2      	ldrh	r2, [r4, #12]
  4056c8:	b293      	uxth	r3, r2
  4056ca:	0718      	lsls	r0, r3, #28
  4056cc:	d50c      	bpl.n	4056e8 <__swsetup_r+0x34>
  4056ce:	6920      	ldr	r0, [r4, #16]
  4056d0:	b1a8      	cbz	r0, 4056fe <__swsetup_r+0x4a>
  4056d2:	f013 0201 	ands.w	r2, r3, #1
  4056d6:	d01e      	beq.n	405716 <__swsetup_r+0x62>
  4056d8:	6963      	ldr	r3, [r4, #20]
  4056da:	2200      	movs	r2, #0
  4056dc:	425b      	negs	r3, r3
  4056de:	61a3      	str	r3, [r4, #24]
  4056e0:	60a2      	str	r2, [r4, #8]
  4056e2:	b1f0      	cbz	r0, 405722 <__swsetup_r+0x6e>
  4056e4:	2000      	movs	r0, #0
  4056e6:	bd38      	pop	{r3, r4, r5, pc}
  4056e8:	06d9      	lsls	r1, r3, #27
  4056ea:	d53b      	bpl.n	405764 <__swsetup_r+0xb0>
  4056ec:	0758      	lsls	r0, r3, #29
  4056ee:	d425      	bmi.n	40573c <__swsetup_r+0x88>
  4056f0:	6920      	ldr	r0, [r4, #16]
  4056f2:	f042 0308 	orr.w	r3, r2, #8
  4056f6:	81a3      	strh	r3, [r4, #12]
  4056f8:	b29b      	uxth	r3, r3
  4056fa:	2800      	cmp	r0, #0
  4056fc:	d1e9      	bne.n	4056d2 <__swsetup_r+0x1e>
  4056fe:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405702:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405706:	d0e4      	beq.n	4056d2 <__swsetup_r+0x1e>
  405708:	4628      	mov	r0, r5
  40570a:	4621      	mov	r1, r4
  40570c:	f000 fcf2 	bl	4060f4 <__smakebuf_r>
  405710:	89a3      	ldrh	r3, [r4, #12]
  405712:	6920      	ldr	r0, [r4, #16]
  405714:	e7dd      	b.n	4056d2 <__swsetup_r+0x1e>
  405716:	0799      	lsls	r1, r3, #30
  405718:	bf58      	it	pl
  40571a:	6962      	ldrpl	r2, [r4, #20]
  40571c:	60a2      	str	r2, [r4, #8]
  40571e:	2800      	cmp	r0, #0
  405720:	d1e0      	bne.n	4056e4 <__swsetup_r+0x30>
  405722:	89a3      	ldrh	r3, [r4, #12]
  405724:	061a      	lsls	r2, r3, #24
  405726:	d5de      	bpl.n	4056e6 <__swsetup_r+0x32>
  405728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40572c:	81a3      	strh	r3, [r4, #12]
  40572e:	f04f 30ff 	mov.w	r0, #4294967295
  405732:	bd38      	pop	{r3, r4, r5, pc}
  405734:	4618      	mov	r0, r3
  405736:	f000 f96d 	bl	405a14 <__sinit>
  40573a:	e7c4      	b.n	4056c6 <__swsetup_r+0x12>
  40573c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40573e:	b149      	cbz	r1, 405754 <__swsetup_r+0xa0>
  405740:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405744:	4299      	cmp	r1, r3
  405746:	d003      	beq.n	405750 <__swsetup_r+0x9c>
  405748:	4628      	mov	r0, r5
  40574a:	f000 fa3b 	bl	405bc4 <_free_r>
  40574e:	89a2      	ldrh	r2, [r4, #12]
  405750:	2300      	movs	r3, #0
  405752:	6323      	str	r3, [r4, #48]	; 0x30
  405754:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405758:	2300      	movs	r3, #0
  40575a:	6920      	ldr	r0, [r4, #16]
  40575c:	6063      	str	r3, [r4, #4]
  40575e:	b292      	uxth	r2, r2
  405760:	6020      	str	r0, [r4, #0]
  405762:	e7c6      	b.n	4056f2 <__swsetup_r+0x3e>
  405764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405768:	2309      	movs	r3, #9
  40576a:	602b      	str	r3, [r5, #0]
  40576c:	f04f 30ff 	mov.w	r0, #4294967295
  405770:	81a2      	strh	r2, [r4, #12]
  405772:	bd38      	pop	{r3, r4, r5, pc}
  405774:	20000458 	.word	0x20000458

00405778 <register_fini>:
  405778:	4b02      	ldr	r3, [pc, #8]	; (405784 <register_fini+0xc>)
  40577a:	b113      	cbz	r3, 405782 <register_fini+0xa>
  40577c:	4802      	ldr	r0, [pc, #8]	; (405788 <register_fini+0x10>)
  40577e:	f000 b805 	b.w	40578c <atexit>
  405782:	4770      	bx	lr
  405784:	00000000 	.word	0x00000000
  405788:	00405a29 	.word	0x00405a29

0040578c <atexit>:
  40578c:	4601      	mov	r1, r0
  40578e:	2000      	movs	r0, #0
  405790:	4602      	mov	r2, r0
  405792:	4603      	mov	r3, r0
  405794:	f001 bb54 	b.w	406e40 <__register_exitproc>

00405798 <__sflush_r>:
  405798:	898b      	ldrh	r3, [r1, #12]
  40579a:	b29a      	uxth	r2, r3
  40579c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4057a0:	460d      	mov	r5, r1
  4057a2:	0711      	lsls	r1, r2, #28
  4057a4:	4680      	mov	r8, r0
  4057a6:	d43c      	bmi.n	405822 <__sflush_r+0x8a>
  4057a8:	686a      	ldr	r2, [r5, #4]
  4057aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4057ae:	2a00      	cmp	r2, #0
  4057b0:	81ab      	strh	r3, [r5, #12]
  4057b2:	dd65      	ble.n	405880 <__sflush_r+0xe8>
  4057b4:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4057b6:	2e00      	cmp	r6, #0
  4057b8:	d04b      	beq.n	405852 <__sflush_r+0xba>
  4057ba:	b29b      	uxth	r3, r3
  4057bc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4057c0:	2100      	movs	r1, #0
  4057c2:	b292      	uxth	r2, r2
  4057c4:	f8d8 4000 	ldr.w	r4, [r8]
  4057c8:	f8c8 1000 	str.w	r1, [r8]
  4057cc:	2a00      	cmp	r2, #0
  4057ce:	d05b      	beq.n	405888 <__sflush_r+0xf0>
  4057d0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4057d2:	075f      	lsls	r7, r3, #29
  4057d4:	d505      	bpl.n	4057e2 <__sflush_r+0x4a>
  4057d6:	6869      	ldr	r1, [r5, #4]
  4057d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4057da:	1a52      	subs	r2, r2, r1
  4057dc:	b10b      	cbz	r3, 4057e2 <__sflush_r+0x4a>
  4057de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4057e0:	1ad2      	subs	r2, r2, r3
  4057e2:	4640      	mov	r0, r8
  4057e4:	69e9      	ldr	r1, [r5, #28]
  4057e6:	2300      	movs	r3, #0
  4057e8:	47b0      	blx	r6
  4057ea:	1c46      	adds	r6, r0, #1
  4057ec:	d056      	beq.n	40589c <__sflush_r+0x104>
  4057ee:	89ab      	ldrh	r3, [r5, #12]
  4057f0:	692a      	ldr	r2, [r5, #16]
  4057f2:	602a      	str	r2, [r5, #0]
  4057f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4057f8:	b29b      	uxth	r3, r3
  4057fa:	2200      	movs	r2, #0
  4057fc:	606a      	str	r2, [r5, #4]
  4057fe:	04da      	lsls	r2, r3, #19
  405800:	81ab      	strh	r3, [r5, #12]
  405802:	d43b      	bmi.n	40587c <__sflush_r+0xe4>
  405804:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405806:	f8c8 4000 	str.w	r4, [r8]
  40580a:	b311      	cbz	r1, 405852 <__sflush_r+0xba>
  40580c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405810:	4299      	cmp	r1, r3
  405812:	d002      	beq.n	40581a <__sflush_r+0x82>
  405814:	4640      	mov	r0, r8
  405816:	f000 f9d5 	bl	405bc4 <_free_r>
  40581a:	2000      	movs	r0, #0
  40581c:	6328      	str	r0, [r5, #48]	; 0x30
  40581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405822:	692e      	ldr	r6, [r5, #16]
  405824:	b1ae      	cbz	r6, 405852 <__sflush_r+0xba>
  405826:	682c      	ldr	r4, [r5, #0]
  405828:	602e      	str	r6, [r5, #0]
  40582a:	0791      	lsls	r1, r2, #30
  40582c:	bf0c      	ite	eq
  40582e:	696b      	ldreq	r3, [r5, #20]
  405830:	2300      	movne	r3, #0
  405832:	1ba4      	subs	r4, r4, r6
  405834:	60ab      	str	r3, [r5, #8]
  405836:	e00a      	b.n	40584e <__sflush_r+0xb6>
  405838:	4632      	mov	r2, r6
  40583a:	4623      	mov	r3, r4
  40583c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40583e:	69e9      	ldr	r1, [r5, #28]
  405840:	4640      	mov	r0, r8
  405842:	47b8      	blx	r7
  405844:	2800      	cmp	r0, #0
  405846:	eba4 0400 	sub.w	r4, r4, r0
  40584a:	4406      	add	r6, r0
  40584c:	dd04      	ble.n	405858 <__sflush_r+0xc0>
  40584e:	2c00      	cmp	r4, #0
  405850:	dcf2      	bgt.n	405838 <__sflush_r+0xa0>
  405852:	2000      	movs	r0, #0
  405854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405858:	89ab      	ldrh	r3, [r5, #12]
  40585a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40585e:	81ab      	strh	r3, [r5, #12]
  405860:	f04f 30ff 	mov.w	r0, #4294967295
  405864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405868:	89ab      	ldrh	r3, [r5, #12]
  40586a:	692a      	ldr	r2, [r5, #16]
  40586c:	6069      	str	r1, [r5, #4]
  40586e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405872:	b29b      	uxth	r3, r3
  405874:	81ab      	strh	r3, [r5, #12]
  405876:	04db      	lsls	r3, r3, #19
  405878:	602a      	str	r2, [r5, #0]
  40587a:	d5c3      	bpl.n	405804 <__sflush_r+0x6c>
  40587c:	6528      	str	r0, [r5, #80]	; 0x50
  40587e:	e7c1      	b.n	405804 <__sflush_r+0x6c>
  405880:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405882:	2a00      	cmp	r2, #0
  405884:	dc96      	bgt.n	4057b4 <__sflush_r+0x1c>
  405886:	e7e4      	b.n	405852 <__sflush_r+0xba>
  405888:	2301      	movs	r3, #1
  40588a:	4640      	mov	r0, r8
  40588c:	69e9      	ldr	r1, [r5, #28]
  40588e:	47b0      	blx	r6
  405890:	1c43      	adds	r3, r0, #1
  405892:	4602      	mov	r2, r0
  405894:	d019      	beq.n	4058ca <__sflush_r+0x132>
  405896:	89ab      	ldrh	r3, [r5, #12]
  405898:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40589a:	e79a      	b.n	4057d2 <__sflush_r+0x3a>
  40589c:	f8d8 1000 	ldr.w	r1, [r8]
  4058a0:	2900      	cmp	r1, #0
  4058a2:	d0e1      	beq.n	405868 <__sflush_r+0xd0>
  4058a4:	291d      	cmp	r1, #29
  4058a6:	d007      	beq.n	4058b8 <__sflush_r+0x120>
  4058a8:	2916      	cmp	r1, #22
  4058aa:	d005      	beq.n	4058b8 <__sflush_r+0x120>
  4058ac:	89ab      	ldrh	r3, [r5, #12]
  4058ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058b2:	81ab      	strh	r3, [r5, #12]
  4058b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4058b8:	89ab      	ldrh	r3, [r5, #12]
  4058ba:	692a      	ldr	r2, [r5, #16]
  4058bc:	602a      	str	r2, [r5, #0]
  4058be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4058c2:	2200      	movs	r2, #0
  4058c4:	81ab      	strh	r3, [r5, #12]
  4058c6:	606a      	str	r2, [r5, #4]
  4058c8:	e79c      	b.n	405804 <__sflush_r+0x6c>
  4058ca:	f8d8 3000 	ldr.w	r3, [r8]
  4058ce:	2b00      	cmp	r3, #0
  4058d0:	d0e1      	beq.n	405896 <__sflush_r+0xfe>
  4058d2:	2b1d      	cmp	r3, #29
  4058d4:	d007      	beq.n	4058e6 <__sflush_r+0x14e>
  4058d6:	2b16      	cmp	r3, #22
  4058d8:	d005      	beq.n	4058e6 <__sflush_r+0x14e>
  4058da:	89ab      	ldrh	r3, [r5, #12]
  4058dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058e0:	81ab      	strh	r3, [r5, #12]
  4058e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4058e6:	f8c8 4000 	str.w	r4, [r8]
  4058ea:	e7b2      	b.n	405852 <__sflush_r+0xba>

004058ec <_fflush_r>:
  4058ec:	b510      	push	{r4, lr}
  4058ee:	4604      	mov	r4, r0
  4058f0:	b082      	sub	sp, #8
  4058f2:	b108      	cbz	r0, 4058f8 <_fflush_r+0xc>
  4058f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4058f6:	b153      	cbz	r3, 40590e <_fflush_r+0x22>
  4058f8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4058fc:	b908      	cbnz	r0, 405902 <_fflush_r+0x16>
  4058fe:	b002      	add	sp, #8
  405900:	bd10      	pop	{r4, pc}
  405902:	4620      	mov	r0, r4
  405904:	b002      	add	sp, #8
  405906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40590a:	f7ff bf45 	b.w	405798 <__sflush_r>
  40590e:	9101      	str	r1, [sp, #4]
  405910:	f000 f880 	bl	405a14 <__sinit>
  405914:	9901      	ldr	r1, [sp, #4]
  405916:	e7ef      	b.n	4058f8 <_fflush_r+0xc>

00405918 <_cleanup_r>:
  405918:	4901      	ldr	r1, [pc, #4]	; (405920 <_cleanup_r+0x8>)
  40591a:	f000 bbb7 	b.w	40608c <_fwalk_reent>
  40591e:	bf00      	nop
  405920:	00406f09 	.word	0x00406f09

00405924 <__sinit.part.1>:
  405924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405928:	4b35      	ldr	r3, [pc, #212]	; (405a00 <__sinit.part.1+0xdc>)
  40592a:	6845      	ldr	r5, [r0, #4]
  40592c:	63c3      	str	r3, [r0, #60]	; 0x3c
  40592e:	2400      	movs	r4, #0
  405930:	4607      	mov	r7, r0
  405932:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  405936:	2304      	movs	r3, #4
  405938:	2103      	movs	r1, #3
  40593a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40593e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  405942:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  405946:	b083      	sub	sp, #12
  405948:	602c      	str	r4, [r5, #0]
  40594a:	606c      	str	r4, [r5, #4]
  40594c:	60ac      	str	r4, [r5, #8]
  40594e:	666c      	str	r4, [r5, #100]	; 0x64
  405950:	81ec      	strh	r4, [r5, #14]
  405952:	612c      	str	r4, [r5, #16]
  405954:	616c      	str	r4, [r5, #20]
  405956:	61ac      	str	r4, [r5, #24]
  405958:	81ab      	strh	r3, [r5, #12]
  40595a:	4621      	mov	r1, r4
  40595c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405960:	2208      	movs	r2, #8
  405962:	f7fe febd 	bl	4046e0 <memset>
  405966:	68be      	ldr	r6, [r7, #8]
  405968:	f8df b098 	ldr.w	fp, [pc, #152]	; 405a04 <__sinit.part.1+0xe0>
  40596c:	f8df a098 	ldr.w	sl, [pc, #152]	; 405a08 <__sinit.part.1+0xe4>
  405970:	f8df 9098 	ldr.w	r9, [pc, #152]	; 405a0c <__sinit.part.1+0xe8>
  405974:	f8df 8098 	ldr.w	r8, [pc, #152]	; 405a10 <__sinit.part.1+0xec>
  405978:	f8c5 b020 	str.w	fp, [r5, #32]
  40597c:	2301      	movs	r3, #1
  40597e:	2209      	movs	r2, #9
  405980:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  405984:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  405988:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40598c:	61ed      	str	r5, [r5, #28]
  40598e:	4621      	mov	r1, r4
  405990:	81f3      	strh	r3, [r6, #14]
  405992:	81b2      	strh	r2, [r6, #12]
  405994:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  405998:	6034      	str	r4, [r6, #0]
  40599a:	6074      	str	r4, [r6, #4]
  40599c:	60b4      	str	r4, [r6, #8]
  40599e:	6674      	str	r4, [r6, #100]	; 0x64
  4059a0:	6134      	str	r4, [r6, #16]
  4059a2:	6174      	str	r4, [r6, #20]
  4059a4:	61b4      	str	r4, [r6, #24]
  4059a6:	2208      	movs	r2, #8
  4059a8:	9301      	str	r3, [sp, #4]
  4059aa:	f7fe fe99 	bl	4046e0 <memset>
  4059ae:	68fd      	ldr	r5, [r7, #12]
  4059b0:	61f6      	str	r6, [r6, #28]
  4059b2:	2012      	movs	r0, #18
  4059b4:	2202      	movs	r2, #2
  4059b6:	f8c6 b020 	str.w	fp, [r6, #32]
  4059ba:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4059be:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4059c2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4059c6:	4621      	mov	r1, r4
  4059c8:	81a8      	strh	r0, [r5, #12]
  4059ca:	81ea      	strh	r2, [r5, #14]
  4059cc:	602c      	str	r4, [r5, #0]
  4059ce:	606c      	str	r4, [r5, #4]
  4059d0:	60ac      	str	r4, [r5, #8]
  4059d2:	666c      	str	r4, [r5, #100]	; 0x64
  4059d4:	612c      	str	r4, [r5, #16]
  4059d6:	616c      	str	r4, [r5, #20]
  4059d8:	61ac      	str	r4, [r5, #24]
  4059da:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4059de:	2208      	movs	r2, #8
  4059e0:	f7fe fe7e 	bl	4046e0 <memset>
  4059e4:	9b01      	ldr	r3, [sp, #4]
  4059e6:	61ed      	str	r5, [r5, #28]
  4059e8:	f8c5 b020 	str.w	fp, [r5, #32]
  4059ec:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4059f0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4059f4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4059f8:	63bb      	str	r3, [r7, #56]	; 0x38
  4059fa:	b003      	add	sp, #12
  4059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a00:	00405919 	.word	0x00405919
  405a04:	00406c7d 	.word	0x00406c7d
  405a08:	00406ca1 	.word	0x00406ca1
  405a0c:	00406cd9 	.word	0x00406cd9
  405a10:	00406cf9 	.word	0x00406cf9

00405a14 <__sinit>:
  405a14:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405a16:	b103      	cbz	r3, 405a1a <__sinit+0x6>
  405a18:	4770      	bx	lr
  405a1a:	f7ff bf83 	b.w	405924 <__sinit.part.1>
  405a1e:	bf00      	nop

00405a20 <__sfp_lock_acquire>:
  405a20:	4770      	bx	lr
  405a22:	bf00      	nop

00405a24 <__sfp_lock_release>:
  405a24:	4770      	bx	lr
  405a26:	bf00      	nop

00405a28 <__libc_fini_array>:
  405a28:	b538      	push	{r3, r4, r5, lr}
  405a2a:	4b08      	ldr	r3, [pc, #32]	; (405a4c <__libc_fini_array+0x24>)
  405a2c:	4d08      	ldr	r5, [pc, #32]	; (405a50 <__libc_fini_array+0x28>)
  405a2e:	1aed      	subs	r5, r5, r3
  405a30:	10ac      	asrs	r4, r5, #2
  405a32:	bf18      	it	ne
  405a34:	18ed      	addne	r5, r5, r3
  405a36:	d005      	beq.n	405a44 <__libc_fini_array+0x1c>
  405a38:	3c01      	subs	r4, #1
  405a3a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405a3e:	4798      	blx	r3
  405a40:	2c00      	cmp	r4, #0
  405a42:	d1f9      	bne.n	405a38 <__libc_fini_array+0x10>
  405a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405a48:	f002 b9cc 	b.w	407de4 <_fini>
  405a4c:	00407df0 	.word	0x00407df0
  405a50:	00407df4 	.word	0x00407df4

00405a54 <__fputwc>:
  405a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a58:	b082      	sub	sp, #8
  405a5a:	4607      	mov	r7, r0
  405a5c:	460e      	mov	r6, r1
  405a5e:	4614      	mov	r4, r2
  405a60:	f000 fb42 	bl	4060e8 <__locale_mb_cur_max>
  405a64:	2801      	cmp	r0, #1
  405a66:	d041      	beq.n	405aec <__fputwc+0x98>
  405a68:	4638      	mov	r0, r7
  405a6a:	a901      	add	r1, sp, #4
  405a6c:	4632      	mov	r2, r6
  405a6e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405a72:	f001 f999 	bl	406da8 <_wcrtomb_r>
  405a76:	f1b0 3fff 	cmp.w	r0, #4294967295
  405a7a:	4680      	mov	r8, r0
  405a7c:	d02f      	beq.n	405ade <__fputwc+0x8a>
  405a7e:	2800      	cmp	r0, #0
  405a80:	d03c      	beq.n	405afc <__fputwc+0xa8>
  405a82:	f89d 1004 	ldrb.w	r1, [sp, #4]
  405a86:	2500      	movs	r5, #0
  405a88:	e009      	b.n	405a9e <__fputwc+0x4a>
  405a8a:	6823      	ldr	r3, [r4, #0]
  405a8c:	7019      	strb	r1, [r3, #0]
  405a8e:	6823      	ldr	r3, [r4, #0]
  405a90:	3301      	adds	r3, #1
  405a92:	6023      	str	r3, [r4, #0]
  405a94:	3501      	adds	r5, #1
  405a96:	45a8      	cmp	r8, r5
  405a98:	d930      	bls.n	405afc <__fputwc+0xa8>
  405a9a:	ab01      	add	r3, sp, #4
  405a9c:	5d59      	ldrb	r1, [r3, r5]
  405a9e:	68a3      	ldr	r3, [r4, #8]
  405aa0:	3b01      	subs	r3, #1
  405aa2:	2b00      	cmp	r3, #0
  405aa4:	60a3      	str	r3, [r4, #8]
  405aa6:	daf0      	bge.n	405a8a <__fputwc+0x36>
  405aa8:	69a2      	ldr	r2, [r4, #24]
  405aaa:	4293      	cmp	r3, r2
  405aac:	db07      	blt.n	405abe <__fputwc+0x6a>
  405aae:	6823      	ldr	r3, [r4, #0]
  405ab0:	7019      	strb	r1, [r3, #0]
  405ab2:	6823      	ldr	r3, [r4, #0]
  405ab4:	7819      	ldrb	r1, [r3, #0]
  405ab6:	290a      	cmp	r1, #10
  405ab8:	f103 0301 	add.w	r3, r3, #1
  405abc:	d1e9      	bne.n	405a92 <__fputwc+0x3e>
  405abe:	4638      	mov	r0, r7
  405ac0:	4622      	mov	r2, r4
  405ac2:	f001 f91d 	bl	406d00 <__swbuf_r>
  405ac6:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  405aca:	fab0 f080 	clz	r0, r0
  405ace:	0940      	lsrs	r0, r0, #5
  405ad0:	2800      	cmp	r0, #0
  405ad2:	d0df      	beq.n	405a94 <__fputwc+0x40>
  405ad4:	f04f 30ff 	mov.w	r0, #4294967295
  405ad8:	b002      	add	sp, #8
  405ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ade:	89a3      	ldrh	r3, [r4, #12]
  405ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ae4:	81a3      	strh	r3, [r4, #12]
  405ae6:	b002      	add	sp, #8
  405ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405aec:	1e73      	subs	r3, r6, #1
  405aee:	2bfe      	cmp	r3, #254	; 0xfe
  405af0:	d8ba      	bhi.n	405a68 <__fputwc+0x14>
  405af2:	b2f1      	uxtb	r1, r6
  405af4:	4680      	mov	r8, r0
  405af6:	f88d 1004 	strb.w	r1, [sp, #4]
  405afa:	e7c4      	b.n	405a86 <__fputwc+0x32>
  405afc:	4630      	mov	r0, r6
  405afe:	b002      	add	sp, #8
  405b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405b04 <_fputwc_r>:
  405b04:	8993      	ldrh	r3, [r2, #12]
  405b06:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  405b0a:	d10b      	bne.n	405b24 <_fputwc_r+0x20>
  405b0c:	b410      	push	{r4}
  405b0e:	6e54      	ldr	r4, [r2, #100]	; 0x64
  405b10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405b14:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  405b18:	6654      	str	r4, [r2, #100]	; 0x64
  405b1a:	8193      	strh	r3, [r2, #12]
  405b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  405b20:	f7ff bf98 	b.w	405a54 <__fputwc>
  405b24:	f7ff bf96 	b.w	405a54 <__fputwc>

00405b28 <_malloc_trim_r>:
  405b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405b2a:	4f23      	ldr	r7, [pc, #140]	; (405bb8 <_malloc_trim_r+0x90>)
  405b2c:	460c      	mov	r4, r1
  405b2e:	4606      	mov	r6, r0
  405b30:	f000 fe98 	bl	406864 <__malloc_lock>
  405b34:	68bb      	ldr	r3, [r7, #8]
  405b36:	685d      	ldr	r5, [r3, #4]
  405b38:	f025 0503 	bic.w	r5, r5, #3
  405b3c:	1b29      	subs	r1, r5, r4
  405b3e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  405b42:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405b46:	f021 010f 	bic.w	r1, r1, #15
  405b4a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405b4e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405b52:	db07      	blt.n	405b64 <_malloc_trim_r+0x3c>
  405b54:	4630      	mov	r0, r6
  405b56:	2100      	movs	r1, #0
  405b58:	f001 f87e 	bl	406c58 <_sbrk_r>
  405b5c:	68bb      	ldr	r3, [r7, #8]
  405b5e:	442b      	add	r3, r5
  405b60:	4298      	cmp	r0, r3
  405b62:	d004      	beq.n	405b6e <_malloc_trim_r+0x46>
  405b64:	4630      	mov	r0, r6
  405b66:	f000 fe7f 	bl	406868 <__malloc_unlock>
  405b6a:	2000      	movs	r0, #0
  405b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b6e:	4630      	mov	r0, r6
  405b70:	4261      	negs	r1, r4
  405b72:	f001 f871 	bl	406c58 <_sbrk_r>
  405b76:	3001      	adds	r0, #1
  405b78:	d00d      	beq.n	405b96 <_malloc_trim_r+0x6e>
  405b7a:	4b10      	ldr	r3, [pc, #64]	; (405bbc <_malloc_trim_r+0x94>)
  405b7c:	68ba      	ldr	r2, [r7, #8]
  405b7e:	6819      	ldr	r1, [r3, #0]
  405b80:	1b2d      	subs	r5, r5, r4
  405b82:	f045 0501 	orr.w	r5, r5, #1
  405b86:	4630      	mov	r0, r6
  405b88:	1b09      	subs	r1, r1, r4
  405b8a:	6055      	str	r5, [r2, #4]
  405b8c:	6019      	str	r1, [r3, #0]
  405b8e:	f000 fe6b 	bl	406868 <__malloc_unlock>
  405b92:	2001      	movs	r0, #1
  405b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b96:	4630      	mov	r0, r6
  405b98:	2100      	movs	r1, #0
  405b9a:	f001 f85d 	bl	406c58 <_sbrk_r>
  405b9e:	68ba      	ldr	r2, [r7, #8]
  405ba0:	1a83      	subs	r3, r0, r2
  405ba2:	2b0f      	cmp	r3, #15
  405ba4:	ddde      	ble.n	405b64 <_malloc_trim_r+0x3c>
  405ba6:	4c06      	ldr	r4, [pc, #24]	; (405bc0 <_malloc_trim_r+0x98>)
  405ba8:	4904      	ldr	r1, [pc, #16]	; (405bbc <_malloc_trim_r+0x94>)
  405baa:	6824      	ldr	r4, [r4, #0]
  405bac:	f043 0301 	orr.w	r3, r3, #1
  405bb0:	1b00      	subs	r0, r0, r4
  405bb2:	6053      	str	r3, [r2, #4]
  405bb4:	6008      	str	r0, [r1, #0]
  405bb6:	e7d5      	b.n	405b64 <_malloc_trim_r+0x3c>
  405bb8:	20000480 	.word	0x20000480
  405bbc:	2001a8a0 	.word	0x2001a8a0
  405bc0:	2000088c 	.word	0x2000088c

00405bc4 <_free_r>:
  405bc4:	2900      	cmp	r1, #0
  405bc6:	d04e      	beq.n	405c66 <_free_r+0xa2>
  405bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405bcc:	460c      	mov	r4, r1
  405bce:	4680      	mov	r8, r0
  405bd0:	f000 fe48 	bl	406864 <__malloc_lock>
  405bd4:	f854 7c04 	ldr.w	r7, [r4, #-4]
  405bd8:	4962      	ldr	r1, [pc, #392]	; (405d64 <_free_r+0x1a0>)
  405bda:	f027 0201 	bic.w	r2, r7, #1
  405bde:	f1a4 0508 	sub.w	r5, r4, #8
  405be2:	18ab      	adds	r3, r5, r2
  405be4:	688e      	ldr	r6, [r1, #8]
  405be6:	6858      	ldr	r0, [r3, #4]
  405be8:	429e      	cmp	r6, r3
  405bea:	f020 0003 	bic.w	r0, r0, #3
  405bee:	d05a      	beq.n	405ca6 <_free_r+0xe2>
  405bf0:	07fe      	lsls	r6, r7, #31
  405bf2:	6058      	str	r0, [r3, #4]
  405bf4:	d40b      	bmi.n	405c0e <_free_r+0x4a>
  405bf6:	f854 7c08 	ldr.w	r7, [r4, #-8]
  405bfa:	1bed      	subs	r5, r5, r7
  405bfc:	f101 0e08 	add.w	lr, r1, #8
  405c00:	68ac      	ldr	r4, [r5, #8]
  405c02:	4574      	cmp	r4, lr
  405c04:	443a      	add	r2, r7
  405c06:	d067      	beq.n	405cd8 <_free_r+0x114>
  405c08:	68ef      	ldr	r7, [r5, #12]
  405c0a:	60e7      	str	r7, [r4, #12]
  405c0c:	60bc      	str	r4, [r7, #8]
  405c0e:	181c      	adds	r4, r3, r0
  405c10:	6864      	ldr	r4, [r4, #4]
  405c12:	07e4      	lsls	r4, r4, #31
  405c14:	d40c      	bmi.n	405c30 <_free_r+0x6c>
  405c16:	4f54      	ldr	r7, [pc, #336]	; (405d68 <_free_r+0x1a4>)
  405c18:	689c      	ldr	r4, [r3, #8]
  405c1a:	42bc      	cmp	r4, r7
  405c1c:	4402      	add	r2, r0
  405c1e:	d07c      	beq.n	405d1a <_free_r+0x156>
  405c20:	68d8      	ldr	r0, [r3, #12]
  405c22:	60e0      	str	r0, [r4, #12]
  405c24:	f042 0301 	orr.w	r3, r2, #1
  405c28:	6084      	str	r4, [r0, #8]
  405c2a:	606b      	str	r3, [r5, #4]
  405c2c:	50aa      	str	r2, [r5, r2]
  405c2e:	e003      	b.n	405c38 <_free_r+0x74>
  405c30:	f042 0301 	orr.w	r3, r2, #1
  405c34:	606b      	str	r3, [r5, #4]
  405c36:	50aa      	str	r2, [r5, r2]
  405c38:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405c3c:	d214      	bcs.n	405c68 <_free_r+0xa4>
  405c3e:	08d2      	lsrs	r2, r2, #3
  405c40:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  405c44:	6848      	ldr	r0, [r1, #4]
  405c46:	689f      	ldr	r7, [r3, #8]
  405c48:	60af      	str	r7, [r5, #8]
  405c4a:	1092      	asrs	r2, r2, #2
  405c4c:	2401      	movs	r4, #1
  405c4e:	fa04 f202 	lsl.w	r2, r4, r2
  405c52:	4310      	orrs	r0, r2
  405c54:	60eb      	str	r3, [r5, #12]
  405c56:	6048      	str	r0, [r1, #4]
  405c58:	609d      	str	r5, [r3, #8]
  405c5a:	60fd      	str	r5, [r7, #12]
  405c5c:	4640      	mov	r0, r8
  405c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c62:	f000 be01 	b.w	406868 <__malloc_unlock>
  405c66:	4770      	bx	lr
  405c68:	0a53      	lsrs	r3, r2, #9
  405c6a:	2b04      	cmp	r3, #4
  405c6c:	d847      	bhi.n	405cfe <_free_r+0x13a>
  405c6e:	0993      	lsrs	r3, r2, #6
  405c70:	f103 0438 	add.w	r4, r3, #56	; 0x38
  405c74:	0060      	lsls	r0, r4, #1
  405c76:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  405c7a:	493a      	ldr	r1, [pc, #232]	; (405d64 <_free_r+0x1a0>)
  405c7c:	6883      	ldr	r3, [r0, #8]
  405c7e:	4283      	cmp	r3, r0
  405c80:	d043      	beq.n	405d0a <_free_r+0x146>
  405c82:	6859      	ldr	r1, [r3, #4]
  405c84:	f021 0103 	bic.w	r1, r1, #3
  405c88:	4291      	cmp	r1, r2
  405c8a:	d902      	bls.n	405c92 <_free_r+0xce>
  405c8c:	689b      	ldr	r3, [r3, #8]
  405c8e:	4298      	cmp	r0, r3
  405c90:	d1f7      	bne.n	405c82 <_free_r+0xbe>
  405c92:	68da      	ldr	r2, [r3, #12]
  405c94:	60ea      	str	r2, [r5, #12]
  405c96:	60ab      	str	r3, [r5, #8]
  405c98:	4640      	mov	r0, r8
  405c9a:	6095      	str	r5, [r2, #8]
  405c9c:	60dd      	str	r5, [r3, #12]
  405c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405ca2:	f000 bde1 	b.w	406868 <__malloc_unlock>
  405ca6:	07ff      	lsls	r7, r7, #31
  405ca8:	4402      	add	r2, r0
  405caa:	d407      	bmi.n	405cbc <_free_r+0xf8>
  405cac:	f854 3c08 	ldr.w	r3, [r4, #-8]
  405cb0:	1aed      	subs	r5, r5, r3
  405cb2:	441a      	add	r2, r3
  405cb4:	68a8      	ldr	r0, [r5, #8]
  405cb6:	68eb      	ldr	r3, [r5, #12]
  405cb8:	60c3      	str	r3, [r0, #12]
  405cba:	6098      	str	r0, [r3, #8]
  405cbc:	4b2b      	ldr	r3, [pc, #172]	; (405d6c <_free_r+0x1a8>)
  405cbe:	681b      	ldr	r3, [r3, #0]
  405cc0:	f042 0001 	orr.w	r0, r2, #1
  405cc4:	429a      	cmp	r2, r3
  405cc6:	6068      	str	r0, [r5, #4]
  405cc8:	608d      	str	r5, [r1, #8]
  405cca:	d3c7      	bcc.n	405c5c <_free_r+0x98>
  405ccc:	4b28      	ldr	r3, [pc, #160]	; (405d70 <_free_r+0x1ac>)
  405cce:	4640      	mov	r0, r8
  405cd0:	6819      	ldr	r1, [r3, #0]
  405cd2:	f7ff ff29 	bl	405b28 <_malloc_trim_r>
  405cd6:	e7c1      	b.n	405c5c <_free_r+0x98>
  405cd8:	1819      	adds	r1, r3, r0
  405cda:	6849      	ldr	r1, [r1, #4]
  405cdc:	07c9      	lsls	r1, r1, #31
  405cde:	d409      	bmi.n	405cf4 <_free_r+0x130>
  405ce0:	68d9      	ldr	r1, [r3, #12]
  405ce2:	689b      	ldr	r3, [r3, #8]
  405ce4:	4402      	add	r2, r0
  405ce6:	f042 0001 	orr.w	r0, r2, #1
  405cea:	60d9      	str	r1, [r3, #12]
  405cec:	608b      	str	r3, [r1, #8]
  405cee:	6068      	str	r0, [r5, #4]
  405cf0:	50aa      	str	r2, [r5, r2]
  405cf2:	e7b3      	b.n	405c5c <_free_r+0x98>
  405cf4:	f042 0301 	orr.w	r3, r2, #1
  405cf8:	606b      	str	r3, [r5, #4]
  405cfa:	50aa      	str	r2, [r5, r2]
  405cfc:	e7ae      	b.n	405c5c <_free_r+0x98>
  405cfe:	2b14      	cmp	r3, #20
  405d00:	d814      	bhi.n	405d2c <_free_r+0x168>
  405d02:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  405d06:	0060      	lsls	r0, r4, #1
  405d08:	e7b5      	b.n	405c76 <_free_r+0xb2>
  405d0a:	684a      	ldr	r2, [r1, #4]
  405d0c:	10a4      	asrs	r4, r4, #2
  405d0e:	2001      	movs	r0, #1
  405d10:	40a0      	lsls	r0, r4
  405d12:	4302      	orrs	r2, r0
  405d14:	604a      	str	r2, [r1, #4]
  405d16:	461a      	mov	r2, r3
  405d18:	e7bc      	b.n	405c94 <_free_r+0xd0>
  405d1a:	f042 0301 	orr.w	r3, r2, #1
  405d1e:	614d      	str	r5, [r1, #20]
  405d20:	610d      	str	r5, [r1, #16]
  405d22:	60ec      	str	r4, [r5, #12]
  405d24:	60ac      	str	r4, [r5, #8]
  405d26:	606b      	str	r3, [r5, #4]
  405d28:	50aa      	str	r2, [r5, r2]
  405d2a:	e797      	b.n	405c5c <_free_r+0x98>
  405d2c:	2b54      	cmp	r3, #84	; 0x54
  405d2e:	d804      	bhi.n	405d3a <_free_r+0x176>
  405d30:	0b13      	lsrs	r3, r2, #12
  405d32:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  405d36:	0060      	lsls	r0, r4, #1
  405d38:	e79d      	b.n	405c76 <_free_r+0xb2>
  405d3a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405d3e:	d804      	bhi.n	405d4a <_free_r+0x186>
  405d40:	0bd3      	lsrs	r3, r2, #15
  405d42:	f103 0477 	add.w	r4, r3, #119	; 0x77
  405d46:	0060      	lsls	r0, r4, #1
  405d48:	e795      	b.n	405c76 <_free_r+0xb2>
  405d4a:	f240 5054 	movw	r0, #1364	; 0x554
  405d4e:	4283      	cmp	r3, r0
  405d50:	d804      	bhi.n	405d5c <_free_r+0x198>
  405d52:	0c93      	lsrs	r3, r2, #18
  405d54:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  405d58:	0060      	lsls	r0, r4, #1
  405d5a:	e78c      	b.n	405c76 <_free_r+0xb2>
  405d5c:	20fc      	movs	r0, #252	; 0xfc
  405d5e:	247e      	movs	r4, #126	; 0x7e
  405d60:	e789      	b.n	405c76 <_free_r+0xb2>
  405d62:	bf00      	nop
  405d64:	20000480 	.word	0x20000480
  405d68:	20000488 	.word	0x20000488
  405d6c:	20000888 	.word	0x20000888
  405d70:	2001a89c 	.word	0x2001a89c

00405d74 <__sfvwrite_r>:
  405d74:	6893      	ldr	r3, [r2, #8]
  405d76:	2b00      	cmp	r3, #0
  405d78:	d07a      	beq.n	405e70 <__sfvwrite_r+0xfc>
  405d7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d7e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  405d82:	f01e 0f08 	tst.w	lr, #8
  405d86:	b083      	sub	sp, #12
  405d88:	460c      	mov	r4, r1
  405d8a:	4681      	mov	r9, r0
  405d8c:	4616      	mov	r6, r2
  405d8e:	d026      	beq.n	405dde <__sfvwrite_r+0x6a>
  405d90:	690b      	ldr	r3, [r1, #16]
  405d92:	b323      	cbz	r3, 405dde <__sfvwrite_r+0x6a>
  405d94:	f00e 0802 	and.w	r8, lr, #2
  405d98:	fa1f f088 	uxth.w	r0, r8
  405d9c:	6835      	ldr	r5, [r6, #0]
  405d9e:	b370      	cbz	r0, 405dfe <__sfvwrite_r+0x8a>
  405da0:	f04f 0a00 	mov.w	sl, #0
  405da4:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 406088 <__sfvwrite_r+0x314>
  405da8:	46d0      	mov	r8, sl
  405daa:	45d8      	cmp	r8, fp
  405dac:	4643      	mov	r3, r8
  405dae:	4652      	mov	r2, sl
  405db0:	bf28      	it	cs
  405db2:	465b      	movcs	r3, fp
  405db4:	4648      	mov	r0, r9
  405db6:	f1b8 0f00 	cmp.w	r8, #0
  405dba:	d053      	beq.n	405e64 <__sfvwrite_r+0xf0>
  405dbc:	69e1      	ldr	r1, [r4, #28]
  405dbe:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405dc0:	47b8      	blx	r7
  405dc2:	2800      	cmp	r0, #0
  405dc4:	dd73      	ble.n	405eae <__sfvwrite_r+0x13a>
  405dc6:	68b3      	ldr	r3, [r6, #8]
  405dc8:	1a1b      	subs	r3, r3, r0
  405dca:	4482      	add	sl, r0
  405dcc:	ebc0 0808 	rsb	r8, r0, r8
  405dd0:	60b3      	str	r3, [r6, #8]
  405dd2:	2b00      	cmp	r3, #0
  405dd4:	d1e9      	bne.n	405daa <__sfvwrite_r+0x36>
  405dd6:	2000      	movs	r0, #0
  405dd8:	b003      	add	sp, #12
  405dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dde:	4648      	mov	r0, r9
  405de0:	4621      	mov	r1, r4
  405de2:	f7ff fc67 	bl	4056b4 <__swsetup_r>
  405de6:	2800      	cmp	r0, #0
  405de8:	f040 8145 	bne.w	406076 <__sfvwrite_r+0x302>
  405dec:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  405df0:	6835      	ldr	r5, [r6, #0]
  405df2:	f00e 0802 	and.w	r8, lr, #2
  405df6:	fa1f f088 	uxth.w	r0, r8
  405dfa:	2800      	cmp	r0, #0
  405dfc:	d1d0      	bne.n	405da0 <__sfvwrite_r+0x2c>
  405dfe:	f01e 0b01 	ands.w	fp, lr, #1
  405e02:	d15d      	bne.n	405ec0 <__sfvwrite_r+0x14c>
  405e04:	46d8      	mov	r8, fp
  405e06:	f1b8 0f00 	cmp.w	r8, #0
  405e0a:	d025      	beq.n	405e58 <__sfvwrite_r+0xe4>
  405e0c:	f41e 7f00 	tst.w	lr, #512	; 0x200
  405e10:	68a7      	ldr	r7, [r4, #8]
  405e12:	d02f      	beq.n	405e74 <__sfvwrite_r+0x100>
  405e14:	45b8      	cmp	r8, r7
  405e16:	46ba      	mov	sl, r7
  405e18:	f0c0 80a9 	bcc.w	405f6e <__sfvwrite_r+0x1fa>
  405e1c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  405e20:	f040 80b6 	bne.w	405f90 <__sfvwrite_r+0x21c>
  405e24:	6820      	ldr	r0, [r4, #0]
  405e26:	4652      	mov	r2, sl
  405e28:	4659      	mov	r1, fp
  405e2a:	f000 fcb7 	bl	40679c <memmove>
  405e2e:	68a0      	ldr	r0, [r4, #8]
  405e30:	6822      	ldr	r2, [r4, #0]
  405e32:	1bc0      	subs	r0, r0, r7
  405e34:	eb02 030a 	add.w	r3, r2, sl
  405e38:	60a0      	str	r0, [r4, #8]
  405e3a:	6023      	str	r3, [r4, #0]
  405e3c:	4640      	mov	r0, r8
  405e3e:	68b3      	ldr	r3, [r6, #8]
  405e40:	1a1b      	subs	r3, r3, r0
  405e42:	4483      	add	fp, r0
  405e44:	ebc0 0808 	rsb	r8, r0, r8
  405e48:	60b3      	str	r3, [r6, #8]
  405e4a:	2b00      	cmp	r3, #0
  405e4c:	d0c3      	beq.n	405dd6 <__sfvwrite_r+0x62>
  405e4e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  405e52:	f1b8 0f00 	cmp.w	r8, #0
  405e56:	d1d9      	bne.n	405e0c <__sfvwrite_r+0x98>
  405e58:	f8d5 b000 	ldr.w	fp, [r5]
  405e5c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405e60:	3508      	adds	r5, #8
  405e62:	e7d0      	b.n	405e06 <__sfvwrite_r+0x92>
  405e64:	f8d5 a000 	ldr.w	sl, [r5]
  405e68:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405e6c:	3508      	adds	r5, #8
  405e6e:	e79c      	b.n	405daa <__sfvwrite_r+0x36>
  405e70:	2000      	movs	r0, #0
  405e72:	4770      	bx	lr
  405e74:	6820      	ldr	r0, [r4, #0]
  405e76:	6923      	ldr	r3, [r4, #16]
  405e78:	4298      	cmp	r0, r3
  405e7a:	d803      	bhi.n	405e84 <__sfvwrite_r+0x110>
  405e7c:	6962      	ldr	r2, [r4, #20]
  405e7e:	4590      	cmp	r8, r2
  405e80:	f080 80b9 	bcs.w	405ff6 <__sfvwrite_r+0x282>
  405e84:	4547      	cmp	r7, r8
  405e86:	bf28      	it	cs
  405e88:	4647      	movcs	r7, r8
  405e8a:	463a      	mov	r2, r7
  405e8c:	4659      	mov	r1, fp
  405e8e:	f000 fc85 	bl	40679c <memmove>
  405e92:	68a3      	ldr	r3, [r4, #8]
  405e94:	6822      	ldr	r2, [r4, #0]
  405e96:	1bdb      	subs	r3, r3, r7
  405e98:	443a      	add	r2, r7
  405e9a:	60a3      	str	r3, [r4, #8]
  405e9c:	6022      	str	r2, [r4, #0]
  405e9e:	2b00      	cmp	r3, #0
  405ea0:	d14a      	bne.n	405f38 <__sfvwrite_r+0x1c4>
  405ea2:	4648      	mov	r0, r9
  405ea4:	4621      	mov	r1, r4
  405ea6:	f7ff fd21 	bl	4058ec <_fflush_r>
  405eaa:	2800      	cmp	r0, #0
  405eac:	d044      	beq.n	405f38 <__sfvwrite_r+0x1c4>
  405eae:	89a3      	ldrh	r3, [r4, #12]
  405eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405eb4:	f04f 30ff 	mov.w	r0, #4294967295
  405eb8:	81a3      	strh	r3, [r4, #12]
  405eba:	b003      	add	sp, #12
  405ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ec0:	4680      	mov	r8, r0
  405ec2:	9000      	str	r0, [sp, #0]
  405ec4:	4683      	mov	fp, r0
  405ec6:	4682      	mov	sl, r0
  405ec8:	f1ba 0f00 	cmp.w	sl, #0
  405ecc:	d02c      	beq.n	405f28 <__sfvwrite_r+0x1b4>
  405ece:	9b00      	ldr	r3, [sp, #0]
  405ed0:	2b00      	cmp	r3, #0
  405ed2:	d050      	beq.n	405f76 <__sfvwrite_r+0x202>
  405ed4:	6820      	ldr	r0, [r4, #0]
  405ed6:	6921      	ldr	r1, [r4, #16]
  405ed8:	f8d4 e008 	ldr.w	lr, [r4, #8]
  405edc:	6962      	ldr	r2, [r4, #20]
  405ede:	45d0      	cmp	r8, sl
  405ee0:	4643      	mov	r3, r8
  405ee2:	bf28      	it	cs
  405ee4:	4653      	movcs	r3, sl
  405ee6:	4288      	cmp	r0, r1
  405ee8:	461f      	mov	r7, r3
  405eea:	d904      	bls.n	405ef6 <__sfvwrite_r+0x182>
  405eec:	eb0e 0c02 	add.w	ip, lr, r2
  405ef0:	4563      	cmp	r3, ip
  405ef2:	f300 8092 	bgt.w	40601a <__sfvwrite_r+0x2a6>
  405ef6:	4293      	cmp	r3, r2
  405ef8:	db20      	blt.n	405f3c <__sfvwrite_r+0x1c8>
  405efa:	4613      	mov	r3, r2
  405efc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405efe:	69e1      	ldr	r1, [r4, #28]
  405f00:	4648      	mov	r0, r9
  405f02:	465a      	mov	r2, fp
  405f04:	47b8      	blx	r7
  405f06:	1e07      	subs	r7, r0, #0
  405f08:	ddd1      	ble.n	405eae <__sfvwrite_r+0x13a>
  405f0a:	ebb8 0807 	subs.w	r8, r8, r7
  405f0e:	d025      	beq.n	405f5c <__sfvwrite_r+0x1e8>
  405f10:	68b3      	ldr	r3, [r6, #8]
  405f12:	1bdb      	subs	r3, r3, r7
  405f14:	44bb      	add	fp, r7
  405f16:	ebc7 0a0a 	rsb	sl, r7, sl
  405f1a:	60b3      	str	r3, [r6, #8]
  405f1c:	2b00      	cmp	r3, #0
  405f1e:	f43f af5a 	beq.w	405dd6 <__sfvwrite_r+0x62>
  405f22:	f1ba 0f00 	cmp.w	sl, #0
  405f26:	d1d2      	bne.n	405ece <__sfvwrite_r+0x15a>
  405f28:	2300      	movs	r3, #0
  405f2a:	f8d5 b000 	ldr.w	fp, [r5]
  405f2e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  405f32:	9300      	str	r3, [sp, #0]
  405f34:	3508      	adds	r5, #8
  405f36:	e7c7      	b.n	405ec8 <__sfvwrite_r+0x154>
  405f38:	4638      	mov	r0, r7
  405f3a:	e780      	b.n	405e3e <__sfvwrite_r+0xca>
  405f3c:	461a      	mov	r2, r3
  405f3e:	4659      	mov	r1, fp
  405f40:	9301      	str	r3, [sp, #4]
  405f42:	f000 fc2b 	bl	40679c <memmove>
  405f46:	68a2      	ldr	r2, [r4, #8]
  405f48:	6821      	ldr	r1, [r4, #0]
  405f4a:	9b01      	ldr	r3, [sp, #4]
  405f4c:	ebb8 0807 	subs.w	r8, r8, r7
  405f50:	eba2 0203 	sub.w	r2, r2, r3
  405f54:	440b      	add	r3, r1
  405f56:	60a2      	str	r2, [r4, #8]
  405f58:	6023      	str	r3, [r4, #0]
  405f5a:	d1d9      	bne.n	405f10 <__sfvwrite_r+0x19c>
  405f5c:	4648      	mov	r0, r9
  405f5e:	4621      	mov	r1, r4
  405f60:	f7ff fcc4 	bl	4058ec <_fflush_r>
  405f64:	2800      	cmp	r0, #0
  405f66:	d1a2      	bne.n	405eae <__sfvwrite_r+0x13a>
  405f68:	f8cd 8000 	str.w	r8, [sp]
  405f6c:	e7d0      	b.n	405f10 <__sfvwrite_r+0x19c>
  405f6e:	6820      	ldr	r0, [r4, #0]
  405f70:	4647      	mov	r7, r8
  405f72:	46c2      	mov	sl, r8
  405f74:	e757      	b.n	405e26 <__sfvwrite_r+0xb2>
  405f76:	4658      	mov	r0, fp
  405f78:	210a      	movs	r1, #10
  405f7a:	4652      	mov	r2, sl
  405f7c:	f000 fbc4 	bl	406708 <memchr>
  405f80:	2800      	cmp	r0, #0
  405f82:	d073      	beq.n	40606c <__sfvwrite_r+0x2f8>
  405f84:	3001      	adds	r0, #1
  405f86:	2301      	movs	r3, #1
  405f88:	ebcb 0800 	rsb	r8, fp, r0
  405f8c:	9300      	str	r3, [sp, #0]
  405f8e:	e7a1      	b.n	405ed4 <__sfvwrite_r+0x160>
  405f90:	6967      	ldr	r7, [r4, #20]
  405f92:	6921      	ldr	r1, [r4, #16]
  405f94:	6823      	ldr	r3, [r4, #0]
  405f96:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  405f9a:	1a5b      	subs	r3, r3, r1
  405f9c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  405fa0:	1c58      	adds	r0, r3, #1
  405fa2:	107f      	asrs	r7, r7, #1
  405fa4:	4440      	add	r0, r8
  405fa6:	4287      	cmp	r7, r0
  405fa8:	463a      	mov	r2, r7
  405faa:	bf3c      	itt	cc
  405fac:	4607      	movcc	r7, r0
  405fae:	463a      	movcc	r2, r7
  405fb0:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  405fb4:	9300      	str	r3, [sp, #0]
  405fb6:	d046      	beq.n	406046 <__sfvwrite_r+0x2d2>
  405fb8:	4611      	mov	r1, r2
  405fba:	4648      	mov	r0, r9
  405fbc:	f000 f912 	bl	4061e4 <_malloc_r>
  405fc0:	9b00      	ldr	r3, [sp, #0]
  405fc2:	4682      	mov	sl, r0
  405fc4:	2800      	cmp	r0, #0
  405fc6:	d059      	beq.n	40607c <__sfvwrite_r+0x308>
  405fc8:	461a      	mov	r2, r3
  405fca:	6921      	ldr	r1, [r4, #16]
  405fcc:	9300      	str	r3, [sp, #0]
  405fce:	f7fe faed 	bl	4045ac <memcpy>
  405fd2:	89a2      	ldrh	r2, [r4, #12]
  405fd4:	9b00      	ldr	r3, [sp, #0]
  405fd6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405fde:	81a2      	strh	r2, [r4, #12]
  405fe0:	eb0a 0003 	add.w	r0, sl, r3
  405fe4:	1afb      	subs	r3, r7, r3
  405fe6:	f8c4 a010 	str.w	sl, [r4, #16]
  405fea:	6167      	str	r7, [r4, #20]
  405fec:	6020      	str	r0, [r4, #0]
  405fee:	60a3      	str	r3, [r4, #8]
  405ff0:	4647      	mov	r7, r8
  405ff2:	46c2      	mov	sl, r8
  405ff4:	e717      	b.n	405e26 <__sfvwrite_r+0xb2>
  405ff6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  405ffa:	4543      	cmp	r3, r8
  405ffc:	bf28      	it	cs
  405ffe:	4643      	movcs	r3, r8
  406000:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406002:	fb93 f3f2 	sdiv	r3, r3, r2
  406006:	4648      	mov	r0, r9
  406008:	fb03 f302 	mul.w	r3, r3, r2
  40600c:	69e1      	ldr	r1, [r4, #28]
  40600e:	465a      	mov	r2, fp
  406010:	47b8      	blx	r7
  406012:	2800      	cmp	r0, #0
  406014:	f73f af13 	bgt.w	405e3e <__sfvwrite_r+0xca>
  406018:	e749      	b.n	405eae <__sfvwrite_r+0x13a>
  40601a:	4662      	mov	r2, ip
  40601c:	4659      	mov	r1, fp
  40601e:	f8cd c004 	str.w	ip, [sp, #4]
  406022:	f000 fbbb 	bl	40679c <memmove>
  406026:	6823      	ldr	r3, [r4, #0]
  406028:	f8dd c004 	ldr.w	ip, [sp, #4]
  40602c:	4463      	add	r3, ip
  40602e:	6023      	str	r3, [r4, #0]
  406030:	4648      	mov	r0, r9
  406032:	4621      	mov	r1, r4
  406034:	f7ff fc5a 	bl	4058ec <_fflush_r>
  406038:	f8dd c004 	ldr.w	ip, [sp, #4]
  40603c:	2800      	cmp	r0, #0
  40603e:	f47f af36 	bne.w	405eae <__sfvwrite_r+0x13a>
  406042:	4667      	mov	r7, ip
  406044:	e761      	b.n	405f0a <__sfvwrite_r+0x196>
  406046:	4648      	mov	r0, r9
  406048:	f000 fc10 	bl	40686c <_realloc_r>
  40604c:	9b00      	ldr	r3, [sp, #0]
  40604e:	4682      	mov	sl, r0
  406050:	2800      	cmp	r0, #0
  406052:	d1c5      	bne.n	405fe0 <__sfvwrite_r+0x26c>
  406054:	4648      	mov	r0, r9
  406056:	6921      	ldr	r1, [r4, #16]
  406058:	f7ff fdb4 	bl	405bc4 <_free_r>
  40605c:	89a3      	ldrh	r3, [r4, #12]
  40605e:	220c      	movs	r2, #12
  406060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406064:	b29b      	uxth	r3, r3
  406066:	f8c9 2000 	str.w	r2, [r9]
  40606a:	e721      	b.n	405eb0 <__sfvwrite_r+0x13c>
  40606c:	2301      	movs	r3, #1
  40606e:	f10a 0801 	add.w	r8, sl, #1
  406072:	9300      	str	r3, [sp, #0]
  406074:	e72e      	b.n	405ed4 <__sfvwrite_r+0x160>
  406076:	f04f 30ff 	mov.w	r0, #4294967295
  40607a:	e6ad      	b.n	405dd8 <__sfvwrite_r+0x64>
  40607c:	230c      	movs	r3, #12
  40607e:	f8c9 3000 	str.w	r3, [r9]
  406082:	89a3      	ldrh	r3, [r4, #12]
  406084:	e714      	b.n	405eb0 <__sfvwrite_r+0x13c>
  406086:	bf00      	nop
  406088:	7ffffc00 	.word	0x7ffffc00

0040608c <_fwalk_reent>:
  40608c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406090:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406094:	d01f      	beq.n	4060d6 <_fwalk_reent+0x4a>
  406096:	4688      	mov	r8, r1
  406098:	4606      	mov	r6, r0
  40609a:	f04f 0900 	mov.w	r9, #0
  40609e:	687d      	ldr	r5, [r7, #4]
  4060a0:	68bc      	ldr	r4, [r7, #8]
  4060a2:	3d01      	subs	r5, #1
  4060a4:	d411      	bmi.n	4060ca <_fwalk_reent+0x3e>
  4060a6:	89a3      	ldrh	r3, [r4, #12]
  4060a8:	2b01      	cmp	r3, #1
  4060aa:	f105 35ff 	add.w	r5, r5, #4294967295
  4060ae:	d908      	bls.n	4060c2 <_fwalk_reent+0x36>
  4060b0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4060b4:	3301      	adds	r3, #1
  4060b6:	4621      	mov	r1, r4
  4060b8:	4630      	mov	r0, r6
  4060ba:	d002      	beq.n	4060c2 <_fwalk_reent+0x36>
  4060bc:	47c0      	blx	r8
  4060be:	ea49 0900 	orr.w	r9, r9, r0
  4060c2:	1c6b      	adds	r3, r5, #1
  4060c4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4060c8:	d1ed      	bne.n	4060a6 <_fwalk_reent+0x1a>
  4060ca:	683f      	ldr	r7, [r7, #0]
  4060cc:	2f00      	cmp	r7, #0
  4060ce:	d1e6      	bne.n	40609e <_fwalk_reent+0x12>
  4060d0:	4648      	mov	r0, r9
  4060d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4060d6:	46b9      	mov	r9, r7
  4060d8:	4648      	mov	r0, r9
  4060da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4060de:	bf00      	nop

004060e0 <__locale_charset>:
  4060e0:	4800      	ldr	r0, [pc, #0]	; (4060e4 <__locale_charset+0x4>)
  4060e2:	4770      	bx	lr
  4060e4:	2000045c 	.word	0x2000045c

004060e8 <__locale_mb_cur_max>:
  4060e8:	4b01      	ldr	r3, [pc, #4]	; (4060f0 <__locale_mb_cur_max+0x8>)
  4060ea:	6818      	ldr	r0, [r3, #0]
  4060ec:	4770      	bx	lr
  4060ee:	bf00      	nop
  4060f0:	2000047c 	.word	0x2000047c

004060f4 <__smakebuf_r>:
  4060f4:	898b      	ldrh	r3, [r1, #12]
  4060f6:	b29a      	uxth	r2, r3
  4060f8:	f012 0f02 	tst.w	r2, #2
  4060fc:	d13c      	bne.n	406178 <__smakebuf_r+0x84>
  4060fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  406100:	460c      	mov	r4, r1
  406102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406106:	2900      	cmp	r1, #0
  406108:	b091      	sub	sp, #68	; 0x44
  40610a:	4605      	mov	r5, r0
  40610c:	db19      	blt.n	406142 <__smakebuf_r+0x4e>
  40610e:	aa01      	add	r2, sp, #4
  406110:	f000 ff3c 	bl	406f8c <_fstat_r>
  406114:	2800      	cmp	r0, #0
  406116:	db12      	blt.n	40613e <__smakebuf_r+0x4a>
  406118:	9b02      	ldr	r3, [sp, #8]
  40611a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  40611e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  406122:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  406126:	fab7 f787 	clz	r7, r7
  40612a:	ea4f 1757 	mov.w	r7, r7, lsr #5
  40612e:	d02a      	beq.n	406186 <__smakebuf_r+0x92>
  406130:	89a3      	ldrh	r3, [r4, #12]
  406132:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406136:	81a3      	strh	r3, [r4, #12]
  406138:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40613c:	e00b      	b.n	406156 <__smakebuf_r+0x62>
  40613e:	89a3      	ldrh	r3, [r4, #12]
  406140:	b29a      	uxth	r2, r3
  406142:	f012 0f80 	tst.w	r2, #128	; 0x80
  406146:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40614a:	81a3      	strh	r3, [r4, #12]
  40614c:	bf0c      	ite	eq
  40614e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  406152:	2640      	movne	r6, #64	; 0x40
  406154:	2700      	movs	r7, #0
  406156:	4628      	mov	r0, r5
  406158:	4631      	mov	r1, r6
  40615a:	f000 f843 	bl	4061e4 <_malloc_r>
  40615e:	89a3      	ldrh	r3, [r4, #12]
  406160:	b340      	cbz	r0, 4061b4 <__smakebuf_r+0xc0>
  406162:	4a1a      	ldr	r2, [pc, #104]	; (4061cc <__smakebuf_r+0xd8>)
  406164:	63ea      	str	r2, [r5, #60]	; 0x3c
  406166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40616a:	81a3      	strh	r3, [r4, #12]
  40616c:	6020      	str	r0, [r4, #0]
  40616e:	6120      	str	r0, [r4, #16]
  406170:	6166      	str	r6, [r4, #20]
  406172:	b99f      	cbnz	r7, 40619c <__smakebuf_r+0xa8>
  406174:	b011      	add	sp, #68	; 0x44
  406176:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406178:	f101 0343 	add.w	r3, r1, #67	; 0x43
  40617c:	2201      	movs	r2, #1
  40617e:	600b      	str	r3, [r1, #0]
  406180:	610b      	str	r3, [r1, #16]
  406182:	614a      	str	r2, [r1, #20]
  406184:	4770      	bx	lr
  406186:	4b12      	ldr	r3, [pc, #72]	; (4061d0 <__smakebuf_r+0xdc>)
  406188:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40618a:	429a      	cmp	r2, r3
  40618c:	d1d0      	bne.n	406130 <__smakebuf_r+0x3c>
  40618e:	89a3      	ldrh	r3, [r4, #12]
  406190:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406194:	4333      	orrs	r3, r6
  406196:	81a3      	strh	r3, [r4, #12]
  406198:	64e6      	str	r6, [r4, #76]	; 0x4c
  40619a:	e7dc      	b.n	406156 <__smakebuf_r+0x62>
  40619c:	4628      	mov	r0, r5
  40619e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4061a2:	f000 ff07 	bl	406fb4 <_isatty_r>
  4061a6:	2800      	cmp	r0, #0
  4061a8:	d0e4      	beq.n	406174 <__smakebuf_r+0x80>
  4061aa:	89a3      	ldrh	r3, [r4, #12]
  4061ac:	f043 0301 	orr.w	r3, r3, #1
  4061b0:	81a3      	strh	r3, [r4, #12]
  4061b2:	e7df      	b.n	406174 <__smakebuf_r+0x80>
  4061b4:	059a      	lsls	r2, r3, #22
  4061b6:	d4dd      	bmi.n	406174 <__smakebuf_r+0x80>
  4061b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4061bc:	f043 0302 	orr.w	r3, r3, #2
  4061c0:	2101      	movs	r1, #1
  4061c2:	81a3      	strh	r3, [r4, #12]
  4061c4:	6022      	str	r2, [r4, #0]
  4061c6:	6122      	str	r2, [r4, #16]
  4061c8:	6161      	str	r1, [r4, #20]
  4061ca:	e7d3      	b.n	406174 <__smakebuf_r+0x80>
  4061cc:	00405919 	.word	0x00405919
  4061d0:	00406cd9 	.word	0x00406cd9

004061d4 <malloc>:
  4061d4:	4b02      	ldr	r3, [pc, #8]	; (4061e0 <malloc+0xc>)
  4061d6:	4601      	mov	r1, r0
  4061d8:	6818      	ldr	r0, [r3, #0]
  4061da:	f000 b803 	b.w	4061e4 <_malloc_r>
  4061de:	bf00      	nop
  4061e0:	20000458 	.word	0x20000458

004061e4 <_malloc_r>:
  4061e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061e8:	f101 050b 	add.w	r5, r1, #11
  4061ec:	2d16      	cmp	r5, #22
  4061ee:	b083      	sub	sp, #12
  4061f0:	4606      	mov	r6, r0
  4061f2:	d927      	bls.n	406244 <_malloc_r+0x60>
  4061f4:	f035 0507 	bics.w	r5, r5, #7
  4061f8:	f100 80b6 	bmi.w	406368 <_malloc_r+0x184>
  4061fc:	42a9      	cmp	r1, r5
  4061fe:	f200 80b3 	bhi.w	406368 <_malloc_r+0x184>
  406202:	f000 fb2f 	bl	406864 <__malloc_lock>
  406206:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40620a:	d222      	bcs.n	406252 <_malloc_r+0x6e>
  40620c:	4fc2      	ldr	r7, [pc, #776]	; (406518 <_malloc_r+0x334>)
  40620e:	08e8      	lsrs	r0, r5, #3
  406210:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  406214:	68dc      	ldr	r4, [r3, #12]
  406216:	429c      	cmp	r4, r3
  406218:	f000 81c8 	beq.w	4065ac <_malloc_r+0x3c8>
  40621c:	6863      	ldr	r3, [r4, #4]
  40621e:	68e1      	ldr	r1, [r4, #12]
  406220:	68a5      	ldr	r5, [r4, #8]
  406222:	f023 0303 	bic.w	r3, r3, #3
  406226:	4423      	add	r3, r4
  406228:	4630      	mov	r0, r6
  40622a:	685a      	ldr	r2, [r3, #4]
  40622c:	60e9      	str	r1, [r5, #12]
  40622e:	f042 0201 	orr.w	r2, r2, #1
  406232:	608d      	str	r5, [r1, #8]
  406234:	605a      	str	r2, [r3, #4]
  406236:	f000 fb17 	bl	406868 <__malloc_unlock>
  40623a:	3408      	adds	r4, #8
  40623c:	4620      	mov	r0, r4
  40623e:	b003      	add	sp, #12
  406240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406244:	2910      	cmp	r1, #16
  406246:	f200 808f 	bhi.w	406368 <_malloc_r+0x184>
  40624a:	f000 fb0b 	bl	406864 <__malloc_lock>
  40624e:	2510      	movs	r5, #16
  406250:	e7dc      	b.n	40620c <_malloc_r+0x28>
  406252:	0a68      	lsrs	r0, r5, #9
  406254:	f000 808f 	beq.w	406376 <_malloc_r+0x192>
  406258:	2804      	cmp	r0, #4
  40625a:	f200 8154 	bhi.w	406506 <_malloc_r+0x322>
  40625e:	09a8      	lsrs	r0, r5, #6
  406260:	3038      	adds	r0, #56	; 0x38
  406262:	0041      	lsls	r1, r0, #1
  406264:	4fac      	ldr	r7, [pc, #688]	; (406518 <_malloc_r+0x334>)
  406266:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40626a:	68cc      	ldr	r4, [r1, #12]
  40626c:	42a1      	cmp	r1, r4
  40626e:	d106      	bne.n	40627e <_malloc_r+0x9a>
  406270:	e00c      	b.n	40628c <_malloc_r+0xa8>
  406272:	2a00      	cmp	r2, #0
  406274:	f280 8082 	bge.w	40637c <_malloc_r+0x198>
  406278:	68e4      	ldr	r4, [r4, #12]
  40627a:	42a1      	cmp	r1, r4
  40627c:	d006      	beq.n	40628c <_malloc_r+0xa8>
  40627e:	6863      	ldr	r3, [r4, #4]
  406280:	f023 0303 	bic.w	r3, r3, #3
  406284:	1b5a      	subs	r2, r3, r5
  406286:	2a0f      	cmp	r2, #15
  406288:	ddf3      	ble.n	406272 <_malloc_r+0x8e>
  40628a:	3801      	subs	r0, #1
  40628c:	3001      	adds	r0, #1
  40628e:	49a2      	ldr	r1, [pc, #648]	; (406518 <_malloc_r+0x334>)
  406290:	693c      	ldr	r4, [r7, #16]
  406292:	f101 0e08 	add.w	lr, r1, #8
  406296:	4574      	cmp	r4, lr
  406298:	f000 817d 	beq.w	406596 <_malloc_r+0x3b2>
  40629c:	6863      	ldr	r3, [r4, #4]
  40629e:	f023 0303 	bic.w	r3, r3, #3
  4062a2:	1b5a      	subs	r2, r3, r5
  4062a4:	2a0f      	cmp	r2, #15
  4062a6:	f300 8163 	bgt.w	406570 <_malloc_r+0x38c>
  4062aa:	2a00      	cmp	r2, #0
  4062ac:	f8c1 e014 	str.w	lr, [r1, #20]
  4062b0:	f8c1 e010 	str.w	lr, [r1, #16]
  4062b4:	da73      	bge.n	40639e <_malloc_r+0x1ba>
  4062b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4062ba:	f080 8139 	bcs.w	406530 <_malloc_r+0x34c>
  4062be:	08db      	lsrs	r3, r3, #3
  4062c0:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  4062c4:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  4062c8:	684a      	ldr	r2, [r1, #4]
  4062ca:	f8d8 9008 	ldr.w	r9, [r8, #8]
  4062ce:	f8c4 9008 	str.w	r9, [r4, #8]
  4062d2:	2301      	movs	r3, #1
  4062d4:	fa03 f30c 	lsl.w	r3, r3, ip
  4062d8:	4313      	orrs	r3, r2
  4062da:	f8c4 800c 	str.w	r8, [r4, #12]
  4062de:	604b      	str	r3, [r1, #4]
  4062e0:	f8c8 4008 	str.w	r4, [r8, #8]
  4062e4:	f8c9 400c 	str.w	r4, [r9, #12]
  4062e8:	1082      	asrs	r2, r0, #2
  4062ea:	2401      	movs	r4, #1
  4062ec:	4094      	lsls	r4, r2
  4062ee:	429c      	cmp	r4, r3
  4062f0:	d862      	bhi.n	4063b8 <_malloc_r+0x1d4>
  4062f2:	4223      	tst	r3, r4
  4062f4:	d106      	bne.n	406304 <_malloc_r+0x120>
  4062f6:	f020 0003 	bic.w	r0, r0, #3
  4062fa:	0064      	lsls	r4, r4, #1
  4062fc:	4223      	tst	r3, r4
  4062fe:	f100 0004 	add.w	r0, r0, #4
  406302:	d0fa      	beq.n	4062fa <_malloc_r+0x116>
  406304:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  406308:	46c4      	mov	ip, r8
  40630a:	4681      	mov	r9, r0
  40630c:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406310:	459c      	cmp	ip, r3
  406312:	d107      	bne.n	406324 <_malloc_r+0x140>
  406314:	e141      	b.n	40659a <_malloc_r+0x3b6>
  406316:	2900      	cmp	r1, #0
  406318:	f280 8151 	bge.w	4065be <_malloc_r+0x3da>
  40631c:	68db      	ldr	r3, [r3, #12]
  40631e:	459c      	cmp	ip, r3
  406320:	f000 813b 	beq.w	40659a <_malloc_r+0x3b6>
  406324:	685a      	ldr	r2, [r3, #4]
  406326:	f022 0203 	bic.w	r2, r2, #3
  40632a:	1b51      	subs	r1, r2, r5
  40632c:	290f      	cmp	r1, #15
  40632e:	ddf2      	ble.n	406316 <_malloc_r+0x132>
  406330:	461c      	mov	r4, r3
  406332:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406336:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40633a:	195a      	adds	r2, r3, r5
  40633c:	f045 0901 	orr.w	r9, r5, #1
  406340:	f041 0501 	orr.w	r5, r1, #1
  406344:	f8c3 9004 	str.w	r9, [r3, #4]
  406348:	4630      	mov	r0, r6
  40634a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40634e:	f8cc 8008 	str.w	r8, [ip, #8]
  406352:	617a      	str	r2, [r7, #20]
  406354:	613a      	str	r2, [r7, #16]
  406356:	f8c2 e00c 	str.w	lr, [r2, #12]
  40635a:	f8c2 e008 	str.w	lr, [r2, #8]
  40635e:	6055      	str	r5, [r2, #4]
  406360:	5051      	str	r1, [r2, r1]
  406362:	f000 fa81 	bl	406868 <__malloc_unlock>
  406366:	e769      	b.n	40623c <_malloc_r+0x58>
  406368:	2400      	movs	r4, #0
  40636a:	230c      	movs	r3, #12
  40636c:	4620      	mov	r0, r4
  40636e:	6033      	str	r3, [r6, #0]
  406370:	b003      	add	sp, #12
  406372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406376:	217e      	movs	r1, #126	; 0x7e
  406378:	203f      	movs	r0, #63	; 0x3f
  40637a:	e773      	b.n	406264 <_malloc_r+0x80>
  40637c:	4423      	add	r3, r4
  40637e:	68e1      	ldr	r1, [r4, #12]
  406380:	685a      	ldr	r2, [r3, #4]
  406382:	68a5      	ldr	r5, [r4, #8]
  406384:	f042 0201 	orr.w	r2, r2, #1
  406388:	60e9      	str	r1, [r5, #12]
  40638a:	4630      	mov	r0, r6
  40638c:	608d      	str	r5, [r1, #8]
  40638e:	605a      	str	r2, [r3, #4]
  406390:	f000 fa6a 	bl	406868 <__malloc_unlock>
  406394:	3408      	adds	r4, #8
  406396:	4620      	mov	r0, r4
  406398:	b003      	add	sp, #12
  40639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40639e:	4423      	add	r3, r4
  4063a0:	4630      	mov	r0, r6
  4063a2:	685a      	ldr	r2, [r3, #4]
  4063a4:	f042 0201 	orr.w	r2, r2, #1
  4063a8:	605a      	str	r2, [r3, #4]
  4063aa:	f000 fa5d 	bl	406868 <__malloc_unlock>
  4063ae:	3408      	adds	r4, #8
  4063b0:	4620      	mov	r0, r4
  4063b2:	b003      	add	sp, #12
  4063b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063b8:	68bc      	ldr	r4, [r7, #8]
  4063ba:	6863      	ldr	r3, [r4, #4]
  4063bc:	f023 0803 	bic.w	r8, r3, #3
  4063c0:	4545      	cmp	r5, r8
  4063c2:	d804      	bhi.n	4063ce <_malloc_r+0x1ea>
  4063c4:	ebc5 0308 	rsb	r3, r5, r8
  4063c8:	2b0f      	cmp	r3, #15
  4063ca:	f300 808c 	bgt.w	4064e6 <_malloc_r+0x302>
  4063ce:	4b53      	ldr	r3, [pc, #332]	; (40651c <_malloc_r+0x338>)
  4063d0:	f8df a158 	ldr.w	sl, [pc, #344]	; 40652c <_malloc_r+0x348>
  4063d4:	681a      	ldr	r2, [r3, #0]
  4063d6:	f8da 3000 	ldr.w	r3, [sl]
  4063da:	3301      	adds	r3, #1
  4063dc:	442a      	add	r2, r5
  4063de:	eb04 0b08 	add.w	fp, r4, r8
  4063e2:	f000 8150 	beq.w	406686 <_malloc_r+0x4a2>
  4063e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4063ea:	320f      	adds	r2, #15
  4063ec:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4063f0:	f022 020f 	bic.w	r2, r2, #15
  4063f4:	4611      	mov	r1, r2
  4063f6:	4630      	mov	r0, r6
  4063f8:	9201      	str	r2, [sp, #4]
  4063fa:	f000 fc2d 	bl	406c58 <_sbrk_r>
  4063fe:	f1b0 3fff 	cmp.w	r0, #4294967295
  406402:	4681      	mov	r9, r0
  406404:	9a01      	ldr	r2, [sp, #4]
  406406:	f000 8147 	beq.w	406698 <_malloc_r+0x4b4>
  40640a:	4583      	cmp	fp, r0
  40640c:	f200 80ee 	bhi.w	4065ec <_malloc_r+0x408>
  406410:	4b43      	ldr	r3, [pc, #268]	; (406520 <_malloc_r+0x33c>)
  406412:	6819      	ldr	r1, [r3, #0]
  406414:	45cb      	cmp	fp, r9
  406416:	4411      	add	r1, r2
  406418:	6019      	str	r1, [r3, #0]
  40641a:	f000 8142 	beq.w	4066a2 <_malloc_r+0x4be>
  40641e:	f8da 0000 	ldr.w	r0, [sl]
  406422:	f8df e108 	ldr.w	lr, [pc, #264]	; 40652c <_malloc_r+0x348>
  406426:	3001      	adds	r0, #1
  406428:	bf1b      	ittet	ne
  40642a:	ebcb 0b09 	rsbne	fp, fp, r9
  40642e:	4459      	addne	r1, fp
  406430:	f8ce 9000 	streq.w	r9, [lr]
  406434:	6019      	strne	r1, [r3, #0]
  406436:	f019 0107 	ands.w	r1, r9, #7
  40643a:	f000 8107 	beq.w	40664c <_malloc_r+0x468>
  40643e:	f1c1 0008 	rsb	r0, r1, #8
  406442:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406446:	4481      	add	r9, r0
  406448:	3108      	adds	r1, #8
  40644a:	444a      	add	r2, r9
  40644c:	f3c2 020b 	ubfx	r2, r2, #0, #12
  406450:	ebc2 0a01 	rsb	sl, r2, r1
  406454:	4651      	mov	r1, sl
  406456:	4630      	mov	r0, r6
  406458:	9301      	str	r3, [sp, #4]
  40645a:	f000 fbfd 	bl	406c58 <_sbrk_r>
  40645e:	1c43      	adds	r3, r0, #1
  406460:	9b01      	ldr	r3, [sp, #4]
  406462:	f000 812c 	beq.w	4066be <_malloc_r+0x4da>
  406466:	ebc9 0200 	rsb	r2, r9, r0
  40646a:	4452      	add	r2, sl
  40646c:	f042 0201 	orr.w	r2, r2, #1
  406470:	6819      	ldr	r1, [r3, #0]
  406472:	f8c7 9008 	str.w	r9, [r7, #8]
  406476:	4451      	add	r1, sl
  406478:	42bc      	cmp	r4, r7
  40647a:	f8c9 2004 	str.w	r2, [r9, #4]
  40647e:	6019      	str	r1, [r3, #0]
  406480:	f8df a09c 	ldr.w	sl, [pc, #156]	; 406520 <_malloc_r+0x33c>
  406484:	d016      	beq.n	4064b4 <_malloc_r+0x2d0>
  406486:	f1b8 0f0f 	cmp.w	r8, #15
  40648a:	f240 80ee 	bls.w	40666a <_malloc_r+0x486>
  40648e:	6862      	ldr	r2, [r4, #4]
  406490:	f1a8 030c 	sub.w	r3, r8, #12
  406494:	f023 0307 	bic.w	r3, r3, #7
  406498:	18e0      	adds	r0, r4, r3
  40649a:	f002 0201 	and.w	r2, r2, #1
  40649e:	f04f 0e05 	mov.w	lr, #5
  4064a2:	431a      	orrs	r2, r3
  4064a4:	2b0f      	cmp	r3, #15
  4064a6:	6062      	str	r2, [r4, #4]
  4064a8:	f8c0 e004 	str.w	lr, [r0, #4]
  4064ac:	f8c0 e008 	str.w	lr, [r0, #8]
  4064b0:	f200 8109 	bhi.w	4066c6 <_malloc_r+0x4e2>
  4064b4:	4b1b      	ldr	r3, [pc, #108]	; (406524 <_malloc_r+0x340>)
  4064b6:	68bc      	ldr	r4, [r7, #8]
  4064b8:	681a      	ldr	r2, [r3, #0]
  4064ba:	4291      	cmp	r1, r2
  4064bc:	bf88      	it	hi
  4064be:	6019      	strhi	r1, [r3, #0]
  4064c0:	4b19      	ldr	r3, [pc, #100]	; (406528 <_malloc_r+0x344>)
  4064c2:	681a      	ldr	r2, [r3, #0]
  4064c4:	4291      	cmp	r1, r2
  4064c6:	6862      	ldr	r2, [r4, #4]
  4064c8:	bf88      	it	hi
  4064ca:	6019      	strhi	r1, [r3, #0]
  4064cc:	f022 0203 	bic.w	r2, r2, #3
  4064d0:	4295      	cmp	r5, r2
  4064d2:	eba2 0305 	sub.w	r3, r2, r5
  4064d6:	d801      	bhi.n	4064dc <_malloc_r+0x2f8>
  4064d8:	2b0f      	cmp	r3, #15
  4064da:	dc04      	bgt.n	4064e6 <_malloc_r+0x302>
  4064dc:	4630      	mov	r0, r6
  4064de:	f000 f9c3 	bl	406868 <__malloc_unlock>
  4064e2:	2400      	movs	r4, #0
  4064e4:	e6aa      	b.n	40623c <_malloc_r+0x58>
  4064e6:	1962      	adds	r2, r4, r5
  4064e8:	f043 0301 	orr.w	r3, r3, #1
  4064ec:	f045 0501 	orr.w	r5, r5, #1
  4064f0:	6065      	str	r5, [r4, #4]
  4064f2:	4630      	mov	r0, r6
  4064f4:	60ba      	str	r2, [r7, #8]
  4064f6:	6053      	str	r3, [r2, #4]
  4064f8:	f000 f9b6 	bl	406868 <__malloc_unlock>
  4064fc:	3408      	adds	r4, #8
  4064fe:	4620      	mov	r0, r4
  406500:	b003      	add	sp, #12
  406502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406506:	2814      	cmp	r0, #20
  406508:	d968      	bls.n	4065dc <_malloc_r+0x3f8>
  40650a:	2854      	cmp	r0, #84	; 0x54
  40650c:	f200 8097 	bhi.w	40663e <_malloc_r+0x45a>
  406510:	0b28      	lsrs	r0, r5, #12
  406512:	306e      	adds	r0, #110	; 0x6e
  406514:	0041      	lsls	r1, r0, #1
  406516:	e6a5      	b.n	406264 <_malloc_r+0x80>
  406518:	20000480 	.word	0x20000480
  40651c:	2001a89c 	.word	0x2001a89c
  406520:	2001a8a0 	.word	0x2001a8a0
  406524:	2001a898 	.word	0x2001a898
  406528:	2001a894 	.word	0x2001a894
  40652c:	2000088c 	.word	0x2000088c
  406530:	0a5a      	lsrs	r2, r3, #9
  406532:	2a04      	cmp	r2, #4
  406534:	d955      	bls.n	4065e2 <_malloc_r+0x3fe>
  406536:	2a14      	cmp	r2, #20
  406538:	f200 80a7 	bhi.w	40668a <_malloc_r+0x4a6>
  40653c:	325b      	adds	r2, #91	; 0x5b
  40653e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  406542:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  406546:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 406704 <_malloc_r+0x520>
  40654a:	f8dc 1008 	ldr.w	r1, [ip, #8]
  40654e:	4561      	cmp	r1, ip
  406550:	d07f      	beq.n	406652 <_malloc_r+0x46e>
  406552:	684a      	ldr	r2, [r1, #4]
  406554:	f022 0203 	bic.w	r2, r2, #3
  406558:	4293      	cmp	r3, r2
  40655a:	d202      	bcs.n	406562 <_malloc_r+0x37e>
  40655c:	6889      	ldr	r1, [r1, #8]
  40655e:	458c      	cmp	ip, r1
  406560:	d1f7      	bne.n	406552 <_malloc_r+0x36e>
  406562:	68ca      	ldr	r2, [r1, #12]
  406564:	687b      	ldr	r3, [r7, #4]
  406566:	60e2      	str	r2, [r4, #12]
  406568:	60a1      	str	r1, [r4, #8]
  40656a:	6094      	str	r4, [r2, #8]
  40656c:	60cc      	str	r4, [r1, #12]
  40656e:	e6bb      	b.n	4062e8 <_malloc_r+0x104>
  406570:	1963      	adds	r3, r4, r5
  406572:	f042 0701 	orr.w	r7, r2, #1
  406576:	f045 0501 	orr.w	r5, r5, #1
  40657a:	6065      	str	r5, [r4, #4]
  40657c:	4630      	mov	r0, r6
  40657e:	614b      	str	r3, [r1, #20]
  406580:	610b      	str	r3, [r1, #16]
  406582:	f8c3 e00c 	str.w	lr, [r3, #12]
  406586:	f8c3 e008 	str.w	lr, [r3, #8]
  40658a:	605f      	str	r7, [r3, #4]
  40658c:	509a      	str	r2, [r3, r2]
  40658e:	3408      	adds	r4, #8
  406590:	f000 f96a 	bl	406868 <__malloc_unlock>
  406594:	e652      	b.n	40623c <_malloc_r+0x58>
  406596:	684b      	ldr	r3, [r1, #4]
  406598:	e6a6      	b.n	4062e8 <_malloc_r+0x104>
  40659a:	f109 0901 	add.w	r9, r9, #1
  40659e:	f019 0f03 	tst.w	r9, #3
  4065a2:	f10c 0c08 	add.w	ip, ip, #8
  4065a6:	f47f aeb1 	bne.w	40630c <_malloc_r+0x128>
  4065aa:	e02c      	b.n	406606 <_malloc_r+0x422>
  4065ac:	f104 0308 	add.w	r3, r4, #8
  4065b0:	6964      	ldr	r4, [r4, #20]
  4065b2:	42a3      	cmp	r3, r4
  4065b4:	bf08      	it	eq
  4065b6:	3002      	addeq	r0, #2
  4065b8:	f43f ae69 	beq.w	40628e <_malloc_r+0xaa>
  4065bc:	e62e      	b.n	40621c <_malloc_r+0x38>
  4065be:	441a      	add	r2, r3
  4065c0:	461c      	mov	r4, r3
  4065c2:	6851      	ldr	r1, [r2, #4]
  4065c4:	68db      	ldr	r3, [r3, #12]
  4065c6:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4065ca:	f041 0101 	orr.w	r1, r1, #1
  4065ce:	6051      	str	r1, [r2, #4]
  4065d0:	4630      	mov	r0, r6
  4065d2:	60eb      	str	r3, [r5, #12]
  4065d4:	609d      	str	r5, [r3, #8]
  4065d6:	f000 f947 	bl	406868 <__malloc_unlock>
  4065da:	e62f      	b.n	40623c <_malloc_r+0x58>
  4065dc:	305b      	adds	r0, #91	; 0x5b
  4065de:	0041      	lsls	r1, r0, #1
  4065e0:	e640      	b.n	406264 <_malloc_r+0x80>
  4065e2:	099a      	lsrs	r2, r3, #6
  4065e4:	3238      	adds	r2, #56	; 0x38
  4065e6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4065ea:	e7aa      	b.n	406542 <_malloc_r+0x35e>
  4065ec:	42bc      	cmp	r4, r7
  4065ee:	4b45      	ldr	r3, [pc, #276]	; (406704 <_malloc_r+0x520>)
  4065f0:	f43f af0e 	beq.w	406410 <_malloc_r+0x22c>
  4065f4:	689c      	ldr	r4, [r3, #8]
  4065f6:	6862      	ldr	r2, [r4, #4]
  4065f8:	f022 0203 	bic.w	r2, r2, #3
  4065fc:	e768      	b.n	4064d0 <_malloc_r+0x2ec>
  4065fe:	f8d8 8000 	ldr.w	r8, [r8]
  406602:	4598      	cmp	r8, r3
  406604:	d17c      	bne.n	406700 <_malloc_r+0x51c>
  406606:	f010 0f03 	tst.w	r0, #3
  40660a:	f1a8 0308 	sub.w	r3, r8, #8
  40660e:	f100 30ff 	add.w	r0, r0, #4294967295
  406612:	d1f4      	bne.n	4065fe <_malloc_r+0x41a>
  406614:	687b      	ldr	r3, [r7, #4]
  406616:	ea23 0304 	bic.w	r3, r3, r4
  40661a:	607b      	str	r3, [r7, #4]
  40661c:	0064      	lsls	r4, r4, #1
  40661e:	429c      	cmp	r4, r3
  406620:	f63f aeca 	bhi.w	4063b8 <_malloc_r+0x1d4>
  406624:	2c00      	cmp	r4, #0
  406626:	f43f aec7 	beq.w	4063b8 <_malloc_r+0x1d4>
  40662a:	4223      	tst	r3, r4
  40662c:	4648      	mov	r0, r9
  40662e:	f47f ae69 	bne.w	406304 <_malloc_r+0x120>
  406632:	0064      	lsls	r4, r4, #1
  406634:	4223      	tst	r3, r4
  406636:	f100 0004 	add.w	r0, r0, #4
  40663a:	d0fa      	beq.n	406632 <_malloc_r+0x44e>
  40663c:	e662      	b.n	406304 <_malloc_r+0x120>
  40663e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  406642:	d818      	bhi.n	406676 <_malloc_r+0x492>
  406644:	0be8      	lsrs	r0, r5, #15
  406646:	3077      	adds	r0, #119	; 0x77
  406648:	0041      	lsls	r1, r0, #1
  40664a:	e60b      	b.n	406264 <_malloc_r+0x80>
  40664c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406650:	e6fb      	b.n	40644a <_malloc_r+0x266>
  406652:	f8d8 3004 	ldr.w	r3, [r8, #4]
  406656:	1092      	asrs	r2, r2, #2
  406658:	f04f 0c01 	mov.w	ip, #1
  40665c:	fa0c f202 	lsl.w	r2, ip, r2
  406660:	4313      	orrs	r3, r2
  406662:	f8c8 3004 	str.w	r3, [r8, #4]
  406666:	460a      	mov	r2, r1
  406668:	e77d      	b.n	406566 <_malloc_r+0x382>
  40666a:	2301      	movs	r3, #1
  40666c:	f8c9 3004 	str.w	r3, [r9, #4]
  406670:	464c      	mov	r4, r9
  406672:	2200      	movs	r2, #0
  406674:	e72c      	b.n	4064d0 <_malloc_r+0x2ec>
  406676:	f240 5354 	movw	r3, #1364	; 0x554
  40667a:	4298      	cmp	r0, r3
  40667c:	d81c      	bhi.n	4066b8 <_malloc_r+0x4d4>
  40667e:	0ca8      	lsrs	r0, r5, #18
  406680:	307c      	adds	r0, #124	; 0x7c
  406682:	0041      	lsls	r1, r0, #1
  406684:	e5ee      	b.n	406264 <_malloc_r+0x80>
  406686:	3210      	adds	r2, #16
  406688:	e6b4      	b.n	4063f4 <_malloc_r+0x210>
  40668a:	2a54      	cmp	r2, #84	; 0x54
  40668c:	d823      	bhi.n	4066d6 <_malloc_r+0x4f2>
  40668e:	0b1a      	lsrs	r2, r3, #12
  406690:	326e      	adds	r2, #110	; 0x6e
  406692:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  406696:	e754      	b.n	406542 <_malloc_r+0x35e>
  406698:	68bc      	ldr	r4, [r7, #8]
  40669a:	6862      	ldr	r2, [r4, #4]
  40669c:	f022 0203 	bic.w	r2, r2, #3
  4066a0:	e716      	b.n	4064d0 <_malloc_r+0x2ec>
  4066a2:	f3cb 000b 	ubfx	r0, fp, #0, #12
  4066a6:	2800      	cmp	r0, #0
  4066a8:	f47f aeb9 	bne.w	40641e <_malloc_r+0x23a>
  4066ac:	4442      	add	r2, r8
  4066ae:	68bb      	ldr	r3, [r7, #8]
  4066b0:	f042 0201 	orr.w	r2, r2, #1
  4066b4:	605a      	str	r2, [r3, #4]
  4066b6:	e6fd      	b.n	4064b4 <_malloc_r+0x2d0>
  4066b8:	21fc      	movs	r1, #252	; 0xfc
  4066ba:	207e      	movs	r0, #126	; 0x7e
  4066bc:	e5d2      	b.n	406264 <_malloc_r+0x80>
  4066be:	2201      	movs	r2, #1
  4066c0:	f04f 0a00 	mov.w	sl, #0
  4066c4:	e6d4      	b.n	406470 <_malloc_r+0x28c>
  4066c6:	f104 0108 	add.w	r1, r4, #8
  4066ca:	4630      	mov	r0, r6
  4066cc:	f7ff fa7a 	bl	405bc4 <_free_r>
  4066d0:	f8da 1000 	ldr.w	r1, [sl]
  4066d4:	e6ee      	b.n	4064b4 <_malloc_r+0x2d0>
  4066d6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4066da:	d804      	bhi.n	4066e6 <_malloc_r+0x502>
  4066dc:	0bda      	lsrs	r2, r3, #15
  4066de:	3277      	adds	r2, #119	; 0x77
  4066e0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4066e4:	e72d      	b.n	406542 <_malloc_r+0x35e>
  4066e6:	f240 5154 	movw	r1, #1364	; 0x554
  4066ea:	428a      	cmp	r2, r1
  4066ec:	d804      	bhi.n	4066f8 <_malloc_r+0x514>
  4066ee:	0c9a      	lsrs	r2, r3, #18
  4066f0:	327c      	adds	r2, #124	; 0x7c
  4066f2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4066f6:	e724      	b.n	406542 <_malloc_r+0x35e>
  4066f8:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  4066fc:	227e      	movs	r2, #126	; 0x7e
  4066fe:	e720      	b.n	406542 <_malloc_r+0x35e>
  406700:	687b      	ldr	r3, [r7, #4]
  406702:	e78b      	b.n	40661c <_malloc_r+0x438>
  406704:	20000480 	.word	0x20000480

00406708 <memchr>:
  406708:	0783      	lsls	r3, r0, #30
  40670a:	b470      	push	{r4, r5, r6}
  40670c:	b2c9      	uxtb	r1, r1
  40670e:	d040      	beq.n	406792 <memchr+0x8a>
  406710:	1e54      	subs	r4, r2, #1
  406712:	2a00      	cmp	r2, #0
  406714:	d03f      	beq.n	406796 <memchr+0x8e>
  406716:	7803      	ldrb	r3, [r0, #0]
  406718:	428b      	cmp	r3, r1
  40671a:	bf18      	it	ne
  40671c:	1c43      	addne	r3, r0, #1
  40671e:	d106      	bne.n	40672e <memchr+0x26>
  406720:	e01d      	b.n	40675e <memchr+0x56>
  406722:	b1f4      	cbz	r4, 406762 <memchr+0x5a>
  406724:	7802      	ldrb	r2, [r0, #0]
  406726:	428a      	cmp	r2, r1
  406728:	f104 34ff 	add.w	r4, r4, #4294967295
  40672c:	d017      	beq.n	40675e <memchr+0x56>
  40672e:	f013 0f03 	tst.w	r3, #3
  406732:	4618      	mov	r0, r3
  406734:	f103 0301 	add.w	r3, r3, #1
  406738:	d1f3      	bne.n	406722 <memchr+0x1a>
  40673a:	2c03      	cmp	r4, #3
  40673c:	d814      	bhi.n	406768 <memchr+0x60>
  40673e:	b184      	cbz	r4, 406762 <memchr+0x5a>
  406740:	7803      	ldrb	r3, [r0, #0]
  406742:	428b      	cmp	r3, r1
  406744:	d00b      	beq.n	40675e <memchr+0x56>
  406746:	1905      	adds	r5, r0, r4
  406748:	1c43      	adds	r3, r0, #1
  40674a:	e002      	b.n	406752 <memchr+0x4a>
  40674c:	7802      	ldrb	r2, [r0, #0]
  40674e:	428a      	cmp	r2, r1
  406750:	d005      	beq.n	40675e <memchr+0x56>
  406752:	42ab      	cmp	r3, r5
  406754:	4618      	mov	r0, r3
  406756:	f103 0301 	add.w	r3, r3, #1
  40675a:	d1f7      	bne.n	40674c <memchr+0x44>
  40675c:	2000      	movs	r0, #0
  40675e:	bc70      	pop	{r4, r5, r6}
  406760:	4770      	bx	lr
  406762:	4620      	mov	r0, r4
  406764:	bc70      	pop	{r4, r5, r6}
  406766:	4770      	bx	lr
  406768:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40676c:	4602      	mov	r2, r0
  40676e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  406772:	4610      	mov	r0, r2
  406774:	3204      	adds	r2, #4
  406776:	6803      	ldr	r3, [r0, #0]
  406778:	4073      	eors	r3, r6
  40677a:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40677e:	ea25 0303 	bic.w	r3, r5, r3
  406782:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  406786:	d1da      	bne.n	40673e <memchr+0x36>
  406788:	3c04      	subs	r4, #4
  40678a:	2c03      	cmp	r4, #3
  40678c:	4610      	mov	r0, r2
  40678e:	d8f0      	bhi.n	406772 <memchr+0x6a>
  406790:	e7d5      	b.n	40673e <memchr+0x36>
  406792:	4614      	mov	r4, r2
  406794:	e7d1      	b.n	40673a <memchr+0x32>
  406796:	4610      	mov	r0, r2
  406798:	e7e1      	b.n	40675e <memchr+0x56>
  40679a:	bf00      	nop

0040679c <memmove>:
  40679c:	4288      	cmp	r0, r1
  40679e:	b5f0      	push	{r4, r5, r6, r7, lr}
  4067a0:	d90d      	bls.n	4067be <memmove+0x22>
  4067a2:	188b      	adds	r3, r1, r2
  4067a4:	4298      	cmp	r0, r3
  4067a6:	d20a      	bcs.n	4067be <memmove+0x22>
  4067a8:	1881      	adds	r1, r0, r2
  4067aa:	2a00      	cmp	r2, #0
  4067ac:	d054      	beq.n	406858 <memmove+0xbc>
  4067ae:	1a9a      	subs	r2, r3, r2
  4067b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4067b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4067b8:	4293      	cmp	r3, r2
  4067ba:	d1f9      	bne.n	4067b0 <memmove+0x14>
  4067bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4067be:	2a0f      	cmp	r2, #15
  4067c0:	d948      	bls.n	406854 <memmove+0xb8>
  4067c2:	ea40 0301 	orr.w	r3, r0, r1
  4067c6:	079b      	lsls	r3, r3, #30
  4067c8:	d147      	bne.n	40685a <memmove+0xbe>
  4067ca:	f100 0410 	add.w	r4, r0, #16
  4067ce:	f101 0310 	add.w	r3, r1, #16
  4067d2:	4615      	mov	r5, r2
  4067d4:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4067d8:	f844 6c10 	str.w	r6, [r4, #-16]
  4067dc:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4067e0:	f844 6c0c 	str.w	r6, [r4, #-12]
  4067e4:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4067e8:	f844 6c08 	str.w	r6, [r4, #-8]
  4067ec:	3d10      	subs	r5, #16
  4067ee:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4067f2:	f844 6c04 	str.w	r6, [r4, #-4]
  4067f6:	2d0f      	cmp	r5, #15
  4067f8:	f103 0310 	add.w	r3, r3, #16
  4067fc:	f104 0410 	add.w	r4, r4, #16
  406800:	d8e8      	bhi.n	4067d4 <memmove+0x38>
  406802:	f1a2 0310 	sub.w	r3, r2, #16
  406806:	f023 030f 	bic.w	r3, r3, #15
  40680a:	f002 0e0f 	and.w	lr, r2, #15
  40680e:	3310      	adds	r3, #16
  406810:	f1be 0f03 	cmp.w	lr, #3
  406814:	4419      	add	r1, r3
  406816:	4403      	add	r3, r0
  406818:	d921      	bls.n	40685e <memmove+0xc2>
  40681a:	1f1e      	subs	r6, r3, #4
  40681c:	460d      	mov	r5, r1
  40681e:	4674      	mov	r4, lr
  406820:	3c04      	subs	r4, #4
  406822:	f855 7b04 	ldr.w	r7, [r5], #4
  406826:	f846 7f04 	str.w	r7, [r6, #4]!
  40682a:	2c03      	cmp	r4, #3
  40682c:	d8f8      	bhi.n	406820 <memmove+0x84>
  40682e:	f1ae 0404 	sub.w	r4, lr, #4
  406832:	f024 0403 	bic.w	r4, r4, #3
  406836:	3404      	adds	r4, #4
  406838:	4423      	add	r3, r4
  40683a:	4421      	add	r1, r4
  40683c:	f002 0203 	and.w	r2, r2, #3
  406840:	b152      	cbz	r2, 406858 <memmove+0xbc>
  406842:	3b01      	subs	r3, #1
  406844:	440a      	add	r2, r1
  406846:	f811 4b01 	ldrb.w	r4, [r1], #1
  40684a:	f803 4f01 	strb.w	r4, [r3, #1]!
  40684e:	4291      	cmp	r1, r2
  406850:	d1f9      	bne.n	406846 <memmove+0xaa>
  406852:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406854:	4603      	mov	r3, r0
  406856:	e7f3      	b.n	406840 <memmove+0xa4>
  406858:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40685a:	4603      	mov	r3, r0
  40685c:	e7f1      	b.n	406842 <memmove+0xa6>
  40685e:	4672      	mov	r2, lr
  406860:	e7ee      	b.n	406840 <memmove+0xa4>
  406862:	bf00      	nop

00406864 <__malloc_lock>:
  406864:	4770      	bx	lr
  406866:	bf00      	nop

00406868 <__malloc_unlock>:
  406868:	4770      	bx	lr
  40686a:	bf00      	nop

0040686c <_realloc_r>:
  40686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406870:	4617      	mov	r7, r2
  406872:	b083      	sub	sp, #12
  406874:	460e      	mov	r6, r1
  406876:	2900      	cmp	r1, #0
  406878:	f000 80e7 	beq.w	406a4a <_realloc_r+0x1de>
  40687c:	4681      	mov	r9, r0
  40687e:	f107 050b 	add.w	r5, r7, #11
  406882:	f7ff ffef 	bl	406864 <__malloc_lock>
  406886:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40688a:	2d16      	cmp	r5, #22
  40688c:	f023 0403 	bic.w	r4, r3, #3
  406890:	f1a6 0808 	sub.w	r8, r6, #8
  406894:	d84c      	bhi.n	406930 <_realloc_r+0xc4>
  406896:	2210      	movs	r2, #16
  406898:	4615      	mov	r5, r2
  40689a:	42af      	cmp	r7, r5
  40689c:	d84d      	bhi.n	40693a <_realloc_r+0xce>
  40689e:	4294      	cmp	r4, r2
  4068a0:	f280 8084 	bge.w	4069ac <_realloc_r+0x140>
  4068a4:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 406c54 <_realloc_r+0x3e8>
  4068a8:	f8db 0008 	ldr.w	r0, [fp, #8]
  4068ac:	eb08 0104 	add.w	r1, r8, r4
  4068b0:	4288      	cmp	r0, r1
  4068b2:	f000 80d6 	beq.w	406a62 <_realloc_r+0x1f6>
  4068b6:	6848      	ldr	r0, [r1, #4]
  4068b8:	f020 0e01 	bic.w	lr, r0, #1
  4068bc:	448e      	add	lr, r1
  4068be:	f8de e004 	ldr.w	lr, [lr, #4]
  4068c2:	f01e 0f01 	tst.w	lr, #1
  4068c6:	d13f      	bne.n	406948 <_realloc_r+0xdc>
  4068c8:	f020 0003 	bic.w	r0, r0, #3
  4068cc:	4420      	add	r0, r4
  4068ce:	4290      	cmp	r0, r2
  4068d0:	f280 80c1 	bge.w	406a56 <_realloc_r+0x1ea>
  4068d4:	07db      	lsls	r3, r3, #31
  4068d6:	f100 808f 	bmi.w	4069f8 <_realloc_r+0x18c>
  4068da:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4068de:	ebc3 0a08 	rsb	sl, r3, r8
  4068e2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4068e6:	f023 0303 	bic.w	r3, r3, #3
  4068ea:	eb00 0e03 	add.w	lr, r0, r3
  4068ee:	4596      	cmp	lr, r2
  4068f0:	db34      	blt.n	40695c <_realloc_r+0xf0>
  4068f2:	68cb      	ldr	r3, [r1, #12]
  4068f4:	688a      	ldr	r2, [r1, #8]
  4068f6:	4657      	mov	r7, sl
  4068f8:	60d3      	str	r3, [r2, #12]
  4068fa:	609a      	str	r2, [r3, #8]
  4068fc:	f857 1f08 	ldr.w	r1, [r7, #8]!
  406900:	f8da 300c 	ldr.w	r3, [sl, #12]
  406904:	60cb      	str	r3, [r1, #12]
  406906:	1f22      	subs	r2, r4, #4
  406908:	2a24      	cmp	r2, #36	; 0x24
  40690a:	6099      	str	r1, [r3, #8]
  40690c:	f200 8136 	bhi.w	406b7c <_realloc_r+0x310>
  406910:	2a13      	cmp	r2, #19
  406912:	f240 80fd 	bls.w	406b10 <_realloc_r+0x2a4>
  406916:	6833      	ldr	r3, [r6, #0]
  406918:	f8ca 3008 	str.w	r3, [sl, #8]
  40691c:	6873      	ldr	r3, [r6, #4]
  40691e:	f8ca 300c 	str.w	r3, [sl, #12]
  406922:	2a1b      	cmp	r2, #27
  406924:	f200 8140 	bhi.w	406ba8 <_realloc_r+0x33c>
  406928:	3608      	adds	r6, #8
  40692a:	f10a 0310 	add.w	r3, sl, #16
  40692e:	e0f0      	b.n	406b12 <_realloc_r+0x2a6>
  406930:	f025 0507 	bic.w	r5, r5, #7
  406934:	2d00      	cmp	r5, #0
  406936:	462a      	mov	r2, r5
  406938:	daaf      	bge.n	40689a <_realloc_r+0x2e>
  40693a:	230c      	movs	r3, #12
  40693c:	2000      	movs	r0, #0
  40693e:	f8c9 3000 	str.w	r3, [r9]
  406942:	b003      	add	sp, #12
  406944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406948:	07d9      	lsls	r1, r3, #31
  40694a:	d455      	bmi.n	4069f8 <_realloc_r+0x18c>
  40694c:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406950:	ebc3 0a08 	rsb	sl, r3, r8
  406954:	f8da 3004 	ldr.w	r3, [sl, #4]
  406958:	f023 0303 	bic.w	r3, r3, #3
  40695c:	4423      	add	r3, r4
  40695e:	4293      	cmp	r3, r2
  406960:	db4a      	blt.n	4069f8 <_realloc_r+0x18c>
  406962:	4657      	mov	r7, sl
  406964:	f8da 100c 	ldr.w	r1, [sl, #12]
  406968:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40696c:	1f22      	subs	r2, r4, #4
  40696e:	2a24      	cmp	r2, #36	; 0x24
  406970:	60c1      	str	r1, [r0, #12]
  406972:	6088      	str	r0, [r1, #8]
  406974:	f200 810e 	bhi.w	406b94 <_realloc_r+0x328>
  406978:	2a13      	cmp	r2, #19
  40697a:	f240 8109 	bls.w	406b90 <_realloc_r+0x324>
  40697e:	6831      	ldr	r1, [r6, #0]
  406980:	f8ca 1008 	str.w	r1, [sl, #8]
  406984:	6871      	ldr	r1, [r6, #4]
  406986:	f8ca 100c 	str.w	r1, [sl, #12]
  40698a:	2a1b      	cmp	r2, #27
  40698c:	f200 8121 	bhi.w	406bd2 <_realloc_r+0x366>
  406990:	3608      	adds	r6, #8
  406992:	f10a 0210 	add.w	r2, sl, #16
  406996:	6831      	ldr	r1, [r6, #0]
  406998:	6011      	str	r1, [r2, #0]
  40699a:	6871      	ldr	r1, [r6, #4]
  40699c:	6051      	str	r1, [r2, #4]
  40699e:	68b1      	ldr	r1, [r6, #8]
  4069a0:	6091      	str	r1, [r2, #8]
  4069a2:	461c      	mov	r4, r3
  4069a4:	f8da 3004 	ldr.w	r3, [sl, #4]
  4069a8:	463e      	mov	r6, r7
  4069aa:	46d0      	mov	r8, sl
  4069ac:	1b62      	subs	r2, r4, r5
  4069ae:	2a0f      	cmp	r2, #15
  4069b0:	f003 0301 	and.w	r3, r3, #1
  4069b4:	d80e      	bhi.n	4069d4 <_realloc_r+0x168>
  4069b6:	4323      	orrs	r3, r4
  4069b8:	4444      	add	r4, r8
  4069ba:	f8c8 3004 	str.w	r3, [r8, #4]
  4069be:	6863      	ldr	r3, [r4, #4]
  4069c0:	f043 0301 	orr.w	r3, r3, #1
  4069c4:	6063      	str	r3, [r4, #4]
  4069c6:	4648      	mov	r0, r9
  4069c8:	f7ff ff4e 	bl	406868 <__malloc_unlock>
  4069cc:	4630      	mov	r0, r6
  4069ce:	b003      	add	sp, #12
  4069d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4069d4:	eb08 0105 	add.w	r1, r8, r5
  4069d8:	431d      	orrs	r5, r3
  4069da:	f042 0301 	orr.w	r3, r2, #1
  4069de:	440a      	add	r2, r1
  4069e0:	f8c8 5004 	str.w	r5, [r8, #4]
  4069e4:	604b      	str	r3, [r1, #4]
  4069e6:	6853      	ldr	r3, [r2, #4]
  4069e8:	f043 0301 	orr.w	r3, r3, #1
  4069ec:	3108      	adds	r1, #8
  4069ee:	6053      	str	r3, [r2, #4]
  4069f0:	4648      	mov	r0, r9
  4069f2:	f7ff f8e7 	bl	405bc4 <_free_r>
  4069f6:	e7e6      	b.n	4069c6 <_realloc_r+0x15a>
  4069f8:	4639      	mov	r1, r7
  4069fa:	4648      	mov	r0, r9
  4069fc:	f7ff fbf2 	bl	4061e4 <_malloc_r>
  406a00:	4607      	mov	r7, r0
  406a02:	b1d8      	cbz	r0, 406a3c <_realloc_r+0x1d0>
  406a04:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406a08:	f023 0201 	bic.w	r2, r3, #1
  406a0c:	4442      	add	r2, r8
  406a0e:	f1a0 0108 	sub.w	r1, r0, #8
  406a12:	4291      	cmp	r1, r2
  406a14:	f000 80ac 	beq.w	406b70 <_realloc_r+0x304>
  406a18:	1f22      	subs	r2, r4, #4
  406a1a:	2a24      	cmp	r2, #36	; 0x24
  406a1c:	f200 8099 	bhi.w	406b52 <_realloc_r+0x2e6>
  406a20:	2a13      	cmp	r2, #19
  406a22:	d86a      	bhi.n	406afa <_realloc_r+0x28e>
  406a24:	4603      	mov	r3, r0
  406a26:	4632      	mov	r2, r6
  406a28:	6811      	ldr	r1, [r2, #0]
  406a2a:	6019      	str	r1, [r3, #0]
  406a2c:	6851      	ldr	r1, [r2, #4]
  406a2e:	6059      	str	r1, [r3, #4]
  406a30:	6892      	ldr	r2, [r2, #8]
  406a32:	609a      	str	r2, [r3, #8]
  406a34:	4631      	mov	r1, r6
  406a36:	4648      	mov	r0, r9
  406a38:	f7ff f8c4 	bl	405bc4 <_free_r>
  406a3c:	4648      	mov	r0, r9
  406a3e:	f7ff ff13 	bl	406868 <__malloc_unlock>
  406a42:	4638      	mov	r0, r7
  406a44:	b003      	add	sp, #12
  406a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a4a:	4611      	mov	r1, r2
  406a4c:	b003      	add	sp, #12
  406a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a52:	f7ff bbc7 	b.w	4061e4 <_malloc_r>
  406a56:	68ca      	ldr	r2, [r1, #12]
  406a58:	6889      	ldr	r1, [r1, #8]
  406a5a:	4604      	mov	r4, r0
  406a5c:	60ca      	str	r2, [r1, #12]
  406a5e:	6091      	str	r1, [r2, #8]
  406a60:	e7a4      	b.n	4069ac <_realloc_r+0x140>
  406a62:	6841      	ldr	r1, [r0, #4]
  406a64:	f021 0103 	bic.w	r1, r1, #3
  406a68:	4421      	add	r1, r4
  406a6a:	f105 0010 	add.w	r0, r5, #16
  406a6e:	4281      	cmp	r1, r0
  406a70:	da5b      	bge.n	406b2a <_realloc_r+0x2be>
  406a72:	07db      	lsls	r3, r3, #31
  406a74:	d4c0      	bmi.n	4069f8 <_realloc_r+0x18c>
  406a76:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406a7a:	ebc3 0a08 	rsb	sl, r3, r8
  406a7e:	f8da 3004 	ldr.w	r3, [sl, #4]
  406a82:	f023 0303 	bic.w	r3, r3, #3
  406a86:	eb01 0c03 	add.w	ip, r1, r3
  406a8a:	4560      	cmp	r0, ip
  406a8c:	f73f af66 	bgt.w	40695c <_realloc_r+0xf0>
  406a90:	4657      	mov	r7, sl
  406a92:	f8da 300c 	ldr.w	r3, [sl, #12]
  406a96:	f857 1f08 	ldr.w	r1, [r7, #8]!
  406a9a:	1f22      	subs	r2, r4, #4
  406a9c:	2a24      	cmp	r2, #36	; 0x24
  406a9e:	60cb      	str	r3, [r1, #12]
  406aa0:	6099      	str	r1, [r3, #8]
  406aa2:	f200 80b8 	bhi.w	406c16 <_realloc_r+0x3aa>
  406aa6:	2a13      	cmp	r2, #19
  406aa8:	f240 80a9 	bls.w	406bfe <_realloc_r+0x392>
  406aac:	6833      	ldr	r3, [r6, #0]
  406aae:	f8ca 3008 	str.w	r3, [sl, #8]
  406ab2:	6873      	ldr	r3, [r6, #4]
  406ab4:	f8ca 300c 	str.w	r3, [sl, #12]
  406ab8:	2a1b      	cmp	r2, #27
  406aba:	f200 80b5 	bhi.w	406c28 <_realloc_r+0x3bc>
  406abe:	3608      	adds	r6, #8
  406ac0:	f10a 0310 	add.w	r3, sl, #16
  406ac4:	6832      	ldr	r2, [r6, #0]
  406ac6:	601a      	str	r2, [r3, #0]
  406ac8:	6872      	ldr	r2, [r6, #4]
  406aca:	605a      	str	r2, [r3, #4]
  406acc:	68b2      	ldr	r2, [r6, #8]
  406ace:	609a      	str	r2, [r3, #8]
  406ad0:	eb0a 0205 	add.w	r2, sl, r5
  406ad4:	ebc5 030c 	rsb	r3, r5, ip
  406ad8:	f043 0301 	orr.w	r3, r3, #1
  406adc:	f8cb 2008 	str.w	r2, [fp, #8]
  406ae0:	6053      	str	r3, [r2, #4]
  406ae2:	f8da 3004 	ldr.w	r3, [sl, #4]
  406ae6:	f003 0301 	and.w	r3, r3, #1
  406aea:	431d      	orrs	r5, r3
  406aec:	4648      	mov	r0, r9
  406aee:	f8ca 5004 	str.w	r5, [sl, #4]
  406af2:	f7ff feb9 	bl	406868 <__malloc_unlock>
  406af6:	4638      	mov	r0, r7
  406af8:	e769      	b.n	4069ce <_realloc_r+0x162>
  406afa:	6833      	ldr	r3, [r6, #0]
  406afc:	6003      	str	r3, [r0, #0]
  406afe:	6873      	ldr	r3, [r6, #4]
  406b00:	6043      	str	r3, [r0, #4]
  406b02:	2a1b      	cmp	r2, #27
  406b04:	d829      	bhi.n	406b5a <_realloc_r+0x2ee>
  406b06:	f100 0308 	add.w	r3, r0, #8
  406b0a:	f106 0208 	add.w	r2, r6, #8
  406b0e:	e78b      	b.n	406a28 <_realloc_r+0x1bc>
  406b10:	463b      	mov	r3, r7
  406b12:	6832      	ldr	r2, [r6, #0]
  406b14:	601a      	str	r2, [r3, #0]
  406b16:	6872      	ldr	r2, [r6, #4]
  406b18:	605a      	str	r2, [r3, #4]
  406b1a:	68b2      	ldr	r2, [r6, #8]
  406b1c:	609a      	str	r2, [r3, #8]
  406b1e:	463e      	mov	r6, r7
  406b20:	4674      	mov	r4, lr
  406b22:	f8da 3004 	ldr.w	r3, [sl, #4]
  406b26:	46d0      	mov	r8, sl
  406b28:	e740      	b.n	4069ac <_realloc_r+0x140>
  406b2a:	eb08 0205 	add.w	r2, r8, r5
  406b2e:	1b4b      	subs	r3, r1, r5
  406b30:	f043 0301 	orr.w	r3, r3, #1
  406b34:	f8cb 2008 	str.w	r2, [fp, #8]
  406b38:	6053      	str	r3, [r2, #4]
  406b3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406b3e:	f003 0301 	and.w	r3, r3, #1
  406b42:	431d      	orrs	r5, r3
  406b44:	4648      	mov	r0, r9
  406b46:	f846 5c04 	str.w	r5, [r6, #-4]
  406b4a:	f7ff fe8d 	bl	406868 <__malloc_unlock>
  406b4e:	4630      	mov	r0, r6
  406b50:	e73d      	b.n	4069ce <_realloc_r+0x162>
  406b52:	4631      	mov	r1, r6
  406b54:	f7ff fe22 	bl	40679c <memmove>
  406b58:	e76c      	b.n	406a34 <_realloc_r+0x1c8>
  406b5a:	68b3      	ldr	r3, [r6, #8]
  406b5c:	6083      	str	r3, [r0, #8]
  406b5e:	68f3      	ldr	r3, [r6, #12]
  406b60:	60c3      	str	r3, [r0, #12]
  406b62:	2a24      	cmp	r2, #36	; 0x24
  406b64:	d02c      	beq.n	406bc0 <_realloc_r+0x354>
  406b66:	f100 0310 	add.w	r3, r0, #16
  406b6a:	f106 0210 	add.w	r2, r6, #16
  406b6e:	e75b      	b.n	406a28 <_realloc_r+0x1bc>
  406b70:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406b74:	f022 0203 	bic.w	r2, r2, #3
  406b78:	4414      	add	r4, r2
  406b7a:	e717      	b.n	4069ac <_realloc_r+0x140>
  406b7c:	4631      	mov	r1, r6
  406b7e:	4638      	mov	r0, r7
  406b80:	4674      	mov	r4, lr
  406b82:	463e      	mov	r6, r7
  406b84:	f7ff fe0a 	bl	40679c <memmove>
  406b88:	46d0      	mov	r8, sl
  406b8a:	f8da 3004 	ldr.w	r3, [sl, #4]
  406b8e:	e70d      	b.n	4069ac <_realloc_r+0x140>
  406b90:	463a      	mov	r2, r7
  406b92:	e700      	b.n	406996 <_realloc_r+0x12a>
  406b94:	4631      	mov	r1, r6
  406b96:	4638      	mov	r0, r7
  406b98:	461c      	mov	r4, r3
  406b9a:	463e      	mov	r6, r7
  406b9c:	f7ff fdfe 	bl	40679c <memmove>
  406ba0:	46d0      	mov	r8, sl
  406ba2:	f8da 3004 	ldr.w	r3, [sl, #4]
  406ba6:	e701      	b.n	4069ac <_realloc_r+0x140>
  406ba8:	68b3      	ldr	r3, [r6, #8]
  406baa:	f8ca 3010 	str.w	r3, [sl, #16]
  406bae:	68f3      	ldr	r3, [r6, #12]
  406bb0:	f8ca 3014 	str.w	r3, [sl, #20]
  406bb4:	2a24      	cmp	r2, #36	; 0x24
  406bb6:	d018      	beq.n	406bea <_realloc_r+0x37e>
  406bb8:	3610      	adds	r6, #16
  406bba:	f10a 0318 	add.w	r3, sl, #24
  406bbe:	e7a8      	b.n	406b12 <_realloc_r+0x2a6>
  406bc0:	6933      	ldr	r3, [r6, #16]
  406bc2:	6103      	str	r3, [r0, #16]
  406bc4:	6973      	ldr	r3, [r6, #20]
  406bc6:	6143      	str	r3, [r0, #20]
  406bc8:	f106 0218 	add.w	r2, r6, #24
  406bcc:	f100 0318 	add.w	r3, r0, #24
  406bd0:	e72a      	b.n	406a28 <_realloc_r+0x1bc>
  406bd2:	68b1      	ldr	r1, [r6, #8]
  406bd4:	f8ca 1010 	str.w	r1, [sl, #16]
  406bd8:	68f1      	ldr	r1, [r6, #12]
  406bda:	f8ca 1014 	str.w	r1, [sl, #20]
  406bde:	2a24      	cmp	r2, #36	; 0x24
  406be0:	d00f      	beq.n	406c02 <_realloc_r+0x396>
  406be2:	3610      	adds	r6, #16
  406be4:	f10a 0218 	add.w	r2, sl, #24
  406be8:	e6d5      	b.n	406996 <_realloc_r+0x12a>
  406bea:	6933      	ldr	r3, [r6, #16]
  406bec:	f8ca 3018 	str.w	r3, [sl, #24]
  406bf0:	6973      	ldr	r3, [r6, #20]
  406bf2:	f8ca 301c 	str.w	r3, [sl, #28]
  406bf6:	3618      	adds	r6, #24
  406bf8:	f10a 0320 	add.w	r3, sl, #32
  406bfc:	e789      	b.n	406b12 <_realloc_r+0x2a6>
  406bfe:	463b      	mov	r3, r7
  406c00:	e760      	b.n	406ac4 <_realloc_r+0x258>
  406c02:	6932      	ldr	r2, [r6, #16]
  406c04:	f8ca 2018 	str.w	r2, [sl, #24]
  406c08:	6972      	ldr	r2, [r6, #20]
  406c0a:	f8ca 201c 	str.w	r2, [sl, #28]
  406c0e:	3618      	adds	r6, #24
  406c10:	f10a 0220 	add.w	r2, sl, #32
  406c14:	e6bf      	b.n	406996 <_realloc_r+0x12a>
  406c16:	4631      	mov	r1, r6
  406c18:	4638      	mov	r0, r7
  406c1a:	f8cd c004 	str.w	ip, [sp, #4]
  406c1e:	f7ff fdbd 	bl	40679c <memmove>
  406c22:	f8dd c004 	ldr.w	ip, [sp, #4]
  406c26:	e753      	b.n	406ad0 <_realloc_r+0x264>
  406c28:	68b3      	ldr	r3, [r6, #8]
  406c2a:	f8ca 3010 	str.w	r3, [sl, #16]
  406c2e:	68f3      	ldr	r3, [r6, #12]
  406c30:	f8ca 3014 	str.w	r3, [sl, #20]
  406c34:	2a24      	cmp	r2, #36	; 0x24
  406c36:	d003      	beq.n	406c40 <_realloc_r+0x3d4>
  406c38:	3610      	adds	r6, #16
  406c3a:	f10a 0318 	add.w	r3, sl, #24
  406c3e:	e741      	b.n	406ac4 <_realloc_r+0x258>
  406c40:	6933      	ldr	r3, [r6, #16]
  406c42:	f8ca 3018 	str.w	r3, [sl, #24]
  406c46:	6973      	ldr	r3, [r6, #20]
  406c48:	f8ca 301c 	str.w	r3, [sl, #28]
  406c4c:	3618      	adds	r6, #24
  406c4e:	f10a 0320 	add.w	r3, sl, #32
  406c52:	e737      	b.n	406ac4 <_realloc_r+0x258>
  406c54:	20000480 	.word	0x20000480

00406c58 <_sbrk_r>:
  406c58:	b538      	push	{r3, r4, r5, lr}
  406c5a:	4c07      	ldr	r4, [pc, #28]	; (406c78 <_sbrk_r+0x20>)
  406c5c:	2300      	movs	r3, #0
  406c5e:	4605      	mov	r5, r0
  406c60:	4608      	mov	r0, r1
  406c62:	6023      	str	r3, [r4, #0]
  406c64:	f7fa f860 	bl	400d28 <_sbrk>
  406c68:	1c43      	adds	r3, r0, #1
  406c6a:	d000      	beq.n	406c6e <_sbrk_r+0x16>
  406c6c:	bd38      	pop	{r3, r4, r5, pc}
  406c6e:	6823      	ldr	r3, [r4, #0]
  406c70:	2b00      	cmp	r3, #0
  406c72:	d0fb      	beq.n	406c6c <_sbrk_r+0x14>
  406c74:	602b      	str	r3, [r5, #0]
  406c76:	bd38      	pop	{r3, r4, r5, pc}
  406c78:	2001aa64 	.word	0x2001aa64

00406c7c <__sread>:
  406c7c:	b510      	push	{r4, lr}
  406c7e:	460c      	mov	r4, r1
  406c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c84:	f000 f9bc 	bl	407000 <_read_r>
  406c88:	2800      	cmp	r0, #0
  406c8a:	db03      	blt.n	406c94 <__sread+0x18>
  406c8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406c8e:	4403      	add	r3, r0
  406c90:	6523      	str	r3, [r4, #80]	; 0x50
  406c92:	bd10      	pop	{r4, pc}
  406c94:	89a3      	ldrh	r3, [r4, #12]
  406c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406c9a:	81a3      	strh	r3, [r4, #12]
  406c9c:	bd10      	pop	{r4, pc}
  406c9e:	bf00      	nop

00406ca0 <__swrite>:
  406ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406ca4:	4616      	mov	r6, r2
  406ca6:	898a      	ldrh	r2, [r1, #12]
  406ca8:	461d      	mov	r5, r3
  406caa:	05d3      	lsls	r3, r2, #23
  406cac:	460c      	mov	r4, r1
  406cae:	4607      	mov	r7, r0
  406cb0:	d506      	bpl.n	406cc0 <__swrite+0x20>
  406cb2:	2200      	movs	r2, #0
  406cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406cb8:	2302      	movs	r3, #2
  406cba:	f000 f98d 	bl	406fd8 <_lseek_r>
  406cbe:	89a2      	ldrh	r2, [r4, #12]
  406cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406cc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406cc8:	81a2      	strh	r2, [r4, #12]
  406cca:	4638      	mov	r0, r7
  406ccc:	4632      	mov	r2, r6
  406cce:	462b      	mov	r3, r5
  406cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406cd4:	f000 b8a0 	b.w	406e18 <_write_r>

00406cd8 <__sseek>:
  406cd8:	b510      	push	{r4, lr}
  406cda:	460c      	mov	r4, r1
  406cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406ce0:	f000 f97a 	bl	406fd8 <_lseek_r>
  406ce4:	89a3      	ldrh	r3, [r4, #12]
  406ce6:	1c42      	adds	r2, r0, #1
  406ce8:	bf0e      	itee	eq
  406cea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406cee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406cf2:	6520      	strne	r0, [r4, #80]	; 0x50
  406cf4:	81a3      	strh	r3, [r4, #12]
  406cf6:	bd10      	pop	{r4, pc}

00406cf8 <__sclose>:
  406cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406cfc:	f000 b8f2 	b.w	406ee4 <_close_r>

00406d00 <__swbuf_r>:
  406d00:	b570      	push	{r4, r5, r6, lr}
  406d02:	460d      	mov	r5, r1
  406d04:	4614      	mov	r4, r2
  406d06:	4606      	mov	r6, r0
  406d08:	b110      	cbz	r0, 406d10 <__swbuf_r+0x10>
  406d0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406d0c:	2b00      	cmp	r3, #0
  406d0e:	d048      	beq.n	406da2 <__swbuf_r+0xa2>
  406d10:	89a2      	ldrh	r2, [r4, #12]
  406d12:	69a3      	ldr	r3, [r4, #24]
  406d14:	60a3      	str	r3, [r4, #8]
  406d16:	b291      	uxth	r1, r2
  406d18:	0708      	lsls	r0, r1, #28
  406d1a:	d538      	bpl.n	406d8e <__swbuf_r+0x8e>
  406d1c:	6923      	ldr	r3, [r4, #16]
  406d1e:	2b00      	cmp	r3, #0
  406d20:	d035      	beq.n	406d8e <__swbuf_r+0x8e>
  406d22:	0489      	lsls	r1, r1, #18
  406d24:	b2ed      	uxtb	r5, r5
  406d26:	d515      	bpl.n	406d54 <__swbuf_r+0x54>
  406d28:	6822      	ldr	r2, [r4, #0]
  406d2a:	6961      	ldr	r1, [r4, #20]
  406d2c:	1ad3      	subs	r3, r2, r3
  406d2e:	428b      	cmp	r3, r1
  406d30:	da1c      	bge.n	406d6c <__swbuf_r+0x6c>
  406d32:	3301      	adds	r3, #1
  406d34:	68a1      	ldr	r1, [r4, #8]
  406d36:	1c50      	adds	r0, r2, #1
  406d38:	3901      	subs	r1, #1
  406d3a:	60a1      	str	r1, [r4, #8]
  406d3c:	6020      	str	r0, [r4, #0]
  406d3e:	7015      	strb	r5, [r2, #0]
  406d40:	6962      	ldr	r2, [r4, #20]
  406d42:	429a      	cmp	r2, r3
  406d44:	d01a      	beq.n	406d7c <__swbuf_r+0x7c>
  406d46:	89a3      	ldrh	r3, [r4, #12]
  406d48:	07db      	lsls	r3, r3, #31
  406d4a:	d501      	bpl.n	406d50 <__swbuf_r+0x50>
  406d4c:	2d0a      	cmp	r5, #10
  406d4e:	d015      	beq.n	406d7c <__swbuf_r+0x7c>
  406d50:	4628      	mov	r0, r5
  406d52:	bd70      	pop	{r4, r5, r6, pc}
  406d54:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406d56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406d5a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406d5e:	81a2      	strh	r2, [r4, #12]
  406d60:	6822      	ldr	r2, [r4, #0]
  406d62:	6661      	str	r1, [r4, #100]	; 0x64
  406d64:	6961      	ldr	r1, [r4, #20]
  406d66:	1ad3      	subs	r3, r2, r3
  406d68:	428b      	cmp	r3, r1
  406d6a:	dbe2      	blt.n	406d32 <__swbuf_r+0x32>
  406d6c:	4630      	mov	r0, r6
  406d6e:	4621      	mov	r1, r4
  406d70:	f7fe fdbc 	bl	4058ec <_fflush_r>
  406d74:	b940      	cbnz	r0, 406d88 <__swbuf_r+0x88>
  406d76:	6822      	ldr	r2, [r4, #0]
  406d78:	2301      	movs	r3, #1
  406d7a:	e7db      	b.n	406d34 <__swbuf_r+0x34>
  406d7c:	4630      	mov	r0, r6
  406d7e:	4621      	mov	r1, r4
  406d80:	f7fe fdb4 	bl	4058ec <_fflush_r>
  406d84:	2800      	cmp	r0, #0
  406d86:	d0e3      	beq.n	406d50 <__swbuf_r+0x50>
  406d88:	f04f 30ff 	mov.w	r0, #4294967295
  406d8c:	bd70      	pop	{r4, r5, r6, pc}
  406d8e:	4630      	mov	r0, r6
  406d90:	4621      	mov	r1, r4
  406d92:	f7fe fc8f 	bl	4056b4 <__swsetup_r>
  406d96:	2800      	cmp	r0, #0
  406d98:	d1f6      	bne.n	406d88 <__swbuf_r+0x88>
  406d9a:	89a2      	ldrh	r2, [r4, #12]
  406d9c:	6923      	ldr	r3, [r4, #16]
  406d9e:	b291      	uxth	r1, r2
  406da0:	e7bf      	b.n	406d22 <__swbuf_r+0x22>
  406da2:	f7fe fe37 	bl	405a14 <__sinit>
  406da6:	e7b3      	b.n	406d10 <__swbuf_r+0x10>

00406da8 <_wcrtomb_r>:
  406da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406dac:	4605      	mov	r5, r0
  406dae:	b086      	sub	sp, #24
  406db0:	461e      	mov	r6, r3
  406db2:	460c      	mov	r4, r1
  406db4:	b1a1      	cbz	r1, 406de0 <_wcrtomb_r+0x38>
  406db6:	4b10      	ldr	r3, [pc, #64]	; (406df8 <_wcrtomb_r+0x50>)
  406db8:	4617      	mov	r7, r2
  406dba:	f8d3 8000 	ldr.w	r8, [r3]
  406dbe:	f7ff f98f 	bl	4060e0 <__locale_charset>
  406dc2:	9600      	str	r6, [sp, #0]
  406dc4:	4603      	mov	r3, r0
  406dc6:	4621      	mov	r1, r4
  406dc8:	463a      	mov	r2, r7
  406dca:	4628      	mov	r0, r5
  406dcc:	47c0      	blx	r8
  406dce:	1c43      	adds	r3, r0, #1
  406dd0:	d103      	bne.n	406dda <_wcrtomb_r+0x32>
  406dd2:	2200      	movs	r2, #0
  406dd4:	238a      	movs	r3, #138	; 0x8a
  406dd6:	6032      	str	r2, [r6, #0]
  406dd8:	602b      	str	r3, [r5, #0]
  406dda:	b006      	add	sp, #24
  406ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406de0:	4b05      	ldr	r3, [pc, #20]	; (406df8 <_wcrtomb_r+0x50>)
  406de2:	681f      	ldr	r7, [r3, #0]
  406de4:	f7ff f97c 	bl	4060e0 <__locale_charset>
  406de8:	9600      	str	r6, [sp, #0]
  406dea:	4603      	mov	r3, r0
  406dec:	4622      	mov	r2, r4
  406dee:	4628      	mov	r0, r5
  406df0:	a903      	add	r1, sp, #12
  406df2:	47b8      	blx	r7
  406df4:	e7eb      	b.n	406dce <_wcrtomb_r+0x26>
  406df6:	bf00      	nop
  406df8:	20000890 	.word	0x20000890

00406dfc <__ascii_wctomb>:
  406dfc:	b121      	cbz	r1, 406e08 <__ascii_wctomb+0xc>
  406dfe:	2aff      	cmp	r2, #255	; 0xff
  406e00:	d804      	bhi.n	406e0c <__ascii_wctomb+0x10>
  406e02:	700a      	strb	r2, [r1, #0]
  406e04:	2001      	movs	r0, #1
  406e06:	4770      	bx	lr
  406e08:	4608      	mov	r0, r1
  406e0a:	4770      	bx	lr
  406e0c:	238a      	movs	r3, #138	; 0x8a
  406e0e:	6003      	str	r3, [r0, #0]
  406e10:	f04f 30ff 	mov.w	r0, #4294967295
  406e14:	4770      	bx	lr
  406e16:	bf00      	nop

00406e18 <_write_r>:
  406e18:	b570      	push	{r4, r5, r6, lr}
  406e1a:	4c08      	ldr	r4, [pc, #32]	; (406e3c <_write_r+0x24>)
  406e1c:	4606      	mov	r6, r0
  406e1e:	2500      	movs	r5, #0
  406e20:	4608      	mov	r0, r1
  406e22:	4611      	mov	r1, r2
  406e24:	461a      	mov	r2, r3
  406e26:	6025      	str	r5, [r4, #0]
  406e28:	f7f9 fa0e 	bl	400248 <_write>
  406e2c:	1c43      	adds	r3, r0, #1
  406e2e:	d000      	beq.n	406e32 <_write_r+0x1a>
  406e30:	bd70      	pop	{r4, r5, r6, pc}
  406e32:	6823      	ldr	r3, [r4, #0]
  406e34:	2b00      	cmp	r3, #0
  406e36:	d0fb      	beq.n	406e30 <_write_r+0x18>
  406e38:	6033      	str	r3, [r6, #0]
  406e3a:	bd70      	pop	{r4, r5, r6, pc}
  406e3c:	2001aa64 	.word	0x2001aa64

00406e40 <__register_exitproc>:
  406e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406e44:	4c25      	ldr	r4, [pc, #148]	; (406edc <__register_exitproc+0x9c>)
  406e46:	6825      	ldr	r5, [r4, #0]
  406e48:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  406e4c:	4606      	mov	r6, r0
  406e4e:	4688      	mov	r8, r1
  406e50:	4692      	mov	sl, r2
  406e52:	4699      	mov	r9, r3
  406e54:	b3cc      	cbz	r4, 406eca <__register_exitproc+0x8a>
  406e56:	6860      	ldr	r0, [r4, #4]
  406e58:	281f      	cmp	r0, #31
  406e5a:	dc18      	bgt.n	406e8e <__register_exitproc+0x4e>
  406e5c:	1c43      	adds	r3, r0, #1
  406e5e:	b17e      	cbz	r6, 406e80 <__register_exitproc+0x40>
  406e60:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  406e64:	2101      	movs	r1, #1
  406e66:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  406e6a:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  406e6e:	fa01 f200 	lsl.w	r2, r1, r0
  406e72:	4317      	orrs	r7, r2
  406e74:	2e02      	cmp	r6, #2
  406e76:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406e7a:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  406e7e:	d01e      	beq.n	406ebe <__register_exitproc+0x7e>
  406e80:	3002      	adds	r0, #2
  406e82:	6063      	str	r3, [r4, #4]
  406e84:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  406e88:	2000      	movs	r0, #0
  406e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e8e:	4b14      	ldr	r3, [pc, #80]	; (406ee0 <__register_exitproc+0xa0>)
  406e90:	b303      	cbz	r3, 406ed4 <__register_exitproc+0x94>
  406e92:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406e96:	f7ff f99d 	bl	4061d4 <malloc>
  406e9a:	4604      	mov	r4, r0
  406e9c:	b1d0      	cbz	r0, 406ed4 <__register_exitproc+0x94>
  406e9e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  406ea2:	2700      	movs	r7, #0
  406ea4:	e880 0088 	stmia.w	r0, {r3, r7}
  406ea8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406eac:	4638      	mov	r0, r7
  406eae:	2301      	movs	r3, #1
  406eb0:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406eb4:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  406eb8:	2e00      	cmp	r6, #0
  406eba:	d0e1      	beq.n	406e80 <__register_exitproc+0x40>
  406ebc:	e7d0      	b.n	406e60 <__register_exitproc+0x20>
  406ebe:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  406ec2:	430a      	orrs	r2, r1
  406ec4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  406ec8:	e7da      	b.n	406e80 <__register_exitproc+0x40>
  406eca:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  406ece:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406ed2:	e7c0      	b.n	406e56 <__register_exitproc+0x16>
  406ed4:	f04f 30ff 	mov.w	r0, #4294967295
  406ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406edc:	00407d90 	.word	0x00407d90
  406ee0:	004061d5 	.word	0x004061d5

00406ee4 <_close_r>:
  406ee4:	b538      	push	{r3, r4, r5, lr}
  406ee6:	4c07      	ldr	r4, [pc, #28]	; (406f04 <_close_r+0x20>)
  406ee8:	2300      	movs	r3, #0
  406eea:	4605      	mov	r5, r0
  406eec:	4608      	mov	r0, r1
  406eee:	6023      	str	r3, [r4, #0]
  406ef0:	f7f9 ff34 	bl	400d5c <_close>
  406ef4:	1c43      	adds	r3, r0, #1
  406ef6:	d000      	beq.n	406efa <_close_r+0x16>
  406ef8:	bd38      	pop	{r3, r4, r5, pc}
  406efa:	6823      	ldr	r3, [r4, #0]
  406efc:	2b00      	cmp	r3, #0
  406efe:	d0fb      	beq.n	406ef8 <_close_r+0x14>
  406f00:	602b      	str	r3, [r5, #0]
  406f02:	bd38      	pop	{r3, r4, r5, pc}
  406f04:	2001aa64 	.word	0x2001aa64

00406f08 <_fclose_r>:
  406f08:	2900      	cmp	r1, #0
  406f0a:	d03d      	beq.n	406f88 <_fclose_r+0x80>
  406f0c:	b570      	push	{r4, r5, r6, lr}
  406f0e:	4605      	mov	r5, r0
  406f10:	460c      	mov	r4, r1
  406f12:	b108      	cbz	r0, 406f18 <_fclose_r+0x10>
  406f14:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406f16:	b37b      	cbz	r3, 406f78 <_fclose_r+0x70>
  406f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406f1c:	b90b      	cbnz	r3, 406f22 <_fclose_r+0x1a>
  406f1e:	2000      	movs	r0, #0
  406f20:	bd70      	pop	{r4, r5, r6, pc}
  406f22:	4628      	mov	r0, r5
  406f24:	4621      	mov	r1, r4
  406f26:	f7fe fc37 	bl	405798 <__sflush_r>
  406f2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406f2c:	4606      	mov	r6, r0
  406f2e:	b133      	cbz	r3, 406f3e <_fclose_r+0x36>
  406f30:	4628      	mov	r0, r5
  406f32:	69e1      	ldr	r1, [r4, #28]
  406f34:	4798      	blx	r3
  406f36:	2800      	cmp	r0, #0
  406f38:	bfb8      	it	lt
  406f3a:	f04f 36ff 	movlt.w	r6, #4294967295
  406f3e:	89a3      	ldrh	r3, [r4, #12]
  406f40:	061b      	lsls	r3, r3, #24
  406f42:	d41c      	bmi.n	406f7e <_fclose_r+0x76>
  406f44:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406f46:	b141      	cbz	r1, 406f5a <_fclose_r+0x52>
  406f48:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406f4c:	4299      	cmp	r1, r3
  406f4e:	d002      	beq.n	406f56 <_fclose_r+0x4e>
  406f50:	4628      	mov	r0, r5
  406f52:	f7fe fe37 	bl	405bc4 <_free_r>
  406f56:	2300      	movs	r3, #0
  406f58:	6323      	str	r3, [r4, #48]	; 0x30
  406f5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406f5c:	b121      	cbz	r1, 406f68 <_fclose_r+0x60>
  406f5e:	4628      	mov	r0, r5
  406f60:	f7fe fe30 	bl	405bc4 <_free_r>
  406f64:	2300      	movs	r3, #0
  406f66:	6463      	str	r3, [r4, #68]	; 0x44
  406f68:	f7fe fd5a 	bl	405a20 <__sfp_lock_acquire>
  406f6c:	2300      	movs	r3, #0
  406f6e:	81a3      	strh	r3, [r4, #12]
  406f70:	f7fe fd58 	bl	405a24 <__sfp_lock_release>
  406f74:	4630      	mov	r0, r6
  406f76:	bd70      	pop	{r4, r5, r6, pc}
  406f78:	f7fe fd4c 	bl	405a14 <__sinit>
  406f7c:	e7cc      	b.n	406f18 <_fclose_r+0x10>
  406f7e:	4628      	mov	r0, r5
  406f80:	6921      	ldr	r1, [r4, #16]
  406f82:	f7fe fe1f 	bl	405bc4 <_free_r>
  406f86:	e7dd      	b.n	406f44 <_fclose_r+0x3c>
  406f88:	2000      	movs	r0, #0
  406f8a:	4770      	bx	lr

00406f8c <_fstat_r>:
  406f8c:	b538      	push	{r3, r4, r5, lr}
  406f8e:	4c08      	ldr	r4, [pc, #32]	; (406fb0 <_fstat_r+0x24>)
  406f90:	2300      	movs	r3, #0
  406f92:	4605      	mov	r5, r0
  406f94:	4608      	mov	r0, r1
  406f96:	4611      	mov	r1, r2
  406f98:	6023      	str	r3, [r4, #0]
  406f9a:	f7f9 fee3 	bl	400d64 <_fstat>
  406f9e:	1c43      	adds	r3, r0, #1
  406fa0:	d000      	beq.n	406fa4 <_fstat_r+0x18>
  406fa2:	bd38      	pop	{r3, r4, r5, pc}
  406fa4:	6823      	ldr	r3, [r4, #0]
  406fa6:	2b00      	cmp	r3, #0
  406fa8:	d0fb      	beq.n	406fa2 <_fstat_r+0x16>
  406faa:	602b      	str	r3, [r5, #0]
  406fac:	bd38      	pop	{r3, r4, r5, pc}
  406fae:	bf00      	nop
  406fb0:	2001aa64 	.word	0x2001aa64

00406fb4 <_isatty_r>:
  406fb4:	b538      	push	{r3, r4, r5, lr}
  406fb6:	4c07      	ldr	r4, [pc, #28]	; (406fd4 <_isatty_r+0x20>)
  406fb8:	2300      	movs	r3, #0
  406fba:	4605      	mov	r5, r0
  406fbc:	4608      	mov	r0, r1
  406fbe:	6023      	str	r3, [r4, #0]
  406fc0:	f7f9 fed6 	bl	400d70 <_isatty>
  406fc4:	1c43      	adds	r3, r0, #1
  406fc6:	d000      	beq.n	406fca <_isatty_r+0x16>
  406fc8:	bd38      	pop	{r3, r4, r5, pc}
  406fca:	6823      	ldr	r3, [r4, #0]
  406fcc:	2b00      	cmp	r3, #0
  406fce:	d0fb      	beq.n	406fc8 <_isatty_r+0x14>
  406fd0:	602b      	str	r3, [r5, #0]
  406fd2:	bd38      	pop	{r3, r4, r5, pc}
  406fd4:	2001aa64 	.word	0x2001aa64

00406fd8 <_lseek_r>:
  406fd8:	b570      	push	{r4, r5, r6, lr}
  406fda:	4c08      	ldr	r4, [pc, #32]	; (406ffc <_lseek_r+0x24>)
  406fdc:	4606      	mov	r6, r0
  406fde:	2500      	movs	r5, #0
  406fe0:	4608      	mov	r0, r1
  406fe2:	4611      	mov	r1, r2
  406fe4:	461a      	mov	r2, r3
  406fe6:	6025      	str	r5, [r4, #0]
  406fe8:	f7f9 fec4 	bl	400d74 <_lseek>
  406fec:	1c43      	adds	r3, r0, #1
  406fee:	d000      	beq.n	406ff2 <_lseek_r+0x1a>
  406ff0:	bd70      	pop	{r4, r5, r6, pc}
  406ff2:	6823      	ldr	r3, [r4, #0]
  406ff4:	2b00      	cmp	r3, #0
  406ff6:	d0fb      	beq.n	406ff0 <_lseek_r+0x18>
  406ff8:	6033      	str	r3, [r6, #0]
  406ffa:	bd70      	pop	{r4, r5, r6, pc}
  406ffc:	2001aa64 	.word	0x2001aa64

00407000 <_read_r>:
  407000:	b570      	push	{r4, r5, r6, lr}
  407002:	4c08      	ldr	r4, [pc, #32]	; (407024 <_read_r+0x24>)
  407004:	4606      	mov	r6, r0
  407006:	2500      	movs	r5, #0
  407008:	4608      	mov	r0, r1
  40700a:	4611      	mov	r1, r2
  40700c:	461a      	mov	r2, r3
  40700e:	6025      	str	r5, [r4, #0]
  407010:	f7f9 f8fc 	bl	40020c <_read>
  407014:	1c43      	adds	r3, r0, #1
  407016:	d000      	beq.n	40701a <_read_r+0x1a>
  407018:	bd70      	pop	{r4, r5, r6, pc}
  40701a:	6823      	ldr	r3, [r4, #0]
  40701c:	2b00      	cmp	r3, #0
  40701e:	d0fb      	beq.n	407018 <_read_r+0x18>
  407020:	6033      	str	r3, [r6, #0]
  407022:	bd70      	pop	{r4, r5, r6, pc}
  407024:	2001aa64 	.word	0x2001aa64

00407028 <__aeabi_uldivmod>:
  407028:	b953      	cbnz	r3, 407040 <__aeabi_uldivmod+0x18>
  40702a:	b94a      	cbnz	r2, 407040 <__aeabi_uldivmod+0x18>
  40702c:	2900      	cmp	r1, #0
  40702e:	bf08      	it	eq
  407030:	2800      	cmpeq	r0, #0
  407032:	bf1c      	itt	ne
  407034:	f04f 31ff 	movne.w	r1, #4294967295
  407038:	f04f 30ff 	movne.w	r0, #4294967295
  40703c:	f000 b83c 	b.w	4070b8 <__aeabi_idiv0>
  407040:	b082      	sub	sp, #8
  407042:	46ec      	mov	ip, sp
  407044:	e92d 5000 	stmdb	sp!, {ip, lr}
  407048:	f000 f81e 	bl	407088 <__gnu_uldivmod_helper>
  40704c:	f8dd e004 	ldr.w	lr, [sp, #4]
  407050:	b002      	add	sp, #8
  407052:	bc0c      	pop	{r2, r3}
  407054:	4770      	bx	lr
  407056:	bf00      	nop

00407058 <__gnu_ldivmod_helper>:
  407058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40705c:	9c06      	ldr	r4, [sp, #24]
  40705e:	4615      	mov	r5, r2
  407060:	4606      	mov	r6, r0
  407062:	460f      	mov	r7, r1
  407064:	4698      	mov	r8, r3
  407066:	f000 f829 	bl	4070bc <__divdi3>
  40706a:	fb05 f301 	mul.w	r3, r5, r1
  40706e:	fb00 3808 	mla	r8, r0, r8, r3
  407072:	fba5 2300 	umull	r2, r3, r5, r0
  407076:	1ab2      	subs	r2, r6, r2
  407078:	4443      	add	r3, r8
  40707a:	eb67 0303 	sbc.w	r3, r7, r3
  40707e:	e9c4 2300 	strd	r2, r3, [r4]
  407082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407086:	bf00      	nop

00407088 <__gnu_uldivmod_helper>:
  407088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40708c:	9c06      	ldr	r4, [sp, #24]
  40708e:	4690      	mov	r8, r2
  407090:	4606      	mov	r6, r0
  407092:	460f      	mov	r7, r1
  407094:	461d      	mov	r5, r3
  407096:	f000 f95f 	bl	407358 <__udivdi3>
  40709a:	fb00 f505 	mul.w	r5, r0, r5
  40709e:	fba0 2308 	umull	r2, r3, r0, r8
  4070a2:	fb08 5501 	mla	r5, r8, r1, r5
  4070a6:	1ab2      	subs	r2, r6, r2
  4070a8:	442b      	add	r3, r5
  4070aa:	eb67 0303 	sbc.w	r3, r7, r3
  4070ae:	e9c4 2300 	strd	r2, r3, [r4]
  4070b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070b6:	bf00      	nop

004070b8 <__aeabi_idiv0>:
  4070b8:	4770      	bx	lr
  4070ba:	bf00      	nop

004070bc <__divdi3>:
  4070bc:	2900      	cmp	r1, #0
  4070be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4070c2:	f2c0 80a6 	blt.w	407212 <__divdi3+0x156>
  4070c6:	2600      	movs	r6, #0
  4070c8:	2b00      	cmp	r3, #0
  4070ca:	f2c0 809c 	blt.w	407206 <__divdi3+0x14a>
  4070ce:	4688      	mov	r8, r1
  4070d0:	4694      	mov	ip, r2
  4070d2:	469e      	mov	lr, r3
  4070d4:	4615      	mov	r5, r2
  4070d6:	4604      	mov	r4, r0
  4070d8:	460f      	mov	r7, r1
  4070da:	2b00      	cmp	r3, #0
  4070dc:	d13d      	bne.n	40715a <__divdi3+0x9e>
  4070de:	428a      	cmp	r2, r1
  4070e0:	d959      	bls.n	407196 <__divdi3+0xda>
  4070e2:	fab2 f382 	clz	r3, r2
  4070e6:	b13b      	cbz	r3, 4070f8 <__divdi3+0x3c>
  4070e8:	f1c3 0220 	rsb	r2, r3, #32
  4070ec:	409f      	lsls	r7, r3
  4070ee:	fa20 f202 	lsr.w	r2, r0, r2
  4070f2:	409d      	lsls	r5, r3
  4070f4:	4317      	orrs	r7, r2
  4070f6:	409c      	lsls	r4, r3
  4070f8:	0c29      	lsrs	r1, r5, #16
  4070fa:	0c22      	lsrs	r2, r4, #16
  4070fc:	fbb7 fef1 	udiv	lr, r7, r1
  407100:	b2a8      	uxth	r0, r5
  407102:	fb01 771e 	mls	r7, r1, lr, r7
  407106:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40710a:	fb00 f30e 	mul.w	r3, r0, lr
  40710e:	42bb      	cmp	r3, r7
  407110:	d90a      	bls.n	407128 <__divdi3+0x6c>
  407112:	197f      	adds	r7, r7, r5
  407114:	f10e 32ff 	add.w	r2, lr, #4294967295
  407118:	f080 8105 	bcs.w	407326 <__divdi3+0x26a>
  40711c:	42bb      	cmp	r3, r7
  40711e:	f240 8102 	bls.w	407326 <__divdi3+0x26a>
  407122:	f1ae 0e02 	sub.w	lr, lr, #2
  407126:	442f      	add	r7, r5
  407128:	1aff      	subs	r7, r7, r3
  40712a:	b2a4      	uxth	r4, r4
  40712c:	fbb7 f3f1 	udiv	r3, r7, r1
  407130:	fb01 7713 	mls	r7, r1, r3, r7
  407134:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  407138:	fb00 f003 	mul.w	r0, r0, r3
  40713c:	42b8      	cmp	r0, r7
  40713e:	d908      	bls.n	407152 <__divdi3+0x96>
  407140:	197f      	adds	r7, r7, r5
  407142:	f103 32ff 	add.w	r2, r3, #4294967295
  407146:	f080 80f0 	bcs.w	40732a <__divdi3+0x26e>
  40714a:	42b8      	cmp	r0, r7
  40714c:	f240 80ed 	bls.w	40732a <__divdi3+0x26e>
  407150:	3b02      	subs	r3, #2
  407152:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  407156:	2200      	movs	r2, #0
  407158:	e003      	b.n	407162 <__divdi3+0xa6>
  40715a:	428b      	cmp	r3, r1
  40715c:	d90f      	bls.n	40717e <__divdi3+0xc2>
  40715e:	2200      	movs	r2, #0
  407160:	4613      	mov	r3, r2
  407162:	1c34      	adds	r4, r6, #0
  407164:	bf18      	it	ne
  407166:	2401      	movne	r4, #1
  407168:	4260      	negs	r0, r4
  40716a:	f04f 0500 	mov.w	r5, #0
  40716e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  407172:	4058      	eors	r0, r3
  407174:	4051      	eors	r1, r2
  407176:	1900      	adds	r0, r0, r4
  407178:	4169      	adcs	r1, r5
  40717a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40717e:	fab3 f283 	clz	r2, r3
  407182:	2a00      	cmp	r2, #0
  407184:	f040 8086 	bne.w	407294 <__divdi3+0x1d8>
  407188:	428b      	cmp	r3, r1
  40718a:	d302      	bcc.n	407192 <__divdi3+0xd6>
  40718c:	4584      	cmp	ip, r0
  40718e:	f200 80db 	bhi.w	407348 <__divdi3+0x28c>
  407192:	2301      	movs	r3, #1
  407194:	e7e5      	b.n	407162 <__divdi3+0xa6>
  407196:	b912      	cbnz	r2, 40719e <__divdi3+0xe2>
  407198:	2301      	movs	r3, #1
  40719a:	fbb3 f5f2 	udiv	r5, r3, r2
  40719e:	fab5 f085 	clz	r0, r5
  4071a2:	2800      	cmp	r0, #0
  4071a4:	d13b      	bne.n	40721e <__divdi3+0x162>
  4071a6:	1b78      	subs	r0, r7, r5
  4071a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4071ac:	fa1f fc85 	uxth.w	ip, r5
  4071b0:	2201      	movs	r2, #1
  4071b2:	fbb0 f8fe 	udiv	r8, r0, lr
  4071b6:	0c21      	lsrs	r1, r4, #16
  4071b8:	fb0e 0718 	mls	r7, lr, r8, r0
  4071bc:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  4071c0:	fb0c f308 	mul.w	r3, ip, r8
  4071c4:	42bb      	cmp	r3, r7
  4071c6:	d907      	bls.n	4071d8 <__divdi3+0x11c>
  4071c8:	197f      	adds	r7, r7, r5
  4071ca:	f108 31ff 	add.w	r1, r8, #4294967295
  4071ce:	d202      	bcs.n	4071d6 <__divdi3+0x11a>
  4071d0:	42bb      	cmp	r3, r7
  4071d2:	f200 80bd 	bhi.w	407350 <__divdi3+0x294>
  4071d6:	4688      	mov	r8, r1
  4071d8:	1aff      	subs	r7, r7, r3
  4071da:	b2a4      	uxth	r4, r4
  4071dc:	fbb7 f3fe 	udiv	r3, r7, lr
  4071e0:	fb0e 7713 	mls	r7, lr, r3, r7
  4071e4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4071e8:	fb0c fc03 	mul.w	ip, ip, r3
  4071ec:	45bc      	cmp	ip, r7
  4071ee:	d907      	bls.n	407200 <__divdi3+0x144>
  4071f0:	197f      	adds	r7, r7, r5
  4071f2:	f103 31ff 	add.w	r1, r3, #4294967295
  4071f6:	d202      	bcs.n	4071fe <__divdi3+0x142>
  4071f8:	45bc      	cmp	ip, r7
  4071fa:	f200 80a7 	bhi.w	40734c <__divdi3+0x290>
  4071fe:	460b      	mov	r3, r1
  407200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  407204:	e7ad      	b.n	407162 <__divdi3+0xa6>
  407206:	4252      	negs	r2, r2
  407208:	ea6f 0606 	mvn.w	r6, r6
  40720c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407210:	e75d      	b.n	4070ce <__divdi3+0x12>
  407212:	4240      	negs	r0, r0
  407214:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407218:	f04f 36ff 	mov.w	r6, #4294967295
  40721c:	e754      	b.n	4070c8 <__divdi3+0xc>
  40721e:	f1c0 0220 	rsb	r2, r0, #32
  407222:	fa24 f102 	lsr.w	r1, r4, r2
  407226:	fa07 f300 	lsl.w	r3, r7, r0
  40722a:	4085      	lsls	r5, r0
  40722c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  407230:	40d7      	lsrs	r7, r2
  407232:	4319      	orrs	r1, r3
  407234:	fbb7 f2fe 	udiv	r2, r7, lr
  407238:	0c0b      	lsrs	r3, r1, #16
  40723a:	fb0e 7712 	mls	r7, lr, r2, r7
  40723e:	fa1f fc85 	uxth.w	ip, r5
  407242:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  407246:	fb0c f702 	mul.w	r7, ip, r2
  40724a:	429f      	cmp	r7, r3
  40724c:	fa04 f400 	lsl.w	r4, r4, r0
  407250:	d907      	bls.n	407262 <__divdi3+0x1a6>
  407252:	195b      	adds	r3, r3, r5
  407254:	f102 30ff 	add.w	r0, r2, #4294967295
  407258:	d274      	bcs.n	407344 <__divdi3+0x288>
  40725a:	429f      	cmp	r7, r3
  40725c:	d972      	bls.n	407344 <__divdi3+0x288>
  40725e:	3a02      	subs	r2, #2
  407260:	442b      	add	r3, r5
  407262:	1bdf      	subs	r7, r3, r7
  407264:	b289      	uxth	r1, r1
  407266:	fbb7 f8fe 	udiv	r8, r7, lr
  40726a:	fb0e 7318 	mls	r3, lr, r8, r7
  40726e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  407272:	fb0c f708 	mul.w	r7, ip, r8
  407276:	429f      	cmp	r7, r3
  407278:	d908      	bls.n	40728c <__divdi3+0x1d0>
  40727a:	195b      	adds	r3, r3, r5
  40727c:	f108 31ff 	add.w	r1, r8, #4294967295
  407280:	d25c      	bcs.n	40733c <__divdi3+0x280>
  407282:	429f      	cmp	r7, r3
  407284:	d95a      	bls.n	40733c <__divdi3+0x280>
  407286:	f1a8 0802 	sub.w	r8, r8, #2
  40728a:	442b      	add	r3, r5
  40728c:	1bd8      	subs	r0, r3, r7
  40728e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  407292:	e78e      	b.n	4071b2 <__divdi3+0xf6>
  407294:	f1c2 0320 	rsb	r3, r2, #32
  407298:	fa2c f103 	lsr.w	r1, ip, r3
  40729c:	fa0e fe02 	lsl.w	lr, lr, r2
  4072a0:	fa20 f703 	lsr.w	r7, r0, r3
  4072a4:	ea41 0e0e 	orr.w	lr, r1, lr
  4072a8:	fa08 f002 	lsl.w	r0, r8, r2
  4072ac:	fa28 f103 	lsr.w	r1, r8, r3
  4072b0:	ea4f 451e 	mov.w	r5, lr, lsr #16
  4072b4:	4338      	orrs	r0, r7
  4072b6:	fbb1 f8f5 	udiv	r8, r1, r5
  4072ba:	0c03      	lsrs	r3, r0, #16
  4072bc:	fb05 1118 	mls	r1, r5, r8, r1
  4072c0:	fa1f f78e 	uxth.w	r7, lr
  4072c4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  4072c8:	fb07 f308 	mul.w	r3, r7, r8
  4072cc:	428b      	cmp	r3, r1
  4072ce:	fa0c fc02 	lsl.w	ip, ip, r2
  4072d2:	d909      	bls.n	4072e8 <__divdi3+0x22c>
  4072d4:	eb11 010e 	adds.w	r1, r1, lr
  4072d8:	f108 39ff 	add.w	r9, r8, #4294967295
  4072dc:	d230      	bcs.n	407340 <__divdi3+0x284>
  4072de:	428b      	cmp	r3, r1
  4072e0:	d92e      	bls.n	407340 <__divdi3+0x284>
  4072e2:	f1a8 0802 	sub.w	r8, r8, #2
  4072e6:	4471      	add	r1, lr
  4072e8:	1ac9      	subs	r1, r1, r3
  4072ea:	b280      	uxth	r0, r0
  4072ec:	fbb1 f3f5 	udiv	r3, r1, r5
  4072f0:	fb05 1113 	mls	r1, r5, r3, r1
  4072f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4072f8:	fb07 f703 	mul.w	r7, r7, r3
  4072fc:	428f      	cmp	r7, r1
  4072fe:	d908      	bls.n	407312 <__divdi3+0x256>
  407300:	eb11 010e 	adds.w	r1, r1, lr
  407304:	f103 30ff 	add.w	r0, r3, #4294967295
  407308:	d216      	bcs.n	407338 <__divdi3+0x27c>
  40730a:	428f      	cmp	r7, r1
  40730c:	d914      	bls.n	407338 <__divdi3+0x27c>
  40730e:	3b02      	subs	r3, #2
  407310:	4471      	add	r1, lr
  407312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  407316:	1bc9      	subs	r1, r1, r7
  407318:	fba3 890c 	umull	r8, r9, r3, ip
  40731c:	4549      	cmp	r1, r9
  40731e:	d309      	bcc.n	407334 <__divdi3+0x278>
  407320:	d005      	beq.n	40732e <__divdi3+0x272>
  407322:	2200      	movs	r2, #0
  407324:	e71d      	b.n	407162 <__divdi3+0xa6>
  407326:	4696      	mov	lr, r2
  407328:	e6fe      	b.n	407128 <__divdi3+0x6c>
  40732a:	4613      	mov	r3, r2
  40732c:	e711      	b.n	407152 <__divdi3+0x96>
  40732e:	4094      	lsls	r4, r2
  407330:	4544      	cmp	r4, r8
  407332:	d2f6      	bcs.n	407322 <__divdi3+0x266>
  407334:	3b01      	subs	r3, #1
  407336:	e7f4      	b.n	407322 <__divdi3+0x266>
  407338:	4603      	mov	r3, r0
  40733a:	e7ea      	b.n	407312 <__divdi3+0x256>
  40733c:	4688      	mov	r8, r1
  40733e:	e7a5      	b.n	40728c <__divdi3+0x1d0>
  407340:	46c8      	mov	r8, r9
  407342:	e7d1      	b.n	4072e8 <__divdi3+0x22c>
  407344:	4602      	mov	r2, r0
  407346:	e78c      	b.n	407262 <__divdi3+0x1a6>
  407348:	4613      	mov	r3, r2
  40734a:	e70a      	b.n	407162 <__divdi3+0xa6>
  40734c:	3b02      	subs	r3, #2
  40734e:	e757      	b.n	407200 <__divdi3+0x144>
  407350:	f1a8 0802 	sub.w	r8, r8, #2
  407354:	442f      	add	r7, r5
  407356:	e73f      	b.n	4071d8 <__divdi3+0x11c>

00407358 <__udivdi3>:
  407358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40735c:	2b00      	cmp	r3, #0
  40735e:	d144      	bne.n	4073ea <__udivdi3+0x92>
  407360:	428a      	cmp	r2, r1
  407362:	4615      	mov	r5, r2
  407364:	4604      	mov	r4, r0
  407366:	d94f      	bls.n	407408 <__udivdi3+0xb0>
  407368:	fab2 f782 	clz	r7, r2
  40736c:	460e      	mov	r6, r1
  40736e:	b14f      	cbz	r7, 407384 <__udivdi3+0x2c>
  407370:	f1c7 0320 	rsb	r3, r7, #32
  407374:	40b9      	lsls	r1, r7
  407376:	fa20 f603 	lsr.w	r6, r0, r3
  40737a:	fa02 f507 	lsl.w	r5, r2, r7
  40737e:	430e      	orrs	r6, r1
  407380:	fa00 f407 	lsl.w	r4, r0, r7
  407384:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  407388:	0c23      	lsrs	r3, r4, #16
  40738a:	fbb6 f0fe 	udiv	r0, r6, lr
  40738e:	b2af      	uxth	r7, r5
  407390:	fb0e 6110 	mls	r1, lr, r0, r6
  407394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407398:	fb07 f100 	mul.w	r1, r7, r0
  40739c:	4299      	cmp	r1, r3
  40739e:	d909      	bls.n	4073b4 <__udivdi3+0x5c>
  4073a0:	195b      	adds	r3, r3, r5
  4073a2:	f100 32ff 	add.w	r2, r0, #4294967295
  4073a6:	f080 80ec 	bcs.w	407582 <__udivdi3+0x22a>
  4073aa:	4299      	cmp	r1, r3
  4073ac:	f240 80e9 	bls.w	407582 <__udivdi3+0x22a>
  4073b0:	3802      	subs	r0, #2
  4073b2:	442b      	add	r3, r5
  4073b4:	1a5a      	subs	r2, r3, r1
  4073b6:	b2a4      	uxth	r4, r4
  4073b8:	fbb2 f3fe 	udiv	r3, r2, lr
  4073bc:	fb0e 2213 	mls	r2, lr, r3, r2
  4073c0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  4073c4:	fb07 f703 	mul.w	r7, r7, r3
  4073c8:	4297      	cmp	r7, r2
  4073ca:	d908      	bls.n	4073de <__udivdi3+0x86>
  4073cc:	1952      	adds	r2, r2, r5
  4073ce:	f103 31ff 	add.w	r1, r3, #4294967295
  4073d2:	f080 80d8 	bcs.w	407586 <__udivdi3+0x22e>
  4073d6:	4297      	cmp	r7, r2
  4073d8:	f240 80d5 	bls.w	407586 <__udivdi3+0x22e>
  4073dc:	3b02      	subs	r3, #2
  4073de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4073e2:	2600      	movs	r6, #0
  4073e4:	4631      	mov	r1, r6
  4073e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073ea:	428b      	cmp	r3, r1
  4073ec:	d847      	bhi.n	40747e <__udivdi3+0x126>
  4073ee:	fab3 f683 	clz	r6, r3
  4073f2:	2e00      	cmp	r6, #0
  4073f4:	d148      	bne.n	407488 <__udivdi3+0x130>
  4073f6:	428b      	cmp	r3, r1
  4073f8:	d302      	bcc.n	407400 <__udivdi3+0xa8>
  4073fa:	4282      	cmp	r2, r0
  4073fc:	f200 80cd 	bhi.w	40759a <__udivdi3+0x242>
  407400:	2001      	movs	r0, #1
  407402:	4631      	mov	r1, r6
  407404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407408:	b912      	cbnz	r2, 407410 <__udivdi3+0xb8>
  40740a:	2501      	movs	r5, #1
  40740c:	fbb5 f5f2 	udiv	r5, r5, r2
  407410:	fab5 f885 	clz	r8, r5
  407414:	f1b8 0f00 	cmp.w	r8, #0
  407418:	d177      	bne.n	40750a <__udivdi3+0x1b2>
  40741a:	1b4a      	subs	r2, r1, r5
  40741c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  407420:	b2af      	uxth	r7, r5
  407422:	2601      	movs	r6, #1
  407424:	fbb2 f0fe 	udiv	r0, r2, lr
  407428:	0c23      	lsrs	r3, r4, #16
  40742a:	fb0e 2110 	mls	r1, lr, r0, r2
  40742e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  407432:	fb07 f300 	mul.w	r3, r7, r0
  407436:	428b      	cmp	r3, r1
  407438:	d907      	bls.n	40744a <__udivdi3+0xf2>
  40743a:	1949      	adds	r1, r1, r5
  40743c:	f100 32ff 	add.w	r2, r0, #4294967295
  407440:	d202      	bcs.n	407448 <__udivdi3+0xf0>
  407442:	428b      	cmp	r3, r1
  407444:	f200 80ba 	bhi.w	4075bc <__udivdi3+0x264>
  407448:	4610      	mov	r0, r2
  40744a:	1ac9      	subs	r1, r1, r3
  40744c:	b2a4      	uxth	r4, r4
  40744e:	fbb1 f3fe 	udiv	r3, r1, lr
  407452:	fb0e 1113 	mls	r1, lr, r3, r1
  407456:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40745a:	fb07 f703 	mul.w	r7, r7, r3
  40745e:	42a7      	cmp	r7, r4
  407460:	d908      	bls.n	407474 <__udivdi3+0x11c>
  407462:	1964      	adds	r4, r4, r5
  407464:	f103 32ff 	add.w	r2, r3, #4294967295
  407468:	f080 808f 	bcs.w	40758a <__udivdi3+0x232>
  40746c:	42a7      	cmp	r7, r4
  40746e:	f240 808c 	bls.w	40758a <__udivdi3+0x232>
  407472:	3b02      	subs	r3, #2
  407474:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407478:	4631      	mov	r1, r6
  40747a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40747e:	2600      	movs	r6, #0
  407480:	4630      	mov	r0, r6
  407482:	4631      	mov	r1, r6
  407484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407488:	f1c6 0420 	rsb	r4, r6, #32
  40748c:	fa22 f504 	lsr.w	r5, r2, r4
  407490:	40b3      	lsls	r3, r6
  407492:	432b      	orrs	r3, r5
  407494:	fa20 fc04 	lsr.w	ip, r0, r4
  407498:	fa01 f706 	lsl.w	r7, r1, r6
  40749c:	fa21 f504 	lsr.w	r5, r1, r4
  4074a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  4074a4:	ea4c 0707 	orr.w	r7, ip, r7
  4074a8:	fbb5 f8fe 	udiv	r8, r5, lr
  4074ac:	0c39      	lsrs	r1, r7, #16
  4074ae:	fb0e 5518 	mls	r5, lr, r8, r5
  4074b2:	fa1f fc83 	uxth.w	ip, r3
  4074b6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  4074ba:	fb0c f108 	mul.w	r1, ip, r8
  4074be:	42a9      	cmp	r1, r5
  4074c0:	fa02 f206 	lsl.w	r2, r2, r6
  4074c4:	d904      	bls.n	4074d0 <__udivdi3+0x178>
  4074c6:	18ed      	adds	r5, r5, r3
  4074c8:	f108 34ff 	add.w	r4, r8, #4294967295
  4074cc:	d367      	bcc.n	40759e <__udivdi3+0x246>
  4074ce:	46a0      	mov	r8, r4
  4074d0:	1a6d      	subs	r5, r5, r1
  4074d2:	b2bf      	uxth	r7, r7
  4074d4:	fbb5 f4fe 	udiv	r4, r5, lr
  4074d8:	fb0e 5514 	mls	r5, lr, r4, r5
  4074dc:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  4074e0:	fb0c fc04 	mul.w	ip, ip, r4
  4074e4:	458c      	cmp	ip, r1
  4074e6:	d904      	bls.n	4074f2 <__udivdi3+0x19a>
  4074e8:	18c9      	adds	r1, r1, r3
  4074ea:	f104 35ff 	add.w	r5, r4, #4294967295
  4074ee:	d35c      	bcc.n	4075aa <__udivdi3+0x252>
  4074f0:	462c      	mov	r4, r5
  4074f2:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  4074f6:	ebcc 0101 	rsb	r1, ip, r1
  4074fa:	fba4 2302 	umull	r2, r3, r4, r2
  4074fe:	4299      	cmp	r1, r3
  407500:	d348      	bcc.n	407594 <__udivdi3+0x23c>
  407502:	d044      	beq.n	40758e <__udivdi3+0x236>
  407504:	4620      	mov	r0, r4
  407506:	2600      	movs	r6, #0
  407508:	e76c      	b.n	4073e4 <__udivdi3+0x8c>
  40750a:	f1c8 0420 	rsb	r4, r8, #32
  40750e:	fa01 f308 	lsl.w	r3, r1, r8
  407512:	fa05 f508 	lsl.w	r5, r5, r8
  407516:	fa20 f704 	lsr.w	r7, r0, r4
  40751a:	40e1      	lsrs	r1, r4
  40751c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  407520:	431f      	orrs	r7, r3
  407522:	fbb1 f6fe 	udiv	r6, r1, lr
  407526:	0c3a      	lsrs	r2, r7, #16
  407528:	fb0e 1116 	mls	r1, lr, r6, r1
  40752c:	fa1f fc85 	uxth.w	ip, r5
  407530:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  407534:	fb0c f206 	mul.w	r2, ip, r6
  407538:	429a      	cmp	r2, r3
  40753a:	fa00 f408 	lsl.w	r4, r0, r8
  40753e:	d907      	bls.n	407550 <__udivdi3+0x1f8>
  407540:	195b      	adds	r3, r3, r5
  407542:	f106 31ff 	add.w	r1, r6, #4294967295
  407546:	d237      	bcs.n	4075b8 <__udivdi3+0x260>
  407548:	429a      	cmp	r2, r3
  40754a:	d935      	bls.n	4075b8 <__udivdi3+0x260>
  40754c:	3e02      	subs	r6, #2
  40754e:	442b      	add	r3, r5
  407550:	1a9b      	subs	r3, r3, r2
  407552:	b2bf      	uxth	r7, r7
  407554:	fbb3 f0fe 	udiv	r0, r3, lr
  407558:	fb0e 3310 	mls	r3, lr, r0, r3
  40755c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  407560:	fb0c f100 	mul.w	r1, ip, r0
  407564:	4299      	cmp	r1, r3
  407566:	d907      	bls.n	407578 <__udivdi3+0x220>
  407568:	195b      	adds	r3, r3, r5
  40756a:	f100 32ff 	add.w	r2, r0, #4294967295
  40756e:	d221      	bcs.n	4075b4 <__udivdi3+0x25c>
  407570:	4299      	cmp	r1, r3
  407572:	d91f      	bls.n	4075b4 <__udivdi3+0x25c>
  407574:	3802      	subs	r0, #2
  407576:	442b      	add	r3, r5
  407578:	1a5a      	subs	r2, r3, r1
  40757a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  40757e:	4667      	mov	r7, ip
  407580:	e750      	b.n	407424 <__udivdi3+0xcc>
  407582:	4610      	mov	r0, r2
  407584:	e716      	b.n	4073b4 <__udivdi3+0x5c>
  407586:	460b      	mov	r3, r1
  407588:	e729      	b.n	4073de <__udivdi3+0x86>
  40758a:	4613      	mov	r3, r2
  40758c:	e772      	b.n	407474 <__udivdi3+0x11c>
  40758e:	40b0      	lsls	r0, r6
  407590:	4290      	cmp	r0, r2
  407592:	d2b7      	bcs.n	407504 <__udivdi3+0x1ac>
  407594:	1e60      	subs	r0, r4, #1
  407596:	2600      	movs	r6, #0
  407598:	e724      	b.n	4073e4 <__udivdi3+0x8c>
  40759a:	4630      	mov	r0, r6
  40759c:	e722      	b.n	4073e4 <__udivdi3+0x8c>
  40759e:	42a9      	cmp	r1, r5
  4075a0:	d995      	bls.n	4074ce <__udivdi3+0x176>
  4075a2:	f1a8 0802 	sub.w	r8, r8, #2
  4075a6:	441d      	add	r5, r3
  4075a8:	e792      	b.n	4074d0 <__udivdi3+0x178>
  4075aa:	458c      	cmp	ip, r1
  4075ac:	d9a0      	bls.n	4074f0 <__udivdi3+0x198>
  4075ae:	3c02      	subs	r4, #2
  4075b0:	4419      	add	r1, r3
  4075b2:	e79e      	b.n	4074f2 <__udivdi3+0x19a>
  4075b4:	4610      	mov	r0, r2
  4075b6:	e7df      	b.n	407578 <__udivdi3+0x220>
  4075b8:	460e      	mov	r6, r1
  4075ba:	e7c9      	b.n	407550 <__udivdi3+0x1f8>
  4075bc:	3802      	subs	r0, #2
  4075be:	4429      	add	r1, r5
  4075c0:	e743      	b.n	40744a <__udivdi3+0xf2>
  4075c2:	bf00      	nop
  4075c4:	732f2e2e 	.word	0x732f2e2e
  4075c8:	412f6372 	.word	0x412f6372
  4075cc:	742f4653 	.word	0x742f4653
  4075d0:	64726968 	.word	0x64726968
  4075d4:	74726170 	.word	0x74726170
  4075d8:	72662f79 	.word	0x72662f79
  4075dc:	74726565 	.word	0x74726565
  4075e0:	662f736f 	.word	0x662f736f
  4075e4:	72656572 	.word	0x72656572
  4075e8:	2d736f74 	.word	0x2d736f74
  4075ec:	2e332e37 	.word	0x2e332e37
  4075f0:	6f732f30 	.word	0x6f732f30
  4075f4:	65637275 	.word	0x65637275
  4075f8:	6575712f 	.word	0x6575712f
  4075fc:	632e6575 	.word	0x632e6575
  407600:	00000000 	.word	0x00000000

00407604 <ucExpectedStackBytes.6044>:
  407604:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
  407614:	a5a5a5a5 09097325 25096325 75250975     ....%s..%c.%u.%u
  407624:	0d752509 0000000a 09097325 30090930     .%u.....%s..0..0
  407634:	0a0d2525 00000000 09097325 09097525     %%......%s..%u..
  407644:	25257525 00000a0d 09097325 09097525     %u%%....%s..%u..
  407654:	2525313c 00000a0d 732f2e2e 412f6372     <1%%....../src/A
  407664:	742f4653 64726968 74726170 72662f79     SF/thirdparty/fr
  407674:	74726565 662f736f 72656572 2d736f74     eertos/freertos-
  407684:	2e332e37 6f732f30 65637275 7361742f     7.3.0/source/tas
  407694:	632e736b 00000000 454c4449 00000000     ks.c....IDLE....
  4076a4:	20726d54 00637653 732f2e2e 412f6372     Tmr Svc.../src/A
  4076b4:	742f4653 64726968 74726170 72662f79     SF/thirdparty/fr
  4076c4:	74726565 662f736f 72656572 2d736f74     eertos/freertos-
  4076d4:	2e332e37 6f732f30 65637275 6d69742f     7.3.0/source/tim
  4076e4:	2e737265 00000063 33323130 37363534     ers.c...01234567
  4076f4:	62613938 66656463 00000000 29642528     89abcdef....(%d)
  407704:	29732528 00000020 65746e65 6f632072     (%s) ...enter co
  407714:	6769666e 646f6d20 000a0d65 66726570     nfig mode...perf
  407724:	206d726f 666e6f63 6d206769 0d65646f     orm config mode.
  407734:	0000000a 66726570 206d726f 74736574     ....perform test
  407744:	6d6f6320 646e616d 646f6d20 000a0d65      command mode...
  407754:	70747468 2f2f3a73 752d3373 65772d73     https://s3-us-we
  407764:	312d7473 616d612e 616e6f7a 632e7377     st-1.amazonaws.c
  407774:	6d2f6d6f 73692e6f 6c69616d 6d326d2f     om/mo.ismail/m2m
  407784:	61746f5f 3061335f 6e69622e 00000000     _ota_3a0.bin....
  407794:	69726553 49206c61 6425284e 25203a29     Serial IN(%d): %
  4077a4:	000a0d73 61766e49 2064696c 64616568     s...Invalid head
  4077b4:	72207265 69656365 20646576 25783028     er received (0x%
  4077c4:	0d2e2978 0000000a 61766e49 2064696c     x)......Invalid 
  4077d4:	2c435243 63655220 65766965 52432064     CRC, Received CR
  4077e4:	78302843 2c297825 6c614320 616c7563     C(0x%x), Calcula
  4077f4:	20646574 28435243 78257830 0a0d2e29     ted CRC(0x%x)...
  407804:	00000000 65636552 20657669 6b636170     ....Receive pack
  407814:	65207465 726f7272 73657220 736e6f70     et error respons
  407824:	65202c65 25287272 0d2e2964 0000000a     e, err(%d)......
  407834:	65636552 20657669 746e6f63 206c6f72     Receive control 
  407844:	6d6d6f63 2e646e61 00000a0d 73206f4e     command.....No s
  407854:	20686375 746e6f63 206c6f72 6d6d6f63     uch control comm
  407864:	28646e61 78257830 0a0d2e29 00000000     and(0x%x).......
  407874:	20746547 69766564 73206563 65746174     Get device state
  407884:	0a0d2e73 00000000 69666957 73696420     s.......Wifi dis
  407894:	6e6e6f63 2e746365 00000a0d 69666957     connect.....Wifi
  4078a4:	646f6d20 20656c75 73206e69 6666696e      module in sniff
  4078b4:	6d207265 2e65646f 00000a0d 69666957     er mode.....Wifi
  4078c4:	646f6d20 20656c75 6e6e6f63 20746365      module connect 
  4078d4:	77206f74 20696669 74756f72 0d2e7265     to wifi router..
  4078e4:	0000000a 69666957 646f6d20 20656c75     ....Wifi module 
  4078f4:	6e6e6f63 20746365 4a206f74 65732044     connect to JD se
  407904:	72657672 000a0d2e 6e6e6f43 20746365     rver....Connect 
  407914:	52206f74 746f6d65 65532065 72657672     to Remote Server
  407924:	2e4b4f20 00000a0d 6e6e6f43 69746365      OK.....Connecti
  407934:	62206e6f 68746165 74726165 000a0d2e     on beatheart....
  407944:	61647055 44206574 20617461 0d2e4b4f     Update Data OK..
  407954:	0000000a 65736552 6f742074 63614620     ....Reset to Fac
  407964:	79726f74 2077654e 0d2e4b4f 0000000a     toryNew OK......
  407974:	44495555 53455220 4b4f2050 000a0d2e     UUID RESP OK....
  407984:	44495555 53455220 72452050 2e726f72     UUID RESP Error.
  407994:	00000a0d 72617453 6e732074 65666669     ....Start sniffe
  4079a4:	6f6d2072 2e2e6564 000a0d2e 20746f47     r mode......Got 
  4079b4:	69666977 69737320 25203a64 70202c73     wifi ssid: %s, p
  4079c4:	203a6b73 0a0d7325 00000000 72617453     sk: %s......Star
  4079d4:	69772074 63206966 656e6e6f 73207463     t wifi connect s
  4079e4:	28646973 2c297325 6b737020 29732528     sid(%s), psk(%s)
  4079f4:	000a0d2e 462d6957 6f4d2069 656c7564     ....Wi-Fi Module
  407a04:	61655220 0d217964 0000000a 74726f43      Ready!.....Cort
  407a14:	41207375 75205050 74616470 4b4f2065     us APP update OK
  407a24:	000a0d2e 6f727245 4f203a72 20554154     ....Error: OTAU 
  407a34:	61766e69 2064696c 2e6c7275 00000a0d     invalid url.....
  407a44:	6f727245 4f203a72 20554154 6e776f64     Error: OTAU down
  407a54:	64616f6c 69616620 2e64656c 00000a0d     load failed.....
  407a64:	6f727245 53203a72 63746977 544f2068     Error: Switch OT
  407a74:	69205541 6567616d 69616620 2e64656c     AU image failed.
  407a84:	00000a0d 69466957 72696620 7261776d     ....WiFi firmwar
  407a94:	70752065 65746164 2e4b4f20 00000a0d     e update OK.....
  407aa4:	20746553 20707061 7561746f 6c727520     Set app otau url
  407ab4:	2e4b4f20 00000a0d 20746553 69666977      OK.....Set wifi
  407ac4:	72696620 7261776d 746f2065 75207561      firmware otau u
  407ad4:	4f206c72 0a0d2e4b 00000000 462d6957     rl OK.......Wi-F
  407ae4:	6f632069 63656e6e 6f742074 6f6c4320     i connect to Clo
  407af4:	4f206475 000a0d4b 462d6957 65722069     ud OK...Wi-Fi re
  407b04:	6e727574 74656720 72617520 66632074     turn get uart cf
  407b14:	4b4f2067 00000a0d 20504455 6b636170     g OK....UDP pack
  407b24:	6a207465 636e6f73 72746e6f 70206c6f     et jsoncontrol p
  407b34:	656b6361 0a0d2e74 00000000 20504455     acket.......UDP 
  407b44:	6b636170 75207465 6f6e6b6e 70206e77     packet unknown p
  407b54:	656b6361 0a0d2e74 00000000 6f727245     acket.......Erro
  407b64:	6f203a72 6f207475 656d2066 79726f6d     r: out of memory
  407b74:	000a0d2e 63205041 46206e61 646e756f     ....AP can Found
  407b84:	000a0d2e 6e205041 4620746f 646e756f     ....AP not Found
  407b94:	000a0d2e 6f727245 55203a72 20545241     ....Error: UART 
  407ba4:	656d6974 2e74756f 00000a0d 75736e55     timeout.....Unsu
  407bb4:	726f7070 20646574 6d6d6f63 28646e61     pported command(
  407bc4:	2e296425 00000a0d 69726573 695f6c61     %d).....serial_i
  407bd4:	6174206e 73206b73 74726174 0a0d6465     n task started..
  407be4:	00000000 6e6f4378 54676966 72656d69     ....xConfigTimer
  407bf4:	00000000 6e6f4378 54676966 72656d69     ....xConfigTimer
  407c04:	65726320 20657461 6c696166 0d2e6465      create failed..
  407c14:	0000000a 64654c78 656d6954 00000072     ....xLedTimer...
  407c24:	64654c78 65646f4d 656d6954 72632072     xLedModeTimer cr
  407c34:	65746165 69616620 2e64656c 00000a0d     eate failed.....
  407c44:	69726573 6f5f6c61 74207475 206b7361     serial_out task 
  407c54:	72617473 0d646574 0000000a 69726553     started.....Seri
  407c64:	51206c61 65756575 206e4920 61657263     al Queue In crea
  407c74:	66206574 656c6961 000a0d64 69726553     te failed...Seri
  407c84:	51206c61 65756575 74754f20 65726320     al Queue Out cre
  407c94:	20657461 6c696166 0a0d6465 00000000     ate failed......
  407ca4:	69666977 7265735f 5f6c6169 00006e69     wifi_serial_in..
  407cb4:	69726553 4f206c61 25285455 203a2964     Serial OUT(%d): 
  407cc4:	0a0d7325 00000000 74412d2d 206c656d     %s......--Atmel 
  407cd4:	20353547 20546f49 0a0d2d2d 53202d2d     G55 IoT --..-- S
  407ce4:	35474d41 50585f35 4e49414c 505f4445     AMG55_XPLAINED_P
  407cf4:	2d204f52 2d0a0d2d 6f43202d 6c69706d     RO --..-- Compil
  407d04:	203a6465 2074634f 32203031 20363130     ed: Oct 10 2016 
  407d14:	333a3031 33313a37 0d2d2d20 00000000     10:37:13 --.....
  407d24:	69666977 7361745f 0000006b 69666977     wifi_task...wifi
  407d34:	73617420 7263206b 65746165 69616620      task create fai
  407d44:	0d64656c 0000000a 70704176 6163696c     led.....vApplica
  407d54:	6e6f6974 6c6c614d 6146636f 64656c69     tionMallocFailed
  407d64:	6b6f6f48 00000a0d 70704176 6163696c     Hook....vApplica
  407d74:	6e6f6974 63617453 65764f6b 6f6c6672     tionStackOverflo
  407d84:	6f6f4877 000a0d6b 00000043              wHook...C...

00407d90 <_global_impure_ptr>:
  407d90:	20000030                                0.. 

00407d94 <zeroes.6869>:
  407d94:	30303030 30303030 30303030 30303030     0000000000000000
  407da4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  407db4:	00000000 6c756e28 0000296c              ....(null)..

00407dc0 <blanks.6868>:
  407dc0:	20202020 20202020 20202020 20202020                     

00407dd0 <_init>:
  407dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407dd2:	bf00      	nop
  407dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407dd6:	bc08      	pop	{r3}
  407dd8:	469e      	mov	lr, r3
  407dda:	4770      	bx	lr

00407ddc <__init_array_start>:
  407ddc:	00405779 	.word	0x00405779

00407de0 <__frame_dummy_init_array_entry>:
  407de0:	0040016d                                m.@.

00407de4 <_fini>:
  407de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407de6:	bf00      	nop
  407de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407dea:	bc08      	pop	{r3}
  407dec:	469e      	mov	lr, r3
  407dee:	4770      	bx	lr

00407df0 <__fini_array_start>:
  407df0:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....

20000010 <SystemCoreClock>:
20000010:	1200 007a                                   ..z.

20000014 <uxCriticalNesting>:
20000014:	aaaa aaaa                                   ....

20000018 <xFreeBytesRemaining>:
20000018:	8000 0001                                   ....

2000001c <xNextTaskUnblockTime>:
2000001c:	ffff ffff                                   ....

20000020 <button_mode.9176>:
20000020:	0001 0000                                   ....

20000024 <resp_out_data.9066>:
20000024:	a00c 2001                                   ... 

20000028 <resp_out_data.9075>:
20000028:	a030 2001 0000 0000                         0.. ....

20000030 <impure_data>:
20000030:	0000 0000 031c 2000 0384 2000 03ec 2000     ....... ... ... 
	...
20000064:	7d8c 0040 0000 0000 0000 0000 0000 0000     .}@.............
	...
200000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000458 <_impure_ptr>:
20000458:	0030 2000                                   0.. 

2000045c <lc_ctype_charset>:
2000045c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2000047c <__mb_cur_max>:
2000047c:	0001 0000                                   ....

20000480 <__malloc_av_>:
	...
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 

20000888 <__malloc_trim_threshold>:
20000888:	0000 0002                                   ....

2000088c <__malloc_sbrk_base>:
2000088c:	ffff ffff                                   ....

20000890 <__wctomb>:
20000890:	6dfd 0040                                   .m@.
