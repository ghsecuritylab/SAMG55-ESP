
atmel_iot_gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d24  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407d24  00407d24  0000fd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000894  20000000  00407d2c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0001c6a0  20000898  004085c8  00010898  2**3
                  ALLOC
  4 .stack        00003000  2001cf38  00424c68  00010898  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00010894  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000108c2  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015435  00000000  00000000  0001091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003744  00000000  00000000  00025d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008594  00000000  00000000  00029496  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000dc0  00000000  00000000  00031a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cc8  00000000  00000000  000327ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a55b  00000000  00000000  000334b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000116ac  00000000  00000000  0003da0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00058ced  00000000  00000000  0004f0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002d48  00000000  00000000  000a7da8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2001ff38 	.word	0x2001ff38
  400004:	00400ab9 	.word	0x00400ab9
  400008:	00400ab5 	.word	0x00400ab5
  40000c:	00400ab5 	.word	0x00400ab5
  400010:	00400ab5 	.word	0x00400ab5
  400014:	00400ab5 	.word	0x00400ab5
  400018:	00400ab5 	.word	0x00400ab5
	...
  40002c:	00400e79 	.word	0x00400e79
  400030:	00400ab5 	.word	0x00400ab5
  400034:	00000000 	.word	0x00000000
  400038:	00400ef1 	.word	0x00400ef1
  40003c:	00400f41 	.word	0x00400f41
  400040:	00400ab5 	.word	0x00400ab5
  400044:	00400ab5 	.word	0x00400ab5
  400048:	00400ab5 	.word	0x00400ab5
  40004c:	00400ab5 	.word	0x00400ab5
  400050:	00400ab5 	.word	0x00400ab5
  400054:	00400ab5 	.word	0x00400ab5
  400058:	00400ab5 	.word	0x00400ab5
  40005c:	00400ab5 	.word	0x00400ab5
  400060:	004029ed 	.word	0x004029ed
  400064:	00400ab5 	.word	0x00400ab5
  400068:	00000000 	.word	0x00000000
  40006c:	004006d1 	.word	0x004006d1
  400070:	004006e5 	.word	0x004006e5
  400074:	00400ab5 	.word	0x00400ab5
  400078:	00400ab5 	.word	0x00400ab5
  40007c:	00400ab5 	.word	0x00400ab5
  400080:	00400ab5 	.word	0x00400ab5
  400084:	00400ab5 	.word	0x00400ab5
  400088:	00400ab5 	.word	0x00400ab5
  40008c:	004025a9 	.word	0x004025a9
  400090:	00400ab5 	.word	0x00400ab5
  400094:	00400ab5 	.word	0x00400ab5
  400098:	00400ab5 	.word	0x00400ab5
  40009c:	00400ab5 	.word	0x00400ab5
  4000a0:	00400ab5 	.word	0x00400ab5
  4000a4:	00400ab5 	.word	0x00400ab5
  4000a8:	00400ab5 	.word	0x00400ab5
  4000ac:	00400ab5 	.word	0x00400ab5
  4000b0:	00400ab5 	.word	0x00400ab5
  4000b4:	00400ab5 	.word	0x00400ab5
  4000b8:	00400ab5 	.word	0x00400ab5
	...
  4000fc:	00400ab5 	.word	0x00400ab5
  400100:	00400ab5 	.word	0x00400ab5
  400104:	00400ab5 	.word	0x00400ab5
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20000898 	.word	0x20000898
  400164:	00000000 	.word	0x00000000
  400168:	00407d2c 	.word	0x00407d2c

0040016c <frame_dummy>:
  40016c:	4b08      	ldr	r3, [pc, #32]	; (400190 <frame_dummy+0x24>)
  40016e:	b510      	push	{r4, lr}
  400170:	b11b      	cbz	r3, 40017a <frame_dummy+0xe>
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x28>)
  400174:	4908      	ldr	r1, [pc, #32]	; (400198 <frame_dummy+0x2c>)
  400176:	f3af 8000 	nop.w
  40017a:	4808      	ldr	r0, [pc, #32]	; (40019c <frame_dummy+0x30>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b903      	cbnz	r3, 400182 <frame_dummy+0x16>
  400180:	bd10      	pop	{r4, pc}
  400182:	4b07      	ldr	r3, [pc, #28]	; (4001a0 <frame_dummy+0x34>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0fb      	beq.n	400180 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	bf00      	nop
  400190:	00000000 	.word	0x00000000
  400194:	00407d2c 	.word	0x00407d2c
  400198:	2000089c 	.word	0x2000089c
  40019c:	00407d2c 	.word	0x00407d2c
  4001a0:	00000000 	.word	0x00000000

004001a4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  4001a4:	b510      	push	{r4, lr}
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001a6:	480e      	ldr	r0, [pc, #56]	; (4001e0 <sysclk_init+0x3c>)
  4001a8:	4b0e      	ldr	r3, [pc, #56]	; (4001e4 <sysclk_init+0x40>)
  4001aa:	4798      	blx	r3
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001ac:	2000      	movs	r0, #0
  4001ae:	4b0e      	ldr	r3, [pc, #56]	; (4001e8 <sysclk_init+0x44>)
  4001b0:	4798      	blx	r3
	case OSC_SLCK_32K_RC:
		return 1;

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4001b2:	4c0e      	ldr	r4, [pc, #56]	; (4001ec <sysclk_init+0x48>)
  4001b4:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001b6:	2800      	cmp	r0, #0
  4001b8:	d0fc      	beq.n	4001b4 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ba:	4b0d      	ldr	r3, [pc, #52]	; (4001f0 <sysclk_init+0x4c>)
  4001bc:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  4001be:	4a0d      	ldr	r2, [pc, #52]	; (4001f4 <sysclk_init+0x50>)
  4001c0:	4b0d      	ldr	r3, [pc, #52]	; (4001f8 <sysclk_init+0x54>)
  4001c2:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4001c4:	4c0d      	ldr	r4, [pc, #52]	; (4001fc <sysclk_init+0x58>)
  4001c6:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001c8:	2800      	cmp	r0, #0
  4001ca:	d0fc      	beq.n	4001c6 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001cc:	2000      	movs	r0, #0
  4001ce:	4b0c      	ldr	r3, [pc, #48]	; (400200 <sysclk_init+0x5c>)
  4001d0:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001d2:	4b0c      	ldr	r3, [pc, #48]	; (400204 <sysclk_init+0x60>)
  4001d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001d6:	480c      	ldr	r0, [pc, #48]	; (400208 <sysclk_init+0x64>)
  4001d8:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <sysclk_init+0x40>)
  4001da:	4798      	blx	r3
  4001dc:	bd10      	pop	{r4, pc}
  4001de:	bf00      	nop
  4001e0:	07270e00 	.word	0x07270e00
  4001e4:	00400c85 	.word	0x00400c85
  4001e8:	004007e1 	.word	0x004007e1
  4001ec:	00400805 	.word	0x00400805
  4001f0:	00400825 	.word	0x00400825
  4001f4:	0e4d3f01 	.word	0x0e4d3f01
  4001f8:	400e0400 	.word	0x400e0400
  4001fc:	00400831 	.word	0x00400831
  400200:	00400779 	.word	0x00400779
  400204:	00400b9d 	.word	0x00400b9d
  400208:	07270000 	.word	0x07270000

0040020c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40020c:	b9a8      	cbnz	r0, 40023a <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40020e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400212:	460c      	mov	r4, r1
  400214:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400216:	2a00      	cmp	r2, #0
  400218:	dd0a      	ble.n	400230 <_read+0x24>
  40021a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40021c:	4e08      	ldr	r6, [pc, #32]	; (400240 <_read+0x34>)
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <_read+0x38>)
  400220:	6830      	ldr	r0, [r6, #0]
  400222:	4621      	mov	r1, r4
  400224:	682b      	ldr	r3, [r5, #0]
  400226:	4798      	blx	r3
		ptr++;
  400228:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40022a:	42bc      	cmp	r4, r7
  40022c:	d1f8      	bne.n	400220 <_read+0x14>
  40022e:	e001      	b.n	400234 <_read+0x28>
  400230:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400234:	4640      	mov	r0, r8
  400236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  40023a:	f04f 30ff 	mov.w	r0, #4294967295
  40023e:	4770      	bx	lr
  400240:	2001bc60 	.word	0x2001bc60
  400244:	2001bc58 	.word	0x2001bc58

00400248 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400248:	3801      	subs	r0, #1
  40024a:	2802      	cmp	r0, #2
  40024c:	d818      	bhi.n	400280 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40024e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400252:	460e      	mov	r6, r1
  400254:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400256:	b182      	cbz	r2, 40027a <_write+0x32>
  400258:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40025a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400294 <_write+0x4c>
  40025e:	4f0c      	ldr	r7, [pc, #48]	; (400290 <_write+0x48>)
  400260:	f8d8 0000 	ldr.w	r0, [r8]
  400264:	f815 1b01 	ldrb.w	r1, [r5], #1
  400268:	683b      	ldr	r3, [r7, #0]
  40026a:	4798      	blx	r3
  40026c:	2800      	cmp	r0, #0
  40026e:	db0a      	blt.n	400286 <_write+0x3e>
  400270:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400272:	3c01      	subs	r4, #1
  400274:	d1f4      	bne.n	400260 <_write+0x18>
  400276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40027a:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  40027c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400280:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400284:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400286:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40028e:	bf00      	nop
  400290:	2001bc5c 	.word	0x2001bc5c
  400294:	2001bc60 	.word	0x2001bc60

00400298 <Button1_Handler>:
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {	
  400298:	280c      	cmp	r0, #12
  40029a:	d105      	bne.n	4002a8 <Button1_Handler+0x10>
  40029c:	2901      	cmp	r1, #1
  40029e:	d103      	bne.n	4002a8 <Button1_Handler+0x10>
 *
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
  4002a0:	b508      	push	{r3, lr}
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {	
		extern void vFNBtton_Click_Hook( void );
		vFNBtton_Click_Hook();
  4002a2:	4b02      	ldr	r3, [pc, #8]	; (4002ac <Button1_Handler+0x14>)
  4002a4:	4798      	blx	r3
  4002a6:	bd08      	pop	{r3, pc}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	00404029 	.word	0x00404029

004002b0 <system_board_init>:
#  pragma weak board_init=system_board_init
#endif

static void Button1_Handler(uint32_t id, uint32_t mask);
void system_board_init(void)
{
  4002b0:	b570      	push	{r4, r5, r6, lr}
  4002b2:	b082      	sub	sp, #8

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002b8:	4b55      	ldr	r3, [pc, #340]	; (400410 <system_board_init+0x160>)
  4002ba:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002bc:	200b      	movs	r0, #11
  4002be:	4c55      	ldr	r4, [pc, #340]	; (400414 <system_board_init+0x164>)
  4002c0:	47a0      	blx	r4
  4002c2:	200c      	movs	r0, #12
  4002c4:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002c6:	4c54      	ldr	r4, [pc, #336]	; (400418 <system_board_init+0x168>)
  4002c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4002cc:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002ce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4002d2:	6363      	str	r3, [r4, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002d4:	4d51      	ldr	r5, [pc, #324]	; (40041c <system_board_init+0x16c>)
  4002d6:	2302      	movs	r3, #2
  4002d8:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002da:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002de:	632b      	str	r3, [r5, #48]	; 0x30

	/* Initialize SW0 */
	//ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);

	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  4002e0:	4628      	mov	r0, r5
  4002e2:	2101      	movs	r1, #1
  4002e4:	220a      	movs	r2, #10
  4002e6:	4b4e      	ldr	r3, [pc, #312]	; (400420 <system_board_init+0x170>)
  4002e8:	4798      	blx	r3
	/* Interrupt on rising edge  */
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  4002ea:	4b4e      	ldr	r3, [pc, #312]	; (400424 <system_board_init+0x174>)
  4002ec:	9300      	str	r3, [sp, #0]
  4002ee:	4628      	mov	r0, r5
  4002f0:	210c      	movs	r1, #12
  4002f2:	2201      	movs	r2, #1
  4002f4:	2359      	movs	r3, #89	; 0x59
  4002f6:	4e4c      	ldr	r6, [pc, #304]	; (400428 <system_board_init+0x178>)
  4002f8:	47b0      	blx	r6
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002fa:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  4002fe:	4b4b      	ldr	r3, [pc, #300]	; (40042c <system_board_init+0x17c>)
  400300:	601e      	str	r6, [r3, #0]
	PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO,
  400302:	4628      	mov	r0, r5
  400304:	210c      	movs	r1, #12
  400306:	2200      	movs	r2, #0
  400308:	4b49      	ldr	r3, [pc, #292]	; (400430 <system_board_init+0x180>)
  40030a:	4798      	blx	r3
	(IRQn_Type) PIN_PUSHBUTTON_1_ID, 0);
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  40030c:	4628      	mov	r0, r5
  40030e:	2101      	movs	r1, #1
  400310:	4b48      	ldr	r3, [pc, #288]	; (400434 <system_board_init+0x184>)
  400312:	4798      	blx	r3
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400314:	f44f 7340 	mov.w	r3, #768	; 0x300
  400318:	662b      	str	r3, [r5, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40031a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40031e:	656b      	str	r3, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400320:	626b      	str	r3, [r5, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400322:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400326:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400328:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  40032c:	672a      	str	r2, [r5, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40032e:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400330:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  400334:	676a      	str	r2, [r5, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400336:	606b      	str	r3, [r5, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400338:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  40033c:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40033e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400342:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400344:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400346:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40034a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40034c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  400350:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400352:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400354:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  400358:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40035a:	6063      	str	r3, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40035c:	2318      	movs	r3, #24
  40035e:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400360:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400364:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400366:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400368:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40036c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40036e:	f022 0218 	bic.w	r2, r2, #24
  400372:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400374:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400376:	f022 0218 	bic.w	r2, r2, #24
  40037a:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40037c:	6063      	str	r3, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40037e:	6626      	str	r6, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400380:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400384:	6566      	str	r6, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400386:	6266      	str	r6, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400388:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40038c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40038e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400392:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400394:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40039a:	6763      	str	r3, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40039c:	6066      	str	r6, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40039e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4003a2:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003a4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003a8:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003aa:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003ac:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003b0:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4003b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4003b6:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003b8:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4003ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4003be:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003c0:	6063      	str	r3, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4003c6:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003c8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003cc:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003ce:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003d0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003d4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4003d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  4003da:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003dc:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4003de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  4003e2:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003e4:	6063      	str	r3, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ea:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003ec:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003f0:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003f2:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003f4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003f8:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4003fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4003fe:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400400:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  400406:	6762      	str	r2, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400408:	6063      	str	r3, [r4, #4]
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif
}
  40040a:	b002      	add	sp, #8
  40040c:	bd70      	pop	{r4, r5, r6, pc}
  40040e:	bf00      	nop
  400410:	400e1450 	.word	0x400e1450
  400414:	00400841 	.word	0x00400841
  400418:	400e0e00 	.word	0x400e0e00
  40041c:	400e1000 	.word	0x400e1000
  400420:	004005e1 	.word	0x004005e1
  400424:	00400299 	.word	0x00400299
  400428:	00400691 	.word	0x00400691
  40042c:	e000e100 	.word	0xe000e100
  400430:	004006f9 	.word	0x004006f9
  400434:	0040062d 	.word	0x0040062d

00400438 <flexcom_enable>:
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  400438:	b508      	push	{r3, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40043a:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40043e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400440:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400444:	2100      	movs	r1, #0
  400446:	4a4a      	ldr	r2, [pc, #296]	; (400570 <flexcom_enable+0x138>)
  400448:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40044a:	494a      	ldr	r1, [pc, #296]	; (400574 <flexcom_enable+0x13c>)
  40044c:	780a      	ldrb	r2, [r1, #0]
  40044e:	3201      	adds	r2, #1
  400450:	700a      	strb	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400452:	b92b      	cbnz	r3, 400460 <flexcom_enable+0x28>
		cpu_irq_enable();
  400454:	2201      	movs	r2, #1
  400456:	4b46      	ldr	r3, [pc, #280]	; (400570 <flexcom_enable+0x138>)
  400458:	701a      	strb	r2, [r3, #0]
  40045a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40045e:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  400460:	4b45      	ldr	r3, [pc, #276]	; (400578 <flexcom_enable+0x140>)
  400462:	4298      	cmp	r0, r3
  400464:	d10d      	bne.n	400482 <flexcom_enable+0x4a>
  400466:	2007      	movs	r0, #7
  400468:	4b44      	ldr	r3, [pc, #272]	; (40057c <flexcom_enable+0x144>)
  40046a:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  40046c:	2007      	movs	r0, #7
  40046e:	4b44      	ldr	r3, [pc, #272]	; (400580 <flexcom_enable+0x148>)
  400470:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  400472:	2007      	movs	r0, #7
  400474:	2100      	movs	r1, #0
  400476:	4b43      	ldr	r3, [pc, #268]	; (400584 <flexcom_enable+0x14c>)
  400478:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  40047a:	2007      	movs	r0, #7
  40047c:	4b42      	ldr	r3, [pc, #264]	; (400588 <flexcom_enable+0x150>)
  40047e:	4798      	blx	r3
  400480:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM6
	if (p_flexcom == FLEXCOM6) {
  400482:	4b42      	ldr	r3, [pc, #264]	; (40058c <flexcom_enable+0x154>)
  400484:	4298      	cmp	r0, r3
  400486:	d10d      	bne.n	4004a4 <flexcom_enable+0x6c>
  400488:	2016      	movs	r0, #22
  40048a:	4b3c      	ldr	r3, [pc, #240]	; (40057c <flexcom_enable+0x144>)
  40048c:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  40048e:	2007      	movs	r0, #7
  400490:	4b3b      	ldr	r3, [pc, #236]	; (400580 <flexcom_enable+0x148>)
  400492:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  400494:	2007      	movs	r0, #7
  400496:	2100      	movs	r1, #0
  400498:	4b3a      	ldr	r3, [pc, #232]	; (400584 <flexcom_enable+0x14c>)
  40049a:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  40049c:	2007      	movs	r0, #7
  40049e:	4b3a      	ldr	r3, [pc, #232]	; (400588 <flexcom_enable+0x150>)
  4004a0:	4798      	blx	r3
  4004a2:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM5
	if (p_flexcom == FLEXCOM5) {
  4004a4:	4b3a      	ldr	r3, [pc, #232]	; (400590 <flexcom_enable+0x158>)
  4004a6:	4298      	cmp	r0, r3
  4004a8:	d10d      	bne.n	4004c6 <flexcom_enable+0x8e>
  4004aa:	2015      	movs	r0, #21
  4004ac:	4b33      	ldr	r3, [pc, #204]	; (40057c <flexcom_enable+0x144>)
  4004ae:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  4004b0:	2007      	movs	r0, #7
  4004b2:	4b33      	ldr	r3, [pc, #204]	; (400580 <flexcom_enable+0x148>)
  4004b4:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4004b6:	2007      	movs	r0, #7
  4004b8:	2100      	movs	r1, #0
  4004ba:	4b32      	ldr	r3, [pc, #200]	; (400584 <flexcom_enable+0x14c>)
  4004bc:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4004be:	2007      	movs	r0, #7
  4004c0:	4b31      	ldr	r3, [pc, #196]	; (400588 <flexcom_enable+0x150>)
  4004c2:	4798      	blx	r3
  4004c4:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM4
	if (p_flexcom == FLEXCOM4) {
  4004c6:	4b33      	ldr	r3, [pc, #204]	; (400594 <flexcom_enable+0x15c>)
  4004c8:	4298      	cmp	r0, r3
  4004ca:	d10d      	bne.n	4004e8 <flexcom_enable+0xb0>
  4004cc:	2014      	movs	r0, #20
  4004ce:	4b2b      	ldr	r3, [pc, #172]	; (40057c <flexcom_enable+0x144>)
  4004d0:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  4004d2:	2007      	movs	r0, #7
  4004d4:	4b2a      	ldr	r3, [pc, #168]	; (400580 <flexcom_enable+0x148>)
  4004d6:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4004d8:	2007      	movs	r0, #7
  4004da:	2100      	movs	r1, #0
  4004dc:	4b29      	ldr	r3, [pc, #164]	; (400584 <flexcom_enable+0x14c>)
  4004de:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4004e0:	2007      	movs	r0, #7
  4004e2:	4b29      	ldr	r3, [pc, #164]	; (400588 <flexcom_enable+0x150>)
  4004e4:	4798      	blx	r3
  4004e6:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM3
	if (p_flexcom == FLEXCOM3) {
  4004e8:	4b2b      	ldr	r3, [pc, #172]	; (400598 <flexcom_enable+0x160>)
  4004ea:	4298      	cmp	r0, r3
  4004ec:	d10d      	bne.n	40050a <flexcom_enable+0xd2>
  4004ee:	2013      	movs	r0, #19
  4004f0:	4b22      	ldr	r3, [pc, #136]	; (40057c <flexcom_enable+0x144>)
  4004f2:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  4004f4:	2006      	movs	r0, #6
  4004f6:	4b22      	ldr	r3, [pc, #136]	; (400580 <flexcom_enable+0x148>)
  4004f8:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4004fa:	2006      	movs	r0, #6
  4004fc:	2100      	movs	r1, #0
  4004fe:	4b21      	ldr	r3, [pc, #132]	; (400584 <flexcom_enable+0x14c>)
  400500:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400502:	2006      	movs	r0, #6
  400504:	4b20      	ldr	r3, [pc, #128]	; (400588 <flexcom_enable+0x150>)
  400506:	4798      	blx	r3
  400508:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM2
	if (p_flexcom == FLEXCOM2) {
  40050a:	4b24      	ldr	r3, [pc, #144]	; (40059c <flexcom_enable+0x164>)
  40050c:	4298      	cmp	r0, r3
  40050e:	d10d      	bne.n	40052c <flexcom_enable+0xf4>
  400510:	200e      	movs	r0, #14
  400512:	4b1a      	ldr	r3, [pc, #104]	; (40057c <flexcom_enable+0x144>)
  400514:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  400516:	2006      	movs	r0, #6
  400518:	4b19      	ldr	r3, [pc, #100]	; (400580 <flexcom_enable+0x148>)
  40051a:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40051c:	2006      	movs	r0, #6
  40051e:	2100      	movs	r1, #0
  400520:	4b18      	ldr	r3, [pc, #96]	; (400584 <flexcom_enable+0x14c>)
  400522:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400524:	2006      	movs	r0, #6
  400526:	4b18      	ldr	r3, [pc, #96]	; (400588 <flexcom_enable+0x150>)
  400528:	4798      	blx	r3
  40052a:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM1
	if (p_flexcom == FLEXCOM1) {
  40052c:	4b1c      	ldr	r3, [pc, #112]	; (4005a0 <flexcom_enable+0x168>)
  40052e:	4298      	cmp	r0, r3
  400530:	d10d      	bne.n	40054e <flexcom_enable+0x116>
  400532:	2009      	movs	r0, #9
  400534:	4b11      	ldr	r3, [pc, #68]	; (40057c <flexcom_enable+0x144>)
  400536:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  400538:	2006      	movs	r0, #6
  40053a:	4b11      	ldr	r3, [pc, #68]	; (400580 <flexcom_enable+0x148>)
  40053c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40053e:	2006      	movs	r0, #6
  400540:	2100      	movs	r1, #0
  400542:	4b10      	ldr	r3, [pc, #64]	; (400584 <flexcom_enable+0x14c>)
  400544:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400546:	2006      	movs	r0, #6
  400548:	4b0f      	ldr	r3, [pc, #60]	; (400588 <flexcom_enable+0x150>)
  40054a:	4798      	blx	r3
  40054c:	bd08      	pop	{r3, pc}
	} else
#endif
#ifdef ID_FLEXCOM0
	if (p_flexcom == FLEXCOM0) {
  40054e:	4b15      	ldr	r3, [pc, #84]	; (4005a4 <flexcom_enable+0x16c>)
  400550:	4298      	cmp	r0, r3
  400552:	d10c      	bne.n	40056e <flexcom_enable+0x136>
  400554:	2008      	movs	r0, #8
  400556:	4b09      	ldr	r3, [pc, #36]	; (40057c <flexcom_enable+0x144>)
  400558:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  40055a:	2006      	movs	r0, #6
  40055c:	4b08      	ldr	r3, [pc, #32]	; (400580 <flexcom_enable+0x148>)
  40055e:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  400560:	2006      	movs	r0, #6
  400562:	2100      	movs	r1, #0
  400564:	4b07      	ldr	r3, [pc, #28]	; (400584 <flexcom_enable+0x14c>)
  400566:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400568:	2006      	movs	r0, #6
  40056a:	4b07      	ldr	r3, [pc, #28]	; (400588 <flexcom_enable+0x150>)
  40056c:	4798      	blx	r3
  40056e:	bd08      	pop	{r3, pc}
  400570:	2000000c 	.word	0x2000000c
  400574:	2001bc50 	.word	0x2001bc50
  400578:	40034000 	.word	0x40034000
  40057c:	00400841 	.word	0x00400841
  400580:	004008e9 	.word	0x004008e9
  400584:	00400895 	.word	0x00400895
  400588:	004008d9 	.word	0x004008d9
  40058c:	40040000 	.word	0x40040000
  400590:	40008000 	.word	0x40008000
  400594:	4001c000 	.word	0x4001c000
  400598:	40018000 	.word	0x40018000
  40059c:	40024000 	.word	0x40024000
  4005a0:	40020000 	.word	0x40020000
  4005a4:	4000c000 	.word	0x4000c000

004005a8 <flexcom_set_opmode>:
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
	p_flexcom->FLEXCOM_MR = opmode;
  4005a8:	6001      	str	r1, [r0, #0]
  4005aa:	4770      	bx	lr

004005ac <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4005ac:	460b      	mov	r3, r1
  4005ae:	b119      	cbz	r1, 4005b8 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  4005b0:	6809      	ldr	r1, [r1, #0]
  4005b2:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  4005b4:	685b      	ldr	r3, [r3, #4]
  4005b6:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
  4005b8:	b11a      	cbz	r2, 4005c2 <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  4005ba:	6813      	ldr	r3, [r2, #0]
  4005bc:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  4005be:	6853      	ldr	r3, [r2, #4]
  4005c0:	61c3      	str	r3, [r0, #28]
  4005c2:	4770      	bx	lr

004005c4 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  4005c4:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  4005c8:	05c9      	lsls	r1, r1, #23
  4005ca:	0dc9      	lsrs	r1, r1, #23
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  4005cc:	6201      	str	r1, [r0, #32]
  4005ce:	4770      	bx	lr

004005d0 <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  4005d0:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  4005d4:	f021 0101 	bic.w	r1, r1, #1
  4005d8:	0589      	lsls	r1, r1, #22
  4005da:	0d89      	lsrs	r1, r1, #22
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  4005dc:	6201      	str	r1, [r0, #32]
  4005de:	4770      	bx	lr

004005e0 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4005e0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4005e4:	0052      	lsls	r2, r2, #1
  4005e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4005ea:	fbb3 f2f2 	udiv	r2, r3, r2
  4005ee:	3a01      	subs	r2, #1
  4005f0:	f3c2 020d 	ubfx	r2, r2, #0, #14
  4005f4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  4005f8:	4770      	bx	lr
  4005fa:	bf00      	nop

004005fc <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4005fc:	f012 0f10 	tst.w	r2, #16
  400600:	d010      	beq.n	400624 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400602:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400606:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40060a:	bf14      	ite	ne
  40060c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400610:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400614:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400618:	bf14      	ite	ne
  40061a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40061e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400622:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400624:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400628:	4770      	bx	lr
  40062a:	bf00      	nop

0040062c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  40062c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  40062e:	6401      	str	r1, [r0, #64]	; 0x40
  400630:	4770      	bx	lr
  400632:	bf00      	nop

00400634 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400634:	6441      	str	r1, [r0, #68]	; 0x44
  400636:	4770      	bx	lr

00400638 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400638:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40063a:	4770      	bx	lr

0040063c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40063c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40063e:	4770      	bx	lr

00400640 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400644:	4604      	mov	r4, r0
  400646:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400648:	4b0e      	ldr	r3, [pc, #56]	; (400684 <pio_handler_process+0x44>)
  40064a:	4798      	blx	r3
  40064c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40064e:	4620      	mov	r0, r4
  400650:	4b0d      	ldr	r3, [pc, #52]	; (400688 <pio_handler_process+0x48>)
  400652:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400654:	4005      	ands	r5, r0
  400656:	d013      	beq.n	400680 <pio_handler_process+0x40>
  400658:	4c0c      	ldr	r4, [pc, #48]	; (40068c <pio_handler_process+0x4c>)
  40065a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40065e:	6823      	ldr	r3, [r4, #0]
  400660:	4543      	cmp	r3, r8
  400662:	d108      	bne.n	400676 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400664:	6861      	ldr	r1, [r4, #4]
  400666:	4229      	tst	r1, r5
  400668:	d005      	beq.n	400676 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40066a:	68e3      	ldr	r3, [r4, #12]
  40066c:	4640      	mov	r0, r8
  40066e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400670:	6863      	ldr	r3, [r4, #4]
  400672:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400676:	42b4      	cmp	r4, r6
  400678:	d002      	beq.n	400680 <pio_handler_process+0x40>
  40067a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40067c:	2d00      	cmp	r5, #0
  40067e:	d1ee      	bne.n	40065e <pio_handler_process+0x1e>
  400680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400684:	00400639 	.word	0x00400639
  400688:	0040063d 	.word	0x0040063d
  40068c:	200008b8 	.word	0x200008b8

00400690 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400692:	4c0c      	ldr	r4, [pc, #48]	; (4006c4 <pio_handler_set+0x34>)
  400694:	6824      	ldr	r4, [r4, #0]
  400696:	2c06      	cmp	r4, #6
  400698:	d811      	bhi.n	4006be <pio_handler_set+0x2e>
  40069a:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  40069c:	4f0a      	ldr	r7, [pc, #40]	; (4006c8 <pio_handler_set+0x38>)
  40069e:	0122      	lsls	r2, r4, #4
  4006a0:	18be      	adds	r6, r7, r2
  4006a2:	50b9      	str	r1, [r7, r2]
	pSource->mask = ul_mask;
  4006a4:	6075      	str	r5, [r6, #4]
	pSource->attr = ul_attr;
  4006a6:	60b3      	str	r3, [r6, #8]
	pSource->handler = p_handler;
  4006a8:	9a06      	ldr	r2, [sp, #24]
  4006aa:	60f2      	str	r2, [r6, #12]
	gs_ul_nb_sources++;
  4006ac:	3401      	adds	r4, #1
  4006ae:	4a05      	ldr	r2, [pc, #20]	; (4006c4 <pio_handler_set+0x34>)
  4006b0:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006b2:	4629      	mov	r1, r5
  4006b4:	461a      	mov	r2, r3
  4006b6:	4b05      	ldr	r3, [pc, #20]	; (4006cc <pio_handler_set+0x3c>)
  4006b8:	4798      	blx	r3

	return 0;
  4006ba:	2000      	movs	r0, #0
  4006bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4006be:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4006c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006c2:	bf00      	nop
  4006c4:	200008b4 	.word	0x200008b4
  4006c8:	200008b8 	.word	0x200008b8
  4006cc:	004005fd 	.word	0x004005fd

004006d0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4006d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4006d2:	4802      	ldr	r0, [pc, #8]	; (4006dc <PIOA_Handler+0xc>)
  4006d4:	210b      	movs	r1, #11
  4006d6:	4b02      	ldr	r3, [pc, #8]	; (4006e0 <PIOA_Handler+0x10>)
  4006d8:	4798      	blx	r3
  4006da:	bd08      	pop	{r3, pc}
  4006dc:	400e0e00 	.word	0x400e0e00
  4006e0:	00400641 	.word	0x00400641

004006e4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4006e4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4006e6:	4802      	ldr	r0, [pc, #8]	; (4006f0 <PIOB_Handler+0xc>)
  4006e8:	210c      	movs	r1, #12
  4006ea:	4b02      	ldr	r3, [pc, #8]	; (4006f4 <PIOB_Handler+0x10>)
  4006ec:	4798      	blx	r3
  4006ee:	bd08      	pop	{r3, pc}
  4006f0:	400e1000 	.word	0x400e1000
  4006f4:	00400641 	.word	0x00400641

004006f8 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4006f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006fa:	4605      	mov	r5, r0
  4006fc:	460c      	mov	r4, r1
  4006fe:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  400700:	4b18      	ldr	r3, [pc, #96]	; (400764 <pio_handler_set_priority+0x6c>)
  400702:	4798      	blx	r3
  400704:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400706:	4628      	mov	r0, r5
  400708:	f04f 31ff 	mov.w	r1, #4294967295
  40070c:	4b16      	ldr	r3, [pc, #88]	; (400768 <pio_handler_set_priority+0x70>)
  40070e:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400710:	4628      	mov	r0, r5
  400712:	4b16      	ldr	r3, [pc, #88]	; (40076c <pio_handler_set_priority+0x74>)
  400714:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400716:	b2e2      	uxtb	r2, r4
  400718:	f002 031f 	and.w	r3, r2, #31
  40071c:	2101      	movs	r1, #1
  40071e:	4099      	lsls	r1, r3
  400720:	0963      	lsrs	r3, r4, #5
  400722:	009b      	lsls	r3, r3, #2
  400724:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  400728:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  40072c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400730:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400734:	2c00      	cmp	r4, #0
  400736:	da06      	bge.n	400746 <pio_handler_set_priority+0x4e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400738:	f002 020f 	and.w	r2, r2, #15
  40073c:	013f      	lsls	r7, r7, #4
  40073e:	b2ff      	uxtb	r7, r7
  400740:	480b      	ldr	r0, [pc, #44]	; (400770 <pio_handler_set_priority+0x78>)
  400742:	5487      	strb	r7, [r0, r2]
  400744:	e007      	b.n	400756 <pio_handler_set_priority+0x5e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400746:	013f      	lsls	r7, r7, #4
  400748:	b2ff      	uxtb	r7, r7
  40074a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  40074e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  400752:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400756:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  400758:	4628      	mov	r0, r5
  40075a:	4631      	mov	r1, r6
  40075c:	4b05      	ldr	r3, [pc, #20]	; (400774 <pio_handler_set_priority+0x7c>)
  40075e:	4798      	blx	r3
  400760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400762:	bf00      	nop
  400764:	0040063d 	.word	0x0040063d
  400768:	00400635 	.word	0x00400635
  40076c:	00400639 	.word	0x00400639
  400770:	e000ed14 	.word	0xe000ed14
  400774:	0040062d 	.word	0x0040062d

00400778 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400778:	4a18      	ldr	r2, [pc, #96]	; (4007dc <pmc_switch_mck_to_pllack+0x64>)
  40077a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40077c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400780:	4318      	orrs	r0, r3
  400782:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400784:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400786:	f013 0f08 	tst.w	r3, #8
  40078a:	d003      	beq.n	400794 <pmc_switch_mck_to_pllack+0x1c>
  40078c:	e009      	b.n	4007a2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40078e:	3b01      	subs	r3, #1
  400790:	d103      	bne.n	40079a <pmc_switch_mck_to_pllack+0x22>
  400792:	e01e      	b.n	4007d2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400794:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400798:	4910      	ldr	r1, [pc, #64]	; (4007dc <pmc_switch_mck_to_pllack+0x64>)
  40079a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40079c:	f012 0f08 	tst.w	r2, #8
  4007a0:	d0f5      	beq.n	40078e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007a2:	4a0e      	ldr	r2, [pc, #56]	; (4007dc <pmc_switch_mck_to_pllack+0x64>)
  4007a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007a6:	f023 0303 	bic.w	r3, r3, #3
  4007aa:	f043 0302 	orr.w	r3, r3, #2
  4007ae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007b0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4007b2:	f010 0008 	ands.w	r0, r0, #8
  4007b6:	d004      	beq.n	4007c2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4007b8:	2000      	movs	r0, #0
  4007ba:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007bc:	3b01      	subs	r3, #1
  4007be:	d103      	bne.n	4007c8 <pmc_switch_mck_to_pllack+0x50>
  4007c0:	e009      	b.n	4007d6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007c6:	4905      	ldr	r1, [pc, #20]	; (4007dc <pmc_switch_mck_to_pllack+0x64>)
  4007c8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007ca:	f012 0f08 	tst.w	r2, #8
  4007ce:	d0f5      	beq.n	4007bc <pmc_switch_mck_to_pllack+0x44>
  4007d0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007d2:	2001      	movs	r0, #1
  4007d4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007d6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007d8:	4770      	bx	lr
  4007da:	bf00      	nop
  4007dc:	400e0400 	.word	0x400e0400

004007e0 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4007e0:	2801      	cmp	r0, #1
  4007e2:	d106      	bne.n	4007f2 <pmc_switch_sclk_to_32kxtal+0x12>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4007e4:	4a05      	ldr	r2, [pc, #20]	; (4007fc <pmc_switch_sclk_to_32kxtal+0x1c>)
  4007e6:	6893      	ldr	r3, [r2, #8]
  4007e8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4007ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4007f0:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4007f2:	4a03      	ldr	r2, [pc, #12]	; (400800 <pmc_switch_sclk_to_32kxtal+0x20>)
  4007f4:	4b01      	ldr	r3, [pc, #4]	; (4007fc <pmc_switch_sclk_to_32kxtal+0x1c>)
  4007f6:	601a      	str	r2, [r3, #0]
  4007f8:	4770      	bx	lr
  4007fa:	bf00      	nop
  4007fc:	400e1410 	.word	0x400e1410
  400800:	a5000008 	.word	0xa5000008

00400804 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400804:	4b05      	ldr	r3, [pc, #20]	; (40081c <pmc_osc_is_ready_32kxtal+0x18>)
  400806:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400808:	f013 0f80 	tst.w	r3, #128	; 0x80
  40080c:	bf1d      	ittte	ne
  40080e:	4b04      	ldrne	r3, [pc, #16]	; (400820 <pmc_osc_is_ready_32kxtal+0x1c>)
  400810:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  400812:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  400816:	2000      	moveq	r0, #0
}
  400818:	4770      	bx	lr
  40081a:	bf00      	nop
  40081c:	400e1410 	.word	0x400e1410
  400820:	400e0400 	.word	0x400e0400

00400824 <pmc_disable_pllack>:
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  400824:	2200      	movs	r2, #0
  400826:	4b01      	ldr	r3, [pc, #4]	; (40082c <pmc_disable_pllack+0x8>)
  400828:	629a      	str	r2, [r3, #40]	; 0x28
  40082a:	4770      	bx	lr
  40082c:	400e0400 	.word	0x400e0400

00400830 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400830:	4b02      	ldr	r3, [pc, #8]	; (40083c <pmc_is_locked_pllack+0xc>)
  400832:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400834:	f000 0002 	and.w	r0, r0, #2
  400838:	4770      	bx	lr
  40083a:	bf00      	nop
  40083c:	400e0400 	.word	0x400e0400

00400840 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400840:	2832      	cmp	r0, #50	; 0x32
  400842:	d81e      	bhi.n	400882 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400844:	281f      	cmp	r0, #31
  400846:	d80c      	bhi.n	400862 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400848:	4b11      	ldr	r3, [pc, #68]	; (400890 <pmc_enable_periph_clk+0x50>)
  40084a:	699a      	ldr	r2, [r3, #24]
  40084c:	2301      	movs	r3, #1
  40084e:	4083      	lsls	r3, r0
  400850:	401a      	ands	r2, r3
  400852:	4293      	cmp	r3, r2
  400854:	d017      	beq.n	400886 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400856:	2301      	movs	r3, #1
  400858:	4083      	lsls	r3, r0
  40085a:	4a0d      	ldr	r2, [pc, #52]	; (400890 <pmc_enable_periph_clk+0x50>)
  40085c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40085e:	2000      	movs	r0, #0
  400860:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400862:	4b0b      	ldr	r3, [pc, #44]	; (400890 <pmc_enable_periph_clk+0x50>)
  400864:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
  400868:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40086a:	2301      	movs	r3, #1
  40086c:	4083      	lsls	r3, r0
  40086e:	401a      	ands	r2, r3
  400870:	4293      	cmp	r3, r2
  400872:	d00a      	beq.n	40088a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400874:	2301      	movs	r3, #1
  400876:	4083      	lsls	r3, r0
  400878:	4a05      	ldr	r2, [pc, #20]	; (400890 <pmc_enable_periph_clk+0x50>)
  40087a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40087e:	2000      	movs	r0, #0
  400880:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400882:	2001      	movs	r0, #1
  400884:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400886:	2000      	movs	r0, #0
  400888:	4770      	bx	lr
  40088a:	2000      	movs	r0, #0
}
  40088c:	4770      	bx	lr
  40088e:	bf00      	nop
  400890:	400e0400 	.word	0x400e0400

00400894 <pmc_switch_pck_to_mck>:
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  400894:	f041 0104 	orr.w	r1, r1, #4
  400898:	4b0e      	ldr	r3, [pc, #56]	; (4008d4 <pmc_switch_pck_to_mck+0x40>)
  40089a:	f100 0210 	add.w	r2, r0, #16
  40089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4008a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008a4:	f44f 7180 	mov.w	r1, #256	; 0x100
  4008a8:	4081      	lsls	r1, r0
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  4008aa:	ea11 0003 	ands.w	r0, r1, r3
  4008ae:	d004      	beq.n	4008ba <pmc_switch_pck_to_mck+0x26>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4008b0:	2000      	movs	r0, #0
}
  4008b2:	4770      	bx	lr
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  4008b4:	3b01      	subs	r3, #1
  4008b6:	d104      	bne.n	4008c2 <pmc_switch_pck_to_mck+0x2e>
  4008b8:	e007      	b.n	4008ca <pmc_switch_pck_to_mck+0x36>
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
  4008ba:	b410      	push	{r4}
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  4008bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4008c0:	4c04      	ldr	r4, [pc, #16]	; (4008d4 <pmc_switch_pck_to_mck+0x40>)
  4008c2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  4008c4:	4211      	tst	r1, r2
  4008c6:	d0f5      	beq.n	4008b4 <pmc_switch_pck_to_mck+0x20>
  4008c8:	e000      	b.n	4008cc <pmc_switch_pck_to_mck+0x38>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4008ca:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4008cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008d0:	4770      	bx	lr
  4008d2:	bf00      	nop
  4008d4:	400e0400 	.word	0x400e0400

004008d8 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4008d8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4008dc:	4083      	lsls	r3, r0
  4008de:	4a01      	ldr	r2, [pc, #4]	; (4008e4 <pmc_enable_pck+0xc>)
  4008e0:	6013      	str	r3, [r2, #0]
  4008e2:	4770      	bx	lr
  4008e4:	400e0400 	.word	0x400e0400

004008e8 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  4008e8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4008ec:	4083      	lsls	r3, r0
  4008ee:	4a01      	ldr	r2, [pc, #4]	; (4008f4 <pmc_disable_pck+0xc>)
  4008f0:	6053      	str	r3, [r2, #4]
  4008f2:	4770      	bx	lr
  4008f4:	400e0400 	.word	0x400e0400

004008f8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4008f8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4008fa:	010b      	lsls	r3, r1, #4
  4008fc:	4293      	cmp	r3, r2
  4008fe:	d90f      	bls.n	400920 <usart_set_async_baudrate+0x28>
  400900:	e01c      	b.n	40093c <usart_set_async_baudrate+0x44>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
  400902:	f002 0207 	and.w	r2, r2, #7
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400906:	6841      	ldr	r1, [r0, #4]
  400908:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40090c:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40090e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  400912:	6202      	str	r2, [r0, #32]

	return 0;
  400914:	2000      	movs	r0, #0
  400916:	e01e      	b.n	400956 <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  400918:	2001      	movs	r0, #1
  40091a:	e01c      	b.n	400956 <usart_set_async_baudrate+0x5e>
  40091c:	2001      	movs	r0, #1
  40091e:	e01a      	b.n	400956 <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400920:	00d2      	lsls	r2, r2, #3
  400922:	eb02 0253 	add.w	r2, r2, r3, lsr #1
  400926:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40092a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40092c:	1e5c      	subs	r4, r3, #1
  40092e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400932:	428c      	cmp	r4, r1
  400934:	d8f0      	bhi.n	400918 <usart_set_async_baudrate+0x20>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
  400936:	f002 0207 	and.w	r2, r2, #7
  40093a:	e7e8      	b.n	40090e <usart_set_async_baudrate+0x16>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40093c:	00c9      	lsls	r1, r1, #3
  40093e:	00d2      	lsls	r2, r2, #3
  400940:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  400944:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400948:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40094a:	1e5c      	subs	r4, r3, #1
  40094c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400950:	428c      	cmp	r4, r1
  400952:	d9d6      	bls.n	400902 <usart_set_async_baudrate+0xa>
  400954:	e7e2      	b.n	40091c <usart_set_async_baudrate+0x24>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  400956:	f85d 4b04 	ldr.w	r4, [sp], #4
  40095a:	4770      	bx	lr

0040095c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40095c:	4b08      	ldr	r3, [pc, #32]	; (400980 <usart_reset+0x24>)
  40095e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400962:	2300      	movs	r3, #0
  400964:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400966:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400968:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40096a:	2388      	movs	r3, #136	; 0x88
  40096c:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40096e:	2324      	movs	r3, #36	; 0x24
  400970:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  400972:	f44f 7380 	mov.w	r3, #256	; 0x100
  400976:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  400978:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40097c:	6003      	str	r3, [r0, #0]
  40097e:	4770      	bx	lr
  400980:	55534100 	.word	0x55534100

00400984 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400984:	b570      	push	{r4, r5, r6, lr}
  400986:	4605      	mov	r5, r0
  400988:	460c      	mov	r4, r1
  40098a:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40098c:	4b0f      	ldr	r3, [pc, #60]	; (4009cc <usart_init_rs232+0x48>)
  40098e:	4798      	blx	r3

	ul_reg_val = 0;
  400990:	2200      	movs	r2, #0
  400992:	4b0f      	ldr	r3, [pc, #60]	; (4009d0 <usart_init_rs232+0x4c>)
  400994:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400996:	b19c      	cbz	r4, 4009c0 <usart_init_rs232+0x3c>
  400998:	4628      	mov	r0, r5
  40099a:	6821      	ldr	r1, [r4, #0]
  40099c:	4632      	mov	r2, r6
  40099e:	4b0d      	ldr	r3, [pc, #52]	; (4009d4 <usart_init_rs232+0x50>)
  4009a0:	4798      	blx	r3
  4009a2:	4602      	mov	r2, r0
  4009a4:	b970      	cbnz	r0, 4009c4 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009a6:	68a1      	ldr	r1, [r4, #8]
  4009a8:	6863      	ldr	r3, [r4, #4]
  4009aa:	4319      	orrs	r1, r3
  4009ac:	6923      	ldr	r3, [r4, #16]
  4009ae:	4319      	orrs	r1, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4009b0:	68e3      	ldr	r3, [r4, #12]
  4009b2:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4009b4:	4906      	ldr	r1, [pc, #24]	; (4009d0 <usart_init_rs232+0x4c>)
  4009b6:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  4009b8:	6869      	ldr	r1, [r5, #4]
  4009ba:	430b      	orrs	r3, r1
  4009bc:	606b      	str	r3, [r5, #4]

	return 0;
  4009be:	e002      	b.n	4009c6 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4009c0:	2201      	movs	r2, #1
  4009c2:	e000      	b.n	4009c6 <usart_init_rs232+0x42>
  4009c4:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4009c6:	4610      	mov	r0, r2
  4009c8:	bd70      	pop	{r4, r5, r6, pc}
  4009ca:	bf00      	nop
  4009cc:	0040095d 	.word	0x0040095d
  4009d0:	20000928 	.word	0x20000928
  4009d4:	004008f9 	.word	0x004008f9

004009d8 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  4009d8:	2340      	movs	r3, #64	; 0x40
  4009da:	6003      	str	r3, [r0, #0]
  4009dc:	4770      	bx	lr
  4009de:	bf00      	nop

004009e0 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  4009e0:	2310      	movs	r3, #16
  4009e2:	6003      	str	r3, [r0, #0]
  4009e4:	4770      	bx	lr
  4009e6:	bf00      	nop

004009e8 <usart_set_rx_timeout>:
 * \param p_usart Pointer to a USART instance.
 * \param timeout The value of receive timeout.
 */
void usart_set_rx_timeout(Usart *p_usart, uint32_t timeout)
{
	p_usart->US_RTOR = timeout;
  4009e8:	6241      	str	r1, [r0, #36]	; 0x24
  4009ea:	4770      	bx	lr

004009ec <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
  4009ec:	6081      	str	r1, [r0, #8]
  4009ee:	4770      	bx	lr

004009f0 <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
  4009f0:	60c1      	str	r1, [r0, #12]
  4009f2:	4770      	bx	lr

004009f4 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
  4009f4:	6940      	ldr	r0, [r0, #20]
}
  4009f6:	4770      	bx	lr

004009f8 <usart_start_rx_timeout>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_start_rx_timeout(Usart *p_usart)
{
	p_usart->US_CR = US_CR_STTTO;
  4009f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4009fc:	6003      	str	r3, [r0, #0]
  4009fe:	4770      	bx	lr

00400a00 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a00:	6943      	ldr	r3, [r0, #20]
  400a02:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400a06:	bf1d      	ittte	ne
  400a08:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400a0c:	61c1      	strne	r1, [r0, #28]
	return 0;
  400a0e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400a10:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400a12:	4770      	bx	lr

00400a14 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a14:	6943      	ldr	r3, [r0, #20]
  400a16:	f013 0f01 	tst.w	r3, #1
  400a1a:	d005      	beq.n	400a28 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a1c:	6983      	ldr	r3, [r0, #24]
  400a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a22:	600b      	str	r3, [r1, #0]

	return 0;
  400a24:	2000      	movs	r0, #0
  400a26:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400a28:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400a2a:	4770      	bx	lr

00400a2c <usart_get_pdc_base>:
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  400a2c:	4b18      	ldr	r3, [pc, #96]	; (400a90 <usart_get_pdc_base+0x64>)
  400a2e:	4298      	cmp	r0, r3
  400a30:	d01f      	beq.n	400a72 <usart_get_pdc_base+0x46>
		p_pdc_base = PDC_USART0;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  400a32:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
  400a36:	4298      	cmp	r0, r3
  400a38:	d01d      	beq.n	400a76 <usart_get_pdc_base+0x4a>
		p_pdc_base = PDC_USART1;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
  400a3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  400a3e:	4298      	cmp	r0, r3
  400a40:	d01b      	beq.n	400a7a <usart_get_pdc_base+0x4e>
		p_pdc_base = PDC_USART2;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART3
	else if (p_usart == USART3) {
  400a42:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
  400a46:	4298      	cmp	r0, r3
  400a48:	d019      	beq.n	400a7e <usart_get_pdc_base+0x52>
		p_pdc_base = PDC_USART3;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART4
	else if (p_usart == USART4) {
  400a4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  400a4e:	4298      	cmp	r0, r3
  400a50:	d017      	beq.n	400a82 <usart_get_pdc_base+0x56>
		p_pdc_base = PDC_USART4;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART5
	else if (p_usart == USART5) {
  400a52:	f5a3 33a0 	sub.w	r3, r3, #81920	; 0x14000
  400a56:	4298      	cmp	r0, r3
  400a58:	d015      	beq.n	400a86 <usart_get_pdc_base+0x5a>
		p_pdc_base = PDC_USART5;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART6
	else if (p_usart == USART6) {
  400a5a:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  400a5e:	4298      	cmp	r0, r3
  400a60:	d013      	beq.n	400a8a <usart_get_pdc_base+0x5e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  400a62:	f5a3 433f 	sub.w	r3, r3, #48896	; 0xbf00
  400a66:	4a0b      	ldr	r2, [pc, #44]	; (400a94 <usart_get_pdc_base+0x68>)
  400a68:	4290      	cmp	r0, r2
  400a6a:	bf0c      	ite	eq
  400a6c:	4618      	moveq	r0, r3
  400a6e:	2000      	movne	r0, #0
  400a70:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
		p_pdc_base = PDC_USART0;
		return p_pdc_base;
  400a72:	4809      	ldr	r0, [pc, #36]	; (400a98 <usart_get_pdc_base+0x6c>)
  400a74:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
		p_pdc_base = PDC_USART1;
		return p_pdc_base;
  400a76:	4809      	ldr	r0, [pc, #36]	; (400a9c <usart_get_pdc_base+0x70>)
  400a78:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
		p_pdc_base = PDC_USART2;
		return p_pdc_base;
  400a7a:	4809      	ldr	r0, [pc, #36]	; (400aa0 <usart_get_pdc_base+0x74>)
  400a7c:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART3
	else if (p_usart == USART3) {
		p_pdc_base = PDC_USART3;
		return p_pdc_base;
  400a7e:	4809      	ldr	r0, [pc, #36]	; (400aa4 <usart_get_pdc_base+0x78>)
  400a80:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART4
	else if (p_usart == USART4) {
		p_pdc_base = PDC_USART4;
		return p_pdc_base;
  400a82:	4809      	ldr	r0, [pc, #36]	; (400aa8 <usart_get_pdc_base+0x7c>)
  400a84:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART5
	else if (p_usart == USART5) {
		p_pdc_base = PDC_USART5;
		return p_pdc_base;
  400a86:	4809      	ldr	r0, [pc, #36]	; (400aac <usart_get_pdc_base+0x80>)
  400a88:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART6
	else if (p_usart == USART6) {
		p_pdc_base = PDC_USART6;
		return p_pdc_base;
  400a8a:	4809      	ldr	r0, [pc, #36]	; (400ab0 <usart_get_pdc_base+0x84>)
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
}
  400a8c:	4770      	bx	lr
  400a8e:	bf00      	nop
  400a90:	4000c200 	.word	0x4000c200
  400a94:	40034200 	.word	0x40034200
  400a98:	4000c300 	.word	0x4000c300
  400a9c:	40020300 	.word	0x40020300
  400aa0:	40024300 	.word	0x40024300
  400aa4:	40018300 	.word	0x40018300
  400aa8:	4001c300 	.word	0x4001c300
  400aac:	40008300 	.word	0x40008300
  400ab0:	40040300 	.word	0x40040300

00400ab4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  400ab4:	e7fe      	b.n	400ab4 <Dummy_Handler>
  400ab6:	bf00      	nop

00400ab8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400ab8:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  400aba:	4b2a      	ldr	r3, [pc, #168]	; (400b64 <Reset_Handler+0xac>)
  400abc:	4a2a      	ldr	r2, [pc, #168]	; (400b68 <Reset_Handler+0xb0>)
  400abe:	429a      	cmp	r2, r3
  400ac0:	d003      	beq.n	400aca <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  400ac2:	4b2a      	ldr	r3, [pc, #168]	; (400b6c <Reset_Handler+0xb4>)
  400ac4:	4a27      	ldr	r2, [pc, #156]	; (400b64 <Reset_Handler+0xac>)
  400ac6:	429a      	cmp	r2, r3
  400ac8:	d304      	bcc.n	400ad4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400aca:	4b29      	ldr	r3, [pc, #164]	; (400b70 <Reset_Handler+0xb8>)
  400acc:	4a29      	ldr	r2, [pc, #164]	; (400b74 <Reset_Handler+0xbc>)
  400ace:	429a      	cmp	r2, r3
  400ad0:	d310      	bcc.n	400af4 <Reset_Handler+0x3c>
  400ad2:	e01b      	b.n	400b0c <Reset_Handler+0x54>
  400ad4:	4923      	ldr	r1, [pc, #140]	; (400b64 <Reset_Handler+0xac>)
  400ad6:	1d0a      	adds	r2, r1, #4
  400ad8:	4b27      	ldr	r3, [pc, #156]	; (400b78 <Reset_Handler+0xc0>)
  400ada:	1a9b      	subs	r3, r3, r2
  400adc:	f023 0303 	bic.w	r3, r3, #3
  400ae0:	3304      	adds	r3, #4
  400ae2:	4a21      	ldr	r2, [pc, #132]	; (400b68 <Reset_Handler+0xb0>)
  400ae4:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  400ae6:	f852 0b04 	ldr.w	r0, [r2], #4
  400aea:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400aee:	429a      	cmp	r2, r3
  400af0:	d1f9      	bne.n	400ae6 <Reset_Handler+0x2e>
  400af2:	e7ea      	b.n	400aca <Reset_Handler+0x12>
  400af4:	4b21      	ldr	r3, [pc, #132]	; (400b7c <Reset_Handler+0xc4>)
  400af6:	4a22      	ldr	r2, [pc, #136]	; (400b80 <Reset_Handler+0xc8>)
  400af8:	1ad2      	subs	r2, r2, r3
  400afa:	f022 0203 	bic.w	r2, r2, #3
  400afe:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400b00:	3b04      	subs	r3, #4
                *pDest++ = 0;
  400b02:	2100      	movs	r1, #0
  400b04:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400b08:	4293      	cmp	r3, r2
  400b0a:	d1fb      	bne.n	400b04 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400b0c:	4b1d      	ldr	r3, [pc, #116]	; (400b84 <Reset_Handler+0xcc>)
  400b0e:	f023 017f 	bic.w	r1, r3, #127	; 0x7f
  400b12:	4a1d      	ldr	r2, [pc, #116]	; (400b88 <Reset_Handler+0xd0>)
  400b14:	6091      	str	r1, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400b16:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400b1a:	b672      	cpsid	i
  400b1c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400b20:	2000      	movs	r0, #0
  400b22:	491a      	ldr	r1, [pc, #104]	; (400b8c <Reset_Handler+0xd4>)
  400b24:	7008      	strb	r0, [r1, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400b26:	481a      	ldr	r0, [pc, #104]	; (400b90 <Reset_Handler+0xd8>)
  400b28:	6801      	ldr	r1, [r0, #0]
  400b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400b2e:	6001      	str	r1, [r0, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400b30:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400b34:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400b38:	b92a      	cbnz	r2, 400b46 <Reset_Handler+0x8e>
		cpu_irq_enable();
  400b3a:	2101      	movs	r1, #1
  400b3c:	4a13      	ldr	r2, [pc, #76]	; (400b8c <Reset_Handler+0xd4>)
  400b3e:	7011      	strb	r1, [r2, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400b40:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400b44:	b662      	cpsie	i

#if __FPU_USED
	fpu_enable();
#endif

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  400b46:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  400b4a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
  400b4e:	d204      	bcs.n	400b5a <Reset_Handler+0xa2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  400b50:	4a0d      	ldr	r2, [pc, #52]	; (400b88 <Reset_Handler+0xd0>)
  400b52:	6893      	ldr	r3, [r2, #8]
  400b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400b58:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  400b5a:	4b0e      	ldr	r3, [pc, #56]	; (400b94 <Reset_Handler+0xdc>)
  400b5c:	4798      	blx	r3

        /* Branch to main function */
        main();
  400b5e:	4b0e      	ldr	r3, [pc, #56]	; (400b98 <Reset_Handler+0xe0>)
  400b60:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400b62:	e7fe      	b.n	400b62 <Reset_Handler+0xaa>
  400b64:	20000000 	.word	0x20000000
  400b68:	00407d2c 	.word	0x00407d2c
  400b6c:	20000894 	.word	0x20000894
  400b70:	2001cf38 	.word	0x2001cf38
  400b74:	20000898 	.word	0x20000898
  400b78:	20000897 	.word	0x20000897
  400b7c:	2000089c 	.word	0x2000089c
  400b80:	2001cf3b 	.word	0x2001cf3b
  400b84:	00400000 	.word	0x00400000
  400b88:	e000ed00 	.word	0xe000ed00
  400b8c:	2000000c 	.word	0x2000000c
  400b90:	e000ed88 	.word	0xe000ed88
  400b94:	00404479 	.word	0x00404479
  400b98:	00404259 	.word	0x00404259

00400b9c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400b9c:	4b31      	ldr	r3, [pc, #196]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ba0:	f003 0303 	and.w	r3, r3, #3
  400ba4:	2b01      	cmp	r3, #1
  400ba6:	d00f      	beq.n	400bc8 <SystemCoreClockUpdate+0x2c>
  400ba8:	b113      	cbz	r3, 400bb0 <SystemCoreClockUpdate+0x14>
  400baa:	2b02      	cmp	r3, #2
  400bac:	d029      	beq.n	400c02 <SystemCoreClockUpdate+0x66>
  400bae:	e042      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400bb0:	4b2d      	ldr	r3, [pc, #180]	; (400c68 <SystemCoreClockUpdate+0xcc>)
  400bb2:	695b      	ldr	r3, [r3, #20]
  400bb4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400bb8:	bf14      	ite	ne
  400bba:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400bbe:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400bc2:	4b2a      	ldr	r3, [pc, #168]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400bc4:	601a      	str	r2, [r3, #0]
  400bc6:	e036      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400bc8:	4b26      	ldr	r3, [pc, #152]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400bca:	6a1b      	ldr	r3, [r3, #32]
  400bcc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bd0:	d003      	beq.n	400bda <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400bd2:	4a27      	ldr	r2, [pc, #156]	; (400c70 <SystemCoreClockUpdate+0xd4>)
  400bd4:	4b25      	ldr	r3, [pc, #148]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400bd6:	601a      	str	r2, [r3, #0]
  400bd8:	e02d      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400bda:	4a26      	ldr	r2, [pc, #152]	; (400c74 <SystemCoreClockUpdate+0xd8>)
  400bdc:	4b23      	ldr	r3, [pc, #140]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400bde:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400be0:	4b20      	ldr	r3, [pc, #128]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400be2:	6a1b      	ldr	r3, [r3, #32]
  400be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400be8:	2b10      	cmp	r3, #16
  400bea:	d002      	beq.n	400bf2 <SystemCoreClockUpdate+0x56>
  400bec:	2b20      	cmp	r3, #32
  400bee:	d004      	beq.n	400bfa <SystemCoreClockUpdate+0x5e>
  400bf0:	e021      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
			case CKGR_MOR_MOSCRCF_8_MHz:
				break;
			case CKGR_MOR_MOSCRCF_16_MHz:
				SystemCoreClock *= 2U;
  400bf2:	4a21      	ldr	r2, [pc, #132]	; (400c78 <SystemCoreClockUpdate+0xdc>)
  400bf4:	4b1d      	ldr	r3, [pc, #116]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400bf6:	601a      	str	r2, [r3, #0]
				break;
  400bf8:	e01d      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
			case CKGR_MOR_MOSCRCF_24_MHz:
				SystemCoreClock *= 3U;
  400bfa:	4a20      	ldr	r2, [pc, #128]	; (400c7c <SystemCoreClockUpdate+0xe0>)
  400bfc:	4b1b      	ldr	r3, [pc, #108]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400bfe:	601a      	str	r2, [r3, #0]
				break;
  400c00:	e019      	b.n	400c36 <SystemCoreClockUpdate+0x9a>
				break;
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400c02:	4b19      	ldr	r3, [pc, #100]	; (400c68 <SystemCoreClockUpdate+0xcc>)
  400c04:	695b      	ldr	r3, [r3, #20]
  400c06:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c0a:	bf14      	ite	ne
  400c0c:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c10:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c14:	4b15      	ldr	r3, [pc, #84]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400c16:	601a      	str	r2, [r3, #0]
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  400c18:	4b12      	ldr	r3, [pc, #72]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c1c:	f003 0303 	and.w	r3, r3, #3
  400c20:	2b02      	cmp	r3, #2
  400c22:	d108      	bne.n	400c36 <SystemCoreClockUpdate+0x9a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  400c24:	4b0f      	ldr	r3, [pc, #60]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400c28:	4910      	ldr	r1, [pc, #64]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400c2a:	f3c3 420c 	ubfx	r2, r3, #16, #13
  400c2e:	680b      	ldr	r3, [r1, #0]
  400c30:	fb02 3303 	mla	r3, r2, r3, r3
  400c34:	600b      	str	r3, [r1, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400c36:	4b0b      	ldr	r3, [pc, #44]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c3e:	2b70      	cmp	r3, #112	; 0x70
  400c40:	d107      	bne.n	400c52 <SystemCoreClockUpdate+0xb6>
		SystemCoreClock /= 3U;
  400c42:	4a0a      	ldr	r2, [pc, #40]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400c44:	6813      	ldr	r3, [r2, #0]
  400c46:	490e      	ldr	r1, [pc, #56]	; (400c80 <SystemCoreClockUpdate+0xe4>)
  400c48:	fba1 1303 	umull	r1, r3, r1, r3
  400c4c:	085b      	lsrs	r3, r3, #1
  400c4e:	6013      	str	r3, [r2, #0]
  400c50:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c52:	4b04      	ldr	r3, [pc, #16]	; (400c64 <SystemCoreClockUpdate+0xc8>)
  400c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400c56:	4905      	ldr	r1, [pc, #20]	; (400c6c <SystemCoreClockUpdate+0xd0>)
  400c58:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400c5c:	680b      	ldr	r3, [r1, #0]
  400c5e:	40d3      	lsrs	r3, r2
  400c60:	600b      	str	r3, [r1, #0]
  400c62:	4770      	bx	lr
  400c64:	400e0400 	.word	0x400e0400
  400c68:	400e1410 	.word	0x400e1410
  400c6c:	20000010 	.word	0x20000010
  400c70:	00b71b00 	.word	0x00b71b00
  400c74:	007a1200 	.word	0x007a1200
  400c78:	00f42400 	.word	0x00f42400
  400c7c:	016e3600 	.word	0x016e3600
  400c80:	aaaaaaab 	.word	0xaaaaaaab

00400c84 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  400c84:	4b1d      	ldr	r3, [pc, #116]	; (400cfc <system_init_flash+0x78>)
  400c86:	4298      	cmp	r0, r3
  400c88:	d804      	bhi.n	400c94 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c8e:	4b1c      	ldr	r3, [pc, #112]	; (400d00 <system_init_flash+0x7c>)
  400c90:	601a      	str	r2, [r3, #0]
  400c92:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  400c94:	4b1b      	ldr	r3, [pc, #108]	; (400d04 <system_init_flash+0x80>)
  400c96:	4298      	cmp	r0, r3
  400c98:	d803      	bhi.n	400ca2 <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c9a:	4a1b      	ldr	r2, [pc, #108]	; (400d08 <system_init_flash+0x84>)
  400c9c:	4b18      	ldr	r3, [pc, #96]	; (400d00 <system_init_flash+0x7c>)
  400c9e:	601a      	str	r2, [r3, #0]
  400ca0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  400ca2:	4b1a      	ldr	r3, [pc, #104]	; (400d0c <system_init_flash+0x88>)
  400ca4:	4298      	cmp	r0, r3
  400ca6:	d803      	bhi.n	400cb0 <system_init_flash+0x2c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ca8:	4a19      	ldr	r2, [pc, #100]	; (400d10 <system_init_flash+0x8c>)
  400caa:	4b15      	ldr	r3, [pc, #84]	; (400d00 <system_init_flash+0x7c>)
  400cac:	601a      	str	r2, [r3, #0]
  400cae:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  400cb0:	4b18      	ldr	r3, [pc, #96]	; (400d14 <system_init_flash+0x90>)
  400cb2:	4298      	cmp	r0, r3
  400cb4:	d803      	bhi.n	400cbe <system_init_flash+0x3a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400cb6:	4a18      	ldr	r2, [pc, #96]	; (400d18 <system_init_flash+0x94>)
  400cb8:	4b11      	ldr	r3, [pc, #68]	; (400d00 <system_init_flash+0x7c>)
  400cba:	601a      	str	r2, [r3, #0]
  400cbc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  400cbe:	4b17      	ldr	r3, [pc, #92]	; (400d1c <system_init_flash+0x98>)
  400cc0:	4298      	cmp	r0, r3
  400cc2:	d804      	bhi.n	400cce <system_init_flash+0x4a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400cc4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400cc8:	4b0d      	ldr	r3, [pc, #52]	; (400d00 <system_init_flash+0x7c>)
  400cca:	601a      	str	r2, [r3, #0]
  400ccc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_5) {
  400cce:	4b14      	ldr	r3, [pc, #80]	; (400d20 <system_init_flash+0x9c>)
  400cd0:	4298      	cmp	r0, r3
  400cd2:	d803      	bhi.n	400cdc <system_init_flash+0x58>
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400cd4:	4a13      	ldr	r2, [pc, #76]	; (400d24 <system_init_flash+0xa0>)
  400cd6:	4b0a      	ldr	r3, [pc, #40]	; (400d00 <system_init_flash+0x7c>)
  400cd8:	601a      	str	r2, [r3, #0]
  400cda:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_6) {
  400cdc:	4b12      	ldr	r3, [pc, #72]	; (400d28 <system_init_flash+0xa4>)
  400cde:	4298      	cmp	r0, r3
  400ce0:	d803      	bhi.n	400cea <system_init_flash+0x66>
		EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400ce2:	4a12      	ldr	r2, [pc, #72]	; (400d2c <system_init_flash+0xa8>)
  400ce4:	4b06      	ldr	r3, [pc, #24]	; (400d00 <system_init_flash+0x7c>)
  400ce6:	601a      	str	r2, [r3, #0]
  400ce8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_7) {
  400cea:	4b11      	ldr	r3, [pc, #68]	; (400d30 <system_init_flash+0xac>)
  400cec:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(7)|EEFC_FMR_CLOE;
  400cee:	bf94      	ite	ls
  400cf0:	4a10      	ldrls	r2, [pc, #64]	; (400d34 <system_init_flash+0xb0>)
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(8)|EEFC_FMR_CLOE;
  400cf2:	4a11      	ldrhi	r2, [pc, #68]	; (400d38 <system_init_flash+0xb4>)
  400cf4:	4b02      	ldr	r3, [pc, #8]	; (400d00 <system_init_flash+0x7c>)
  400cf6:	601a      	str	r2, [r3, #0]
  400cf8:	4770      	bx	lr
  400cfa:	bf00      	nop
  400cfc:	00d59f7f 	.word	0x00d59f7f
  400d00:	400e0a00 	.word	0x400e0a00
  400d04:	01ab3eff 	.word	0x01ab3eff
  400d08:	04000100 	.word	0x04000100
  400d0c:	0280de7f 	.word	0x0280de7f
  400d10:	04000200 	.word	0x04000200
  400d14:	03567dff 	.word	0x03567dff
  400d18:	04000300 	.word	0x04000300
  400d1c:	042c1d7f 	.word	0x042c1d7f
  400d20:	0501bcff 	.word	0x0501bcff
  400d24:	04000500 	.word	0x04000500
  400d28:	05b8d7ff 	.word	0x05b8d7ff
  400d2c:	04000600 	.word	0x04000600
  400d30:	066ff2ff 	.word	0x066ff2ff
  400d34:	04000700 	.word	0x04000700
  400d38:	04000800 	.word	0x04000800

00400d3c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400d3c:	4b09      	ldr	r3, [pc, #36]	; (400d64 <_sbrk+0x28>)
  400d3e:	681b      	ldr	r3, [r3, #0]
  400d40:	b913      	cbnz	r3, 400d48 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400d42:	4a09      	ldr	r2, [pc, #36]	; (400d68 <_sbrk+0x2c>)
  400d44:	4b07      	ldr	r3, [pc, #28]	; (400d64 <_sbrk+0x28>)
  400d46:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400d48:	4b06      	ldr	r3, [pc, #24]	; (400d64 <_sbrk+0x28>)
  400d4a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400d4c:	181a      	adds	r2, r3, r0
  400d4e:	4907      	ldr	r1, [pc, #28]	; (400d6c <_sbrk+0x30>)
  400d50:	4291      	cmp	r1, r2
  400d52:	db04      	blt.n	400d5e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400d54:	4610      	mov	r0, r2
  400d56:	4a03      	ldr	r2, [pc, #12]	; (400d64 <_sbrk+0x28>)
  400d58:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400d5a:	4618      	mov	r0, r3
  400d5c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400d5e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400d62:	4770      	bx	lr
  400d64:	2000092c 	.word	0x2000092c
  400d68:	2001ff38 	.word	0x2001ff38
  400d6c:	20027ffc 	.word	0x20027ffc

00400d70 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400d70:	f04f 30ff 	mov.w	r0, #4294967295
  400d74:	4770      	bx	lr
  400d76:	bf00      	nop

00400d78 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400d7c:	604b      	str	r3, [r1, #4]

	return 0;
}
  400d7e:	2000      	movs	r0, #0
  400d80:	4770      	bx	lr
  400d82:	bf00      	nop

00400d84 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400d84:	2001      	movs	r0, #1
  400d86:	4770      	bx	lr

00400d88 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400d88:	2000      	movs	r0, #0
  400d8a:	4770      	bx	lr

00400d8c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  400d8c:	f100 0308 	add.w	r3, r0, #8
  400d90:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400d92:	f04f 32ff 	mov.w	r2, #4294967295
  400d96:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  400d98:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400d9a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  400d9c:	2300      	movs	r3, #0
  400d9e:	6003      	str	r3, [r0, #0]
  400da0:	4770      	bx	lr
  400da2:	bf00      	nop

00400da4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400da4:	2300      	movs	r3, #0
  400da6:	6103      	str	r3, [r0, #16]
  400da8:	4770      	bx	lr
  400daa:	bf00      	nop

00400dac <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  400dac:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
  400dae:	685a      	ldr	r2, [r3, #4]
  400db0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  400db2:	6842      	ldr	r2, [r0, #4]
  400db4:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400db6:	685a      	ldr	r2, [r3, #4]
  400db8:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  400dba:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  400dbc:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400dbe:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400dc0:	6803      	ldr	r3, [r0, #0]
  400dc2:	3301      	adds	r3, #1
  400dc4:	6003      	str	r3, [r0, #0]
  400dc6:	4770      	bx	lr

00400dc8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  400dc8:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  400dca:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400dcc:	f1b4 3fff 	cmp.w	r4, #4294967295
  400dd0:	d101      	bne.n	400dd6 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400dd2:	6903      	ldr	r3, [r0, #16]
  400dd4:	e00a      	b.n	400dec <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  400dd6:	f100 0308 	add.w	r3, r0, #8
  400dda:	68c2      	ldr	r2, [r0, #12]
  400ddc:	6812      	ldr	r2, [r2, #0]
  400dde:	4294      	cmp	r4, r2
  400de0:	d304      	bcc.n	400dec <vListInsert+0x24>
  400de2:	685b      	ldr	r3, [r3, #4]
  400de4:	685a      	ldr	r2, [r3, #4]
  400de6:	6812      	ldr	r2, [r2, #0]
  400de8:	4294      	cmp	r4, r2
  400dea:	d2fa      	bcs.n	400de2 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400dec:	685a      	ldr	r2, [r3, #4]
  400dee:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400df0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400df2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  400df4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400df6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400df8:	6803      	ldr	r3, [r0, #0]
  400dfa:	3301      	adds	r3, #1
  400dfc:	6003      	str	r3, [r0, #0]
}
  400dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e02:	4770      	bx	lr

00400e04 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400e04:	6843      	ldr	r3, [r0, #4]
  400e06:	6882      	ldr	r2, [r0, #8]
  400e08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400e0a:	6883      	ldr	r3, [r0, #8]
  400e0c:	6842      	ldr	r2, [r0, #4]
  400e0e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  400e10:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400e12:	685a      	ldr	r2, [r3, #4]
  400e14:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400e16:	bf04      	itt	eq
  400e18:	6882      	ldreq	r2, [r0, #8]
  400e1a:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  400e1c:	2200      	movs	r2, #0
  400e1e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400e20:	681a      	ldr	r2, [r3, #0]
  400e22:	3a01      	subs	r2, #1
  400e24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400e26:	6818      	ldr	r0, [r3, #0]
}
  400e28:	4770      	bx	lr
  400e2a:	bf00      	nop

00400e2c <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  400e2c:	4803      	ldr	r0, [pc, #12]	; (400e3c <prvPortStartFirstTask+0x10>)
  400e2e:	6800      	ldr	r0, [r0, #0]
  400e30:	6800      	ldr	r0, [r0, #0]
  400e32:	f380 8808 	msr	MSP, r0
  400e36:	b662      	cpsie	i
  400e38:	df00      	svc	0
  400e3a:	bf00      	nop
  400e3c:	e000ed08 	.word	0xe000ed08

00400e40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400e40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400e50 <vPortEnableVFP+0x10>
  400e44:	6801      	ldr	r1, [r0, #0]
  400e46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400e4a:	6001      	str	r1, [r0, #0]
  400e4c:	4770      	bx	lr
  400e4e:	0000      	.short	0x0000
  400e50:	e000ed88 	.word	0xe000ed88

00400e54 <pxPortInitialiseStack>:
	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  400e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400e58:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400e5c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;    /* LR */
  400e60:	2300      	movs	r3, #0
  400e62:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  400e66:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400e6a:	f06f 0302 	mvn.w	r3, #2
  400e6e:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  400e72:	3844      	subs	r0, #68	; 0x44
  400e74:	4770      	bx	lr
  400e76:	bf00      	nop

00400e78 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  400e78:	4b05      	ldr	r3, [pc, #20]	; (400e90 <pxCurrentTCBConst2>)
  400e7a:	6819      	ldr	r1, [r3, #0]
  400e7c:	6808      	ldr	r0, [r1, #0]
  400e7e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e82:	f380 8809 	msr	PSP, r0
  400e86:	f04f 0000 	mov.w	r0, #0
  400e8a:	f380 8811 	msr	BASEPRI, r0
  400e8e:	4770      	bx	lr

00400e90 <pxCurrentTCBConst2>:
  400e90:	20018ab8 	.word	0x20018ab8

00400e94 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e98:	4b01      	ldr	r3, [pc, #4]	; (400ea0 <vPortYieldFromISR+0xc>)
  400e9a:	601a      	str	r2, [r3, #0]
  400e9c:	4770      	bx	lr
  400e9e:	bf00      	nop
  400ea0:	e000ed04 	.word	0xe000ed04

00400ea4 <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  400ea4:	f3ef 8011 	mrs	r0, BASEPRI
  400ea8:	f04f 0150 	mov.w	r1, #80	; 0x50
  400eac:	f381 8811 	msr	BASEPRI, r1
  400eb0:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
}
  400eb2:	2000      	movs	r0, #0

00400eb4 <vPortEnterCritical>:
}

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400eb4:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  400eb6:	4b03      	ldr	r3, [pc, #12]	; (400ec4 <vPortEnterCritical+0x10>)
  400eb8:	4798      	blx	r3
	uxCriticalNesting++;
  400eba:	4a03      	ldr	r2, [pc, #12]	; (400ec8 <vPortEnterCritical+0x14>)
  400ebc:	6813      	ldr	r3, [r2, #0]
  400ebe:	3301      	adds	r3, #1
  400ec0:	6013      	str	r3, [r2, #0]
  400ec2:	bd08      	pop	{r3, pc}
  400ec4:	00400ea5 	.word	0x00400ea5
  400ec8:	20000014 	.word	0x20000014

00400ecc <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  400ecc:	f380 8811 	msr	BASEPRI, r0
  400ed0:	4770      	bx	lr
  400ed2:	bf00      	nop

00400ed4 <vPortExitCritical>:
}

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  400ed4:	b508      	push	{r3, lr}
	uxCriticalNesting--;
  400ed6:	4a04      	ldr	r2, [pc, #16]	; (400ee8 <vPortExitCritical+0x14>)
  400ed8:	6813      	ldr	r3, [r2, #0]
  400eda:	3b01      	subs	r3, #1
  400edc:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  400ede:	b913      	cbnz	r3, 400ee6 <vPortExitCritical+0x12>
		portENABLE_INTERRUPTS();
  400ee0:	2000      	movs	r0, #0
  400ee2:	4b02      	ldr	r3, [pc, #8]	; (400eec <vPortExitCritical+0x18>)
  400ee4:	4798      	blx	r3
  400ee6:	bd08      	pop	{r3, pc}
  400ee8:	20000014 	.word	0x20000014
  400eec:	00400ecd 	.word	0x00400ecd

00400ef0 <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  400ef0:	f3ef 8009 	mrs	r0, PSP
  400ef4:	4b11      	ldr	r3, [pc, #68]	; (400f3c <pxCurrentTCBConst>)
  400ef6:	681a      	ldr	r2, [r3, #0]
  400ef8:	f01e 0f10 	tst.w	lr, #16
  400efc:	bf08      	it	eq
  400efe:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400f02:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f06:	6010      	str	r0, [r2, #0]
  400f08:	e92d 4008 	stmdb	sp!, {r3, lr}
  400f0c:	f04f 0050 	mov.w	r0, #80	; 0x50
  400f10:	f380 8811 	msr	BASEPRI, r0
  400f14:	f000 fed8 	bl	401cc8 <vTaskSwitchContext>
  400f18:	f04f 0000 	mov.w	r0, #0
  400f1c:	f380 8811 	msr	BASEPRI, r0
  400f20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400f24:	6819      	ldr	r1, [r3, #0]
  400f26:	6808      	ldr	r0, [r1, #0]
  400f28:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f2c:	f01e 0f10 	tst.w	lr, #16
  400f30:	bf08      	it	eq
  400f32:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400f36:	f380 8809 	msr	PSP, r0
  400f3a:	4770      	bx	lr

00400f3c <pxCurrentTCBConst>:
  400f3c:	20018ab8 	.word	0x20018ab8

00400f40 <SysTick_Handler>:
	);
}

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  400f40:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f46:	4b05      	ldr	r3, [pc, #20]	; (400f5c <SysTick_Handler+0x1c>)
  400f48:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  400f4a:	4b05      	ldr	r3, [pc, #20]	; (400f60 <SysTick_Handler+0x20>)
  400f4c:	4798      	blx	r3
	{
		vTaskIncrementTick();
  400f4e:	4b05      	ldr	r3, [pc, #20]	; (400f64 <SysTick_Handler+0x24>)
  400f50:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  400f52:	2000      	movs	r0, #0
  400f54:	4b04      	ldr	r3, [pc, #16]	; (400f68 <SysTick_Handler+0x28>)
  400f56:	4798      	blx	r3
  400f58:	bd08      	pop	{r3, pc}
  400f5a:	bf00      	nop
  400f5c:	e000ed04 	.word	0xe000ed04
  400f60:	00400ea5 	.word	0x00400ea5
  400f64:	00401a0d 	.word	0x00401a0d
  400f68:	00400ecd 	.word	0x00400ecd

00400f6c <vPortSetupTimerInterrupt>:
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  400f6c:	4a03      	ldr	r2, [pc, #12]	; (400f7c <vPortSetupTimerInterrupt+0x10>)
  400f6e:	4b04      	ldr	r3, [pc, #16]	; (400f80 <vPortSetupTimerInterrupt+0x14>)
  400f70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400f72:	2207      	movs	r2, #7
  400f74:	3b04      	subs	r3, #4
  400f76:	601a      	str	r2, [r3, #0]
  400f78:	4770      	bx	lr
  400f7a:	bf00      	nop
  400f7c:	0001d4bb 	.word	0x0001d4bb
  400f80:	e000e014 	.word	0xe000e014

00400f84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  400f84:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400f86:	4b0c      	ldr	r3, [pc, #48]	; (400fb8 <xPortStartScheduler+0x34>)
  400f88:	681a      	ldr	r2, [r3, #0]
  400f8a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  400f8e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400f90:	681a      	ldr	r2, [r3, #0]
  400f92:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  400f96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  400f98:	4b08      	ldr	r3, [pc, #32]	; (400fbc <xPortStartScheduler+0x38>)
  400f9a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400f9c:	2400      	movs	r4, #0
  400f9e:	4b08      	ldr	r3, [pc, #32]	; (400fc0 <xPortStartScheduler+0x3c>)
  400fa0:	601c      	str	r4, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400fa2:	4b08      	ldr	r3, [pc, #32]	; (400fc4 <xPortStartScheduler+0x40>)
  400fa4:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  400fa6:	4a08      	ldr	r2, [pc, #32]	; (400fc8 <xPortStartScheduler+0x44>)
  400fa8:	6813      	ldr	r3, [r2, #0]
  400faa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400fae:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400fb0:	4b06      	ldr	r3, [pc, #24]	; (400fcc <xPortStartScheduler+0x48>)
  400fb2:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
  400fb4:	4620      	mov	r0, r4
  400fb6:	bd10      	pop	{r4, pc}
  400fb8:	e000ed20 	.word	0xe000ed20
  400fbc:	00400f6d 	.word	0x00400f6d
  400fc0:	20000014 	.word	0x20000014
  400fc4:	00400e41 	.word	0x00400e41
  400fc8:	e000ef34 	.word	0xe000ef34
  400fcc:	00400e2d 	.word	0x00400e2d

00400fd0 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400fd0:	4a13      	ldr	r2, [pc, #76]	; (401020 <prvInsertBlockIntoFreeList+0x50>)
  400fd2:	e000      	b.n	400fd6 <prvInsertBlockIntoFreeList+0x6>
  400fd4:	461a      	mov	r2, r3
  400fd6:	6813      	ldr	r3, [r2, #0]
  400fd8:	4283      	cmp	r3, r0
  400fda:	d3fb      	bcc.n	400fd4 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400fdc:	b430      	push	{r4, r5}
  400fde:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  400fe0:	6854      	ldr	r4, [r2, #4]
  400fe2:	1915      	adds	r5, r2, r4
  400fe4:	4285      	cmp	r5, r0
  400fe6:	d103      	bne.n	400ff0 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400fe8:	6868      	ldr	r0, [r5, #4]
  400fea:	4404      	add	r4, r0
  400fec:	6054      	str	r4, [r2, #4]
  400fee:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  400ff0:	6842      	ldr	r2, [r0, #4]
  400ff2:	1884      	adds	r4, r0, r2
  400ff4:	429c      	cmp	r4, r3
  400ff6:	d10c      	bne.n	401012 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  400ff8:	4b0a      	ldr	r3, [pc, #40]	; (401024 <prvInsertBlockIntoFreeList+0x54>)
  400ffa:	681b      	ldr	r3, [r3, #0]
  400ffc:	429c      	cmp	r4, r3
  400ffe:	d006      	beq.n	40100e <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  401000:	6863      	ldr	r3, [r4, #4]
  401002:	441a      	add	r2, r3
  401004:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  401006:	680b      	ldr	r3, [r1, #0]
  401008:	681b      	ldr	r3, [r3, #0]
  40100a:	6003      	str	r3, [r0, #0]
  40100c:	e002      	b.n	401014 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40100e:	6004      	str	r4, [r0, #0]
  401010:	e000      	b.n	401014 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  401012:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  401014:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  401016:	bf18      	it	ne
  401018:	6008      	strne	r0, [r1, #0]
	}
}
  40101a:	bc30      	pop	{r4, r5}
  40101c:	4770      	bx	lr
  40101e:	bf00      	nop
  401020:	20018934 	.word	0x20018934
  401024:	20018930 	.word	0x20018930

00401028 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401028:	b538      	push	{r3, r4, r5, lr}
  40102a:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
  40102c:	4b2c      	ldr	r3, [pc, #176]	; (4010e0 <pvPortMalloc+0xb8>)
  40102e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  401030:	4b2c      	ldr	r3, [pc, #176]	; (4010e4 <pvPortMalloc+0xbc>)
  401032:	681b      	ldr	r3, [r3, #0]
  401034:	b9ab      	cbnz	r3, 401062 <pvPortMalloc+0x3a>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  401036:	4a2c      	ldr	r2, [pc, #176]	; (4010e8 <pvPortMalloc+0xc0>)
  401038:	4b2c      	ldr	r3, [pc, #176]	; (4010ec <pvPortMalloc+0xc4>)
  40103a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
  40103c:	2100      	movs	r1, #0
  40103e:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
  401040:	f503 32bf 	add.w	r2, r3, #97792	; 0x17e00
  401044:	f502 70f8 	add.w	r0, r2, #496	; 0x1f0
  401048:	4d26      	ldr	r5, [pc, #152]	; (4010e4 <pvPortMalloc+0xbc>)
  40104a:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
  40104c:	f8c2 11f4 	str.w	r1, [r2, #500]	; 0x1f4
	pxEnd->pxNextFreeBlock = NULL;
  401050:	f8c2 11f0 	str.w	r1, [r2, #496]	; 0x1f0

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  401054:	4a26      	ldr	r2, [pc, #152]	; (4010f0 <pvPortMalloc+0xc8>)
  401056:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  401058:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  40105a:	4a26      	ldr	r2, [pc, #152]	; (4010f4 <pvPortMalloc+0xcc>)
  40105c:	6813      	ldr	r3, [r2, #0]
  40105e:	3b10      	subs	r3, #16
  401060:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  401062:	2c00      	cmp	r4, #0
  401064:	d036      	beq.n	4010d4 <pvPortMalloc+0xac>
		{
			xWantedSize += heapSTRUCT_SIZE;
  401066:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40106a:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40106e:	bf1c      	itt	ne
  401070:	f022 0207 	bicne.w	r2, r2, #7
  401074:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  401076:	1e51      	subs	r1, r2, #1
  401078:	4b1f      	ldr	r3, [pc, #124]	; (4010f8 <pvPortMalloc+0xd0>)
  40107a:	4299      	cmp	r1, r3
  40107c:	d827      	bhi.n	4010ce <pvPortMalloc+0xa6>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
  40107e:	491a      	ldr	r1, [pc, #104]	; (4010e8 <pvPortMalloc+0xc0>)
  401080:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  401082:	e001      	b.n	401088 <pvPortMalloc+0x60>
  401084:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
  401086:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  401088:	6863      	ldr	r3, [r4, #4]
  40108a:	429a      	cmp	r2, r3
  40108c:	d902      	bls.n	401094 <pvPortMalloc+0x6c>
  40108e:	6823      	ldr	r3, [r4, #0]
  401090:	2b00      	cmp	r3, #0
  401092:	d1f7      	bne.n	401084 <pvPortMalloc+0x5c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  401094:	4b13      	ldr	r3, [pc, #76]	; (4010e4 <pvPortMalloc+0xbc>)
  401096:	681b      	ldr	r3, [r3, #0]
  401098:	429c      	cmp	r4, r3
  40109a:	d018      	beq.n	4010ce <pvPortMalloc+0xa6>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  40109c:	680d      	ldr	r5, [r1, #0]
  40109e:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  4010a0:	6823      	ldr	r3, [r4, #0]
  4010a2:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  4010a4:	6863      	ldr	r3, [r4, #4]
  4010a6:	1a9b      	subs	r3, r3, r2
  4010a8:	2b20      	cmp	r3, #32
  4010aa:	d904      	bls.n	4010b6 <pvPortMalloc+0x8e>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  4010ac:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4010ae:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
  4010b0:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  4010b2:	4b12      	ldr	r3, [pc, #72]	; (4010fc <pvPortMalloc+0xd4>)
  4010b4:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  4010b6:	4a0f      	ldr	r2, [pc, #60]	; (4010f4 <pvPortMalloc+0xcc>)
  4010b8:	6813      	ldr	r3, [r2, #0]
  4010ba:	6861      	ldr	r1, [r4, #4]
  4010bc:	1a5b      	subs	r3, r3, r1
  4010be:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  4010c0:	4b0f      	ldr	r3, [pc, #60]	; (401100 <pvPortMalloc+0xd8>)
  4010c2:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4010c4:	b94d      	cbnz	r5, 4010da <pvPortMalloc+0xb2>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  4010c6:	4b0f      	ldr	r3, [pc, #60]	; (401104 <pvPortMalloc+0xdc>)
  4010c8:	4798      	blx	r3
  4010ca:	2500      	movs	r5, #0
  4010cc:	e005      	b.n	4010da <pvPortMalloc+0xb2>

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
  4010ce:	4b0c      	ldr	r3, [pc, #48]	; (401100 <pvPortMalloc+0xd8>)
  4010d0:	4798      	blx	r3
  4010d2:	e7f8      	b.n	4010c6 <pvPortMalloc+0x9e>
  4010d4:	4b0a      	ldr	r3, [pc, #40]	; (401100 <pvPortMalloc+0xd8>)
  4010d6:	4798      	blx	r3
  4010d8:	e7f5      	b.n	4010c6 <pvPortMalloc+0x9e>
		}
	}
	#endif

	return pvReturn;
}
  4010da:	4628      	mov	r0, r5
  4010dc:	bd38      	pop	{r3, r4, r5, pc}
  4010de:	bf00      	nop
  4010e0:	00401995 	.word	0x00401995
  4010e4:	20018930 	.word	0x20018930
  4010e8:	20018934 	.word	0x20018934
  4010ec:	20000930 	.word	0x20000930
  4010f0:	00017ff0 	.word	0x00017ff0
  4010f4:	20000018 	.word	0x20000018
  4010f8:	00017ffe 	.word	0x00017ffe
  4010fc:	00400fd1 	.word	0x00400fd1
  401100:	00401b39 	.word	0x00401b39
  401104:	004043a9 	.word	0x004043a9

00401108 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
  401108:	b180      	cbz	r0, 40112c <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  40110a:	b510      	push	{r4, lr}
  40110c:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
  40110e:	4b08      	ldr	r3, [pc, #32]	; (401130 <vPortFree+0x28>)
  401110:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  401112:	4a08      	ldr	r2, [pc, #32]	; (401134 <vPortFree+0x2c>)
  401114:	6811      	ldr	r1, [r2, #0]
  401116:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  40111a:	440b      	add	r3, r1
  40111c:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  40111e:	f1a4 0010 	sub.w	r0, r4, #16
  401122:	4b05      	ldr	r3, [pc, #20]	; (401138 <vPortFree+0x30>)
  401124:	4798      	blx	r3
		}
		xTaskResumeAll();
  401126:	4b05      	ldr	r3, [pc, #20]	; (40113c <vPortFree+0x34>)
  401128:	4798      	blx	r3
  40112a:	bd10      	pop	{r4, pc}
  40112c:	4770      	bx	lr
  40112e:	bf00      	nop
  401130:	00401995 	.word	0x00401995
  401134:	20000018 	.word	0x20000018
  401138:	00400fd1 	.word	0x00400fd1
  40113c:	00401b39 	.word	0x00401b39

00401140 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  401140:	b510      	push	{r4, lr}
  401142:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  401144:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401146:	b93b      	cbnz	r3, 401158 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401148:	6803      	ldr	r3, [r0, #0]
  40114a:	bb1b      	cbnz	r3, 401194 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40114c:	6840      	ldr	r0, [r0, #4]
  40114e:	4b13      	ldr	r3, [pc, #76]	; (40119c <prvCopyDataToQueue+0x5c>)
  401150:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401152:	2300      	movs	r3, #0
  401154:	6063      	str	r3, [r4, #4]
  401156:	e01d      	b.n	401194 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  401158:	b96a      	cbnz	r2, 401176 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  40115a:	6880      	ldr	r0, [r0, #8]
  40115c:	461a      	mov	r2, r3
  40115e:	4b10      	ldr	r3, [pc, #64]	; (4011a0 <prvCopyDataToQueue+0x60>)
  401160:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401162:	68a2      	ldr	r2, [r4, #8]
  401164:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401166:	4413      	add	r3, r2
  401168:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  40116a:	6862      	ldr	r2, [r4, #4]
  40116c:	4293      	cmp	r3, r2
  40116e:	d311      	bcc.n	401194 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401170:	6823      	ldr	r3, [r4, #0]
  401172:	60a3      	str	r3, [r4, #8]
  401174:	e00e      	b.n	401194 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  401176:	68c0      	ldr	r0, [r0, #12]
  401178:	461a      	mov	r2, r3
  40117a:	4b09      	ldr	r3, [pc, #36]	; (4011a0 <prvCopyDataToQueue+0x60>)
  40117c:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  40117e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401180:	425b      	negs	r3, r3
  401182:	68e2      	ldr	r2, [r4, #12]
  401184:	441a      	add	r2, r3
  401186:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  401188:	6821      	ldr	r1, [r4, #0]
  40118a:	428a      	cmp	r2, r1
  40118c:	d202      	bcs.n	401194 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40118e:	6862      	ldr	r2, [r4, #4]
  401190:	4413      	add	r3, r2
  401192:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401194:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401196:	3301      	adds	r3, #1
  401198:	63a3      	str	r3, [r4, #56]	; 0x38
  40119a:	bd10      	pop	{r4, pc}
  40119c:	004020b5 	.word	0x004020b5
  4011a0:	00404555 	.word	0x00404555

004011a4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  4011a4:	b538      	push	{r3, r4, r5, lr}
  4011a6:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  4011a8:	6800      	ldr	r0, [r0, #0]
  4011aa:	b158      	cbz	r0, 4011c4 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  4011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4011ae:	68dc      	ldr	r4, [r3, #12]
  4011b0:	4414      	add	r4, r2
  4011b2:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  4011b4:	685d      	ldr	r5, [r3, #4]
  4011b6:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  4011b8:	bf28      	it	cs
  4011ba:	60d8      	strcs	r0, [r3, #12]
  4011bc:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  4011be:	68d9      	ldr	r1, [r3, #12]
  4011c0:	4b01      	ldr	r3, [pc, #4]	; (4011c8 <prvCopyDataFromQueue+0x24>)
  4011c2:	4798      	blx	r3
  4011c4:	bd38      	pop	{r3, r4, r5, pc}
  4011c6:	bf00      	nop
  4011c8:	00404555 	.word	0x00404555

004011cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  4011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011ce:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  4011d0:	4b1e      	ldr	r3, [pc, #120]	; (40124c <prvUnlockQueue+0x80>)
  4011d2:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4011d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011d6:	2b00      	cmp	r3, #0
  4011d8:	dd13      	ble.n	401202 <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4011da:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011dc:	b91b      	cbnz	r3, 4011e6 <prvUnlockQueue+0x1a>
  4011de:	e010      	b.n	401202 <prvUnlockQueue+0x36>
  4011e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011e2:	b923      	cbnz	r3, 4011ee <prvUnlockQueue+0x22>
  4011e4:	e00d      	b.n	401202 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011e6:	f104 0624 	add.w	r6, r4, #36	; 0x24
  4011ea:	4d19      	ldr	r5, [pc, #100]	; (401250 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  4011ec:	4f19      	ldr	r7, [pc, #100]	; (401254 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011ee:	4630      	mov	r0, r6
  4011f0:	47a8      	blx	r5
  4011f2:	b100      	cbz	r0, 4011f6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  4011f4:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
  4011f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011f8:	3b01      	subs	r3, #1
  4011fa:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4011fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011fe:	2b00      	cmp	r3, #0
  401200:	dcee      	bgt.n	4011e0 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401202:	f04f 33ff 	mov.w	r3, #4294967295
  401206:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  401208:	4b13      	ldr	r3, [pc, #76]	; (401258 <prvUnlockQueue+0x8c>)
  40120a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  40120c:	4b0f      	ldr	r3, [pc, #60]	; (40124c <prvUnlockQueue+0x80>)
  40120e:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401210:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401212:	2b00      	cmp	r3, #0
  401214:	dd13      	ble.n	40123e <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401216:	6923      	ldr	r3, [r4, #16]
  401218:	b91b      	cbnz	r3, 401222 <prvUnlockQueue+0x56>
  40121a:	e010      	b.n	40123e <prvUnlockQueue+0x72>
  40121c:	6923      	ldr	r3, [r4, #16]
  40121e:	b923      	cbnz	r3, 40122a <prvUnlockQueue+0x5e>
  401220:	e00d      	b.n	40123e <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401222:	f104 0610 	add.w	r6, r4, #16
  401226:	4d0a      	ldr	r5, [pc, #40]	; (401250 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
  401228:	4f0a      	ldr	r7, [pc, #40]	; (401254 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40122a:	4630      	mov	r0, r6
  40122c:	47a8      	blx	r5
  40122e:	b100      	cbz	r0, 401232 <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
  401230:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
  401232:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401234:	3b01      	subs	r3, #1
  401236:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401238:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40123a:	2b00      	cmp	r3, #0
  40123c:	dcee      	bgt.n	40121c <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  40123e:	f04f 33ff 	mov.w	r3, #4294967295
  401242:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  401244:	4b04      	ldr	r3, [pc, #16]	; (401258 <prvUnlockQueue+0x8c>)
  401246:	4798      	blx	r3
  401248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40124a:	bf00      	nop
  40124c:	00400eb5 	.word	0x00400eb5
  401250:	00401e9d 	.word	0x00401e9d
  401254:	00401fe1 	.word	0x00401fe1
  401258:	00400ed5 	.word	0x00400ed5

0040125c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  40125c:	b538      	push	{r3, r4, r5, lr}
  40125e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
  401260:	4604      	mov	r4, r0
  401262:	b920      	cbnz	r0, 40126e <xQueueGenericReset+0x12>
  401264:	4817      	ldr	r0, [pc, #92]	; (4012c4 <xQueueGenericReset+0x68>)
  401266:	f44f 718f 	mov.w	r1, #286	; 0x11e
  40126a:	4b17      	ldr	r3, [pc, #92]	; (4012c8 <xQueueGenericReset+0x6c>)
  40126c:	4798      	blx	r3

	taskENTER_CRITICAL();
  40126e:	4b17      	ldr	r3, [pc, #92]	; (4012cc <xQueueGenericReset+0x70>)
  401270:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401272:	6822      	ldr	r2, [r4, #0]
  401274:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401276:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401278:	fb03 f301 	mul.w	r3, r3, r1
  40127c:	18d0      	adds	r0, r2, r3
  40127e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  401280:	2000      	movs	r0, #0
  401282:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401284:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  401286:	1a5b      	subs	r3, r3, r1
  401288:	4413      	add	r3, r2
  40128a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40128c:	f04f 33ff 	mov.w	r3, #4294967295
  401290:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401292:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  401294:	b955      	cbnz	r5, 4012ac <xQueueGenericReset+0x50>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401296:	6923      	ldr	r3, [r4, #16]
  401298:	b17b      	cbz	r3, 4012ba <xQueueGenericReset+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40129a:	f104 0010 	add.w	r0, r4, #16
  40129e:	4b0c      	ldr	r3, [pc, #48]	; (4012d0 <xQueueGenericReset+0x74>)
  4012a0:	4798      	blx	r3
  4012a2:	2801      	cmp	r0, #1
  4012a4:	d109      	bne.n	4012ba <xQueueGenericReset+0x5e>
				{
					portYIELD_WITHIN_API();
  4012a6:	4b0b      	ldr	r3, [pc, #44]	; (4012d4 <xQueueGenericReset+0x78>)
  4012a8:	4798      	blx	r3
  4012aa:	e006      	b.n	4012ba <xQueueGenericReset+0x5e>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4012ac:	f104 0010 	add.w	r0, r4, #16
  4012b0:	4d09      	ldr	r5, [pc, #36]	; (4012d8 <xQueueGenericReset+0x7c>)
  4012b2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4012b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4012b8:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  4012ba:	4b08      	ldr	r3, [pc, #32]	; (4012dc <xQueueGenericReset+0x80>)
  4012bc:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  4012be:	2001      	movs	r0, #1
  4012c0:	bd38      	pop	{r3, r4, r5, pc}
  4012c2:	bf00      	nop
  4012c4:	0040756c 	.word	0x0040756c
  4012c8:	004043c1 	.word	0x004043c1
  4012cc:	00400eb5 	.word	0x00400eb5
  4012d0:	00401e9d 	.word	0x00401e9d
  4012d4:	00400e95 	.word	0x00400e95
  4012d8:	00400d8d 	.word	0x00400d8d
  4012dc:	00400ed5 	.word	0x00400ed5

004012e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4012e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  4012e2:	b1d0      	cbz	r0, 40131a <xQueueGenericCreate+0x3a>
  4012e4:	460d      	mov	r5, r1
  4012e6:	4617      	mov	r7, r2
  4012e8:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  4012ea:	2050      	movs	r0, #80	; 0x50
  4012ec:	4b0f      	ldr	r3, [pc, #60]	; (40132c <xQueueGenericCreate+0x4c>)
  4012ee:	4798      	blx	r3
		if( pxNewQueue != NULL )
  4012f0:	4604      	mov	r4, r0
  4012f2:	b190      	cbz	r0, 40131a <xQueueGenericCreate+0x3a>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  4012f4:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  4012f8:	3001      	adds	r0, #1
  4012fa:	4b0c      	ldr	r3, [pc, #48]	; (40132c <xQueueGenericCreate+0x4c>)
  4012fc:	4798      	blx	r3
  4012fe:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
  401300:	b140      	cbz	r0, 401314 <xQueueGenericCreate+0x34>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  401302:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  401304:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  401306:	4620      	mov	r0, r4
  401308:	2101      	movs	r1, #1
  40130a:	4b09      	ldr	r3, [pc, #36]	; (401330 <xQueueGenericCreate+0x50>)
  40130c:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  40130e:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
  401312:	e008      	b.n	401326 <xQueueGenericCreate+0x46>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  401314:	4620      	mov	r0, r4
  401316:	4b07      	ldr	r3, [pc, #28]	; (401334 <xQueueGenericCreate+0x54>)
  401318:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  40131a:	4807      	ldr	r0, [pc, #28]	; (401338 <xQueueGenericCreate+0x58>)
  40131c:	f44f 71ba 	mov.w	r1, #372	; 0x174
  401320:	4b06      	ldr	r3, [pc, #24]	; (40133c <xQueueGenericCreate+0x5c>)
  401322:	4798      	blx	r3
  401324:	2400      	movs	r4, #0

	return xReturn;
}
  401326:	4620      	mov	r0, r4
  401328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40132a:	bf00      	nop
  40132c:	00401029 	.word	0x00401029
  401330:	0040125d 	.word	0x0040125d
  401334:	00401109 	.word	0x00401109
  401338:	0040756c 	.word	0x0040756c
  40133c:	004043c1 	.word	0x004043c1

00401340 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  401340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401344:	b085      	sub	sp, #20
  401346:	468b      	mov	fp, r1
  401348:	9201      	str	r2, [sp, #4]
  40134a:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  40134c:	4604      	mov	r4, r0
  40134e:	b920      	cbnz	r0, 40135a <xQueueGenericSend+0x1a>
  401350:	483a      	ldr	r0, [pc, #232]	; (40143c <xQueueGenericSend+0xfc>)
  401352:	f240 214b 	movw	r1, #587	; 0x24b
  401356:	4b3a      	ldr	r3, [pc, #232]	; (401440 <xQueueGenericSend+0x100>)
  401358:	4798      	blx	r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  40135a:	f1bb 0f00 	cmp.w	fp, #0
  40135e:	d106      	bne.n	40136e <xQueueGenericSend+0x2e>
  401360:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401362:	b123      	cbz	r3, 40136e <xQueueGenericSend+0x2e>
  401364:	4835      	ldr	r0, [pc, #212]	; (40143c <xQueueGenericSend+0xfc>)
  401366:	f44f 7113 	mov.w	r1, #588	; 0x24c
  40136a:	4b35      	ldr	r3, [pc, #212]	; (401440 <xQueueGenericSend+0x100>)
  40136c:	4798      	blx	r3

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  40136e:	f04f 0900 	mov.w	r9, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401372:	4d34      	ldr	r5, [pc, #208]	; (401444 <xQueueGenericSend+0x104>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401374:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 40146c <xQueueGenericSend+0x12c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  401378:	4e33      	ldr	r6, [pc, #204]	; (401448 <xQueueGenericSend+0x108>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40137a:	47a8      	blx	r5
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40137c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40137e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401380:	429a      	cmp	r2, r3
  401382:	d212      	bcs.n	4013aa <xQueueGenericSend+0x6a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401384:	4620      	mov	r0, r4
  401386:	4659      	mov	r1, fp
  401388:	9a00      	ldr	r2, [sp, #0]
  40138a:	4b30      	ldr	r3, [pc, #192]	; (40144c <xQueueGenericSend+0x10c>)
  40138c:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40138e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401390:	b13b      	cbz	r3, 4013a2 <xQueueGenericSend+0x62>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401392:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401396:	4b2e      	ldr	r3, [pc, #184]	; (401450 <xQueueGenericSend+0x110>)
  401398:	4798      	blx	r3
  40139a:	2801      	cmp	r0, #1
  40139c:	d101      	bne.n	4013a2 <xQueueGenericSend+0x62>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  40139e:	4b2d      	ldr	r3, [pc, #180]	; (401454 <xQueueGenericSend+0x114>)
  4013a0:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  4013a2:	4b29      	ldr	r3, [pc, #164]	; (401448 <xQueueGenericSend+0x108>)
  4013a4:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  4013a6:	2001      	movs	r0, #1
  4013a8:	e044      	b.n	401434 <xQueueGenericSend+0xf4>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  4013aa:	9b01      	ldr	r3, [sp, #4]
  4013ac:	b91b      	cbnz	r3, 4013b6 <xQueueGenericSend+0x76>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4013ae:	4b26      	ldr	r3, [pc, #152]	; (401448 <xQueueGenericSend+0x108>)
  4013b0:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4013b2:	2000      	movs	r0, #0
  4013b4:	e03e      	b.n	401434 <xQueueGenericSend+0xf4>
				}
				else if( xEntryTimeSet == pdFALSE )
  4013b6:	f1b9 0f00 	cmp.w	r9, #0
  4013ba:	d103      	bne.n	4013c4 <xQueueGenericSend+0x84>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4013bc:	a802      	add	r0, sp, #8
  4013be:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  4013c0:	f04f 0901 	mov.w	r9, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  4013c4:	47b0      	blx	r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4013c6:	4b24      	ldr	r3, [pc, #144]	; (401458 <xQueueGenericSend+0x118>)
  4013c8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4013ca:	47a8      	blx	r5
  4013cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4013ce:	f1b3 3fff 	cmp.w	r3, #4294967295
  4013d2:	bf04      	itt	eq
  4013d4:	2300      	moveq	r3, #0
  4013d6:	6463      	streq	r3, [r4, #68]	; 0x44
  4013d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4013da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4013de:	bf04      	itt	eq
  4013e0:	2300      	moveq	r3, #0
  4013e2:	64a3      	streq	r3, [r4, #72]	; 0x48
  4013e4:	47b0      	blx	r6

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4013e6:	a802      	add	r0, sp, #8
  4013e8:	a901      	add	r1, sp, #4
  4013ea:	4b1c      	ldr	r3, [pc, #112]	; (40145c <xQueueGenericSend+0x11c>)
  4013ec:	4798      	blx	r3
  4013ee:	b9d8      	cbnz	r0, 401428 <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4013f0:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  4013f2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
  4013f6:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4013f8:	47b0      	blx	r6
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4013fa:	45b8      	cmp	r8, r7
  4013fc:	d10e      	bne.n	40141c <xQueueGenericSend+0xdc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4013fe:	f104 0010 	add.w	r0, r4, #16
  401402:	9901      	ldr	r1, [sp, #4]
  401404:	4b16      	ldr	r3, [pc, #88]	; (401460 <xQueueGenericSend+0x120>)
  401406:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401408:	4620      	mov	r0, r4
  40140a:	4b16      	ldr	r3, [pc, #88]	; (401464 <xQueueGenericSend+0x124>)
  40140c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  40140e:	4b16      	ldr	r3, [pc, #88]	; (401468 <xQueueGenericSend+0x128>)
  401410:	4798      	blx	r3
  401412:	2800      	cmp	r0, #0
  401414:	d1b1      	bne.n	40137a <xQueueGenericSend+0x3a>
				{
					portYIELD_WITHIN_API();
  401416:	4b0f      	ldr	r3, [pc, #60]	; (401454 <xQueueGenericSend+0x114>)
  401418:	4798      	blx	r3
  40141a:	e7ae      	b.n	40137a <xQueueGenericSend+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  40141c:	4620      	mov	r0, r4
  40141e:	4b11      	ldr	r3, [pc, #68]	; (401464 <xQueueGenericSend+0x124>)
  401420:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401422:	4b11      	ldr	r3, [pc, #68]	; (401468 <xQueueGenericSend+0x128>)
  401424:	4798      	blx	r3
  401426:	e7a8      	b.n	40137a <xQueueGenericSend+0x3a>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  401428:	4620      	mov	r0, r4
  40142a:	4b0e      	ldr	r3, [pc, #56]	; (401464 <xQueueGenericSend+0x124>)
  40142c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40142e:	4b0e      	ldr	r3, [pc, #56]	; (401468 <xQueueGenericSend+0x128>)
  401430:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  401432:	2000      	movs	r0, #0
		}
	}
}
  401434:	b005      	add	sp, #20
  401436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40143a:	bf00      	nop
  40143c:	0040756c 	.word	0x0040756c
  401440:	004043c1 	.word	0x004043c1
  401444:	00400eb5 	.word	0x00400eb5
  401448:	00400ed5 	.word	0x00400ed5
  40144c:	00401141 	.word	0x00401141
  401450:	00401e9d 	.word	0x00401e9d
  401454:	00400e95 	.word	0x00400e95
  401458:	00401995 	.word	0x00401995
  40145c:	00401f55 	.word	0x00401f55
  401460:	00401db1 	.word	0x00401db1
  401464:	004011cd 	.word	0x004011cd
  401468:	00401b39 	.word	0x00401b39
  40146c:	00401f25 	.word	0x00401f25

00401470 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  401470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401474:	460d      	mov	r5, r1
  401476:	4617      	mov	r7, r2
  401478:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  40147a:	4604      	mov	r4, r0
  40147c:	b920      	cbnz	r0, 401488 <xQueueGenericSendFromISR+0x18>
  40147e:	481d      	ldr	r0, [pc, #116]	; (4014f4 <xQueueGenericSendFromISR+0x84>)
  401480:	f240 3192 	movw	r1, #914	; 0x392
  401484:	4b1c      	ldr	r3, [pc, #112]	; (4014f8 <xQueueGenericSendFromISR+0x88>)
  401486:	4798      	blx	r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401488:	b935      	cbnz	r5, 401498 <xQueueGenericSendFromISR+0x28>
  40148a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40148c:	b123      	cbz	r3, 401498 <xQueueGenericSendFromISR+0x28>
  40148e:	4819      	ldr	r0, [pc, #100]	; (4014f4 <xQueueGenericSendFromISR+0x84>)
  401490:	f240 3193 	movw	r1, #915	; 0x393
  401494:	4b18      	ldr	r3, [pc, #96]	; (4014f8 <xQueueGenericSendFromISR+0x88>)
  401496:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  401498:	4b18      	ldr	r3, [pc, #96]	; (4014fc <xQueueGenericSendFromISR+0x8c>)
  40149a:	4798      	blx	r3
  40149c:	4606      	mov	r6, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40149e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4014a2:	429a      	cmp	r2, r3
  4014a4:	d218      	bcs.n	4014d8 <xQueueGenericSendFromISR+0x68>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4014a6:	4620      	mov	r0, r4
  4014a8:	4629      	mov	r1, r5
  4014aa:	4642      	mov	r2, r8
  4014ac:	4b14      	ldr	r3, [pc, #80]	; (401500 <xQueueGenericSendFromISR+0x90>)
  4014ae:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4014b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014b2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014b6:	d10a      	bne.n	4014ce <xQueueGenericSendFromISR+0x5e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4014b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014ba:	b17b      	cbz	r3, 4014dc <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4014bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014c0:	4b10      	ldr	r3, [pc, #64]	; (401504 <xQueueGenericSendFromISR+0x94>)
  4014c2:	4798      	blx	r3
  4014c4:	b160      	cbz	r0, 4014e0 <xQueueGenericSendFromISR+0x70>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  4014c6:	b16f      	cbz	r7, 4014e4 <xQueueGenericSendFromISR+0x74>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  4014c8:	2401      	movs	r4, #1
  4014ca:	603c      	str	r4, [r7, #0]
  4014cc:	e00b      	b.n	4014e6 <xQueueGenericSendFromISR+0x76>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  4014ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014d0:	3301      	adds	r3, #1
  4014d2:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  4014d4:	2401      	movs	r4, #1
  4014d6:	e006      	b.n	4014e6 <xQueueGenericSendFromISR+0x76>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  4014d8:	2400      	movs	r4, #0
  4014da:	e004      	b.n	4014e6 <xQueueGenericSendFromISR+0x76>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  4014dc:	2401      	movs	r4, #1
  4014de:	e002      	b.n	4014e6 <xQueueGenericSendFromISR+0x76>
  4014e0:	2401      	movs	r4, #1
  4014e2:	e000      	b.n	4014e6 <xQueueGenericSendFromISR+0x76>
  4014e4:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  4014e6:	4630      	mov	r0, r6
  4014e8:	4b07      	ldr	r3, [pc, #28]	; (401508 <xQueueGenericSendFromISR+0x98>)
  4014ea:	4798      	blx	r3

	return xReturn;
}
  4014ec:	4620      	mov	r0, r4
  4014ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014f2:	bf00      	nop
  4014f4:	0040756c 	.word	0x0040756c
  4014f8:	004043c1 	.word	0x004043c1
  4014fc:	00400ea5 	.word	0x00400ea5
  401500:	00401141 	.word	0x00401141
  401504:	00401e9d 	.word	0x00401e9d
  401508:	00400ecd 	.word	0x00400ecd

0040150c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  40150c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401510:	b085      	sub	sp, #20
  401512:	4689      	mov	r9, r1
  401514:	9201      	str	r2, [sp, #4]
  401516:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  401518:	4604      	mov	r4, r0
  40151a:	b920      	cbnz	r0, 401526 <xQueueGenericReceive+0x1a>
  40151c:	4845      	ldr	r0, [pc, #276]	; (401634 <xQueueGenericReceive+0x128>)
  40151e:	f240 31ce 	movw	r1, #974	; 0x3ce
  401522:	4b45      	ldr	r3, [pc, #276]	; (401638 <xQueueGenericReceive+0x12c>)
  401524:	4798      	blx	r3
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401526:	f1b9 0f00 	cmp.w	r9, #0
  40152a:	d106      	bne.n	40153a <xQueueGenericReceive+0x2e>
  40152c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40152e:	b123      	cbz	r3, 40153a <xQueueGenericReceive+0x2e>
  401530:	4840      	ldr	r0, [pc, #256]	; (401634 <xQueueGenericReceive+0x128>)
  401532:	f240 31cf 	movw	r1, #975	; 0x3cf
  401536:	4b40      	ldr	r3, [pc, #256]	; (401638 <xQueueGenericReceive+0x12c>)
  401538:	4798      	blx	r3
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  40153a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40153c:	4d3f      	ldr	r5, [pc, #252]	; (40163c <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40153e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 40166c <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  401542:	4e3f      	ldr	r6, [pc, #252]	; (401640 <xQueueGenericReceive+0x134>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401544:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  401546:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401548:	b343      	cbz	r3, 40159c <xQueueGenericReceive+0x90>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  40154a:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40154c:	4620      	mov	r0, r4
  40154e:	4649      	mov	r1, r9
  401550:	4b3c      	ldr	r3, [pc, #240]	; (401644 <xQueueGenericReceive+0x138>)
  401552:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  401554:	f1ba 0f00 	cmp.w	sl, #0
  401558:	d112      	bne.n	401580 <xQueueGenericReceive+0x74>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  40155a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40155c:	3b01      	subs	r3, #1
  40155e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401560:	6823      	ldr	r3, [r4, #0]
  401562:	b913      	cbnz	r3, 40156a <xQueueGenericReceive+0x5e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  401564:	4b38      	ldr	r3, [pc, #224]	; (401648 <xQueueGenericReceive+0x13c>)
  401566:	4798      	blx	r3
  401568:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40156a:	6923      	ldr	r3, [r4, #16]
  40156c:	b193      	cbz	r3, 401594 <xQueueGenericReceive+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40156e:	f104 0010 	add.w	r0, r4, #16
  401572:	4b36      	ldr	r3, [pc, #216]	; (40164c <xQueueGenericReceive+0x140>)
  401574:	4798      	blx	r3
  401576:	2801      	cmp	r0, #1
  401578:	d10c      	bne.n	401594 <xQueueGenericReceive+0x88>
						{
							portYIELD_WITHIN_API();
  40157a:	4b35      	ldr	r3, [pc, #212]	; (401650 <xQueueGenericReceive+0x144>)
  40157c:	4798      	blx	r3
  40157e:	e009      	b.n	401594 <xQueueGenericReceive+0x88>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  401580:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401582:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401584:	b133      	cbz	r3, 401594 <xQueueGenericReceive+0x88>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401586:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40158a:	4b30      	ldr	r3, [pc, #192]	; (40164c <xQueueGenericReceive+0x140>)
  40158c:	4798      	blx	r3
  40158e:	b108      	cbz	r0, 401594 <xQueueGenericReceive+0x88>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  401590:	4b2f      	ldr	r3, [pc, #188]	; (401650 <xQueueGenericReceive+0x144>)
  401592:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  401594:	4b2a      	ldr	r3, [pc, #168]	; (401640 <xQueueGenericReceive+0x134>)
  401596:	4798      	blx	r3
				return pdPASS;
  401598:	2001      	movs	r0, #1
  40159a:	e048      	b.n	40162e <xQueueGenericReceive+0x122>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  40159c:	9b01      	ldr	r3, [sp, #4]
  40159e:	b91b      	cbnz	r3, 4015a8 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4015a0:	4b27      	ldr	r3, [pc, #156]	; (401640 <xQueueGenericReceive+0x134>)
  4015a2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  4015a4:	2000      	movs	r0, #0
  4015a6:	e042      	b.n	40162e <xQueueGenericReceive+0x122>
				}
				else if( xEntryTimeSet == pdFALSE )
  4015a8:	b917      	cbnz	r7, 4015b0 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4015aa:	a802      	add	r0, sp, #8
  4015ac:	47c0      	blx	r8
					xEntryTimeSet = pdTRUE;
  4015ae:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  4015b0:	47b0      	blx	r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4015b2:	4b28      	ldr	r3, [pc, #160]	; (401654 <xQueueGenericReceive+0x148>)
  4015b4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4015b6:	47a8      	blx	r5
  4015b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4015ba:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015be:	bf04      	itt	eq
  4015c0:	2300      	moveq	r3, #0
  4015c2:	6463      	streq	r3, [r4, #68]	; 0x44
  4015c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015ca:	bf04      	itt	eq
  4015cc:	2300      	moveq	r3, #0
  4015ce:	64a3      	streq	r3, [r4, #72]	; 0x48
  4015d0:	47b0      	blx	r6

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4015d2:	a802      	add	r0, sp, #8
  4015d4:	a901      	add	r1, sp, #4
  4015d6:	4b20      	ldr	r3, [pc, #128]	; (401658 <xQueueGenericReceive+0x14c>)
  4015d8:	4798      	blx	r3
  4015da:	bb10      	cbnz	r0, 401622 <xQueueGenericReceive+0x116>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4015dc:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  4015de:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4015e2:	47b0      	blx	r6
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4015e4:	f1bb 0f00 	cmp.w	fp, #0
  4015e8:	d115      	bne.n	401616 <xQueueGenericReceive+0x10a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4015ea:	6823      	ldr	r3, [r4, #0]
  4015ec:	b923      	cbnz	r3, 4015f8 <xQueueGenericReceive+0xec>
					{
						portENTER_CRITICAL();
  4015ee:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4015f0:	6860      	ldr	r0, [r4, #4]
  4015f2:	4b1a      	ldr	r3, [pc, #104]	; (40165c <xQueueGenericReceive+0x150>)
  4015f4:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  4015f6:	47b0      	blx	r6
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4015f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015fc:	9901      	ldr	r1, [sp, #4]
  4015fe:	4b18      	ldr	r3, [pc, #96]	; (401660 <xQueueGenericReceive+0x154>)
  401600:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401602:	4620      	mov	r0, r4
  401604:	4b17      	ldr	r3, [pc, #92]	; (401664 <xQueueGenericReceive+0x158>)
  401606:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401608:	4b17      	ldr	r3, [pc, #92]	; (401668 <xQueueGenericReceive+0x15c>)
  40160a:	4798      	blx	r3
  40160c:	2800      	cmp	r0, #0
  40160e:	d199      	bne.n	401544 <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
  401610:	4b0f      	ldr	r3, [pc, #60]	; (401650 <xQueueGenericReceive+0x144>)
  401612:	4798      	blx	r3
  401614:	e796      	b.n	401544 <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401616:	4620      	mov	r0, r4
  401618:	4b12      	ldr	r3, [pc, #72]	; (401664 <xQueueGenericReceive+0x158>)
  40161a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40161c:	4b12      	ldr	r3, [pc, #72]	; (401668 <xQueueGenericReceive+0x15c>)
  40161e:	4798      	blx	r3
  401620:	e790      	b.n	401544 <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  401622:	4620      	mov	r0, r4
  401624:	4b0f      	ldr	r3, [pc, #60]	; (401664 <xQueueGenericReceive+0x158>)
  401626:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401628:	4b0f      	ldr	r3, [pc, #60]	; (401668 <xQueueGenericReceive+0x15c>)
  40162a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40162c:	2000      	movs	r0, #0
		}
	}
}
  40162e:	b005      	add	sp, #20
  401630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401634:	0040756c 	.word	0x0040756c
  401638:	004043c1 	.word	0x004043c1
  40163c:	00400eb5 	.word	0x00400eb5
  401640:	00400ed5 	.word	0x00400ed5
  401644:	004011a5 	.word	0x004011a5
  401648:	00401fed 	.word	0x00401fed
  40164c:	00401e9d 	.word	0x00401e9d
  401650:	00400e95 	.word	0x00400e95
  401654:	00401995 	.word	0x00401995
  401658:	00401f55 	.word	0x00401f55
  40165c:	00402019 	.word	0x00402019
  401660:	00401db1 	.word	0x00401db1
  401664:	004011cd 	.word	0x004011cd
  401668:	00401b39 	.word	0x00401b39
  40166c:	00401f25 	.word	0x00401f25

00401670 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  401670:	b538      	push	{r3, r4, r5, lr}
  401672:	4604      	mov	r4, r0
  401674:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401676:	4b0d      	ldr	r3, [pc, #52]	; (4016ac <vQueueWaitForMessageRestricted+0x3c>)
  401678:	4798      	blx	r3
  40167a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40167c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401680:	bf04      	itt	eq
  401682:	2300      	moveq	r3, #0
  401684:	6463      	streq	r3, [r4, #68]	; 0x44
  401686:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401688:	f1b3 3fff 	cmp.w	r3, #4294967295
  40168c:	bf04      	itt	eq
  40168e:	2300      	moveq	r3, #0
  401690:	64a3      	streq	r3, [r4, #72]	; 0x48
  401692:	4b07      	ldr	r3, [pc, #28]	; (4016b0 <vQueueWaitForMessageRestricted+0x40>)
  401694:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  401696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401698:	b923      	cbnz	r3, 4016a4 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40169a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40169e:	4629      	mov	r1, r5
  4016a0:	4b04      	ldr	r3, [pc, #16]	; (4016b4 <vQueueWaitForMessageRestricted+0x44>)
  4016a2:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  4016a4:	4620      	mov	r0, r4
  4016a6:	4b04      	ldr	r3, [pc, #16]	; (4016b8 <vQueueWaitForMessageRestricted+0x48>)
  4016a8:	4798      	blx	r3
  4016aa:	bd38      	pop	{r3, r4, r5, pc}
  4016ac:	00400eb5 	.word	0x00400eb5
  4016b0:	00400ed5 	.word	0x00400ed5
  4016b4:	00401e35 	.word	0x00401e35
  4016b8:	004011cd 	.word	0x004011cd

004016bc <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  4016bc:	b510      	push	{r4, lr}
  4016be:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4016c0:	4b0e      	ldr	r3, [pc, #56]	; (4016fc <prvAddCurrentTaskToDelayedList+0x40>)
  4016c2:	681b      	ldr	r3, [r3, #0]
  4016c4:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4016c6:	4b0e      	ldr	r3, [pc, #56]	; (401700 <prvAddCurrentTaskToDelayedList+0x44>)
  4016c8:	681b      	ldr	r3, [r3, #0]
  4016ca:	4298      	cmp	r0, r3
  4016cc:	d207      	bcs.n	4016de <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4016ce:	4b0d      	ldr	r3, [pc, #52]	; (401704 <prvAddCurrentTaskToDelayedList+0x48>)
  4016d0:	6818      	ldr	r0, [r3, #0]
  4016d2:	4b0a      	ldr	r3, [pc, #40]	; (4016fc <prvAddCurrentTaskToDelayedList+0x40>)
  4016d4:	6819      	ldr	r1, [r3, #0]
  4016d6:	3104      	adds	r1, #4
  4016d8:	4b0b      	ldr	r3, [pc, #44]	; (401708 <prvAddCurrentTaskToDelayedList+0x4c>)
  4016da:	4798      	blx	r3
  4016dc:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4016de:	4b0b      	ldr	r3, [pc, #44]	; (40170c <prvAddCurrentTaskToDelayedList+0x50>)
  4016e0:	6818      	ldr	r0, [r3, #0]
  4016e2:	4b06      	ldr	r3, [pc, #24]	; (4016fc <prvAddCurrentTaskToDelayedList+0x40>)
  4016e4:	6819      	ldr	r1, [r3, #0]
  4016e6:	3104      	adds	r1, #4
  4016e8:	4b07      	ldr	r3, [pc, #28]	; (401708 <prvAddCurrentTaskToDelayedList+0x4c>)
  4016ea:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4016ec:	4b08      	ldr	r3, [pc, #32]	; (401710 <prvAddCurrentTaskToDelayedList+0x54>)
  4016ee:	681b      	ldr	r3, [r3, #0]
  4016f0:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
  4016f2:	bf3c      	itt	cc
  4016f4:	4b06      	ldrcc	r3, [pc, #24]	; (401710 <prvAddCurrentTaskToDelayedList+0x54>)
  4016f6:	601c      	strcc	r4, [r3, #0]
  4016f8:	bd10      	pop	{r4, pc}
  4016fa:	bf00      	nop
  4016fc:	20018ab8 	.word	0x20018ab8
  401700:	20018944 	.word	0x20018944
  401704:	20018a74 	.word	0x20018a74
  401708:	00400dc9 	.word	0x00400dc9
  40170c:	20018a8c 	.word	0x20018a8c
  401710:	2000001c 	.word	0x2000001c

00401714 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  401714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401718:	b083      	sub	sp, #12
  40171a:	4688      	mov	r8, r1
  40171c:	4615      	mov	r5, r2
  40171e:	9301      	str	r3, [sp, #4]
  401720:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  401722:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  401726:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  401728:	9000      	str	r0, [sp, #0]
  40172a:	b920      	cbnz	r0, 401736 <xTaskGenericCreate+0x22>
  40172c:	485f      	ldr	r0, [pc, #380]	; (4018ac <xTaskGenericCreate+0x198>)
  40172e:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
  401732:	4b5f      	ldr	r3, [pc, #380]	; (4018b0 <xTaskGenericCreate+0x19c>)
  401734:	4798      	blx	r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  401736:	2f0e      	cmp	r7, #14
  401738:	d904      	bls.n	401744 <xTaskGenericCreate+0x30>
  40173a:	485c      	ldr	r0, [pc, #368]	; (4018ac <xTaskGenericCreate+0x198>)
  40173c:	f240 11ef 	movw	r1, #495	; 0x1ef
  401740:	4b5b      	ldr	r3, [pc, #364]	; (4018b0 <xTaskGenericCreate+0x19c>)
  401742:	4798      	blx	r3
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401744:	2050      	movs	r0, #80	; 0x50
  401746:	4b5b      	ldr	r3, [pc, #364]	; (4018b4 <xTaskGenericCreate+0x1a0>)
  401748:	4798      	blx	r3

	if( pxNewTCB != NULL )
  40174a:	4604      	mov	r4, r0
  40174c:	2800      	cmp	r0, #0
  40174e:	f000 80a7 	beq.w	4018a0 <xTaskGenericCreate+0x18c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401752:	2e00      	cmp	r6, #0
  401754:	f040 80a1 	bne.w	40189a <xTaskGenericCreate+0x186>
  401758:	00a8      	lsls	r0, r5, #2
  40175a:	4b56      	ldr	r3, [pc, #344]	; (4018b4 <xTaskGenericCreate+0x1a0>)
  40175c:	4798      	blx	r3
  40175e:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  401760:	b918      	cbnz	r0, 40176a <xTaskGenericCreate+0x56>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  401762:	4620      	mov	r0, r4
  401764:	4b54      	ldr	r3, [pc, #336]	; (4018b8 <xTaskGenericCreate+0x1a4>)
  401766:	4798      	blx	r3
  401768:	e09a      	b.n	4018a0 <xTaskGenericCreate+0x18c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  40176a:	21a5      	movs	r1, #165	; 0xa5
  40176c:	00aa      	lsls	r2, r5, #2
  40176e:	4b53      	ldr	r3, [pc, #332]	; (4018bc <xTaskGenericCreate+0x1a8>)
  401770:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  401772:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  401776:	3d01      	subs	r5, #1
  401778:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40177a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  40177e:	f025 0507 	bic.w	r5, r5, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  401782:	f104 0034 	add.w	r0, r4, #52	; 0x34
  401786:	4641      	mov	r1, r8
  401788:	220a      	movs	r2, #10
  40178a:	4b4d      	ldr	r3, [pc, #308]	; (4018c0 <xTaskGenericCreate+0x1ac>)
  40178c:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  40178e:	f04f 0a00 	mov.w	sl, #0
  401792:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d
  401796:	463e      	mov	r6, r7
  401798:	2f0e      	cmp	r7, #14
  40179a:	bf28      	it	cs
  40179c:	260e      	movcs	r6, #14
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
  40179e:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4017a0:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4017a2:	f104 0804 	add.w	r8, r4, #4
  4017a6:	4640      	mov	r0, r8
  4017a8:	f8df b164 	ldr.w	fp, [pc, #356]	; 401910 <xTaskGenericCreate+0x1fc>
  4017ac:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4017ae:	f104 0018 	add.w	r0, r4, #24
  4017b2:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4017b4:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  4017b6:	f1c6 060f 	rsb	r6, r6, #15
  4017ba:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4017bc:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
  4017be:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4017c2:	4628      	mov	r0, r5
  4017c4:	9900      	ldr	r1, [sp, #0]
  4017c6:	9a01      	ldr	r2, [sp, #4]
  4017c8:	4b3e      	ldr	r3, [pc, #248]	; (4018c4 <xTaskGenericCreate+0x1b0>)
  4017ca:	4798      	blx	r3
  4017cc:	6020      	str	r0, [r4, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  4017ce:	f1b9 0f00 	cmp.w	r9, #0
  4017d2:	d001      	beq.n	4017d8 <xTaskGenericCreate+0xc4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  4017d4:	f8c9 4000 	str.w	r4, [r9]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  4017d8:	4b3b      	ldr	r3, [pc, #236]	; (4018c8 <xTaskGenericCreate+0x1b4>)
  4017da:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4017dc:	4a3b      	ldr	r2, [pc, #236]	; (4018cc <xTaskGenericCreate+0x1b8>)
  4017de:	6813      	ldr	r3, [r2, #0]
  4017e0:	3301      	adds	r3, #1
  4017e2:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4017e4:	4b3a      	ldr	r3, [pc, #232]	; (4018d0 <xTaskGenericCreate+0x1bc>)
  4017e6:	681b      	ldr	r3, [r3, #0]
  4017e8:	bb0b      	cbnz	r3, 40182e <xTaskGenericCreate+0x11a>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4017ea:	4b39      	ldr	r3, [pc, #228]	; (4018d0 <xTaskGenericCreate+0x1bc>)
  4017ec:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4017ee:	6813      	ldr	r3, [r2, #0]
  4017f0:	2b01      	cmp	r3, #1
  4017f2:	d126      	bne.n	401842 <xTaskGenericCreate+0x12e>
  4017f4:	4d37      	ldr	r5, [pc, #220]	; (4018d4 <xTaskGenericCreate+0x1c0>)
  4017f6:	f505 7996 	add.w	r9, r5, #300	; 0x12c
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4017fa:	4e37      	ldr	r6, [pc, #220]	; (4018d8 <xTaskGenericCreate+0x1c4>)
  4017fc:	4628      	mov	r0, r5
  4017fe:	47b0      	blx	r6
  401800:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401802:	454d      	cmp	r5, r9
  401804:	d1fa      	bne.n	4017fc <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  401806:	f8df 910c 	ldr.w	r9, [pc, #268]	; 401914 <xTaskGenericCreate+0x200>
  40180a:	4648      	mov	r0, r9
  40180c:	4d32      	ldr	r5, [pc, #200]	; (4018d8 <xTaskGenericCreate+0x1c4>)
  40180e:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  401810:	4e32      	ldr	r6, [pc, #200]	; (4018dc <xTaskGenericCreate+0x1c8>)
  401812:	4630      	mov	r0, r6
  401814:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
  401816:	4832      	ldr	r0, [pc, #200]	; (4018e0 <xTaskGenericCreate+0x1cc>)
  401818:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  40181a:	4832      	ldr	r0, [pc, #200]	; (4018e4 <xTaskGenericCreate+0x1d0>)
  40181c:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  40181e:	4832      	ldr	r0, [pc, #200]	; (4018e8 <xTaskGenericCreate+0x1d4>)
  401820:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401822:	4b32      	ldr	r3, [pc, #200]	; (4018ec <xTaskGenericCreate+0x1d8>)
  401824:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401828:	4b31      	ldr	r3, [pc, #196]	; (4018f0 <xTaskGenericCreate+0x1dc>)
  40182a:	601e      	str	r6, [r3, #0]
  40182c:	e009      	b.n	401842 <xTaskGenericCreate+0x12e>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40182e:	4b31      	ldr	r3, [pc, #196]	; (4018f4 <xTaskGenericCreate+0x1e0>)
  401830:	681b      	ldr	r3, [r3, #0]
  401832:	b933      	cbnz	r3, 401842 <xTaskGenericCreate+0x12e>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401834:	4b26      	ldr	r3, [pc, #152]	; (4018d0 <xTaskGenericCreate+0x1bc>)
  401836:	681b      	ldr	r3, [r3, #0]
  401838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40183a:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
  40183c:	bf24      	itt	cs
  40183e:	4b24      	ldrcs	r3, [pc, #144]	; (4018d0 <xTaskGenericCreate+0x1bc>)
  401840:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  401842:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401844:	4b2c      	ldr	r3, [pc, #176]	; (4018f8 <xTaskGenericCreate+0x1e4>)
  401846:	681b      	ldr	r3, [r3, #0]
  401848:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  40184a:	bf84      	itt	hi
  40184c:	4b2a      	ldrhi	r3, [pc, #168]	; (4018f8 <xTaskGenericCreate+0x1e4>)
  40184e:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401850:	4a2a      	ldr	r2, [pc, #168]	; (4018fc <xTaskGenericCreate+0x1e8>)
  401852:	6813      	ldr	r3, [r2, #0]
  401854:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  401856:	3301      	adds	r3, #1
  401858:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  40185a:	4929      	ldr	r1, [pc, #164]	; (401900 <xTaskGenericCreate+0x1ec>)
  40185c:	680a      	ldr	r2, [r1, #0]
  40185e:	2301      	movs	r3, #1
  401860:	4083      	lsls	r3, r0
  401862:	4313      	orrs	r3, r2
  401864:	600b      	str	r3, [r1, #0]
  401866:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40186a:	4b1a      	ldr	r3, [pc, #104]	; (4018d4 <xTaskGenericCreate+0x1c0>)
  40186c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401870:	4641      	mov	r1, r8
  401872:	4b24      	ldr	r3, [pc, #144]	; (401904 <xTaskGenericCreate+0x1f0>)
  401874:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401876:	4b24      	ldr	r3, [pc, #144]	; (401908 <xTaskGenericCreate+0x1f4>)
  401878:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  40187a:	4b1e      	ldr	r3, [pc, #120]	; (4018f4 <xTaskGenericCreate+0x1e0>)
  40187c:	681b      	ldr	r3, [r3, #0]
  40187e:	b143      	cbz	r3, 401892 <xTaskGenericCreate+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401880:	4b13      	ldr	r3, [pc, #76]	; (4018d0 <xTaskGenericCreate+0x1bc>)
  401882:	681b      	ldr	r3, [r3, #0]
  401884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401886:	429f      	cmp	r7, r3
  401888:	d905      	bls.n	401896 <xTaskGenericCreate+0x182>
			{
				portYIELD_WITHIN_API();
  40188a:	4b20      	ldr	r3, [pc, #128]	; (40190c <xTaskGenericCreate+0x1f8>)
  40188c:	4798      	blx	r3
  40188e:	2001      	movs	r0, #1
  401890:	e008      	b.n	4018a4 <xTaskGenericCreate+0x190>
  401892:	2001      	movs	r0, #1
  401894:	e006      	b.n	4018a4 <xTaskGenericCreate+0x190>
  401896:	2001      	movs	r0, #1
  401898:	e004      	b.n	4018a4 <xTaskGenericCreate+0x190>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  40189a:	6306      	str	r6, [r0, #48]	; 0x30
  40189c:	4630      	mov	r0, r6
  40189e:	e764      	b.n	40176a <xTaskGenericCreate+0x56>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4018a0:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
  4018a4:	b003      	add	sp, #12
  4018a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018aa:	bf00      	nop
  4018ac:	00407604 	.word	0x00407604
  4018b0:	004043c1 	.word	0x004043c1
  4018b4:	00401029 	.word	0x00401029
  4018b8:	00401109 	.word	0x00401109
  4018bc:	00404689 	.word	0x00404689
  4018c0:	004048f5 	.word	0x004048f5
  4018c4:	00400e55 	.word	0x00400e55
  4018c8:	00400eb5 	.word	0x00400eb5
  4018cc:	20018a90 	.word	0x20018a90
  4018d0:	20018ab8 	.word	0x20018ab8
  4018d4:	20018948 	.word	0x20018948
  4018d8:	00400d8d 	.word	0x00400d8d
  4018dc:	20018ae4 	.word	0x20018ae4
  4018e0:	20018a94 	.word	0x20018a94
  4018e4:	20018a78 	.word	0x20018a78
  4018e8:	20018abc 	.word	0x20018abc
  4018ec:	20018a8c 	.word	0x20018a8c
  4018f0:	20018a74 	.word	0x20018a74
  4018f4:	20018aa8 	.word	0x20018aa8
  4018f8:	20018b04 	.word	0x20018b04
  4018fc:	20018ab4 	.word	0x20018ab4
  401900:	2001893c 	.word	0x2001893c
  401904:	00400dad 	.word	0x00400dad
  401908:	00400ed5 	.word	0x00400ed5
  40190c:	00400e95 	.word	0x00400e95
  401910:	00400da5 	.word	0x00400da5
  401914:	20018ad0 	.word	0x20018ad0

00401918 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  401918:	b510      	push	{r4, lr}
  40191a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  40191c:	2300      	movs	r3, #0
  40191e:	9300      	str	r3, [sp, #0]
  401920:	9301      	str	r3, [sp, #4]
  401922:	9302      	str	r3, [sp, #8]
  401924:	9303      	str	r3, [sp, #12]
  401926:	4810      	ldr	r0, [pc, #64]	; (401968 <vTaskStartScheduler+0x50>)
  401928:	4910      	ldr	r1, [pc, #64]	; (40196c <vTaskStartScheduler+0x54>)
  40192a:	2282      	movs	r2, #130	; 0x82
  40192c:	4c10      	ldr	r4, [pc, #64]	; (401970 <vTaskStartScheduler+0x58>)
  40192e:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401930:	2801      	cmp	r0, #1
  401932:	d110      	bne.n	401956 <vTaskStartScheduler+0x3e>
		{
			xReturn = xTimerCreateTimerTask();
  401934:	4b0f      	ldr	r3, [pc, #60]	; (401974 <vTaskStartScheduler+0x5c>)
  401936:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
  401938:	2801      	cmp	r0, #1
  40193a:	d10c      	bne.n	401956 <vTaskStartScheduler+0x3e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  40193c:	4b0e      	ldr	r3, [pc, #56]	; (401978 <vTaskStartScheduler+0x60>)
  40193e:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  401940:	2201      	movs	r2, #1
  401942:	4b0e      	ldr	r3, [pc, #56]	; (40197c <vTaskStartScheduler+0x64>)
  401944:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  401946:	2200      	movs	r2, #0
  401948:	4b0d      	ldr	r3, [pc, #52]	; (401980 <vTaskStartScheduler+0x68>)
  40194a:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
  40194c:	4b0d      	ldr	r3, [pc, #52]	; (401984 <vTaskStartScheduler+0x6c>)
  40194e:	4798      	blx	r3

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401950:	4b0d      	ldr	r3, [pc, #52]	; (401988 <vTaskStartScheduler+0x70>)
  401952:	4798      	blx	r3
  401954:	e005      	b.n	401962 <vTaskStartScheduler+0x4a>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  401956:	b920      	cbnz	r0, 401962 <vTaskStartScheduler+0x4a>
  401958:	480c      	ldr	r0, [pc, #48]	; (40198c <vTaskStartScheduler+0x74>)
  40195a:	f240 5116 	movw	r1, #1302	; 0x516
  40195e:	4b0c      	ldr	r3, [pc, #48]	; (401990 <vTaskStartScheduler+0x78>)
  401960:	4798      	blx	r3
}
  401962:	b004      	add	sp, #16
  401964:	bd10      	pop	{r4, pc}
  401966:	bf00      	nop
  401968:	00401c45 	.word	0x00401c45
  40196c:	00407644 	.word	0x00407644
  401970:	00401715 	.word	0x00401715
  401974:	004021cd 	.word	0x004021cd
  401978:	00400ea5 	.word	0x00400ea5
  40197c:	20018aa8 	.word	0x20018aa8
  401980:	20018944 	.word	0x20018944
  401984:	00404415 	.word	0x00404415
  401988:	00400f85 	.word	0x00400f85
  40198c:	00407604 	.word	0x00407604
  401990:	004043c1 	.word	0x004043c1

00401994 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  401994:	4a02      	ldr	r2, [pc, #8]	; (4019a0 <vTaskSuspendAll+0xc>)
  401996:	6813      	ldr	r3, [r2, #0]
  401998:	3301      	adds	r3, #1
  40199a:	6013      	str	r3, [r2, #0]
  40199c:	4770      	bx	lr
  40199e:	bf00      	nop
  4019a0:	20018af8 	.word	0x20018af8

004019a4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  4019a4:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  4019a6:	4b04      	ldr	r3, [pc, #16]	; (4019b8 <xTaskGetTickCount+0x14>)
  4019a8:	4798      	blx	r3
	{
		xTicks = xTickCount;
  4019aa:	4b04      	ldr	r3, [pc, #16]	; (4019bc <xTaskGetTickCount+0x18>)
  4019ac:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
  4019ae:	4b04      	ldr	r3, [pc, #16]	; (4019c0 <xTaskGetTickCount+0x1c>)
  4019b0:	4798      	blx	r3

	return xTicks;
}
  4019b2:	4620      	mov	r0, r4
  4019b4:	bd10      	pop	{r4, pc}
  4019b6:	bf00      	nop
  4019b8:	00400eb5 	.word	0x00400eb5
  4019bc:	20018944 	.word	0x20018944
  4019c0:	00400ed5 	.word	0x00400ed5

004019c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
  4019c4:	b510      	push	{r4, lr}
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  4019c6:	4b04      	ldr	r3, [pc, #16]	; (4019d8 <xTaskGetTickCountFromISR+0x14>)
  4019c8:	4798      	blx	r3
	xReturn = xTickCount;
  4019ca:	4b04      	ldr	r3, [pc, #16]	; (4019dc <xTaskGetTickCountFromISR+0x18>)
  4019cc:	681c      	ldr	r4, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  4019ce:	4b04      	ldr	r3, [pc, #16]	; (4019e0 <xTaskGetTickCountFromISR+0x1c>)
  4019d0:	4798      	blx	r3

	return xReturn;
}
  4019d2:	4620      	mov	r0, r4
  4019d4:	bd10      	pop	{r4, pc}
  4019d6:	bf00      	nop
  4019d8:	00400ea5 	.word	0x00400ea5
  4019dc:	20018944 	.word	0x20018944
  4019e0:	00400ecd 	.word	0x00400ecd

004019e4 <pcTaskGetTaskName>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_pcTaskGetTaskName == 1 )

	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
  4019e4:	b510      	push	{r4, lr}
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
  4019e6:	4604      	mov	r4, r0
  4019e8:	b938      	cbnz	r0, 4019fa <pcTaskGetTaskName+0x16>
  4019ea:	4b05      	ldr	r3, [pc, #20]	; (401a00 <pcTaskGetTaskName+0x1c>)
  4019ec:	681c      	ldr	r4, [r3, #0]
		configASSERT( pxTCB );
  4019ee:	b924      	cbnz	r4, 4019fa <pcTaskGetTaskName+0x16>
  4019f0:	4804      	ldr	r0, [pc, #16]	; (401a04 <pcTaskGetTaskName+0x20>)
  4019f2:	f240 51cc 	movw	r1, #1484	; 0x5cc
  4019f6:	4b04      	ldr	r3, [pc, #16]	; (401a08 <pcTaskGetTaskName+0x24>)
  4019f8:	4798      	blx	r3
		return &( pxTCB->pcTaskName[ 0 ] );
	}
  4019fa:	f104 0034 	add.w	r0, r4, #52	; 0x34
  4019fe:	bd10      	pop	{r4, pc}
  401a00:	20018ab8 	.word	0x20018ab8
  401a04:	00407604 	.word	0x00407604
  401a08:	004043c1 	.word	0x004043c1

00401a0c <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401a0c:	4b3d      	ldr	r3, [pc, #244]	; (401b04 <vTaskIncrementTick+0xf8>)
  401a0e:	681b      	ldr	r3, [r3, #0]
  401a10:	2b00      	cmp	r3, #0
  401a12:	d16f      	bne.n	401af4 <vTaskIncrementTick+0xe8>
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  401a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
	{
		++xTickCount;
  401a18:	4b3b      	ldr	r3, [pc, #236]	; (401b08 <vTaskIncrementTick+0xfc>)
  401a1a:	681a      	ldr	r2, [r3, #0]
  401a1c:	3201      	adds	r2, #1
  401a1e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  401a20:	681b      	ldr	r3, [r3, #0]
  401a22:	bb0b      	cbnz	r3, 401a68 <vTaskIncrementTick+0x5c>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  401a24:	4b39      	ldr	r3, [pc, #228]	; (401b0c <vTaskIncrementTick+0x100>)
  401a26:	681b      	ldr	r3, [r3, #0]
  401a28:	681b      	ldr	r3, [r3, #0]
  401a2a:	b123      	cbz	r3, 401a36 <vTaskIncrementTick+0x2a>
  401a2c:	4838      	ldr	r0, [pc, #224]	; (401b10 <vTaskIncrementTick+0x104>)
  401a2e:	f240 618f 	movw	r1, #1679	; 0x68f
  401a32:	4b38      	ldr	r3, [pc, #224]	; (401b14 <vTaskIncrementTick+0x108>)
  401a34:	4798      	blx	r3

			pxTemp = pxDelayedTaskList;
  401a36:	4b35      	ldr	r3, [pc, #212]	; (401b0c <vTaskIncrementTick+0x100>)
  401a38:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  401a3a:	4a37      	ldr	r2, [pc, #220]	; (401b18 <vTaskIncrementTick+0x10c>)
  401a3c:	6810      	ldr	r0, [r2, #0]
  401a3e:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  401a40:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
  401a42:	4936      	ldr	r1, [pc, #216]	; (401b1c <vTaskIncrementTick+0x110>)
  401a44:	680a      	ldr	r2, [r1, #0]
  401a46:	3201      	adds	r2, #1
  401a48:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401a4a:	681b      	ldr	r3, [r3, #0]
  401a4c:	681b      	ldr	r3, [r3, #0]
  401a4e:	b923      	cbnz	r3, 401a5a <vTaskIncrementTick+0x4e>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  401a50:	f04f 32ff 	mov.w	r2, #4294967295
  401a54:	4b32      	ldr	r3, [pc, #200]	; (401b20 <vTaskIncrementTick+0x114>)
  401a56:	601a      	str	r2, [r3, #0]
  401a58:	e006      	b.n	401a68 <vTaskIncrementTick+0x5c>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401a5a:	4b2c      	ldr	r3, [pc, #176]	; (401b0c <vTaskIncrementTick+0x100>)
  401a5c:	681b      	ldr	r3, [r3, #0]
  401a5e:	68db      	ldr	r3, [r3, #12]
  401a60:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401a62:	685a      	ldr	r2, [r3, #4]
  401a64:	4b2e      	ldr	r3, [pc, #184]	; (401b20 <vTaskIncrementTick+0x114>)
  401a66:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  401a68:	4b27      	ldr	r3, [pc, #156]	; (401b08 <vTaskIncrementTick+0xfc>)
  401a6a:	681a      	ldr	r2, [r3, #0]
  401a6c:	4b2c      	ldr	r3, [pc, #176]	; (401b20 <vTaskIncrementTick+0x114>)
  401a6e:	681b      	ldr	r3, [r3, #0]
  401a70:	429a      	cmp	r2, r3
  401a72:	d344      	bcc.n	401afe <vTaskIncrementTick+0xf2>
  401a74:	4b25      	ldr	r3, [pc, #148]	; (401b0c <vTaskIncrementTick+0x100>)
  401a76:	681b      	ldr	r3, [r3, #0]
  401a78:	681b      	ldr	r3, [r3, #0]
  401a7a:	b16b      	cbz	r3, 401a98 <vTaskIncrementTick+0x8c>
  401a7c:	4b23      	ldr	r3, [pc, #140]	; (401b0c <vTaskIncrementTick+0x100>)
  401a7e:	681b      	ldr	r3, [r3, #0]
  401a80:	68db      	ldr	r3, [r3, #12]
  401a82:	68dc      	ldr	r4, [r3, #12]
  401a84:	6863      	ldr	r3, [r4, #4]
  401a86:	4a20      	ldr	r2, [pc, #128]	; (401b08 <vTaskIncrementTick+0xfc>)
  401a88:	6812      	ldr	r2, [r2, #0]
  401a8a:	4293      	cmp	r3, r2
  401a8c:	d813      	bhi.n	401ab6 <vTaskIncrementTick+0xaa>
  401a8e:	4f25      	ldr	r7, [pc, #148]	; (401b24 <vTaskIncrementTick+0x118>)
  401a90:	4e25      	ldr	r6, [pc, #148]	; (401b28 <vTaskIncrementTick+0x11c>)
  401a92:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 401b34 <vTaskIncrementTick+0x128>
  401a96:	e012      	b.n	401abe <vTaskIncrementTick+0xb2>
  401a98:	f04f 32ff 	mov.w	r2, #4294967295
  401a9c:	4b20      	ldr	r3, [pc, #128]	; (401b20 <vTaskIncrementTick+0x114>)
  401a9e:	601a      	str	r2, [r3, #0]
  401aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401aa4:	4b19      	ldr	r3, [pc, #100]	; (401b0c <vTaskIncrementTick+0x100>)
  401aa6:	681b      	ldr	r3, [r3, #0]
  401aa8:	68db      	ldr	r3, [r3, #12]
  401aaa:	68dc      	ldr	r4, [r3, #12]
  401aac:	6863      	ldr	r3, [r4, #4]
  401aae:	4a16      	ldr	r2, [pc, #88]	; (401b08 <vTaskIncrementTick+0xfc>)
  401ab0:	6812      	ldr	r2, [r2, #0]
  401ab2:	4293      	cmp	r3, r2
  401ab4:	d903      	bls.n	401abe <vTaskIncrementTick+0xb2>
  401ab6:	4a1a      	ldr	r2, [pc, #104]	; (401b20 <vTaskIncrementTick+0x114>)
  401ab8:	6013      	str	r3, [r2, #0]
  401aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401abe:	1d25      	adds	r5, r4, #4
  401ac0:	4628      	mov	r0, r5
  401ac2:	47b8      	blx	r7
  401ac4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401ac6:	b113      	cbz	r3, 401ace <vTaskIncrementTick+0xc2>
  401ac8:	f104 0018 	add.w	r0, r4, #24
  401acc:	47b8      	blx	r7
  401ace:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ad0:	6832      	ldr	r2, [r6, #0]
  401ad2:	2301      	movs	r3, #1
  401ad4:	4083      	lsls	r3, r0
  401ad6:	4313      	orrs	r3, r2
  401ad8:	6033      	str	r3, [r6, #0]
  401ada:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ade:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  401ae2:	4629      	mov	r1, r5
  401ae4:	4b11      	ldr	r3, [pc, #68]	; (401b2c <vTaskIncrementTick+0x120>)
  401ae6:	4798      	blx	r3
  401ae8:	4b08      	ldr	r3, [pc, #32]	; (401b0c <vTaskIncrementTick+0x100>)
  401aea:	681b      	ldr	r3, [r3, #0]
  401aec:	681b      	ldr	r3, [r3, #0]
  401aee:	2b00      	cmp	r3, #0
  401af0:	d1d8      	bne.n	401aa4 <vTaskIncrementTick+0x98>
  401af2:	e7d1      	b.n	401a98 <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
  401af4:	4a0e      	ldr	r2, [pc, #56]	; (401b30 <vTaskIncrementTick+0x124>)
  401af6:	6813      	ldr	r3, [r2, #0]
  401af8:	3301      	adds	r3, #1
  401afa:	6013      	str	r3, [r2, #0]
  401afc:	4770      	bx	lr
  401afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b02:	bf00      	nop
  401b04:	20018af8 	.word	0x20018af8
  401b08:	20018944 	.word	0x20018944
  401b0c:	20018a8c 	.word	0x20018a8c
  401b10:	00407604 	.word	0x00407604
  401b14:	004043c1 	.word	0x004043c1
  401b18:	20018a74 	.word	0x20018a74
  401b1c:	20018b00 	.word	0x20018b00
  401b20:	2000001c 	.word	0x2000001c
  401b24:	00400e05 	.word	0x00400e05
  401b28:	2001893c 	.word	0x2001893c
  401b2c:	00400dad 	.word	0x00400dad
  401b30:	20018afc 	.word	0x20018afc
  401b34:	20018948 	.word	0x20018948

00401b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  401b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401b3c:	4b31      	ldr	r3, [pc, #196]	; (401c04 <xTaskResumeAll+0xcc>)
  401b3e:	681b      	ldr	r3, [r3, #0]
  401b40:	b923      	cbnz	r3, 401b4c <xTaskResumeAll+0x14>
  401b42:	4831      	ldr	r0, [pc, #196]	; (401c08 <xTaskResumeAll+0xd0>)
  401b44:	f44f 61aa 	mov.w	r1, #1360	; 0x550
  401b48:	4b30      	ldr	r3, [pc, #192]	; (401c0c <xTaskResumeAll+0xd4>)
  401b4a:	4798      	blx	r3
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401b4c:	4b30      	ldr	r3, [pc, #192]	; (401c10 <xTaskResumeAll+0xd8>)
  401b4e:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401b50:	4b2c      	ldr	r3, [pc, #176]	; (401c04 <xTaskResumeAll+0xcc>)
  401b52:	681a      	ldr	r2, [r3, #0]
  401b54:	3a01      	subs	r2, #1
  401b56:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401b58:	681b      	ldr	r3, [r3, #0]
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d14a      	bne.n	401bf4 <xTaskResumeAll+0xbc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  401b5e:	4b2d      	ldr	r3, [pc, #180]	; (401c14 <xTaskResumeAll+0xdc>)
  401b60:	681b      	ldr	r3, [r3, #0]
  401b62:	bb0b      	cbnz	r3, 401ba8 <xTaskResumeAll+0x70>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  401b64:	2400      	movs	r4, #0
  401b66:	e048      	b.n	401bfa <xTaskResumeAll+0xc2>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  401b68:	68f3      	ldr	r3, [r6, #12]
  401b6a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  401b6c:	f104 0018 	add.w	r0, r4, #24
  401b70:	47c8      	blx	r9
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401b72:	1d25      	adds	r5, r4, #4
  401b74:	4628      	mov	r0, r5
  401b76:	47c8      	blx	r9
					prvAddTaskToReadyQueue( pxTCB );
  401b78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401b7a:	f8d8 2000 	ldr.w	r2, [r8]
  401b7e:	2301      	movs	r3, #1
  401b80:	4083      	lsls	r3, r0
  401b82:	4313      	orrs	r3, r2
  401b84:	f8c8 3000 	str.w	r3, [r8]
  401b88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b8c:	4b22      	ldr	r3, [pc, #136]	; (401c18 <xTaskResumeAll+0xe0>)
  401b8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b92:	4629      	mov	r1, r5
  401b94:	4b21      	ldr	r3, [pc, #132]	; (401c1c <xTaskResumeAll+0xe4>)
  401b96:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401b98:	4b21      	ldr	r3, [pc, #132]	; (401c20 <xTaskResumeAll+0xe8>)
  401b9a:	681b      	ldr	r3, [r3, #0]
  401b9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
  401ba0:	429a      	cmp	r2, r3
  401ba2:	bf28      	it	cs
  401ba4:	2701      	movcs	r7, #1
  401ba6:	e005      	b.n	401bb4 <xTaskResumeAll+0x7c>
  401ba8:	2700      	movs	r7, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401baa:	4e1e      	ldr	r6, [pc, #120]	; (401c24 <xTaskResumeAll+0xec>)
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
  401bac:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401c3c <xTaskResumeAll+0x104>
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
  401bb0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401c40 <xTaskResumeAll+0x108>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401bb4:	6833      	ldr	r3, [r6, #0]
  401bb6:	2b00      	cmp	r3, #0
  401bb8:	d1d6      	bne.n	401b68 <xTaskResumeAll+0x30>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401bba:	4b1b      	ldr	r3, [pc, #108]	; (401c28 <xTaskResumeAll+0xf0>)
  401bbc:	681b      	ldr	r3, [r3, #0]
  401bbe:	b163      	cbz	r3, 401bda <xTaskResumeAll+0xa2>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401bc0:	4b19      	ldr	r3, [pc, #100]	; (401c28 <xTaskResumeAll+0xf0>)
  401bc2:	681b      	ldr	r3, [r3, #0]
  401bc4:	b17b      	cbz	r3, 401be6 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  401bc6:	4d19      	ldr	r5, [pc, #100]	; (401c2c <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
  401bc8:	4c17      	ldr	r4, [pc, #92]	; (401c28 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
  401bca:	47a8      	blx	r5
						--uxMissedTicks;
  401bcc:	6823      	ldr	r3, [r4, #0]
  401bce:	3b01      	subs	r3, #1
  401bd0:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401bd2:	6823      	ldr	r3, [r4, #0]
  401bd4:	2b00      	cmp	r3, #0
  401bd6:	d1f8      	bne.n	401bca <xTaskResumeAll+0x92>
  401bd8:	e005      	b.n	401be6 <xTaskResumeAll+0xae>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  401bda:	2f01      	cmp	r7, #1
  401bdc:	d003      	beq.n	401be6 <xTaskResumeAll+0xae>
  401bde:	4b14      	ldr	r3, [pc, #80]	; (401c30 <xTaskResumeAll+0xf8>)
  401be0:	681b      	ldr	r3, [r3, #0]
  401be2:	2b01      	cmp	r3, #1
  401be4:	d108      	bne.n	401bf8 <xTaskResumeAll+0xc0>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
  401be6:	2200      	movs	r2, #0
  401be8:	4b11      	ldr	r3, [pc, #68]	; (401c30 <xTaskResumeAll+0xf8>)
  401bea:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  401bec:	4b11      	ldr	r3, [pc, #68]	; (401c34 <xTaskResumeAll+0xfc>)
  401bee:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
  401bf0:	2401      	movs	r4, #1
  401bf2:	e002      	b.n	401bfa <xTaskResumeAll+0xc2>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  401bf4:	2400      	movs	r4, #0
  401bf6:	e000      	b.n	401bfa <xTaskResumeAll+0xc2>
  401bf8:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  401bfa:	4b0f      	ldr	r3, [pc, #60]	; (401c38 <xTaskResumeAll+0x100>)
  401bfc:	4798      	blx	r3

	return xAlreadyYielded;
}
  401bfe:	4620      	mov	r0, r4
  401c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401c04:	20018af8 	.word	0x20018af8
  401c08:	00407604 	.word	0x00407604
  401c0c:	004043c1 	.word	0x004043c1
  401c10:	00400eb5 	.word	0x00400eb5
  401c14:	20018a90 	.word	0x20018a90
  401c18:	20018948 	.word	0x20018948
  401c1c:	00400dad 	.word	0x00400dad
  401c20:	20018ab8 	.word	0x20018ab8
  401c24:	20018a94 	.word	0x20018a94
  401c28:	20018afc 	.word	0x20018afc
  401c2c:	00401a0d 	.word	0x00401a0d
  401c30:	20018ab0 	.word	0x20018ab0
  401c34:	00400e95 	.word	0x00400e95
  401c38:	00400ed5 	.word	0x00400ed5
  401c3c:	00400e05 	.word	0x00400e05
  401c40:	2001893c 	.word	0x2001893c

00401c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401c44:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401c46:	4d15      	ldr	r5, [pc, #84]	; (401c9c <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401c48:	4e15      	ldr	r6, [pc, #84]	; (401ca0 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  401c4a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 401cc0 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
  401c4e:	4f15      	ldr	r7, [pc, #84]	; (401ca4 <prvIdleTask+0x60>)
  401c50:	e019      	b.n	401c86 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  401c52:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401c54:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
  401c56:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  401c58:	b1ac      	cbz	r4, 401c86 <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  401c5a:	4b13      	ldr	r3, [pc, #76]	; (401ca8 <prvIdleTask+0x64>)
  401c5c:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401c5e:	68f3      	ldr	r3, [r6, #12]
  401c60:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401c62:	1d20      	adds	r0, r4, #4
  401c64:	4b11      	ldr	r3, [pc, #68]	; (401cac <prvIdleTask+0x68>)
  401c66:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401c68:	4a11      	ldr	r2, [pc, #68]	; (401cb0 <prvIdleTask+0x6c>)
  401c6a:	6813      	ldr	r3, [r2, #0]
  401c6c:	3b01      	subs	r3, #1
  401c6e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401c70:	682b      	ldr	r3, [r5, #0]
  401c72:	3b01      	subs	r3, #1
  401c74:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401c76:	4b0f      	ldr	r3, [pc, #60]	; (401cb4 <prvIdleTask+0x70>)
  401c78:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401c7a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401c7c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 401cc4 <prvIdleTask+0x80>
  401c80:	47c8      	blx	r9
		vPortFree( pxTCB );
  401c82:	4620      	mov	r0, r4
  401c84:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401c86:	682b      	ldr	r3, [r5, #0]
  401c88:	2b00      	cmp	r3, #0
  401c8a:	d1e2      	bne.n	401c52 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  401c8c:	4b0a      	ldr	r3, [pc, #40]	; (401cb8 <prvIdleTask+0x74>)
  401c8e:	681b      	ldr	r3, [r3, #0]
  401c90:	2b01      	cmp	r3, #1
  401c92:	d9f8      	bls.n	401c86 <prvIdleTask+0x42>
			{
				taskYIELD();
  401c94:	4b09      	ldr	r3, [pc, #36]	; (401cbc <prvIdleTask+0x78>)
  401c96:	4798      	blx	r3
  401c98:	e7d7      	b.n	401c4a <prvIdleTask+0x6>
  401c9a:	bf00      	nop
  401c9c:	20018940 	.word	0x20018940
  401ca0:	20018a78 	.word	0x20018a78
  401ca4:	00401b39 	.word	0x00401b39
  401ca8:	00400eb5 	.word	0x00400eb5
  401cac:	00400e05 	.word	0x00400e05
  401cb0:	20018a90 	.word	0x20018a90
  401cb4:	00400ed5 	.word	0x00400ed5
  401cb8:	20018948 	.word	0x20018948
  401cbc:	00400e95 	.word	0x00400e95
  401cc0:	00401995 	.word	0x00401995
  401cc4:	00401109 	.word	0x00401109

00401cc8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401cc8:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  401cca:	4b2d      	ldr	r3, [pc, #180]	; (401d80 <vTaskSwitchContext+0xb8>)
  401ccc:	681b      	ldr	r3, [r3, #0]
  401cce:	b11b      	cbz	r3, 401cd8 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  401cd0:	2201      	movs	r2, #1
  401cd2:	4b2c      	ldr	r3, [pc, #176]	; (401d84 <vTaskSwitchContext+0xbc>)
  401cd4:	601a      	str	r2, [r3, #0]
  401cd6:	bd38      	pop	{r3, r4, r5, pc}
			unsigned long ulTempCounter;

				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
  401cd8:	4b2b      	ldr	r3, [pc, #172]	; (401d88 <vTaskSwitchContext+0xc0>)
  401cda:	4798      	blx	r3
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
  401cdc:	4a2b      	ldr	r2, [pc, #172]	; (401d8c <vTaskSwitchContext+0xc4>)
  401cde:	6814      	ldr	r4, [r2, #0]
  401ce0:	492b      	ldr	r1, [pc, #172]	; (401d90 <vTaskSwitchContext+0xc8>)
  401ce2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401ce4:	680d      	ldr	r5, [r1, #0]
  401ce6:	1b5b      	subs	r3, r3, r5
  401ce8:	4403      	add	r3, r0
  401cea:	64e3      	str	r3, [r4, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
  401cec:	6008      	str	r0, [r1, #0]
		}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
  401cee:	6811      	ldr	r1, [r2, #0]
  401cf0:	6813      	ldr	r3, [r2, #0]
  401cf2:	680a      	ldr	r2, [r1, #0]
  401cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401cf6:	429a      	cmp	r2, r3
  401cf8:	d805      	bhi.n	401d06 <vTaskSwitchContext+0x3e>
  401cfa:	4b24      	ldr	r3, [pc, #144]	; (401d8c <vTaskSwitchContext+0xc4>)
  401cfc:	6818      	ldr	r0, [r3, #0]
  401cfe:	6819      	ldr	r1, [r3, #0]
  401d00:	3134      	adds	r1, #52	; 0x34
  401d02:	4b24      	ldr	r3, [pc, #144]	; (401d94 <vTaskSwitchContext+0xcc>)
  401d04:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
  401d06:	4b21      	ldr	r3, [pc, #132]	; (401d8c <vTaskSwitchContext+0xc4>)
  401d08:	681b      	ldr	r3, [r3, #0]
  401d0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401d0c:	4922      	ldr	r1, [pc, #136]	; (401d98 <vTaskSwitchContext+0xd0>)
  401d0e:	2214      	movs	r2, #20
  401d10:	4b22      	ldr	r3, [pc, #136]	; (401d9c <vTaskSwitchContext+0xd4>)
  401d12:	4798      	blx	r3
  401d14:	b128      	cbz	r0, 401d22 <vTaskSwitchContext+0x5a>
  401d16:	4b1d      	ldr	r3, [pc, #116]	; (401d8c <vTaskSwitchContext+0xc4>)
  401d18:	6818      	ldr	r0, [r3, #0]
  401d1a:	6819      	ldr	r1, [r3, #0]
  401d1c:	3134      	adds	r1, #52	; 0x34
  401d1e:	4b1d      	ldr	r3, [pc, #116]	; (401d94 <vTaskSwitchContext+0xcc>)
  401d20:	4798      	blx	r3

		taskSELECT_HIGHEST_PRIORITY_TASK();
  401d22:	4b1f      	ldr	r3, [pc, #124]	; (401da0 <vTaskSwitchContext+0xd8>)
  401d24:	681c      	ldr	r4, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline unsigned char ucPortCountLeadingZeros( unsigned long ulBitmap )
	{
	unsigned char ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401d26:	fab4 f484 	clz	r4, r4
  401d2a:	b2e4      	uxtb	r4, r4
  401d2c:	f1c4 041f 	rsb	r4, r4, #31
  401d30:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401d34:	009b      	lsls	r3, r3, #2
  401d36:	4a1b      	ldr	r2, [pc, #108]	; (401da4 <vTaskSwitchContext+0xdc>)
  401d38:	58d3      	ldr	r3, [r2, r3]
  401d3a:	b923      	cbnz	r3, 401d46 <vTaskSwitchContext+0x7e>
  401d3c:	481a      	ldr	r0, [pc, #104]	; (401da8 <vTaskSwitchContext+0xe0>)
  401d3e:	f240 7141 	movw	r1, #1857	; 0x741
  401d42:	4b1a      	ldr	r3, [pc, #104]	; (401dac <vTaskSwitchContext+0xe4>)
  401d44:	4798      	blx	r3
  401d46:	4b17      	ldr	r3, [pc, #92]	; (401da4 <vTaskSwitchContext+0xdc>)
  401d48:	00a2      	lsls	r2, r4, #2
  401d4a:	1911      	adds	r1, r2, r4
  401d4c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401d50:	6848      	ldr	r0, [r1, #4]
  401d52:	6840      	ldr	r0, [r0, #4]
  401d54:	6048      	str	r0, [r1, #4]
  401d56:	460b      	mov	r3, r1
  401d58:	3308      	adds	r3, #8
  401d5a:	4298      	cmp	r0, r3
  401d5c:	d106      	bne.n	401d6c <vTaskSwitchContext+0xa4>
  401d5e:	6841      	ldr	r1, [r0, #4]
  401d60:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401d64:	4a0f      	ldr	r2, [pc, #60]	; (401da4 <vTaskSwitchContext+0xdc>)
  401d66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401d6a:	6059      	str	r1, [r3, #4]
  401d6c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401d70:	4b0c      	ldr	r3, [pc, #48]	; (401da4 <vTaskSwitchContext+0xdc>)
  401d72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  401d76:	6863      	ldr	r3, [r4, #4]
  401d78:	68da      	ldr	r2, [r3, #12]
  401d7a:	4b04      	ldr	r3, [pc, #16]	; (401d8c <vTaskSwitchContext+0xc4>)
  401d7c:	601a      	str	r2, [r3, #0]
  401d7e:	bd38      	pop	{r3, r4, r5, pc}
  401d80:	20018af8 	.word	0x20018af8
  401d84:	20018ab0 	.word	0x20018ab0
  401d88:	00404425 	.word	0x00404425
  401d8c:	20018ab8 	.word	0x20018ab8
  401d90:	20018aac 	.word	0x20018aac
  401d94:	004043b5 	.word	0x004043b5
  401d98:	004075ac 	.word	0x004075ac
  401d9c:	004044f1 	.word	0x004044f1
  401da0:	2001893c 	.word	0x2001893c
  401da4:	20018948 	.word	0x20018948
  401da8:	00407604 	.word	0x00407604
  401dac:	004043c1 	.word	0x004043c1

00401db0 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  401db0:	b570      	push	{r4, r5, r6, lr}
  401db2:	460d      	mov	r5, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
  401db4:	4606      	mov	r6, r0
  401db6:	b920      	cbnz	r0, 401dc2 <vTaskPlaceOnEventList+0x12>
  401db8:	4814      	ldr	r0, [pc, #80]	; (401e0c <vTaskPlaceOnEventList+0x5c>)
  401dba:	f240 714c 	movw	r1, #1868	; 0x74c
  401dbe:	4b14      	ldr	r3, [pc, #80]	; (401e10 <vTaskPlaceOnEventList+0x60>)
  401dc0:	4798      	blx	r3
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401dc2:	4c14      	ldr	r4, [pc, #80]	; (401e14 <vTaskPlaceOnEventList+0x64>)
  401dc4:	6821      	ldr	r1, [r4, #0]
  401dc6:	4630      	mov	r0, r6
  401dc8:	3118      	adds	r1, #24
  401dca:	4b13      	ldr	r3, [pc, #76]	; (401e18 <vTaskPlaceOnEventList+0x68>)
  401dcc:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401dce:	6820      	ldr	r0, [r4, #0]
  401dd0:	3004      	adds	r0, #4
  401dd2:	4b12      	ldr	r3, [pc, #72]	; (401e1c <vTaskPlaceOnEventList+0x6c>)
  401dd4:	4798      	blx	r3
  401dd6:	b940      	cbnz	r0, 401dea <vTaskPlaceOnEventList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401dd8:	6823      	ldr	r3, [r4, #0]
  401dda:	4911      	ldr	r1, [pc, #68]	; (401e20 <vTaskPlaceOnEventList+0x70>)
  401ddc:	680a      	ldr	r2, [r1, #0]
  401dde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401de0:	2301      	movs	r3, #1
  401de2:	4083      	lsls	r3, r0
  401de4:	ea22 0303 	bic.w	r3, r2, r3
  401de8:	600b      	str	r3, [r1, #0]
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401dea:	f1b5 3fff 	cmp.w	r5, #4294967295
  401dee:	d106      	bne.n	401dfe <vTaskPlaceOnEventList+0x4e>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401df0:	4b08      	ldr	r3, [pc, #32]	; (401e14 <vTaskPlaceOnEventList+0x64>)
  401df2:	6819      	ldr	r1, [r3, #0]
  401df4:	480b      	ldr	r0, [pc, #44]	; (401e24 <vTaskPlaceOnEventList+0x74>)
  401df6:	3104      	adds	r1, #4
  401df8:	4b0b      	ldr	r3, [pc, #44]	; (401e28 <vTaskPlaceOnEventList+0x78>)
  401dfa:	4798      	blx	r3
  401dfc:	bd70      	pop	{r4, r5, r6, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  401dfe:	4b0b      	ldr	r3, [pc, #44]	; (401e2c <vTaskPlaceOnEventList+0x7c>)
  401e00:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401e02:	4428      	add	r0, r5
  401e04:	4b0a      	ldr	r3, [pc, #40]	; (401e30 <vTaskPlaceOnEventList+0x80>)
  401e06:	4798      	blx	r3
  401e08:	bd70      	pop	{r4, r5, r6, pc}
  401e0a:	bf00      	nop
  401e0c:	00407604 	.word	0x00407604
  401e10:	004043c1 	.word	0x004043c1
  401e14:	20018ab8 	.word	0x20018ab8
  401e18:	00400dc9 	.word	0x00400dc9
  401e1c:	00400e05 	.word	0x00400e05
  401e20:	2001893c 	.word	0x2001893c
  401e24:	20018abc 	.word	0x20018abc
  401e28:	00400dad 	.word	0x00400dad
  401e2c:	20018944 	.word	0x20018944
  401e30:	004016bd 	.word	0x004016bd

00401e34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  401e34:	b570      	push	{r4, r5, r6, lr}
  401e36:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  401e38:	4606      	mov	r6, r0
  401e3a:	b920      	cbnz	r0, 401e46 <vTaskPlaceOnEventListRestricted+0x12>
  401e3c:	480f      	ldr	r0, [pc, #60]	; (401e7c <vTaskPlaceOnEventListRestricted+0x48>)
  401e3e:	f240 7182 	movw	r1, #1922	; 0x782
  401e42:	4b0f      	ldr	r3, [pc, #60]	; (401e80 <vTaskPlaceOnEventListRestricted+0x4c>)
  401e44:	4798      	blx	r3

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401e46:	4c0f      	ldr	r4, [pc, #60]	; (401e84 <vTaskPlaceOnEventListRestricted+0x50>)
  401e48:	6821      	ldr	r1, [r4, #0]
  401e4a:	4630      	mov	r0, r6
  401e4c:	3118      	adds	r1, #24
  401e4e:	4b0e      	ldr	r3, [pc, #56]	; (401e88 <vTaskPlaceOnEventListRestricted+0x54>)
  401e50:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401e52:	6820      	ldr	r0, [r4, #0]
  401e54:	3004      	adds	r0, #4
  401e56:	4b0d      	ldr	r3, [pc, #52]	; (401e8c <vTaskPlaceOnEventListRestricted+0x58>)
  401e58:	4798      	blx	r3
  401e5a:	b940      	cbnz	r0, 401e6e <vTaskPlaceOnEventListRestricted+0x3a>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401e5c:	6823      	ldr	r3, [r4, #0]
  401e5e:	490c      	ldr	r1, [pc, #48]	; (401e90 <vTaskPlaceOnEventListRestricted+0x5c>)
  401e60:	680a      	ldr	r2, [r1, #0]
  401e62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401e64:	2301      	movs	r3, #1
  401e66:	4083      	lsls	r3, r0
  401e68:	ea22 0303 	bic.w	r3, r2, r3
  401e6c:	600b      	str	r3, [r1, #0]
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  401e6e:	4b09      	ldr	r3, [pc, #36]	; (401e94 <vTaskPlaceOnEventListRestricted+0x60>)
  401e70:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  401e72:	4428      	add	r0, r5
  401e74:	4b08      	ldr	r3, [pc, #32]	; (401e98 <vTaskPlaceOnEventListRestricted+0x64>)
  401e76:	4798      	blx	r3
  401e78:	bd70      	pop	{r4, r5, r6, pc}
  401e7a:	bf00      	nop
  401e7c:	00407604 	.word	0x00407604
  401e80:	004043c1 	.word	0x004043c1
  401e84:	20018ab8 	.word	0x20018ab8
  401e88:	00400dad 	.word	0x00400dad
  401e8c:	00400e05 	.word	0x00400e05
  401e90:	2001893c 	.word	0x2001893c
  401e94:	20018944 	.word	0x20018944
  401e98:	004016bd 	.word	0x004016bd

00401e9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  401e9c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401e9e:	68c3      	ldr	r3, [r0, #12]
  401ea0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401ea2:	b924      	cbnz	r4, 401eae <xTaskRemoveFromEventList+0x12>
  401ea4:	4816      	ldr	r0, [pc, #88]	; (401f00 <xTaskRemoveFromEventList+0x64>)
  401ea6:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
  401eaa:	4b16      	ldr	r3, [pc, #88]	; (401f04 <xTaskRemoveFromEventList+0x68>)
  401eac:	4798      	blx	r3
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401eae:	f104 0518 	add.w	r5, r4, #24
  401eb2:	4628      	mov	r0, r5
  401eb4:	4b14      	ldr	r3, [pc, #80]	; (401f08 <xTaskRemoveFromEventList+0x6c>)
  401eb6:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401eb8:	4b14      	ldr	r3, [pc, #80]	; (401f0c <xTaskRemoveFromEventList+0x70>)
  401eba:	681b      	ldr	r3, [r3, #0]
  401ebc:	b99b      	cbnz	r3, 401ee6 <xTaskRemoveFromEventList+0x4a>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401ebe:	1d25      	adds	r5, r4, #4
  401ec0:	4628      	mov	r0, r5
  401ec2:	4b11      	ldr	r3, [pc, #68]	; (401f08 <xTaskRemoveFromEventList+0x6c>)
  401ec4:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  401ec6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ec8:	4911      	ldr	r1, [pc, #68]	; (401f10 <xTaskRemoveFromEventList+0x74>)
  401eca:	680a      	ldr	r2, [r1, #0]
  401ecc:	2301      	movs	r3, #1
  401ece:	4083      	lsls	r3, r0
  401ed0:	4313      	orrs	r3, r2
  401ed2:	600b      	str	r3, [r1, #0]
  401ed4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ed8:	4b0e      	ldr	r3, [pc, #56]	; (401f14 <xTaskRemoveFromEventList+0x78>)
  401eda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ede:	4629      	mov	r1, r5
  401ee0:	4b0d      	ldr	r3, [pc, #52]	; (401f18 <xTaskRemoveFromEventList+0x7c>)
  401ee2:	4798      	blx	r3
  401ee4:	e003      	b.n	401eee <xTaskRemoveFromEventList+0x52>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401ee6:	480d      	ldr	r0, [pc, #52]	; (401f1c <xTaskRemoveFromEventList+0x80>)
  401ee8:	4629      	mov	r1, r5
  401eea:	4b0b      	ldr	r3, [pc, #44]	; (401f18 <xTaskRemoveFromEventList+0x7c>)
  401eec:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401eee:	4b0c      	ldr	r3, [pc, #48]	; (401f20 <xTaskRemoveFromEventList+0x84>)
  401ef0:	681b      	ldr	r3, [r3, #0]
  401ef2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
  401ef6:	4298      	cmp	r0, r3
  401ef8:	bf34      	ite	cc
  401efa:	2000      	movcc	r0, #0
  401efc:	2001      	movcs	r0, #1
  401efe:	bd38      	pop	{r3, r4, r5, pc}
  401f00:	00407604 	.word	0x00407604
  401f04:	004043c1 	.word	0x004043c1
  401f08:	00400e05 	.word	0x00400e05
  401f0c:	20018af8 	.word	0x20018af8
  401f10:	2001893c 	.word	0x2001893c
  401f14:	20018948 	.word	0x20018948
  401f18:	00400dad 	.word	0x00400dad
  401f1c:	20018a94 	.word	0x20018a94
  401f20:	20018ab8 	.word	0x20018ab8

00401f24 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  401f24:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
  401f26:	4604      	mov	r4, r0
  401f28:	b920      	cbnz	r0, 401f34 <vTaskSetTimeOutState+0x10>
  401f2a:	4806      	ldr	r0, [pc, #24]	; (401f44 <vTaskSetTimeOutState+0x20>)
  401f2c:	f240 71da 	movw	r1, #2010	; 0x7da
  401f30:	4b05      	ldr	r3, [pc, #20]	; (401f48 <vTaskSetTimeOutState+0x24>)
  401f32:	4798      	blx	r3
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401f34:	4b05      	ldr	r3, [pc, #20]	; (401f4c <vTaskSetTimeOutState+0x28>)
  401f36:	681b      	ldr	r3, [r3, #0]
  401f38:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401f3a:	4b05      	ldr	r3, [pc, #20]	; (401f50 <vTaskSetTimeOutState+0x2c>)
  401f3c:	681b      	ldr	r3, [r3, #0]
  401f3e:	6063      	str	r3, [r4, #4]
  401f40:	bd10      	pop	{r4, pc}
  401f42:	bf00      	nop
  401f44:	00407604 	.word	0x00407604
  401f48:	004043c1 	.word	0x004043c1
  401f4c:	20018b00 	.word	0x20018b00
  401f50:	20018944 	.word	0x20018944

00401f54 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  401f54:	b538      	push	{r3, r4, r5, lr}
  401f56:	460c      	mov	r4, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  401f58:	4605      	mov	r5, r0
  401f5a:	b920      	cbnz	r0, 401f66 <xTaskCheckForTimeOut+0x12>
  401f5c:	4819      	ldr	r0, [pc, #100]	; (401fc4 <xTaskCheckForTimeOut+0x70>)
  401f5e:	f240 71e4 	movw	r1, #2020	; 0x7e4
  401f62:	4b19      	ldr	r3, [pc, #100]	; (401fc8 <xTaskCheckForTimeOut+0x74>)
  401f64:	4798      	blx	r3
	configASSERT( pxTicksToWait );
  401f66:	b924      	cbnz	r4, 401f72 <xTaskCheckForTimeOut+0x1e>
  401f68:	4816      	ldr	r0, [pc, #88]	; (401fc4 <xTaskCheckForTimeOut+0x70>)
  401f6a:	f240 71e5 	movw	r1, #2021	; 0x7e5
  401f6e:	4b16      	ldr	r3, [pc, #88]	; (401fc8 <xTaskCheckForTimeOut+0x74>)
  401f70:	4798      	blx	r3

	taskENTER_CRITICAL();
  401f72:	4b16      	ldr	r3, [pc, #88]	; (401fcc <xTaskCheckForTimeOut+0x78>)
  401f74:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401f76:	6823      	ldr	r3, [r4, #0]
  401f78:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f7c:	d019      	beq.n	401fb2 <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  401f7e:	4a14      	ldr	r2, [pc, #80]	; (401fd0 <xTaskCheckForTimeOut+0x7c>)
  401f80:	6812      	ldr	r2, [r2, #0]
  401f82:	6829      	ldr	r1, [r5, #0]
  401f84:	4291      	cmp	r1, r2
  401f86:	d004      	beq.n	401f92 <xTaskCheckForTimeOut+0x3e>
  401f88:	4a12      	ldr	r2, [pc, #72]	; (401fd4 <xTaskCheckForTimeOut+0x80>)
  401f8a:	6812      	ldr	r2, [r2, #0]
  401f8c:	6869      	ldr	r1, [r5, #4]
  401f8e:	4291      	cmp	r1, r2
  401f90:	d911      	bls.n	401fb6 <xTaskCheckForTimeOut+0x62>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  401f92:	4a10      	ldr	r2, [pc, #64]	; (401fd4 <xTaskCheckForTimeOut+0x80>)
  401f94:	6812      	ldr	r2, [r2, #0]
  401f96:	6869      	ldr	r1, [r5, #4]
  401f98:	1a52      	subs	r2, r2, r1
  401f9a:	4293      	cmp	r3, r2
  401f9c:	d90d      	bls.n	401fba <xTaskCheckForTimeOut+0x66>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  401f9e:	4a0d      	ldr	r2, [pc, #52]	; (401fd4 <xTaskCheckForTimeOut+0x80>)
  401fa0:	6812      	ldr	r2, [r2, #0]
  401fa2:	1a51      	subs	r1, r2, r1
  401fa4:	1a5b      	subs	r3, r3, r1
  401fa6:	6023      	str	r3, [r4, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401fa8:	4628      	mov	r0, r5
  401faa:	4b0b      	ldr	r3, [pc, #44]	; (401fd8 <xTaskCheckForTimeOut+0x84>)
  401fac:	4798      	blx	r3
			xReturn = pdFALSE;
  401fae:	2400      	movs	r4, #0
  401fb0:	e004      	b.n	401fbc <xTaskCheckForTimeOut+0x68>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  401fb2:	2400      	movs	r4, #0
  401fb4:	e002      	b.n	401fbc <xTaskCheckForTimeOut+0x68>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401fb6:	2401      	movs	r4, #1
  401fb8:	e000      	b.n	401fbc <xTaskCheckForTimeOut+0x68>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  401fba:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  401fbc:	4b07      	ldr	r3, [pc, #28]	; (401fdc <xTaskCheckForTimeOut+0x88>)
  401fbe:	4798      	blx	r3

	return xReturn;
}
  401fc0:	4620      	mov	r0, r4
  401fc2:	bd38      	pop	{r3, r4, r5, pc}
  401fc4:	00407604 	.word	0x00407604
  401fc8:	004043c1 	.word	0x004043c1
  401fcc:	00400eb5 	.word	0x00400eb5
  401fd0:	20018b00 	.word	0x20018b00
  401fd4:	20018944 	.word	0x20018944
  401fd8:	00401f25 	.word	0x00401f25
  401fdc:	00400ed5 	.word	0x00400ed5

00401fe0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
  401fe0:	2201      	movs	r2, #1
  401fe2:	4b01      	ldr	r3, [pc, #4]	; (401fe8 <vTaskMissedYield+0x8>)
  401fe4:	601a      	str	r2, [r3, #0]
  401fe6:	4770      	bx	lr
  401fe8:	20018ab0 	.word	0x20018ab0

00401fec <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401fec:	4b01      	ldr	r3, [pc, #4]	; (401ff4 <xTaskGetCurrentTaskHandle+0x8>)
  401fee:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
  401ff0:	4770      	bx	lr
  401ff2:	bf00      	nop
  401ff4:	20018ab8 	.word	0x20018ab8

00401ff8 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  401ff8:	4b05      	ldr	r3, [pc, #20]	; (402010 <xTaskGetSchedulerState+0x18>)
  401ffa:	681b      	ldr	r3, [r3, #0]
  401ffc:	b133      	cbz	r3, 40200c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401ffe:	4b05      	ldr	r3, [pc, #20]	; (402014 <xTaskGetSchedulerState+0x1c>)
  402000:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402002:	2b00      	cmp	r3, #0
  402004:	bf0c      	ite	eq
  402006:	2001      	moveq	r0, #1
  402008:	2002      	movne	r0, #2
  40200a:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  40200c:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  40200e:	4770      	bx	lr
  402010:	20018aa8 	.word	0x20018aa8
  402014:	20018af8 	.word	0x20018af8

00402018 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402018:	2800      	cmp	r0, #0
  40201a:	d040      	beq.n	40209e <vTaskPriorityInherit+0x86>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  40201c:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40201e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402020:	491f      	ldr	r1, [pc, #124]	; (4020a0 <vTaskPriorityInherit+0x88>)
  402022:	6809      	ldr	r1, [r1, #0]
  402024:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402026:	428b      	cmp	r3, r1
  402028:	d238      	bcs.n	40209c <vTaskPriorityInherit+0x84>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  40202a:	491d      	ldr	r1, [pc, #116]	; (4020a0 <vTaskPriorityInherit+0x88>)
  40202c:	6809      	ldr	r1, [r1, #0]
  40202e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402030:	f1c1 010f 	rsb	r1, r1, #15
  402034:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402036:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40203a:	491a      	ldr	r1, [pc, #104]	; (4020a4 <vTaskPriorityInherit+0x8c>)
  40203c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  402040:	6941      	ldr	r1, [r0, #20]
  402042:	4299      	cmp	r1, r3
  402044:	d126      	bne.n	402094 <vTaskPriorityInherit+0x7c>
  402046:	4604      	mov	r4, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  402048:	1d05      	adds	r5, r0, #4
  40204a:	4628      	mov	r0, r5
  40204c:	4b16      	ldr	r3, [pc, #88]	; (4020a8 <vTaskPriorityInherit+0x90>)
  40204e:	4798      	blx	r3
  402050:	b968      	cbnz	r0, 40206e <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402052:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402054:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  402058:	009b      	lsls	r3, r3, #2
  40205a:	4912      	ldr	r1, [pc, #72]	; (4020a4 <vTaskPriorityInherit+0x8c>)
  40205c:	58cb      	ldr	r3, [r1, r3]
  40205e:	b933      	cbnz	r3, 40206e <vTaskPriorityInherit+0x56>
  402060:	4812      	ldr	r0, [pc, #72]	; (4020ac <vTaskPriorityInherit+0x94>)
  402062:	6801      	ldr	r1, [r0, #0]
  402064:	2301      	movs	r3, #1
  402066:	4093      	lsls	r3, r2
  402068:	ea21 0303 	bic.w	r3, r1, r3
  40206c:	6003      	str	r3, [r0, #0]
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40206e:	4b0c      	ldr	r3, [pc, #48]	; (4020a0 <vTaskPriorityInherit+0x88>)
  402070:	681b      	ldr	r3, [r3, #0]
  402072:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402074:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  402076:	490d      	ldr	r1, [pc, #52]	; (4020ac <vTaskPriorityInherit+0x94>)
  402078:	680a      	ldr	r2, [r1, #0]
  40207a:	2301      	movs	r3, #1
  40207c:	4083      	lsls	r3, r0
  40207e:	4313      	orrs	r3, r2
  402080:	600b      	str	r3, [r1, #0]
  402082:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402086:	4b07      	ldr	r3, [pc, #28]	; (4020a4 <vTaskPriorityInherit+0x8c>)
  402088:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40208c:	4629      	mov	r1, r5
  40208e:	4b08      	ldr	r3, [pc, #32]	; (4020b0 <vTaskPriorityInherit+0x98>)
  402090:	4798      	blx	r3
  402092:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402094:	4b02      	ldr	r3, [pc, #8]	; (4020a0 <vTaskPriorityInherit+0x88>)
  402096:	681b      	ldr	r3, [r3, #0]
  402098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40209a:	62c3      	str	r3, [r0, #44]	; 0x2c
  40209c:	bd38      	pop	{r3, r4, r5, pc}
  40209e:	4770      	bx	lr
  4020a0:	20018ab8 	.word	0x20018ab8
  4020a4:	20018948 	.word	0x20018948
  4020a8:	00400e05 	.word	0x00400e05
  4020ac:	2001893c 	.word	0x2001893c
  4020b0:	00400dad 	.word	0x00400dad

004020b4 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
  4020b4:	2800      	cmp	r0, #0
  4020b6:	d02c      	beq.n	402112 <vTaskPriorityDisinherit+0x5e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  4020b8:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4020ba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  4020bc:	6c82      	ldr	r2, [r0, #72]	; 0x48
  4020be:	4291      	cmp	r1, r2
  4020c0:	d026      	beq.n	402110 <vTaskPriorityDisinherit+0x5c>
  4020c2:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4020c4:	1d05      	adds	r5, r0, #4
  4020c6:	4628      	mov	r0, r5
  4020c8:	4b12      	ldr	r3, [pc, #72]	; (402114 <vTaskPriorityDisinherit+0x60>)
  4020ca:	4798      	blx	r3
  4020cc:	b968      	cbnz	r0, 4020ea <vTaskPriorityDisinherit+0x36>
				{
					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4020ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4020d0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  4020d4:	009b      	lsls	r3, r3, #2
  4020d6:	4910      	ldr	r1, [pc, #64]	; (402118 <vTaskPriorityDisinherit+0x64>)
  4020d8:	58cb      	ldr	r3, [r1, r3]
  4020da:	b933      	cbnz	r3, 4020ea <vTaskPriorityDisinherit+0x36>
  4020dc:	480f      	ldr	r0, [pc, #60]	; (40211c <vTaskPriorityDisinherit+0x68>)
  4020de:	6801      	ldr	r1, [r0, #0]
  4020e0:	2301      	movs	r3, #1
  4020e2:	4093      	lsls	r3, r2
  4020e4:	ea21 0303 	bic.w	r3, r1, r3
  4020e8:	6003      	str	r3, [r0, #0]
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  4020ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4020ec:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  4020ee:	f1c3 020f 	rsb	r2, r3, #15
  4020f2:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
  4020f4:	4809      	ldr	r0, [pc, #36]	; (40211c <vTaskPriorityDisinherit+0x68>)
  4020f6:	6801      	ldr	r1, [r0, #0]
  4020f8:	2201      	movs	r2, #1
  4020fa:	409a      	lsls	r2, r3
  4020fc:	430a      	orrs	r2, r1
  4020fe:	6002      	str	r2, [r0, #0]
  402100:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402104:	4804      	ldr	r0, [pc, #16]	; (402118 <vTaskPriorityDisinherit+0x64>)
  402106:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  40210a:	4629      	mov	r1, r5
  40210c:	4b04      	ldr	r3, [pc, #16]	; (402120 <vTaskPriorityDisinherit+0x6c>)
  40210e:	4798      	blx	r3
  402110:	bd38      	pop	{r3, r4, r5, pc}
  402112:	4770      	bx	lr
  402114:	00400e05 	.word	0x00400e05
  402118:	20018948 	.word	0x20018948
  40211c:	2001893c 	.word	0x2001893c
  402120:	00400dad 	.word	0x00400dad

00402124 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  402124:	b510      	push	{r4, lr}
  402126:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402128:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40212a:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  40212c:	4291      	cmp	r1, r2
  40212e:	d80a      	bhi.n	402146 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  402130:	1ad2      	subs	r2, r2, r3
  402132:	6983      	ldr	r3, [r0, #24]
  402134:	429a      	cmp	r2, r3
  402136:	d211      	bcs.n	40215c <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402138:	4b0a      	ldr	r3, [pc, #40]	; (402164 <prvInsertTimerInActiveList+0x40>)
  40213a:	6818      	ldr	r0, [r3, #0]
  40213c:	1d21      	adds	r1, r4, #4
  40213e:	4b0a      	ldr	r3, [pc, #40]	; (402168 <prvInsertTimerInActiveList+0x44>)
  402140:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  402142:	2000      	movs	r0, #0
  402144:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402146:	429a      	cmp	r2, r3
  402148:	d201      	bcs.n	40214e <prvInsertTimerInActiveList+0x2a>
  40214a:	4299      	cmp	r1, r3
  40214c:	d208      	bcs.n	402160 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40214e:	4b07      	ldr	r3, [pc, #28]	; (40216c <prvInsertTimerInActiveList+0x48>)
  402150:	6818      	ldr	r0, [r3, #0]
  402152:	1d21      	adds	r1, r4, #4
  402154:	4b04      	ldr	r3, [pc, #16]	; (402168 <prvInsertTimerInActiveList+0x44>)
  402156:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  402158:	2000      	movs	r0, #0
  40215a:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40215c:	2001      	movs	r0, #1
  40215e:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402160:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402162:	bd10      	pop	{r4, pc}
  402164:	20018b3c 	.word	0x20018b3c
  402168:	00400dc9 	.word	0x00400dc9
  40216c:	20018b08 	.word	0x20018b08

00402170 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402170:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402172:	4b0d      	ldr	r3, [pc, #52]	; (4021a8 <prvCheckForValidListAndQueue+0x38>)
  402174:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402176:	4b0d      	ldr	r3, [pc, #52]	; (4021ac <prvCheckForValidListAndQueue+0x3c>)
  402178:	681b      	ldr	r3, [r3, #0]
  40217a:	b98b      	cbnz	r3, 4021a0 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
  40217c:	4d0c      	ldr	r5, [pc, #48]	; (4021b0 <prvCheckForValidListAndQueue+0x40>)
  40217e:	4628      	mov	r0, r5
  402180:	4e0c      	ldr	r6, [pc, #48]	; (4021b4 <prvCheckForValidListAndQueue+0x44>)
  402182:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402184:	4c0c      	ldr	r4, [pc, #48]	; (4021b8 <prvCheckForValidListAndQueue+0x48>)
  402186:	4620      	mov	r0, r4
  402188:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  40218a:	4b0c      	ldr	r3, [pc, #48]	; (4021bc <prvCheckForValidListAndQueue+0x4c>)
  40218c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40218e:	4b0c      	ldr	r3, [pc, #48]	; (4021c0 <prvCheckForValidListAndQueue+0x50>)
  402190:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  402192:	2005      	movs	r0, #5
  402194:	210c      	movs	r1, #12
  402196:	2200      	movs	r2, #0
  402198:	4b0a      	ldr	r3, [pc, #40]	; (4021c4 <prvCheckForValidListAndQueue+0x54>)
  40219a:	4798      	blx	r3
  40219c:	4b03      	ldr	r3, [pc, #12]	; (4021ac <prvCheckForValidListAndQueue+0x3c>)
  40219e:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  4021a0:	4b09      	ldr	r3, [pc, #36]	; (4021c8 <prvCheckForValidListAndQueue+0x58>)
  4021a2:	4798      	blx	r3
  4021a4:	bd70      	pop	{r4, r5, r6, pc}
  4021a6:	bf00      	nop
  4021a8:	00400eb5 	.word	0x00400eb5
  4021ac:	20018b38 	.word	0x20018b38
  4021b0:	20018b0c 	.word	0x20018b0c
  4021b4:	00400d8d 	.word	0x00400d8d
  4021b8:	20018b20 	.word	0x20018b20
  4021bc:	20018b08 	.word	0x20018b08
  4021c0:	20018b3c 	.word	0x20018b3c
  4021c4:	004012e1 	.word	0x004012e1
  4021c8:	00400ed5 	.word	0x00400ed5

004021cc <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  4021cc:	b510      	push	{r4, lr}
  4021ce:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4021d0:	4b0d      	ldr	r3, [pc, #52]	; (402208 <xTimerCreateTimerTask+0x3c>)
  4021d2:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4021d4:	4b0d      	ldr	r3, [pc, #52]	; (40220c <xTimerCreateTimerTask+0x40>)
  4021d6:	681b      	ldr	r3, [r3, #0]
  4021d8:	b16b      	cbz	r3, 4021f6 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4021da:	230e      	movs	r3, #14
  4021dc:	9300      	str	r3, [sp, #0]
  4021de:	2300      	movs	r3, #0
  4021e0:	9301      	str	r3, [sp, #4]
  4021e2:	9302      	str	r3, [sp, #8]
  4021e4:	9303      	str	r3, [sp, #12]
  4021e6:	480a      	ldr	r0, [pc, #40]	; (402210 <xTimerCreateTimerTask+0x44>)
  4021e8:	490a      	ldr	r1, [pc, #40]	; (402214 <xTimerCreateTimerTask+0x48>)
  4021ea:	f44f 7243 	mov.w	r2, #780	; 0x30c
  4021ee:	4c0a      	ldr	r4, [pc, #40]	; (402218 <xTimerCreateTimerTask+0x4c>)
  4021f0:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
  4021f2:	4603      	mov	r3, r0
  4021f4:	b920      	cbnz	r0, 402200 <xTimerCreateTimerTask+0x34>
  4021f6:	4809      	ldr	r0, [pc, #36]	; (40221c <xTimerCreateTimerTask+0x50>)
  4021f8:	21da      	movs	r1, #218	; 0xda
  4021fa:	4b09      	ldr	r3, [pc, #36]	; (402220 <xTimerCreateTimerTask+0x54>)
  4021fc:	4798      	blx	r3
  4021fe:	2300      	movs	r3, #0
	return xReturn;
}
  402200:	4618      	mov	r0, r3
  402202:	b004      	add	sp, #16
  402204:	bd10      	pop	{r4, pc}
  402206:	bf00      	nop
  402208:	00402171 	.word	0x00402171
  40220c:	20018b38 	.word	0x20018b38
  402210:	0040238d 	.word	0x0040238d
  402214:	0040764c 	.word	0x0040764c
  402218:	00401715 	.word	0x00401715
  40221c:	00407654 	.word	0x00407654
  402220:	004043c1 	.word	0x004043c1

00402224 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
  402224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
  402228:	b929      	cbnz	r1, 402236 <xTimerCreate+0x12>
	{
		pxNewTimer = NULL;
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
  40222a:	480f      	ldr	r0, [pc, #60]	; (402268 <xTimerCreate+0x44>)
  40222c:	21e7      	movs	r1, #231	; 0xe7
  40222e:	4b0f      	ldr	r3, [pc, #60]	; (40226c <xTimerCreate+0x48>)
  402230:	4798      	blx	r3
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
	{
		pxNewTimer = NULL;
  402232:	2400      	movs	r4, #0
  402234:	e014      	b.n	402260 <xTimerCreate+0x3c>
  402236:	4680      	mov	r8, r0
  402238:	4616      	mov	r6, r2
  40223a:	461d      	mov	r5, r3
  40223c:	460f      	mov	r7, r1
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
  40223e:	2028      	movs	r0, #40	; 0x28
  402240:	4b0b      	ldr	r3, [pc, #44]	; (402270 <xTimerCreate+0x4c>)
  402242:	4798      	blx	r3
		if( pxNewTimer != NULL )
  402244:	4604      	mov	r4, r0
  402246:	b158      	cbz	r0, 402260 <xTimerCreate+0x3c>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  402248:	4b0a      	ldr	r3, [pc, #40]	; (402274 <xTimerCreate+0x50>)
  40224a:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  40224c:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  402250:	61a7      	str	r7, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  402252:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  402254:	6225      	str	r5, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  402256:	9b06      	ldr	r3, [sp, #24]
  402258:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  40225a:	1d20      	adds	r0, r4, #4
  40225c:	4b06      	ldr	r3, [pc, #24]	; (402278 <xTimerCreate+0x54>)
  40225e:	4798      	blx	r3
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
}
  402260:	4620      	mov	r0, r4
  402262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402266:	bf00      	nop
  402268:	00407654 	.word	0x00407654
  40226c:	004043c1 	.word	0x004043c1
  402270:	00401029 	.word	0x00401029
  402274:	00402171 	.word	0x00402171
  402278:	00400da5 	.word	0x00400da5

0040227c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  40227c:	b530      	push	{r4, r5, lr}
  40227e:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402280:	4c0f      	ldr	r4, [pc, #60]	; (4022c0 <xTimerGenericCommand+0x44>)
  402282:	6825      	ldr	r5, [r4, #0]
  402284:	b1c5      	cbz	r5, 4022b8 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402286:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
  402288:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  40228a:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
  40228c:	b96b      	cbnz	r3, 4022aa <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40228e:	4b0d      	ldr	r3, [pc, #52]	; (4022c4 <xTimerGenericCommand+0x48>)
  402290:	4798      	blx	r3
  402292:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  402294:	4b0a      	ldr	r3, [pc, #40]	; (4022c0 <xTimerGenericCommand+0x44>)
  402296:	6818      	ldr	r0, [r3, #0]
  402298:	a901      	add	r1, sp, #4
  40229a:	bf07      	ittee	eq
  40229c:	9a08      	ldreq	r2, [sp, #32]
  40229e:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4022a0:	2200      	movne	r2, #0
  4022a2:	4613      	movne	r3, r2
  4022a4:	4c08      	ldr	r4, [pc, #32]	; (4022c8 <xTimerGenericCommand+0x4c>)
  4022a6:	47a0      	blx	r4
  4022a8:	e007      	b.n	4022ba <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4022aa:	4628      	mov	r0, r5
  4022ac:	a901      	add	r1, sp, #4
  4022ae:	461a      	mov	r2, r3
  4022b0:	2300      	movs	r3, #0
  4022b2:	4c06      	ldr	r4, [pc, #24]	; (4022cc <xTimerGenericCommand+0x50>)
  4022b4:	47a0      	blx	r4
  4022b6:	e000      	b.n	4022ba <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
  4022b8:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
  4022ba:	b005      	add	sp, #20
  4022bc:	bd30      	pop	{r4, r5, pc}
  4022be:	bf00      	nop
  4022c0:	20018b38 	.word	0x20018b38
  4022c4:	00401ff9 	.word	0x00401ff9
  4022c8:	00401341 	.word	0x00401341
  4022cc:	00401471 	.word	0x00401471

004022d0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  4022d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4022d4:	b082      	sub	sp, #8
  4022d6:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  4022d8:	4b23      	ldr	r3, [pc, #140]	; (402368 <prvSampleTimeNow+0x98>)
  4022da:	4798      	blx	r3
  4022dc:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
  4022de:	4b23      	ldr	r3, [pc, #140]	; (40236c <prvSampleTimeNow+0x9c>)
  4022e0:	681b      	ldr	r3, [r3, #0]
  4022e2:	4298      	cmp	r0, r3
  4022e4:	d236      	bcs.n	402354 <prvSampleTimeNow+0x84>
  4022e6:	e026      	b.n	402336 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4022e8:	68da      	ldr	r2, [r3, #12]
  4022ea:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4022ee:	68db      	ldr	r3, [r3, #12]
  4022f0:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4022f2:	1d25      	adds	r5, r4, #4
  4022f4:	4628      	mov	r0, r5
  4022f6:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4022f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4022fa:	4620      	mov	r0, r4
  4022fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4022fe:	69e3      	ldr	r3, [r4, #28]
  402300:	2b01      	cmp	r3, #1
  402302:	d11a      	bne.n	40233a <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402304:	69a3      	ldr	r3, [r4, #24]
  402306:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402308:	4553      	cmp	r3, sl
  40230a:	d906      	bls.n	40231a <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40230c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40230e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402310:	6830      	ldr	r0, [r6, #0]
  402312:	4629      	mov	r1, r5
  402314:	4b16      	ldr	r3, [pc, #88]	; (402370 <prvSampleTimeNow+0xa0>)
  402316:	4798      	blx	r3
  402318:	e00f      	b.n	40233a <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  40231a:	2300      	movs	r3, #0
  40231c:	9300      	str	r3, [sp, #0]
  40231e:	4620      	mov	r0, r4
  402320:	4619      	mov	r1, r3
  402322:	4652      	mov	r2, sl
  402324:	4c13      	ldr	r4, [pc, #76]	; (402374 <prvSampleTimeNow+0xa4>)
  402326:	47a0      	blx	r4
				configASSERT( xResult );
  402328:	b938      	cbnz	r0, 40233a <prvSampleTimeNow+0x6a>
  40232a:	4813      	ldr	r0, [pc, #76]	; (402378 <prvSampleTimeNow+0xa8>)
  40232c:	f240 2175 	movw	r1, #629	; 0x275
  402330:	4b12      	ldr	r3, [pc, #72]	; (40237c <prvSampleTimeNow+0xac>)
  402332:	4798      	blx	r3
  402334:	e001      	b.n	40233a <prvSampleTimeNow+0x6a>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402336:	4e12      	ldr	r6, [pc, #72]	; (402380 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
  402338:	4f12      	ldr	r7, [pc, #72]	; (402384 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40233a:	6833      	ldr	r3, [r6, #0]
  40233c:	681a      	ldr	r2, [r3, #0]
  40233e:	2a00      	cmp	r2, #0
  402340:	d1d2      	bne.n	4022e8 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  402342:	4a11      	ldr	r2, [pc, #68]	; (402388 <prvSampleTimeNow+0xb8>)
  402344:	6810      	ldr	r0, [r2, #0]
  402346:	490e      	ldr	r1, [pc, #56]	; (402380 <prvSampleTimeNow+0xb0>)
  402348:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40234a:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
  40234c:	2301      	movs	r3, #1
  40234e:	f8c9 3000 	str.w	r3, [r9]
  402352:	e002      	b.n	40235a <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402354:	2300      	movs	r3, #0
  402356:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
  40235a:	4b04      	ldr	r3, [pc, #16]	; (40236c <prvSampleTimeNow+0x9c>)
  40235c:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
  402360:	4640      	mov	r0, r8
  402362:	b002      	add	sp, #8
  402364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402368:	004019a5 	.word	0x004019a5
  40236c:	20018b34 	.word	0x20018b34
  402370:	00400dc9 	.word	0x00400dc9
  402374:	0040227d 	.word	0x0040227d
  402378:	00407654 	.word	0x00407654
  40237c:	004043c1 	.word	0x004043c1
  402380:	20018b08 	.word	0x20018b08
  402384:	00400e05 	.word	0x00400e05
  402388:	20018b3c 	.word	0x20018b3c

0040238c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  40238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402390:	b087      	sub	sp, #28
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402392:	f8df a16c 	ldr.w	sl, [pc, #364]	; 402500 <prvTimerTask+0x174>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  402396:	f8df b16c 	ldr.w	fp, [pc, #364]	; 402504 <prvTimerTask+0x178>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  40239a:	4e4e      	ldr	r6, [pc, #312]	; (4024d4 <prvTimerTask+0x148>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
  40239c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 402508 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4023a0:	f8da 3000 	ldr.w	r3, [sl]
  4023a4:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4023a6:	2a00      	cmp	r2, #0
  4023a8:	f000 808b 	beq.w	4024c2 <prvTimerTask+0x136>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4023ac:	68db      	ldr	r3, [r3, #12]
  4023ae:	681d      	ldr	r5, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  4023b0:	47d8      	blx	fp
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4023b2:	a803      	add	r0, sp, #12
  4023b4:	4b48      	ldr	r3, [pc, #288]	; (4024d8 <prvTimerTask+0x14c>)
  4023b6:	4798      	blx	r3
  4023b8:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4023ba:	9b03      	ldr	r3, [sp, #12]
  4023bc:	2b00      	cmp	r3, #0
  4023be:	d131      	bne.n	402424 <prvTimerTask+0x98>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4023c0:	4285      	cmp	r5, r0
  4023c2:	d825      	bhi.n	402410 <prvTimerTask+0x84>
			{
				xTaskResumeAll();
  4023c4:	4b45      	ldr	r3, [pc, #276]	; (4024dc <prvTimerTask+0x150>)
  4023c6:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4023c8:	f8da 3000 	ldr.w	r3, [sl]
  4023cc:	68db      	ldr	r3, [r3, #12]
  4023ce:	68df      	ldr	r7, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  4023d0:	1d38      	adds	r0, r7, #4
  4023d2:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4023d4:	69fb      	ldr	r3, [r7, #28]
  4023d6:	2b01      	cmp	r3, #1
  4023d8:	d115      	bne.n	402406 <prvTimerTask+0x7a>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4023da:	69b9      	ldr	r1, [r7, #24]
  4023dc:	4638      	mov	r0, r7
  4023de:	4429      	add	r1, r5
  4023e0:	4622      	mov	r2, r4
  4023e2:	462b      	mov	r3, r5
  4023e4:	4c3e      	ldr	r4, [pc, #248]	; (4024e0 <prvTimerTask+0x154>)
  4023e6:	47a0      	blx	r4
  4023e8:	2801      	cmp	r0, #1
  4023ea:	d10c      	bne.n	402406 <prvTimerTask+0x7a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4023ec:	2300      	movs	r3, #0
  4023ee:	9300      	str	r3, [sp, #0]
  4023f0:	4638      	mov	r0, r7
  4023f2:	4619      	mov	r1, r3
  4023f4:	462a      	mov	r2, r5
  4023f6:	4c3b      	ldr	r4, [pc, #236]	; (4024e4 <prvTimerTask+0x158>)
  4023f8:	47a0      	blx	r4
			configASSERT( xResult );
  4023fa:	b920      	cbnz	r0, 402406 <prvTimerTask+0x7a>
  4023fc:	483a      	ldr	r0, [pc, #232]	; (4024e8 <prvTimerTask+0x15c>)
  4023fe:	f44f 71a9 	mov.w	r1, #338	; 0x152
  402402:	4b3a      	ldr	r3, [pc, #232]	; (4024ec <prvTimerTask+0x160>)
  402404:	4798      	blx	r3
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402408:	4638      	mov	r0, r7
  40240a:	4798      	blx	r3
  40240c:	e00c      	b.n	402428 <prvTimerTask+0x9c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  40240e:	2500      	movs	r5, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  402410:	6830      	ldr	r0, [r6, #0]
  402412:	1b29      	subs	r1, r5, r4
  402414:	4b36      	ldr	r3, [pc, #216]	; (4024f0 <prvTimerTask+0x164>)
  402416:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  402418:	4b30      	ldr	r3, [pc, #192]	; (4024dc <prvTimerTask+0x150>)
  40241a:	4798      	blx	r3
  40241c:	b920      	cbnz	r0, 402428 <prvTimerTask+0x9c>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  40241e:	4b35      	ldr	r3, [pc, #212]	; (4024f4 <prvTimerTask+0x168>)
  402420:	4798      	blx	r3
  402422:	e001      	b.n	402428 <prvTimerTask+0x9c>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  402424:	4b2d      	ldr	r3, [pc, #180]	; (4024dc <prvTimerTask+0x150>)
  402426:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402428:	a802      	add	r0, sp, #8
  40242a:	4b2b      	ldr	r3, [pc, #172]	; (4024d8 <prvTimerTask+0x14c>)
  40242c:	4798      	blx	r3
  40242e:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  402430:	4d31      	ldr	r5, [pc, #196]	; (4024f8 <prvTimerTask+0x16c>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402432:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 4024e0 <prvTimerTask+0x154>
  402436:	e03c      	b.n	4024b2 <prvTimerTask+0x126>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
  402438:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  40243a:	b11c      	cbz	r4, 402444 <prvTimerTask+0xb8>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40243c:	6963      	ldr	r3, [r4, #20]
  40243e:	b10b      	cbz	r3, 402444 <prvTimerTask+0xb8>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  402440:	1d20      	adds	r0, r4, #4
  402442:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  402444:	9b03      	ldr	r3, [sp, #12]
  402446:	2b02      	cmp	r3, #2
  402448:	d021      	beq.n	40248e <prvTimerTask+0x102>
  40244a:	2b03      	cmp	r3, #3
  40244c:	d02e      	beq.n	4024ac <prvTimerTask+0x120>
  40244e:	2b00      	cmp	r3, #0
  402450:	d12f      	bne.n	4024b2 <prvTimerTask+0x126>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  402452:	9b04      	ldr	r3, [sp, #16]
  402454:	69a1      	ldr	r1, [r4, #24]
  402456:	4620      	mov	r0, r4
  402458:	4419      	add	r1, r3
  40245a:	463a      	mov	r2, r7
  40245c:	47c8      	blx	r9
  40245e:	2801      	cmp	r0, #1
  402460:	d127      	bne.n	4024b2 <prvTimerTask+0x126>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402462:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402464:	4620      	mov	r0, r4
  402466:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402468:	69e3      	ldr	r3, [r4, #28]
  40246a:	2b01      	cmp	r3, #1
  40246c:	d121      	bne.n	4024b2 <prvTimerTask+0x126>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40246e:	69a2      	ldr	r2, [r4, #24]
  402470:	2300      	movs	r3, #0
  402472:	9300      	str	r3, [sp, #0]
  402474:	4620      	mov	r0, r4
  402476:	4619      	mov	r1, r3
  402478:	9c04      	ldr	r4, [sp, #16]
  40247a:	4422      	add	r2, r4
  40247c:	4c19      	ldr	r4, [pc, #100]	; (4024e4 <prvTimerTask+0x158>)
  40247e:	47a0      	blx	r4
						configASSERT( xResult );
  402480:	b9b8      	cbnz	r0, 4024b2 <prvTimerTask+0x126>
  402482:	4819      	ldr	r0, [pc, #100]	; (4024e8 <prvTimerTask+0x15c>)
  402484:	f240 2129 	movw	r1, #553	; 0x229
  402488:	4b18      	ldr	r3, [pc, #96]	; (4024ec <prvTimerTask+0x160>)
  40248a:	4798      	blx	r3
  40248c:	e011      	b.n	4024b2 <prvTimerTask+0x126>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  40248e:	9b04      	ldr	r3, [sp, #16]
  402490:	61a3      	str	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402492:	b923      	cbnz	r3, 40249e <prvTimerTask+0x112>
  402494:	4814      	ldr	r0, [pc, #80]	; (4024e8 <prvTimerTask+0x15c>)
  402496:	f240 2136 	movw	r1, #566	; 0x236
  40249a:	4b14      	ldr	r3, [pc, #80]	; (4024ec <prvTimerTask+0x160>)
  40249c:	4798      	blx	r3
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40249e:	69a1      	ldr	r1, [r4, #24]
  4024a0:	4620      	mov	r0, r4
  4024a2:	4439      	add	r1, r7
  4024a4:	463a      	mov	r2, r7
  4024a6:	463b      	mov	r3, r7
  4024a8:	47c8      	blx	r9
  4024aa:	e002      	b.n	4024b2 <prvTimerTask+0x126>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  4024ac:	4620      	mov	r0, r4
  4024ae:	4b13      	ldr	r3, [pc, #76]	; (4024fc <prvTimerTask+0x170>)
  4024b0:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4024b2:	6830      	ldr	r0, [r6, #0]
  4024b4:	a903      	add	r1, sp, #12
  4024b6:	2200      	movs	r2, #0
  4024b8:	4613      	mov	r3, r2
  4024ba:	47a8      	blx	r5
  4024bc:	2800      	cmp	r0, #0
  4024be:	d1bb      	bne.n	402438 <prvTimerTask+0xac>
  4024c0:	e76e      	b.n	4023a0 <prvTimerTask+0x14>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  4024c2:	47d8      	blx	fp
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4024c4:	a803      	add	r0, sp, #12
  4024c6:	4b04      	ldr	r3, [pc, #16]	; (4024d8 <prvTimerTask+0x14c>)
  4024c8:	4798      	blx	r3
  4024ca:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4024cc:	9b03      	ldr	r3, [sp, #12]
  4024ce:	2b00      	cmp	r3, #0
  4024d0:	d09d      	beq.n	40240e <prvTimerTask+0x82>
  4024d2:	e7a7      	b.n	402424 <prvTimerTask+0x98>
  4024d4:	20018b38 	.word	0x20018b38
  4024d8:	004022d1 	.word	0x004022d1
  4024dc:	00401b39 	.word	0x00401b39
  4024e0:	00402125 	.word	0x00402125
  4024e4:	0040227d 	.word	0x0040227d
  4024e8:	00407654 	.word	0x00407654
  4024ec:	004043c1 	.word	0x004043c1
  4024f0:	00401671 	.word	0x00401671
  4024f4:	00400e95 	.word	0x00400e95
  4024f8:	0040150d 	.word	0x0040150d
  4024fc:	00401109 	.word	0x00401109
  402500:	20018b08 	.word	0x20018b08
  402504:	00401995 	.word	0x00401995
  402508:	00400e05 	.word	0x00400e05

0040250c <tSensor_serial_init>:
}UARTStateMachine_t;

UARTStateMachine_t uartStateMachine = UART_STATE_MACHINE_SYMBOL_H;

void tSensor_serial_init(void)
{
  40250c:	b510      	push	{r4, lr}
  40250e:	b086      	sub	sp, #24
	uint32_t rx_timeout = (SERIAL_FRAME_INTERVAL * USART_BAUDRATE_TEM) / 1000;
	sam_usart_opt_t usart_settings = {
  402510:	2300      	movs	r3, #0
  402512:	9302      	str	r3, [sp, #8]
  402514:	9303      	str	r3, [sp, #12]
  402516:	9304      	str	r3, [sp, #16]
  402518:	9305      	str	r3, [sp, #20]
  40251a:	4b17      	ldr	r3, [pc, #92]	; (402578 <tSensor_serial_init+0x6c>)
  40251c:	9300      	str	r3, [sp, #0]
  40251e:	23c0      	movs	r3, #192	; 0xc0
  402520:	9301      	str	r3, [sp, #4]
		.char_length = USART_CHRL_TEM,
		.parity_type = USART_PARITY_TEM,
		.stop_bits = USART_NBSTOP_TEM,
		.channel_mode = US_MR_CHMODE_NORMAL
	};
	flexcom_enable(TSENSOR_SERIAL_PORT_FLEXCOM);
  402522:	4c16      	ldr	r4, [pc, #88]	; (40257c <tSensor_serial_init+0x70>)
  402524:	4620      	mov	r0, r4
  402526:	4b16      	ldr	r3, [pc, #88]	; (402580 <tSensor_serial_init+0x74>)
  402528:	4798      	blx	r3
	flexcom_set_opmode(TSENSOR_SERIAL_PORT_FLEXCOM, FLEXCOM_USART);
  40252a:	4620      	mov	r0, r4
  40252c:	2101      	movs	r1, #1
  40252e:	4b15      	ldr	r3, [pc, #84]	; (402584 <tSensor_serial_init+0x78>)
  402530:	4798      	blx	r3
	
	/* Configure USART */
	usart_init_rs232(TSENSOR_SERIAL_PORT, &usart_settings,
  402532:	f504 7400 	add.w	r4, r4, #512	; 0x200
  402536:	4620      	mov	r0, r4
  402538:	4669      	mov	r1, sp
  40253a:	4a13      	ldr	r2, [pc, #76]	; (402588 <tSensor_serial_init+0x7c>)
  40253c:	4b13      	ldr	r3, [pc, #76]	; (40258c <tSensor_serial_init+0x80>)
  40253e:	4798      	blx	r3
	sysclk_get_peripheral_hz());
	
	usart_set_rx_timeout(TSENSOR_SERIAL_PORT, rx_timeout);
  402540:	4620      	mov	r0, r4
  402542:	f240 71a1 	movw	r1, #1953	; 0x7a1
  402546:	4b12      	ldr	r3, [pc, #72]	; (402590 <tSensor_serial_init+0x84>)
  402548:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40254a:	4b12      	ldr	r3, [pc, #72]	; (402594 <tSensor_serial_init+0x88>)
  40254c:	22e0      	movs	r2, #224	; 0xe0
  40254e:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402552:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402556:	601a      	str	r2, [r3, #0]
	
	/* Enable USART1 RX interrupt. */
	NVIC_SetPriority(TSENSOR_SERIAL_PORT_IRQn, SERIAL_PORT_INT_PRIO);
	NVIC_EnableIRQ((IRQn_Type)TSENSOR_SERIAL_PORT_FLEXCOM_ID);
	usart_enable_interrupt(TSENSOR_SERIAL_PORT, (US_IER_TIMEOUT | US_IER_RXRDY));
  402558:	4620      	mov	r0, r4
  40255a:	f240 1101 	movw	r1, #257	; 0x101
  40255e:	4b0e      	ldr	r3, [pc, #56]	; (402598 <tSensor_serial_init+0x8c>)
  402560:	4798      	blx	r3
	
	/* Enable the receiver and transmitter. */
	usart_start_rx_timeout(TSENSOR_SERIAL_PORT);
  402562:	4620      	mov	r0, r4
  402564:	4b0d      	ldr	r3, [pc, #52]	; (40259c <tSensor_serial_init+0x90>)
  402566:	4798      	blx	r3
	usart_enable_tx(TSENSOR_SERIAL_PORT);
  402568:	4620      	mov	r0, r4
  40256a:	4b0d      	ldr	r3, [pc, #52]	; (4025a0 <tSensor_serial_init+0x94>)
  40256c:	4798      	blx	r3
	usart_enable_rx(TSENSOR_SERIAL_PORT);
  40256e:	4620      	mov	r0, r4
  402570:	4b0c      	ldr	r3, [pc, #48]	; (4025a4 <tSensor_serial_init+0x98>)
  402572:	4798      	blx	r3
	
	/* Init thermo board only for once at start*/
	//Temp_Measure_Command_Send(INIT_SENSATION_MEASUREMENT);
}
  402574:	b006      	add	sp, #24
  402576:	bd10      	pop	{r4, pc}
  402578:	0002faf0 	.word	0x0002faf0
  40257c:	40018000 	.word	0x40018000
  402580:	00400439 	.word	0x00400439
  402584:	004005a9 	.word	0x004005a9
  402588:	07270000 	.word	0x07270000
  40258c:	00400985 	.word	0x00400985
  402590:	004009e9 	.word	0x004009e9
  402594:	e000e100 	.word	0xe000e100
  402598:	004009ed 	.word	0x004009ed
  40259c:	004009f9 	.word	0x004009f9
  4025a0:	004009d9 	.word	0x004009d9
  4025a4:	004009e1 	.word	0x004009e1

004025a8 <FLEXCOM3_Handler>:

static uint32_t recv_idx = 0;
void tSensor_uart_isr_handler(void)
{
  4025a8:	b510      	push	{r4, lr}
  4025aa:	b082      	sub	sp, #8
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  4025ac:	2300      	movs	r3, #0
  4025ae:	9301      	str	r3, [sp, #4]
	uint32_t status;
	uint32_t symbol;
	Pdc *p_pdc = NULL;
	status = usart_get_status(TSENSOR_SERIAL_PORT);
  4025b0:	4820      	ldr	r0, [pc, #128]	; (402634 <FLEXCOM3_Handler+0x8c>)
  4025b2:	4b21      	ldr	r3, [pc, #132]	; (402638 <FLEXCOM3_Handler+0x90>)
  4025b4:	4798      	blx	r3
	if(status & US_CSR_RXRDY) {
  4025b6:	f010 0f01 	tst.w	r0, #1
  4025ba:	d012      	beq.n	4025e2 <FLEXCOM3_Handler+0x3a>
		if(usart_read(TSENSOR_SERIAL_PORT, &symbol) == 0) {
  4025bc:	481d      	ldr	r0, [pc, #116]	; (402634 <FLEXCOM3_Handler+0x8c>)
  4025be:	4669      	mov	r1, sp
  4025c0:	4b1e      	ldr	r3, [pc, #120]	; (40263c <FLEXCOM3_Handler+0x94>)
  4025c2:	4798      	blx	r3
  4025c4:	2800      	cmp	r0, #0
  4025c6:	d133      	bne.n	402630 <FLEXCOM3_Handler+0x88>
			if (tempUartRecvBuff.len < TSENSOR_RECV_BUFF_SIZE){
  4025c8:	4b1d      	ldr	r3, [pc, #116]	; (402640 <FLEXCOM3_Handler+0x98>)
  4025ca:	881b      	ldrh	r3, [r3, #0]
  4025cc:	f241 3287 	movw	r2, #4999	; 0x1387
  4025d0:	4293      	cmp	r3, r2
  4025d2:	d82d      	bhi.n	402630 <FLEXCOM3_Handler+0x88>
				tempUartRecvBuff.payload[tempUartRecvBuff.len++] = (uint8_t)symbol;
  4025d4:	4a1a      	ldr	r2, [pc, #104]	; (402640 <FLEXCOM3_Handler+0x98>)
  4025d6:	1c59      	adds	r1, r3, #1
  4025d8:	8011      	strh	r1, [r2, #0]
  4025da:	4413      	add	r3, r2
  4025dc:	9a00      	ldr	r2, [sp, #0]
  4025de:	709a      	strb	r2, [r3, #2]
  4025e0:	e026      	b.n	402630 <FLEXCOM3_Handler+0x88>
			}
		}
	}else if(status & US_CSR_TIMEOUT) {
  4025e2:	f410 7f80 	tst.w	r0, #256	; 0x100
  4025e6:	d014      	beq.n	402612 <FLEXCOM3_Handler+0x6a>
		if (tempUartRecvBuff.len > 0){
  4025e8:	4b15      	ldr	r3, [pc, #84]	; (402640 <FLEXCOM3_Handler+0x98>)
  4025ea:	881a      	ldrh	r2, [r3, #0]
  4025ec:	b16a      	cbz	r2, 40260a <FLEXCOM3_Handler+0x62>
			// notice task to process
			//printf("Get data from sensor..........%d\r\n", tempUartRecvBuff.len);
			memcpy(&uartRecvBuff,&tempUartRecvBuff,tempUartRecvBuff.len + sizeof(uint16_t));
  4025ee:	461c      	mov	r4, r3
  4025f0:	4814      	ldr	r0, [pc, #80]	; (402644 <FLEXCOM3_Handler+0x9c>)
  4025f2:	4619      	mov	r1, r3
  4025f4:	3202      	adds	r2, #2
  4025f6:	4b14      	ldr	r3, [pc, #80]	; (402648 <FLEXCOM3_Handler+0xa0>)
  4025f8:	4798      	blx	r3
			tempUartRecvBuff.len = 0;
  4025fa:	2300      	movs	r3, #0
  4025fc:	8023      	strh	r3, [r4, #0]
			xSemaphoreGiveFromISR(startTsensorProcessing, &higher_priority_task_woken);
  4025fe:	4a13      	ldr	r2, [pc, #76]	; (40264c <FLEXCOM3_Handler+0xa4>)
  402600:	6810      	ldr	r0, [r2, #0]
  402602:	4619      	mov	r1, r3
  402604:	aa01      	add	r2, sp, #4
  402606:	4c12      	ldr	r4, [pc, #72]	; (402650 <FLEXCOM3_Handler+0xa8>)
  402608:	47a0      	blx	r4
		}
		//tempUartRecvBuff.len = 0;
		usart_start_rx_timeout(TSENSOR_SERIAL_PORT);
  40260a:	480a      	ldr	r0, [pc, #40]	; (402634 <FLEXCOM3_Handler+0x8c>)
  40260c:	4b11      	ldr	r3, [pc, #68]	; (402654 <FLEXCOM3_Handler+0xac>)
  40260e:	4798      	blx	r3
  402610:	e00e      	b.n	402630 <FLEXCOM3_Handler+0x88>

	}else if(status & US_CSR_ENDTX) {
  402612:	f010 0f10 	tst.w	r0, #16
  402616:	d00b      	beq.n	402630 <FLEXCOM3_Handler+0x88>
		p_pdc = usart_get_pdc_base(TSENSOR_SERIAL_PORT);
  402618:	4c06      	ldr	r4, [pc, #24]	; (402634 <FLEXCOM3_Handler+0x8c>)
  40261a:	4620      	mov	r0, r4
  40261c:	4b0e      	ldr	r3, [pc, #56]	; (402658 <FLEXCOM3_Handler+0xb0>)
  40261e:	4798      	blx	r3
		pdc_disable_transfer(p_pdc, PERIPH_PTCR_TXTDIS);
  402620:	f44f 7100 	mov.w	r1, #512	; 0x200
  402624:	4b0d      	ldr	r3, [pc, #52]	; (40265c <FLEXCOM3_Handler+0xb4>)
  402626:	4798      	blx	r3
		usart_disable_interrupt(TSENSOR_SERIAL_PORT, US_IDR_ENDTX);
  402628:	4620      	mov	r0, r4
  40262a:	2110      	movs	r1, #16
  40262c:	4b0c      	ldr	r3, [pc, #48]	; (402660 <FLEXCOM3_Handler+0xb8>)
  40262e:	4798      	blx	r3
	}else{
		/* Do nothing */
	}
}
  402630:	b002      	add	sp, #8
  402632:	bd10      	pop	{r4, pc}
  402634:	40018200 	.word	0x40018200
  402638:	004009f5 	.word	0x004009f5
  40263c:	00400a15 	.word	0x00400a15
  402640:	20019eec 	.word	0x20019eec
  402644:	20018b60 	.word	0x20018b60
  402648:	00404555 	.word	0x00404555
  40264c:	2001b278 	.word	0x2001b278
  402650:	00401471 	.word	0x00401471
  402654:	004009f9 	.word	0x004009f9
  402658:	00400a2d 	.word	0x00400a2d
  40265c:	004005d1 	.word	0x004005d1
  402660:	004009f1 	.word	0x004009f1

00402664 <sendToTsensorUart>:




void sendToTsensorUart(uint8_t *buff, int32_t buffSize)
{
  402664:	b5f0      	push	{r4, r5, r6, r7, lr}
  402666:	b083      	sub	sp, #12
  402668:	4607      	mov	r7, r0
  40266a:	460e      	mov	r6, r1
	Pdc *p_pdc = NULL;
	pdc_packet_t packet;
	p_pdc = usart_get_pdc_base(TSENSOR_SERIAL_PORT);
  40266c:	4c0a      	ldr	r4, [pc, #40]	; (402698 <sendToTsensorUart+0x34>)
  40266e:	4620      	mov	r0, r4
  402670:	4b0a      	ldr	r3, [pc, #40]	; (40269c <sendToTsensorUart+0x38>)
  402672:	4798      	blx	r3
  402674:	4605      	mov	r5, r0
	
	packet.ul_addr = (uint32_t)buff;
  402676:	9700      	str	r7, [sp, #0]
	packet.ul_size = buffSize;
  402678:	9601      	str	r6, [sp, #4]
	
	pdc_tx_init(p_pdc, &packet, NULL);
  40267a:	4669      	mov	r1, sp
  40267c:	2200      	movs	r2, #0
  40267e:	4b08      	ldr	r3, [pc, #32]	; (4026a0 <sendToTsensorUart+0x3c>)
  402680:	4798      	blx	r3
	pdc_enable_transfer(p_pdc, PERIPH_PTCR_TXTEN);
  402682:	4628      	mov	r0, r5
  402684:	f44f 7180 	mov.w	r1, #256	; 0x100
  402688:	4b06      	ldr	r3, [pc, #24]	; (4026a4 <sendToTsensorUart+0x40>)
  40268a:	4798      	blx	r3
	usart_enable_interrupt(TSENSOR_SERIAL_PORT, US_IER_ENDTX);
  40268c:	4620      	mov	r0, r4
  40268e:	2110      	movs	r1, #16
  402690:	4b05      	ldr	r3, [pc, #20]	; (4026a8 <sendToTsensorUart+0x44>)
  402692:	4798      	blx	r3
}
  402694:	b003      	add	sp, #12
  402696:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402698:	40018200 	.word	0x40018200
  40269c:	00400a2d 	.word	0x00400a2d
  4026a0:	004005ad 	.word	0x004005ad
  4026a4:	004005c5 	.word	0x004005c5
  4026a8:	004009ed 	.word	0x004009ed

004026ac <Temp_Measure_Command_Send>:

void Temp_Measure_Command_Send(uint8_t command)
{
  4026ac:	b508      	push	{r3, lr}
	sendbuff[0] = G55_TO_THERMAL_SYMBOL;
  4026ae:	4b09      	ldr	r3, [pc, #36]	; (4026d4 <Temp_Measure_Command_Send+0x28>)
  4026b0:	22aa      	movs	r2, #170	; 0xaa
  4026b2:	701a      	strb	r2, [r3, #0]
	sendbuff[1] = 0x10;
  4026b4:	2110      	movs	r1, #16
  4026b6:	7059      	strb	r1, [r3, #1]
	sendbuff[2] = 0x01;
  4026b8:	2101      	movs	r1, #1
  4026ba:	7099      	strb	r1, [r3, #2]
	sendbuff[3] = 0x00;
  4026bc:	2100      	movs	r1, #0
  4026be:	70d9      	strb	r1, [r3, #3]
	sendbuff[4] = command;
  4026c0:	7118      	strb	r0, [r3, #4]
	sendbuff[5] = 0xAA;
  4026c2:	715a      	strb	r2, [r3, #5]
	sendbuff[6] = 0x1F;
  4026c4:	221f      	movs	r2, #31
  4026c6:	719a      	strb	r2, [r3, #6]
	sendToTsensorUart(sendbuff, 7);
  4026c8:	4618      	mov	r0, r3
  4026ca:	2107      	movs	r1, #7
  4026cc:	4b02      	ldr	r3, [pc, #8]	; (4026d8 <Temp_Measure_Command_Send+0x2c>)
  4026ce:	4798      	blx	r3
  4026d0:	bd08      	pop	{r3, pc}
  4026d2:	bf00      	nop
  4026d4:	20018b40 	.word	0x20018b40
  4026d8:	00402665 	.word	0x00402665

004026dc <tSensor_handler>:
		signal_to_wifi(totalPacket, 0);
	}
}
uint8_t thermoIndex = 0;
void tSensor_handler(void)
{
  4026dc:	b510      	push	{r4, lr}

	//vPortEnterCritical();
	//vPortExitCritical();
	
	//xTimerStop(xTsensorCommTimeoutTimer, 0 );
	printf("%6d(%d)\r\n",xTaskGetTickCount(), uartRecvBuff.len);
  4026de:	4b12      	ldr	r3, [pc, #72]	; (402728 <tSensor_handler+0x4c>)
  4026e0:	4798      	blx	r3
  4026e2:	4601      	mov	r1, r0
  4026e4:	4c11      	ldr	r4, [pc, #68]	; (40272c <tSensor_handler+0x50>)
  4026e6:	4812      	ldr	r0, [pc, #72]	; (402730 <tSensor_handler+0x54>)
  4026e8:	8822      	ldrh	r2, [r4, #0]
  4026ea:	4b12      	ldr	r3, [pc, #72]	; (402734 <tSensor_handler+0x58>)
  4026ec:	4798      	blx	r3
	//for (uint16_t i = 0; i < 3/*uartRecvBuff.len*/; i++){
	//	/*uartDataParser(uartRecvBuff.payload[i]); */printf("%02X ",uartRecvBuff.payload[i]);
	//}
	//printf("\r\n");
	if (uartRecvBuff.payload[0] == 0xCC &&
  4026ee:	8862      	ldrh	r2, [r4, #2]
  4026f0:	f248 03cc 	movw	r3, #32972	; 0x80cc
  4026f4:	429a      	cmp	r2, r3
  4026f6:	d116      	bne.n	402726 <tSensor_handler+0x4a>
		uartRecvBuff.payload[1] == 0x80)
		{
			Temp_Measure_Command_Send(SENSATION_MEASUREMENT_STOP);
  4026f8:	2003      	movs	r0, #3
  4026fa:	4b0f      	ldr	r3, [pc, #60]	; (402738 <tSensor_handler+0x5c>)
  4026fc:	4798      	blx	r3
			memset(thermimage, 0, sizeof(thermimage));
  4026fe:	4c0f      	ldr	r4, [pc, #60]	; (40273c <tSensor_handler+0x60>)
  402700:	4620      	mov	r0, r4
  402702:	2100      	movs	r1, #0
  402704:	f241 1246 	movw	r2, #4422	; 0x1146
  402708:	4b0d      	ldr	r3, [pc, #52]	; (402740 <tSensor_handler+0x64>)
  40270a:	4798      	blx	r3
			memcpy(&thermimage[0], &uartRecvBuff.payload[4], 96*46);
  40270c:	4620      	mov	r0, r4
  40270e:	490d      	ldr	r1, [pc, #52]	; (402744 <tSensor_handler+0x68>)
  402710:	f44f 528a 	mov.w	r2, #4416	; 0x1140
  402714:	4b0c      	ldr	r3, [pc, #48]	; (402748 <tSensor_handler+0x6c>)
  402716:	4798      	blx	r3
			for (uint16_t i = 0; i< 96*46; i++)
				printf("%02X ",thermimage[i]);
			printf("\r\n");*/
			//distributePacket(thermimage, 4416);
			thermoIndex = 0;
			signal_to_wifi(thermimage, thermoIndex++);
  402718:	2201      	movs	r2, #1
  40271a:	4b0c      	ldr	r3, [pc, #48]	; (40274c <tSensor_handler+0x70>)
  40271c:	701a      	strb	r2, [r3, #0]
  40271e:	4620      	mov	r0, r4
  402720:	2100      	movs	r1, #0
  402722:	4b0b      	ldr	r3, [pc, #44]	; (402750 <tSensor_handler+0x74>)
  402724:	4798      	blx	r3
  402726:	bd10      	pop	{r4, pc}
  402728:	004019a5 	.word	0x004019a5
  40272c:	20018b60 	.word	0x20018b60
  402730:	004076d0 	.word	0x004076d0
  402734:	004044c9 	.word	0x004044c9
  402738:	004026ad 	.word	0x004026ad
  40273c:	2001bc64 	.word	0x2001bc64
  402740:	00404689 	.word	0x00404689
  402744:	20018b66 	.word	0x20018b66
  402748:	00404555 	.word	0x00404555
  40274c:	2001b27c 	.word	0x2001b27c
  402750:	00402cfd 	.word	0x00402cfd

00402754 <Temp_Measure_Get_Air_Condition_Info>:
	sendbuff[6] = 0x1F;
	sendToTsensorUart(sendbuff, 7);
}

void Temp_Measure_Get_Air_Condition_Info(uint8_t roomTemperature, uint8_t roomHumidity)
{
  402754:	b510      	push	{r4, lr}
	sendbuff[0] = G55_TO_THERMAL_SYMBOL;
  402756:	4b09      	ldr	r3, [pc, #36]	; (40277c <Temp_Measure_Get_Air_Condition_Info+0x28>)
  402758:	22aa      	movs	r2, #170	; 0xaa
  40275a:	701a      	strb	r2, [r3, #0]
	sendbuff[1] = 0x88;
  40275c:	2488      	movs	r4, #136	; 0x88
  40275e:	705c      	strb	r4, [r3, #1]
	sendbuff[2] = 0x02;
  402760:	2402      	movs	r4, #2
  402762:	709c      	strb	r4, [r3, #2]
	sendbuff[3] = 0x00;
  402764:	2400      	movs	r4, #0
  402766:	70dc      	strb	r4, [r3, #3]
	sendbuff[4] = roomTemperature;//
  402768:	7118      	strb	r0, [r3, #4]
	sendbuff[5] = roomHumidity;//
  40276a:	7159      	strb	r1, [r3, #5]
	sendbuff[6] = 0xAA;
  40276c:	719a      	strb	r2, [r3, #6]
	sendbuff[7] = 0x8F;
  40276e:	228f      	movs	r2, #143	; 0x8f
  402770:	71da      	strb	r2, [r3, #7]
	sendToTsensorUart(sendbuff, 8);
  402772:	4618      	mov	r0, r3
  402774:	2108      	movs	r1, #8
  402776:	4b02      	ldr	r3, [pc, #8]	; (402780 <Temp_Measure_Get_Air_Condition_Info+0x2c>)
  402778:	4798      	blx	r3
  40277a:	bd10      	pop	{r4, pc}
  40277c:	20018b40 	.word	0x20018b40
  402780:	00402665 	.word	0x00402665

00402784 <sensor_task>:
}



void sensor_task( void *pvParameters)
{
  402784:	b508      	push	{r3, lr}
	vSemaphoreCreateBinary(startTsensorProcessing);
  402786:	2001      	movs	r0, #1
  402788:	2100      	movs	r1, #0
  40278a:	2203      	movs	r2, #3
  40278c:	4b0d      	ldr	r3, [pc, #52]	; (4027c4 <sensor_task+0x40>)
  40278e:	4798      	blx	r3
  402790:	4b0d      	ldr	r3, [pc, #52]	; (4027c8 <sensor_task+0x44>)
  402792:	6018      	str	r0, [r3, #0]
  402794:	b138      	cbz	r0, 4027a6 <sensor_task+0x22>
  402796:	2100      	movs	r1, #0
  402798:	460a      	mov	r2, r1
  40279a:	460b      	mov	r3, r1
  40279c:	4c0b      	ldr	r4, [pc, #44]	; (4027cc <sensor_task+0x48>)
  40279e:	47a0      	blx	r4
	if (startTsensorProcessing == NULL){
  4027a0:	4b09      	ldr	r3, [pc, #36]	; (4027c8 <sensor_task+0x44>)
  4027a2:	681b      	ldr	r3, [r3, #0]
  4027a4:	b913      	cbnz	r3, 4027ac <sensor_task+0x28>
		printf("Failed to create Semaphore: startTsensorProcessing \r\n");
  4027a6:	480a      	ldr	r0, [pc, #40]	; (4027d0 <sensor_task+0x4c>)
  4027a8:	4b0a      	ldr	r3, [pc, #40]	; (4027d4 <sensor_task+0x50>)
  4027aa:	4798      	blx	r3
	}
	
	
	for(;;) {
		//vTaskDelay(1000);
		xSemaphoreTake(startTsensorProcessing, portMAX_DELAY);
  4027ac:	4e06      	ldr	r6, [pc, #24]	; (4027c8 <sensor_task+0x44>)
  4027ae:	4d0a      	ldr	r5, [pc, #40]	; (4027d8 <sensor_task+0x54>)
		tSensor_handler();	
  4027b0:	4c0a      	ldr	r4, [pc, #40]	; (4027dc <sensor_task+0x58>)
	}
	
	
	for(;;) {
		//vTaskDelay(1000);
		xSemaphoreTake(startTsensorProcessing, portMAX_DELAY);
  4027b2:	6830      	ldr	r0, [r6, #0]
  4027b4:	2100      	movs	r1, #0
  4027b6:	f04f 32ff 	mov.w	r2, #4294967295
  4027ba:	460b      	mov	r3, r1
  4027bc:	47a8      	blx	r5
		tSensor_handler();	
  4027be:	47a0      	blx	r4
	}
  4027c0:	e7f7      	b.n	4027b2 <sensor_task+0x2e>
  4027c2:	bf00      	nop
  4027c4:	004012e1 	.word	0x004012e1
  4027c8:	2001b278 	.word	0x2001b278
  4027cc:	00401341 	.word	0x00401341
  4027d0:	004076dc 	.word	0x004076dc
  4027d4:	004044c9 	.word	0x004044c9
  4027d8:	0040150d 	.word	0x0040150d
  4027dc:	004026dd 	.word	0x004026dd

004027e0 <vLedModeCallback>:
	}
}

static void vLedModeCallback( xTimerHandle pxTimer )
{
	switch(led_blinking_mode){
  4027e0:	4b1e      	ldr	r3, [pc, #120]	; (40285c <vLedModeCallback+0x7c>)
  4027e2:	781b      	ldrb	r3, [r3, #0]
  4027e4:	3b01      	subs	r3, #1
  4027e6:	2b03      	cmp	r3, #3
  4027e8:	d837      	bhi.n	40285a <vLedModeCallback+0x7a>
  4027ea:	e8df f003 	tbb	[pc, r3]
  4027ee:	2202      	.short	0x2202
  4027f0:	122c      	.short	0x122c
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4027f2:	4b1b      	ldr	r3, [pc, #108]	; (402860 <vLedModeCallback+0x80>)
  4027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4027f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
		port->PIO_CODR = mask;
  4027fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4027fe:	4b18      	ldr	r3, [pc, #96]	; (402860 <vLedModeCallback+0x80>)
  402800:	bf14      	ite	ne
  402802:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  402804:	631a      	streq	r2, [r3, #48]	; 0x30
		case LED_MODE_CONNECT:
		{
			LED_Toggle(LED0);
			led_state = led_state^1;
  402806:	4a17      	ldr	r2, [pc, #92]	; (402864 <vLedModeCallback+0x84>)
  402808:	7813      	ldrb	r3, [r2, #0]
  40280a:	f083 0301 	eor.w	r3, r3, #1
  40280e:	7013      	strb	r3, [r2, #0]
			break;
  402810:	4770      	bx	lr
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  402812:	4b13      	ldr	r3, [pc, #76]	; (402860 <vLedModeCallback+0x80>)
  402814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  402816:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
		port->PIO_CODR = mask;
  40281a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40281e:	4b10      	ldr	r3, [pc, #64]	; (402860 <vLedModeCallback+0x80>)
  402820:	bf14      	ite	ne
  402822:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  402824:	631a      	streq	r2, [r3, #48]	; 0x30
		}
		case LED_MODE_OTAU:
		{
			LED_Toggle(LED0);
			led_state = led_state^1;
  402826:	4a0f      	ldr	r2, [pc, #60]	; (402864 <vLedModeCallback+0x84>)
  402828:	7813      	ldrb	r3, [r2, #0]
  40282a:	f083 0301 	eor.w	r3, r3, #1
  40282e:	7013      	strb	r3, [r2, #0]
			break;
  402830:	4770      	bx	lr
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402836:	4b0a      	ldr	r3, [pc, #40]	; (402860 <vLedModeCallback+0x80>)
  402838:	635a      	str	r2, [r3, #52]	; 0x34
		}
		case LED_MODE_OFF:
		{
			LED_Off(LED0);
			led_state = 0;
  40283a:	2300      	movs	r3, #0
  40283c:	4a09      	ldr	r2, [pc, #36]	; (402864 <vLedModeCallback+0x84>)
  40283e:	7013      	strb	r3, [r2, #0]
			led_blinking_mode = LED_MODE_NONE;
  402840:	4a06      	ldr	r2, [pc, #24]	; (40285c <vLedModeCallback+0x7c>)
  402842:	7013      	strb	r3, [r2, #0]
			break;
  402844:	4770      	bx	lr
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40284a:	4b05      	ldr	r3, [pc, #20]	; (402860 <vLedModeCallback+0x80>)
  40284c:	631a      	str	r2, [r3, #48]	; 0x30
		}
		case LED_MODE_ON:
		{
			LED_On(LED0);
			led_state = 1;
  40284e:	2201      	movs	r2, #1
  402850:	4b04      	ldr	r3, [pc, #16]	; (402864 <vLedModeCallback+0x84>)
  402852:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_NONE;
  402854:	2200      	movs	r2, #0
  402856:	4b01      	ldr	r3, [pc, #4]	; (40285c <vLedModeCallback+0x7c>)
  402858:	701a      	strb	r2, [r3, #0]
  40285a:	4770      	bx	lr
  40285c:	20000021 	.word	0x20000021
  402860:	400e0e00 	.word	0x400e0e00
  402864:	2001b3e1 	.word	0x2001b3e1

00402868 <startTemperature>:
	resp_out_data->len = 256;
	IoT_xQueueSend(serial_out_queue, &resp_out_data, 1000);
	//nm_uart_send(UART1, &buf[0], p - &buf[0]);*/
}
static void startTemperature(void)
{
  402868:	b570      	push	{r4, r5, r6, lr}
	IoT_DEBUG(IoT_DBG_ON | IoT_DBG_INFO, ("Receive get temperature command.\r\n"));
  40286a:	4b18      	ldr	r3, [pc, #96]	; (4028cc <startTemperature+0x64>)
  40286c:	6818      	ldr	r0, [r3, #0]
  40286e:	b1d0      	cbz	r0, 4028a6 <startTemperature+0x3e>
  402870:	2100      	movs	r1, #0
  402872:	f04f 32ff 	mov.w	r2, #4294967295
  402876:	460b      	mov	r3, r1
  402878:	4c15      	ldr	r4, [pc, #84]	; (4028d0 <startTemperature+0x68>)
  40287a:	47a0      	blx	r4
  40287c:	4b15      	ldr	r3, [pc, #84]	; (4028d4 <startTemperature+0x6c>)
  40287e:	4798      	blx	r3
  402880:	4604      	mov	r4, r0
  402882:	2000      	movs	r0, #0
  402884:	4b14      	ldr	r3, [pc, #80]	; (4028d8 <startTemperature+0x70>)
  402886:	4798      	blx	r3
  402888:	4602      	mov	r2, r0
  40288a:	4814      	ldr	r0, [pc, #80]	; (4028dc <startTemperature+0x74>)
  40288c:	4621      	mov	r1, r4
  40288e:	4c14      	ldr	r4, [pc, #80]	; (4028e0 <startTemperature+0x78>)
  402890:	47a0      	blx	r4
  402892:	4814      	ldr	r0, [pc, #80]	; (4028e4 <startTemperature+0x7c>)
  402894:	47a0      	blx	r4
  402896:	4b0d      	ldr	r3, [pc, #52]	; (4028cc <startTemperature+0x64>)
  402898:	6818      	ldr	r0, [r3, #0]
  40289a:	2100      	movs	r1, #0
  40289c:	460a      	mov	r2, r1
  40289e:	460b      	mov	r3, r1
  4028a0:	4c11      	ldr	r4, [pc, #68]	; (4028e8 <startTemperature+0x80>)
  4028a2:	47a0      	blx	r4
  4028a4:	e002      	b.n	4028ac <startTemperature+0x44>
  4028a6:	480f      	ldr	r0, [pc, #60]	; (4028e4 <startTemperature+0x7c>)
  4028a8:	4b0d      	ldr	r3, [pc, #52]	; (4028e0 <startTemperature+0x78>)
  4028aa:	4798      	blx	r3
	//Just for test for flow control
	//sendback_temperature();
	//return;	
	Temp_Measure_Command_Send(INIT_SENSATION_MEASUREMENT);
  4028ac:	2001      	movs	r0, #1
  4028ae:	4e0f      	ldr	r6, [pc, #60]	; (4028ec <startTemperature+0x84>)
  4028b0:	47b0      	blx	r6
	delay_ms(500);
  4028b2:	4d0f      	ldr	r5, [pc, #60]	; (4028f0 <startTemperature+0x88>)
  4028b4:	4628      	mov	r0, r5
  4028b6:	4c0f      	ldr	r4, [pc, #60]	; (4028f4 <startTemperature+0x8c>)
  4028b8:	47a0      	blx	r4
	Temp_Measure_Command_Send(SENSATION_MEASUREMENT_START);
  4028ba:	2002      	movs	r0, #2
  4028bc:	47b0      	blx	r6
	delay_ms(500);
  4028be:	4628      	mov	r0, r5
  4028c0:	47a0      	blx	r4
	Temp_Measure_Get_Air_Condition_Info(0x00, 50);
  4028c2:	2000      	movs	r0, #0
  4028c4:	2132      	movs	r1, #50	; 0x32
  4028c6:	4b0c      	ldr	r3, [pc, #48]	; (4028f8 <startTemperature+0x90>)
  4028c8:	4798      	blx	r3
  4028ca:	bd70      	pop	{r4, r5, r6, pc}
  4028cc:	2001bc14 	.word	0x2001bc14
  4028d0:	0040150d 	.word	0x0040150d
  4028d4:	004019a5 	.word	0x004019a5
  4028d8:	004019e5 	.word	0x004019e5
  4028dc:	00407714 	.word	0x00407714
  4028e0:	004044c9 	.word	0x004044c9
  4028e4:	00407720 	.word	0x00407720
  4028e8:	00401341 	.word	0x00401341
  4028ec:	004026ad 	.word	0x004026ad
  4028f0:	00416493 	.word	0x00416493
  4028f4:	20000001 	.word	0x20000001
  4028f8:	00402755 	.word	0x00402755

004028fc <wifi_module_reset>:
volatile int uart_beatheart = 0;
extern uint8_t thermoIndex;
extern uint8_t thermimage[96*46 + 6];

void wifi_module_reset(void)
{
  4028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4028fe:	4e06      	ldr	r6, [pc, #24]	; (402918 <wifi_module_reset+0x1c>)
  402900:	2702      	movs	r7, #2
  402902:	6377      	str	r7, [r6, #52]	; 0x34
	//ioport_set_pin_level(WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	delay_ms(100);
  402904:	4d05      	ldr	r5, [pc, #20]	; (40291c <wifi_module_reset+0x20>)
  402906:	4628      	mov	r0, r5
  402908:	4c05      	ldr	r4, [pc, #20]	; (402920 <wifi_module_reset+0x24>)
  40290a:	47a0      	blx	r4
	//ioport_set_pin_level(WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	delay_ms(100);
  40290c:	4628      	mov	r0, r5
  40290e:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402910:	6337      	str	r7, [r6, #48]	; 0x30
	ioport_set_pin_level(WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	delay_ms(100);
  402912:	4628      	mov	r0, r5
  402914:	47a0      	blx	r4
  402916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402918:	400e1000 	.word	0x400e1000
  40291c:	000d141e 	.word	0x000d141e
  402920:	20000001 	.word	0x20000001

00402924 <wifi_serial_init>:
	*pDstStr++ = 0;
	return srcLen * 2;
}

void wifi_serial_init(uint32_t baudspeed)
{
  402924:	b530      	push	{r4, r5, lr}
  402926:	b087      	sub	sp, #28
  402928:	4604      	mov	r4, r0
	uint32_t rx_timeout = (SERIAL_FRAME_INTERVAL * baudspeed) / 1000;
	sam_usart_opt_t usart_settings = {
  40292a:	2300      	movs	r3, #0
  40292c:	9303      	str	r3, [sp, #12]
  40292e:	9304      	str	r3, [sp, #16]
  402930:	9305      	str	r3, [sp, #20]
  402932:	9000      	str	r0, [sp, #0]
  402934:	23c0      	movs	r3, #192	; 0xc0
  402936:	9301      	str	r3, [sp, #4]
  402938:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40293c:	9302      	str	r3, [sp, #8]
		.char_length = USART_CHRL,
		.parity_type = USART_PARITY,
		.stop_bits = USART_NBSTOP,
		.channel_mode = US_MR_CHMODE_NORMAL
	};
	flexcom_enable(WIFI_SERIAL_PORT_FLEXCOM);
  40293e:	4d1b      	ldr	r5, [pc, #108]	; (4029ac <wifi_serial_init+0x88>)
  402940:	4628      	mov	r0, r5
  402942:	4b1b      	ldr	r3, [pc, #108]	; (4029b0 <wifi_serial_init+0x8c>)
  402944:	4798      	blx	r3
	flexcom_set_opmode(WIFI_SERIAL_PORT_FLEXCOM, FLEXCOM_USART);
  402946:	4628      	mov	r0, r5
  402948:	2101      	movs	r1, #1
  40294a:	4b1a      	ldr	r3, [pc, #104]	; (4029b4 <wifi_serial_init+0x90>)
  40294c:	4798      	blx	r3
	
	/* Configure USART */
	usart_init_rs232(WIFI_SERIAL_PORT, &usart_settings,sysclk_get_peripheral_hz());
  40294e:	f505 7500 	add.w	r5, r5, #512	; 0x200
  402952:	4628      	mov	r0, r5
  402954:	4669      	mov	r1, sp
  402956:	4a18      	ldr	r2, [pc, #96]	; (4029b8 <wifi_serial_init+0x94>)
  402958:	4b18      	ldr	r3, [pc, #96]	; (4029bc <wifi_serial_init+0x98>)
  40295a:	4798      	blx	r3
	return srcLen * 2;
}

void wifi_serial_init(uint32_t baudspeed)
{
	uint32_t rx_timeout = (SERIAL_FRAME_INTERVAL * baudspeed) / 1000;
  40295c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402960:	0064      	lsls	r4, r4, #1
  402962:	4917      	ldr	r1, [pc, #92]	; (4029c0 <wifi_serial_init+0x9c>)
  402964:	fba1 3104 	umull	r3, r1, r1, r4
	
	/* Configure USART */
	usart_init_rs232(WIFI_SERIAL_PORT, &usart_settings,sysclk_get_peripheral_hz());
	//usart_init_hw_handshaking(WIFI_SERIAL_PORT, &usart_settings,sysclk_get_peripheral_hz());
	
	usart_set_rx_timeout(WIFI_SERIAL_PORT, rx_timeout);
  402968:	4628      	mov	r0, r5
  40296a:	0989      	lsrs	r1, r1, #6
  40296c:	4b15      	ldr	r3, [pc, #84]	; (4029c4 <wifi_serial_init+0xa0>)
  40296e:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402970:	4b15      	ldr	r3, [pc, #84]	; (4029c8 <wifi_serial_init+0xa4>)
  402972:	22e0      	movs	r2, #224	; 0xe0
  402974:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402978:	f44f 7280 	mov.w	r2, #256	; 0x100
  40297c:	601a      	str	r2, [r3, #0]
	
	/* Enable USART1 RX interrupt. */
	NVIC_SetPriority(WIFI_SERIAL_PORT_IRQn, SERIAL_PORT_INT_PRIO);
	NVIC_EnableIRQ((IRQn_Type)WIFI_SERIAL_PORT_FLEXCOM_ID);
	usart_enable_interrupt(WIFI_SERIAL_PORT, (US_IER_TIMEOUT | US_IER_RXRDY));
  40297e:	4628      	mov	r0, r5
  402980:	f240 1101 	movw	r1, #257	; 0x101
  402984:	4b11      	ldr	r3, [pc, #68]	; (4029cc <wifi_serial_init+0xa8>)
  402986:	4798      	blx	r3
	
	serial_recving = &serial_pk0;
  402988:	4a11      	ldr	r2, [pc, #68]	; (4029d0 <wifi_serial_init+0xac>)
  40298a:	4b12      	ldr	r3, [pc, #72]	; (4029d4 <wifi_serial_init+0xb0>)
  40298c:	601a      	str	r2, [r3, #0]
	serial_recved = &serial_pk1;
  40298e:	4a12      	ldr	r2, [pc, #72]	; (4029d8 <wifi_serial_init+0xb4>)
  402990:	4b12      	ldr	r3, [pc, #72]	; (4029dc <wifi_serial_init+0xb8>)
  402992:	601a      	str	r2, [r3, #0]
	
	/* Enable the receiver and transmitter. */
	usart_start_rx_timeout(WIFI_SERIAL_PORT);
  402994:	4628      	mov	r0, r5
  402996:	4b12      	ldr	r3, [pc, #72]	; (4029e0 <wifi_serial_init+0xbc>)
  402998:	4798      	blx	r3
	usart_enable_tx(WIFI_SERIAL_PORT);
  40299a:	4628      	mov	r0, r5
  40299c:	4b11      	ldr	r3, [pc, #68]	; (4029e4 <wifi_serial_init+0xc0>)
  40299e:	4798      	blx	r3
	usart_enable_rx(WIFI_SERIAL_PORT);
  4029a0:	4628      	mov	r0, r5
  4029a2:	4b11      	ldr	r3, [pc, #68]	; (4029e8 <wifi_serial_init+0xc4>)
  4029a4:	4798      	blx	r3

}
  4029a6:	b007      	add	sp, #28
  4029a8:	bd30      	pop	{r4, r5, pc}
  4029aa:	bf00      	nop
  4029ac:	4000c000 	.word	0x4000c000
  4029b0:	00400439 	.word	0x00400439
  4029b4:	004005a9 	.word	0x004005a9
  4029b8:	07270000 	.word	0x07270000
  4029bc:	00400985 	.word	0x00400985
  4029c0:	10624dd3 	.word	0x10624dd3
  4029c4:	004009e9 	.word	0x004009e9
  4029c8:	e000e100 	.word	0xe000e100
  4029cc:	004009ed 	.word	0x004009ed
  4029d0:	2001b400 	.word	0x2001b400
  4029d4:	2001b3c8 	.word	0x2001b3c8
  4029d8:	2001b804 	.word	0x2001b804
  4029dc:	2001bc0c 	.word	0x2001bc0c
  4029e0:	004009f9 	.word	0x004009f9
  4029e4:	004009d9 	.word	0x004009d9
  4029e8:	004009e1 	.word	0x004009e1

004029ec <FLEXCOM0_Handler>:

void WIFI_SERIAL_PORT_HANDLER(void)
{
  4029ec:	b530      	push	{r4, r5, lr}
  4029ee:	b083      	sub	sp, #12
	uint32_t status;
	uint32_t symbol;
	Pdc *p_pdc = NULL;
	serial_in_pk_t *ptemp = NULL;
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
  4029f0:	2300      	movs	r3, #0
  4029f2:	9300      	str	r3, [sp, #0]

	status = usart_get_status(WIFI_SERIAL_PORT);
  4029f4:	4823      	ldr	r0, [pc, #140]	; (402a84 <FLEXCOM0_Handler+0x98>)
  4029f6:	4b24      	ldr	r3, [pc, #144]	; (402a88 <FLEXCOM0_Handler+0x9c>)
  4029f8:	4798      	blx	r3
	//printf("USART6_Handler\r\n");
	if(status & US_CSR_RXRDY) {
  4029fa:	f010 0f01 	tst.w	r0, #1
  4029fe:	d012      	beq.n	402a26 <FLEXCOM0_Handler+0x3a>
		
		if(usart_read(WIFI_SERIAL_PORT, &symbol) == 0) {
  402a00:	4820      	ldr	r0, [pc, #128]	; (402a84 <FLEXCOM0_Handler+0x98>)
  402a02:	a901      	add	r1, sp, #4
  402a04:	4b21      	ldr	r3, [pc, #132]	; (402a8c <FLEXCOM0_Handler+0xa0>)
  402a06:	4798      	blx	r3
  402a08:	2800      	cmp	r0, #0
  402a0a:	d139      	bne.n	402a80 <FLEXCOM0_Handler+0x94>
			if(recv_idx < MAXIMUM_DATA_LENGTH) {
  402a0c:	4b20      	ldr	r3, [pc, #128]	; (402a90 <FLEXCOM0_Handler+0xa4>)
  402a0e:	681b      	ldr	r3, [r3, #0]
  402a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  402a14:	d234      	bcs.n	402a80 <FLEXCOM0_Handler+0x94>
				serial_recving->buf[recv_idx] = (uint8_t)symbol;
  402a16:	4a1f      	ldr	r2, [pc, #124]	; (402a94 <FLEXCOM0_Handler+0xa8>)
  402a18:	6812      	ldr	r2, [r2, #0]
  402a1a:	9901      	ldr	r1, [sp, #4]
  402a1c:	54d1      	strb	r1, [r2, r3]
				recv_idx++;
  402a1e:	3301      	adds	r3, #1
  402a20:	4a1b      	ldr	r2, [pc, #108]	; (402a90 <FLEXCOM0_Handler+0xa4>)
  402a22:	6013      	str	r3, [r2, #0]
  402a24:	e02c      	b.n	402a80 <FLEXCOM0_Handler+0x94>
			}
		}
	}
	else if(status & US_CSR_TIMEOUT) {
  402a26:	f410 7f80 	tst.w	r0, #256	; 0x100
  402a2a:	d01a      	beq.n	402a62 <FLEXCOM0_Handler+0x76>
		IoT_xTimerStartFromISR(serial_tmr, &xHigherPriorityTaskWoken);
		if(xHigherPriorityTaskWoken != pdFALSE) {
			IoT_vPortYieldFromISR();
		}
		*/
		ptemp = serial_recving;
  402a2c:	4b19      	ldr	r3, [pc, #100]	; (402a94 <FLEXCOM0_Handler+0xa8>)
  402a2e:	681a      	ldr	r2, [r3, #0]
		serial_recving = serial_recved;
  402a30:	4c19      	ldr	r4, [pc, #100]	; (402a98 <FLEXCOM0_Handler+0xac>)
  402a32:	6821      	ldr	r1, [r4, #0]
  402a34:	6019      	str	r1, [r3, #0]
		serial_recved = ptemp;
  402a36:	6022      	str	r2, [r4, #0]
		serial_recved->len = recv_idx;
  402a38:	4b15      	ldr	r3, [pc, #84]	; (402a90 <FLEXCOM0_Handler+0xa4>)
  402a3a:	6819      	ldr	r1, [r3, #0]
  402a3c:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400

		recv_idx = 0;
  402a40:	2500      	movs	r5, #0
  402a42:	601d      	str	r5, [r3, #0]
		usart_start_rx_timeout(WIFI_SERIAL_PORT);
  402a44:	480f      	ldr	r0, [pc, #60]	; (402a84 <FLEXCOM0_Handler+0x98>)
  402a46:	4b15      	ldr	r3, [pc, #84]	; (402a9c <FLEXCOM0_Handler+0xb0>)
  402a48:	4798      	blx	r3
		//IoT_DEBUG(IoT_DBG_ON | IoT_DBG_INFO, ("Wifi receive data timeout............\r\n"));
		IoT_xQueueSendFromISR(serial_in_queue, &serial_recved, &xHigherPriorityTaskWoken);
  402a4a:	4b15      	ldr	r3, [pc, #84]	; (402aa0 <FLEXCOM0_Handler+0xb4>)
  402a4c:	6818      	ldr	r0, [r3, #0]
  402a4e:	4621      	mov	r1, r4
  402a50:	466a      	mov	r2, sp
  402a52:	462b      	mov	r3, r5
  402a54:	4c13      	ldr	r4, [pc, #76]	; (402aa4 <FLEXCOM0_Handler+0xb8>)
  402a56:	47a0      	blx	r4
		if(xHigherPriorityTaskWoken != pdFALSE) {
  402a58:	9b00      	ldr	r3, [sp, #0]
  402a5a:	b18b      	cbz	r3, 402a80 <FLEXCOM0_Handler+0x94>
			IoT_vPortYieldFromISR();
  402a5c:	4b12      	ldr	r3, [pc, #72]	; (402aa8 <FLEXCOM0_Handler+0xbc>)
  402a5e:	4798      	blx	r3
  402a60:	e00e      	b.n	402a80 <FLEXCOM0_Handler+0x94>
		}
	}
	else if(status & US_CSR_ENDTX) {
  402a62:	f010 0f10 	tst.w	r0, #16
  402a66:	d00b      	beq.n	402a80 <FLEXCOM0_Handler+0x94>
		p_pdc = usart_get_pdc_base(WIFI_SERIAL_PORT);
  402a68:	4c06      	ldr	r4, [pc, #24]	; (402a84 <FLEXCOM0_Handler+0x98>)
  402a6a:	4620      	mov	r0, r4
  402a6c:	4b0f      	ldr	r3, [pc, #60]	; (402aac <FLEXCOM0_Handler+0xc0>)
  402a6e:	4798      	blx	r3
		pdc_disable_transfer(p_pdc, PERIPH_PTCR_TXTDIS);
  402a70:	f44f 7100 	mov.w	r1, #512	; 0x200
  402a74:	4b0e      	ldr	r3, [pc, #56]	; (402ab0 <FLEXCOM0_Handler+0xc4>)
  402a76:	4798      	blx	r3
		usart_disable_interrupt(WIFI_SERIAL_PORT, US_IDR_ENDTX);
  402a78:	4620      	mov	r0, r4
  402a7a:	2110      	movs	r1, #16
  402a7c:	4b0d      	ldr	r3, [pc, #52]	; (402ab4 <FLEXCOM0_Handler+0xc8>)
  402a7e:	4798      	blx	r3
	}
	else {
		/* Do nothing */
	}
}
  402a80:	b003      	add	sp, #12
  402a82:	bd30      	pop	{r4, r5, pc}
  402a84:	4000c200 	.word	0x4000c200
  402a88:	004009f5 	.word	0x004009f5
  402a8c:	00400a15 	.word	0x00400a15
  402a90:	2001b394 	.word	0x2001b394
  402a94:	2001b3c8 	.word	0x2001b3c8
  402a98:	2001bc0c 	.word	0x2001bc0c
  402a9c:	004009f9 	.word	0x004009f9
  402aa0:	2001b280 	.word	0x2001b280
  402aa4:	00401471 	.word	0x00401471
  402aa8:	00400e95 	.word	0x00400e95
  402aac:	00400a2d 	.word	0x00400a2d
  402ab0:	004005d1 	.word	0x004005d1
  402ab4:	004009f1 	.word	0x004009f1

00402ab8 <sum8>:

unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
  402ab8:	b159      	cbz	r1, 402ad2 <sum8+0x1a>
  402aba:	1e43      	subs	r3, r0, #1
  402abc:	3901      	subs	r1, #1
  402abe:	fa50 f181 	uxtab	r1, r0, r1
  402ac2:	2000      	movs	r0, #0
	{
		checksum += A[i];
  402ac4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  402ac8:	4410      	add	r0, r2
  402aca:	b2c0      	uxtb	r0, r0

unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
	for(i = 0; i < n; i++)
  402acc:	428b      	cmp	r3, r1
  402ace:	d1f9      	bne.n	402ac4 <sum8+0xc>
  402ad0:	4770      	bx	lr
}

unsigned char sum8(unsigned char *A, unsigned char n)
{
	unsigned char i;
	unsigned char checksum = 0;
  402ad2:	2000      	movs	r0, #0
	for(i = 0; i < n; i++)
	{
		checksum += A[i];
	}
	return(checksum);
}
  402ad4:	4770      	bx	lr
  402ad6:	bf00      	nop

00402ad8 <vConfigModeCallback>:
		break;
	}
}

static void vConfigModeCallback( xTimerHandle pxTimer )
{
  402ad8:	b530      	push	{r4, r5, lr}
  402ada:	b085      	sub	sp, #20
	
	static uint8_t pkt_buf[16];
	static uint16_t pkt_len;

	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  402adc:	4b6e      	ldr	r3, [pc, #440]	; (402c98 <vConfigModeCallback+0x1c0>)
  402ade:	9303      	str	r3, [sp, #12]
	
	
	IoT_vPortEnterCritical();
  402ae0:	4b6e      	ldr	r3, [pc, #440]	; (402c9c <vConfigModeCallback+0x1c4>)
  402ae2:	4798      	blx	r3
	count++;
  402ae4:	4a6e      	ldr	r2, [pc, #440]	; (402ca0 <vConfigModeCallback+0x1c8>)
  402ae6:	7813      	ldrb	r3, [r2, #0]
  402ae8:	3301      	adds	r3, #1
  402aea:	7013      	strb	r3, [r2, #0]
	IoT_vPortExitCritical();
  402aec:	4b6d      	ldr	r3, [pc, #436]	; (402ca4 <vConfigModeCallback+0x1cc>)
  402aee:	4798      	blx	r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402af0:	4b6d      	ldr	r3, [pc, #436]	; (402ca8 <vConfigModeCallback+0x1d0>)
  402af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	
	if(!ioport_get_pin_level(BUTTON_0_PIN)){
  402af4:	f013 0f01 	tst.w	r3, #1
  402af8:	d150      	bne.n	402b9c <vConfigModeCallback+0xc4>
		if(count >= 5){
  402afa:	4b69      	ldr	r3, [pc, #420]	; (402ca0 <vConfigModeCallback+0x1c8>)
  402afc:	781b      	ldrb	r3, [r3, #0]
  402afe:	2b04      	cmp	r3, #4
  402b00:	d927      	bls.n	402b52 <vConfigModeCallback+0x7a>
			IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("enter config mode\r\n"));
  402b02:	4b6a      	ldr	r3, [pc, #424]	; (402cac <vConfigModeCallback+0x1d4>)
  402b04:	6818      	ldr	r0, [r3, #0]
  402b06:	b1d0      	cbz	r0, 402b3e <vConfigModeCallback+0x66>
  402b08:	2100      	movs	r1, #0
  402b0a:	f04f 32ff 	mov.w	r2, #4294967295
  402b0e:	460b      	mov	r3, r1
  402b10:	4c67      	ldr	r4, [pc, #412]	; (402cb0 <vConfigModeCallback+0x1d8>)
  402b12:	47a0      	blx	r4
  402b14:	4b67      	ldr	r3, [pc, #412]	; (402cb4 <vConfigModeCallback+0x1dc>)
  402b16:	4798      	blx	r3
  402b18:	4604      	mov	r4, r0
  402b1a:	2000      	movs	r0, #0
  402b1c:	4b66      	ldr	r3, [pc, #408]	; (402cb8 <vConfigModeCallback+0x1e0>)
  402b1e:	4798      	blx	r3
  402b20:	4602      	mov	r2, r0
  402b22:	4866      	ldr	r0, [pc, #408]	; (402cbc <vConfigModeCallback+0x1e4>)
  402b24:	4621      	mov	r1, r4
  402b26:	4c66      	ldr	r4, [pc, #408]	; (402cc0 <vConfigModeCallback+0x1e8>)
  402b28:	47a0      	blx	r4
  402b2a:	4866      	ldr	r0, [pc, #408]	; (402cc4 <vConfigModeCallback+0x1ec>)
  402b2c:	47a0      	blx	r4
  402b2e:	4b5f      	ldr	r3, [pc, #380]	; (402cac <vConfigModeCallback+0x1d4>)
  402b30:	6818      	ldr	r0, [r3, #0]
  402b32:	2100      	movs	r1, #0
  402b34:	460a      	mov	r2, r1
  402b36:	460b      	mov	r3, r1
  402b38:	4c63      	ldr	r4, [pc, #396]	; (402cc8 <vConfigModeCallback+0x1f0>)
  402b3a:	47a0      	blx	r4
  402b3c:	e002      	b.n	402b44 <vConfigModeCallback+0x6c>
  402b3e:	4861      	ldr	r0, [pc, #388]	; (402cc4 <vConfigModeCallback+0x1ec>)
  402b40:	4b5f      	ldr	r3, [pc, #380]	; (402cc0 <vConfigModeCallback+0x1e8>)
  402b42:	4798      	blx	r3
			button_mode = ENTER_CONFIG_MODE;
  402b44:	2200      	movs	r2, #0
  402b46:	4b61      	ldr	r3, [pc, #388]	; (402ccc <vConfigModeCallback+0x1f4>)
  402b48:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_ON;
  402b4a:	2203      	movs	r2, #3
  402b4c:	4b60      	ldr	r3, [pc, #384]	; (402cd0 <vConfigModeCallback+0x1f8>)
  402b4e:	701a      	strb	r2, [r3, #0]
  402b50:	e09f      	b.n	402c92 <vConfigModeCallback+0x1ba>
		}
		else {
			IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("enter test command mode\r\n"));
  402b52:	4b56      	ldr	r3, [pc, #344]	; (402cac <vConfigModeCallback+0x1d4>)
  402b54:	6818      	ldr	r0, [r3, #0]
  402b56:	b1d0      	cbz	r0, 402b8e <vConfigModeCallback+0xb6>
  402b58:	2100      	movs	r1, #0
  402b5a:	f04f 32ff 	mov.w	r2, #4294967295
  402b5e:	460b      	mov	r3, r1
  402b60:	4c53      	ldr	r4, [pc, #332]	; (402cb0 <vConfigModeCallback+0x1d8>)
  402b62:	47a0      	blx	r4
  402b64:	4b53      	ldr	r3, [pc, #332]	; (402cb4 <vConfigModeCallback+0x1dc>)
  402b66:	4798      	blx	r3
  402b68:	4604      	mov	r4, r0
  402b6a:	2000      	movs	r0, #0
  402b6c:	4b52      	ldr	r3, [pc, #328]	; (402cb8 <vConfigModeCallback+0x1e0>)
  402b6e:	4798      	blx	r3
  402b70:	4602      	mov	r2, r0
  402b72:	4852      	ldr	r0, [pc, #328]	; (402cbc <vConfigModeCallback+0x1e4>)
  402b74:	4621      	mov	r1, r4
  402b76:	4c52      	ldr	r4, [pc, #328]	; (402cc0 <vConfigModeCallback+0x1e8>)
  402b78:	47a0      	blx	r4
  402b7a:	4856      	ldr	r0, [pc, #344]	; (402cd4 <vConfigModeCallback+0x1fc>)
  402b7c:	47a0      	blx	r4
  402b7e:	4b4b      	ldr	r3, [pc, #300]	; (402cac <vConfigModeCallback+0x1d4>)
  402b80:	6818      	ldr	r0, [r3, #0]
  402b82:	2100      	movs	r1, #0
  402b84:	460a      	mov	r2, r1
  402b86:	460b      	mov	r3, r1
  402b88:	4c4f      	ldr	r4, [pc, #316]	; (402cc8 <vConfigModeCallback+0x1f0>)
  402b8a:	47a0      	blx	r4
  402b8c:	e002      	b.n	402b94 <vConfigModeCallback+0xbc>
  402b8e:	4851      	ldr	r0, [pc, #324]	; (402cd4 <vConfigModeCallback+0x1fc>)
  402b90:	4b4b      	ldr	r3, [pc, #300]	; (402cc0 <vConfigModeCallback+0x1e8>)
  402b92:	4798      	blx	r3
			button_mode = ENTER_GENERAL_MODE;
  402b94:	2201      	movs	r2, #1
  402b96:	4b4d      	ldr	r3, [pc, #308]	; (402ccc <vConfigModeCallback+0x1f4>)
  402b98:	701a      	strb	r2, [r3, #0]
  402b9a:	e07a      	b.n	402c92 <vConfigModeCallback+0x1ba>
		}
	}
	else{
		//button released, exit FN mode
		if(button_mode == ENTER_CONFIG_MODE){
  402b9c:	4b4b      	ldr	r3, [pc, #300]	; (402ccc <vConfigModeCallback+0x1f4>)
  402b9e:	781b      	ldrb	r3, [r3, #0]
  402ba0:	2b00      	cmp	r3, #0
  402ba2:	d140      	bne.n	402c26 <vConfigModeCallback+0x14e>
			IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("perform config mode\r\n"));
  402ba4:	4b41      	ldr	r3, [pc, #260]	; (402cac <vConfigModeCallback+0x1d4>)
  402ba6:	6818      	ldr	r0, [r3, #0]
  402ba8:	b1d0      	cbz	r0, 402be0 <vConfigModeCallback+0x108>
  402baa:	2100      	movs	r1, #0
  402bac:	f04f 32ff 	mov.w	r2, #4294967295
  402bb0:	460b      	mov	r3, r1
  402bb2:	4c3f      	ldr	r4, [pc, #252]	; (402cb0 <vConfigModeCallback+0x1d8>)
  402bb4:	47a0      	blx	r4
  402bb6:	4b3f      	ldr	r3, [pc, #252]	; (402cb4 <vConfigModeCallback+0x1dc>)
  402bb8:	4798      	blx	r3
  402bba:	4604      	mov	r4, r0
  402bbc:	2000      	movs	r0, #0
  402bbe:	4b3e      	ldr	r3, [pc, #248]	; (402cb8 <vConfigModeCallback+0x1e0>)
  402bc0:	4798      	blx	r3
  402bc2:	4602      	mov	r2, r0
  402bc4:	483d      	ldr	r0, [pc, #244]	; (402cbc <vConfigModeCallback+0x1e4>)
  402bc6:	4621      	mov	r1, r4
  402bc8:	4c3d      	ldr	r4, [pc, #244]	; (402cc0 <vConfigModeCallback+0x1e8>)
  402bca:	47a0      	blx	r4
  402bcc:	4842      	ldr	r0, [pc, #264]	; (402cd8 <vConfigModeCallback+0x200>)
  402bce:	47a0      	blx	r4
  402bd0:	4b36      	ldr	r3, [pc, #216]	; (402cac <vConfigModeCallback+0x1d4>)
  402bd2:	6818      	ldr	r0, [r3, #0]
  402bd4:	2100      	movs	r1, #0
  402bd6:	460a      	mov	r2, r1
  402bd8:	460b      	mov	r3, r1
  402bda:	4c3b      	ldr	r4, [pc, #236]	; (402cc8 <vConfigModeCallback+0x1f0>)
  402bdc:	47a0      	blx	r4
  402bde:	e002      	b.n	402be6 <vConfigModeCallback+0x10e>
  402be0:	483d      	ldr	r0, [pc, #244]	; (402cd8 <vConfigModeCallback+0x200>)
  402be2:	4b37      	ldr	r3, [pc, #220]	; (402cc0 <vConfigModeCallback+0x1e8>)
  402be4:	4798      	blx	r3
			led_blinking_mode = LED_MODE_CONNECT;
  402be6:	2301      	movs	r3, #1
  402be8:	4a39      	ldr	r2, [pc, #228]	; (402cd0 <vConfigModeCallback+0x1f8>)
  402bea:	7013      	strb	r3, [r2, #0]

static uint16_t form_serial_packet(uint8_t cmdid, uint8_t *data, uint8_t datalen, uint8_t *buf)
{
	uint8_t *p = buf;

	*p++ = SERIAL_SOF;
  402bec:	4c3b      	ldr	r4, [pc, #236]	; (402cdc <vConfigModeCallback+0x204>)
  402bee:	227e      	movs	r2, #126	; 0x7e
  402bf0:	7022      	strb	r2, [r4, #0]
	*p++ = ENCRYPT_MODE;
  402bf2:	2500      	movs	r5, #0
  402bf4:	7065      	strb	r5, [r4, #1]
	*p++ = datalen + 1;
  402bf6:	70a3      	strb	r3, [r4, #2]
	*p++ = cmdid;
  402bf8:	2302      	movs	r3, #2
  402bfa:	70e3      	strb	r3, [r4, #3]
	if((data != NULL) && (datalen > 0)) {
		memcpy(p, data, datalen);
		p = p + datalen;
	}
	*p = sum8(buf, (p - buf));
  402bfc:	4620      	mov	r0, r4
  402bfe:	2104      	movs	r1, #4
  402c00:	4b37      	ldr	r3, [pc, #220]	; (402ce0 <vConfigModeCallback+0x208>)
  402c02:	4798      	blx	r3
  402c04:	7120      	strb	r0, [r4, #4]
	else{
		//button released, exit FN mode
		if(button_mode == ENTER_CONFIG_MODE){
			IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("perform config mode\r\n"));
			led_blinking_mode = LED_MODE_CONNECT;
			pkt_len = form_serial_packet(CUSTOMIZE_CMD_FACTORY_RESET, NULL, 0, pkt_buf);
  402c06:	2305      	movs	r3, #5
  402c08:	4a36      	ldr	r2, [pc, #216]	; (402ce4 <vConfigModeCallback+0x20c>)
  402c0a:	8013      	strh	r3, [r2, #0]
			out_data->buf = pkt_buf;
  402c0c:	9a03      	ldr	r2, [sp, #12]
  402c0e:	6014      	str	r4, [r2, #0]
			out_data->len = pkt_len;
  402c10:	a904      	add	r1, sp, #16
  402c12:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  402c16:	6053      	str	r3, [r2, #4]
			IoT_xQueueSend(serial_out_queue, &out_data, 0);
  402c18:	4b33      	ldr	r3, [pc, #204]	; (402ce8 <vConfigModeCallback+0x210>)
  402c1a:	6818      	ldr	r0, [r3, #0]
  402c1c:	462a      	mov	r2, r5
  402c1e:	462b      	mov	r3, r5
  402c20:	4c29      	ldr	r4, [pc, #164]	; (402cc8 <vConfigModeCallback+0x1f0>)
  402c22:	47a0      	blx	r4
  402c24:	e024      	b.n	402c70 <vConfigModeCallback+0x198>
		}
		else if (button_mode == ENTER_GENERAL_MODE){
  402c26:	2b01      	cmp	r3, #1
  402c28:	d122      	bne.n	402c70 <vConfigModeCallback+0x198>
			IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("perform test command mode\r\n"));
  402c2a:	4b20      	ldr	r3, [pc, #128]	; (402cac <vConfigModeCallback+0x1d4>)
  402c2c:	6818      	ldr	r0, [r3, #0]
  402c2e:	b1d0      	cbz	r0, 402c66 <vConfigModeCallback+0x18e>
  402c30:	2100      	movs	r1, #0
  402c32:	f04f 32ff 	mov.w	r2, #4294967295
  402c36:	460b      	mov	r3, r1
  402c38:	4c1d      	ldr	r4, [pc, #116]	; (402cb0 <vConfigModeCallback+0x1d8>)
  402c3a:	47a0      	blx	r4
  402c3c:	4b1d      	ldr	r3, [pc, #116]	; (402cb4 <vConfigModeCallback+0x1dc>)
  402c3e:	4798      	blx	r3
  402c40:	4604      	mov	r4, r0
  402c42:	2000      	movs	r0, #0
  402c44:	4b1c      	ldr	r3, [pc, #112]	; (402cb8 <vConfigModeCallback+0x1e0>)
  402c46:	4798      	blx	r3
  402c48:	4602      	mov	r2, r0
  402c4a:	481c      	ldr	r0, [pc, #112]	; (402cbc <vConfigModeCallback+0x1e4>)
  402c4c:	4621      	mov	r1, r4
  402c4e:	4c1c      	ldr	r4, [pc, #112]	; (402cc0 <vConfigModeCallback+0x1e8>)
  402c50:	47a0      	blx	r4
  402c52:	4826      	ldr	r0, [pc, #152]	; (402cec <vConfigModeCallback+0x214>)
  402c54:	47a0      	blx	r4
  402c56:	4b15      	ldr	r3, [pc, #84]	; (402cac <vConfigModeCallback+0x1d4>)
  402c58:	6818      	ldr	r0, [r3, #0]
  402c5a:	2100      	movs	r1, #0
  402c5c:	460a      	mov	r2, r1
  402c5e:	460b      	mov	r3, r1
  402c60:	4c19      	ldr	r4, [pc, #100]	; (402cc8 <vConfigModeCallback+0x1f0>)
  402c62:	47a0      	blx	r4
  402c64:	e002      	b.n	402c6c <vConfigModeCallback+0x194>
  402c66:	4821      	ldr	r0, [pc, #132]	; (402cec <vConfigModeCallback+0x214>)
  402c68:	4b15      	ldr	r3, [pc, #84]	; (402cc0 <vConfigModeCallback+0x1e8>)
  402c6a:	4798      	blx	r3
			startTemperature();			
  402c6c:	4b20      	ldr	r3, [pc, #128]	; (402cf0 <vConfigModeCallback+0x218>)
  402c6e:	4798      	blx	r3
		}
		IoT_vPortEnterCritical();
  402c70:	4b0a      	ldr	r3, [pc, #40]	; (402c9c <vConfigModeCallback+0x1c4>)
  402c72:	4798      	blx	r3
		count = 0;
  402c74:	2400      	movs	r4, #0
  402c76:	4b0a      	ldr	r3, [pc, #40]	; (402ca0 <vConfigModeCallback+0x1c8>)
  402c78:	701c      	strb	r4, [r3, #0]
		IoT_vPortExitCritical();
  402c7a:	4b0a      	ldr	r3, [pc, #40]	; (402ca4 <vConfigModeCallback+0x1cc>)
  402c7c:	4798      	blx	r3
		button_mode = ENTER_GENERAL_MODE;
  402c7e:	2101      	movs	r1, #1
  402c80:	4b12      	ldr	r3, [pc, #72]	; (402ccc <vConfigModeCallback+0x1f4>)
  402c82:	7019      	strb	r1, [r3, #0]
		xTimerStop(xConfigTimer, 0);
  402c84:	4b1b      	ldr	r3, [pc, #108]	; (402cf4 <vConfigModeCallback+0x21c>)
  402c86:	6818      	ldr	r0, [r3, #0]
  402c88:	9400      	str	r4, [sp, #0]
  402c8a:	4622      	mov	r2, r4
  402c8c:	4623      	mov	r3, r4
  402c8e:	4c1a      	ldr	r4, [pc, #104]	; (402cf8 <vConfigModeCallback+0x220>)
  402c90:	47a0      	blx	r4
	}
}
  402c92:	b005      	add	sp, #20
  402c94:	bd30      	pop	{r4, r5, pc}
  402c96:	bf00      	nop
  402c98:	2001b3a4 	.word	0x2001b3a4
  402c9c:	00400eb5 	.word	0x00400eb5
  402ca0:	2001b3ce 	.word	0x2001b3ce
  402ca4:	00400ed5 	.word	0x00400ed5
  402ca8:	400e1000 	.word	0x400e1000
  402cac:	2001bc14 	.word	0x2001bc14
  402cb0:	0040150d 	.word	0x0040150d
  402cb4:	004019a5 	.word	0x004019a5
  402cb8:	004019e5 	.word	0x004019e5
  402cbc:	00407714 	.word	0x00407714
  402cc0:	004044c9 	.word	0x004044c9
  402cc4:	00407744 	.word	0x00407744
  402cc8:	00401341 	.word	0x00401341
  402ccc:	20000020 	.word	0x20000020
  402cd0:	20000021 	.word	0x20000021
  402cd4:	00407758 	.word	0x00407758
  402cd8:	00407774 	.word	0x00407774
  402cdc:	2001b3f0 	.word	0x2001b3f0
  402ce0:	00402ab9 	.word	0x00402ab9
  402ce4:	2001b3cc 	.word	0x2001b3cc
  402ce8:	2001bc10 	.word	0x2001bc10
  402cec:	0040778c 	.word	0x0040778c
  402cf0:	00402869 	.word	0x00402869
  402cf4:	2001b3dc 	.word	0x2001b3dc
  402cf8:	0040227d 	.word	0x0040227d

00402cfc <signal_to_wifi>:
	IoT_xQueueSend(serial_out_queue, &resp_out_data, 1000);
	//nm_uart_send(UART1, &buf[0], p - &buf[0]);
}

void signal_to_wifi(uint8_t *data, uint8_t index)
{
  402cfc:	b538      	push	{r3, r4, r5, lr}
	static uint8_t resp_buf[256];
	uint8_t *p = &resp_buf[0];
	static serial_out_pk_t resp_send_packet;
	static serial_out_pk_t *resp_out_data = &resp_send_packet;

	*p++ = SERIAL_SOF;
  402cfe:	4b16      	ldr	r3, [pc, #88]	; (402d58 <signal_to_wifi+0x5c>)
  402d00:	227e      	movs	r2, #126	; 0x7e
  402d02:	701a      	strb	r2, [r3, #0]
	*p++ = ENCRYPT_MODE;
  402d04:	2200      	movs	r2, #0
  402d06:	705a      	strb	r2, [r3, #1]
	*p++ = 124;
  402d08:	227c      	movs	r2, #124	; 0x7c
  402d0a:	709a      	strb	r2, [r3, #2]
	*p++ = 0x8a;
  402d0c:	228a      	movs	r2, #138	; 0x8a
  402d0e:	70da      	strb	r2, [r3, #3]
	*p++ = index;
  402d10:	7119      	strb	r1, [r3, #4]
	if((data != NULL)) {
  402d12:	b148      	cbz	r0, 402d28 <signal_to_wifi+0x2c>
  402d14:	4603      	mov	r3, r0
		memcpy(p, data + index*122, 122);
  402d16:	4c10      	ldr	r4, [pc, #64]	; (402d58 <signal_to_wifi+0x5c>)
  402d18:	227a      	movs	r2, #122	; 0x7a
  402d1a:	1d60      	adds	r0, r4, #5
  402d1c:	fb02 3101 	mla	r1, r2, r1, r3
  402d20:	4b0e      	ldr	r3, [pc, #56]	; (402d5c <signal_to_wifi+0x60>)
  402d22:	4798      	blx	r3
		p = p + 122;
  402d24:	347f      	adds	r4, #127	; 0x7f
  402d26:	e000      	b.n	402d2a <signal_to_wifi+0x2e>

	*p++ = SERIAL_SOF;
	*p++ = ENCRYPT_MODE;
	*p++ = 124;
	*p++ = 0x8a;
	*p++ = index;
  402d28:	4c0d      	ldr	r4, [pc, #52]	; (402d60 <signal_to_wifi+0x64>)
	if((data != NULL)) {
		memcpy(p, data + index*122, 122);
		p = p + 122;
	}
	*p = sum8(&resp_buf[0], p - resp_buf);
  402d2a:	4d0b      	ldr	r5, [pc, #44]	; (402d58 <signal_to_wifi+0x5c>)
  402d2c:	1b61      	subs	r1, r4, r5
  402d2e:	4628      	mov	r0, r5
  402d30:	b2c9      	uxtb	r1, r1
  402d32:	4b0c      	ldr	r3, [pc, #48]	; (402d64 <signal_to_wifi+0x68>)
  402d34:	4798      	blx	r3
  402d36:	4623      	mov	r3, r4
  402d38:	f803 0b01 	strb.w	r0, [r3], #1
	p++;
	resp_out_data->buf = resp_buf;
  402d3c:	490a      	ldr	r1, [pc, #40]	; (402d68 <signal_to_wifi+0x6c>)
  402d3e:	680a      	ldr	r2, [r1, #0]
  402d40:	6015      	str	r5, [r2, #0]
	resp_out_data->len = p - resp_buf;
  402d42:	680a      	ldr	r2, [r1, #0]
  402d44:	1b5b      	subs	r3, r3, r5
  402d46:	6053      	str	r3, [r2, #4]
	IoT_xQueueSend(serial_out_queue, &resp_out_data, 1000);
  402d48:	4b08      	ldr	r3, [pc, #32]	; (402d6c <signal_to_wifi+0x70>)
  402d4a:	6818      	ldr	r0, [r3, #0]
  402d4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402d50:	2300      	movs	r3, #0
  402d52:	4c07      	ldr	r4, [pc, #28]	; (402d70 <signal_to_wifi+0x74>)
  402d54:	47a0      	blx	r4
  402d56:	bd38      	pop	{r3, r4, r5, pc}
  402d58:	2001b288 	.word	0x2001b288
  402d5c:	00404555 	.word	0x00404555
  402d60:	2001b28d 	.word	0x2001b28d
  402d64:	00402ab9 	.word	0x00402ab9
  402d68:	20000028 	.word	0x20000028
  402d6c:	2001bc10 	.word	0x2001bc10
  402d70:	00401341 	.word	0x00401341

00402d74 <config_wifi_fw_otau_url>:
	out_data->len = pkt_len;
	IoT_xQueueSend(serial_out_queue, &out_data, portMAX_DELAY);
}

void config_wifi_fw_otau_url(void)
{
  402d74:	b5f0      	push	{r4, r5, r6, r7, lr}
  402d76:	b083      	sub	sp, #12
	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  402d78:	4b18      	ldr	r3, [pc, #96]	; (402ddc <config_wifi_fw_otau_url+0x68>)
  402d7a:	9301      	str	r3, [sp, #4]

static uint16_t form_serial_packet(uint8_t cmdid, uint8_t *data, uint8_t datalen, uint8_t *buf)
{
	uint8_t *p = buf;

	*p++ = SERIAL_SOF;
  402d7c:	4c18      	ldr	r4, [pc, #96]	; (402de0 <config_wifi_fw_otau_url+0x6c>)
  402d7e:	237e      	movs	r3, #126	; 0x7e
  402d80:	7023      	strb	r3, [r4, #0]
	*p++ = ENCRYPT_MODE;
  402d82:	2300      	movs	r3, #0
  402d84:	7063      	strb	r3, [r4, #1]
	*p++ = datalen + 1;
  402d86:	233d      	movs	r3, #61	; 0x3d
  402d88:	70a3      	strb	r3, [r4, #2]
	*p++ = cmdid;
  402d8a:	232a      	movs	r3, #42	; 0x2a
  402d8c:	70e3      	strb	r3, [r4, #3]
	if((data != NULL) && (datalen > 0)) {
		memcpy(p, data, datalen);
  402d8e:	4d15      	ldr	r5, [pc, #84]	; (402de4 <config_wifi_fw_otau_url+0x70>)
  402d90:	3404      	adds	r4, #4
  402d92:	f105 0730 	add.w	r7, r5, #48	; 0x30
  402d96:	462e      	mov	r6, r5
  402d98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  402d9a:	6020      	str	r0, [r4, #0]
  402d9c:	6061      	str	r1, [r4, #4]
  402d9e:	60a2      	str	r2, [r4, #8]
  402da0:	60e3      	str	r3, [r4, #12]
  402da2:	4635      	mov	r5, r6
  402da4:	3410      	adds	r4, #16
  402da6:	42be      	cmp	r6, r7
  402da8:	d1f5      	bne.n	402d96 <config_wifi_fw_otau_url+0x22>
  402daa:	cd07      	ldmia	r5!, {r0, r1, r2}
  402dac:	6020      	str	r0, [r4, #0]
  402dae:	6061      	str	r1, [r4, #4]
  402db0:	60a2      	str	r2, [r4, #8]
		p = p + datalen;
	}
	*p = sum8(buf, (p - buf));
  402db2:	4c0b      	ldr	r4, [pc, #44]	; (402de0 <config_wifi_fw_otau_url+0x6c>)
  402db4:	4620      	mov	r0, r4
  402db6:	2140      	movs	r1, #64	; 0x40
  402db8:	4b0b      	ldr	r3, [pc, #44]	; (402de8 <config_wifi_fw_otau_url+0x74>)
  402dba:	4798      	blx	r3
  402dbc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
	uint16_t pkt_len;
	
	pkt_len = form_serial_packet(CMD_REQ_SET_WIFI_FW_OTAU_URL, APP_OTA_URL, strlen(APP_OTA_URL), url_buf);
	out_data->buf = url_buf;
  402dc0:	4b06      	ldr	r3, [pc, #24]	; (402ddc <config_wifi_fw_otau_url+0x68>)
  402dc2:	601c      	str	r4, [r3, #0]
	out_data->len = pkt_len;
  402dc4:	2241      	movs	r2, #65	; 0x41
  402dc6:	605a      	str	r2, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &out_data, portMAX_DELAY);
  402dc8:	4b08      	ldr	r3, [pc, #32]	; (402dec <config_wifi_fw_otau_url+0x78>)
  402dca:	6818      	ldr	r0, [r3, #0]
  402dcc:	a901      	add	r1, sp, #4
  402dce:	f04f 32ff 	mov.w	r2, #4294967295
  402dd2:	2300      	movs	r3, #0
  402dd4:	4c06      	ldr	r4, [pc, #24]	; (402df0 <config_wifi_fw_otau_url+0x7c>)
  402dd6:	47a0      	blx	r4
}
  402dd8:	b003      	add	sp, #12
  402dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402ddc:	2001b3d0 	.word	0x2001b3d0
  402de0:	2001cdac 	.word	0x2001cdac
  402de4:	004077a8 	.word	0x004077a8
  402de8:	00402ab9 	.word	0x00402ab9
  402dec:	2001bc10 	.word	0x2001bc10
  402df0:	00401341 	.word	0x00401341

00402df4 <parse_serial_packet>:

	}
}

void parse_serial_packet(uint8_t *buf, uint8_t buflen)
{
  402df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402df8:	b087      	sub	sp, #28
  402dfa:	4604      	mov	r4, r0
  402dfc:	460d      	mov	r5, r1
	delay_ms(100);
}

static int byte2hexstrstr(const uint8_t *pBytes, uint32_t srcLen, uint8_t *pDstStr, uint32_t dstLen)
{
	const char tab[] = "0123456789abcdef";
  402dfe:	af01      	add	r7, sp, #4
  402e00:	f8df e20c 	ldr.w	lr, [pc, #524]	; 403010 <parse_serial_packet+0x21c>
  402e04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  402e08:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  402e0a:	f8de 3000 	ldr.w	r3, [lr]
  402e0e:	703b      	strb	r3, [r7, #0]
	uint32_t i = 0;

	memset(pDstStr, 0, dstLen);
  402e10:	486d      	ldr	r0, [pc, #436]	; (402fc8 <parse_serial_packet+0x1d4>)
  402e12:	2100      	movs	r1, #0
  402e14:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e18:	4b6c      	ldr	r3, [pc, #432]	; (402fcc <parse_serial_packet+0x1d8>)
  402e1a:	4798      	blx	r3

	if (dstLen < srcLen * 2)
  402e1c:	2d80      	cmp	r5, #128	; 0x80
  402e1e:	d802      	bhi.n	402e26 <parse_serial_packet+0x32>
  402e20:	462e      	mov	r6, r5
	srcLen = (dstLen - 1) / 2;

	for (i = 0; i < srcLen; i++)
  402e22:	b90d      	cbnz	r5, 402e28 <parse_serial_packet+0x34>
  402e24:	e01d      	b.n	402e62 <parse_serial_packet+0x6e>
	uint32_t i = 0;

	memset(pDstStr, 0, dstLen);

	if (dstLen < srcLen * 2)
	srcLen = (dstLen - 1) / 2;
  402e26:	267f      	movs	r6, #127	; 0x7f
  402e28:	4a69      	ldr	r2, [pc, #420]	; (402fd0 <parse_serial_packet+0x1dc>)
  402e2a:	4627      	mov	r7, r4
  402e2c:	4621      	mov	r1, r4
  402e2e:	468e      	mov	lr, r1
  402e30:	4610      	mov	r0, r2

	for (i = 0; i < srcLen; i++)
	{
		*pDstStr++ = tab[*pBytes >> 4];
  402e32:	f811 3b01 	ldrb.w	r3, [r1], #1
  402e36:	f10d 0c18 	add.w	ip, sp, #24
  402e3a:	eb0c 1313 	add.w	r3, ip, r3, lsr #4
  402e3e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
  402e42:	f802 3c02 	strb.w	r3, [r2, #-2]
		*pDstStr++ = tab[*pBytes & 0x0f];
  402e46:	f89e 3000 	ldrb.w	r3, [lr]
  402e4a:	f003 030f 	and.w	r3, r3, #15
  402e4e:	4463      	add	r3, ip
  402e50:	f813 3c14 	ldrb.w	r3, [r3, #-20]
  402e54:	f802 3c01 	strb.w	r3, [r2, #-1]
  402e58:	3202      	adds	r2, #2
  402e5a:	1bcb      	subs	r3, r1, r7
	memset(pDstStr, 0, dstLen);

	if (dstLen < srcLen * 2)
	srcLen = (dstLen - 1) / 2;

	for (i = 0; i < srcLen; i++)
  402e5c:	429e      	cmp	r6, r3
  402e5e:	d8e6      	bhi.n	402e2e <parse_serial_packet+0x3a>
  402e60:	e000      	b.n	402e64 <parse_serial_packet+0x70>
  402e62:	4859      	ldr	r0, [pc, #356]	; (402fc8 <parse_serial_packet+0x1d4>)
	{
		*pDstStr++ = tab[*pBytes >> 4];
		*pDstStr++ = tab[*pBytes & 0x0f];
		pBytes++;
	}
	*pDstStr++ = 0;
  402e64:	2300      	movs	r3, #0
  402e66:	7003      	strb	r3, [r0, #0]
	uint8_t *data = NULL;
	uint8_t resp = CMD_SUCCESS;
	uint8_t len, crc, cmdid;
	
	byte2hexstrstr(buf, buflen, serial_buf_test, 256);
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial IN(%d): %s\r\n", buflen, serial_buf_test));
  402e68:	4b5a      	ldr	r3, [pc, #360]	; (402fd4 <parse_serial_packet+0x1e0>)
  402e6a:	6818      	ldr	r0, [r3, #0]
  402e6c:	b330      	cbz	r0, 402ebc <parse_serial_packet+0xc8>
  402e6e:	2100      	movs	r1, #0
  402e70:	f04f 32ff 	mov.w	r2, #4294967295
  402e74:	460b      	mov	r3, r1
  402e76:	4e58      	ldr	r6, [pc, #352]	; (402fd8 <parse_serial_packet+0x1e4>)
  402e78:	47b0      	blx	r6
  402e7a:	4b58      	ldr	r3, [pc, #352]	; (402fdc <parse_serial_packet+0x1e8>)
  402e7c:	4798      	blx	r3
  402e7e:	4606      	mov	r6, r0
  402e80:	2000      	movs	r0, #0
  402e82:	4b57      	ldr	r3, [pc, #348]	; (402fe0 <parse_serial_packet+0x1ec>)
  402e84:	4798      	blx	r3
  402e86:	4602      	mov	r2, r0
  402e88:	4856      	ldr	r0, [pc, #344]	; (402fe4 <parse_serial_packet+0x1f0>)
  402e8a:	4631      	mov	r1, r6
  402e8c:	4e56      	ldr	r6, [pc, #344]	; (402fe8 <parse_serial_packet+0x1f4>)
  402e8e:	47b0      	blx	r6
  402e90:	4856      	ldr	r0, [pc, #344]	; (402fec <parse_serial_packet+0x1f8>)
  402e92:	4629      	mov	r1, r5
  402e94:	4a4c      	ldr	r2, [pc, #304]	; (402fc8 <parse_serial_packet+0x1d4>)
  402e96:	47b0      	blx	r6
  402e98:	4b4e      	ldr	r3, [pc, #312]	; (402fd4 <parse_serial_packet+0x1e0>)
  402e9a:	6818      	ldr	r0, [r3, #0]
  402e9c:	2100      	movs	r1, #0
  402e9e:	460a      	mov	r2, r1
  402ea0:	460b      	mov	r3, r1
  402ea2:	4e53      	ldr	r6, [pc, #332]	; (402ff0 <parse_serial_packet+0x1fc>)
  402ea4:	47b0      	blx	r6
	
	while(buflen > 3) {
  402ea6:	2d03      	cmp	r5, #3
  402ea8:	f240 8734 	bls.w	403d14 <parse_serial_packet+0xf20>
		if(*p != SERIAL_SOF) {
  402eac:	7821      	ldrb	r1, [r4, #0]
  402eae:	297e      	cmp	r1, #126	; 0x7e
  402eb0:	d10d      	bne.n	402ece <parse_serial_packet+0xda>
			return;
		}
	
		len = *(p + 1 + 1) + 3;

		crc = sum8(p, len);
  402eb2:	4f50      	ldr	r7, [pc, #320]	; (402ff4 <parse_serial_packet+0x200>)
		case CMD_UART_TIMEOUT:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: UART timeout.\r\n"));
		break;
		
		default:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Unsupported command(%d).\r\n", cmdid));
  402eb4:	4e47      	ldr	r6, [pc, #284]	; (402fd4 <parse_serial_packet+0x1e0>)
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402eb6:	f8df b15c 	ldr.w	fp, [pc, #348]	; 403014 <parse_serial_packet+0x220>
  402eba:	e04c      	b.n	402f56 <parse_serial_packet+0x162>
	uint8_t *data = NULL;
	uint8_t resp = CMD_SUCCESS;
	uint8_t len, crc, cmdid;
	
	byte2hexstrstr(buf, buflen, serial_buf_test, 256);
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial IN(%d): %s\r\n", buflen, serial_buf_test));
  402ebc:	484b      	ldr	r0, [pc, #300]	; (402fec <parse_serial_packet+0x1f8>)
  402ebe:	4629      	mov	r1, r5
  402ec0:	4a41      	ldr	r2, [pc, #260]	; (402fc8 <parse_serial_packet+0x1d4>)
  402ec2:	4b49      	ldr	r3, [pc, #292]	; (402fe8 <parse_serial_packet+0x1f4>)
  402ec4:	4798      	blx	r3
  402ec6:	e7ee      	b.n	402ea6 <parse_serial_packet+0xb2>
	
	while(buflen > 3) {
		if(*p != SERIAL_SOF) {
  402ec8:	7821      	ldrb	r1, [r4, #0]
  402eca:	297e      	cmp	r1, #126	; 0x7e
  402ecc:	d043      	beq.n	402f56 <parse_serial_packet+0x162>
			if (uart_ready == 0)
  402ece:	4b4a      	ldr	r3, [pc, #296]	; (402ff8 <parse_serial_packet+0x204>)
  402ed0:	781b      	ldrb	r3, [r3, #0]
  402ed2:	2b00      	cmp	r3, #0
  402ed4:	f000 871e 	beq.w	403d14 <parse_serial_packet+0xf20>
				return;
			resp = CMD_INVALID_HEAD;
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Invalid header received (0x%x).\r\n", *p));
  402ed8:	4b3e      	ldr	r3, [pc, #248]	; (402fd4 <parse_serial_packet+0x1e0>)
  402eda:	6818      	ldr	r0, [r3, #0]
  402edc:	b1d8      	cbz	r0, 402f16 <parse_serial_packet+0x122>
  402ede:	2100      	movs	r1, #0
  402ee0:	f04f 32ff 	mov.w	r2, #4294967295
  402ee4:	460b      	mov	r3, r1
  402ee6:	4d3c      	ldr	r5, [pc, #240]	; (402fd8 <parse_serial_packet+0x1e4>)
  402ee8:	47a8      	blx	r5
  402eea:	4b3c      	ldr	r3, [pc, #240]	; (402fdc <parse_serial_packet+0x1e8>)
  402eec:	4798      	blx	r3
  402eee:	4605      	mov	r5, r0
  402ef0:	2000      	movs	r0, #0
  402ef2:	4b3b      	ldr	r3, [pc, #236]	; (402fe0 <parse_serial_packet+0x1ec>)
  402ef4:	4798      	blx	r3
  402ef6:	4602      	mov	r2, r0
  402ef8:	483a      	ldr	r0, [pc, #232]	; (402fe4 <parse_serial_packet+0x1f0>)
  402efa:	4629      	mov	r1, r5
  402efc:	4d3a      	ldr	r5, [pc, #232]	; (402fe8 <parse_serial_packet+0x1f4>)
  402efe:	47a8      	blx	r5
  402f00:	483e      	ldr	r0, [pc, #248]	; (402ffc <parse_serial_packet+0x208>)
  402f02:	7821      	ldrb	r1, [r4, #0]
  402f04:	47a8      	blx	r5
  402f06:	4b33      	ldr	r3, [pc, #204]	; (402fd4 <parse_serial_packet+0x1e0>)
  402f08:	6818      	ldr	r0, [r3, #0]
  402f0a:	2100      	movs	r1, #0
  402f0c:	460a      	mov	r2, r1
  402f0e:	460b      	mov	r3, r1
  402f10:	4c37      	ldr	r4, [pc, #220]	; (402ff0 <parse_serial_packet+0x1fc>)
  402f12:	47a0      	blx	r4
  402f14:	e002      	b.n	402f1c <parse_serial_packet+0x128>
  402f16:	4839      	ldr	r0, [pc, #228]	; (402ffc <parse_serial_packet+0x208>)
  402f18:	4b33      	ldr	r3, [pc, #204]	; (402fe8 <parse_serial_packet+0x1f4>)
  402f1a:	4798      	blx	r3
	static uint8_t resp_buf[8];
	uint8_t *p = &resp_buf[0];
	static serial_out_pk_t resp_send_packet;
	static serial_out_pk_t *resp_out_data = &resp_send_packet;

	*p++ = SERIAL_SOF;
  402f1c:	4c38      	ldr	r4, [pc, #224]	; (403000 <parse_serial_packet+0x20c>)
  402f1e:	237e      	movs	r3, #126	; 0x7e
  402f20:	7023      	strb	r3, [r4, #0]
	//*p++ = ENCRYPT_MODE;
	*p++ = 2;
  402f22:	2302      	movs	r3, #2
  402f24:	7063      	strb	r3, [r4, #1]
	*p++ = resp_id;
  402f26:	23a0      	movs	r3, #160	; 0xa0
  402f28:	70a3      	strb	r3, [r4, #2]
	*p++ = status;
  402f2a:	2301      	movs	r3, #1
  402f2c:	70e3      	strb	r3, [r4, #3]
	*p = sum8(&resp_buf[0], p - &resp_buf[0]);
  402f2e:	4620      	mov	r0, r4
  402f30:	2104      	movs	r1, #4
  402f32:	4b30      	ldr	r3, [pc, #192]	; (402ff4 <parse_serial_packet+0x200>)
  402f34:	4798      	blx	r3
  402f36:	7120      	strb	r0, [r4, #4]
	p++;
	resp_out_data->buf = resp_buf;
  402f38:	4932      	ldr	r1, [pc, #200]	; (403004 <parse_serial_packet+0x210>)
  402f3a:	680b      	ldr	r3, [r1, #0]
  402f3c:	601c      	str	r4, [r3, #0]
	resp_out_data->len = p - resp_buf;
  402f3e:	680b      	ldr	r3, [r1, #0]
  402f40:	2205      	movs	r2, #5
  402f42:	605a      	str	r2, [r3, #4]
	IoT_xQueueSend(serial_out_queue, &resp_out_data, 1000);
  402f44:	4b30      	ldr	r3, [pc, #192]	; (403008 <parse_serial_packet+0x214>)
  402f46:	6818      	ldr	r0, [r3, #0]
  402f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402f4c:	2300      	movs	r3, #0
  402f4e:	4c28      	ldr	r4, [pc, #160]	; (402ff0 <parse_serial_packet+0x1fc>)
  402f50:	47a0      	blx	r4
  402f52:	f000 bedf 	b.w	403d14 <parse_serial_packet+0xf20>
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Invalid header received (0x%x).\r\n", *p));
			serial_resp_out(CMD_PACKET_ERROR_RESP, resp);
			return;
		}
	
		len = *(p + 1 + 1) + 3;
  402f56:	f894 8002 	ldrb.w	r8, [r4, #2]
  402f5a:	f108 0803 	add.w	r8, r8, #3
  402f5e:	fa5f f888 	uxtb.w	r8, r8

		crc = sum8(p, len);
  402f62:	4620      	mov	r0, r4
  402f64:	4641      	mov	r1, r8
  402f66:	47b8      	blx	r7
  402f68:	4681      	mov	r9, r0

		if(*(p + len) != crc) {
  402f6a:	eb04 0a08 	add.w	sl, r4, r8
  402f6e:	f814 1008 	ldrb.w	r1, [r4, r8]
  402f72:	4281      	cmp	r1, r0
  402f74:	d050      	beq.n	403018 <parse_serial_packet+0x224>
			resp = CMD_CRC_ERROR;
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Invalid CRC, Received CRC(0x%x), Calculated CRC(0x%x).\r\n", *(p + len), crc));
  402f76:	4b17      	ldr	r3, [pc, #92]	; (402fd4 <parse_serial_packet+0x1e0>)
  402f78:	6818      	ldr	r0, [r3, #0]
  402f7a:	b1f0      	cbz	r0, 402fba <parse_serial_packet+0x1c6>
  402f7c:	2100      	movs	r1, #0
  402f7e:	f04f 32ff 	mov.w	r2, #4294967295
  402f82:	460b      	mov	r3, r1
  402f84:	4c14      	ldr	r4, [pc, #80]	; (402fd8 <parse_serial_packet+0x1e4>)
  402f86:	47a0      	blx	r4
  402f88:	4b14      	ldr	r3, [pc, #80]	; (402fdc <parse_serial_packet+0x1e8>)
  402f8a:	4798      	blx	r3
  402f8c:	4604      	mov	r4, r0
  402f8e:	2000      	movs	r0, #0
  402f90:	4b13      	ldr	r3, [pc, #76]	; (402fe0 <parse_serial_packet+0x1ec>)
  402f92:	4798      	blx	r3
  402f94:	4602      	mov	r2, r0
  402f96:	4813      	ldr	r0, [pc, #76]	; (402fe4 <parse_serial_packet+0x1f0>)
  402f98:	4621      	mov	r1, r4
  402f9a:	4c13      	ldr	r4, [pc, #76]	; (402fe8 <parse_serial_packet+0x1f4>)
  402f9c:	47a0      	blx	r4
  402f9e:	481b      	ldr	r0, [pc, #108]	; (40300c <parse_serial_packet+0x218>)
  402fa0:	f89a 1000 	ldrb.w	r1, [sl]
  402fa4:	464a      	mov	r2, r9
  402fa6:	47a0      	blx	r4
  402fa8:	4b0a      	ldr	r3, [pc, #40]	; (402fd4 <parse_serial_packet+0x1e0>)
  402faa:	6818      	ldr	r0, [r3, #0]
  402fac:	2100      	movs	r1, #0
  402fae:	460a      	mov	r2, r1
  402fb0:	460b      	mov	r3, r1
  402fb2:	4c0f      	ldr	r4, [pc, #60]	; (402ff0 <parse_serial_packet+0x1fc>)
  402fb4:	47a0      	blx	r4
  402fb6:	f000 bead 	b.w	403d14 <parse_serial_packet+0xf20>
  402fba:	4814      	ldr	r0, [pc, #80]	; (40300c <parse_serial_packet+0x218>)
  402fbc:	464a      	mov	r2, r9
  402fbe:	4b0a      	ldr	r3, [pc, #40]	; (402fe8 <parse_serial_packet+0x1f4>)
  402fc0:	4798      	blx	r3
  402fc2:	f000 bea7 	b.w	403d14 <parse_serial_packet+0xf20>
  402fc6:	bf00      	nop
  402fc8:	2001ce2c 	.word	0x2001ce2c
  402fcc:	00404689 	.word	0x00404689
  402fd0:	2001ce2e 	.word	0x2001ce2e
  402fd4:	2001bc14 	.word	0x2001bc14
  402fd8:	0040150d 	.word	0x0040150d
  402fdc:	004019a5 	.word	0x004019a5
  402fe0:	004019e5 	.word	0x004019e5
  402fe4:	00407714 	.word	0x00407714
  402fe8:	004044c9 	.word	0x004044c9
  402fec:	004077e8 	.word	0x004077e8
  402ff0:	00401341 	.word	0x00401341
  402ff4:	00402ab9 	.word	0x00402ab9
  402ff8:	2001b3e0 	.word	0x2001b3e0
  402ffc:	004077fc 	.word	0x004077fc
  403000:	2001b3b0 	.word	0x2001b3b0
  403004:	20000024 	.word	0x20000024
  403008:	2001bc10 	.word	0x2001bc10
  40300c:	00407820 	.word	0x00407820
  403010:	00407b7c 	.word	0x00407b7c
  403014:	400e0e00 	.word	0x400e0e00
			//serial_resp_out(CMD_PACKET_ERROR_RESP, CMD_CRC_ERROR);
			return;
		}
		cmdid = *(p + 3);
  403018:	f894 8003 	ldrb.w	r8, [r4, #3]
	{
		.cmd_index = 0,
		.value = 0
	};
	
	switch(cmdid)
  40301c:	f1a8 0303 	sub.w	r3, r8, #3
  403020:	2bfb      	cmp	r3, #251	; 0xfb
  403022:	f200 864a 	bhi.w	403cba <parse_serial_packet+0xec6>
  403026:	e8df f013 	tbh	[pc, r3, lsl #1]
  40302a:	017d      	.short	0x017d
  40302c:	06480648 	.word	0x06480648
  403030:	06480648 	.word	0x06480648
  403034:	0648066c 	.word	0x0648066c
  403038:	012a0126 	.word	0x012a0126
  40303c:	06480648 	.word	0x06480648
  403040:	06480648 	.word	0x06480648
  403044:	06480648 	.word	0x06480648
  403048:	06480648 	.word	0x06480648
  40304c:	06480648 	.word	0x06480648
  403050:	06480648 	.word	0x06480648
  403054:	06480648 	.word	0x06480648
  403058:	06480648 	.word	0x06480648
  40305c:	06480648 	.word	0x06480648
  403060:	06480648 	.word	0x06480648
  403064:	06480648 	.word	0x06480648
  403068:	06480648 	.word	0x06480648
  40306c:	06480648 	.word	0x06480648
  403070:	06480648 	.word	0x06480648
  403074:	06480648 	.word	0x06480648
  403078:	06480648 	.word	0x06480648
  40307c:	06480648 	.word	0x06480648
  403080:	06480648 	.word	0x06480648
  403084:	06480648 	.word	0x06480648
  403088:	06480648 	.word	0x06480648
  40308c:	06480648 	.word	0x06480648
  403090:	06480648 	.word	0x06480648
  403094:	06480648 	.word	0x06480648
  403098:	06480648 	.word	0x06480648
  40309c:	06480648 	.word	0x06480648
  4030a0:	06480648 	.word	0x06480648
  4030a4:	06480648 	.word	0x06480648
  4030a8:	06480648 	.word	0x06480648
  4030ac:	06480648 	.word	0x06480648
  4030b0:	06480648 	.word	0x06480648
  4030b4:	06480648 	.word	0x06480648
  4030b8:	06480648 	.word	0x06480648
  4030bc:	06480648 	.word	0x06480648
  4030c0:	06480648 	.word	0x06480648
  4030c4:	06480648 	.word	0x06480648
  4030c8:	06480648 	.word	0x06480648
  4030cc:	06480648 	.word	0x06480648
  4030d0:	06480648 	.word	0x06480648
  4030d4:	06480648 	.word	0x06480648
  4030d8:	06480648 	.word	0x06480648
  4030dc:	06480648 	.word	0x06480648
  4030e0:	06480648 	.word	0x06480648
  4030e4:	06480648 	.word	0x06480648
  4030e8:	06480648 	.word	0x06480648
  4030ec:	06480648 	.word	0x06480648
  4030f0:	06480648 	.word	0x06480648
  4030f4:	06480648 	.word	0x06480648
  4030f8:	06480648 	.word	0x06480648
  4030fc:	06480648 	.word	0x06480648
  403100:	06480648 	.word	0x06480648
  403104:	06480648 	.word	0x06480648
  403108:	06480648 	.word	0x06480648
  40310c:	06480648 	.word	0x06480648
  403110:	06480648 	.word	0x06480648
  403114:	06480648 	.word	0x06480648
  403118:	06480648 	.word	0x06480648
  40311c:	06480648 	.word	0x06480648
  403120:	06480648 	.word	0x06480648
  403124:	05510648 	.word	0x05510648
  403128:	06480219 	.word	0x06480219
  40312c:	064805dd 	.word	0x064805dd
  403130:	06480648 	.word	0x06480648
  403134:	01f40648 	.word	0x01f40648
  403138:	06480648 	.word	0x06480648
  40313c:	06480648 	.word	0x06480648
  403140:	06480648 	.word	0x06480648
  403144:	06480648 	.word	0x06480648
  403148:	06480648 	.word	0x06480648
  40314c:	06480648 	.word	0x06480648
  403150:	06480648 	.word	0x06480648
  403154:	06480648 	.word	0x06480648
  403158:	0648014f 	.word	0x0648014f
  40315c:	06480648 	.word	0x06480648
  403160:	06480648 	.word	0x06480648
  403164:	01a6066c 	.word	0x01a6066c
  403168:	06480648 	.word	0x06480648
  40316c:	06480648 	.word	0x06480648
  403170:	03420271 	.word	0x03420271
  403174:	04990404 	.word	0x04990404
  403178:	064804be 	.word	0x064804be
  40317c:	06480648 	.word	0x06480648
  403180:	06480648 	.word	0x06480648
  403184:	06480648 	.word	0x06480648
  403188:	06480648 	.word	0x06480648
  40318c:	06480648 	.word	0x06480648
  403190:	06480648 	.word	0x06480648
  403194:	06480648 	.word	0x06480648
  403198:	06480648 	.word	0x06480648
  40319c:	06480648 	.word	0x06480648
  4031a0:	06480648 	.word	0x06480648
  4031a4:	06480648 	.word	0x06480648
  4031a8:	06480648 	.word	0x06480648
  4031ac:	06480648 	.word	0x06480648
  4031b0:	06480648 	.word	0x06480648
  4031b4:	06480648 	.word	0x06480648
  4031b8:	05970574 	.word	0x05970574
  4031bc:	062505ba 	.word	0x062505ba
  4031c0:	06480648 	.word	0x06480648
  4031c4:	06480648 	.word	0x06480648
  4031c8:	06480648 	.word	0x06480648
  4031cc:	06480648 	.word	0x06480648
  4031d0:	06480648 	.word	0x06480648
  4031d4:	06480648 	.word	0x06480648
  4031d8:	06480648 	.word	0x06480648
  4031dc:	06480648 	.word	0x06480648
  4031e0:	06480648 	.word	0x06480648
  4031e4:	06480648 	.word	0x06480648
  4031e8:	06480648 	.word	0x06480648
  4031ec:	06480648 	.word	0x06480648
  4031f0:	06480648 	.word	0x06480648
  4031f4:	06480648 	.word	0x06480648
  4031f8:	06480648 	.word	0x06480648
  4031fc:	06480648 	.word	0x06480648
  403200:	06480648 	.word	0x06480648
  403204:	06480648 	.word	0x06480648
  403208:	06480648 	.word	0x06480648
  40320c:	06480648 	.word	0x06480648
  403210:	06480648 	.word	0x06480648
  403214:	00fc0509 	.word	0x00fc0509
  403218:	064801cb 	.word	0x064801cb
  40321c:	02dc030f 	.word	0x02dc030f
  403220:	02b9      	.short	0x02b9
	{
		case CMD_WIFI_MODULE_READY:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wi-Fi Module Ready!\r\n"));
  403222:	6830      	ldr	r0, [r6, #0]
  403224:	b1e0      	cbz	r0, 403260 <parse_serial_packet+0x46c>
  403226:	2100      	movs	r1, #0
  403228:	f04f 32ff 	mov.w	r2, #4294967295
  40322c:	460b      	mov	r3, r1
  40322e:	f8df c2d4 	ldr.w	ip, [pc, #724]	; 403504 <parse_serial_packet+0x710>
  403232:	47e0      	blx	ip
  403234:	4b9f      	ldr	r3, [pc, #636]	; (4034b4 <parse_serial_packet+0x6c0>)
  403236:	4798      	blx	r3
  403238:	4680      	mov	r8, r0
  40323a:	2000      	movs	r0, #0
  40323c:	4b9e      	ldr	r3, [pc, #632]	; (4034b8 <parse_serial_packet+0x6c4>)
  40323e:	4798      	blx	r3
  403240:	4602      	mov	r2, r0
  403242:	489e      	ldr	r0, [pc, #632]	; (4034bc <parse_serial_packet+0x6c8>)
  403244:	4641      	mov	r1, r8
  403246:	f8df 827c 	ldr.w	r8, [pc, #636]	; 4034c4 <parse_serial_packet+0x6d0>
  40324a:	47c0      	blx	r8
  40324c:	489c      	ldr	r0, [pc, #624]	; (4034c0 <parse_serial_packet+0x6cc>)
  40324e:	47c0      	blx	r8
  403250:	6830      	ldr	r0, [r6, #0]
  403252:	2100      	movs	r1, #0
  403254:	460a      	mov	r2, r1
  403256:	460b      	mov	r3, r1
  403258:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 403508 <parse_serial_packet+0x714>
  40325c:	47e0      	blx	ip
  40325e:	e002      	b.n	403266 <parse_serial_packet+0x472>
  403260:	4897      	ldr	r0, [pc, #604]	; (4034c0 <parse_serial_packet+0x6cc>)
  403262:	4b98      	ldr	r3, [pc, #608]	; (4034c4 <parse_serial_packet+0x6d0>)
  403264:	4798      	blx	r3
			uart_ready = 1;
  403266:	2201      	movs	r2, #1
  403268:	4b97      	ldr	r3, [pc, #604]	; (4034c8 <parse_serial_packet+0x6d4>)
  40326a:	701a      	strb	r2, [r3, #0]
			led_blinking_mode = LED_MODE_ON;
  40326c:	2203      	movs	r2, #3
  40326e:	4b97      	ldr	r3, [pc, #604]	; (4034cc <parse_serial_packet+0x6d8>)
  403270:	701a      	strb	r2, [r3, #0]
  403272:	f000 bd46 	b.w	403d02 <parse_serial_packet+0xf0e>
			break;
		}
		case CUSTOMIZE_CMD_DEV_CTRL_GET_TEMP:
			startTemperature();
  403276:	4b96      	ldr	r3, [pc, #600]	; (4034d0 <parse_serial_packet+0x6dc>)
  403278:	4798      	blx	r3
  40327a:	f000 bd42 	b.w	403d02 <parse_serial_packet+0xf0e>
	delay_ms(500);
	Temp_Measure_Get_Air_Condition_Info(0x00, 50);
}
static void startPicture(void)
{
	IoT_DEBUG(IoT_DBG_ON | IoT_DBG_INFO, ("Receive get snapshot command.\r\n"));
  40327e:	6830      	ldr	r0, [r6, #0]
  403280:	b1e8      	cbz	r0, 4032be <parse_serial_packet+0x4ca>
  403282:	2100      	movs	r1, #0
  403284:	f04f 32ff 	mov.w	r2, #4294967295
  403288:	460b      	mov	r3, r1
  40328a:	f8df c278 	ldr.w	ip, [pc, #632]	; 403504 <parse_serial_packet+0x710>
  40328e:	47e0      	blx	ip
  403290:	4b88      	ldr	r3, [pc, #544]	; (4034b4 <parse_serial_packet+0x6c0>)
  403292:	4798      	blx	r3
  403294:	4680      	mov	r8, r0
  403296:	2000      	movs	r0, #0
  403298:	4b87      	ldr	r3, [pc, #540]	; (4034b8 <parse_serial_packet+0x6c4>)
  40329a:	4798      	blx	r3
  40329c:	4602      	mov	r2, r0
  40329e:	4887      	ldr	r0, [pc, #540]	; (4034bc <parse_serial_packet+0x6c8>)
  4032a0:	4641      	mov	r1, r8
  4032a2:	f8df 8220 	ldr.w	r8, [pc, #544]	; 4034c4 <parse_serial_packet+0x6d0>
  4032a6:	47c0      	blx	r8
  4032a8:	488a      	ldr	r0, [pc, #552]	; (4034d4 <parse_serial_packet+0x6e0>)
  4032aa:	47c0      	blx	r8
  4032ac:	6830      	ldr	r0, [r6, #0]
  4032ae:	2100      	movs	r1, #0
  4032b0:	460a      	mov	r2, r1
  4032b2:	460b      	mov	r3, r1
  4032b4:	f8df c250 	ldr.w	ip, [pc, #592]	; 403508 <parse_serial_packet+0x714>
  4032b8:	47e0      	blx	ip
  4032ba:	f000 bd22 	b.w	403d02 <parse_serial_packet+0xf0e>
  4032be:	4885      	ldr	r0, [pc, #532]	; (4034d4 <parse_serial_packet+0x6e0>)
  4032c0:	4b80      	ldr	r3, [pc, #512]	; (4034c4 <parse_serial_packet+0x6d0>)
  4032c2:	4798      	blx	r3
  4032c4:	f000 bd1d 	b.w	403d02 <parse_serial_packet+0xf0e>
		case CUSTOMIZE_CMD_DEV_CTRL_GET_PIC:
			startPicture();
		break;
		
		case CUSTOMIZE_CMD_DEV_TEMP_RSP:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("get wifi res for image\r\n"));
  4032c8:	6830      	ldr	r0, [r6, #0]
  4032ca:	b1e0      	cbz	r0, 403306 <parse_serial_packet+0x512>
  4032cc:	2100      	movs	r1, #0
  4032ce:	f04f 32ff 	mov.w	r2, #4294967295
  4032d2:	460b      	mov	r3, r1
  4032d4:	f8df c22c 	ldr.w	ip, [pc, #556]	; 403504 <parse_serial_packet+0x710>
  4032d8:	47e0      	blx	ip
  4032da:	4b76      	ldr	r3, [pc, #472]	; (4034b4 <parse_serial_packet+0x6c0>)
  4032dc:	4798      	blx	r3
  4032de:	4680      	mov	r8, r0
  4032e0:	2000      	movs	r0, #0
  4032e2:	4b75      	ldr	r3, [pc, #468]	; (4034b8 <parse_serial_packet+0x6c4>)
  4032e4:	4798      	blx	r3
  4032e6:	4602      	mov	r2, r0
  4032e8:	4874      	ldr	r0, [pc, #464]	; (4034bc <parse_serial_packet+0x6c8>)
  4032ea:	4641      	mov	r1, r8
  4032ec:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 4034c4 <parse_serial_packet+0x6d0>
  4032f0:	47c0      	blx	r8
  4032f2:	4879      	ldr	r0, [pc, #484]	; (4034d8 <parse_serial_packet+0x6e4>)
  4032f4:	47c0      	blx	r8
  4032f6:	6830      	ldr	r0, [r6, #0]
  4032f8:	2100      	movs	r1, #0
  4032fa:	460a      	mov	r2, r1
  4032fc:	460b      	mov	r3, r1
  4032fe:	f8df c208 	ldr.w	ip, [pc, #520]	; 403508 <parse_serial_packet+0x714>
  403302:	47e0      	blx	ip
  403304:	e002      	b.n	40330c <parse_serial_packet+0x518>
  403306:	4874      	ldr	r0, [pc, #464]	; (4034d8 <parse_serial_packet+0x6e4>)
  403308:	4b6e      	ldr	r3, [pc, #440]	; (4034c4 <parse_serial_packet+0x6d0>)
  40330a:	4798      	blx	r3
			if (thermoIndex < 37)
  40330c:	4b73      	ldr	r3, [pc, #460]	; (4034dc <parse_serial_packet+0x6e8>)
  40330e:	7819      	ldrb	r1, [r3, #0]
  403310:	2924      	cmp	r1, #36	; 0x24
  403312:	f200 84f6 	bhi.w	403d02 <parse_serial_packet+0xf0e>
				signal_to_wifi(thermimage, thermoIndex++);
  403316:	1c4a      	adds	r2, r1, #1
  403318:	701a      	strb	r2, [r3, #0]
  40331a:	4871      	ldr	r0, [pc, #452]	; (4034e0 <parse_serial_packet+0x6ec>)
  40331c:	4b71      	ldr	r3, [pc, #452]	; (4034e4 <parse_serial_packet+0x6f0>)
  40331e:	4798      	blx	r3
  403320:	f000 bcef 	b.w	403d02 <parse_serial_packet+0xf0e>
		break;
		
		case CUSTOMIZE_CMD_STATUS_REPORT:
		{
			uint8_t states = *data;
			if(states == 0) {
  403324:	7923      	ldrb	r3, [r4, #4]
  403326:	2b03      	cmp	r3, #3
  403328:	f040 84eb 	bne.w	403d02 <parse_serial_packet+0xf0e>
			}
			else if (states == 2) {
				IoT_DEBUG(IoT_DBG_INFO, ("Wifi module connect to wifi router.\r\n"));
			}
			else if(states == 3) {
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wifi module connect to JD server.\r\n"));
  40332c:	6830      	ldr	r0, [r6, #0]
  40332e:	b1e8      	cbz	r0, 40336c <parse_serial_packet+0x578>
  403330:	2100      	movs	r1, #0
  403332:	f04f 32ff 	mov.w	r2, #4294967295
  403336:	460b      	mov	r3, r1
  403338:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 403504 <parse_serial_packet+0x710>
  40333c:	47e0      	blx	ip
  40333e:	4b5d      	ldr	r3, [pc, #372]	; (4034b4 <parse_serial_packet+0x6c0>)
  403340:	4798      	blx	r3
  403342:	4680      	mov	r8, r0
  403344:	2000      	movs	r0, #0
  403346:	4b5c      	ldr	r3, [pc, #368]	; (4034b8 <parse_serial_packet+0x6c4>)
  403348:	4798      	blx	r3
  40334a:	4602      	mov	r2, r0
  40334c:	485b      	ldr	r0, [pc, #364]	; (4034bc <parse_serial_packet+0x6c8>)
  40334e:	4641      	mov	r1, r8
  403350:	f8df 8170 	ldr.w	r8, [pc, #368]	; 4034c4 <parse_serial_packet+0x6d0>
  403354:	47c0      	blx	r8
  403356:	4864      	ldr	r0, [pc, #400]	; (4034e8 <parse_serial_packet+0x6f4>)
  403358:	47c0      	blx	r8
  40335a:	6830      	ldr	r0, [r6, #0]
  40335c:	2100      	movs	r1, #0
  40335e:	460a      	mov	r2, r1
  403360:	460b      	mov	r3, r1
  403362:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 403508 <parse_serial_packet+0x714>
  403366:	47e0      	blx	ip
  403368:	f000 bccb 	b.w	403d02 <parse_serial_packet+0xf0e>
  40336c:	485e      	ldr	r0, [pc, #376]	; (4034e8 <parse_serial_packet+0x6f4>)
  40336e:	4b55      	ldr	r3, [pc, #340]	; (4034c4 <parse_serial_packet+0x6d0>)
  403370:	4798      	blx	r3
  403372:	f000 bcc6 	b.w	403d02 <parse_serial_packet+0xf0e>
			//sniffer_mode = 0;
			//LED_Off(LED0);
			//led_state = 0;

			//led_states_upload(led_state);
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Connect to Remote Server OK.\r\n"));
  403376:	6830      	ldr	r0, [r6, #0]
  403378:	b1e8      	cbz	r0, 4033b6 <parse_serial_packet+0x5c2>
  40337a:	2100      	movs	r1, #0
  40337c:	f04f 32ff 	mov.w	r2, #4294967295
  403380:	460b      	mov	r3, r1
  403382:	f8df c180 	ldr.w	ip, [pc, #384]	; 403504 <parse_serial_packet+0x710>
  403386:	47e0      	blx	ip
  403388:	4b4a      	ldr	r3, [pc, #296]	; (4034b4 <parse_serial_packet+0x6c0>)
  40338a:	4798      	blx	r3
  40338c:	4680      	mov	r8, r0
  40338e:	2000      	movs	r0, #0
  403390:	4b49      	ldr	r3, [pc, #292]	; (4034b8 <parse_serial_packet+0x6c4>)
  403392:	4798      	blx	r3
  403394:	4602      	mov	r2, r0
  403396:	4849      	ldr	r0, [pc, #292]	; (4034bc <parse_serial_packet+0x6c8>)
  403398:	4641      	mov	r1, r8
  40339a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 4034c4 <parse_serial_packet+0x6d0>
  40339e:	47c0      	blx	r8
  4033a0:	4852      	ldr	r0, [pc, #328]	; (4034ec <parse_serial_packet+0x6f8>)
  4033a2:	47c0      	blx	r8
  4033a4:	6830      	ldr	r0, [r6, #0]
  4033a6:	2100      	movs	r1, #0
  4033a8:	460a      	mov	r2, r1
  4033aa:	460b      	mov	r3, r1
  4033ac:	f8df c158 	ldr.w	ip, [pc, #344]	; 403508 <parse_serial_packet+0x714>
  4033b0:	47e0      	blx	ip
  4033b2:	f000 bca6 	b.w	403d02 <parse_serial_packet+0xf0e>
  4033b6:	484d      	ldr	r0, [pc, #308]	; (4034ec <parse_serial_packet+0x6f8>)
  4033b8:	4b42      	ldr	r3, [pc, #264]	; (4034c4 <parse_serial_packet+0x6d0>)
  4033ba:	4798      	blx	r3
  4033bc:	f000 bca1 	b.w	403d02 <parse_serial_packet+0xf0e>
		break;
		
		case CMD_CONNECTION_BEATHEART:
			uart_beatheart++;
  4033c0:	4a4b      	ldr	r2, [pc, #300]	; (4034f0 <parse_serial_packet+0x6fc>)
  4033c2:	6813      	ldr	r3, [r2, #0]
  4033c4:	3301      	adds	r3, #1
  4033c6:	6013      	str	r3, [r2, #0]
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Connection beatheart.\r\n"));
  4033c8:	6830      	ldr	r0, [r6, #0]
  4033ca:	b1e8      	cbz	r0, 403408 <parse_serial_packet+0x614>
  4033cc:	2100      	movs	r1, #0
  4033ce:	f04f 32ff 	mov.w	r2, #4294967295
  4033d2:	460b      	mov	r3, r1
  4033d4:	f8df c12c 	ldr.w	ip, [pc, #300]	; 403504 <parse_serial_packet+0x710>
  4033d8:	47e0      	blx	ip
  4033da:	4b36      	ldr	r3, [pc, #216]	; (4034b4 <parse_serial_packet+0x6c0>)
  4033dc:	4798      	blx	r3
  4033de:	4680      	mov	r8, r0
  4033e0:	2000      	movs	r0, #0
  4033e2:	4b35      	ldr	r3, [pc, #212]	; (4034b8 <parse_serial_packet+0x6c4>)
  4033e4:	4798      	blx	r3
  4033e6:	4602      	mov	r2, r0
  4033e8:	4834      	ldr	r0, [pc, #208]	; (4034bc <parse_serial_packet+0x6c8>)
  4033ea:	4641      	mov	r1, r8
  4033ec:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 4034c4 <parse_serial_packet+0x6d0>
  4033f0:	47c0      	blx	r8
  4033f2:	4840      	ldr	r0, [pc, #256]	; (4034f4 <parse_serial_packet+0x700>)
  4033f4:	47c0      	blx	r8
  4033f6:	6830      	ldr	r0, [r6, #0]
  4033f8:	2100      	movs	r1, #0
  4033fa:	460a      	mov	r2, r1
  4033fc:	460b      	mov	r3, r1
  4033fe:	f8df c108 	ldr.w	ip, [pc, #264]	; 403508 <parse_serial_packet+0x714>
  403402:	47e0      	blx	ip
  403404:	f000 bc7d 	b.w	403d02 <parse_serial_packet+0xf0e>
  403408:	483a      	ldr	r0, [pc, #232]	; (4034f4 <parse_serial_packet+0x700>)
  40340a:	4b2e      	ldr	r3, [pc, #184]	; (4034c4 <parse_serial_packet+0x6d0>)
  40340c:	4798      	blx	r3
  40340e:	f000 bc78 	b.w	403d02 <parse_serial_packet+0xf0e>
		break;
		
		case CUSTOMIZE_CMD_DATA_UPLOAD_RESP:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Update Data OK.\r\n"));
  403412:	6830      	ldr	r0, [r6, #0]
  403414:	b1e8      	cbz	r0, 403452 <parse_serial_packet+0x65e>
  403416:	2100      	movs	r1, #0
  403418:	f04f 32ff 	mov.w	r2, #4294967295
  40341c:	460b      	mov	r3, r1
  40341e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 403504 <parse_serial_packet+0x710>
  403422:	47e0      	blx	ip
  403424:	4b23      	ldr	r3, [pc, #140]	; (4034b4 <parse_serial_packet+0x6c0>)
  403426:	4798      	blx	r3
  403428:	4680      	mov	r8, r0
  40342a:	2000      	movs	r0, #0
  40342c:	4b22      	ldr	r3, [pc, #136]	; (4034b8 <parse_serial_packet+0x6c4>)
  40342e:	4798      	blx	r3
  403430:	4602      	mov	r2, r0
  403432:	4822      	ldr	r0, [pc, #136]	; (4034bc <parse_serial_packet+0x6c8>)
  403434:	4641      	mov	r1, r8
  403436:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4034c4 <parse_serial_packet+0x6d0>
  40343a:	47c0      	blx	r8
  40343c:	482e      	ldr	r0, [pc, #184]	; (4034f8 <parse_serial_packet+0x704>)
  40343e:	47c0      	blx	r8
  403440:	6830      	ldr	r0, [r6, #0]
  403442:	2100      	movs	r1, #0
  403444:	460a      	mov	r2, r1
  403446:	460b      	mov	r3, r1
  403448:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 403508 <parse_serial_packet+0x714>
  40344c:	47e0      	blx	ip
  40344e:	f000 bc58 	b.w	403d02 <parse_serial_packet+0xf0e>
  403452:	4829      	ldr	r0, [pc, #164]	; (4034f8 <parse_serial_packet+0x704>)
  403454:	4b1b      	ldr	r3, [pc, #108]	; (4034c4 <parse_serial_packet+0x6d0>)
  403456:	4798      	blx	r3
  403458:	f000 bc53 	b.w	403d02 <parse_serial_packet+0xf0e>
  40345c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403460:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
		break;
		
		case CUSTOMIZE_CMD_FACTORY_RESET_RESP:
		{
			LED_On(LED0);
			led_state = ON;
  403464:	2201      	movs	r2, #1
  403466:	4b25      	ldr	r3, [pc, #148]	; (4034fc <parse_serial_packet+0x708>)
  403468:	701a      	strb	r2, [r3, #0]
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Reset to FactoryNew OK.\r\n"));
  40346a:	6830      	ldr	r0, [r6, #0]
  40346c:	b1e8      	cbz	r0, 4034aa <parse_serial_packet+0x6b6>
  40346e:	2100      	movs	r1, #0
  403470:	f04f 32ff 	mov.w	r2, #4294967295
  403474:	460b      	mov	r3, r1
  403476:	f8df c08c 	ldr.w	ip, [pc, #140]	; 403504 <parse_serial_packet+0x710>
  40347a:	47e0      	blx	ip
  40347c:	4b0d      	ldr	r3, [pc, #52]	; (4034b4 <parse_serial_packet+0x6c0>)
  40347e:	4798      	blx	r3
  403480:	4680      	mov	r8, r0
  403482:	2000      	movs	r0, #0
  403484:	4b0c      	ldr	r3, [pc, #48]	; (4034b8 <parse_serial_packet+0x6c4>)
  403486:	4798      	blx	r3
  403488:	4602      	mov	r2, r0
  40348a:	480c      	ldr	r0, [pc, #48]	; (4034bc <parse_serial_packet+0x6c8>)
  40348c:	4641      	mov	r1, r8
  40348e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 4034c4 <parse_serial_packet+0x6d0>
  403492:	47c0      	blx	r8
  403494:	481a      	ldr	r0, [pc, #104]	; (403500 <parse_serial_packet+0x70c>)
  403496:	47c0      	blx	r8
  403498:	6830      	ldr	r0, [r6, #0]
  40349a:	2100      	movs	r1, #0
  40349c:	460a      	mov	r2, r1
  40349e:	460b      	mov	r3, r1
  4034a0:	f8df c064 	ldr.w	ip, [pc, #100]	; 403508 <parse_serial_packet+0x714>
  4034a4:	47e0      	blx	ip
  4034a6:	f000 bc2c 	b.w	403d02 <parse_serial_packet+0xf0e>
  4034aa:	4815      	ldr	r0, [pc, #84]	; (403500 <parse_serial_packet+0x70c>)
  4034ac:	4b05      	ldr	r3, [pc, #20]	; (4034c4 <parse_serial_packet+0x6d0>)
  4034ae:	4798      	blx	r3
  4034b0:	f000 bc27 	b.w	403d02 <parse_serial_packet+0xf0e>
  4034b4:	004019a5 	.word	0x004019a5
  4034b8:	004019e5 	.word	0x004019e5
  4034bc:	00407714 	.word	0x00407714
  4034c0:	0040785c 	.word	0x0040785c
  4034c4:	004044c9 	.word	0x004044c9
  4034c8:	2001b3e0 	.word	0x2001b3e0
  4034cc:	20000021 	.word	0x20000021
  4034d0:	00402869 	.word	0x00402869
  4034d4:	00407874 	.word	0x00407874
  4034d8:	00407894 	.word	0x00407894
  4034dc:	2001b27c 	.word	0x2001b27c
  4034e0:	2001bc64 	.word	0x2001bc64
  4034e4:	00402cfd 	.word	0x00402cfd
  4034e8:	004078b0 	.word	0x004078b0
  4034ec:	004078d4 	.word	0x004078d4
  4034f0:	2001bc08 	.word	0x2001bc08
  4034f4:	004078f4 	.word	0x004078f4
  4034f8:	0040790c 	.word	0x0040790c
  4034fc:	2001b3e1 	.word	0x2001b3e1
  403500:	00407920 	.word	0x00407920
  403504:	0040150d 	.word	0x0040150d
  403508:	00401341 	.word	0x00401341
			//winc1500_module_reset();
		}
		break;
		
		case CMD_DEVICE_UUID_RESP:
			if(*data == CMD_SUCCESS) {
  40350c:	7923      	ldrb	r3, [r4, #4]
  40350e:	bb13      	cbnz	r3, 403556 <parse_serial_packet+0x762>
				//Wi-Fi module will connect the remote server automatically after it gets the UUID.
				//start_wifi_connect();
				//config_wifi_app_otau_url();
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UUID RESP OK.\r\n"));
  403510:	6830      	ldr	r0, [r6, #0]
  403512:	b1e0      	cbz	r0, 40354e <parse_serial_packet+0x75a>
  403514:	2100      	movs	r1, #0
  403516:	f04f 32ff 	mov.w	r2, #4294967295
  40351a:	460b      	mov	r3, r1
  40351c:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 4037d8 <parse_serial_packet+0x9e4>
  403520:	47e0      	blx	ip
  403522:	4b9f      	ldr	r3, [pc, #636]	; (4037a0 <parse_serial_packet+0x9ac>)
  403524:	4798      	blx	r3
  403526:	4680      	mov	r8, r0
  403528:	2000      	movs	r0, #0
  40352a:	4b9e      	ldr	r3, [pc, #632]	; (4037a4 <parse_serial_packet+0x9b0>)
  40352c:	4798      	blx	r3
  40352e:	4602      	mov	r2, r0
  403530:	489d      	ldr	r0, [pc, #628]	; (4037a8 <parse_serial_packet+0x9b4>)
  403532:	4641      	mov	r1, r8
  403534:	f8df 8278 	ldr.w	r8, [pc, #632]	; 4037b0 <parse_serial_packet+0x9bc>
  403538:	47c0      	blx	r8
  40353a:	489c      	ldr	r0, [pc, #624]	; (4037ac <parse_serial_packet+0x9b8>)
  40353c:	47c0      	blx	r8
  40353e:	6830      	ldr	r0, [r6, #0]
  403540:	2100      	movs	r1, #0
  403542:	460a      	mov	r2, r1
  403544:	460b      	mov	r3, r1
  403546:	f8df c294 	ldr.w	ip, [pc, #660]	; 4037dc <parse_serial_packet+0x9e8>
  40354a:	47e0      	blx	ip
  40354c:	e3d9      	b.n	403d02 <parse_serial_packet+0xf0e>
  40354e:	4897      	ldr	r0, [pc, #604]	; (4037ac <parse_serial_packet+0x9b8>)
  403550:	4b97      	ldr	r3, [pc, #604]	; (4037b0 <parse_serial_packet+0x9bc>)
  403552:	4798      	blx	r3
  403554:	e3d5      	b.n	403d02 <parse_serial_packet+0xf0e>
			}
			else {
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UUID RESP Error.\r\n"));
  403556:	6830      	ldr	r0, [r6, #0]
  403558:	b1e0      	cbz	r0, 403594 <parse_serial_packet+0x7a0>
  40355a:	2100      	movs	r1, #0
  40355c:	f04f 32ff 	mov.w	r2, #4294967295
  403560:	460b      	mov	r3, r1
  403562:	f8df c274 	ldr.w	ip, [pc, #628]	; 4037d8 <parse_serial_packet+0x9e4>
  403566:	47e0      	blx	ip
  403568:	4b8d      	ldr	r3, [pc, #564]	; (4037a0 <parse_serial_packet+0x9ac>)
  40356a:	4798      	blx	r3
  40356c:	4680      	mov	r8, r0
  40356e:	2000      	movs	r0, #0
  403570:	4b8c      	ldr	r3, [pc, #560]	; (4037a4 <parse_serial_packet+0x9b0>)
  403572:	4798      	blx	r3
  403574:	4602      	mov	r2, r0
  403576:	488c      	ldr	r0, [pc, #560]	; (4037a8 <parse_serial_packet+0x9b4>)
  403578:	4641      	mov	r1, r8
  40357a:	f8df 8234 	ldr.w	r8, [pc, #564]	; 4037b0 <parse_serial_packet+0x9bc>
  40357e:	47c0      	blx	r8
  403580:	488c      	ldr	r0, [pc, #560]	; (4037b4 <parse_serial_packet+0x9c0>)
  403582:	47c0      	blx	r8
  403584:	6830      	ldr	r0, [r6, #0]
  403586:	2100      	movs	r1, #0
  403588:	460a      	mov	r2, r1
  40358a:	460b      	mov	r3, r1
  40358c:	f8df c24c 	ldr.w	ip, [pc, #588]	; 4037dc <parse_serial_packet+0x9e8>
  403590:	47e0      	blx	ip
  403592:	e3b6      	b.n	403d02 <parse_serial_packet+0xf0e>
  403594:	4887      	ldr	r0, [pc, #540]	; (4037b4 <parse_serial_packet+0x9c0>)
  403596:	4b86      	ldr	r3, [pc, #536]	; (4037b0 <parse_serial_packet+0x9bc>)
  403598:	4798      	blx	r3
  40359a:	e3b2      	b.n	403d02 <parse_serial_packet+0xf0e>
			}
		break;
		
		case CMD_START_SNIFFER_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Start sniffer mode...\r\n"));
  40359c:	6830      	ldr	r0, [r6, #0]
  40359e:	b1e0      	cbz	r0, 4035da <parse_serial_packet+0x7e6>
  4035a0:	2100      	movs	r1, #0
  4035a2:	f04f 32ff 	mov.w	r2, #4294967295
  4035a6:	460b      	mov	r3, r1
  4035a8:	f8df c22c 	ldr.w	ip, [pc, #556]	; 4037d8 <parse_serial_packet+0x9e4>
  4035ac:	47e0      	blx	ip
  4035ae:	4b7c      	ldr	r3, [pc, #496]	; (4037a0 <parse_serial_packet+0x9ac>)
  4035b0:	4798      	blx	r3
  4035b2:	4680      	mov	r8, r0
  4035b4:	2000      	movs	r0, #0
  4035b6:	4b7b      	ldr	r3, [pc, #492]	; (4037a4 <parse_serial_packet+0x9b0>)
  4035b8:	4798      	blx	r3
  4035ba:	4602      	mov	r2, r0
  4035bc:	487a      	ldr	r0, [pc, #488]	; (4037a8 <parse_serial_packet+0x9b4>)
  4035be:	4641      	mov	r1, r8
  4035c0:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 4037b0 <parse_serial_packet+0x9bc>
  4035c4:	47c0      	blx	r8
  4035c6:	487c      	ldr	r0, [pc, #496]	; (4037b8 <parse_serial_packet+0x9c4>)
  4035c8:	47c0      	blx	r8
  4035ca:	6830      	ldr	r0, [r6, #0]
  4035cc:	2100      	movs	r1, #0
  4035ce:	460a      	mov	r2, r1
  4035d0:	460b      	mov	r3, r1
  4035d2:	f8df c208 	ldr.w	ip, [pc, #520]	; 4037dc <parse_serial_packet+0x9e8>
  4035d6:	47e0      	blx	ip
  4035d8:	e393      	b.n	403d02 <parse_serial_packet+0xf0e>
  4035da:	4877      	ldr	r0, [pc, #476]	; (4037b8 <parse_serial_packet+0x9c4>)
  4035dc:	4b74      	ldr	r3, [pc, #464]	; (4037b0 <parse_serial_packet+0x9bc>)
  4035de:	4798      	blx	r3
  4035e0:	e38f      	b.n	403d02 <parse_serial_packet+0xf0e>
			break;
		}
		
		case CMD_GOT_SSID_PSK_RESP:
		{
			p = data + 1;
  4035e2:	f104 0905 	add.w	r9, r4, #5
			len = strlen(p);
  4035e6:	4648      	mov	r0, r9
  4035e8:	4b74      	ldr	r3, [pc, #464]	; (4037bc <parse_serial_packet+0x9c8>)
  4035ea:	4798      	blx	r3
  4035ec:	4680      	mov	r8, r0
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Got wifi ssid: %s, psk: %s\r\n", p, p + len + 1));
  4035ee:	6830      	ldr	r0, [r6, #0]
  4035f0:	b308      	cbz	r0, 403636 <parse_serial_packet+0x842>
  4035f2:	2100      	movs	r1, #0
  4035f4:	f04f 32ff 	mov.w	r2, #4294967295
  4035f8:	460b      	mov	r3, r1
  4035fa:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 4037d8 <parse_serial_packet+0x9e4>
  4035fe:	47e0      	blx	ip
  403600:	4b67      	ldr	r3, [pc, #412]	; (4037a0 <parse_serial_packet+0x9ac>)
  403602:	4798      	blx	r3
  403604:	4682      	mov	sl, r0
  403606:	2000      	movs	r0, #0
  403608:	4b66      	ldr	r3, [pc, #408]	; (4037a4 <parse_serial_packet+0x9b0>)
  40360a:	4798      	blx	r3
  40360c:	4602      	mov	r2, r0
  40360e:	4866      	ldr	r0, [pc, #408]	; (4037a8 <parse_serial_packet+0x9b4>)
  403610:	4651      	mov	r1, sl
  403612:	f8df a19c 	ldr.w	sl, [pc, #412]	; 4037b0 <parse_serial_packet+0x9bc>
  403616:	47d0      	blx	sl
  403618:	fa1f f288 	uxth.w	r2, r8
  40361c:	3201      	adds	r2, #1
  40361e:	4868      	ldr	r0, [pc, #416]	; (4037c0 <parse_serial_packet+0x9cc>)
  403620:	4649      	mov	r1, r9
  403622:	444a      	add	r2, r9
  403624:	47d0      	blx	sl
  403626:	6830      	ldr	r0, [r6, #0]
  403628:	2100      	movs	r1, #0
  40362a:	460a      	mov	r2, r1
  40362c:	460b      	mov	r3, r1
  40362e:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 4037dc <parse_serial_packet+0x9e8>
  403632:	47e0      	blx	ip
  403634:	e365      	b.n	403d02 <parse_serial_packet+0xf0e>
  403636:	fa1f f288 	uxth.w	r2, r8
  40363a:	3201      	adds	r2, #1
  40363c:	4860      	ldr	r0, [pc, #384]	; (4037c0 <parse_serial_packet+0x9cc>)
  40363e:	4649      	mov	r1, r9
  403640:	444a      	add	r2, r9
  403642:	4b5b      	ldr	r3, [pc, #364]	; (4037b0 <parse_serial_packet+0x9bc>)
  403644:	4798      	blx	r3
  403646:	e35c      	b.n	403d02 <parse_serial_packet+0xf0e>
			break;
		}
		
		case CMD_START_WIFI_CONNECT_RESP:
		{
			p = data + 1;
  403648:	f104 0905 	add.w	r9, r4, #5
			len = strlen(p);
  40364c:	4648      	mov	r0, r9
  40364e:	4b5b      	ldr	r3, [pc, #364]	; (4037bc <parse_serial_packet+0x9c8>)
  403650:	4798      	blx	r3
  403652:	4680      	mov	r8, r0
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Start wifi connect ssid(%s), psk(%s).\r\n", p, p + len + 1));
  403654:	6830      	ldr	r0, [r6, #0]
  403656:	b308      	cbz	r0, 40369c <parse_serial_packet+0x8a8>
  403658:	2100      	movs	r1, #0
  40365a:	f04f 32ff 	mov.w	r2, #4294967295
  40365e:	460b      	mov	r3, r1
  403660:	f8df c174 	ldr.w	ip, [pc, #372]	; 4037d8 <parse_serial_packet+0x9e4>
  403664:	47e0      	blx	ip
  403666:	4b4e      	ldr	r3, [pc, #312]	; (4037a0 <parse_serial_packet+0x9ac>)
  403668:	4798      	blx	r3
  40366a:	4682      	mov	sl, r0
  40366c:	2000      	movs	r0, #0
  40366e:	4b4d      	ldr	r3, [pc, #308]	; (4037a4 <parse_serial_packet+0x9b0>)
  403670:	4798      	blx	r3
  403672:	4602      	mov	r2, r0
  403674:	484c      	ldr	r0, [pc, #304]	; (4037a8 <parse_serial_packet+0x9b4>)
  403676:	4651      	mov	r1, sl
  403678:	f8df a134 	ldr.w	sl, [pc, #308]	; 4037b0 <parse_serial_packet+0x9bc>
  40367c:	47d0      	blx	sl
  40367e:	fa1f f288 	uxth.w	r2, r8
  403682:	3201      	adds	r2, #1
  403684:	484f      	ldr	r0, [pc, #316]	; (4037c4 <parse_serial_packet+0x9d0>)
  403686:	4649      	mov	r1, r9
  403688:	444a      	add	r2, r9
  40368a:	47d0      	blx	sl
  40368c:	6830      	ldr	r0, [r6, #0]
  40368e:	2100      	movs	r1, #0
  403690:	460a      	mov	r2, r1
  403692:	460b      	mov	r3, r1
  403694:	f8df c144 	ldr.w	ip, [pc, #324]	; 4037dc <parse_serial_packet+0x9e8>
  403698:	47e0      	blx	ip
  40369a:	e332      	b.n	403d02 <parse_serial_packet+0xf0e>
  40369c:	fa1f f288 	uxth.w	r2, r8
  4036a0:	3201      	adds	r2, #1
  4036a2:	4848      	ldr	r0, [pc, #288]	; (4037c4 <parse_serial_packet+0x9d0>)
  4036a4:	4649      	mov	r1, r9
  4036a6:	444a      	add	r2, r9
  4036a8:	4b41      	ldr	r3, [pc, #260]	; (4037b0 <parse_serial_packet+0x9bc>)
  4036aa:	4798      	blx	r3
  4036ac:	e329      	b.n	403d02 <parse_serial_packet+0xf0e>
		}
		
		
		case CMD_REQ_APP_OTAU_RESP:
		{
			if(*data == CMD_SUCCESS) {
  4036ae:	7923      	ldrb	r3, [r4, #4]
  4036b0:	bb2b      	cbnz	r3, 4036fe <parse_serial_packet+0x90a>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Cortus APP update OK.\r\n"));
  4036b2:	6830      	ldr	r0, [r6, #0]
  4036b4:	b1e0      	cbz	r0, 4036f0 <parse_serial_packet+0x8fc>
  4036b6:	2100      	movs	r1, #0
  4036b8:	f04f 32ff 	mov.w	r2, #4294967295
  4036bc:	460b      	mov	r3, r1
  4036be:	f8df c118 	ldr.w	ip, [pc, #280]	; 4037d8 <parse_serial_packet+0x9e4>
  4036c2:	47e0      	blx	ip
  4036c4:	4b36      	ldr	r3, [pc, #216]	; (4037a0 <parse_serial_packet+0x9ac>)
  4036c6:	4798      	blx	r3
  4036c8:	4680      	mov	r8, r0
  4036ca:	2000      	movs	r0, #0
  4036cc:	4b35      	ldr	r3, [pc, #212]	; (4037a4 <parse_serial_packet+0x9b0>)
  4036ce:	4798      	blx	r3
  4036d0:	4602      	mov	r2, r0
  4036d2:	4835      	ldr	r0, [pc, #212]	; (4037a8 <parse_serial_packet+0x9b4>)
  4036d4:	4641      	mov	r1, r8
  4036d6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4037b0 <parse_serial_packet+0x9bc>
  4036da:	47c0      	blx	r8
  4036dc:	483a      	ldr	r0, [pc, #232]	; (4037c8 <parse_serial_packet+0x9d4>)
  4036de:	47c0      	blx	r8
  4036e0:	6830      	ldr	r0, [r6, #0]
  4036e2:	2100      	movs	r1, #0
  4036e4:	460a      	mov	r2, r1
  4036e6:	460b      	mov	r3, r1
  4036e8:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 4037dc <parse_serial_packet+0x9e8>
  4036ec:	47e0      	blx	ip
  4036ee:	e002      	b.n	4036f6 <parse_serial_packet+0x902>
  4036f0:	4835      	ldr	r0, [pc, #212]	; (4037c8 <parse_serial_packet+0x9d4>)
  4036f2:	4b2f      	ldr	r3, [pc, #188]	; (4037b0 <parse_serial_packet+0x9bc>)
  4036f4:	4798      	blx	r3
				led_blinking_mode = LED_MODE_OFF;
  4036f6:	2202      	movs	r2, #2
  4036f8:	4b34      	ldr	r3, [pc, #208]	; (4037cc <parse_serial_packet+0x9d8>)
  4036fa:	701a      	strb	r2, [r3, #0]
  4036fc:	e301      	b.n	403d02 <parse_serial_packet+0xf0e>
			}
			else if(*data == CMD_INVALID_URL) {
  4036fe:	2b07      	cmp	r3, #7
  403700:	d125      	bne.n	40374e <parse_serial_packet+0x95a>
				led_blinking_mode = LED_MODE_ON;
  403702:	2203      	movs	r2, #3
  403704:	4b31      	ldr	r3, [pc, #196]	; (4037cc <parse_serial_packet+0x9d8>)
  403706:	701a      	strb	r2, [r3, #0]
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU invalid url.\r\n"));
  403708:	6830      	ldr	r0, [r6, #0]
  40370a:	b1e0      	cbz	r0, 403746 <parse_serial_packet+0x952>
  40370c:	2100      	movs	r1, #0
  40370e:	f04f 32ff 	mov.w	r2, #4294967295
  403712:	460b      	mov	r3, r1
  403714:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 4037d8 <parse_serial_packet+0x9e4>
  403718:	47e0      	blx	ip
  40371a:	4b21      	ldr	r3, [pc, #132]	; (4037a0 <parse_serial_packet+0x9ac>)
  40371c:	4798      	blx	r3
  40371e:	4680      	mov	r8, r0
  403720:	2000      	movs	r0, #0
  403722:	4b20      	ldr	r3, [pc, #128]	; (4037a4 <parse_serial_packet+0x9b0>)
  403724:	4798      	blx	r3
  403726:	4602      	mov	r2, r0
  403728:	481f      	ldr	r0, [pc, #124]	; (4037a8 <parse_serial_packet+0x9b4>)
  40372a:	4641      	mov	r1, r8
  40372c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4037b0 <parse_serial_packet+0x9bc>
  403730:	47c0      	blx	r8
  403732:	4827      	ldr	r0, [pc, #156]	; (4037d0 <parse_serial_packet+0x9dc>)
  403734:	47c0      	blx	r8
  403736:	6830      	ldr	r0, [r6, #0]
  403738:	2100      	movs	r1, #0
  40373a:	460a      	mov	r2, r1
  40373c:	460b      	mov	r3, r1
  40373e:	f8df c09c 	ldr.w	ip, [pc, #156]	; 4037dc <parse_serial_packet+0x9e8>
  403742:	47e0      	blx	ip
  403744:	e2dd      	b.n	403d02 <parse_serial_packet+0xf0e>
  403746:	4822      	ldr	r0, [pc, #136]	; (4037d0 <parse_serial_packet+0x9dc>)
  403748:	4b19      	ldr	r3, [pc, #100]	; (4037b0 <parse_serial_packet+0x9bc>)
  40374a:	4798      	blx	r3
  40374c:	e2d9      	b.n	403d02 <parse_serial_packet+0xf0e>
			}
			else if(*data == CMD_OTAU_DL_FAILED) {
  40374e:	2b08      	cmp	r3, #8
  403750:	d146      	bne.n	4037e0 <parse_serial_packet+0x9ec>
				led_blinking_mode = LED_MODE_ON;
  403752:	2203      	movs	r2, #3
  403754:	4b1d      	ldr	r3, [pc, #116]	; (4037cc <parse_serial_packet+0x9d8>)
  403756:	701a      	strb	r2, [r3, #0]
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU download failed.\r\n"));
  403758:	6830      	ldr	r0, [r6, #0]
  40375a:	b1e0      	cbz	r0, 403796 <parse_serial_packet+0x9a2>
  40375c:	2100      	movs	r1, #0
  40375e:	f04f 32ff 	mov.w	r2, #4294967295
  403762:	460b      	mov	r3, r1
  403764:	f8df c070 	ldr.w	ip, [pc, #112]	; 4037d8 <parse_serial_packet+0x9e4>
  403768:	47e0      	blx	ip
  40376a:	4b0d      	ldr	r3, [pc, #52]	; (4037a0 <parse_serial_packet+0x9ac>)
  40376c:	4798      	blx	r3
  40376e:	4680      	mov	r8, r0
  403770:	2000      	movs	r0, #0
  403772:	4b0c      	ldr	r3, [pc, #48]	; (4037a4 <parse_serial_packet+0x9b0>)
  403774:	4798      	blx	r3
  403776:	4602      	mov	r2, r0
  403778:	480b      	ldr	r0, [pc, #44]	; (4037a8 <parse_serial_packet+0x9b4>)
  40377a:	4641      	mov	r1, r8
  40377c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4037b0 <parse_serial_packet+0x9bc>
  403780:	47c0      	blx	r8
  403782:	4814      	ldr	r0, [pc, #80]	; (4037d4 <parse_serial_packet+0x9e0>)
  403784:	47c0      	blx	r8
  403786:	6830      	ldr	r0, [r6, #0]
  403788:	2100      	movs	r1, #0
  40378a:	460a      	mov	r2, r1
  40378c:	460b      	mov	r3, r1
  40378e:	f8df c04c 	ldr.w	ip, [pc, #76]	; 4037dc <parse_serial_packet+0x9e8>
  403792:	47e0      	blx	ip
  403794:	e2b5      	b.n	403d02 <parse_serial_packet+0xf0e>
  403796:	480f      	ldr	r0, [pc, #60]	; (4037d4 <parse_serial_packet+0x9e0>)
  403798:	4b05      	ldr	r3, [pc, #20]	; (4037b0 <parse_serial_packet+0x9bc>)
  40379a:	4798      	blx	r3
  40379c:	e2b1      	b.n	403d02 <parse_serial_packet+0xf0e>
  40379e:	bf00      	nop
  4037a0:	004019a5 	.word	0x004019a5
  4037a4:	004019e5 	.word	0x004019e5
  4037a8:	00407714 	.word	0x00407714
  4037ac:	0040793c 	.word	0x0040793c
  4037b0:	004044c9 	.word	0x004044c9
  4037b4:	0040794c 	.word	0x0040794c
  4037b8:	00407960 	.word	0x00407960
  4037bc:	00404899 	.word	0x00404899
  4037c0:	00407978 	.word	0x00407978
  4037c4:	00407998 	.word	0x00407998
  4037c8:	004079c0 	.word	0x004079c0
  4037cc:	20000021 	.word	0x20000021
  4037d0:	004079d8 	.word	0x004079d8
  4037d4:	004079f4 	.word	0x004079f4
  4037d8:	0040150d 	.word	0x0040150d
  4037dc:	00401341 	.word	0x00401341
			}
			else if(*data == CMD_OTAU_SW_FAILED) {
  4037e0:	2b09      	cmp	r3, #9
  4037e2:	f040 828e 	bne.w	403d02 <parse_serial_packet+0xf0e>
				led_blinking_mode = LED_MODE_ON;
  4037e6:	2203      	movs	r2, #3
  4037e8:	4ba6      	ldr	r3, [pc, #664]	; (403a84 <parse_serial_packet+0xc90>)
  4037ea:	701a      	strb	r2, [r3, #0]
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: Switch OTAU image failed.\r\n"));
  4037ec:	6830      	ldr	r0, [r6, #0]
  4037ee:	b1e0      	cbz	r0, 40382a <parse_serial_packet+0xa36>
  4037f0:	2100      	movs	r1, #0
  4037f2:	f04f 32ff 	mov.w	r2, #4294967295
  4037f6:	460b      	mov	r3, r1
  4037f8:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 403abc <parse_serial_packet+0xcc8>
  4037fc:	47e0      	blx	ip
  4037fe:	4ba2      	ldr	r3, [pc, #648]	; (403a88 <parse_serial_packet+0xc94>)
  403800:	4798      	blx	r3
  403802:	4680      	mov	r8, r0
  403804:	2000      	movs	r0, #0
  403806:	4ba1      	ldr	r3, [pc, #644]	; (403a8c <parse_serial_packet+0xc98>)
  403808:	4798      	blx	r3
  40380a:	4602      	mov	r2, r0
  40380c:	48a0      	ldr	r0, [pc, #640]	; (403a90 <parse_serial_packet+0xc9c>)
  40380e:	4641      	mov	r1, r8
  403810:	f8df 8284 	ldr.w	r8, [pc, #644]	; 403a98 <parse_serial_packet+0xca4>
  403814:	47c0      	blx	r8
  403816:	489f      	ldr	r0, [pc, #636]	; (403a94 <parse_serial_packet+0xca0>)
  403818:	47c0      	blx	r8
  40381a:	6830      	ldr	r0, [r6, #0]
  40381c:	2100      	movs	r1, #0
  40381e:	460a      	mov	r2, r1
  403820:	460b      	mov	r3, r1
  403822:	f8df c29c 	ldr.w	ip, [pc, #668]	; 403ac0 <parse_serial_packet+0xccc>
  403826:	47e0      	blx	ip
  403828:	e26b      	b.n	403d02 <parse_serial_packet+0xf0e>
  40382a:	489a      	ldr	r0, [pc, #616]	; (403a94 <parse_serial_packet+0xca0>)
  40382c:	4b9a      	ldr	r3, [pc, #616]	; (403a98 <parse_serial_packet+0xca4>)
  40382e:	4798      	blx	r3
  403830:	e267      	b.n	403d02 <parse_serial_packet+0xf0e>
			break;
		}
		
		case CMD_REQ_WIFI_FW_OTAU_RESP:
		{
			if(*data == CMD_SUCCESS) {
  403832:	7923      	ldrb	r3, [r4, #4]
  403834:	bb13      	cbnz	r3, 40387c <parse_serial_packet+0xa88>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("WiFi firmware update OK.\r\n"));
  403836:	6830      	ldr	r0, [r6, #0]
  403838:	b1e0      	cbz	r0, 403874 <parse_serial_packet+0xa80>
  40383a:	2100      	movs	r1, #0
  40383c:	f04f 32ff 	mov.w	r2, #4294967295
  403840:	460b      	mov	r3, r1
  403842:	f8df c278 	ldr.w	ip, [pc, #632]	; 403abc <parse_serial_packet+0xcc8>
  403846:	47e0      	blx	ip
  403848:	4b8f      	ldr	r3, [pc, #572]	; (403a88 <parse_serial_packet+0xc94>)
  40384a:	4798      	blx	r3
  40384c:	4680      	mov	r8, r0
  40384e:	2000      	movs	r0, #0
  403850:	4b8e      	ldr	r3, [pc, #568]	; (403a8c <parse_serial_packet+0xc98>)
  403852:	4798      	blx	r3
  403854:	4602      	mov	r2, r0
  403856:	488e      	ldr	r0, [pc, #568]	; (403a90 <parse_serial_packet+0xc9c>)
  403858:	4641      	mov	r1, r8
  40385a:	f8df 823c 	ldr.w	r8, [pc, #572]	; 403a98 <parse_serial_packet+0xca4>
  40385e:	47c0      	blx	r8
  403860:	488e      	ldr	r0, [pc, #568]	; (403a9c <parse_serial_packet+0xca8>)
  403862:	47c0      	blx	r8
  403864:	6830      	ldr	r0, [r6, #0]
  403866:	2100      	movs	r1, #0
  403868:	460a      	mov	r2, r1
  40386a:	460b      	mov	r3, r1
  40386c:	f8df c250 	ldr.w	ip, [pc, #592]	; 403ac0 <parse_serial_packet+0xccc>
  403870:	47e0      	blx	ip
  403872:	e246      	b.n	403d02 <parse_serial_packet+0xf0e>
  403874:	4889      	ldr	r0, [pc, #548]	; (403a9c <parse_serial_packet+0xca8>)
  403876:	4b88      	ldr	r3, [pc, #544]	; (403a98 <parse_serial_packet+0xca4>)
  403878:	4798      	blx	r3
  40387a:	e242      	b.n	403d02 <parse_serial_packet+0xf0e>
			}
			else if(*data == CMD_INVALID_URL) {
  40387c:	2b07      	cmp	r3, #7
  40387e:	d122      	bne.n	4038c6 <parse_serial_packet+0xad2>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU invalid url.\r\n"));
  403880:	6830      	ldr	r0, [r6, #0]
  403882:	b1e0      	cbz	r0, 4038be <parse_serial_packet+0xaca>
  403884:	2100      	movs	r1, #0
  403886:	f04f 32ff 	mov.w	r2, #4294967295
  40388a:	460b      	mov	r3, r1
  40388c:	f8df c22c 	ldr.w	ip, [pc, #556]	; 403abc <parse_serial_packet+0xcc8>
  403890:	47e0      	blx	ip
  403892:	4b7d      	ldr	r3, [pc, #500]	; (403a88 <parse_serial_packet+0xc94>)
  403894:	4798      	blx	r3
  403896:	4680      	mov	r8, r0
  403898:	2000      	movs	r0, #0
  40389a:	4b7c      	ldr	r3, [pc, #496]	; (403a8c <parse_serial_packet+0xc98>)
  40389c:	4798      	blx	r3
  40389e:	4602      	mov	r2, r0
  4038a0:	487b      	ldr	r0, [pc, #492]	; (403a90 <parse_serial_packet+0xc9c>)
  4038a2:	4641      	mov	r1, r8
  4038a4:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 403a98 <parse_serial_packet+0xca4>
  4038a8:	47c0      	blx	r8
  4038aa:	487d      	ldr	r0, [pc, #500]	; (403aa0 <parse_serial_packet+0xcac>)
  4038ac:	47c0      	blx	r8
  4038ae:	6830      	ldr	r0, [r6, #0]
  4038b0:	2100      	movs	r1, #0
  4038b2:	460a      	mov	r2, r1
  4038b4:	460b      	mov	r3, r1
  4038b6:	f8df c208 	ldr.w	ip, [pc, #520]	; 403ac0 <parse_serial_packet+0xccc>
  4038ba:	47e0      	blx	ip
  4038bc:	e221      	b.n	403d02 <parse_serial_packet+0xf0e>
  4038be:	4878      	ldr	r0, [pc, #480]	; (403aa0 <parse_serial_packet+0xcac>)
  4038c0:	4b75      	ldr	r3, [pc, #468]	; (403a98 <parse_serial_packet+0xca4>)
  4038c2:	4798      	blx	r3
  4038c4:	e21d      	b.n	403d02 <parse_serial_packet+0xf0e>
			}
			else if(*data == CMD_OTAU_DL_FAILED) {
  4038c6:	2b08      	cmp	r3, #8
  4038c8:	d122      	bne.n	403910 <parse_serial_packet+0xb1c>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: OTAU download failed.\r\n"));
  4038ca:	6830      	ldr	r0, [r6, #0]
  4038cc:	b1e0      	cbz	r0, 403908 <parse_serial_packet+0xb14>
  4038ce:	2100      	movs	r1, #0
  4038d0:	f04f 32ff 	mov.w	r2, #4294967295
  4038d4:	460b      	mov	r3, r1
  4038d6:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 403abc <parse_serial_packet+0xcc8>
  4038da:	47e0      	blx	ip
  4038dc:	4b6a      	ldr	r3, [pc, #424]	; (403a88 <parse_serial_packet+0xc94>)
  4038de:	4798      	blx	r3
  4038e0:	4680      	mov	r8, r0
  4038e2:	2000      	movs	r0, #0
  4038e4:	4b69      	ldr	r3, [pc, #420]	; (403a8c <parse_serial_packet+0xc98>)
  4038e6:	4798      	blx	r3
  4038e8:	4602      	mov	r2, r0
  4038ea:	4869      	ldr	r0, [pc, #420]	; (403a90 <parse_serial_packet+0xc9c>)
  4038ec:	4641      	mov	r1, r8
  4038ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 403a98 <parse_serial_packet+0xca4>
  4038f2:	47c0      	blx	r8
  4038f4:	486b      	ldr	r0, [pc, #428]	; (403aa4 <parse_serial_packet+0xcb0>)
  4038f6:	47c0      	blx	r8
  4038f8:	6830      	ldr	r0, [r6, #0]
  4038fa:	2100      	movs	r1, #0
  4038fc:	460a      	mov	r2, r1
  4038fe:	460b      	mov	r3, r1
  403900:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 403ac0 <parse_serial_packet+0xccc>
  403904:	47e0      	blx	ip
  403906:	e1fc      	b.n	403d02 <parse_serial_packet+0xf0e>
  403908:	4866      	ldr	r0, [pc, #408]	; (403aa4 <parse_serial_packet+0xcb0>)
  40390a:	4b63      	ldr	r3, [pc, #396]	; (403a98 <parse_serial_packet+0xca4>)
  40390c:	4798      	blx	r3
  40390e:	e1f8      	b.n	403d02 <parse_serial_packet+0xf0e>
			}
			else if(*data == CMD_OTAU_SW_FAILED) {
  403910:	2b09      	cmp	r3, #9
  403912:	f040 81f6 	bne.w	403d02 <parse_serial_packet+0xf0e>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: Switch OTAU image failed.\r\n"));
  403916:	6830      	ldr	r0, [r6, #0]
  403918:	b1e0      	cbz	r0, 403954 <parse_serial_packet+0xb60>
  40391a:	2100      	movs	r1, #0
  40391c:	f04f 32ff 	mov.w	r2, #4294967295
  403920:	460b      	mov	r3, r1
  403922:	f8df c198 	ldr.w	ip, [pc, #408]	; 403abc <parse_serial_packet+0xcc8>
  403926:	47e0      	blx	ip
  403928:	4b57      	ldr	r3, [pc, #348]	; (403a88 <parse_serial_packet+0xc94>)
  40392a:	4798      	blx	r3
  40392c:	4680      	mov	r8, r0
  40392e:	2000      	movs	r0, #0
  403930:	4b56      	ldr	r3, [pc, #344]	; (403a8c <parse_serial_packet+0xc98>)
  403932:	4798      	blx	r3
  403934:	4602      	mov	r2, r0
  403936:	4856      	ldr	r0, [pc, #344]	; (403a90 <parse_serial_packet+0xc9c>)
  403938:	4641      	mov	r1, r8
  40393a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 403a98 <parse_serial_packet+0xca4>
  40393e:	47c0      	blx	r8
  403940:	4854      	ldr	r0, [pc, #336]	; (403a94 <parse_serial_packet+0xca0>)
  403942:	47c0      	blx	r8
  403944:	6830      	ldr	r0, [r6, #0]
  403946:	2100      	movs	r1, #0
  403948:	460a      	mov	r2, r1
  40394a:	460b      	mov	r3, r1
  40394c:	f8df c170 	ldr.w	ip, [pc, #368]	; 403ac0 <parse_serial_packet+0xccc>
  403950:	47e0      	blx	ip
  403952:	e1d6      	b.n	403d02 <parse_serial_packet+0xf0e>
  403954:	484f      	ldr	r0, [pc, #316]	; (403a94 <parse_serial_packet+0xca0>)
  403956:	4b50      	ldr	r3, [pc, #320]	; (403a98 <parse_serial_packet+0xca4>)
  403958:	4798      	blx	r3
  40395a:	e1d2      	b.n	403d02 <parse_serial_packet+0xf0e>
			break;
		}
		
		case CMD_REQ_SET_APP_OTAU_URL_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Set app otau url OK.\r\n"));
  40395c:	6830      	ldr	r0, [r6, #0]
  40395e:	b1e0      	cbz	r0, 40399a <parse_serial_packet+0xba6>
  403960:	2100      	movs	r1, #0
  403962:	f04f 32ff 	mov.w	r2, #4294967295
  403966:	460b      	mov	r3, r1
  403968:	f8df c150 	ldr.w	ip, [pc, #336]	; 403abc <parse_serial_packet+0xcc8>
  40396c:	47e0      	blx	ip
  40396e:	4b46      	ldr	r3, [pc, #280]	; (403a88 <parse_serial_packet+0xc94>)
  403970:	4798      	blx	r3
  403972:	4680      	mov	r8, r0
  403974:	2000      	movs	r0, #0
  403976:	4b45      	ldr	r3, [pc, #276]	; (403a8c <parse_serial_packet+0xc98>)
  403978:	4798      	blx	r3
  40397a:	4602      	mov	r2, r0
  40397c:	4844      	ldr	r0, [pc, #272]	; (403a90 <parse_serial_packet+0xc9c>)
  40397e:	4641      	mov	r1, r8
  403980:	f8df 8114 	ldr.w	r8, [pc, #276]	; 403a98 <parse_serial_packet+0xca4>
  403984:	47c0      	blx	r8
  403986:	4848      	ldr	r0, [pc, #288]	; (403aa8 <parse_serial_packet+0xcb4>)
  403988:	47c0      	blx	r8
  40398a:	6830      	ldr	r0, [r6, #0]
  40398c:	2100      	movs	r1, #0
  40398e:	460a      	mov	r2, r1
  403990:	460b      	mov	r3, r1
  403992:	f8df c12c 	ldr.w	ip, [pc, #300]	; 403ac0 <parse_serial_packet+0xccc>
  403996:	47e0      	blx	ip
  403998:	e002      	b.n	4039a0 <parse_serial_packet+0xbac>
  40399a:	4843      	ldr	r0, [pc, #268]	; (403aa8 <parse_serial_packet+0xcb4>)
  40399c:	4b3e      	ldr	r3, [pc, #248]	; (403a98 <parse_serial_packet+0xca4>)
  40399e:	4798      	blx	r3
			config_wifi_fw_otau_url();
  4039a0:	4b42      	ldr	r3, [pc, #264]	; (403aac <parse_serial_packet+0xcb8>)
  4039a2:	4798      	blx	r3
  4039a4:	e1ad      	b.n	403d02 <parse_serial_packet+0xf0e>
			break;
		}
		
		case CMD_REQ_SET_WIFI_FW_OTAU_URL_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Set wifi firmware otau url OK.\r\n"));
  4039a6:	6830      	ldr	r0, [r6, #0]
  4039a8:	b1e0      	cbz	r0, 4039e4 <parse_serial_packet+0xbf0>
  4039aa:	2100      	movs	r1, #0
  4039ac:	f04f 32ff 	mov.w	r2, #4294967295
  4039b0:	460b      	mov	r3, r1
  4039b2:	f8df c108 	ldr.w	ip, [pc, #264]	; 403abc <parse_serial_packet+0xcc8>
  4039b6:	47e0      	blx	ip
  4039b8:	4b33      	ldr	r3, [pc, #204]	; (403a88 <parse_serial_packet+0xc94>)
  4039ba:	4798      	blx	r3
  4039bc:	4680      	mov	r8, r0
  4039be:	2000      	movs	r0, #0
  4039c0:	4b32      	ldr	r3, [pc, #200]	; (403a8c <parse_serial_packet+0xc98>)
  4039c2:	4798      	blx	r3
  4039c4:	4602      	mov	r2, r0
  4039c6:	4832      	ldr	r0, [pc, #200]	; (403a90 <parse_serial_packet+0xc9c>)
  4039c8:	4641      	mov	r1, r8
  4039ca:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 403a98 <parse_serial_packet+0xca4>
  4039ce:	47c0      	blx	r8
  4039d0:	4837      	ldr	r0, [pc, #220]	; (403ab0 <parse_serial_packet+0xcbc>)
  4039d2:	47c0      	blx	r8
  4039d4:	6830      	ldr	r0, [r6, #0]
  4039d6:	2100      	movs	r1, #0
  4039d8:	460a      	mov	r2, r1
  4039da:	460b      	mov	r3, r1
  4039dc:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 403ac0 <parse_serial_packet+0xccc>
  4039e0:	47e0      	blx	ip
  4039e2:	e002      	b.n	4039ea <parse_serial_packet+0xbf6>
  4039e4:	4832      	ldr	r0, [pc, #200]	; (403ab0 <parse_serial_packet+0xcbc>)
  4039e6:	4b2c      	ldr	r3, [pc, #176]	; (403a98 <parse_serial_packet+0xca4>)
  4039e8:	4798      	blx	r3

/* Send connect command to start server connecting */
static void start_wifi_connect(void)
{
	static serial_out_pk_t send_packet;
	serial_out_pk_t *out_data = &send_packet;
  4039ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 403ac4 <parse_serial_packet+0xcd0>
  4039ee:	f10d 0918 	add.w	r9, sp, #24
  4039f2:	f849 ad14 	str.w	sl, [r9, #-20]!

static uint16_t form_serial_packet(uint8_t cmdid, uint8_t *data, uint8_t datalen, uint8_t *buf)
{
	uint8_t *p = buf;

	*p++ = SERIAL_SOF;
  4039f6:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 403ac8 <parse_serial_packet+0xcd4>
  4039fa:	237e      	movs	r3, #126	; 0x7e
  4039fc:	f888 3000 	strb.w	r3, [r8]
	*p++ = ENCRYPT_MODE;
  403a00:	f04f 0300 	mov.w	r3, #0
  403a04:	f888 3001 	strb.w	r3, [r8, #1]
	*p++ = datalen + 1;
  403a08:	2301      	movs	r3, #1
  403a0a:	f888 3002 	strb.w	r3, [r8, #2]
	*p++ = cmdid;
  403a0e:	2321      	movs	r3, #33	; 0x21
  403a10:	f888 3003 	strb.w	r3, [r8, #3]
	if((data != NULL) && (datalen > 0)) {
		memcpy(p, data, datalen);
		p = p + datalen;
	}
	*p = sum8(buf, (p - buf));
  403a14:	4640      	mov	r0, r8
  403a16:	2104      	movs	r1, #4
  403a18:	47b8      	blx	r7
  403a1a:	f888 0004 	strb.w	r0, [r8, #4]
	serial_out_pk_t *out_data = &send_packet;
	static uint8_t pkt_buf[16];
	uint16_t pkt_len;
	
	pkt_len = form_serial_packet(CMD_CONNECT, NULL, 0, pkt_buf);
	out_data->buf = pkt_buf;
  403a1e:	f8ca 8000 	str.w	r8, [sl]
	out_data->len = pkt_len;
  403a22:	2305      	movs	r3, #5
  403a24:	f8ca 3004 	str.w	r3, [sl, #4]
	IoT_xQueueSend(serial_out_queue, &out_data, portMAX_DELAY);
  403a28:	4b22      	ldr	r3, [pc, #136]	; (403ab4 <parse_serial_packet+0xcc0>)
  403a2a:	6818      	ldr	r0, [r3, #0]
  403a2c:	4649      	mov	r1, r9
  403a2e:	f04f 32ff 	mov.w	r2, #4294967295
  403a32:	2300      	movs	r3, #0
  403a34:	f8df c088 	ldr.w	ip, [pc, #136]	; 403ac0 <parse_serial_packet+0xccc>
  403a38:	47e0      	blx	ip
  403a3a:	e162      	b.n	403d02 <parse_serial_packet+0xf0e>
			break;
		}
		
		case CMD_WIFI_CLOUD_READY:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wi-Fi connect to Cloud OK\r\n"));
  403a3c:	6830      	ldr	r0, [r6, #0]
  403a3e:	b1e0      	cbz	r0, 403a7a <parse_serial_packet+0xc86>
  403a40:	2100      	movs	r1, #0
  403a42:	f04f 32ff 	mov.w	r2, #4294967295
  403a46:	460b      	mov	r3, r1
  403a48:	f8df c070 	ldr.w	ip, [pc, #112]	; 403abc <parse_serial_packet+0xcc8>
  403a4c:	47e0      	blx	ip
  403a4e:	4b0e      	ldr	r3, [pc, #56]	; (403a88 <parse_serial_packet+0xc94>)
  403a50:	4798      	blx	r3
  403a52:	4680      	mov	r8, r0
  403a54:	2000      	movs	r0, #0
  403a56:	4b0d      	ldr	r3, [pc, #52]	; (403a8c <parse_serial_packet+0xc98>)
  403a58:	4798      	blx	r3
  403a5a:	4602      	mov	r2, r0
  403a5c:	480c      	ldr	r0, [pc, #48]	; (403a90 <parse_serial_packet+0xc9c>)
  403a5e:	4641      	mov	r1, r8
  403a60:	f8df 8034 	ldr.w	r8, [pc, #52]	; 403a98 <parse_serial_packet+0xca4>
  403a64:	47c0      	blx	r8
  403a66:	4814      	ldr	r0, [pc, #80]	; (403ab8 <parse_serial_packet+0xcc4>)
  403a68:	47c0      	blx	r8
  403a6a:	6830      	ldr	r0, [r6, #0]
  403a6c:	2100      	movs	r1, #0
  403a6e:	460a      	mov	r2, r1
  403a70:	460b      	mov	r3, r1
  403a72:	f8df c04c 	ldr.w	ip, [pc, #76]	; 403ac0 <parse_serial_packet+0xccc>
  403a76:	47e0      	blx	ip
  403a78:	e143      	b.n	403d02 <parse_serial_packet+0xf0e>
  403a7a:	480f      	ldr	r0, [pc, #60]	; (403ab8 <parse_serial_packet+0xcc4>)
  403a7c:	4b06      	ldr	r3, [pc, #24]	; (403a98 <parse_serial_packet+0xca4>)
  403a7e:	4798      	blx	r3
  403a80:	e13f      	b.n	403d02 <parse_serial_packet+0xf0e>
  403a82:	bf00      	nop
  403a84:	20000021 	.word	0x20000021
  403a88:	004019a5 	.word	0x004019a5
  403a8c:	004019e5 	.word	0x004019e5
  403a90:	00407714 	.word	0x00407714
  403a94:	00407a14 	.word	0x00407a14
  403a98:	004044c9 	.word	0x004044c9
  403a9c:	00407a38 	.word	0x00407a38
  403aa0:	004079d8 	.word	0x004079d8
  403aa4:	004079f4 	.word	0x004079f4
  403aa8:	00407a54 	.word	0x00407a54
  403aac:	00402d75 	.word	0x00402d75
  403ab0:	00407a6c 	.word	0x00407a6c
  403ab4:	2001bc10 	.word	0x2001bc10
  403ab8:	00407a90 	.word	0x00407a90
  403abc:	0040150d 	.word	0x0040150d
  403ac0:	00401341 	.word	0x00401341
  403ac4:	2001b3e4 	.word	0x2001b3e4
  403ac8:	2001b3b8 	.word	0x2001b3b8
			break;
		}
		case CUSTOMIZE_CMD_CHANGE_UART_CFG_RESP:
		{
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Wi-Fi return get uart cfg OK\r\n"));
  403acc:	6830      	ldr	r0, [r6, #0]
  403ace:	b1e0      	cbz	r0, 403b0a <parse_serial_packet+0xd16>
  403ad0:	2100      	movs	r1, #0
  403ad2:	f04f 32ff 	mov.w	r2, #4294967295
  403ad6:	460b      	mov	r3, r1
  403ad8:	f8df c270 	ldr.w	ip, [pc, #624]	; 403d4c <parse_serial_packet+0xf58>
  403adc:	47e0      	blx	ip
  403ade:	4b8f      	ldr	r3, [pc, #572]	; (403d1c <parse_serial_packet+0xf28>)
  403ae0:	4798      	blx	r3
  403ae2:	4680      	mov	r8, r0
  403ae4:	2000      	movs	r0, #0
  403ae6:	4b8e      	ldr	r3, [pc, #568]	; (403d20 <parse_serial_packet+0xf2c>)
  403ae8:	4798      	blx	r3
  403aea:	4602      	mov	r2, r0
  403aec:	488d      	ldr	r0, [pc, #564]	; (403d24 <parse_serial_packet+0xf30>)
  403aee:	4641      	mov	r1, r8
  403af0:	f8df 8238 	ldr.w	r8, [pc, #568]	; 403d2c <parse_serial_packet+0xf38>
  403af4:	47c0      	blx	r8
  403af6:	488c      	ldr	r0, [pc, #560]	; (403d28 <parse_serial_packet+0xf34>)
  403af8:	47c0      	blx	r8
  403afa:	6830      	ldr	r0, [r6, #0]
  403afc:	2100      	movs	r1, #0
  403afe:	460a      	mov	r2, r1
  403b00:	460b      	mov	r3, r1
  403b02:	f8df c24c 	ldr.w	ip, [pc, #588]	; 403d50 <parse_serial_packet+0xf5c>
  403b06:	47e0      	blx	ip
  403b08:	e0fb      	b.n	403d02 <parse_serial_packet+0xf0e>
  403b0a:	4887      	ldr	r0, [pc, #540]	; (403d28 <parse_serial_packet+0xf34>)
  403b0c:	4b87      	ldr	r3, [pc, #540]	; (403d2c <parse_serial_packet+0xf38>)
  403b0e:	4798      	blx	r3
  403b10:	e0f7      	b.n	403d02 <parse_serial_packet+0xf0e>
			}
			break;
		}

		case CMD_UDP_PACKET_JSONCONTROL_PACKET:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UDP packet jsoncontrol packet.\r\n"));
  403b12:	6830      	ldr	r0, [r6, #0]
  403b14:	b1e0      	cbz	r0, 403b50 <parse_serial_packet+0xd5c>
  403b16:	2100      	movs	r1, #0
  403b18:	f04f 32ff 	mov.w	r2, #4294967295
  403b1c:	460b      	mov	r3, r1
  403b1e:	f8df c22c 	ldr.w	ip, [pc, #556]	; 403d4c <parse_serial_packet+0xf58>
  403b22:	47e0      	blx	ip
  403b24:	4b7d      	ldr	r3, [pc, #500]	; (403d1c <parse_serial_packet+0xf28>)
  403b26:	4798      	blx	r3
  403b28:	4680      	mov	r8, r0
  403b2a:	2000      	movs	r0, #0
  403b2c:	4b7c      	ldr	r3, [pc, #496]	; (403d20 <parse_serial_packet+0xf2c>)
  403b2e:	4798      	blx	r3
  403b30:	4602      	mov	r2, r0
  403b32:	487c      	ldr	r0, [pc, #496]	; (403d24 <parse_serial_packet+0xf30>)
  403b34:	4641      	mov	r1, r8
  403b36:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 403d2c <parse_serial_packet+0xf38>
  403b3a:	47c0      	blx	r8
  403b3c:	487c      	ldr	r0, [pc, #496]	; (403d30 <parse_serial_packet+0xf3c>)
  403b3e:	47c0      	blx	r8
  403b40:	6830      	ldr	r0, [r6, #0]
  403b42:	2100      	movs	r1, #0
  403b44:	460a      	mov	r2, r1
  403b46:	460b      	mov	r3, r1
  403b48:	f8df c204 	ldr.w	ip, [pc, #516]	; 403d50 <parse_serial_packet+0xf5c>
  403b4c:	47e0      	blx	ip
  403b4e:	e0d8      	b.n	403d02 <parse_serial_packet+0xf0e>
  403b50:	4877      	ldr	r0, [pc, #476]	; (403d30 <parse_serial_packet+0xf3c>)
  403b52:	4b76      	ldr	r3, [pc, #472]	; (403d2c <parse_serial_packet+0xf38>)
  403b54:	4798      	blx	r3
  403b56:	e0d4      	b.n	403d02 <parse_serial_packet+0xf0e>
		break;
		
		case CMD_UDP_PACKET_UNKNOWN_PACKET:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("UDP packet unknown packet.\r\n"));
  403b58:	6830      	ldr	r0, [r6, #0]
  403b5a:	b1e0      	cbz	r0, 403b96 <parse_serial_packet+0xda2>
  403b5c:	2100      	movs	r1, #0
  403b5e:	f04f 32ff 	mov.w	r2, #4294967295
  403b62:	460b      	mov	r3, r1
  403b64:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 403d4c <parse_serial_packet+0xf58>
  403b68:	47e0      	blx	ip
  403b6a:	4b6c      	ldr	r3, [pc, #432]	; (403d1c <parse_serial_packet+0xf28>)
  403b6c:	4798      	blx	r3
  403b6e:	4680      	mov	r8, r0
  403b70:	2000      	movs	r0, #0
  403b72:	4b6b      	ldr	r3, [pc, #428]	; (403d20 <parse_serial_packet+0xf2c>)
  403b74:	4798      	blx	r3
  403b76:	4602      	mov	r2, r0
  403b78:	486a      	ldr	r0, [pc, #424]	; (403d24 <parse_serial_packet+0xf30>)
  403b7a:	4641      	mov	r1, r8
  403b7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 403d2c <parse_serial_packet+0xf38>
  403b80:	47c0      	blx	r8
  403b82:	486c      	ldr	r0, [pc, #432]	; (403d34 <parse_serial_packet+0xf40>)
  403b84:	47c0      	blx	r8
  403b86:	6830      	ldr	r0, [r6, #0]
  403b88:	2100      	movs	r1, #0
  403b8a:	460a      	mov	r2, r1
  403b8c:	460b      	mov	r3, r1
  403b8e:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 403d50 <parse_serial_packet+0xf5c>
  403b92:	47e0      	blx	ip
  403b94:	e0b5      	b.n	403d02 <parse_serial_packet+0xf0e>
  403b96:	4867      	ldr	r0, [pc, #412]	; (403d34 <parse_serial_packet+0xf40>)
  403b98:	4b64      	ldr	r3, [pc, #400]	; (403d2c <parse_serial_packet+0xf38>)
  403b9a:	4798      	blx	r3
  403b9c:	e0b1      	b.n	403d02 <parse_serial_packet+0xf0e>
		break;
		
		case CMD_OUT_OF_MEMORY:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: out of memory.\r\n"));
  403b9e:	6830      	ldr	r0, [r6, #0]
  403ba0:	b1e0      	cbz	r0, 403bdc <parse_serial_packet+0xde8>
  403ba2:	2100      	movs	r1, #0
  403ba4:	f04f 32ff 	mov.w	r2, #4294967295
  403ba8:	460b      	mov	r3, r1
  403baa:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 403d4c <parse_serial_packet+0xf58>
  403bae:	47e0      	blx	ip
  403bb0:	4b5a      	ldr	r3, [pc, #360]	; (403d1c <parse_serial_packet+0xf28>)
  403bb2:	4798      	blx	r3
  403bb4:	4680      	mov	r8, r0
  403bb6:	2000      	movs	r0, #0
  403bb8:	4b59      	ldr	r3, [pc, #356]	; (403d20 <parse_serial_packet+0xf2c>)
  403bba:	4798      	blx	r3
  403bbc:	4602      	mov	r2, r0
  403bbe:	4859      	ldr	r0, [pc, #356]	; (403d24 <parse_serial_packet+0xf30>)
  403bc0:	4641      	mov	r1, r8
  403bc2:	f8df 8168 	ldr.w	r8, [pc, #360]	; 403d2c <parse_serial_packet+0xf38>
  403bc6:	47c0      	blx	r8
  403bc8:	485b      	ldr	r0, [pc, #364]	; (403d38 <parse_serial_packet+0xf44>)
  403bca:	47c0      	blx	r8
  403bcc:	6830      	ldr	r0, [r6, #0]
  403bce:	2100      	movs	r1, #0
  403bd0:	460a      	mov	r2, r1
  403bd2:	460b      	mov	r3, r1
  403bd4:	f8df c178 	ldr.w	ip, [pc, #376]	; 403d50 <parse_serial_packet+0xf5c>
  403bd8:	47e0      	blx	ip
  403bda:	e092      	b.n	403d02 <parse_serial_packet+0xf0e>
  403bdc:	4856      	ldr	r0, [pc, #344]	; (403d38 <parse_serial_packet+0xf44>)
  403bde:	4b53      	ldr	r3, [pc, #332]	; (403d2c <parse_serial_packet+0xf38>)
  403be0:	4798      	blx	r3
  403be2:	e08e      	b.n	403d02 <parse_serial_packet+0xf0e>
		break;
		
		case CUSTOMIZE_CMD_FACTORY_TEST_RESP:
			if(*data == 0x0) {
  403be4:	7923      	ldrb	r3, [r4, #4]
  403be6:	bb13      	cbnz	r3, 403c2e <parse_serial_packet+0xe3a>
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("AP can Found.\r\n"));
  403be8:	6830      	ldr	r0, [r6, #0]
  403bea:	b1e0      	cbz	r0, 403c26 <parse_serial_packet+0xe32>
  403bec:	2100      	movs	r1, #0
  403bee:	f04f 32ff 	mov.w	r2, #4294967295
  403bf2:	460b      	mov	r3, r1
  403bf4:	f8df c154 	ldr.w	ip, [pc, #340]	; 403d4c <parse_serial_packet+0xf58>
  403bf8:	47e0      	blx	ip
  403bfa:	4b48      	ldr	r3, [pc, #288]	; (403d1c <parse_serial_packet+0xf28>)
  403bfc:	4798      	blx	r3
  403bfe:	4680      	mov	r8, r0
  403c00:	2000      	movs	r0, #0
  403c02:	4b47      	ldr	r3, [pc, #284]	; (403d20 <parse_serial_packet+0xf2c>)
  403c04:	4798      	blx	r3
  403c06:	4602      	mov	r2, r0
  403c08:	4846      	ldr	r0, [pc, #280]	; (403d24 <parse_serial_packet+0xf30>)
  403c0a:	4641      	mov	r1, r8
  403c0c:	f8df 811c 	ldr.w	r8, [pc, #284]	; 403d2c <parse_serial_packet+0xf38>
  403c10:	47c0      	blx	r8
  403c12:	484a      	ldr	r0, [pc, #296]	; (403d3c <parse_serial_packet+0xf48>)
  403c14:	47c0      	blx	r8
  403c16:	6830      	ldr	r0, [r6, #0]
  403c18:	2100      	movs	r1, #0
  403c1a:	460a      	mov	r2, r1
  403c1c:	460b      	mov	r3, r1
  403c1e:	f8df c130 	ldr.w	ip, [pc, #304]	; 403d50 <parse_serial_packet+0xf5c>
  403c22:	47e0      	blx	ip
  403c24:	e06d      	b.n	403d02 <parse_serial_packet+0xf0e>
  403c26:	4845      	ldr	r0, [pc, #276]	; (403d3c <parse_serial_packet+0xf48>)
  403c28:	4b40      	ldr	r3, [pc, #256]	; (403d2c <parse_serial_packet+0xf38>)
  403c2a:	4798      	blx	r3
  403c2c:	e069      	b.n	403d02 <parse_serial_packet+0xf0e>
			}
			else {
				IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("AP not Found.\r\n"));
  403c2e:	6830      	ldr	r0, [r6, #0]
  403c30:	b1e0      	cbz	r0, 403c6c <parse_serial_packet+0xe78>
  403c32:	2100      	movs	r1, #0
  403c34:	f04f 32ff 	mov.w	r2, #4294967295
  403c38:	460b      	mov	r3, r1
  403c3a:	f8df c110 	ldr.w	ip, [pc, #272]	; 403d4c <parse_serial_packet+0xf58>
  403c3e:	47e0      	blx	ip
  403c40:	4b36      	ldr	r3, [pc, #216]	; (403d1c <parse_serial_packet+0xf28>)
  403c42:	4798      	blx	r3
  403c44:	4680      	mov	r8, r0
  403c46:	2000      	movs	r0, #0
  403c48:	4b35      	ldr	r3, [pc, #212]	; (403d20 <parse_serial_packet+0xf2c>)
  403c4a:	4798      	blx	r3
  403c4c:	4602      	mov	r2, r0
  403c4e:	4835      	ldr	r0, [pc, #212]	; (403d24 <parse_serial_packet+0xf30>)
  403c50:	4641      	mov	r1, r8
  403c52:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 403d2c <parse_serial_packet+0xf38>
  403c56:	47c0      	blx	r8
  403c58:	4839      	ldr	r0, [pc, #228]	; (403d40 <parse_serial_packet+0xf4c>)
  403c5a:	47c0      	blx	r8
  403c5c:	6830      	ldr	r0, [r6, #0]
  403c5e:	2100      	movs	r1, #0
  403c60:	460a      	mov	r2, r1
  403c62:	460b      	mov	r3, r1
  403c64:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 403d50 <parse_serial_packet+0xf5c>
  403c68:	47e0      	blx	ip
  403c6a:	e04a      	b.n	403d02 <parse_serial_packet+0xf0e>
  403c6c:	4834      	ldr	r0, [pc, #208]	; (403d40 <parse_serial_packet+0xf4c>)
  403c6e:	4b2f      	ldr	r3, [pc, #188]	; (403d2c <parse_serial_packet+0xf38>)
  403c70:	4798      	blx	r3
  403c72:	e046      	b.n	403d02 <parse_serial_packet+0xf0e>
			}
		break;
		
		case CMD_UART_TIMEOUT:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Error: UART timeout.\r\n"));
  403c74:	6830      	ldr	r0, [r6, #0]
  403c76:	b1e0      	cbz	r0, 403cb2 <parse_serial_packet+0xebe>
  403c78:	2100      	movs	r1, #0
  403c7a:	f04f 32ff 	mov.w	r2, #4294967295
  403c7e:	460b      	mov	r3, r1
  403c80:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 403d4c <parse_serial_packet+0xf58>
  403c84:	47e0      	blx	ip
  403c86:	4b25      	ldr	r3, [pc, #148]	; (403d1c <parse_serial_packet+0xf28>)
  403c88:	4798      	blx	r3
  403c8a:	4680      	mov	r8, r0
  403c8c:	2000      	movs	r0, #0
  403c8e:	4b24      	ldr	r3, [pc, #144]	; (403d20 <parse_serial_packet+0xf2c>)
  403c90:	4798      	blx	r3
  403c92:	4602      	mov	r2, r0
  403c94:	4823      	ldr	r0, [pc, #140]	; (403d24 <parse_serial_packet+0xf30>)
  403c96:	4641      	mov	r1, r8
  403c98:	f8df 8090 	ldr.w	r8, [pc, #144]	; 403d2c <parse_serial_packet+0xf38>
  403c9c:	47c0      	blx	r8
  403c9e:	4829      	ldr	r0, [pc, #164]	; (403d44 <parse_serial_packet+0xf50>)
  403ca0:	47c0      	blx	r8
  403ca2:	6830      	ldr	r0, [r6, #0]
  403ca4:	2100      	movs	r1, #0
  403ca6:	460a      	mov	r2, r1
  403ca8:	460b      	mov	r3, r1
  403caa:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 403d50 <parse_serial_packet+0xf5c>
  403cae:	47e0      	blx	ip
  403cb0:	e027      	b.n	403d02 <parse_serial_packet+0xf0e>
  403cb2:	4824      	ldr	r0, [pc, #144]	; (403d44 <parse_serial_packet+0xf50>)
  403cb4:	4b1d      	ldr	r3, [pc, #116]	; (403d2c <parse_serial_packet+0xf38>)
  403cb6:	4798      	blx	r3
  403cb8:	e023      	b.n	403d02 <parse_serial_packet+0xf0e>
		break;
		
		default:
			IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Unsupported command(%d).\r\n", cmdid));
  403cba:	6830      	ldr	r0, [r6, #0]
  403cbc:	b1e8      	cbz	r0, 403cfa <parse_serial_packet+0xf06>
  403cbe:	2100      	movs	r1, #0
  403cc0:	f04f 32ff 	mov.w	r2, #4294967295
  403cc4:	460b      	mov	r3, r1
  403cc6:	f8df c084 	ldr.w	ip, [pc, #132]	; 403d4c <parse_serial_packet+0xf58>
  403cca:	47e0      	blx	ip
  403ccc:	4b13      	ldr	r3, [pc, #76]	; (403d1c <parse_serial_packet+0xf28>)
  403cce:	4798      	blx	r3
  403cd0:	4681      	mov	r9, r0
  403cd2:	2000      	movs	r0, #0
  403cd4:	4b12      	ldr	r3, [pc, #72]	; (403d20 <parse_serial_packet+0xf2c>)
  403cd6:	4798      	blx	r3
  403cd8:	4602      	mov	r2, r0
  403cda:	4812      	ldr	r0, [pc, #72]	; (403d24 <parse_serial_packet+0xf30>)
  403cdc:	4649      	mov	r1, r9
  403cde:	f8df 904c 	ldr.w	r9, [pc, #76]	; 403d2c <parse_serial_packet+0xf38>
  403ce2:	47c8      	blx	r9
  403ce4:	4818      	ldr	r0, [pc, #96]	; (403d48 <parse_serial_packet+0xf54>)
  403ce6:	4641      	mov	r1, r8
  403ce8:	47c8      	blx	r9
  403cea:	6830      	ldr	r0, [r6, #0]
  403cec:	2100      	movs	r1, #0
  403cee:	460a      	mov	r2, r1
  403cf0:	460b      	mov	r3, r1
  403cf2:	f8df c05c 	ldr.w	ip, [pc, #92]	; 403d50 <parse_serial_packet+0xf5c>
  403cf6:	47e0      	blx	ip
  403cf8:	e003      	b.n	403d02 <parse_serial_packet+0xf0e>
  403cfa:	4813      	ldr	r0, [pc, #76]	; (403d48 <parse_serial_packet+0xf54>)
  403cfc:	4641      	mov	r1, r8
  403cfe:	4b0b      	ldr	r3, [pc, #44]	; (403d2c <parse_serial_packet+0xf38>)
  403d00:	4798      	blx	r3
		cmdid = *(p + 3);
		data = p + 4;
		len = *(p + 1 + 1) - 1;
		execute_serial_cmd(cmdid, data, len);
		//in case two packet coming together
		len = *(p + 1 + 1) + 4;
  403d02:	78a3      	ldrb	r3, [r4, #2]
  403d04:	3304      	adds	r3, #4
  403d06:	b2db      	uxtb	r3, r3
		p = p + len;
  403d08:	441c      	add	r4, r3
		buflen = buflen - len;
  403d0a:	1aed      	subs	r5, r5, r3
  403d0c:	b2ed      	uxtb	r5, r5
	uint8_t len, crc, cmdid;
	
	byte2hexstrstr(buf, buflen, serial_buf_test, 256);
	IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial IN(%d): %s\r\n", buflen, serial_buf_test));
	
	while(buflen > 3) {
  403d0e:	2d03      	cmp	r5, #3
  403d10:	f63f a8da 	bhi.w	402ec8 <parse_serial_packet+0xd4>
		len = *(p + 1 + 1) + 4;
		p = p + len;
		buflen = buflen - len;
	}
	return;
}
  403d14:	b007      	add	sp, #28
  403d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d1a:	bf00      	nop
  403d1c:	004019a5 	.word	0x004019a5
  403d20:	004019e5 	.word	0x004019e5
  403d24:	00407714 	.word	0x00407714
  403d28:	00407aac 	.word	0x00407aac
  403d2c:	004044c9 	.word	0x004044c9
  403d30:	00407acc 	.word	0x00407acc
  403d34:	00407af0 	.word	0x00407af0
  403d38:	00407b10 	.word	0x00407b10
  403d3c:	00407b28 	.word	0x00407b28
  403d40:	00407b38 	.word	0x00407b38
  403d44:	00407b48 	.word	0x00407b48
  403d48:	00407b60 	.word	0x00407b60
  403d4c:	0040150d 	.word	0x0040150d
  403d50:	00401341 	.word	0x00401341

00403d54 <wifi_in>:

void wifi_in(void *parameter)
{
  403d54:	b570      	push	{r4, r5, r6, lr}
  403d56:	b082      	sub	sp, #8
	serial_in_pk_t *in_data = NULL;
  403d58:	2300      	movs	r3, #0
  403d5a:	9301      	str	r3, [sp, #4]
	wifi_module_reset();
  403d5c:	4b08      	ldr	r3, [pc, #32]	; (403d80 <wifi_in+0x2c>)
  403d5e:	4798      	blx	r3
	IoT_DEBUG(IoT_DBG_SERIOUS, ("wifi_in task started\r\n"));
	for(;;) {
		IoT_xQueueReceive(serial_in_queue, &in_data, portMAX_DELAY);
  403d60:	4e08      	ldr	r6, [pc, #32]	; (403d84 <wifi_in+0x30>)
  403d62:	4d09      	ldr	r5, [pc, #36]	; (403d88 <wifi_in+0x34>)
		parse_serial_packet(in_data->buf, in_data->len);
  403d64:	4c09      	ldr	r4, [pc, #36]	; (403d8c <wifi_in+0x38>)
{
	serial_in_pk_t *in_data = NULL;
	wifi_module_reset();
	IoT_DEBUG(IoT_DBG_SERIOUS, ("wifi_in task started\r\n"));
	for(;;) {
		IoT_xQueueReceive(serial_in_queue, &in_data, portMAX_DELAY);
  403d66:	6830      	ldr	r0, [r6, #0]
  403d68:	a901      	add	r1, sp, #4
  403d6a:	f04f 32ff 	mov.w	r2, #4294967295
  403d6e:	2300      	movs	r3, #0
  403d70:	47a8      	blx	r5
		parse_serial_packet(in_data->buf, in_data->len);
  403d72:	9b01      	ldr	r3, [sp, #4]
  403d74:	4618      	mov	r0, r3
  403d76:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
  403d7a:	47a0      	blx	r4
	}
  403d7c:	e7f3      	b.n	403d66 <wifi_in+0x12>
  403d7e:	bf00      	nop
  403d80:	004028fd 	.word	0x004028fd
  403d84:	2001b280 	.word	0x2001b280
  403d88:	0040150d 	.word	0x0040150d
  403d8c:	00402df5 	.word	0x00402df5

00403d90 <wifi_task>:
		xTimerStop(xConfigTimer, 0);
	}
}

void wifi_task(void *parameter)
{
  403d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d94:	b088      	sub	sp, #32
	(void) parameter;
	Pdc *p_pdc = NULL;
	pdc_packet_t packet;
	serial_out_pk_t *out_data = NULL;
  403d96:	2300      	movs	r3, #0
  403d98:	9305      	str	r3, [sp, #20]

	
	xConfigTimer = xTimerCreate("xConfigTimer", 1000 , pdTRUE, ( void * ) 0, vConfigModeCallback);
  403d9a:	4a84      	ldr	r2, [pc, #528]	; (403fac <wifi_task+0x21c>)
  403d9c:	9200      	str	r2, [sp, #0]
  403d9e:	4884      	ldr	r0, [pc, #528]	; (403fb0 <wifi_task+0x220>)
  403da0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403da4:	2201      	movs	r2, #1
  403da6:	4c83      	ldr	r4, [pc, #524]	; (403fb4 <wifi_task+0x224>)
  403da8:	47a0      	blx	r4
  403daa:	4b83      	ldr	r3, [pc, #524]	; (403fb8 <wifi_task+0x228>)
  403dac:	6018      	str	r0, [r3, #0]
	if(xConfigTimer == NULL ){
  403dae:	bb00      	cbnz	r0, 403df2 <wifi_task+0x62>
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_SERIOUS, ("xConfigTimer create failed.\r\n"));
  403db0:	4b82      	ldr	r3, [pc, #520]	; (403fbc <wifi_task+0x22c>)
  403db2:	6818      	ldr	r0, [r3, #0]
  403db4:	b1d0      	cbz	r0, 403dec <wifi_task+0x5c>
  403db6:	2100      	movs	r1, #0
  403db8:	f04f 32ff 	mov.w	r2, #4294967295
  403dbc:	460b      	mov	r3, r1
  403dbe:	4c80      	ldr	r4, [pc, #512]	; (403fc0 <wifi_task+0x230>)
  403dc0:	47a0      	blx	r4
  403dc2:	4b80      	ldr	r3, [pc, #512]	; (403fc4 <wifi_task+0x234>)
  403dc4:	4798      	blx	r3
  403dc6:	4604      	mov	r4, r0
  403dc8:	2000      	movs	r0, #0
  403dca:	4b7f      	ldr	r3, [pc, #508]	; (403fc8 <wifi_task+0x238>)
  403dcc:	4798      	blx	r3
  403dce:	4602      	mov	r2, r0
  403dd0:	487e      	ldr	r0, [pc, #504]	; (403fcc <wifi_task+0x23c>)
  403dd2:	4621      	mov	r1, r4
  403dd4:	4c7e      	ldr	r4, [pc, #504]	; (403fd0 <wifi_task+0x240>)
  403dd6:	47a0      	blx	r4
  403dd8:	487e      	ldr	r0, [pc, #504]	; (403fd4 <wifi_task+0x244>)
  403dda:	47a0      	blx	r4
  403ddc:	4b77      	ldr	r3, [pc, #476]	; (403fbc <wifi_task+0x22c>)
  403dde:	6818      	ldr	r0, [r3, #0]
  403de0:	2100      	movs	r1, #0
  403de2:	460a      	mov	r2, r1
  403de4:	460b      	mov	r3, r1
  403de6:	4c7c      	ldr	r4, [pc, #496]	; (403fd8 <wifi_task+0x248>)
  403de8:	47a0      	blx	r4
  403dea:	e002      	b.n	403df2 <wifi_task+0x62>
  403dec:	4879      	ldr	r0, [pc, #484]	; (403fd4 <wifi_task+0x244>)
  403dee:	4b78      	ldr	r3, [pc, #480]	; (403fd0 <wifi_task+0x240>)
  403df0:	4798      	blx	r3
	}
	
	xLedModeTimer = xTimerCreate("xLedTimer", 250 , pdTRUE, ( void * ) 0, vLedModeCallback);
  403df2:	4b7a      	ldr	r3, [pc, #488]	; (403fdc <wifi_task+0x24c>)
  403df4:	9300      	str	r3, [sp, #0]
  403df6:	487a      	ldr	r0, [pc, #488]	; (403fe0 <wifi_task+0x250>)
  403df8:	21fa      	movs	r1, #250	; 0xfa
  403dfa:	2201      	movs	r2, #1
  403dfc:	2300      	movs	r3, #0
  403dfe:	4c6d      	ldr	r4, [pc, #436]	; (403fb4 <wifi_task+0x224>)
  403e00:	47a0      	blx	r4
  403e02:	4604      	mov	r4, r0
  403e04:	4b77      	ldr	r3, [pc, #476]	; (403fe4 <wifi_task+0x254>)
  403e06:	6018      	str	r0, [r3, #0]
	if(xLedModeTimer != NULL ){
  403e08:	b148      	cbz	r0, 403e1e <wifi_task+0x8e>
		xTimerStart(xLedModeTimer, 0 );
  403e0a:	4b6e      	ldr	r3, [pc, #440]	; (403fc4 <wifi_task+0x234>)
  403e0c:	4798      	blx	r3
  403e0e:	4602      	mov	r2, r0
  403e10:	2300      	movs	r3, #0
  403e12:	9300      	str	r3, [sp, #0]
  403e14:	4620      	mov	r0, r4
  403e16:	4619      	mov	r1, r3
  403e18:	4c73      	ldr	r4, [pc, #460]	; (403fe8 <wifi_task+0x258>)
  403e1a:	47a0      	blx	r4
  403e1c:	e020      	b.n	403e60 <wifi_task+0xd0>
		// The timer was not created.
	}
	else{
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_SERIOUS, ("xLedModeTimer create failed.\r\n"));
  403e1e:	4b67      	ldr	r3, [pc, #412]	; (403fbc <wifi_task+0x22c>)
  403e20:	6818      	ldr	r0, [r3, #0]
  403e22:	b1d0      	cbz	r0, 403e5a <wifi_task+0xca>
  403e24:	2100      	movs	r1, #0
  403e26:	f04f 32ff 	mov.w	r2, #4294967295
  403e2a:	460b      	mov	r3, r1
  403e2c:	4c64      	ldr	r4, [pc, #400]	; (403fc0 <wifi_task+0x230>)
  403e2e:	47a0      	blx	r4
  403e30:	4b64      	ldr	r3, [pc, #400]	; (403fc4 <wifi_task+0x234>)
  403e32:	4798      	blx	r3
  403e34:	4604      	mov	r4, r0
  403e36:	2000      	movs	r0, #0
  403e38:	4b63      	ldr	r3, [pc, #396]	; (403fc8 <wifi_task+0x238>)
  403e3a:	4798      	blx	r3
  403e3c:	4602      	mov	r2, r0
  403e3e:	4863      	ldr	r0, [pc, #396]	; (403fcc <wifi_task+0x23c>)
  403e40:	4621      	mov	r1, r4
  403e42:	4c63      	ldr	r4, [pc, #396]	; (403fd0 <wifi_task+0x240>)
  403e44:	47a0      	blx	r4
  403e46:	4869      	ldr	r0, [pc, #420]	; (403fec <wifi_task+0x25c>)
  403e48:	47a0      	blx	r4
  403e4a:	4b5c      	ldr	r3, [pc, #368]	; (403fbc <wifi_task+0x22c>)
  403e4c:	6818      	ldr	r0, [r3, #0]
  403e4e:	2100      	movs	r1, #0
  403e50:	460a      	mov	r2, r1
  403e52:	460b      	mov	r3, r1
  403e54:	4c60      	ldr	r4, [pc, #384]	; (403fd8 <wifi_task+0x248>)
  403e56:	47a0      	blx	r4
  403e58:	e002      	b.n	403e60 <wifi_task+0xd0>
  403e5a:	4864      	ldr	r0, [pc, #400]	; (403fec <wifi_task+0x25c>)
  403e5c:	4b5c      	ldr	r3, [pc, #368]	; (403fd0 <wifi_task+0x240>)
  403e5e:	4798      	blx	r3
	IoT_DEBUG(IoT_DBG_SERIOUS, ("serial_out task started\r\n"));
	
	//uint8_t test_len = sizeof(dataupload_t);
	//IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("test len: %d\r\n", test_len));

	serial_in_queue = IoT_xQueueCreate(SERIAL_IN_QUEUE_LEN, sizeof(void *));
  403e60:	2001      	movs	r0, #1
  403e62:	2104      	movs	r1, #4
  403e64:	2200      	movs	r2, #0
  403e66:	4b62      	ldr	r3, [pc, #392]	; (403ff0 <wifi_task+0x260>)
  403e68:	4798      	blx	r3
  403e6a:	4b62      	ldr	r3, [pc, #392]	; (403ff4 <wifi_task+0x264>)
  403e6c:	6018      	str	r0, [r3, #0]
	if(serial_in_queue == NULL) {
  403e6e:	bb08      	cbnz	r0, 403eb4 <wifi_task+0x124>
		IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("Serial Queue In create failed\r\n"));
  403e70:	4b52      	ldr	r3, [pc, #328]	; (403fbc <wifi_task+0x22c>)
  403e72:	6818      	ldr	r0, [r3, #0]
  403e74:	b1d0      	cbz	r0, 403eac <wifi_task+0x11c>
  403e76:	2100      	movs	r1, #0
  403e78:	f04f 32ff 	mov.w	r2, #4294967295
  403e7c:	460b      	mov	r3, r1
  403e7e:	4c50      	ldr	r4, [pc, #320]	; (403fc0 <wifi_task+0x230>)
  403e80:	47a0      	blx	r4
  403e82:	4b50      	ldr	r3, [pc, #320]	; (403fc4 <wifi_task+0x234>)
  403e84:	4798      	blx	r3
  403e86:	4604      	mov	r4, r0
  403e88:	2000      	movs	r0, #0
  403e8a:	4b4f      	ldr	r3, [pc, #316]	; (403fc8 <wifi_task+0x238>)
  403e8c:	4798      	blx	r3
  403e8e:	4602      	mov	r2, r0
  403e90:	484e      	ldr	r0, [pc, #312]	; (403fcc <wifi_task+0x23c>)
  403e92:	4621      	mov	r1, r4
  403e94:	4c4e      	ldr	r4, [pc, #312]	; (403fd0 <wifi_task+0x240>)
  403e96:	47a0      	blx	r4
  403e98:	4857      	ldr	r0, [pc, #348]	; (403ff8 <wifi_task+0x268>)
  403e9a:	47a0      	blx	r4
  403e9c:	4b47      	ldr	r3, [pc, #284]	; (403fbc <wifi_task+0x22c>)
  403e9e:	6818      	ldr	r0, [r3, #0]
  403ea0:	2100      	movs	r1, #0
  403ea2:	460a      	mov	r2, r1
  403ea4:	460b      	mov	r3, r1
  403ea6:	4c4c      	ldr	r4, [pc, #304]	; (403fd8 <wifi_task+0x248>)
  403ea8:	47a0      	blx	r4
  403eaa:	e002      	b.n	403eb2 <wifi_task+0x122>
  403eac:	4852      	ldr	r0, [pc, #328]	; (403ff8 <wifi_task+0x268>)
  403eae:	4b48      	ldr	r3, [pc, #288]	; (403fd0 <wifi_task+0x240>)
  403eb0:	4798      	blx	r3
		while(true);
  403eb2:	e7fe      	b.n	403eb2 <wifi_task+0x122>
	}
	serial_out_queue = IoT_xQueueCreate(SERIAL_OUT_QUEUE_LEN, sizeof(void *));
  403eb4:	2001      	movs	r0, #1
  403eb6:	2104      	movs	r1, #4
  403eb8:	2200      	movs	r2, #0
  403eba:	4b4d      	ldr	r3, [pc, #308]	; (403ff0 <wifi_task+0x260>)
  403ebc:	4798      	blx	r3
  403ebe:	4b4f      	ldr	r3, [pc, #316]	; (403ffc <wifi_task+0x26c>)
  403ec0:	6018      	str	r0, [r3, #0]
	if(serial_out_queue == NULL) {
  403ec2:	bb08      	cbnz	r0, 403f08 <wifi_task+0x178>
		IoT_DEBUG(SERIAL_DBG | IoT_DBG_SERIOUS, ("Serial Queue Out create failed\r\n"));
  403ec4:	4b3d      	ldr	r3, [pc, #244]	; (403fbc <wifi_task+0x22c>)
  403ec6:	6818      	ldr	r0, [r3, #0]
  403ec8:	b1d0      	cbz	r0, 403f00 <wifi_task+0x170>
  403eca:	2100      	movs	r1, #0
  403ecc:	f04f 32ff 	mov.w	r2, #4294967295
  403ed0:	460b      	mov	r3, r1
  403ed2:	4c3b      	ldr	r4, [pc, #236]	; (403fc0 <wifi_task+0x230>)
  403ed4:	47a0      	blx	r4
  403ed6:	4b3b      	ldr	r3, [pc, #236]	; (403fc4 <wifi_task+0x234>)
  403ed8:	4798      	blx	r3
  403eda:	4604      	mov	r4, r0
  403edc:	2000      	movs	r0, #0
  403ede:	4b3a      	ldr	r3, [pc, #232]	; (403fc8 <wifi_task+0x238>)
  403ee0:	4798      	blx	r3
  403ee2:	4602      	mov	r2, r0
  403ee4:	4839      	ldr	r0, [pc, #228]	; (403fcc <wifi_task+0x23c>)
  403ee6:	4621      	mov	r1, r4
  403ee8:	4c39      	ldr	r4, [pc, #228]	; (403fd0 <wifi_task+0x240>)
  403eea:	47a0      	blx	r4
  403eec:	4844      	ldr	r0, [pc, #272]	; (404000 <wifi_task+0x270>)
  403eee:	47a0      	blx	r4
  403ef0:	4b32      	ldr	r3, [pc, #200]	; (403fbc <wifi_task+0x22c>)
  403ef2:	6818      	ldr	r0, [r3, #0]
  403ef4:	2100      	movs	r1, #0
  403ef6:	460a      	mov	r2, r1
  403ef8:	460b      	mov	r3, r1
  403efa:	4c37      	ldr	r4, [pc, #220]	; (403fd8 <wifi_task+0x248>)
  403efc:	47a0      	blx	r4
  403efe:	e002      	b.n	403f06 <wifi_task+0x176>
  403f00:	483f      	ldr	r0, [pc, #252]	; (404000 <wifi_task+0x270>)
  403f02:	4b33      	ldr	r3, [pc, #204]	; (403fd0 <wifi_task+0x240>)
  403f04:	4798      	blx	r3
		while(true);
  403f06:	e7fe      	b.n	403f06 <wifi_task+0x176>
	}
	
	IoT_xTaskCreate(wifi_in, "wifi_in", WIFI_RECV_TASK_STACK_SIZE, NULL, WIFI_RECV_TASK_PRIORITY, NULL);
  403f08:	2305      	movs	r3, #5
  403f0a:	9300      	str	r3, [sp, #0]
  403f0c:	2300      	movs	r3, #0
  403f0e:	9301      	str	r3, [sp, #4]
  403f10:	9302      	str	r3, [sp, #8]
  403f12:	9303      	str	r3, [sp, #12]
  403f14:	483b      	ldr	r0, [pc, #236]	; (404004 <wifi_task+0x274>)
  403f16:	493c      	ldr	r1, [pc, #240]	; (404008 <wifi_task+0x278>)
  403f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403f1c:	4c3b      	ldr	r4, [pc, #236]	; (40400c <wifi_task+0x27c>)
  403f1e:	47a0      	blx	r4
	
	for(;;) {

		p_pdc = usart_get_pdc_base(WIFI_SERIAL_PORT);
  403f20:	4e3b      	ldr	r6, [pc, #236]	; (404010 <wifi_task+0x280>)
  403f22:	f8df 8100 	ldr.w	r8, [pc, #256]	; 404024 <wifi_task+0x294>
		
		/* Pended here if no message received */
		IoT_xQueueReceive(serial_out_queue, &out_data, portMAX_DELAY);
  403f26:	4f35      	ldr	r7, [pc, #212]	; (403ffc <wifi_task+0x26c>)
	
	IoT_xTaskCreate(wifi_in, "wifi_in", WIFI_RECV_TASK_STACK_SIZE, NULL, WIFI_RECV_TASK_PRIORITY, NULL);
	
	for(;;) {

		p_pdc = usart_get_pdc_base(WIFI_SERIAL_PORT);
  403f28:	4630      	mov	r0, r6
  403f2a:	47c0      	blx	r8
  403f2c:	4604      	mov	r4, r0
		
		/* Pended here if no message received */
		IoT_xQueueReceive(serial_out_queue, &out_data, portMAX_DELAY);
  403f2e:	6838      	ldr	r0, [r7, #0]
  403f30:	a905      	add	r1, sp, #20
  403f32:	f04f 32ff 	mov.w	r2, #4294967295
  403f36:	2300      	movs	r3, #0
  403f38:	4d21      	ldr	r5, [pc, #132]	; (403fc0 <wifi_task+0x230>)
  403f3a:	47a8      	blx	r5
		
		uint8_t rbuf[128];
		//byte2hexstrstr(out_data->buf, out_data->len, rbuf, 128);
		IoT_DEBUG(SERIAL_DBG | IoT_DBG_INFO, ("Serial OUT(%d)\r\n", out_data->len));
  403f3c:	4b1f      	ldr	r3, [pc, #124]	; (403fbc <wifi_task+0x22c>)
  403f3e:	6818      	ldr	r0, [r3, #0]
  403f40:	b1d8      	cbz	r0, 403f7a <wifi_task+0x1ea>
  403f42:	2100      	movs	r1, #0
  403f44:	f04f 32ff 	mov.w	r2, #4294967295
  403f48:	460b      	mov	r3, r1
  403f4a:	47a8      	blx	r5
  403f4c:	4b1d      	ldr	r3, [pc, #116]	; (403fc4 <wifi_task+0x234>)
  403f4e:	4798      	blx	r3
  403f50:	4605      	mov	r5, r0
  403f52:	2000      	movs	r0, #0
  403f54:	4b1c      	ldr	r3, [pc, #112]	; (403fc8 <wifi_task+0x238>)
  403f56:	4798      	blx	r3
  403f58:	4602      	mov	r2, r0
  403f5a:	481c      	ldr	r0, [pc, #112]	; (403fcc <wifi_task+0x23c>)
  403f5c:	4629      	mov	r1, r5
  403f5e:	4d1c      	ldr	r5, [pc, #112]	; (403fd0 <wifi_task+0x240>)
  403f60:	47a8      	blx	r5
  403f62:	482c      	ldr	r0, [pc, #176]	; (404014 <wifi_task+0x284>)
  403f64:	9b05      	ldr	r3, [sp, #20]
  403f66:	6859      	ldr	r1, [r3, #4]
  403f68:	47a8      	blx	r5
  403f6a:	4b14      	ldr	r3, [pc, #80]	; (403fbc <wifi_task+0x22c>)
  403f6c:	6818      	ldr	r0, [r3, #0]
  403f6e:	2100      	movs	r1, #0
  403f70:	460a      	mov	r2, r1
  403f72:	460b      	mov	r3, r1
  403f74:	4d18      	ldr	r5, [pc, #96]	; (403fd8 <wifi_task+0x248>)
  403f76:	47a8      	blx	r5
  403f78:	e004      	b.n	403f84 <wifi_task+0x1f4>
  403f7a:	4826      	ldr	r0, [pc, #152]	; (404014 <wifi_task+0x284>)
  403f7c:	9b05      	ldr	r3, [sp, #20]
  403f7e:	6859      	ldr	r1, [r3, #4]
  403f80:	4b13      	ldr	r3, [pc, #76]	; (403fd0 <wifi_task+0x240>)
  403f82:	4798      	blx	r3

		packet.ul_addr = (uint32_t)out_data->buf;
  403f84:	9b05      	ldr	r3, [sp, #20]
  403f86:	681a      	ldr	r2, [r3, #0]
  403f88:	9206      	str	r2, [sp, #24]
		packet.ul_size = out_data->len;
  403f8a:	685b      	ldr	r3, [r3, #4]
  403f8c:	9307      	str	r3, [sp, #28]
		
		pdc_tx_init(p_pdc, &packet, NULL);
  403f8e:	4620      	mov	r0, r4
  403f90:	a906      	add	r1, sp, #24
  403f92:	2200      	movs	r2, #0
  403f94:	4b20      	ldr	r3, [pc, #128]	; (404018 <wifi_task+0x288>)
  403f96:	4798      	blx	r3
		pdc_enable_transfer(p_pdc, PERIPH_PTCR_TXTEN);
  403f98:	4620      	mov	r0, r4
  403f9a:	f44f 7180 	mov.w	r1, #256	; 0x100
  403f9e:	4b1f      	ldr	r3, [pc, #124]	; (40401c <wifi_task+0x28c>)
  403fa0:	4798      	blx	r3
		usart_enable_interrupt(WIFI_SERIAL_PORT, US_IER_ENDTX);
  403fa2:	4630      	mov	r0, r6
  403fa4:	2110      	movs	r1, #16
  403fa6:	4b1e      	ldr	r3, [pc, #120]	; (404020 <wifi_task+0x290>)
  403fa8:	4798      	blx	r3

	}
  403faa:	e7bd      	b.n	403f28 <wifi_task+0x198>
  403fac:	00402ad9 	.word	0x00402ad9
  403fb0:	00407b90 	.word	0x00407b90
  403fb4:	00402225 	.word	0x00402225
  403fb8:	2001b3dc 	.word	0x2001b3dc
  403fbc:	2001bc14 	.word	0x2001bc14
  403fc0:	0040150d 	.word	0x0040150d
  403fc4:	004019a5 	.word	0x004019a5
  403fc8:	004019e5 	.word	0x004019e5
  403fcc:	00407714 	.word	0x00407714
  403fd0:	004044c9 	.word	0x004044c9
  403fd4:	00407ba0 	.word	0x00407ba0
  403fd8:	00401341 	.word	0x00401341
  403fdc:	004027e1 	.word	0x004027e1
  403fe0:	00407bc0 	.word	0x00407bc0
  403fe4:	2001b284 	.word	0x2001b284
  403fe8:	0040227d 	.word	0x0040227d
  403fec:	00407bcc 	.word	0x00407bcc
  403ff0:	004012e1 	.word	0x004012e1
  403ff4:	2001b280 	.word	0x2001b280
  403ff8:	00407bec 	.word	0x00407bec
  403ffc:	2001bc10 	.word	0x2001bc10
  404000:	00407c0c 	.word	0x00407c0c
  404004:	00403d55 	.word	0x00403d55
  404008:	00407c30 	.word	0x00407c30
  40400c:	00401715 	.word	0x00401715
  404010:	4000c200 	.word	0x4000c200
  404014:	00407c38 	.word	0x00407c38
  404018:	004005ad 	.word	0x004005ad
  40401c:	004005c5 	.word	0x004005c5
  404020:	004009ed 	.word	0x004009ed
  404024:	00400a2d 	.word	0x00400a2d

00404028 <vFNBtton_Click_Hook>:
}

void vFNBtton_Click_Hook( void )
{
  404028:	b570      	push	{r4, r5, r6, lr}
  40402a:	b084      	sub	sp, #16
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
  40402c:	2500      	movs	r5, #0
  40402e:	ac04      	add	r4, sp, #16
  404030:	f844 5d04 	str.w	r5, [r4, #-4]!
	
	xTimerStartFromISR(xConfigTimer, &xHigherPriorityTaskWoken );
  404034:	4b08      	ldr	r3, [pc, #32]	; (404058 <vFNBtton_Click_Hook+0x30>)
  404036:	681e      	ldr	r6, [r3, #0]
  404038:	4b08      	ldr	r3, [pc, #32]	; (40405c <vFNBtton_Click_Hook+0x34>)
  40403a:	4798      	blx	r3
  40403c:	4602      	mov	r2, r0
  40403e:	9500      	str	r5, [sp, #0]
  404040:	4630      	mov	r0, r6
  404042:	4629      	mov	r1, r5
  404044:	4623      	mov	r3, r4
  404046:	4c06      	ldr	r4, [pc, #24]	; (404060 <vFNBtton_Click_Hook+0x38>)
  404048:	47a0      	blx	r4
	if(xHigherPriorityTaskWoken != pdFALSE) {
  40404a:	9b03      	ldr	r3, [sp, #12]
  40404c:	b10b      	cbz	r3, 404052 <vFNBtton_Click_Hook+0x2a>
		IoT_vPortYieldFromISR();
  40404e:	4b05      	ldr	r3, [pc, #20]	; (404064 <vFNBtton_Click_Hook+0x3c>)
  404050:	4798      	blx	r3
	}
	
  404052:	b004      	add	sp, #16
  404054:	bd70      	pop	{r4, r5, r6, pc}
  404056:	bf00      	nop
  404058:	2001b3dc 	.word	0x2001b3dc
  40405c:	004019c5 	.word	0x004019c5
  404060:	0040227d 	.word	0x0040227d
  404064:	00400e95 	.word	0x00400e95

00404068 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  404068:	b5f0      	push	{r4, r5, r6, r7, lr}
  40406a:	b083      	sub	sp, #12
  40406c:	4604      	mov	r4, r0
  40406e:	460e      	mov	r6, r1
	uint32_t val = 0;
  404070:	2300      	movs	r3, #0
  404072:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404074:	4b34      	ldr	r3, [pc, #208]	; (404148 <usart_serial_getchar+0xe0>)
  404076:	4298      	cmp	r0, r3
  404078:	d109      	bne.n	40408e <usart_serial_getchar+0x26>
		while (usart_read(p_usart, &val));
  40407a:	461f      	mov	r7, r3
  40407c:	4d33      	ldr	r5, [pc, #204]	; (40414c <usart_serial_getchar+0xe4>)
  40407e:	4638      	mov	r0, r7
  404080:	a901      	add	r1, sp, #4
  404082:	47a8      	blx	r5
  404084:	2800      	cmp	r0, #0
  404086:	d1fa      	bne.n	40407e <usart_serial_getchar+0x16>
		*data = (uint8_t)(val & 0xFF);
  404088:	9b01      	ldr	r3, [sp, #4]
  40408a:	7033      	strb	r3, [r6, #0]
  40408c:	e019      	b.n	4040c2 <usart_serial_getchar+0x5a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40408e:	4b30      	ldr	r3, [pc, #192]	; (404150 <usart_serial_getchar+0xe8>)
  404090:	4298      	cmp	r0, r3
  404092:	d109      	bne.n	4040a8 <usart_serial_getchar+0x40>
		while (usart_read(p_usart, &val));
  404094:	461f      	mov	r7, r3
  404096:	4d2d      	ldr	r5, [pc, #180]	; (40414c <usart_serial_getchar+0xe4>)
  404098:	4638      	mov	r0, r7
  40409a:	a901      	add	r1, sp, #4
  40409c:	47a8      	blx	r5
  40409e:	2800      	cmp	r0, #0
  4040a0:	d1fa      	bne.n	404098 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
  4040a2:	9b01      	ldr	r3, [sp, #4]
  4040a4:	7033      	strb	r3, [r6, #0]
  4040a6:	e019      	b.n	4040dc <usart_serial_getchar+0x74>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4040a8:	4b2a      	ldr	r3, [pc, #168]	; (404154 <usart_serial_getchar+0xec>)
  4040aa:	4298      	cmp	r0, r3
  4040ac:	d109      	bne.n	4040c2 <usart_serial_getchar+0x5a>
		while (usart_read(p_usart, &val));
  4040ae:	461f      	mov	r7, r3
  4040b0:	4d26      	ldr	r5, [pc, #152]	; (40414c <usart_serial_getchar+0xe4>)
  4040b2:	4638      	mov	r0, r7
  4040b4:	a901      	add	r1, sp, #4
  4040b6:	47a8      	blx	r5
  4040b8:	2800      	cmp	r0, #0
  4040ba:	d1fa      	bne.n	4040b2 <usart_serial_getchar+0x4a>
		*data = (uint8_t)(val & 0xFF);
  4040bc:	9b01      	ldr	r3, [sp, #4]
  4040be:	7033      	strb	r3, [r6, #0]
  4040c0:	e019      	b.n	4040f6 <usart_serial_getchar+0x8e>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  4040c2:	4b25      	ldr	r3, [pc, #148]	; (404158 <usart_serial_getchar+0xf0>)
  4040c4:	429c      	cmp	r4, r3
  4040c6:	d109      	bne.n	4040dc <usart_serial_getchar+0x74>
		while (usart_read(p_usart, &val));
  4040c8:	461f      	mov	r7, r3
  4040ca:	4d20      	ldr	r5, [pc, #128]	; (40414c <usart_serial_getchar+0xe4>)
  4040cc:	4638      	mov	r0, r7
  4040ce:	a901      	add	r1, sp, #4
  4040d0:	47a8      	blx	r5
  4040d2:	2800      	cmp	r0, #0
  4040d4:	d1fa      	bne.n	4040cc <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
  4040d6:	9b01      	ldr	r3, [sp, #4]
  4040d8:	7033      	strb	r3, [r6, #0]
  4040da:	e019      	b.n	404110 <usart_serial_getchar+0xa8>
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  4040dc:	4b1f      	ldr	r3, [pc, #124]	; (40415c <usart_serial_getchar+0xf4>)
  4040de:	429c      	cmp	r4, r3
  4040e0:	d109      	bne.n	4040f6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
  4040e2:	461f      	mov	r7, r3
  4040e4:	4d19      	ldr	r5, [pc, #100]	; (40414c <usart_serial_getchar+0xe4>)
  4040e6:	4638      	mov	r0, r7
  4040e8:	a901      	add	r1, sp, #4
  4040ea:	47a8      	blx	r5
  4040ec:	2800      	cmp	r0, #0
  4040ee:	d1fa      	bne.n	4040e6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4040f0:	9b01      	ldr	r3, [sp, #4]
  4040f2:	7033      	strb	r3, [r6, #0]
  4040f4:	e019      	b.n	40412a <usart_serial_getchar+0xc2>
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  4040f6:	4b1a      	ldr	r3, [pc, #104]	; (404160 <usart_serial_getchar+0xf8>)
  4040f8:	429c      	cmp	r4, r3
  4040fa:	d109      	bne.n	404110 <usart_serial_getchar+0xa8>
		while (usart_read(p_usart, &val));
  4040fc:	461d      	mov	r5, r3
  4040fe:	4c13      	ldr	r4, [pc, #76]	; (40414c <usart_serial_getchar+0xe4>)
  404100:	4628      	mov	r0, r5
  404102:	a901      	add	r1, sp, #4
  404104:	47a0      	blx	r4
  404106:	2800      	cmp	r0, #0
  404108:	d1fa      	bne.n	404100 <usart_serial_getchar+0x98>
		*data = (uint8_t)(val & 0xFF);
  40410a:	9b01      	ldr	r3, [sp, #4]
  40410c:	7033      	strb	r3, [r6, #0]
  40410e:	e018      	b.n	404142 <usart_serial_getchar+0xda>
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  404110:	4b14      	ldr	r3, [pc, #80]	; (404164 <usart_serial_getchar+0xfc>)
  404112:	429c      	cmp	r4, r3
  404114:	d109      	bne.n	40412a <usart_serial_getchar+0xc2>
		while (usart_read(p_usart, &val));
  404116:	461d      	mov	r5, r3
  404118:	4c0c      	ldr	r4, [pc, #48]	; (40414c <usart_serial_getchar+0xe4>)
  40411a:	4628      	mov	r0, r5
  40411c:	a901      	add	r1, sp, #4
  40411e:	47a0      	blx	r4
  404120:	2800      	cmp	r0, #0
  404122:	d1fa      	bne.n	40411a <usart_serial_getchar+0xb2>
		*data = (uint8_t)(val & 0xFF);
  404124:	9b01      	ldr	r3, [sp, #4]
  404126:	7033      	strb	r3, [r6, #0]
  404128:	e00b      	b.n	404142 <usart_serial_getchar+0xda>
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  40412a:	4b0f      	ldr	r3, [pc, #60]	; (404168 <usart_serial_getchar+0x100>)
  40412c:	429c      	cmp	r4, r3
  40412e:	d108      	bne.n	404142 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  404130:	461d      	mov	r5, r3
  404132:	4c06      	ldr	r4, [pc, #24]	; (40414c <usart_serial_getchar+0xe4>)
  404134:	4628      	mov	r0, r5
  404136:	a901      	add	r1, sp, #4
  404138:	47a0      	blx	r4
  40413a:	2800      	cmp	r0, #0
  40413c:	d1fa      	bne.n	404134 <usart_serial_getchar+0xcc>
		*data = (uint8_t)(val & 0xFF);
  40413e:	9b01      	ldr	r3, [sp, #4]
  404140:	7033      	strb	r3, [r6, #0]
	}
# endif
#endif /* ifdef USART */

}
  404142:	b003      	add	sp, #12
  404144:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404146:	bf00      	nop
  404148:	4000c200 	.word	0x4000c200
  40414c:	00400a15 	.word	0x00400a15
  404150:	40020200 	.word	0x40020200
  404154:	40024200 	.word	0x40024200
  404158:	40018200 	.word	0x40018200
  40415c:	4001c200 	.word	0x4001c200
  404160:	40008200 	.word	0x40008200
  404164:	40040200 	.word	0x40040200
  404168:	40034200 	.word	0x40034200

0040416c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40416c:	b570      	push	{r4, r5, r6, lr}
  40416e:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404170:	4b30      	ldr	r3, [pc, #192]	; (404234 <usart_serial_putchar+0xc8>)
  404172:	4298      	cmp	r0, r3
  404174:	d108      	bne.n	404188 <usart_serial_putchar+0x1c>
		while (usart_write(p_usart, c)!=0);
  404176:	461e      	mov	r6, r3
  404178:	4d2f      	ldr	r5, [pc, #188]	; (404238 <usart_serial_putchar+0xcc>)
  40417a:	4630      	mov	r0, r6
  40417c:	4621      	mov	r1, r4
  40417e:	47a8      	blx	r5
  404180:	2800      	cmp	r0, #0
  404182:	d1fa      	bne.n	40417a <usart_serial_putchar+0xe>
		return 1;
  404184:	2001      	movs	r0, #1
  404186:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  404188:	4b2c      	ldr	r3, [pc, #176]	; (40423c <usart_serial_putchar+0xd0>)
  40418a:	4298      	cmp	r0, r3
  40418c:	d108      	bne.n	4041a0 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
  40418e:	461e      	mov	r6, r3
  404190:	4d29      	ldr	r5, [pc, #164]	; (404238 <usart_serial_putchar+0xcc>)
  404192:	4630      	mov	r0, r6
  404194:	4621      	mov	r1, r4
  404196:	47a8      	blx	r5
  404198:	2800      	cmp	r0, #0
  40419a:	d1fa      	bne.n	404192 <usart_serial_putchar+0x26>
		return 1;
  40419c:	2001      	movs	r0, #1
  40419e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4041a0:	4b27      	ldr	r3, [pc, #156]	; (404240 <usart_serial_putchar+0xd4>)
  4041a2:	4298      	cmp	r0, r3
  4041a4:	d108      	bne.n	4041b8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4041a6:	461e      	mov	r6, r3
  4041a8:	4d23      	ldr	r5, [pc, #140]	; (404238 <usart_serial_putchar+0xcc>)
  4041aa:	4630      	mov	r0, r6
  4041ac:	4621      	mov	r1, r4
  4041ae:	47a8      	blx	r5
  4041b0:	2800      	cmp	r0, #0
  4041b2:	d1fa      	bne.n	4041aa <usart_serial_putchar+0x3e>
		return 1;
  4041b4:	2001      	movs	r0, #1
  4041b6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  4041b8:	4b22      	ldr	r3, [pc, #136]	; (404244 <usart_serial_putchar+0xd8>)
  4041ba:	4298      	cmp	r0, r3
  4041bc:	d108      	bne.n	4041d0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4041be:	461e      	mov	r6, r3
  4041c0:	4d1d      	ldr	r5, [pc, #116]	; (404238 <usart_serial_putchar+0xcc>)
  4041c2:	4630      	mov	r0, r6
  4041c4:	4621      	mov	r1, r4
  4041c6:	47a8      	blx	r5
  4041c8:	2800      	cmp	r0, #0
  4041ca:	d1fa      	bne.n	4041c2 <usart_serial_putchar+0x56>
		return 1;
  4041cc:	2001      	movs	r0, #1
  4041ce:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  4041d0:	4b1d      	ldr	r3, [pc, #116]	; (404248 <usart_serial_putchar+0xdc>)
  4041d2:	4298      	cmp	r0, r3
  4041d4:	d108      	bne.n	4041e8 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  4041d6:	461e      	mov	r6, r3
  4041d8:	4d17      	ldr	r5, [pc, #92]	; (404238 <usart_serial_putchar+0xcc>)
  4041da:	4630      	mov	r0, r6
  4041dc:	4621      	mov	r1, r4
  4041de:	47a8      	blx	r5
  4041e0:	2800      	cmp	r0, #0
  4041e2:	d1fa      	bne.n	4041da <usart_serial_putchar+0x6e>
		return 1;
  4041e4:	2001      	movs	r0, #1
  4041e6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  4041e8:	4b18      	ldr	r3, [pc, #96]	; (40424c <usart_serial_putchar+0xe0>)
  4041ea:	4298      	cmp	r0, r3
  4041ec:	d108      	bne.n	404200 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  4041ee:	461e      	mov	r6, r3
  4041f0:	4d11      	ldr	r5, [pc, #68]	; (404238 <usart_serial_putchar+0xcc>)
  4041f2:	4630      	mov	r0, r6
  4041f4:	4621      	mov	r1, r4
  4041f6:	47a8      	blx	r5
  4041f8:	2800      	cmp	r0, #0
  4041fa:	d1fa      	bne.n	4041f2 <usart_serial_putchar+0x86>
		return 1;
  4041fc:	2001      	movs	r0, #1
  4041fe:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  404200:	4b13      	ldr	r3, [pc, #76]	; (404250 <usart_serial_putchar+0xe4>)
  404202:	4298      	cmp	r0, r3
  404204:	d108      	bne.n	404218 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  404206:	461e      	mov	r6, r3
  404208:	4d0b      	ldr	r5, [pc, #44]	; (404238 <usart_serial_putchar+0xcc>)
  40420a:	4630      	mov	r0, r6
  40420c:	4621      	mov	r1, r4
  40420e:	47a8      	blx	r5
  404210:	2800      	cmp	r0, #0
  404212:	d1fa      	bne.n	40420a <usart_serial_putchar+0x9e>
		return 1;
  404214:	2001      	movs	r0, #1
  404216:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  404218:	4b0e      	ldr	r3, [pc, #56]	; (404254 <usart_serial_putchar+0xe8>)
  40421a:	4298      	cmp	r0, r3
  40421c:	d108      	bne.n	404230 <usart_serial_putchar+0xc4>
		while (usart_write(p_usart, c)!=0);
  40421e:	461e      	mov	r6, r3
  404220:	4d05      	ldr	r5, [pc, #20]	; (404238 <usart_serial_putchar+0xcc>)
  404222:	4630      	mov	r0, r6
  404224:	4621      	mov	r1, r4
  404226:	47a8      	blx	r5
  404228:	2800      	cmp	r0, #0
  40422a:	d1fa      	bne.n	404222 <usart_serial_putchar+0xb6>
		return 1;
  40422c:	2001      	movs	r0, #1
  40422e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
#endif /* ifdef USART */

	return 0;
  404230:	2000      	movs	r0, #0
}
  404232:	bd70      	pop	{r4, r5, r6, pc}
  404234:	4000c200 	.word	0x4000c200
  404238:	00400a01 	.word	0x00400a01
  40423c:	40020200 	.word	0x40020200
  404240:	40024200 	.word	0x40024200
  404244:	40018200 	.word	0x40018200
  404248:	4001c200 	.word	0x4001c200
  40424c:	40008200 	.word	0x40008200
  404250:	40040200 	.word	0x40040200
  404254:	40034200 	.word	0x40034200

00404258 <main>:
	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART_CONSOLE, &uart_serial_options);
}

int main(void){
  404258:	b580      	push	{r7, lr}
  40425a:	b08a      	sub	sp, #40	; 0x28
/*-----------------------------------------------------------*/

static void prvSetupHardware(void)
{
	/* ASF function to setup clocking. */
	sysclk_init();
  40425c:	4b34      	ldr	r3, [pc, #208]	; (404330 <main+0xd8>)
  40425e:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  404260:	4a34      	ldr	r2, [pc, #208]	; (404334 <main+0xdc>)
  404262:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  404264:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  404268:	041b      	lsls	r3, r3, #16
  40426a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                 |
  40426c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  404270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  404274:	60d3      	str	r3, [r2, #12]
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();	
  404276:	4b30      	ldr	r3, [pc, #192]	; (404338 <main+0xe0>)
  404278:	4798      	blx	r3
  40427a:	2014      	movs	r0, #20
  40427c:	4b2f      	ldr	r3, [pc, #188]	; (40433c <main+0xe4>)
  40427e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404280:	4d2f      	ldr	r5, [pc, #188]	; (404340 <main+0xe8>)
  404282:	4b30      	ldr	r3, [pc, #192]	; (404344 <main+0xec>)
  404284:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404286:	4a30      	ldr	r2, [pc, #192]	; (404348 <main+0xf0>)
  404288:	4b30      	ldr	r3, [pc, #192]	; (40434c <main+0xf4>)
  40428a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40428c:	4a30      	ldr	r2, [pc, #192]	; (404350 <main+0xf8>)
  40428e:	4b31      	ldr	r3, [pc, #196]	; (404354 <main+0xfc>)
  404290:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  404292:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  404296:	9704      	str	r7, [sp, #16]
	usart_settings.char_length = opt->charlength;
  404298:	23c0      	movs	r3, #192	; 0xc0
  40429a:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  40429c:	f44f 6600 	mov.w	r6, #2048	; 0x800
  4042a0:	9606      	str	r6, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4042a2:	2400      	movs	r4, #0
  4042a4:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4042a6:	9408      	str	r4, [sp, #32]
# endif
# ifdef USART4
	if (USART4 == p_usart) {
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM4);
  4042a8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 4043a0 <main+0x148>
  4042ac:	4640      	mov	r0, r8
  4042ae:	4b2a      	ldr	r3, [pc, #168]	; (404358 <main+0x100>)
  4042b0:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM4, FLEXCOM_USART);
  4042b2:	4640      	mov	r0, r8
  4042b4:	2101      	movs	r1, #1
  4042b6:	4b29      	ldr	r3, [pc, #164]	; (40435c <main+0x104>)
  4042b8:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART4);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4042ba:	4628      	mov	r0, r5
  4042bc:	a904      	add	r1, sp, #16
  4042be:	4a28      	ldr	r2, [pc, #160]	; (404360 <main+0x108>)
  4042c0:	4b28      	ldr	r3, [pc, #160]	; (404364 <main+0x10c>)
  4042c2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4042c4:	4628      	mov	r0, r5
  4042c6:	4b28      	ldr	r3, [pc, #160]	; (404368 <main+0x110>)
  4042c8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4042ca:	4628      	mov	r0, r5
  4042cc:	4b27      	ldr	r3, [pc, #156]	; (40436c <main+0x114>)
  4042ce:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4042d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 4043a4 <main+0x14c>
  4042d4:	f8d8 3000 	ldr.w	r3, [r8]
  4042d8:	6898      	ldr	r0, [r3, #8]
  4042da:	4621      	mov	r1, r4
  4042dc:	4d24      	ldr	r5, [pc, #144]	; (404370 <main+0x118>)
  4042de:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4042e0:	f8d8 3000 	ldr.w	r3, [r8]
  4042e4:	6858      	ldr	r0, [r3, #4]
  4042e6:	4621      	mov	r1, r4
  4042e8:	47a8      	blx	r5
	/* Prepare the console*/
	configure_console();
	
	tSensor_serial_init();
  4042ea:	4b22      	ldr	r3, [pc, #136]	; (404374 <main+0x11c>)
  4042ec:	4798      	blx	r3
	wifi_serial_init(BIT_RATE_115200);
  4042ee:	4638      	mov	r0, r7
  4042f0:	4b21      	ldr	r3, [pc, #132]	; (404378 <main+0x120>)
  4042f2:	4798      	blx	r3
	
	puts(STRING_HEADER);
  4042f4:	4821      	ldr	r0, [pc, #132]	; (40437c <main+0x124>)
  4042f6:	4b22      	ldr	r3, [pc, #136]	; (404380 <main+0x128>)
  4042f8:	4798      	blx	r3
	/* Prepare the hardware to run this demo. */
	prvSetupHardware();
	
#ifdef __IoT_DEBUG__
	//void create_dbg_sem();
	create_dbg_sem();
  4042fa:	4b22      	ldr	r3, [pc, #136]	; (404384 <main+0x12c>)
  4042fc:	4798      	blx	r3
#endif

	if(xTaskCreate(wifi_task, "wifi_task", WIFI_SERIAL_TASK_STACK_SIZE, NULL, WIFI_SERIAL_TASK_PRIORITY, NULL) != pdPASS)
  4042fe:	2304      	movs	r3, #4
  404300:	9300      	str	r3, [sp, #0]
  404302:	9401      	str	r4, [sp, #4]
  404304:	9402      	str	r4, [sp, #8]
  404306:	9403      	str	r4, [sp, #12]
  404308:	481f      	ldr	r0, [pc, #124]	; (404388 <main+0x130>)
  40430a:	4920      	ldr	r1, [pc, #128]	; (40438c <main+0x134>)
  40430c:	4632      	mov	r2, r6
  40430e:	4623      	mov	r3, r4
  404310:	4d1f      	ldr	r5, [pc, #124]	; (404390 <main+0x138>)
  404312:	47a8      	blx	r5
	{
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_WARNING, ("wifi task create failed\r\n"));
	}
	
	//task for processing temperature module data
	if (xTaskCreate(sensor_task, "sensor_task", TSENSOR_TASK_STACK_SIZE, NULL, TSENSOR_TASK_PRIORITY, NULL)!=pdPASS){
  404314:	2301      	movs	r3, #1
  404316:	9300      	str	r3, [sp, #0]
  404318:	9401      	str	r4, [sp, #4]
  40431a:	9402      	str	r4, [sp, #8]
  40431c:	9403      	str	r4, [sp, #12]
  40431e:	481d      	ldr	r0, [pc, #116]	; (404394 <main+0x13c>)
  404320:	491d      	ldr	r1, [pc, #116]	; (404398 <main+0x140>)
  404322:	4632      	mov	r2, r6
  404324:	4623      	mov	r3, r4
  404326:	47a8      	blx	r5
		IoT_DEBUG(GENERIC_DBG | IoT_DBG_WARNING, ("sensor task create failed\r\n"));
	}
	
	/* Start the RTOS scheduler. */
	vTaskStartScheduler();
  404328:	4b1c      	ldr	r3, [pc, #112]	; (40439c <main+0x144>)
  40432a:	4798      	blx	r3
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for (;;) {
	}
  40432c:	e7fe      	b.n	40432c <main+0xd4>
  40432e:	bf00      	nop
  404330:	004001a5 	.word	0x004001a5
  404334:	e000ed00 	.word	0xe000ed00
  404338:	004002b1 	.word	0x004002b1
  40433c:	00400841 	.word	0x00400841
  404340:	4001c200 	.word	0x4001c200
  404344:	2001bc60 	.word	0x2001bc60
  404348:	0040416d 	.word	0x0040416d
  40434c:	2001bc5c 	.word	0x2001bc5c
  404350:	00404069 	.word	0x00404069
  404354:	2001bc58 	.word	0x2001bc58
  404358:	00400439 	.word	0x00400439
  40435c:	004005a9 	.word	0x004005a9
  404360:	07270000 	.word	0x07270000
  404364:	00400985 	.word	0x00400985
  404368:	004009d9 	.word	0x004009d9
  40436c:	004009e1 	.word	0x004009e1
  404370:	00404791 	.word	0x00404791
  404374:	0040250d 	.word	0x0040250d
  404378:	00402925 	.word	0x00402925
  40437c:	00407c4c 	.word	0x00407c4c
  404380:	00404781 	.word	0x00404781
  404384:	004043e9 	.word	0x004043e9
  404388:	00403d91 	.word	0x00403d91
  40438c:	00407ca4 	.word	0x00407ca4
  404390:	00401715 	.word	0x00401715
  404394:	00402785 	.word	0x00402785
  404398:	00407cb0 	.word	0x00407cb0
  40439c:	00401919 	.word	0x00401919
  4043a0:	4001c000 	.word	0x4001c000
  4043a4:	20000458 	.word	0x20000458

004043a8 <vApplicationMallocFailedHook>:
}

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook(void)
{
  4043a8:	b508      	push	{r3, lr}
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("vApplicationMallocFailedHook\r\n"));
	taskDISABLE_INTERRUPTS();
  4043aa:	4b01      	ldr	r3, [pc, #4]	; (4043b0 <vApplicationMallocFailedHook+0x8>)
  4043ac:	4798      	blx	r3
	for (;;) {
	}
  4043ae:	e7fe      	b.n	4043ae <vApplicationMallocFailedHook+0x6>
  4043b0:	00400ea5 	.word	0x00400ea5

004043b4 <vApplicationStackOverflowHook>:

/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook(xTaskHandle pxTask,
		signed char *pcTaskName)
{
  4043b4:	b508      	push	{r3, lr}

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	IoT_DEBUG(GENERIC_DBG | IoT_DBG_INFO, ("vApplicationStackOverflowHook\r\n"));
	taskDISABLE_INTERRUPTS();
  4043b6:	4b01      	ldr	r3, [pc, #4]	; (4043bc <vApplicationStackOverflowHook+0x8>)
  4043b8:	4798      	blx	r3
	for (;;) {
	}
  4043ba:	e7fe      	b.n	4043ba <vApplicationStackOverflowHook+0x6>
  4043bc:	00400ea5 	.word	0x00400ea5

004043c0 <assert_triggered>:
}

/*-----------------------------------------------------------*/

void assert_triggered(const char *file, uint32_t line)
{
  4043c0:	b500      	push	{lr}
  4043c2:	b083      	sub	sp, #12
	volatile uint32_t block_var = 0, line_in;
  4043c4:	2300      	movs	r3, #0
  4043c6:	9301      	str	r3, [sp, #4]
	const char *file_in;

	/* These assignments are made to prevent the compiler optimizing the
	values away. */
	file_in = file;
	line_in = line;
  4043c8:	9100      	str	r1, [sp, #0]
	(void) file_in;
	(void) line_in;
  4043ca:	9b00      	ldr	r3, [sp, #0]

	taskENTER_CRITICAL();
  4043cc:	4b04      	ldr	r3, [pc, #16]	; (4043e0 <assert_triggered+0x20>)
  4043ce:	4798      	blx	r3
	{
		while (block_var == 0) {
  4043d0:	9b01      	ldr	r3, [sp, #4]
  4043d2:	2b00      	cmp	r3, #0
  4043d4:	d0fc      	beq.n	4043d0 <assert_triggered+0x10>
			/* Set block_var to a non-zero value in the debugger to
			step out of this function. */
		}
	}
	taskEXIT_CRITICAL();
  4043d6:	4b03      	ldr	r3, [pc, #12]	; (4043e4 <assert_triggered+0x24>)
  4043d8:	4798      	blx	r3
}
  4043da:	b003      	add	sp, #12
  4043dc:	f85d fb04 	ldr.w	pc, [sp], #4
  4043e0:	00400eb5 	.word	0x00400eb5
  4043e4:	00400ed5 	.word	0x00400ed5

004043e8 <create_dbg_sem>:

xSemaphoreHandle xsem_dbg = NULL;


void create_dbg_sem(void)
{
  4043e8:	b510      	push	{r4, lr}
	IoT_vSemaphoreCreateBinary(xsem_dbg);
  4043ea:	2001      	movs	r0, #1
  4043ec:	2100      	movs	r1, #0
  4043ee:	2203      	movs	r2, #3
  4043f0:	4b05      	ldr	r3, [pc, #20]	; (404408 <create_dbg_sem+0x20>)
  4043f2:	4798      	blx	r3
  4043f4:	4b05      	ldr	r3, [pc, #20]	; (40440c <create_dbg_sem+0x24>)
  4043f6:	6018      	str	r0, [r3, #0]
  4043f8:	b120      	cbz	r0, 404404 <create_dbg_sem+0x1c>
  4043fa:	2100      	movs	r1, #0
  4043fc:	460a      	mov	r2, r1
  4043fe:	460b      	mov	r3, r1
  404400:	4c03      	ldr	r4, [pc, #12]	; (404410 <create_dbg_sem+0x28>)
  404402:	47a0      	blx	r4
  404404:	bd10      	pop	{r4, pc}
  404406:	bf00      	nop
  404408:	004012e1 	.word	0x004012e1
  40440c:	2001bc14 	.word	0x2001bc14
  404410:	00401341 	.word	0x00401341

00404414 <configure_timer_for_run_time_stats>:
/*-----------------------------------------------------------*/

void configure_timer_for_run_time_stats(void)
{
	/* How many clocks are there per tenth of a millisecond? */
	clocks_per_10th_ms = configCPU_CLOCK_HZ / 10000UL;
  404414:	f642 62df 	movw	r2, #11999	; 0x2edf
  404418:	4b01      	ldr	r3, [pc, #4]	; (404420 <configure_timer_for_run_time_stats+0xc>)
  40441a:	601a      	str	r2, [r3, #0]
  40441c:	4770      	bx	lr
  40441e:	bf00      	nop
  404420:	2001bc18 	.word	0x2001bc18

00404424 <get_run_time_counter_value>:
}

/*-----------------------------------------------------------*/

uint32_t get_run_time_counter_value(void)
{
  404424:	b538      	push	{r3, r4, r5, lr}
	used anyway to keep the examples simple, and to avoid reliance on a
	separate timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it
	was last reloaded? */
	sys_tick_counts = sys_tick_reload_value - *current_sys_tick_count;
  404426:	4b0f      	ldr	r3, [pc, #60]	; (404464 <get_run_time_counter_value+0x40>)
  404428:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	tick_count = xTaskGetTickCountFromISR();
  40442a:	4b0f      	ldr	r3, [pc, #60]	; (404468 <get_run_time_counter_value+0x44>)
  40442c:	4798      	blx	r3
  40442e:	4605      	mov	r5, r0

	/* This is called from the context switch, so will be called from a
	critical section.  xTaskGetTickCountFromISR() contains its own critical
	section, and the ISR safe critical sections are not designed to nest,
	so reset the critical section. */
	ulReturn = portSET_INTERRUPT_MASK_FROM_ISR();
  404430:	4b0e      	ldr	r3, [pc, #56]	; (40446c <get_run_time_counter_value+0x48>)
  404432:	4798      	blx	r3
	(void) ulReturn;

	/* Is there a SysTick interrupt pending? */
	if ((*interrupt_ctrl_statee & sys_tick_pending_bit) != 0UL) {
  404434:	4b0e      	ldr	r3, [pc, #56]	; (404470 <get_run_time_counter_value+0x4c>)
  404436:	681b      	ldr	r3, [r3, #0]
  404438:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  40443c:	d103      	bne.n	404446 <get_run_time_counter_value+0x22>
	used anyway to keep the examples simple, and to avoid reliance on a
	separate timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it
	was last reloaded? */
	sys_tick_counts = sys_tick_reload_value - *current_sys_tick_count;
  40443e:	f5c4 33ea 	rsb	r3, r4, #119808	; 0x1d400
  404442:	33bb      	adds	r3, #187	; 0xbb
  404444:	e005      	b.n	404452 <get_run_time_counter_value+0x2e>

	/* Is there a SysTick interrupt pending? */
	if ((*interrupt_ctrl_statee & sys_tick_pending_bit) != 0UL) {
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		tick_count++;
  404446:	3501      	adds	r5, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		sys_tick_counts = sys_tick_reload_value -
				*current_sys_tick_count;
  404448:	4b06      	ldr	r3, [pc, #24]	; (404464 <get_run_time_counter_value+0x40>)
  40444a:	681b      	ldr	r3, [r3, #0]
		but the tick count not yet incremented. */
		tick_count++;

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		sys_tick_counts = sys_tick_reload_value -
  40444c:	f5c3 33ea 	rsb	r3, r3, #119808	; 0x1d400
  404450:	33bb      	adds	r3, #187	; 0xbb
				*current_sys_tick_count;
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = (tick_count * 10UL);
  404452:	eb05 0585 	add.w	r5, r5, r5, lsl #2

	/* Add on the number of tenths of a millisecond that have passed since
	the tick count last got updated. */
	ulReturn += (sys_tick_counts / clocks_per_10th_ms);
  404456:	4a07      	ldr	r2, [pc, #28]	; (404474 <get_run_time_counter_value+0x50>)
  404458:	6810      	ldr	r0, [r2, #0]
  40445a:	fbb3 f0f0 	udiv	r0, r3, r0

	return ulReturn;
}
  40445e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  404462:	bd38      	pop	{r3, r4, r5, pc}
  404464:	e000e018 	.word	0xe000e018
  404468:	004019c5 	.word	0x004019c5
  40446c:	00400ea5 	.word	0x00400ea5
  404470:	e000ed04 	.word	0xe000ed04
  404474:	2001bc18 	.word	0x2001bc18

00404478 <__libc_init_array>:
  404478:	b570      	push	{r4, r5, r6, lr}
  40447a:	4e0f      	ldr	r6, [pc, #60]	; (4044b8 <__libc_init_array+0x40>)
  40447c:	4d0f      	ldr	r5, [pc, #60]	; (4044bc <__libc_init_array+0x44>)
  40447e:	1b76      	subs	r6, r6, r5
  404480:	10b6      	asrs	r6, r6, #2
  404482:	bf18      	it	ne
  404484:	2400      	movne	r4, #0
  404486:	d005      	beq.n	404494 <__libc_init_array+0x1c>
  404488:	3401      	adds	r4, #1
  40448a:	f855 3b04 	ldr.w	r3, [r5], #4
  40448e:	4798      	blx	r3
  404490:	42a6      	cmp	r6, r4
  404492:	d1f9      	bne.n	404488 <__libc_init_array+0x10>
  404494:	4e0a      	ldr	r6, [pc, #40]	; (4044c0 <__libc_init_array+0x48>)
  404496:	4d0b      	ldr	r5, [pc, #44]	; (4044c4 <__libc_init_array+0x4c>)
  404498:	1b76      	subs	r6, r6, r5
  40449a:	f003 fc31 	bl	407d00 <_init>
  40449e:	10b6      	asrs	r6, r6, #2
  4044a0:	bf18      	it	ne
  4044a2:	2400      	movne	r4, #0
  4044a4:	d006      	beq.n	4044b4 <__libc_init_array+0x3c>
  4044a6:	3401      	adds	r4, #1
  4044a8:	f855 3b04 	ldr.w	r3, [r5], #4
  4044ac:	4798      	blx	r3
  4044ae:	42a6      	cmp	r6, r4
  4044b0:	d1f9      	bne.n	4044a6 <__libc_init_array+0x2e>
  4044b2:	bd70      	pop	{r4, r5, r6, pc}
  4044b4:	bd70      	pop	{r4, r5, r6, pc}
  4044b6:	bf00      	nop
  4044b8:	00407d0c 	.word	0x00407d0c
  4044bc:	00407d0c 	.word	0x00407d0c
  4044c0:	00407d14 	.word	0x00407d14
  4044c4:	00407d0c 	.word	0x00407d0c

004044c8 <iprintf>:
  4044c8:	b40f      	push	{r0, r1, r2, r3}
  4044ca:	b500      	push	{lr}
  4044cc:	4907      	ldr	r1, [pc, #28]	; (4044ec <iprintf+0x24>)
  4044ce:	b083      	sub	sp, #12
  4044d0:	ab04      	add	r3, sp, #16
  4044d2:	6808      	ldr	r0, [r1, #0]
  4044d4:	f853 2b04 	ldr.w	r2, [r3], #4
  4044d8:	6881      	ldr	r1, [r0, #8]
  4044da:	9301      	str	r3, [sp, #4]
  4044dc:	f000 fa7a 	bl	4049d4 <_vfiprintf_r>
  4044e0:	b003      	add	sp, #12
  4044e2:	f85d eb04 	ldr.w	lr, [sp], #4
  4044e6:	b004      	add	sp, #16
  4044e8:	4770      	bx	lr
  4044ea:	bf00      	nop
  4044ec:	20000458 	.word	0x20000458

004044f0 <memcmp>:
  4044f0:	2a03      	cmp	r2, #3
  4044f2:	b470      	push	{r4, r5, r6}
  4044f4:	d926      	bls.n	404544 <memcmp+0x54>
  4044f6:	ea40 0301 	orr.w	r3, r0, r1
  4044fa:	079b      	lsls	r3, r3, #30
  4044fc:	d011      	beq.n	404522 <memcmp+0x32>
  4044fe:	7804      	ldrb	r4, [r0, #0]
  404500:	780d      	ldrb	r5, [r1, #0]
  404502:	42ac      	cmp	r4, r5
  404504:	d122      	bne.n	40454c <memcmp+0x5c>
  404506:	4402      	add	r2, r0
  404508:	1c43      	adds	r3, r0, #1
  40450a:	e005      	b.n	404518 <memcmp+0x28>
  40450c:	f813 4b01 	ldrb.w	r4, [r3], #1
  404510:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  404514:	42ac      	cmp	r4, r5
  404516:	d119      	bne.n	40454c <memcmp+0x5c>
  404518:	4293      	cmp	r3, r2
  40451a:	d1f7      	bne.n	40450c <memcmp+0x1c>
  40451c:	2000      	movs	r0, #0
  40451e:	bc70      	pop	{r4, r5, r6}
  404520:	4770      	bx	lr
  404522:	460c      	mov	r4, r1
  404524:	4603      	mov	r3, r0
  404526:	681e      	ldr	r6, [r3, #0]
  404528:	6825      	ldr	r5, [r4, #0]
  40452a:	42ae      	cmp	r6, r5
  40452c:	4618      	mov	r0, r3
  40452e:	4621      	mov	r1, r4
  404530:	f103 0304 	add.w	r3, r3, #4
  404534:	f104 0404 	add.w	r4, r4, #4
  404538:	d104      	bne.n	404544 <memcmp+0x54>
  40453a:	3a04      	subs	r2, #4
  40453c:	2a03      	cmp	r2, #3
  40453e:	4618      	mov	r0, r3
  404540:	4621      	mov	r1, r4
  404542:	d8f0      	bhi.n	404526 <memcmp+0x36>
  404544:	2a00      	cmp	r2, #0
  404546:	d1da      	bne.n	4044fe <memcmp+0xe>
  404548:	4610      	mov	r0, r2
  40454a:	e7e8      	b.n	40451e <memcmp+0x2e>
  40454c:	1b60      	subs	r0, r4, r5
  40454e:	bc70      	pop	{r4, r5, r6}
  404550:	4770      	bx	lr
  404552:	bf00      	nop

00404554 <memcpy>:
  404554:	4684      	mov	ip, r0
  404556:	ea41 0300 	orr.w	r3, r1, r0
  40455a:	f013 0303 	ands.w	r3, r3, #3
  40455e:	d16d      	bne.n	40463c <memcpy+0xe8>
  404560:	3a40      	subs	r2, #64	; 0x40
  404562:	d341      	bcc.n	4045e8 <memcpy+0x94>
  404564:	f851 3b04 	ldr.w	r3, [r1], #4
  404568:	f840 3b04 	str.w	r3, [r0], #4
  40456c:	f851 3b04 	ldr.w	r3, [r1], #4
  404570:	f840 3b04 	str.w	r3, [r0], #4
  404574:	f851 3b04 	ldr.w	r3, [r1], #4
  404578:	f840 3b04 	str.w	r3, [r0], #4
  40457c:	f851 3b04 	ldr.w	r3, [r1], #4
  404580:	f840 3b04 	str.w	r3, [r0], #4
  404584:	f851 3b04 	ldr.w	r3, [r1], #4
  404588:	f840 3b04 	str.w	r3, [r0], #4
  40458c:	f851 3b04 	ldr.w	r3, [r1], #4
  404590:	f840 3b04 	str.w	r3, [r0], #4
  404594:	f851 3b04 	ldr.w	r3, [r1], #4
  404598:	f840 3b04 	str.w	r3, [r0], #4
  40459c:	f851 3b04 	ldr.w	r3, [r1], #4
  4045a0:	f840 3b04 	str.w	r3, [r0], #4
  4045a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045a8:	f840 3b04 	str.w	r3, [r0], #4
  4045ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4045b0:	f840 3b04 	str.w	r3, [r0], #4
  4045b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045b8:	f840 3b04 	str.w	r3, [r0], #4
  4045bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4045c0:	f840 3b04 	str.w	r3, [r0], #4
  4045c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045c8:	f840 3b04 	str.w	r3, [r0], #4
  4045cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4045d0:	f840 3b04 	str.w	r3, [r0], #4
  4045d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045d8:	f840 3b04 	str.w	r3, [r0], #4
  4045dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4045e0:	f840 3b04 	str.w	r3, [r0], #4
  4045e4:	3a40      	subs	r2, #64	; 0x40
  4045e6:	d2bd      	bcs.n	404564 <memcpy+0x10>
  4045e8:	3230      	adds	r2, #48	; 0x30
  4045ea:	d311      	bcc.n	404610 <memcpy+0xbc>
  4045ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4045f0:	f840 3b04 	str.w	r3, [r0], #4
  4045f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045f8:	f840 3b04 	str.w	r3, [r0], #4
  4045fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404600:	f840 3b04 	str.w	r3, [r0], #4
  404604:	f851 3b04 	ldr.w	r3, [r1], #4
  404608:	f840 3b04 	str.w	r3, [r0], #4
  40460c:	3a10      	subs	r2, #16
  40460e:	d2ed      	bcs.n	4045ec <memcpy+0x98>
  404610:	320c      	adds	r2, #12
  404612:	d305      	bcc.n	404620 <memcpy+0xcc>
  404614:	f851 3b04 	ldr.w	r3, [r1], #4
  404618:	f840 3b04 	str.w	r3, [r0], #4
  40461c:	3a04      	subs	r2, #4
  40461e:	d2f9      	bcs.n	404614 <memcpy+0xc0>
  404620:	3204      	adds	r2, #4
  404622:	d008      	beq.n	404636 <memcpy+0xe2>
  404624:	07d2      	lsls	r2, r2, #31
  404626:	bf1c      	itt	ne
  404628:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40462c:	f800 3b01 	strbne.w	r3, [r0], #1
  404630:	d301      	bcc.n	404636 <memcpy+0xe2>
  404632:	880b      	ldrh	r3, [r1, #0]
  404634:	8003      	strh	r3, [r0, #0]
  404636:	4660      	mov	r0, ip
  404638:	4770      	bx	lr
  40463a:	bf00      	nop
  40463c:	2a08      	cmp	r2, #8
  40463e:	d313      	bcc.n	404668 <memcpy+0x114>
  404640:	078b      	lsls	r3, r1, #30
  404642:	d08d      	beq.n	404560 <memcpy+0xc>
  404644:	f010 0303 	ands.w	r3, r0, #3
  404648:	d08a      	beq.n	404560 <memcpy+0xc>
  40464a:	f1c3 0304 	rsb	r3, r3, #4
  40464e:	1ad2      	subs	r2, r2, r3
  404650:	07db      	lsls	r3, r3, #31
  404652:	bf1c      	itt	ne
  404654:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404658:	f800 3b01 	strbne.w	r3, [r0], #1
  40465c:	d380      	bcc.n	404560 <memcpy+0xc>
  40465e:	f831 3b02 	ldrh.w	r3, [r1], #2
  404662:	f820 3b02 	strh.w	r3, [r0], #2
  404666:	e77b      	b.n	404560 <memcpy+0xc>
  404668:	3a04      	subs	r2, #4
  40466a:	d3d9      	bcc.n	404620 <memcpy+0xcc>
  40466c:	3a01      	subs	r2, #1
  40466e:	f811 3b01 	ldrb.w	r3, [r1], #1
  404672:	f800 3b01 	strb.w	r3, [r0], #1
  404676:	d2f9      	bcs.n	40466c <memcpy+0x118>
  404678:	780b      	ldrb	r3, [r1, #0]
  40467a:	7003      	strb	r3, [r0, #0]
  40467c:	784b      	ldrb	r3, [r1, #1]
  40467e:	7043      	strb	r3, [r0, #1]
  404680:	788b      	ldrb	r3, [r1, #2]
  404682:	7083      	strb	r3, [r0, #2]
  404684:	4660      	mov	r0, ip
  404686:	4770      	bx	lr

00404688 <memset>:
  404688:	b470      	push	{r4, r5, r6}
  40468a:	0784      	lsls	r4, r0, #30
  40468c:	d046      	beq.n	40471c <memset+0x94>
  40468e:	1e54      	subs	r4, r2, #1
  404690:	2a00      	cmp	r2, #0
  404692:	d041      	beq.n	404718 <memset+0x90>
  404694:	b2cd      	uxtb	r5, r1
  404696:	4603      	mov	r3, r0
  404698:	e002      	b.n	4046a0 <memset+0x18>
  40469a:	1e62      	subs	r2, r4, #1
  40469c:	b3e4      	cbz	r4, 404718 <memset+0x90>
  40469e:	4614      	mov	r4, r2
  4046a0:	f803 5b01 	strb.w	r5, [r3], #1
  4046a4:	079a      	lsls	r2, r3, #30
  4046a6:	d1f8      	bne.n	40469a <memset+0x12>
  4046a8:	2c03      	cmp	r4, #3
  4046aa:	d92e      	bls.n	40470a <memset+0x82>
  4046ac:	b2cd      	uxtb	r5, r1
  4046ae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4046b2:	2c0f      	cmp	r4, #15
  4046b4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4046b8:	d919      	bls.n	4046ee <memset+0x66>
  4046ba:	f103 0210 	add.w	r2, r3, #16
  4046be:	4626      	mov	r6, r4
  4046c0:	3e10      	subs	r6, #16
  4046c2:	2e0f      	cmp	r6, #15
  4046c4:	f842 5c10 	str.w	r5, [r2, #-16]
  4046c8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4046cc:	f842 5c08 	str.w	r5, [r2, #-8]
  4046d0:	f842 5c04 	str.w	r5, [r2, #-4]
  4046d4:	f102 0210 	add.w	r2, r2, #16
  4046d8:	d8f2      	bhi.n	4046c0 <memset+0x38>
  4046da:	f1a4 0210 	sub.w	r2, r4, #16
  4046de:	f022 020f 	bic.w	r2, r2, #15
  4046e2:	f004 040f 	and.w	r4, r4, #15
  4046e6:	3210      	adds	r2, #16
  4046e8:	2c03      	cmp	r4, #3
  4046ea:	4413      	add	r3, r2
  4046ec:	d90d      	bls.n	40470a <memset+0x82>
  4046ee:	461e      	mov	r6, r3
  4046f0:	4622      	mov	r2, r4
  4046f2:	3a04      	subs	r2, #4
  4046f4:	2a03      	cmp	r2, #3
  4046f6:	f846 5b04 	str.w	r5, [r6], #4
  4046fa:	d8fa      	bhi.n	4046f2 <memset+0x6a>
  4046fc:	1f22      	subs	r2, r4, #4
  4046fe:	f022 0203 	bic.w	r2, r2, #3
  404702:	3204      	adds	r2, #4
  404704:	4413      	add	r3, r2
  404706:	f004 0403 	and.w	r4, r4, #3
  40470a:	b12c      	cbz	r4, 404718 <memset+0x90>
  40470c:	b2c9      	uxtb	r1, r1
  40470e:	441c      	add	r4, r3
  404710:	f803 1b01 	strb.w	r1, [r3], #1
  404714:	42a3      	cmp	r3, r4
  404716:	d1fb      	bne.n	404710 <memset+0x88>
  404718:	bc70      	pop	{r4, r5, r6}
  40471a:	4770      	bx	lr
  40471c:	4614      	mov	r4, r2
  40471e:	4603      	mov	r3, r0
  404720:	e7c2      	b.n	4046a8 <memset+0x20>
  404722:	bf00      	nop

00404724 <_puts_r>:
  404724:	b5f0      	push	{r4, r5, r6, r7, lr}
  404726:	4604      	mov	r4, r0
  404728:	b089      	sub	sp, #36	; 0x24
  40472a:	4608      	mov	r0, r1
  40472c:	460d      	mov	r5, r1
  40472e:	f000 f8b3 	bl	404898 <strlen>
  404732:	68a3      	ldr	r3, [r4, #8]
  404734:	4f11      	ldr	r7, [pc, #68]	; (40477c <_puts_r+0x58>)
  404736:	899a      	ldrh	r2, [r3, #12]
  404738:	9504      	str	r5, [sp, #16]
  40473a:	2102      	movs	r1, #2
  40473c:	f100 0e01 	add.w	lr, r0, #1
  404740:	2601      	movs	r6, #1
  404742:	ad04      	add	r5, sp, #16
  404744:	9102      	str	r1, [sp, #8]
  404746:	0491      	lsls	r1, r2, #18
  404748:	9005      	str	r0, [sp, #20]
  40474a:	f8cd e00c 	str.w	lr, [sp, #12]
  40474e:	9706      	str	r7, [sp, #24]
  404750:	9607      	str	r6, [sp, #28]
  404752:	9501      	str	r5, [sp, #4]
  404754:	d406      	bmi.n	404764 <_puts_r+0x40>
  404756:	6e59      	ldr	r1, [r3, #100]	; 0x64
  404758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40475c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404760:	819a      	strh	r2, [r3, #12]
  404762:	6659      	str	r1, [r3, #100]	; 0x64
  404764:	4620      	mov	r0, r4
  404766:	4619      	mov	r1, r3
  404768:	aa01      	add	r2, sp, #4
  40476a:	f001 fad7 	bl	405d1c <__sfvwrite_r>
  40476e:	2800      	cmp	r0, #0
  404770:	bf14      	ite	ne
  404772:	f04f 30ff 	movne.w	r0, #4294967295
  404776:	200a      	moveq	r0, #10
  404778:	b009      	add	sp, #36	; 0x24
  40477a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40477c:	00407710 	.word	0x00407710

00404780 <puts>:
  404780:	4b02      	ldr	r3, [pc, #8]	; (40478c <puts+0xc>)
  404782:	4601      	mov	r1, r0
  404784:	6818      	ldr	r0, [r3, #0]
  404786:	f7ff bfcd 	b.w	404724 <_puts_r>
  40478a:	bf00      	nop
  40478c:	20000458 	.word	0x20000458

00404790 <setbuf>:
  404790:	2900      	cmp	r1, #0
  404792:	bf0c      	ite	eq
  404794:	2202      	moveq	r2, #2
  404796:	2200      	movne	r2, #0
  404798:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40479c:	f000 b800 	b.w	4047a0 <setvbuf>

004047a0 <setvbuf>:
  4047a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4047a4:	4c3a      	ldr	r4, [pc, #232]	; (404890 <setvbuf+0xf0>)
  4047a6:	6826      	ldr	r6, [r4, #0]
  4047a8:	460d      	mov	r5, r1
  4047aa:	4604      	mov	r4, r0
  4047ac:	4690      	mov	r8, r2
  4047ae:	461f      	mov	r7, r3
  4047b0:	b116      	cbz	r6, 4047b8 <setvbuf+0x18>
  4047b2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  4047b4:	2b00      	cmp	r3, #0
  4047b6:	d03c      	beq.n	404832 <setvbuf+0x92>
  4047b8:	f1b8 0f02 	cmp.w	r8, #2
  4047bc:	d82f      	bhi.n	40481e <setvbuf+0x7e>
  4047be:	2f00      	cmp	r7, #0
  4047c0:	db2d      	blt.n	40481e <setvbuf+0x7e>
  4047c2:	4621      	mov	r1, r4
  4047c4:	4630      	mov	r0, r6
  4047c6:	f001 f865 	bl	405894 <_fflush_r>
  4047ca:	89a1      	ldrh	r1, [r4, #12]
  4047cc:	2300      	movs	r3, #0
  4047ce:	6063      	str	r3, [r4, #4]
  4047d0:	61a3      	str	r3, [r4, #24]
  4047d2:	060b      	lsls	r3, r1, #24
  4047d4:	d427      	bmi.n	404826 <setvbuf+0x86>
  4047d6:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  4047da:	b289      	uxth	r1, r1
  4047dc:	f1b8 0f02 	cmp.w	r8, #2
  4047e0:	81a1      	strh	r1, [r4, #12]
  4047e2:	d02a      	beq.n	40483a <setvbuf+0x9a>
  4047e4:	2d00      	cmp	r5, #0
  4047e6:	d036      	beq.n	404856 <setvbuf+0xb6>
  4047e8:	f1b8 0f01 	cmp.w	r8, #1
  4047ec:	d011      	beq.n	404812 <setvbuf+0x72>
  4047ee:	b289      	uxth	r1, r1
  4047f0:	f001 0008 	and.w	r0, r1, #8
  4047f4:	4b27      	ldr	r3, [pc, #156]	; (404894 <setvbuf+0xf4>)
  4047f6:	63f3      	str	r3, [r6, #60]	; 0x3c
  4047f8:	b280      	uxth	r0, r0
  4047fa:	6025      	str	r5, [r4, #0]
  4047fc:	6125      	str	r5, [r4, #16]
  4047fe:	6167      	str	r7, [r4, #20]
  404800:	b178      	cbz	r0, 404822 <setvbuf+0x82>
  404802:	f011 0f03 	tst.w	r1, #3
  404806:	bf18      	it	ne
  404808:	2700      	movne	r7, #0
  40480a:	60a7      	str	r7, [r4, #8]
  40480c:	2000      	movs	r0, #0
  40480e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404812:	f041 0101 	orr.w	r1, r1, #1
  404816:	427b      	negs	r3, r7
  404818:	81a1      	strh	r1, [r4, #12]
  40481a:	61a3      	str	r3, [r4, #24]
  40481c:	e7e7      	b.n	4047ee <setvbuf+0x4e>
  40481e:	f04f 30ff 	mov.w	r0, #4294967295
  404822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404826:	6921      	ldr	r1, [r4, #16]
  404828:	4630      	mov	r0, r6
  40482a:	f001 f99f 	bl	405b6c <_free_r>
  40482e:	89a1      	ldrh	r1, [r4, #12]
  404830:	e7d1      	b.n	4047d6 <setvbuf+0x36>
  404832:	4630      	mov	r0, r6
  404834:	f001 f8c2 	bl	4059bc <__sinit>
  404838:	e7be      	b.n	4047b8 <setvbuf+0x18>
  40483a:	2000      	movs	r0, #0
  40483c:	f104 0343 	add.w	r3, r4, #67	; 0x43
  404840:	f041 0102 	orr.w	r1, r1, #2
  404844:	2500      	movs	r5, #0
  404846:	2201      	movs	r2, #1
  404848:	81a1      	strh	r1, [r4, #12]
  40484a:	60a5      	str	r5, [r4, #8]
  40484c:	6023      	str	r3, [r4, #0]
  40484e:	6123      	str	r3, [r4, #16]
  404850:	6162      	str	r2, [r4, #20]
  404852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404856:	2f00      	cmp	r7, #0
  404858:	bf08      	it	eq
  40485a:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40485e:	4638      	mov	r0, r7
  404860:	f001 fc8c 	bl	40617c <malloc>
  404864:	4605      	mov	r5, r0
  404866:	b128      	cbz	r0, 404874 <setvbuf+0xd4>
  404868:	89a1      	ldrh	r1, [r4, #12]
  40486a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40486e:	b289      	uxth	r1, r1
  404870:	81a1      	strh	r1, [r4, #12]
  404872:	e7b9      	b.n	4047e8 <setvbuf+0x48>
  404874:	f44f 6080 	mov.w	r0, #1024	; 0x400
  404878:	f001 fc80 	bl	40617c <malloc>
  40487c:	4605      	mov	r5, r0
  40487e:	b918      	cbnz	r0, 404888 <setvbuf+0xe8>
  404880:	89a1      	ldrh	r1, [r4, #12]
  404882:	f04f 30ff 	mov.w	r0, #4294967295
  404886:	e7d9      	b.n	40483c <setvbuf+0x9c>
  404888:	f44f 6780 	mov.w	r7, #1024	; 0x400
  40488c:	e7ec      	b.n	404868 <setvbuf+0xc8>
  40488e:	bf00      	nop
  404890:	20000458 	.word	0x20000458
  404894:	004058c1 	.word	0x004058c1

00404898 <strlen>:
  404898:	f020 0103 	bic.w	r1, r0, #3
  40489c:	f010 0003 	ands.w	r0, r0, #3
  4048a0:	f1c0 0000 	rsb	r0, r0, #0
  4048a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4048a8:	f100 0c04 	add.w	ip, r0, #4
  4048ac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4048b0:	f06f 0200 	mvn.w	r2, #0
  4048b4:	bf1c      	itt	ne
  4048b6:	fa22 f20c 	lsrne.w	r2, r2, ip
  4048ba:	4313      	orrne	r3, r2
  4048bc:	f04f 0c01 	mov.w	ip, #1
  4048c0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4048c4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4048c8:	eba3 020c 	sub.w	r2, r3, ip
  4048cc:	ea22 0203 	bic.w	r2, r2, r3
  4048d0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4048d4:	bf04      	itt	eq
  4048d6:	f851 3b04 	ldreq.w	r3, [r1], #4
  4048da:	3004      	addeq	r0, #4
  4048dc:	d0f4      	beq.n	4048c8 <strlen+0x30>
  4048de:	f1c2 0100 	rsb	r1, r2, #0
  4048e2:	ea02 0201 	and.w	r2, r2, r1
  4048e6:	fab2 f282 	clz	r2, r2
  4048ea:	f1c2 021f 	rsb	r2, r2, #31
  4048ee:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4048f2:	4770      	bx	lr

004048f4 <strncpy>:
  4048f4:	ea40 0301 	orr.w	r3, r0, r1
  4048f8:	079b      	lsls	r3, r3, #30
  4048fa:	b470      	push	{r4, r5, r6}
  4048fc:	d12b      	bne.n	404956 <strncpy+0x62>
  4048fe:	2a03      	cmp	r2, #3
  404900:	d929      	bls.n	404956 <strncpy+0x62>
  404902:	460c      	mov	r4, r1
  404904:	4603      	mov	r3, r0
  404906:	4621      	mov	r1, r4
  404908:	f854 6b04 	ldr.w	r6, [r4], #4
  40490c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  404910:	ea25 0506 	bic.w	r5, r5, r6
  404914:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  404918:	d105      	bne.n	404926 <strncpy+0x32>
  40491a:	3a04      	subs	r2, #4
  40491c:	2a03      	cmp	r2, #3
  40491e:	f843 6b04 	str.w	r6, [r3], #4
  404922:	4621      	mov	r1, r4
  404924:	d8ef      	bhi.n	404906 <strncpy+0x12>
  404926:	b1a2      	cbz	r2, 404952 <strncpy+0x5e>
  404928:	780c      	ldrb	r4, [r1, #0]
  40492a:	701c      	strb	r4, [r3, #0]
  40492c:	3a01      	subs	r2, #1
  40492e:	3301      	adds	r3, #1
  404930:	3101      	adds	r1, #1
  404932:	b13c      	cbz	r4, 404944 <strncpy+0x50>
  404934:	b16a      	cbz	r2, 404952 <strncpy+0x5e>
  404936:	f811 4b01 	ldrb.w	r4, [r1], #1
  40493a:	f803 4b01 	strb.w	r4, [r3], #1
  40493e:	3a01      	subs	r2, #1
  404940:	2c00      	cmp	r4, #0
  404942:	d1f7      	bne.n	404934 <strncpy+0x40>
  404944:	b12a      	cbz	r2, 404952 <strncpy+0x5e>
  404946:	441a      	add	r2, r3
  404948:	2100      	movs	r1, #0
  40494a:	f803 1b01 	strb.w	r1, [r3], #1
  40494e:	4293      	cmp	r3, r2
  404950:	d1fb      	bne.n	40494a <strncpy+0x56>
  404952:	bc70      	pop	{r4, r5, r6}
  404954:	4770      	bx	lr
  404956:	4603      	mov	r3, r0
  404958:	e7e5      	b.n	404926 <strncpy+0x32>
  40495a:	bf00      	nop

0040495c <__sprint_r.part.0>:
  40495c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40495e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404962:	049c      	lsls	r4, r3, #18
  404964:	460f      	mov	r7, r1
  404966:	4692      	mov	sl, r2
  404968:	d52b      	bpl.n	4049c2 <__sprint_r.part.0+0x66>
  40496a:	6893      	ldr	r3, [r2, #8]
  40496c:	6812      	ldr	r2, [r2, #0]
  40496e:	b333      	cbz	r3, 4049be <__sprint_r.part.0+0x62>
  404970:	4680      	mov	r8, r0
  404972:	f102 0908 	add.w	r9, r2, #8
  404976:	e919 0060 	ldmdb	r9, {r5, r6}
  40497a:	08b6      	lsrs	r6, r6, #2
  40497c:	d017      	beq.n	4049ae <__sprint_r.part.0+0x52>
  40497e:	3d04      	subs	r5, #4
  404980:	2400      	movs	r4, #0
  404982:	e001      	b.n	404988 <__sprint_r.part.0+0x2c>
  404984:	42a6      	cmp	r6, r4
  404986:	d010      	beq.n	4049aa <__sprint_r.part.0+0x4e>
  404988:	4640      	mov	r0, r8
  40498a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40498e:	463a      	mov	r2, r7
  404990:	f001 f88c 	bl	405aac <_fputwc_r>
  404994:	1c43      	adds	r3, r0, #1
  404996:	f104 0401 	add.w	r4, r4, #1
  40499a:	d1f3      	bne.n	404984 <__sprint_r.part.0+0x28>
  40499c:	2300      	movs	r3, #0
  40499e:	f8ca 3008 	str.w	r3, [sl, #8]
  4049a2:	f8ca 3004 	str.w	r3, [sl, #4]
  4049a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4049aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4049ae:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4049b2:	f8ca 3008 	str.w	r3, [sl, #8]
  4049b6:	f109 0908 	add.w	r9, r9, #8
  4049ba:	2b00      	cmp	r3, #0
  4049bc:	d1db      	bne.n	404976 <__sprint_r.part.0+0x1a>
  4049be:	2000      	movs	r0, #0
  4049c0:	e7ec      	b.n	40499c <__sprint_r.part.0+0x40>
  4049c2:	f001 f9ab 	bl	405d1c <__sfvwrite_r>
  4049c6:	2300      	movs	r3, #0
  4049c8:	f8ca 3008 	str.w	r3, [sl, #8]
  4049cc:	f8ca 3004 	str.w	r3, [sl, #4]
  4049d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004049d4 <_vfiprintf_r>:
  4049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049d8:	b0ab      	sub	sp, #172	; 0xac
  4049da:	461c      	mov	r4, r3
  4049dc:	9100      	str	r1, [sp, #0]
  4049de:	4693      	mov	fp, r2
  4049e0:	9304      	str	r3, [sp, #16]
  4049e2:	9001      	str	r0, [sp, #4]
  4049e4:	b118      	cbz	r0, 4049ee <_vfiprintf_r+0x1a>
  4049e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4049e8:	2b00      	cmp	r3, #0
  4049ea:	f000 80e3 	beq.w	404bb4 <_vfiprintf_r+0x1e0>
  4049ee:	9b00      	ldr	r3, [sp, #0]
  4049f0:	8999      	ldrh	r1, [r3, #12]
  4049f2:	b28a      	uxth	r2, r1
  4049f4:	0490      	lsls	r0, r2, #18
  4049f6:	d408      	bmi.n	404a0a <_vfiprintf_r+0x36>
  4049f8:	4618      	mov	r0, r3
  4049fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  4049fc:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  404a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404a04:	8182      	strh	r2, [r0, #12]
  404a06:	6643      	str	r3, [r0, #100]	; 0x64
  404a08:	b292      	uxth	r2, r2
  404a0a:	0711      	lsls	r1, r2, #28
  404a0c:	f140 80b2 	bpl.w	404b74 <_vfiprintf_r+0x1a0>
  404a10:	9b00      	ldr	r3, [sp, #0]
  404a12:	691b      	ldr	r3, [r3, #16]
  404a14:	2b00      	cmp	r3, #0
  404a16:	f000 80ad 	beq.w	404b74 <_vfiprintf_r+0x1a0>
  404a1a:	f002 021a 	and.w	r2, r2, #26
  404a1e:	2a0a      	cmp	r2, #10
  404a20:	f000 80b4 	beq.w	404b8c <_vfiprintf_r+0x1b8>
  404a24:	2300      	movs	r3, #0
  404a26:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  404a2a:	9309      	str	r3, [sp, #36]	; 0x24
  404a2c:	930f      	str	r3, [sp, #60]	; 0x3c
  404a2e:	930e      	str	r3, [sp, #56]	; 0x38
  404a30:	9302      	str	r3, [sp, #8]
  404a32:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  404a36:	4654      	mov	r4, sl
  404a38:	f89b 3000 	ldrb.w	r3, [fp]
  404a3c:	2b00      	cmp	r3, #0
  404a3e:	f000 84a3 	beq.w	405388 <_vfiprintf_r+0x9b4>
  404a42:	2b25      	cmp	r3, #37	; 0x25
  404a44:	f000 84a0 	beq.w	405388 <_vfiprintf_r+0x9b4>
  404a48:	465a      	mov	r2, fp
  404a4a:	e001      	b.n	404a50 <_vfiprintf_r+0x7c>
  404a4c:	2b25      	cmp	r3, #37	; 0x25
  404a4e:	d003      	beq.n	404a58 <_vfiprintf_r+0x84>
  404a50:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  404a54:	2b00      	cmp	r3, #0
  404a56:	d1f9      	bne.n	404a4c <_vfiprintf_r+0x78>
  404a58:	ebcb 0602 	rsb	r6, fp, r2
  404a5c:	4615      	mov	r5, r2
  404a5e:	b196      	cbz	r6, 404a86 <_vfiprintf_r+0xb2>
  404a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404a62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a64:	f8c4 b000 	str.w	fp, [r4]
  404a68:	3301      	adds	r3, #1
  404a6a:	4432      	add	r2, r6
  404a6c:	2b07      	cmp	r3, #7
  404a6e:	6066      	str	r6, [r4, #4]
  404a70:	920f      	str	r2, [sp, #60]	; 0x3c
  404a72:	930e      	str	r3, [sp, #56]	; 0x38
  404a74:	dd79      	ble.n	404b6a <_vfiprintf_r+0x196>
  404a76:	2a00      	cmp	r2, #0
  404a78:	f040 84af 	bne.w	4053da <_vfiprintf_r+0xa06>
  404a7c:	9b02      	ldr	r3, [sp, #8]
  404a7e:	920e      	str	r2, [sp, #56]	; 0x38
  404a80:	4433      	add	r3, r6
  404a82:	4654      	mov	r4, sl
  404a84:	9302      	str	r3, [sp, #8]
  404a86:	782b      	ldrb	r3, [r5, #0]
  404a88:	2b00      	cmp	r3, #0
  404a8a:	f000 8360 	beq.w	40514e <_vfiprintf_r+0x77a>
  404a8e:	2100      	movs	r1, #0
  404a90:	f04f 0300 	mov.w	r3, #0
  404a94:	f04f 3cff 	mov.w	ip, #4294967295
  404a98:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404a9c:	1c68      	adds	r0, r5, #1
  404a9e:	786b      	ldrb	r3, [r5, #1]
  404aa0:	4688      	mov	r8, r1
  404aa2:	460d      	mov	r5, r1
  404aa4:	4666      	mov	r6, ip
  404aa6:	f100 0b01 	add.w	fp, r0, #1
  404aaa:	f1a3 0220 	sub.w	r2, r3, #32
  404aae:	2a58      	cmp	r2, #88	; 0x58
  404ab0:	f200 82ab 	bhi.w	40500a <_vfiprintf_r+0x636>
  404ab4:	e8df f012 	tbh	[pc, r2, lsl #1]
  404ab8:	02a9029b 	.word	0x02a9029b
  404abc:	02a302a9 	.word	0x02a302a9
  404ac0:	02a902a9 	.word	0x02a902a9
  404ac4:	02a902a9 	.word	0x02a902a9
  404ac8:	02a902a9 	.word	0x02a902a9
  404acc:	02620255 	.word	0x02620255
  404ad0:	010d02a9 	.word	0x010d02a9
  404ad4:	02a9026e 	.word	0x02a9026e
  404ad8:	012f0129 	.word	0x012f0129
  404adc:	012f012f 	.word	0x012f012f
  404ae0:	012f012f 	.word	0x012f012f
  404ae4:	012f012f 	.word	0x012f012f
  404ae8:	012f012f 	.word	0x012f012f
  404aec:	02a902a9 	.word	0x02a902a9
  404af0:	02a902a9 	.word	0x02a902a9
  404af4:	02a902a9 	.word	0x02a902a9
  404af8:	02a902a9 	.word	0x02a902a9
  404afc:	02a902a9 	.word	0x02a902a9
  404b00:	02a9013d 	.word	0x02a9013d
  404b04:	02a902a9 	.word	0x02a902a9
  404b08:	02a902a9 	.word	0x02a902a9
  404b0c:	02a902a9 	.word	0x02a902a9
  404b10:	02a902a9 	.word	0x02a902a9
  404b14:	017402a9 	.word	0x017402a9
  404b18:	02a902a9 	.word	0x02a902a9
  404b1c:	02a902a9 	.word	0x02a902a9
  404b20:	018b02a9 	.word	0x018b02a9
  404b24:	02a902a9 	.word	0x02a902a9
  404b28:	02a901a3 	.word	0x02a901a3
  404b2c:	02a902a9 	.word	0x02a902a9
  404b30:	02a902a9 	.word	0x02a902a9
  404b34:	02a902a9 	.word	0x02a902a9
  404b38:	02a902a9 	.word	0x02a902a9
  404b3c:	01c702a9 	.word	0x01c702a9
  404b40:	02a901da 	.word	0x02a901da
  404b44:	02a902a9 	.word	0x02a902a9
  404b48:	01da0123 	.word	0x01da0123
  404b4c:	02a902a9 	.word	0x02a902a9
  404b50:	02a9024c 	.word	0x02a9024c
  404b54:	0113028a 	.word	0x0113028a
  404b58:	020701f3 	.word	0x020701f3
  404b5c:	020d02a9 	.word	0x020d02a9
  404b60:	008102a9 	.word	0x008102a9
  404b64:	02a902a9 	.word	0x02a902a9
  404b68:	0233      	.short	0x0233
  404b6a:	3408      	adds	r4, #8
  404b6c:	9b02      	ldr	r3, [sp, #8]
  404b6e:	4433      	add	r3, r6
  404b70:	9302      	str	r3, [sp, #8]
  404b72:	e788      	b.n	404a86 <_vfiprintf_r+0xb2>
  404b74:	9801      	ldr	r0, [sp, #4]
  404b76:	9900      	ldr	r1, [sp, #0]
  404b78:	f000 fd70 	bl	40565c <__swsetup_r>
  404b7c:	b9a8      	cbnz	r0, 404baa <_vfiprintf_r+0x1d6>
  404b7e:	9b00      	ldr	r3, [sp, #0]
  404b80:	899a      	ldrh	r2, [r3, #12]
  404b82:	f002 021a 	and.w	r2, r2, #26
  404b86:	2a0a      	cmp	r2, #10
  404b88:	f47f af4c 	bne.w	404a24 <_vfiprintf_r+0x50>
  404b8c:	9b00      	ldr	r3, [sp, #0]
  404b8e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  404b92:	2b00      	cmp	r3, #0
  404b94:	f6ff af46 	blt.w	404a24 <_vfiprintf_r+0x50>
  404b98:	9801      	ldr	r0, [sp, #4]
  404b9a:	9900      	ldr	r1, [sp, #0]
  404b9c:	465a      	mov	r2, fp
  404b9e:	4623      	mov	r3, r4
  404ba0:	f000 fd20 	bl	4055e4 <__sbprintf>
  404ba4:	b02b      	add	sp, #172	; 0xac
  404ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404baa:	f04f 30ff 	mov.w	r0, #4294967295
  404bae:	b02b      	add	sp, #172	; 0xac
  404bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bb4:	f000 ff02 	bl	4059bc <__sinit>
  404bb8:	e719      	b.n	4049ee <_vfiprintf_r+0x1a>
  404bba:	f018 0f20 	tst.w	r8, #32
  404bbe:	9503      	str	r5, [sp, #12]
  404bc0:	46b4      	mov	ip, r6
  404bc2:	f000 810c 	beq.w	404dde <_vfiprintf_r+0x40a>
  404bc6:	9b04      	ldr	r3, [sp, #16]
  404bc8:	3307      	adds	r3, #7
  404bca:	f023 0307 	bic.w	r3, r3, #7
  404bce:	f103 0208 	add.w	r2, r3, #8
  404bd2:	e9d3 6700 	ldrd	r6, r7, [r3]
  404bd6:	9204      	str	r2, [sp, #16]
  404bd8:	2301      	movs	r3, #1
  404bda:	f04f 0200 	mov.w	r2, #0
  404bde:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404be2:	46e1      	mov	r9, ip
  404be4:	2500      	movs	r5, #0
  404be6:	f1bc 0f00 	cmp.w	ip, #0
  404bea:	bfa8      	it	ge
  404bec:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  404bf0:	ea56 0207 	orrs.w	r2, r6, r7
  404bf4:	f040 80c4 	bne.w	404d80 <_vfiprintf_r+0x3ac>
  404bf8:	f1bc 0f00 	cmp.w	ip, #0
  404bfc:	f000 8381 	beq.w	405302 <_vfiprintf_r+0x92e>
  404c00:	2b01      	cmp	r3, #1
  404c02:	f000 80c5 	beq.w	404d90 <_vfiprintf_r+0x3bc>
  404c06:	2b02      	cmp	r3, #2
  404c08:	f000 8387 	beq.w	40531a <_vfiprintf_r+0x946>
  404c0c:	4651      	mov	r1, sl
  404c0e:	08f2      	lsrs	r2, r6, #3
  404c10:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404c14:	08f8      	lsrs	r0, r7, #3
  404c16:	f006 0307 	and.w	r3, r6, #7
  404c1a:	4607      	mov	r7, r0
  404c1c:	4616      	mov	r6, r2
  404c1e:	3330      	adds	r3, #48	; 0x30
  404c20:	ea56 0207 	orrs.w	r2, r6, r7
  404c24:	f801 3d01 	strb.w	r3, [r1, #-1]!
  404c28:	d1f1      	bne.n	404c0e <_vfiprintf_r+0x23a>
  404c2a:	f018 0f01 	tst.w	r8, #1
  404c2e:	9107      	str	r1, [sp, #28]
  404c30:	f040 83fc 	bne.w	40542c <_vfiprintf_r+0xa58>
  404c34:	ebc1 090a 	rsb	r9, r1, sl
  404c38:	45e1      	cmp	r9, ip
  404c3a:	464e      	mov	r6, r9
  404c3c:	bfb8      	it	lt
  404c3e:	4666      	movlt	r6, ip
  404c40:	b105      	cbz	r5, 404c44 <_vfiprintf_r+0x270>
  404c42:	3601      	adds	r6, #1
  404c44:	f018 0302 	ands.w	r3, r8, #2
  404c48:	9305      	str	r3, [sp, #20]
  404c4a:	bf18      	it	ne
  404c4c:	3602      	addne	r6, #2
  404c4e:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  404c52:	9306      	str	r3, [sp, #24]
  404c54:	f040 81fa 	bne.w	40504c <_vfiprintf_r+0x678>
  404c58:	9b03      	ldr	r3, [sp, #12]
  404c5a:	1b9d      	subs	r5, r3, r6
  404c5c:	2d00      	cmp	r5, #0
  404c5e:	f340 81f5 	ble.w	40504c <_vfiprintf_r+0x678>
  404c62:	2d10      	cmp	r5, #16
  404c64:	f340 848c 	ble.w	405580 <_vfiprintf_r+0xbac>
  404c68:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  404c6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c6e:	4fc6      	ldr	r7, [pc, #792]	; (404f88 <_vfiprintf_r+0x5b4>)
  404c70:	4620      	mov	r0, r4
  404c72:	2310      	movs	r3, #16
  404c74:	4664      	mov	r4, ip
  404c76:	4671      	mov	r1, lr
  404c78:	4684      	mov	ip, r0
  404c7a:	e007      	b.n	404c8c <_vfiprintf_r+0x2b8>
  404c7c:	f101 0e02 	add.w	lr, r1, #2
  404c80:	f10c 0c08 	add.w	ip, ip, #8
  404c84:	4601      	mov	r1, r0
  404c86:	3d10      	subs	r5, #16
  404c88:	2d10      	cmp	r5, #16
  404c8a:	dd13      	ble.n	404cb4 <_vfiprintf_r+0x2e0>
  404c8c:	1c48      	adds	r0, r1, #1
  404c8e:	3210      	adds	r2, #16
  404c90:	2807      	cmp	r0, #7
  404c92:	920f      	str	r2, [sp, #60]	; 0x3c
  404c94:	f8cc 7000 	str.w	r7, [ip]
  404c98:	f8cc 3004 	str.w	r3, [ip, #4]
  404c9c:	900e      	str	r0, [sp, #56]	; 0x38
  404c9e:	dded      	ble.n	404c7c <_vfiprintf_r+0x2a8>
  404ca0:	2a00      	cmp	r2, #0
  404ca2:	f040 81c3 	bne.w	40502c <_vfiprintf_r+0x658>
  404ca6:	3d10      	subs	r5, #16
  404ca8:	2d10      	cmp	r5, #16
  404caa:	4611      	mov	r1, r2
  404cac:	f04f 0e01 	mov.w	lr, #1
  404cb0:	46d4      	mov	ip, sl
  404cb2:	dceb      	bgt.n	404c8c <_vfiprintf_r+0x2b8>
  404cb4:	4663      	mov	r3, ip
  404cb6:	4671      	mov	r1, lr
  404cb8:	46a4      	mov	ip, r4
  404cba:	461c      	mov	r4, r3
  404cbc:	442a      	add	r2, r5
  404cbe:	2907      	cmp	r1, #7
  404cc0:	920f      	str	r2, [sp, #60]	; 0x3c
  404cc2:	6027      	str	r7, [r4, #0]
  404cc4:	6065      	str	r5, [r4, #4]
  404cc6:	910e      	str	r1, [sp, #56]	; 0x38
  404cc8:	f300 8346 	bgt.w	405358 <_vfiprintf_r+0x984>
  404ccc:	3408      	adds	r4, #8
  404cce:	1c48      	adds	r0, r1, #1
  404cd0:	e1bf      	b.n	405052 <_vfiprintf_r+0x67e>
  404cd2:	4658      	mov	r0, fp
  404cd4:	f048 0804 	orr.w	r8, r8, #4
  404cd8:	f89b 3000 	ldrb.w	r3, [fp]
  404cdc:	e6e3      	b.n	404aa6 <_vfiprintf_r+0xd2>
  404cde:	f018 0320 	ands.w	r3, r8, #32
  404ce2:	9503      	str	r5, [sp, #12]
  404ce4:	46b4      	mov	ip, r6
  404ce6:	d062      	beq.n	404dae <_vfiprintf_r+0x3da>
  404ce8:	9b04      	ldr	r3, [sp, #16]
  404cea:	3307      	adds	r3, #7
  404cec:	f023 0307 	bic.w	r3, r3, #7
  404cf0:	f103 0208 	add.w	r2, r3, #8
  404cf4:	e9d3 6700 	ldrd	r6, r7, [r3]
  404cf8:	9204      	str	r2, [sp, #16]
  404cfa:	2300      	movs	r3, #0
  404cfc:	e76d      	b.n	404bda <_vfiprintf_r+0x206>
  404cfe:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  404d02:	f89b 3000 	ldrb.w	r3, [fp]
  404d06:	4658      	mov	r0, fp
  404d08:	e6cd      	b.n	404aa6 <_vfiprintf_r+0xd2>
  404d0a:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  404d0e:	f89b 3000 	ldrb.w	r3, [fp]
  404d12:	4658      	mov	r0, fp
  404d14:	e6c7      	b.n	404aa6 <_vfiprintf_r+0xd2>
  404d16:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404d1a:	2500      	movs	r5, #0
  404d1c:	f81b 3b01 	ldrb.w	r3, [fp], #1
  404d20:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  404d24:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  404d28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404d2c:	2a09      	cmp	r2, #9
  404d2e:	d9f5      	bls.n	404d1c <_vfiprintf_r+0x348>
  404d30:	e6bb      	b.n	404aaa <_vfiprintf_r+0xd6>
  404d32:	f048 0810 	orr.w	r8, r8, #16
  404d36:	f018 0f20 	tst.w	r8, #32
  404d3a:	9503      	str	r5, [sp, #12]
  404d3c:	46b4      	mov	ip, r6
  404d3e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404d42:	f000 809b 	beq.w	404e7c <_vfiprintf_r+0x4a8>
  404d46:	9904      	ldr	r1, [sp, #16]
  404d48:	3107      	adds	r1, #7
  404d4a:	f021 0107 	bic.w	r1, r1, #7
  404d4e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404d52:	3108      	adds	r1, #8
  404d54:	9104      	str	r1, [sp, #16]
  404d56:	4616      	mov	r6, r2
  404d58:	461f      	mov	r7, r3
  404d5a:	2a00      	cmp	r2, #0
  404d5c:	f173 0300 	sbcs.w	r3, r3, #0
  404d60:	f2c0 83a6 	blt.w	4054b0 <_vfiprintf_r+0xadc>
  404d64:	f1bc 0f00 	cmp.w	ip, #0
  404d68:	bfa8      	it	ge
  404d6a:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  404d6e:	ea56 0207 	orrs.w	r2, r6, r7
  404d72:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  404d76:	46e1      	mov	r9, ip
  404d78:	f04f 0301 	mov.w	r3, #1
  404d7c:	f43f af3c 	beq.w	404bf8 <_vfiprintf_r+0x224>
  404d80:	2b01      	cmp	r3, #1
  404d82:	f47f af40 	bne.w	404c06 <_vfiprintf_r+0x232>
  404d86:	2f00      	cmp	r7, #0
  404d88:	bf08      	it	eq
  404d8a:	2e0a      	cmpeq	r6, #10
  404d8c:	f080 8334 	bcs.w	4053f8 <_vfiprintf_r+0xa24>
  404d90:	ab2a      	add	r3, sp, #168	; 0xa8
  404d92:	3630      	adds	r6, #48	; 0x30
  404d94:	f803 6d41 	strb.w	r6, [r3, #-65]!
  404d98:	ebc3 090a 	rsb	r9, r3, sl
  404d9c:	9307      	str	r3, [sp, #28]
  404d9e:	e74b      	b.n	404c38 <_vfiprintf_r+0x264>
  404da0:	f048 0810 	orr.w	r8, r8, #16
  404da4:	f018 0320 	ands.w	r3, r8, #32
  404da8:	9503      	str	r5, [sp, #12]
  404daa:	46b4      	mov	ip, r6
  404dac:	d19c      	bne.n	404ce8 <_vfiprintf_r+0x314>
  404dae:	f018 0210 	ands.w	r2, r8, #16
  404db2:	f040 82f7 	bne.w	4053a4 <_vfiprintf_r+0x9d0>
  404db6:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  404dba:	f000 82f3 	beq.w	4053a4 <_vfiprintf_r+0x9d0>
  404dbe:	9904      	ldr	r1, [sp, #16]
  404dc0:	4613      	mov	r3, r2
  404dc2:	460a      	mov	r2, r1
  404dc4:	3204      	adds	r2, #4
  404dc6:	880e      	ldrh	r6, [r1, #0]
  404dc8:	9204      	str	r2, [sp, #16]
  404dca:	2700      	movs	r7, #0
  404dcc:	e705      	b.n	404bda <_vfiprintf_r+0x206>
  404dce:	f048 0810 	orr.w	r8, r8, #16
  404dd2:	f018 0f20 	tst.w	r8, #32
  404dd6:	9503      	str	r5, [sp, #12]
  404dd8:	46b4      	mov	ip, r6
  404dda:	f47f aef4 	bne.w	404bc6 <_vfiprintf_r+0x1f2>
  404dde:	9a04      	ldr	r2, [sp, #16]
  404de0:	f018 0f10 	tst.w	r8, #16
  404de4:	4613      	mov	r3, r2
  404de6:	f040 82e4 	bne.w	4053b2 <_vfiprintf_r+0x9de>
  404dea:	f018 0f40 	tst.w	r8, #64	; 0x40
  404dee:	f000 82e0 	beq.w	4053b2 <_vfiprintf_r+0x9de>
  404df2:	8816      	ldrh	r6, [r2, #0]
  404df4:	3204      	adds	r2, #4
  404df6:	2700      	movs	r7, #0
  404df8:	2301      	movs	r3, #1
  404dfa:	9204      	str	r2, [sp, #16]
  404dfc:	e6ed      	b.n	404bda <_vfiprintf_r+0x206>
  404dfe:	4a63      	ldr	r2, [pc, #396]	; (404f8c <_vfiprintf_r+0x5b8>)
  404e00:	9503      	str	r5, [sp, #12]
  404e02:	f018 0f20 	tst.w	r8, #32
  404e06:	46b4      	mov	ip, r6
  404e08:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404e0c:	9209      	str	r2, [sp, #36]	; 0x24
  404e0e:	f000 8090 	beq.w	404f32 <_vfiprintf_r+0x55e>
  404e12:	9a04      	ldr	r2, [sp, #16]
  404e14:	3207      	adds	r2, #7
  404e16:	f022 0207 	bic.w	r2, r2, #7
  404e1a:	e9d2 6700 	ldrd	r6, r7, [r2]
  404e1e:	f102 0108 	add.w	r1, r2, #8
  404e22:	9104      	str	r1, [sp, #16]
  404e24:	f018 0f01 	tst.w	r8, #1
  404e28:	f000 8290 	beq.w	40534c <_vfiprintf_r+0x978>
  404e2c:	ea56 0207 	orrs.w	r2, r6, r7
  404e30:	f000 828c 	beq.w	40534c <_vfiprintf_r+0x978>
  404e34:	2230      	movs	r2, #48	; 0x30
  404e36:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  404e3a:	f048 0802 	orr.w	r8, r8, #2
  404e3e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  404e42:	2302      	movs	r3, #2
  404e44:	e6c9      	b.n	404bda <_vfiprintf_r+0x206>
  404e46:	9a04      	ldr	r2, [sp, #16]
  404e48:	9503      	str	r5, [sp, #12]
  404e4a:	6813      	ldr	r3, [r2, #0]
  404e4c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  404e50:	4613      	mov	r3, r2
  404e52:	3304      	adds	r3, #4
  404e54:	2601      	movs	r6, #1
  404e56:	f04f 0100 	mov.w	r1, #0
  404e5a:	9304      	str	r3, [sp, #16]
  404e5c:	ab10      	add	r3, sp, #64	; 0x40
  404e5e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404e62:	46b1      	mov	r9, r6
  404e64:	9307      	str	r3, [sp, #28]
  404e66:	f04f 0c00 	mov.w	ip, #0
  404e6a:	e6eb      	b.n	404c44 <_vfiprintf_r+0x270>
  404e6c:	f018 0f20 	tst.w	r8, #32
  404e70:	9503      	str	r5, [sp, #12]
  404e72:	46b4      	mov	ip, r6
  404e74:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404e78:	f47f af65 	bne.w	404d46 <_vfiprintf_r+0x372>
  404e7c:	f018 0f10 	tst.w	r8, #16
  404e80:	f040 82a2 	bne.w	4053c8 <_vfiprintf_r+0x9f4>
  404e84:	f018 0f40 	tst.w	r8, #64	; 0x40
  404e88:	f000 829e 	beq.w	4053c8 <_vfiprintf_r+0x9f4>
  404e8c:	9904      	ldr	r1, [sp, #16]
  404e8e:	f9b1 6000 	ldrsh.w	r6, [r1]
  404e92:	3104      	adds	r1, #4
  404e94:	17f7      	asrs	r7, r6, #31
  404e96:	4632      	mov	r2, r6
  404e98:	463b      	mov	r3, r7
  404e9a:	9104      	str	r1, [sp, #16]
  404e9c:	e75d      	b.n	404d5a <_vfiprintf_r+0x386>
  404e9e:	9904      	ldr	r1, [sp, #16]
  404ea0:	9503      	str	r5, [sp, #12]
  404ea2:	2330      	movs	r3, #48	; 0x30
  404ea4:	460a      	mov	r2, r1
  404ea6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  404eaa:	2378      	movs	r3, #120	; 0x78
  404eac:	3204      	adds	r2, #4
  404eae:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  404eb2:	4b37      	ldr	r3, [pc, #220]	; (404f90 <_vfiprintf_r+0x5bc>)
  404eb4:	9309      	str	r3, [sp, #36]	; 0x24
  404eb6:	46b4      	mov	ip, r6
  404eb8:	f048 0802 	orr.w	r8, r8, #2
  404ebc:	680e      	ldr	r6, [r1, #0]
  404ebe:	9204      	str	r2, [sp, #16]
  404ec0:	2700      	movs	r7, #0
  404ec2:	2302      	movs	r3, #2
  404ec4:	e689      	b.n	404bda <_vfiprintf_r+0x206>
  404ec6:	f048 0820 	orr.w	r8, r8, #32
  404eca:	f89b 3000 	ldrb.w	r3, [fp]
  404ece:	4658      	mov	r0, fp
  404ed0:	e5e9      	b.n	404aa6 <_vfiprintf_r+0xd2>
  404ed2:	9a04      	ldr	r2, [sp, #16]
  404ed4:	9503      	str	r5, [sp, #12]
  404ed6:	6813      	ldr	r3, [r2, #0]
  404ed8:	9307      	str	r3, [sp, #28]
  404eda:	f04f 0100 	mov.w	r1, #0
  404ede:	46b4      	mov	ip, r6
  404ee0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404ee4:	1d16      	adds	r6, r2, #4
  404ee6:	2b00      	cmp	r3, #0
  404ee8:	f000 8350 	beq.w	40558c <_vfiprintf_r+0xbb8>
  404eec:	f1bc 0f00 	cmp.w	ip, #0
  404ef0:	f2c0 832a 	blt.w	405548 <_vfiprintf_r+0xb74>
  404ef4:	9d07      	ldr	r5, [sp, #28]
  404ef6:	f8cd c010 	str.w	ip, [sp, #16]
  404efa:	4662      	mov	r2, ip
  404efc:	4628      	mov	r0, r5
  404efe:	2100      	movs	r1, #0
  404f00:	f001 fbd6 	bl	4066b0 <memchr>
  404f04:	f8dd c010 	ldr.w	ip, [sp, #16]
  404f08:	2800      	cmp	r0, #0
  404f0a:	f000 8350 	beq.w	4055ae <_vfiprintf_r+0xbda>
  404f0e:	ebc5 0900 	rsb	r9, r5, r0
  404f12:	9604      	str	r6, [sp, #16]
  404f14:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  404f18:	f04f 0c00 	mov.w	ip, #0
  404f1c:	e68c      	b.n	404c38 <_vfiprintf_r+0x264>
  404f1e:	4a1c      	ldr	r2, [pc, #112]	; (404f90 <_vfiprintf_r+0x5bc>)
  404f20:	9503      	str	r5, [sp, #12]
  404f22:	f018 0f20 	tst.w	r8, #32
  404f26:	46b4      	mov	ip, r6
  404f28:	9209      	str	r2, [sp, #36]	; 0x24
  404f2a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404f2e:	f47f af70 	bne.w	404e12 <_vfiprintf_r+0x43e>
  404f32:	9904      	ldr	r1, [sp, #16]
  404f34:	f018 0f10 	tst.w	r8, #16
  404f38:	460a      	mov	r2, r1
  404f3a:	f040 8240 	bne.w	4053be <_vfiprintf_r+0x9ea>
  404f3e:	f018 0f40 	tst.w	r8, #64	; 0x40
  404f42:	f000 823c 	beq.w	4053be <_vfiprintf_r+0x9ea>
  404f46:	3204      	adds	r2, #4
  404f48:	880e      	ldrh	r6, [r1, #0]
  404f4a:	9204      	str	r2, [sp, #16]
  404f4c:	2700      	movs	r7, #0
  404f4e:	e769      	b.n	404e24 <_vfiprintf_r+0x450>
  404f50:	f89b 3000 	ldrb.w	r3, [fp]
  404f54:	2b6c      	cmp	r3, #108	; 0x6c
  404f56:	f000 82ea 	beq.w	40552e <_vfiprintf_r+0xb5a>
  404f5a:	f048 0810 	orr.w	r8, r8, #16
  404f5e:	4658      	mov	r0, fp
  404f60:	e5a1      	b.n	404aa6 <_vfiprintf_r+0xd2>
  404f62:	9a04      	ldr	r2, [sp, #16]
  404f64:	6815      	ldr	r5, [r2, #0]
  404f66:	4613      	mov	r3, r2
  404f68:	2d00      	cmp	r5, #0
  404f6a:	f103 0304 	add.w	r3, r3, #4
  404f6e:	f2c0 82e6 	blt.w	40553e <_vfiprintf_r+0xb6a>
  404f72:	9304      	str	r3, [sp, #16]
  404f74:	f89b 3000 	ldrb.w	r3, [fp]
  404f78:	4658      	mov	r0, fp
  404f7a:	e594      	b.n	404aa6 <_vfiprintf_r+0xd2>
  404f7c:	f89b 3000 	ldrb.w	r3, [fp]
  404f80:	4658      	mov	r0, fp
  404f82:	212b      	movs	r1, #43	; 0x2b
  404f84:	e58f      	b.n	404aa6 <_vfiprintf_r+0xd2>
  404f86:	bf00      	nop
  404f88:	00407cf0 	.word	0x00407cf0
  404f8c:	00407cd4 	.word	0x00407cd4
  404f90:	00407b7c 	.word	0x00407b7c
  404f94:	f89b 3000 	ldrb.w	r3, [fp]
  404f98:	2b2a      	cmp	r3, #42	; 0x2a
  404f9a:	f10b 0001 	add.w	r0, fp, #1
  404f9e:	f000 830f 	beq.w	4055c0 <_vfiprintf_r+0xbec>
  404fa2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404fa6:	2a09      	cmp	r2, #9
  404fa8:	4683      	mov	fp, r0
  404faa:	f04f 0600 	mov.w	r6, #0
  404fae:	f63f ad7c 	bhi.w	404aaa <_vfiprintf_r+0xd6>
  404fb2:	f81b 3b01 	ldrb.w	r3, [fp], #1
  404fb6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404fba:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  404fbe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404fc2:	2a09      	cmp	r2, #9
  404fc4:	d9f5      	bls.n	404fb2 <_vfiprintf_r+0x5de>
  404fc6:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  404fca:	e56e      	b.n	404aaa <_vfiprintf_r+0xd6>
  404fcc:	f018 0f20 	tst.w	r8, #32
  404fd0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404fd4:	f000 8283 	beq.w	4054de <_vfiprintf_r+0xb0a>
  404fd8:	9a04      	ldr	r2, [sp, #16]
  404fda:	9902      	ldr	r1, [sp, #8]
  404fdc:	6813      	ldr	r3, [r2, #0]
  404fde:	17cf      	asrs	r7, r1, #31
  404fe0:	4608      	mov	r0, r1
  404fe2:	3204      	adds	r2, #4
  404fe4:	4639      	mov	r1, r7
  404fe6:	9204      	str	r2, [sp, #16]
  404fe8:	e9c3 0100 	strd	r0, r1, [r3]
  404fec:	e524      	b.n	404a38 <_vfiprintf_r+0x64>
  404fee:	4658      	mov	r0, fp
  404ff0:	f89b 3000 	ldrb.w	r3, [fp]
  404ff4:	2900      	cmp	r1, #0
  404ff6:	f47f ad56 	bne.w	404aa6 <_vfiprintf_r+0xd2>
  404ffa:	2120      	movs	r1, #32
  404ffc:	e553      	b.n	404aa6 <_vfiprintf_r+0xd2>
  404ffe:	f048 0801 	orr.w	r8, r8, #1
  405002:	4658      	mov	r0, fp
  405004:	f89b 3000 	ldrb.w	r3, [fp]
  405008:	e54d      	b.n	404aa6 <_vfiprintf_r+0xd2>
  40500a:	9503      	str	r5, [sp, #12]
  40500c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  405010:	2b00      	cmp	r3, #0
  405012:	f000 809c 	beq.w	40514e <_vfiprintf_r+0x77a>
  405016:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40501a:	f04f 0300 	mov.w	r3, #0
  40501e:	2601      	movs	r6, #1
  405020:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405024:	ab10      	add	r3, sp, #64	; 0x40
  405026:	46b1      	mov	r9, r6
  405028:	9307      	str	r3, [sp, #28]
  40502a:	e71c      	b.n	404e66 <_vfiprintf_r+0x492>
  40502c:	9801      	ldr	r0, [sp, #4]
  40502e:	9900      	ldr	r1, [sp, #0]
  405030:	9308      	str	r3, [sp, #32]
  405032:	aa0d      	add	r2, sp, #52	; 0x34
  405034:	f7ff fc92 	bl	40495c <__sprint_r.part.0>
  405038:	2800      	cmp	r0, #0
  40503a:	f040 808f 	bne.w	40515c <_vfiprintf_r+0x788>
  40503e:	990e      	ldr	r1, [sp, #56]	; 0x38
  405040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405042:	9b08      	ldr	r3, [sp, #32]
  405044:	f101 0e01 	add.w	lr, r1, #1
  405048:	46d4      	mov	ip, sl
  40504a:	e61c      	b.n	404c86 <_vfiprintf_r+0x2b2>
  40504c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40504e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405050:	1c48      	adds	r0, r1, #1
  405052:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405056:	b16b      	cbz	r3, 405074 <_vfiprintf_r+0x6a0>
  405058:	3201      	adds	r2, #1
  40505a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  40505e:	2101      	movs	r1, #1
  405060:	2807      	cmp	r0, #7
  405062:	920f      	str	r2, [sp, #60]	; 0x3c
  405064:	900e      	str	r0, [sp, #56]	; 0x38
  405066:	6023      	str	r3, [r4, #0]
  405068:	6061      	str	r1, [r4, #4]
  40506a:	f300 8134 	bgt.w	4052d6 <_vfiprintf_r+0x902>
  40506e:	4601      	mov	r1, r0
  405070:	3408      	adds	r4, #8
  405072:	3001      	adds	r0, #1
  405074:	9b05      	ldr	r3, [sp, #20]
  405076:	b163      	cbz	r3, 405092 <_vfiprintf_r+0x6be>
  405078:	3202      	adds	r2, #2
  40507a:	a90c      	add	r1, sp, #48	; 0x30
  40507c:	2302      	movs	r3, #2
  40507e:	2807      	cmp	r0, #7
  405080:	920f      	str	r2, [sp, #60]	; 0x3c
  405082:	900e      	str	r0, [sp, #56]	; 0x38
  405084:	e884 000a 	stmia.w	r4, {r1, r3}
  405088:	f300 8134 	bgt.w	4052f4 <_vfiprintf_r+0x920>
  40508c:	4601      	mov	r1, r0
  40508e:	3408      	adds	r4, #8
  405090:	3001      	adds	r0, #1
  405092:	9b06      	ldr	r3, [sp, #24]
  405094:	2b80      	cmp	r3, #128	; 0x80
  405096:	f000 80d4 	beq.w	405242 <_vfiprintf_r+0x86e>
  40509a:	ebc9 070c 	rsb	r7, r9, ip
  40509e:	2f00      	cmp	r7, #0
  4050a0:	dd2b      	ble.n	4050fa <_vfiprintf_r+0x726>
  4050a2:	2f10      	cmp	r7, #16
  4050a4:	4daa      	ldr	r5, [pc, #680]	; (405350 <_vfiprintf_r+0x97c>)
  4050a6:	dd1f      	ble.n	4050e8 <_vfiprintf_r+0x714>
  4050a8:	46a6      	mov	lr, r4
  4050aa:	2310      	movs	r3, #16
  4050ac:	9c01      	ldr	r4, [sp, #4]
  4050ae:	e007      	b.n	4050c0 <_vfiprintf_r+0x6ec>
  4050b0:	f101 0c02 	add.w	ip, r1, #2
  4050b4:	f10e 0e08 	add.w	lr, lr, #8
  4050b8:	4601      	mov	r1, r0
  4050ba:	3f10      	subs	r7, #16
  4050bc:	2f10      	cmp	r7, #16
  4050be:	dd11      	ble.n	4050e4 <_vfiprintf_r+0x710>
  4050c0:	1c48      	adds	r0, r1, #1
  4050c2:	3210      	adds	r2, #16
  4050c4:	2807      	cmp	r0, #7
  4050c6:	920f      	str	r2, [sp, #60]	; 0x3c
  4050c8:	f8ce 5000 	str.w	r5, [lr]
  4050cc:	f8ce 3004 	str.w	r3, [lr, #4]
  4050d0:	900e      	str	r0, [sp, #56]	; 0x38
  4050d2:	dded      	ble.n	4050b0 <_vfiprintf_r+0x6dc>
  4050d4:	bb6a      	cbnz	r2, 405132 <_vfiprintf_r+0x75e>
  4050d6:	3f10      	subs	r7, #16
  4050d8:	2f10      	cmp	r7, #16
  4050da:	f04f 0c01 	mov.w	ip, #1
  4050de:	4611      	mov	r1, r2
  4050e0:	46d6      	mov	lr, sl
  4050e2:	dced      	bgt.n	4050c0 <_vfiprintf_r+0x6ec>
  4050e4:	4674      	mov	r4, lr
  4050e6:	4660      	mov	r0, ip
  4050e8:	443a      	add	r2, r7
  4050ea:	2807      	cmp	r0, #7
  4050ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4050ee:	e884 00a0 	stmia.w	r4, {r5, r7}
  4050f2:	900e      	str	r0, [sp, #56]	; 0x38
  4050f4:	dc3b      	bgt.n	40516e <_vfiprintf_r+0x79a>
  4050f6:	3408      	adds	r4, #8
  4050f8:	3001      	adds	r0, #1
  4050fa:	eb02 0309 	add.w	r3, r2, r9
  4050fe:	9a07      	ldr	r2, [sp, #28]
  405100:	930f      	str	r3, [sp, #60]	; 0x3c
  405102:	2807      	cmp	r0, #7
  405104:	e884 0204 	stmia.w	r4, {r2, r9}
  405108:	900e      	str	r0, [sp, #56]	; 0x38
  40510a:	dd3d      	ble.n	405188 <_vfiprintf_r+0x7b4>
  40510c:	2b00      	cmp	r3, #0
  40510e:	f040 813e 	bne.w	40538e <_vfiprintf_r+0x9ba>
  405112:	f018 0f04 	tst.w	r8, #4
  405116:	930e      	str	r3, [sp, #56]	; 0x38
  405118:	f040 812f 	bne.w	40537a <_vfiprintf_r+0x9a6>
  40511c:	9b02      	ldr	r3, [sp, #8]
  40511e:	9a03      	ldr	r2, [sp, #12]
  405120:	4296      	cmp	r6, r2
  405122:	bfac      	ite	ge
  405124:	199b      	addge	r3, r3, r6
  405126:	189b      	addlt	r3, r3, r2
  405128:	9302      	str	r3, [sp, #8]
  40512a:	2300      	movs	r3, #0
  40512c:	930e      	str	r3, [sp, #56]	; 0x38
  40512e:	4654      	mov	r4, sl
  405130:	e482      	b.n	404a38 <_vfiprintf_r+0x64>
  405132:	4620      	mov	r0, r4
  405134:	9900      	ldr	r1, [sp, #0]
  405136:	9305      	str	r3, [sp, #20]
  405138:	aa0d      	add	r2, sp, #52	; 0x34
  40513a:	f7ff fc0f 	bl	40495c <__sprint_r.part.0>
  40513e:	b968      	cbnz	r0, 40515c <_vfiprintf_r+0x788>
  405140:	990e      	ldr	r1, [sp, #56]	; 0x38
  405142:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405144:	9b05      	ldr	r3, [sp, #20]
  405146:	f101 0c01 	add.w	ip, r1, #1
  40514a:	46d6      	mov	lr, sl
  40514c:	e7b5      	b.n	4050ba <_vfiprintf_r+0x6e6>
  40514e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405150:	b123      	cbz	r3, 40515c <_vfiprintf_r+0x788>
  405152:	9801      	ldr	r0, [sp, #4]
  405154:	9900      	ldr	r1, [sp, #0]
  405156:	aa0d      	add	r2, sp, #52	; 0x34
  405158:	f7ff fc00 	bl	40495c <__sprint_r.part.0>
  40515c:	9b00      	ldr	r3, [sp, #0]
  40515e:	899b      	ldrh	r3, [r3, #12]
  405160:	065b      	lsls	r3, r3, #25
  405162:	f53f ad22 	bmi.w	404baa <_vfiprintf_r+0x1d6>
  405166:	9802      	ldr	r0, [sp, #8]
  405168:	b02b      	add	sp, #172	; 0xac
  40516a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40516e:	2a00      	cmp	r2, #0
  405170:	f040 8191 	bne.w	405496 <_vfiprintf_r+0xac2>
  405174:	2201      	movs	r2, #1
  405176:	9907      	ldr	r1, [sp, #28]
  405178:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  40517c:	464b      	mov	r3, r9
  40517e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405182:	911a      	str	r1, [sp, #104]	; 0x68
  405184:	920e      	str	r2, [sp, #56]	; 0x38
  405186:	4654      	mov	r4, sl
  405188:	f104 0208 	add.w	r2, r4, #8
  40518c:	f018 0f04 	tst.w	r8, #4
  405190:	d039      	beq.n	405206 <_vfiprintf_r+0x832>
  405192:	9903      	ldr	r1, [sp, #12]
  405194:	1b8d      	subs	r5, r1, r6
  405196:	2d00      	cmp	r5, #0
  405198:	dd35      	ble.n	405206 <_vfiprintf_r+0x832>
  40519a:	2d10      	cmp	r5, #16
  40519c:	f340 8202 	ble.w	4055a4 <_vfiprintf_r+0xbd0>
  4051a0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4051a2:	4f6c      	ldr	r7, [pc, #432]	; (405354 <_vfiprintf_r+0x980>)
  4051a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
  4051a8:	f8dd 9000 	ldr.w	r9, [sp]
  4051ac:	2410      	movs	r4, #16
  4051ae:	e006      	b.n	4051be <_vfiprintf_r+0x7ea>
  4051b0:	f100 0e02 	add.w	lr, r0, #2
  4051b4:	3208      	adds	r2, #8
  4051b6:	4608      	mov	r0, r1
  4051b8:	3d10      	subs	r5, #16
  4051ba:	2d10      	cmp	r5, #16
  4051bc:	dd10      	ble.n	4051e0 <_vfiprintf_r+0x80c>
  4051be:	1c41      	adds	r1, r0, #1
  4051c0:	3310      	adds	r3, #16
  4051c2:	2907      	cmp	r1, #7
  4051c4:	930f      	str	r3, [sp, #60]	; 0x3c
  4051c6:	6017      	str	r7, [r2, #0]
  4051c8:	6054      	str	r4, [r2, #4]
  4051ca:	910e      	str	r1, [sp, #56]	; 0x38
  4051cc:	ddf0      	ble.n	4051b0 <_vfiprintf_r+0x7dc>
  4051ce:	2b00      	cmp	r3, #0
  4051d0:	d12a      	bne.n	405228 <_vfiprintf_r+0x854>
  4051d2:	3d10      	subs	r5, #16
  4051d4:	2d10      	cmp	r5, #16
  4051d6:	f04f 0e01 	mov.w	lr, #1
  4051da:	4618      	mov	r0, r3
  4051dc:	4652      	mov	r2, sl
  4051de:	dcee      	bgt.n	4051be <_vfiprintf_r+0x7ea>
  4051e0:	442b      	add	r3, r5
  4051e2:	f1be 0f07 	cmp.w	lr, #7
  4051e6:	930f      	str	r3, [sp, #60]	; 0x3c
  4051e8:	6017      	str	r7, [r2, #0]
  4051ea:	6055      	str	r5, [r2, #4]
  4051ec:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4051f0:	dd09      	ble.n	405206 <_vfiprintf_r+0x832>
  4051f2:	2b00      	cmp	r3, #0
  4051f4:	d092      	beq.n	40511c <_vfiprintf_r+0x748>
  4051f6:	9801      	ldr	r0, [sp, #4]
  4051f8:	9900      	ldr	r1, [sp, #0]
  4051fa:	aa0d      	add	r2, sp, #52	; 0x34
  4051fc:	f7ff fbae 	bl	40495c <__sprint_r.part.0>
  405200:	2800      	cmp	r0, #0
  405202:	d1ab      	bne.n	40515c <_vfiprintf_r+0x788>
  405204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405206:	9a02      	ldr	r2, [sp, #8]
  405208:	9903      	ldr	r1, [sp, #12]
  40520a:	428e      	cmp	r6, r1
  40520c:	bfac      	ite	ge
  40520e:	1992      	addge	r2, r2, r6
  405210:	1852      	addlt	r2, r2, r1
  405212:	9202      	str	r2, [sp, #8]
  405214:	2b00      	cmp	r3, #0
  405216:	d088      	beq.n	40512a <_vfiprintf_r+0x756>
  405218:	9801      	ldr	r0, [sp, #4]
  40521a:	9900      	ldr	r1, [sp, #0]
  40521c:	aa0d      	add	r2, sp, #52	; 0x34
  40521e:	f7ff fb9d 	bl	40495c <__sprint_r.part.0>
  405222:	2800      	cmp	r0, #0
  405224:	d081      	beq.n	40512a <_vfiprintf_r+0x756>
  405226:	e799      	b.n	40515c <_vfiprintf_r+0x788>
  405228:	4640      	mov	r0, r8
  40522a:	4649      	mov	r1, r9
  40522c:	aa0d      	add	r2, sp, #52	; 0x34
  40522e:	f7ff fb95 	bl	40495c <__sprint_r.part.0>
  405232:	2800      	cmp	r0, #0
  405234:	d192      	bne.n	40515c <_vfiprintf_r+0x788>
  405236:	980e      	ldr	r0, [sp, #56]	; 0x38
  405238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40523a:	f100 0e01 	add.w	lr, r0, #1
  40523e:	4652      	mov	r2, sl
  405240:	e7ba      	b.n	4051b8 <_vfiprintf_r+0x7e4>
  405242:	9b03      	ldr	r3, [sp, #12]
  405244:	1b9f      	subs	r7, r3, r6
  405246:	2f00      	cmp	r7, #0
  405248:	f77f af27 	ble.w	40509a <_vfiprintf_r+0x6c6>
  40524c:	2f10      	cmp	r7, #16
  40524e:	4d40      	ldr	r5, [pc, #256]	; (405350 <_vfiprintf_r+0x97c>)
  405250:	f340 81b4 	ble.w	4055bc <_vfiprintf_r+0xbe8>
  405254:	4620      	mov	r0, r4
  405256:	2310      	movs	r3, #16
  405258:	4664      	mov	r4, ip
  40525a:	4684      	mov	ip, r0
  40525c:	e007      	b.n	40526e <_vfiprintf_r+0x89a>
  40525e:	f101 0e02 	add.w	lr, r1, #2
  405262:	f10c 0c08 	add.w	ip, ip, #8
  405266:	4601      	mov	r1, r0
  405268:	3f10      	subs	r7, #16
  40526a:	2f10      	cmp	r7, #16
  40526c:	dd11      	ble.n	405292 <_vfiprintf_r+0x8be>
  40526e:	1c48      	adds	r0, r1, #1
  405270:	3210      	adds	r2, #16
  405272:	2807      	cmp	r0, #7
  405274:	920f      	str	r2, [sp, #60]	; 0x3c
  405276:	f8cc 5000 	str.w	r5, [ip]
  40527a:	f8cc 3004 	str.w	r3, [ip, #4]
  40527e:	900e      	str	r0, [sp, #56]	; 0x38
  405280:	dded      	ble.n	40525e <_vfiprintf_r+0x88a>
  405282:	b9c2      	cbnz	r2, 4052b6 <_vfiprintf_r+0x8e2>
  405284:	3f10      	subs	r7, #16
  405286:	2f10      	cmp	r7, #16
  405288:	f04f 0e01 	mov.w	lr, #1
  40528c:	4611      	mov	r1, r2
  40528e:	46d4      	mov	ip, sl
  405290:	dced      	bgt.n	40526e <_vfiprintf_r+0x89a>
  405292:	4663      	mov	r3, ip
  405294:	46a4      	mov	ip, r4
  405296:	461c      	mov	r4, r3
  405298:	443a      	add	r2, r7
  40529a:	f1be 0f07 	cmp.w	lr, #7
  40529e:	920f      	str	r2, [sp, #60]	; 0x3c
  4052a0:	e884 00a0 	stmia.w	r4, {r5, r7}
  4052a4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4052a8:	f300 80ef 	bgt.w	40548a <_vfiprintf_r+0xab6>
  4052ac:	3408      	adds	r4, #8
  4052ae:	f10e 0001 	add.w	r0, lr, #1
  4052b2:	4671      	mov	r1, lr
  4052b4:	e6f1      	b.n	40509a <_vfiprintf_r+0x6c6>
  4052b6:	9801      	ldr	r0, [sp, #4]
  4052b8:	9900      	ldr	r1, [sp, #0]
  4052ba:	9305      	str	r3, [sp, #20]
  4052bc:	aa0d      	add	r2, sp, #52	; 0x34
  4052be:	f7ff fb4d 	bl	40495c <__sprint_r.part.0>
  4052c2:	2800      	cmp	r0, #0
  4052c4:	f47f af4a 	bne.w	40515c <_vfiprintf_r+0x788>
  4052c8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4052ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4052cc:	9b05      	ldr	r3, [sp, #20]
  4052ce:	f101 0e01 	add.w	lr, r1, #1
  4052d2:	46d4      	mov	ip, sl
  4052d4:	e7c8      	b.n	405268 <_vfiprintf_r+0x894>
  4052d6:	2a00      	cmp	r2, #0
  4052d8:	f040 80c6 	bne.w	405468 <_vfiprintf_r+0xa94>
  4052dc:	9b05      	ldr	r3, [sp, #20]
  4052de:	2b00      	cmp	r3, #0
  4052e0:	f000 8086 	beq.w	4053f0 <_vfiprintf_r+0xa1c>
  4052e4:	aa0c      	add	r2, sp, #48	; 0x30
  4052e6:	2302      	movs	r3, #2
  4052e8:	921a      	str	r2, [sp, #104]	; 0x68
  4052ea:	4608      	mov	r0, r1
  4052ec:	931b      	str	r3, [sp, #108]	; 0x6c
  4052ee:	461a      	mov	r2, r3
  4052f0:	4654      	mov	r4, sl
  4052f2:	e6cb      	b.n	40508c <_vfiprintf_r+0x6b8>
  4052f4:	2a00      	cmp	r2, #0
  4052f6:	f040 80a6 	bne.w	405446 <_vfiprintf_r+0xa72>
  4052fa:	2001      	movs	r0, #1
  4052fc:	4611      	mov	r1, r2
  4052fe:	4654      	mov	r4, sl
  405300:	e6c7      	b.n	405092 <_vfiprintf_r+0x6be>
  405302:	bb03      	cbnz	r3, 405346 <_vfiprintf_r+0x972>
  405304:	f018 0f01 	tst.w	r8, #1
  405308:	d01d      	beq.n	405346 <_vfiprintf_r+0x972>
  40530a:	ab2a      	add	r3, sp, #168	; 0xa8
  40530c:	2230      	movs	r2, #48	; 0x30
  40530e:	f803 2d41 	strb.w	r2, [r3, #-65]!
  405312:	ebc3 090a 	rsb	r9, r3, sl
  405316:	9307      	str	r3, [sp, #28]
  405318:	e48e      	b.n	404c38 <_vfiprintf_r+0x264>
  40531a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40531c:	46d1      	mov	r9, sl
  40531e:	0933      	lsrs	r3, r6, #4
  405320:	f006 010f 	and.w	r1, r6, #15
  405324:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405328:	093a      	lsrs	r2, r7, #4
  40532a:	461e      	mov	r6, r3
  40532c:	4617      	mov	r7, r2
  40532e:	5c43      	ldrb	r3, [r0, r1]
  405330:	f809 3d01 	strb.w	r3, [r9, #-1]!
  405334:	ea56 0307 	orrs.w	r3, r6, r7
  405338:	d1f1      	bne.n	40531e <_vfiprintf_r+0x94a>
  40533a:	464b      	mov	r3, r9
  40533c:	f8cd 901c 	str.w	r9, [sp, #28]
  405340:	ebc3 090a 	rsb	r9, r3, sl
  405344:	e478      	b.n	404c38 <_vfiprintf_r+0x264>
  405346:	f8cd a01c 	str.w	sl, [sp, #28]
  40534a:	e475      	b.n	404c38 <_vfiprintf_r+0x264>
  40534c:	2302      	movs	r3, #2
  40534e:	e444      	b.n	404bda <_vfiprintf_r+0x206>
  405350:	00407cc4 	.word	0x00407cc4
  405354:	00407cf0 	.word	0x00407cf0
  405358:	2a00      	cmp	r2, #0
  40535a:	f040 80d7 	bne.w	40550c <_vfiprintf_r+0xb38>
  40535e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405362:	2b00      	cmp	r3, #0
  405364:	f000 80ae 	beq.w	4054c4 <_vfiprintf_r+0xaf0>
  405368:	2301      	movs	r3, #1
  40536a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40536e:	4618      	mov	r0, r3
  405370:	931b      	str	r3, [sp, #108]	; 0x6c
  405372:	461a      	mov	r2, r3
  405374:	911a      	str	r1, [sp, #104]	; 0x68
  405376:	4654      	mov	r4, sl
  405378:	e679      	b.n	40506e <_vfiprintf_r+0x69a>
  40537a:	9a03      	ldr	r2, [sp, #12]
  40537c:	1b95      	subs	r5, r2, r6
  40537e:	2d00      	cmp	r5, #0
  405380:	4652      	mov	r2, sl
  405382:	f73f af0a 	bgt.w	40519a <_vfiprintf_r+0x7c6>
  405386:	e6c9      	b.n	40511c <_vfiprintf_r+0x748>
  405388:	465d      	mov	r5, fp
  40538a:	f7ff bb7c 	b.w	404a86 <_vfiprintf_r+0xb2>
  40538e:	9801      	ldr	r0, [sp, #4]
  405390:	9900      	ldr	r1, [sp, #0]
  405392:	aa0d      	add	r2, sp, #52	; 0x34
  405394:	f7ff fae2 	bl	40495c <__sprint_r.part.0>
  405398:	2800      	cmp	r0, #0
  40539a:	f47f aedf 	bne.w	40515c <_vfiprintf_r+0x788>
  40539e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4053a0:	4652      	mov	r2, sl
  4053a2:	e6f3      	b.n	40518c <_vfiprintf_r+0x7b8>
  4053a4:	9904      	ldr	r1, [sp, #16]
  4053a6:	460a      	mov	r2, r1
  4053a8:	3204      	adds	r2, #4
  4053aa:	680e      	ldr	r6, [r1, #0]
  4053ac:	9204      	str	r2, [sp, #16]
  4053ae:	2700      	movs	r7, #0
  4053b0:	e413      	b.n	404bda <_vfiprintf_r+0x206>
  4053b2:	3204      	adds	r2, #4
  4053b4:	681e      	ldr	r6, [r3, #0]
  4053b6:	9204      	str	r2, [sp, #16]
  4053b8:	2301      	movs	r3, #1
  4053ba:	2700      	movs	r7, #0
  4053bc:	e40d      	b.n	404bda <_vfiprintf_r+0x206>
  4053be:	6816      	ldr	r6, [r2, #0]
  4053c0:	3204      	adds	r2, #4
  4053c2:	9204      	str	r2, [sp, #16]
  4053c4:	2700      	movs	r7, #0
  4053c6:	e52d      	b.n	404e24 <_vfiprintf_r+0x450>
  4053c8:	9a04      	ldr	r2, [sp, #16]
  4053ca:	6816      	ldr	r6, [r2, #0]
  4053cc:	4613      	mov	r3, r2
  4053ce:	3304      	adds	r3, #4
  4053d0:	17f7      	asrs	r7, r6, #31
  4053d2:	9304      	str	r3, [sp, #16]
  4053d4:	4632      	mov	r2, r6
  4053d6:	463b      	mov	r3, r7
  4053d8:	e4bf      	b.n	404d5a <_vfiprintf_r+0x386>
  4053da:	9801      	ldr	r0, [sp, #4]
  4053dc:	9900      	ldr	r1, [sp, #0]
  4053de:	aa0d      	add	r2, sp, #52	; 0x34
  4053e0:	f7ff fabc 	bl	40495c <__sprint_r.part.0>
  4053e4:	2800      	cmp	r0, #0
  4053e6:	f47f aeb9 	bne.w	40515c <_vfiprintf_r+0x788>
  4053ea:	4654      	mov	r4, sl
  4053ec:	f7ff bbbe 	b.w	404b6c <_vfiprintf_r+0x198>
  4053f0:	4608      	mov	r0, r1
  4053f2:	4654      	mov	r4, sl
  4053f4:	4611      	mov	r1, r2
  4053f6:	e64c      	b.n	405092 <_vfiprintf_r+0x6be>
  4053f8:	46d1      	mov	r9, sl
  4053fa:	f8cd c014 	str.w	ip, [sp, #20]
  4053fe:	4630      	mov	r0, r6
  405400:	4639      	mov	r1, r7
  405402:	220a      	movs	r2, #10
  405404:	2300      	movs	r3, #0
  405406:	f001 fde3 	bl	406fd0 <__aeabi_uldivmod>
  40540a:	3230      	adds	r2, #48	; 0x30
  40540c:	4630      	mov	r0, r6
  40540e:	4639      	mov	r1, r7
  405410:	f809 2d01 	strb.w	r2, [r9, #-1]!
  405414:	2300      	movs	r3, #0
  405416:	220a      	movs	r2, #10
  405418:	f001 fdda 	bl	406fd0 <__aeabi_uldivmod>
  40541c:	4606      	mov	r6, r0
  40541e:	460f      	mov	r7, r1
  405420:	ea56 0307 	orrs.w	r3, r6, r7
  405424:	d1eb      	bne.n	4053fe <_vfiprintf_r+0xa2a>
  405426:	f8dd c014 	ldr.w	ip, [sp, #20]
  40542a:	e786      	b.n	40533a <_vfiprintf_r+0x966>
  40542c:	2b30      	cmp	r3, #48	; 0x30
  40542e:	9b07      	ldr	r3, [sp, #28]
  405430:	d086      	beq.n	405340 <_vfiprintf_r+0x96c>
  405432:	3b01      	subs	r3, #1
  405434:	461a      	mov	r2, r3
  405436:	9307      	str	r3, [sp, #28]
  405438:	2330      	movs	r3, #48	; 0x30
  40543a:	ebc2 090a 	rsb	r9, r2, sl
  40543e:	f801 3c01 	strb.w	r3, [r1, #-1]
  405442:	f7ff bbf9 	b.w	404c38 <_vfiprintf_r+0x264>
  405446:	9801      	ldr	r0, [sp, #4]
  405448:	9900      	ldr	r1, [sp, #0]
  40544a:	f8cd c014 	str.w	ip, [sp, #20]
  40544e:	aa0d      	add	r2, sp, #52	; 0x34
  405450:	f7ff fa84 	bl	40495c <__sprint_r.part.0>
  405454:	2800      	cmp	r0, #0
  405456:	f47f ae81 	bne.w	40515c <_vfiprintf_r+0x788>
  40545a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40545c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40545e:	f8dd c014 	ldr.w	ip, [sp, #20]
  405462:	1c48      	adds	r0, r1, #1
  405464:	4654      	mov	r4, sl
  405466:	e614      	b.n	405092 <_vfiprintf_r+0x6be>
  405468:	9801      	ldr	r0, [sp, #4]
  40546a:	9900      	ldr	r1, [sp, #0]
  40546c:	f8cd c020 	str.w	ip, [sp, #32]
  405470:	aa0d      	add	r2, sp, #52	; 0x34
  405472:	f7ff fa73 	bl	40495c <__sprint_r.part.0>
  405476:	2800      	cmp	r0, #0
  405478:	f47f ae70 	bne.w	40515c <_vfiprintf_r+0x788>
  40547c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40547e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405480:	f8dd c020 	ldr.w	ip, [sp, #32]
  405484:	1c48      	adds	r0, r1, #1
  405486:	4654      	mov	r4, sl
  405488:	e5f4      	b.n	405074 <_vfiprintf_r+0x6a0>
  40548a:	2a00      	cmp	r2, #0
  40548c:	d167      	bne.n	40555e <_vfiprintf_r+0xb8a>
  40548e:	2001      	movs	r0, #1
  405490:	4611      	mov	r1, r2
  405492:	4654      	mov	r4, sl
  405494:	e601      	b.n	40509a <_vfiprintf_r+0x6c6>
  405496:	9801      	ldr	r0, [sp, #4]
  405498:	9900      	ldr	r1, [sp, #0]
  40549a:	aa0d      	add	r2, sp, #52	; 0x34
  40549c:	f7ff fa5e 	bl	40495c <__sprint_r.part.0>
  4054a0:	2800      	cmp	r0, #0
  4054a2:	f47f ae5b 	bne.w	40515c <_vfiprintf_r+0x788>
  4054a6:	980e      	ldr	r0, [sp, #56]	; 0x38
  4054a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4054aa:	3001      	adds	r0, #1
  4054ac:	4654      	mov	r4, sl
  4054ae:	e624      	b.n	4050fa <_vfiprintf_r+0x726>
  4054b0:	252d      	movs	r5, #45	; 0x2d
  4054b2:	4276      	negs	r6, r6
  4054b4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4054b8:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  4054bc:	46e1      	mov	r9, ip
  4054be:	2301      	movs	r3, #1
  4054c0:	f7ff bb91 	b.w	404be6 <_vfiprintf_r+0x212>
  4054c4:	9b05      	ldr	r3, [sp, #20]
  4054c6:	4611      	mov	r1, r2
  4054c8:	2001      	movs	r0, #1
  4054ca:	4654      	mov	r4, sl
  4054cc:	2b00      	cmp	r3, #0
  4054ce:	f43f ade4 	beq.w	40509a <_vfiprintf_r+0x6c6>
  4054d2:	aa0c      	add	r2, sp, #48	; 0x30
  4054d4:	2302      	movs	r3, #2
  4054d6:	e88a 000c 	stmia.w	sl, {r2, r3}
  4054da:	461a      	mov	r2, r3
  4054dc:	e5d6      	b.n	40508c <_vfiprintf_r+0x6b8>
  4054de:	f018 0f10 	tst.w	r8, #16
  4054e2:	d10b      	bne.n	4054fc <_vfiprintf_r+0xb28>
  4054e4:	f018 0f40 	tst.w	r8, #64	; 0x40
  4054e8:	d008      	beq.n	4054fc <_vfiprintf_r+0xb28>
  4054ea:	9a04      	ldr	r2, [sp, #16]
  4054ec:	6813      	ldr	r3, [r2, #0]
  4054ee:	3204      	adds	r2, #4
  4054f0:	9204      	str	r2, [sp, #16]
  4054f2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  4054f6:	801a      	strh	r2, [r3, #0]
  4054f8:	f7ff ba9e 	b.w	404a38 <_vfiprintf_r+0x64>
  4054fc:	9a04      	ldr	r2, [sp, #16]
  4054fe:	6813      	ldr	r3, [r2, #0]
  405500:	3204      	adds	r2, #4
  405502:	9204      	str	r2, [sp, #16]
  405504:	9a02      	ldr	r2, [sp, #8]
  405506:	601a      	str	r2, [r3, #0]
  405508:	f7ff ba96 	b.w	404a38 <_vfiprintf_r+0x64>
  40550c:	9801      	ldr	r0, [sp, #4]
  40550e:	9900      	ldr	r1, [sp, #0]
  405510:	f8cd c020 	str.w	ip, [sp, #32]
  405514:	aa0d      	add	r2, sp, #52	; 0x34
  405516:	f7ff fa21 	bl	40495c <__sprint_r.part.0>
  40551a:	2800      	cmp	r0, #0
  40551c:	f47f ae1e 	bne.w	40515c <_vfiprintf_r+0x788>
  405520:	990e      	ldr	r1, [sp, #56]	; 0x38
  405522:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405524:	f8dd c020 	ldr.w	ip, [sp, #32]
  405528:	1c48      	adds	r0, r1, #1
  40552a:	4654      	mov	r4, sl
  40552c:	e591      	b.n	405052 <_vfiprintf_r+0x67e>
  40552e:	f048 0820 	orr.w	r8, r8, #32
  405532:	f10b 0001 	add.w	r0, fp, #1
  405536:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40553a:	f7ff bab4 	b.w	404aa6 <_vfiprintf_r+0xd2>
  40553e:	426d      	negs	r5, r5
  405540:	9304      	str	r3, [sp, #16]
  405542:	4658      	mov	r0, fp
  405544:	f7ff bbc6 	b.w	404cd4 <_vfiprintf_r+0x300>
  405548:	9807      	ldr	r0, [sp, #28]
  40554a:	9604      	str	r6, [sp, #16]
  40554c:	f7ff f9a4 	bl	404898 <strlen>
  405550:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  405554:	4681      	mov	r9, r0
  405556:	f04f 0c00 	mov.w	ip, #0
  40555a:	f7ff bb6d 	b.w	404c38 <_vfiprintf_r+0x264>
  40555e:	9801      	ldr	r0, [sp, #4]
  405560:	9900      	ldr	r1, [sp, #0]
  405562:	f8cd c014 	str.w	ip, [sp, #20]
  405566:	aa0d      	add	r2, sp, #52	; 0x34
  405568:	f7ff f9f8 	bl	40495c <__sprint_r.part.0>
  40556c:	2800      	cmp	r0, #0
  40556e:	f47f adf5 	bne.w	40515c <_vfiprintf_r+0x788>
  405572:	990e      	ldr	r1, [sp, #56]	; 0x38
  405574:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405576:	f8dd c014 	ldr.w	ip, [sp, #20]
  40557a:	1c48      	adds	r0, r1, #1
  40557c:	4654      	mov	r4, sl
  40557e:	e58c      	b.n	40509a <_vfiprintf_r+0x6c6>
  405580:	990e      	ldr	r1, [sp, #56]	; 0x38
  405582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405584:	4f15      	ldr	r7, [pc, #84]	; (4055dc <_vfiprintf_r+0xc08>)
  405586:	3101      	adds	r1, #1
  405588:	f7ff bb98 	b.w	404cbc <_vfiprintf_r+0x2e8>
  40558c:	f1bc 0f06 	cmp.w	ip, #6
  405590:	bf28      	it	cs
  405592:	f04f 0c06 	movcs.w	ip, #6
  405596:	4b12      	ldr	r3, [pc, #72]	; (4055e0 <_vfiprintf_r+0xc0c>)
  405598:	9604      	str	r6, [sp, #16]
  40559a:	46e1      	mov	r9, ip
  40559c:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  4055a0:	9307      	str	r3, [sp, #28]
  4055a2:	e460      	b.n	404e66 <_vfiprintf_r+0x492>
  4055a4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4055a6:	4f0d      	ldr	r7, [pc, #52]	; (4055dc <_vfiprintf_r+0xc08>)
  4055a8:	f101 0e01 	add.w	lr, r1, #1
  4055ac:	e618      	b.n	4051e0 <_vfiprintf_r+0x80c>
  4055ae:	46e1      	mov	r9, ip
  4055b0:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  4055b4:	9604      	str	r6, [sp, #16]
  4055b6:	4684      	mov	ip, r0
  4055b8:	f7ff bb3e 	b.w	404c38 <_vfiprintf_r+0x264>
  4055bc:	4686      	mov	lr, r0
  4055be:	e66b      	b.n	405298 <_vfiprintf_r+0x8c4>
  4055c0:	9a04      	ldr	r2, [sp, #16]
  4055c2:	f89b 3001 	ldrb.w	r3, [fp, #1]
  4055c6:	6816      	ldr	r6, [r2, #0]
  4055c8:	3204      	adds	r2, #4
  4055ca:	2e00      	cmp	r6, #0
  4055cc:	9204      	str	r2, [sp, #16]
  4055ce:	f6bf aa6a 	bge.w	404aa6 <_vfiprintf_r+0xd2>
  4055d2:	f04f 36ff 	mov.w	r6, #4294967295
  4055d6:	f7ff ba66 	b.w	404aa6 <_vfiprintf_r+0xd2>
  4055da:	bf00      	nop
  4055dc:	00407cf0 	.word	0x00407cf0
  4055e0:	00407ce8 	.word	0x00407ce8

004055e4 <__sbprintf>:
  4055e4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  4055e8:	460c      	mov	r4, r1
  4055ea:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4055ee:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  4055f2:	69e7      	ldr	r7, [r4, #28]
  4055f4:	6e49      	ldr	r1, [r1, #100]	; 0x64
  4055f6:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  4055fa:	9119      	str	r1, [sp, #100]	; 0x64
  4055fc:	ad1a      	add	r5, sp, #104	; 0x68
  4055fe:	f44f 6680 	mov.w	r6, #1024	; 0x400
  405602:	f02e 0e02 	bic.w	lr, lr, #2
  405606:	f04f 0c00 	mov.w	ip, #0
  40560a:	9707      	str	r7, [sp, #28]
  40560c:	4669      	mov	r1, sp
  40560e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405610:	9500      	str	r5, [sp, #0]
  405612:	9504      	str	r5, [sp, #16]
  405614:	9602      	str	r6, [sp, #8]
  405616:	9605      	str	r6, [sp, #20]
  405618:	f8ad e00c 	strh.w	lr, [sp, #12]
  40561c:	f8ad 900e 	strh.w	r9, [sp, #14]
  405620:	9709      	str	r7, [sp, #36]	; 0x24
  405622:	f8cd c018 	str.w	ip, [sp, #24]
  405626:	4606      	mov	r6, r0
  405628:	f7ff f9d4 	bl	4049d4 <_vfiprintf_r>
  40562c:	1e05      	subs	r5, r0, #0
  40562e:	db07      	blt.n	405640 <__sbprintf+0x5c>
  405630:	4630      	mov	r0, r6
  405632:	4669      	mov	r1, sp
  405634:	f000 f92e 	bl	405894 <_fflush_r>
  405638:	2800      	cmp	r0, #0
  40563a:	bf18      	it	ne
  40563c:	f04f 35ff 	movne.w	r5, #4294967295
  405640:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405644:	065b      	lsls	r3, r3, #25
  405646:	d503      	bpl.n	405650 <__sbprintf+0x6c>
  405648:	89a3      	ldrh	r3, [r4, #12]
  40564a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40564e:	81a3      	strh	r3, [r4, #12]
  405650:	4628      	mov	r0, r5
  405652:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405656:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  40565a:	bf00      	nop

0040565c <__swsetup_r>:
  40565c:	b538      	push	{r3, r4, r5, lr}
  40565e:	4b2f      	ldr	r3, [pc, #188]	; (40571c <__swsetup_r+0xc0>)
  405660:	681b      	ldr	r3, [r3, #0]
  405662:	4605      	mov	r5, r0
  405664:	460c      	mov	r4, r1
  405666:	b113      	cbz	r3, 40566e <__swsetup_r+0x12>
  405668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40566a:	2a00      	cmp	r2, #0
  40566c:	d036      	beq.n	4056dc <__swsetup_r+0x80>
  40566e:	89a2      	ldrh	r2, [r4, #12]
  405670:	b293      	uxth	r3, r2
  405672:	0718      	lsls	r0, r3, #28
  405674:	d50c      	bpl.n	405690 <__swsetup_r+0x34>
  405676:	6920      	ldr	r0, [r4, #16]
  405678:	b1a8      	cbz	r0, 4056a6 <__swsetup_r+0x4a>
  40567a:	f013 0201 	ands.w	r2, r3, #1
  40567e:	d01e      	beq.n	4056be <__swsetup_r+0x62>
  405680:	6963      	ldr	r3, [r4, #20]
  405682:	2200      	movs	r2, #0
  405684:	425b      	negs	r3, r3
  405686:	61a3      	str	r3, [r4, #24]
  405688:	60a2      	str	r2, [r4, #8]
  40568a:	b1f0      	cbz	r0, 4056ca <__swsetup_r+0x6e>
  40568c:	2000      	movs	r0, #0
  40568e:	bd38      	pop	{r3, r4, r5, pc}
  405690:	06d9      	lsls	r1, r3, #27
  405692:	d53b      	bpl.n	40570c <__swsetup_r+0xb0>
  405694:	0758      	lsls	r0, r3, #29
  405696:	d425      	bmi.n	4056e4 <__swsetup_r+0x88>
  405698:	6920      	ldr	r0, [r4, #16]
  40569a:	f042 0308 	orr.w	r3, r2, #8
  40569e:	81a3      	strh	r3, [r4, #12]
  4056a0:	b29b      	uxth	r3, r3
  4056a2:	2800      	cmp	r0, #0
  4056a4:	d1e9      	bne.n	40567a <__swsetup_r+0x1e>
  4056a6:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4056aa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4056ae:	d0e4      	beq.n	40567a <__swsetup_r+0x1e>
  4056b0:	4628      	mov	r0, r5
  4056b2:	4621      	mov	r1, r4
  4056b4:	f000 fcf2 	bl	40609c <__smakebuf_r>
  4056b8:	89a3      	ldrh	r3, [r4, #12]
  4056ba:	6920      	ldr	r0, [r4, #16]
  4056bc:	e7dd      	b.n	40567a <__swsetup_r+0x1e>
  4056be:	0799      	lsls	r1, r3, #30
  4056c0:	bf58      	it	pl
  4056c2:	6962      	ldrpl	r2, [r4, #20]
  4056c4:	60a2      	str	r2, [r4, #8]
  4056c6:	2800      	cmp	r0, #0
  4056c8:	d1e0      	bne.n	40568c <__swsetup_r+0x30>
  4056ca:	89a3      	ldrh	r3, [r4, #12]
  4056cc:	061a      	lsls	r2, r3, #24
  4056ce:	d5de      	bpl.n	40568e <__swsetup_r+0x32>
  4056d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4056d4:	81a3      	strh	r3, [r4, #12]
  4056d6:	f04f 30ff 	mov.w	r0, #4294967295
  4056da:	bd38      	pop	{r3, r4, r5, pc}
  4056dc:	4618      	mov	r0, r3
  4056de:	f000 f96d 	bl	4059bc <__sinit>
  4056e2:	e7c4      	b.n	40566e <__swsetup_r+0x12>
  4056e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4056e6:	b149      	cbz	r1, 4056fc <__swsetup_r+0xa0>
  4056e8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4056ec:	4299      	cmp	r1, r3
  4056ee:	d003      	beq.n	4056f8 <__swsetup_r+0x9c>
  4056f0:	4628      	mov	r0, r5
  4056f2:	f000 fa3b 	bl	405b6c <_free_r>
  4056f6:	89a2      	ldrh	r2, [r4, #12]
  4056f8:	2300      	movs	r3, #0
  4056fa:	6323      	str	r3, [r4, #48]	; 0x30
  4056fc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405700:	2300      	movs	r3, #0
  405702:	6920      	ldr	r0, [r4, #16]
  405704:	6063      	str	r3, [r4, #4]
  405706:	b292      	uxth	r2, r2
  405708:	6020      	str	r0, [r4, #0]
  40570a:	e7c6      	b.n	40569a <__swsetup_r+0x3e>
  40570c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405710:	2309      	movs	r3, #9
  405712:	602b      	str	r3, [r5, #0]
  405714:	f04f 30ff 	mov.w	r0, #4294967295
  405718:	81a2      	strh	r2, [r4, #12]
  40571a:	bd38      	pop	{r3, r4, r5, pc}
  40571c:	20000458 	.word	0x20000458

00405720 <register_fini>:
  405720:	4b02      	ldr	r3, [pc, #8]	; (40572c <register_fini+0xc>)
  405722:	b113      	cbz	r3, 40572a <register_fini+0xa>
  405724:	4802      	ldr	r0, [pc, #8]	; (405730 <register_fini+0x10>)
  405726:	f000 b805 	b.w	405734 <atexit>
  40572a:	4770      	bx	lr
  40572c:	00000000 	.word	0x00000000
  405730:	004059d1 	.word	0x004059d1

00405734 <atexit>:
  405734:	4601      	mov	r1, r0
  405736:	2000      	movs	r0, #0
  405738:	4602      	mov	r2, r0
  40573a:	4603      	mov	r3, r0
  40573c:	f001 bb54 	b.w	406de8 <__register_exitproc>

00405740 <__sflush_r>:
  405740:	898b      	ldrh	r3, [r1, #12]
  405742:	b29a      	uxth	r2, r3
  405744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405748:	460d      	mov	r5, r1
  40574a:	0711      	lsls	r1, r2, #28
  40574c:	4680      	mov	r8, r0
  40574e:	d43c      	bmi.n	4057ca <__sflush_r+0x8a>
  405750:	686a      	ldr	r2, [r5, #4]
  405752:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405756:	2a00      	cmp	r2, #0
  405758:	81ab      	strh	r3, [r5, #12]
  40575a:	dd65      	ble.n	405828 <__sflush_r+0xe8>
  40575c:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40575e:	2e00      	cmp	r6, #0
  405760:	d04b      	beq.n	4057fa <__sflush_r+0xba>
  405762:	b29b      	uxth	r3, r3
  405764:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  405768:	2100      	movs	r1, #0
  40576a:	b292      	uxth	r2, r2
  40576c:	f8d8 4000 	ldr.w	r4, [r8]
  405770:	f8c8 1000 	str.w	r1, [r8]
  405774:	2a00      	cmp	r2, #0
  405776:	d05b      	beq.n	405830 <__sflush_r+0xf0>
  405778:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40577a:	075f      	lsls	r7, r3, #29
  40577c:	d505      	bpl.n	40578a <__sflush_r+0x4a>
  40577e:	6869      	ldr	r1, [r5, #4]
  405780:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405782:	1a52      	subs	r2, r2, r1
  405784:	b10b      	cbz	r3, 40578a <__sflush_r+0x4a>
  405786:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405788:	1ad2      	subs	r2, r2, r3
  40578a:	4640      	mov	r0, r8
  40578c:	69e9      	ldr	r1, [r5, #28]
  40578e:	2300      	movs	r3, #0
  405790:	47b0      	blx	r6
  405792:	1c46      	adds	r6, r0, #1
  405794:	d056      	beq.n	405844 <__sflush_r+0x104>
  405796:	89ab      	ldrh	r3, [r5, #12]
  405798:	692a      	ldr	r2, [r5, #16]
  40579a:	602a      	str	r2, [r5, #0]
  40579c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4057a0:	b29b      	uxth	r3, r3
  4057a2:	2200      	movs	r2, #0
  4057a4:	606a      	str	r2, [r5, #4]
  4057a6:	04da      	lsls	r2, r3, #19
  4057a8:	81ab      	strh	r3, [r5, #12]
  4057aa:	d43b      	bmi.n	405824 <__sflush_r+0xe4>
  4057ac:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4057ae:	f8c8 4000 	str.w	r4, [r8]
  4057b2:	b311      	cbz	r1, 4057fa <__sflush_r+0xba>
  4057b4:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4057b8:	4299      	cmp	r1, r3
  4057ba:	d002      	beq.n	4057c2 <__sflush_r+0x82>
  4057bc:	4640      	mov	r0, r8
  4057be:	f000 f9d5 	bl	405b6c <_free_r>
  4057c2:	2000      	movs	r0, #0
  4057c4:	6328      	str	r0, [r5, #48]	; 0x30
  4057c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4057ca:	692e      	ldr	r6, [r5, #16]
  4057cc:	b1ae      	cbz	r6, 4057fa <__sflush_r+0xba>
  4057ce:	682c      	ldr	r4, [r5, #0]
  4057d0:	602e      	str	r6, [r5, #0]
  4057d2:	0791      	lsls	r1, r2, #30
  4057d4:	bf0c      	ite	eq
  4057d6:	696b      	ldreq	r3, [r5, #20]
  4057d8:	2300      	movne	r3, #0
  4057da:	1ba4      	subs	r4, r4, r6
  4057dc:	60ab      	str	r3, [r5, #8]
  4057de:	e00a      	b.n	4057f6 <__sflush_r+0xb6>
  4057e0:	4632      	mov	r2, r6
  4057e2:	4623      	mov	r3, r4
  4057e4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4057e6:	69e9      	ldr	r1, [r5, #28]
  4057e8:	4640      	mov	r0, r8
  4057ea:	47b8      	blx	r7
  4057ec:	2800      	cmp	r0, #0
  4057ee:	eba4 0400 	sub.w	r4, r4, r0
  4057f2:	4406      	add	r6, r0
  4057f4:	dd04      	ble.n	405800 <__sflush_r+0xc0>
  4057f6:	2c00      	cmp	r4, #0
  4057f8:	dcf2      	bgt.n	4057e0 <__sflush_r+0xa0>
  4057fa:	2000      	movs	r0, #0
  4057fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405800:	89ab      	ldrh	r3, [r5, #12]
  405802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405806:	81ab      	strh	r3, [r5, #12]
  405808:	f04f 30ff 	mov.w	r0, #4294967295
  40580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405810:	89ab      	ldrh	r3, [r5, #12]
  405812:	692a      	ldr	r2, [r5, #16]
  405814:	6069      	str	r1, [r5, #4]
  405816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40581a:	b29b      	uxth	r3, r3
  40581c:	81ab      	strh	r3, [r5, #12]
  40581e:	04db      	lsls	r3, r3, #19
  405820:	602a      	str	r2, [r5, #0]
  405822:	d5c3      	bpl.n	4057ac <__sflush_r+0x6c>
  405824:	6528      	str	r0, [r5, #80]	; 0x50
  405826:	e7c1      	b.n	4057ac <__sflush_r+0x6c>
  405828:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40582a:	2a00      	cmp	r2, #0
  40582c:	dc96      	bgt.n	40575c <__sflush_r+0x1c>
  40582e:	e7e4      	b.n	4057fa <__sflush_r+0xba>
  405830:	2301      	movs	r3, #1
  405832:	4640      	mov	r0, r8
  405834:	69e9      	ldr	r1, [r5, #28]
  405836:	47b0      	blx	r6
  405838:	1c43      	adds	r3, r0, #1
  40583a:	4602      	mov	r2, r0
  40583c:	d019      	beq.n	405872 <__sflush_r+0x132>
  40583e:	89ab      	ldrh	r3, [r5, #12]
  405840:	6aae      	ldr	r6, [r5, #40]	; 0x28
  405842:	e79a      	b.n	40577a <__sflush_r+0x3a>
  405844:	f8d8 1000 	ldr.w	r1, [r8]
  405848:	2900      	cmp	r1, #0
  40584a:	d0e1      	beq.n	405810 <__sflush_r+0xd0>
  40584c:	291d      	cmp	r1, #29
  40584e:	d007      	beq.n	405860 <__sflush_r+0x120>
  405850:	2916      	cmp	r1, #22
  405852:	d005      	beq.n	405860 <__sflush_r+0x120>
  405854:	89ab      	ldrh	r3, [r5, #12]
  405856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40585a:	81ab      	strh	r3, [r5, #12]
  40585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405860:	89ab      	ldrh	r3, [r5, #12]
  405862:	692a      	ldr	r2, [r5, #16]
  405864:	602a      	str	r2, [r5, #0]
  405866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40586a:	2200      	movs	r2, #0
  40586c:	81ab      	strh	r3, [r5, #12]
  40586e:	606a      	str	r2, [r5, #4]
  405870:	e79c      	b.n	4057ac <__sflush_r+0x6c>
  405872:	f8d8 3000 	ldr.w	r3, [r8]
  405876:	2b00      	cmp	r3, #0
  405878:	d0e1      	beq.n	40583e <__sflush_r+0xfe>
  40587a:	2b1d      	cmp	r3, #29
  40587c:	d007      	beq.n	40588e <__sflush_r+0x14e>
  40587e:	2b16      	cmp	r3, #22
  405880:	d005      	beq.n	40588e <__sflush_r+0x14e>
  405882:	89ab      	ldrh	r3, [r5, #12]
  405884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405888:	81ab      	strh	r3, [r5, #12]
  40588a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40588e:	f8c8 4000 	str.w	r4, [r8]
  405892:	e7b2      	b.n	4057fa <__sflush_r+0xba>

00405894 <_fflush_r>:
  405894:	b510      	push	{r4, lr}
  405896:	4604      	mov	r4, r0
  405898:	b082      	sub	sp, #8
  40589a:	b108      	cbz	r0, 4058a0 <_fflush_r+0xc>
  40589c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40589e:	b153      	cbz	r3, 4058b6 <_fflush_r+0x22>
  4058a0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4058a4:	b908      	cbnz	r0, 4058aa <_fflush_r+0x16>
  4058a6:	b002      	add	sp, #8
  4058a8:	bd10      	pop	{r4, pc}
  4058aa:	4620      	mov	r0, r4
  4058ac:	b002      	add	sp, #8
  4058ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4058b2:	f7ff bf45 	b.w	405740 <__sflush_r>
  4058b6:	9101      	str	r1, [sp, #4]
  4058b8:	f000 f880 	bl	4059bc <__sinit>
  4058bc:	9901      	ldr	r1, [sp, #4]
  4058be:	e7ef      	b.n	4058a0 <_fflush_r+0xc>

004058c0 <_cleanup_r>:
  4058c0:	4901      	ldr	r1, [pc, #4]	; (4058c8 <_cleanup_r+0x8>)
  4058c2:	f000 bbb7 	b.w	406034 <_fwalk_reent>
  4058c6:	bf00      	nop
  4058c8:	00406eb1 	.word	0x00406eb1

004058cc <__sinit.part.1>:
  4058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058d0:	4b35      	ldr	r3, [pc, #212]	; (4059a8 <__sinit.part.1+0xdc>)
  4058d2:	6845      	ldr	r5, [r0, #4]
  4058d4:	63c3      	str	r3, [r0, #60]	; 0x3c
  4058d6:	2400      	movs	r4, #0
  4058d8:	4607      	mov	r7, r0
  4058da:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4058de:	2304      	movs	r3, #4
  4058e0:	2103      	movs	r1, #3
  4058e2:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4058e6:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4058ea:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4058ee:	b083      	sub	sp, #12
  4058f0:	602c      	str	r4, [r5, #0]
  4058f2:	606c      	str	r4, [r5, #4]
  4058f4:	60ac      	str	r4, [r5, #8]
  4058f6:	666c      	str	r4, [r5, #100]	; 0x64
  4058f8:	81ec      	strh	r4, [r5, #14]
  4058fa:	612c      	str	r4, [r5, #16]
  4058fc:	616c      	str	r4, [r5, #20]
  4058fe:	61ac      	str	r4, [r5, #24]
  405900:	81ab      	strh	r3, [r5, #12]
  405902:	4621      	mov	r1, r4
  405904:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405908:	2208      	movs	r2, #8
  40590a:	f7fe febd 	bl	404688 <memset>
  40590e:	68be      	ldr	r6, [r7, #8]
  405910:	f8df b098 	ldr.w	fp, [pc, #152]	; 4059ac <__sinit.part.1+0xe0>
  405914:	f8df a098 	ldr.w	sl, [pc, #152]	; 4059b0 <__sinit.part.1+0xe4>
  405918:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4059b4 <__sinit.part.1+0xe8>
  40591c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4059b8 <__sinit.part.1+0xec>
  405920:	f8c5 b020 	str.w	fp, [r5, #32]
  405924:	2301      	movs	r3, #1
  405926:	2209      	movs	r2, #9
  405928:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40592c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  405930:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  405934:	61ed      	str	r5, [r5, #28]
  405936:	4621      	mov	r1, r4
  405938:	81f3      	strh	r3, [r6, #14]
  40593a:	81b2      	strh	r2, [r6, #12]
  40593c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  405940:	6034      	str	r4, [r6, #0]
  405942:	6074      	str	r4, [r6, #4]
  405944:	60b4      	str	r4, [r6, #8]
  405946:	6674      	str	r4, [r6, #100]	; 0x64
  405948:	6134      	str	r4, [r6, #16]
  40594a:	6174      	str	r4, [r6, #20]
  40594c:	61b4      	str	r4, [r6, #24]
  40594e:	2208      	movs	r2, #8
  405950:	9301      	str	r3, [sp, #4]
  405952:	f7fe fe99 	bl	404688 <memset>
  405956:	68fd      	ldr	r5, [r7, #12]
  405958:	61f6      	str	r6, [r6, #28]
  40595a:	2012      	movs	r0, #18
  40595c:	2202      	movs	r2, #2
  40595e:	f8c6 b020 	str.w	fp, [r6, #32]
  405962:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  405966:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40596a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40596e:	4621      	mov	r1, r4
  405970:	81a8      	strh	r0, [r5, #12]
  405972:	81ea      	strh	r2, [r5, #14]
  405974:	602c      	str	r4, [r5, #0]
  405976:	606c      	str	r4, [r5, #4]
  405978:	60ac      	str	r4, [r5, #8]
  40597a:	666c      	str	r4, [r5, #100]	; 0x64
  40597c:	612c      	str	r4, [r5, #16]
  40597e:	616c      	str	r4, [r5, #20]
  405980:	61ac      	str	r4, [r5, #24]
  405982:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405986:	2208      	movs	r2, #8
  405988:	f7fe fe7e 	bl	404688 <memset>
  40598c:	9b01      	ldr	r3, [sp, #4]
  40598e:	61ed      	str	r5, [r5, #28]
  405990:	f8c5 b020 	str.w	fp, [r5, #32]
  405994:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  405998:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40599c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4059a0:	63bb      	str	r3, [r7, #56]	; 0x38
  4059a2:	b003      	add	sp, #12
  4059a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059a8:	004058c1 	.word	0x004058c1
  4059ac:	00406c25 	.word	0x00406c25
  4059b0:	00406c49 	.word	0x00406c49
  4059b4:	00406c81 	.word	0x00406c81
  4059b8:	00406ca1 	.word	0x00406ca1

004059bc <__sinit>:
  4059bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4059be:	b103      	cbz	r3, 4059c2 <__sinit+0x6>
  4059c0:	4770      	bx	lr
  4059c2:	f7ff bf83 	b.w	4058cc <__sinit.part.1>
  4059c6:	bf00      	nop

004059c8 <__sfp_lock_acquire>:
  4059c8:	4770      	bx	lr
  4059ca:	bf00      	nop

004059cc <__sfp_lock_release>:
  4059cc:	4770      	bx	lr
  4059ce:	bf00      	nop

004059d0 <__libc_fini_array>:
  4059d0:	b538      	push	{r3, r4, r5, lr}
  4059d2:	4b08      	ldr	r3, [pc, #32]	; (4059f4 <__libc_fini_array+0x24>)
  4059d4:	4d08      	ldr	r5, [pc, #32]	; (4059f8 <__libc_fini_array+0x28>)
  4059d6:	1aed      	subs	r5, r5, r3
  4059d8:	10ac      	asrs	r4, r5, #2
  4059da:	bf18      	it	ne
  4059dc:	18ed      	addne	r5, r5, r3
  4059de:	d005      	beq.n	4059ec <__libc_fini_array+0x1c>
  4059e0:	3c01      	subs	r4, #1
  4059e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4059e6:	4798      	blx	r3
  4059e8:	2c00      	cmp	r4, #0
  4059ea:	d1f9      	bne.n	4059e0 <__libc_fini_array+0x10>
  4059ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4059f0:	f002 b990 	b.w	407d14 <_fini>
  4059f4:	00407d20 	.word	0x00407d20
  4059f8:	00407d24 	.word	0x00407d24

004059fc <__fputwc>:
  4059fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a00:	b082      	sub	sp, #8
  405a02:	4607      	mov	r7, r0
  405a04:	460e      	mov	r6, r1
  405a06:	4614      	mov	r4, r2
  405a08:	f000 fb42 	bl	406090 <__locale_mb_cur_max>
  405a0c:	2801      	cmp	r0, #1
  405a0e:	d041      	beq.n	405a94 <__fputwc+0x98>
  405a10:	4638      	mov	r0, r7
  405a12:	a901      	add	r1, sp, #4
  405a14:	4632      	mov	r2, r6
  405a16:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405a1a:	f001 f999 	bl	406d50 <_wcrtomb_r>
  405a1e:	f1b0 3fff 	cmp.w	r0, #4294967295
  405a22:	4680      	mov	r8, r0
  405a24:	d02f      	beq.n	405a86 <__fputwc+0x8a>
  405a26:	2800      	cmp	r0, #0
  405a28:	d03c      	beq.n	405aa4 <__fputwc+0xa8>
  405a2a:	f89d 1004 	ldrb.w	r1, [sp, #4]
  405a2e:	2500      	movs	r5, #0
  405a30:	e009      	b.n	405a46 <__fputwc+0x4a>
  405a32:	6823      	ldr	r3, [r4, #0]
  405a34:	7019      	strb	r1, [r3, #0]
  405a36:	6823      	ldr	r3, [r4, #0]
  405a38:	3301      	adds	r3, #1
  405a3a:	6023      	str	r3, [r4, #0]
  405a3c:	3501      	adds	r5, #1
  405a3e:	45a8      	cmp	r8, r5
  405a40:	d930      	bls.n	405aa4 <__fputwc+0xa8>
  405a42:	ab01      	add	r3, sp, #4
  405a44:	5d59      	ldrb	r1, [r3, r5]
  405a46:	68a3      	ldr	r3, [r4, #8]
  405a48:	3b01      	subs	r3, #1
  405a4a:	2b00      	cmp	r3, #0
  405a4c:	60a3      	str	r3, [r4, #8]
  405a4e:	daf0      	bge.n	405a32 <__fputwc+0x36>
  405a50:	69a2      	ldr	r2, [r4, #24]
  405a52:	4293      	cmp	r3, r2
  405a54:	db07      	blt.n	405a66 <__fputwc+0x6a>
  405a56:	6823      	ldr	r3, [r4, #0]
  405a58:	7019      	strb	r1, [r3, #0]
  405a5a:	6823      	ldr	r3, [r4, #0]
  405a5c:	7819      	ldrb	r1, [r3, #0]
  405a5e:	290a      	cmp	r1, #10
  405a60:	f103 0301 	add.w	r3, r3, #1
  405a64:	d1e9      	bne.n	405a3a <__fputwc+0x3e>
  405a66:	4638      	mov	r0, r7
  405a68:	4622      	mov	r2, r4
  405a6a:	f001 f91d 	bl	406ca8 <__swbuf_r>
  405a6e:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  405a72:	fab0 f080 	clz	r0, r0
  405a76:	0940      	lsrs	r0, r0, #5
  405a78:	2800      	cmp	r0, #0
  405a7a:	d0df      	beq.n	405a3c <__fputwc+0x40>
  405a7c:	f04f 30ff 	mov.w	r0, #4294967295
  405a80:	b002      	add	sp, #8
  405a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a86:	89a3      	ldrh	r3, [r4, #12]
  405a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405a8c:	81a3      	strh	r3, [r4, #12]
  405a8e:	b002      	add	sp, #8
  405a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a94:	1e73      	subs	r3, r6, #1
  405a96:	2bfe      	cmp	r3, #254	; 0xfe
  405a98:	d8ba      	bhi.n	405a10 <__fputwc+0x14>
  405a9a:	b2f1      	uxtb	r1, r6
  405a9c:	4680      	mov	r8, r0
  405a9e:	f88d 1004 	strb.w	r1, [sp, #4]
  405aa2:	e7c4      	b.n	405a2e <__fputwc+0x32>
  405aa4:	4630      	mov	r0, r6
  405aa6:	b002      	add	sp, #8
  405aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405aac <_fputwc_r>:
  405aac:	8993      	ldrh	r3, [r2, #12]
  405aae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  405ab2:	d10b      	bne.n	405acc <_fputwc_r+0x20>
  405ab4:	b410      	push	{r4}
  405ab6:	6e54      	ldr	r4, [r2, #100]	; 0x64
  405ab8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405abc:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  405ac0:	6654      	str	r4, [r2, #100]	; 0x64
  405ac2:	8193      	strh	r3, [r2, #12]
  405ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
  405ac8:	f7ff bf98 	b.w	4059fc <__fputwc>
  405acc:	f7ff bf96 	b.w	4059fc <__fputwc>

00405ad0 <_malloc_trim_r>:
  405ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405ad2:	4f23      	ldr	r7, [pc, #140]	; (405b60 <_malloc_trim_r+0x90>)
  405ad4:	460c      	mov	r4, r1
  405ad6:	4606      	mov	r6, r0
  405ad8:	f000 fe98 	bl	40680c <__malloc_lock>
  405adc:	68bb      	ldr	r3, [r7, #8]
  405ade:	685d      	ldr	r5, [r3, #4]
  405ae0:	f025 0503 	bic.w	r5, r5, #3
  405ae4:	1b29      	subs	r1, r5, r4
  405ae6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  405aea:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405aee:	f021 010f 	bic.w	r1, r1, #15
  405af2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405af6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405afa:	db07      	blt.n	405b0c <_malloc_trim_r+0x3c>
  405afc:	4630      	mov	r0, r6
  405afe:	2100      	movs	r1, #0
  405b00:	f001 f87e 	bl	406c00 <_sbrk_r>
  405b04:	68bb      	ldr	r3, [r7, #8]
  405b06:	442b      	add	r3, r5
  405b08:	4298      	cmp	r0, r3
  405b0a:	d004      	beq.n	405b16 <_malloc_trim_r+0x46>
  405b0c:	4630      	mov	r0, r6
  405b0e:	f000 fe7f 	bl	406810 <__malloc_unlock>
  405b12:	2000      	movs	r0, #0
  405b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b16:	4630      	mov	r0, r6
  405b18:	4261      	negs	r1, r4
  405b1a:	f001 f871 	bl	406c00 <_sbrk_r>
  405b1e:	3001      	adds	r0, #1
  405b20:	d00d      	beq.n	405b3e <_malloc_trim_r+0x6e>
  405b22:	4b10      	ldr	r3, [pc, #64]	; (405b64 <_malloc_trim_r+0x94>)
  405b24:	68ba      	ldr	r2, [r7, #8]
  405b26:	6819      	ldr	r1, [r3, #0]
  405b28:	1b2d      	subs	r5, r5, r4
  405b2a:	f045 0501 	orr.w	r5, r5, #1
  405b2e:	4630      	mov	r0, r6
  405b30:	1b09      	subs	r1, r1, r4
  405b32:	6055      	str	r5, [r2, #4]
  405b34:	6019      	str	r1, [r3, #0]
  405b36:	f000 fe6b 	bl	406810 <__malloc_unlock>
  405b3a:	2001      	movs	r0, #1
  405b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b3e:	4630      	mov	r0, r6
  405b40:	2100      	movs	r1, #0
  405b42:	f001 f85d 	bl	406c00 <_sbrk_r>
  405b46:	68ba      	ldr	r2, [r7, #8]
  405b48:	1a83      	subs	r3, r0, r2
  405b4a:	2b0f      	cmp	r3, #15
  405b4c:	ddde      	ble.n	405b0c <_malloc_trim_r+0x3c>
  405b4e:	4c06      	ldr	r4, [pc, #24]	; (405b68 <_malloc_trim_r+0x98>)
  405b50:	4904      	ldr	r1, [pc, #16]	; (405b64 <_malloc_trim_r+0x94>)
  405b52:	6824      	ldr	r4, [r4, #0]
  405b54:	f043 0301 	orr.w	r3, r3, #1
  405b58:	1b00      	subs	r0, r0, r4
  405b5a:	6053      	str	r3, [r2, #4]
  405b5c:	6008      	str	r0, [r1, #0]
  405b5e:	e7d5      	b.n	405b0c <_malloc_trim_r+0x3c>
  405b60:	20000480 	.word	0x20000480
  405b64:	2001bc28 	.word	0x2001bc28
  405b68:	2000088c 	.word	0x2000088c

00405b6c <_free_r>:
  405b6c:	2900      	cmp	r1, #0
  405b6e:	d04e      	beq.n	405c0e <_free_r+0xa2>
  405b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405b74:	460c      	mov	r4, r1
  405b76:	4680      	mov	r8, r0
  405b78:	f000 fe48 	bl	40680c <__malloc_lock>
  405b7c:	f854 7c04 	ldr.w	r7, [r4, #-4]
  405b80:	4962      	ldr	r1, [pc, #392]	; (405d0c <_free_r+0x1a0>)
  405b82:	f027 0201 	bic.w	r2, r7, #1
  405b86:	f1a4 0508 	sub.w	r5, r4, #8
  405b8a:	18ab      	adds	r3, r5, r2
  405b8c:	688e      	ldr	r6, [r1, #8]
  405b8e:	6858      	ldr	r0, [r3, #4]
  405b90:	429e      	cmp	r6, r3
  405b92:	f020 0003 	bic.w	r0, r0, #3
  405b96:	d05a      	beq.n	405c4e <_free_r+0xe2>
  405b98:	07fe      	lsls	r6, r7, #31
  405b9a:	6058      	str	r0, [r3, #4]
  405b9c:	d40b      	bmi.n	405bb6 <_free_r+0x4a>
  405b9e:	f854 7c08 	ldr.w	r7, [r4, #-8]
  405ba2:	1bed      	subs	r5, r5, r7
  405ba4:	f101 0e08 	add.w	lr, r1, #8
  405ba8:	68ac      	ldr	r4, [r5, #8]
  405baa:	4574      	cmp	r4, lr
  405bac:	443a      	add	r2, r7
  405bae:	d067      	beq.n	405c80 <_free_r+0x114>
  405bb0:	68ef      	ldr	r7, [r5, #12]
  405bb2:	60e7      	str	r7, [r4, #12]
  405bb4:	60bc      	str	r4, [r7, #8]
  405bb6:	181c      	adds	r4, r3, r0
  405bb8:	6864      	ldr	r4, [r4, #4]
  405bba:	07e4      	lsls	r4, r4, #31
  405bbc:	d40c      	bmi.n	405bd8 <_free_r+0x6c>
  405bbe:	4f54      	ldr	r7, [pc, #336]	; (405d10 <_free_r+0x1a4>)
  405bc0:	689c      	ldr	r4, [r3, #8]
  405bc2:	42bc      	cmp	r4, r7
  405bc4:	4402      	add	r2, r0
  405bc6:	d07c      	beq.n	405cc2 <_free_r+0x156>
  405bc8:	68d8      	ldr	r0, [r3, #12]
  405bca:	60e0      	str	r0, [r4, #12]
  405bcc:	f042 0301 	orr.w	r3, r2, #1
  405bd0:	6084      	str	r4, [r0, #8]
  405bd2:	606b      	str	r3, [r5, #4]
  405bd4:	50aa      	str	r2, [r5, r2]
  405bd6:	e003      	b.n	405be0 <_free_r+0x74>
  405bd8:	f042 0301 	orr.w	r3, r2, #1
  405bdc:	606b      	str	r3, [r5, #4]
  405bde:	50aa      	str	r2, [r5, r2]
  405be0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405be4:	d214      	bcs.n	405c10 <_free_r+0xa4>
  405be6:	08d2      	lsrs	r2, r2, #3
  405be8:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  405bec:	6848      	ldr	r0, [r1, #4]
  405bee:	689f      	ldr	r7, [r3, #8]
  405bf0:	60af      	str	r7, [r5, #8]
  405bf2:	1092      	asrs	r2, r2, #2
  405bf4:	2401      	movs	r4, #1
  405bf6:	fa04 f202 	lsl.w	r2, r4, r2
  405bfa:	4310      	orrs	r0, r2
  405bfc:	60eb      	str	r3, [r5, #12]
  405bfe:	6048      	str	r0, [r1, #4]
  405c00:	609d      	str	r5, [r3, #8]
  405c02:	60fd      	str	r5, [r7, #12]
  405c04:	4640      	mov	r0, r8
  405c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c0a:	f000 be01 	b.w	406810 <__malloc_unlock>
  405c0e:	4770      	bx	lr
  405c10:	0a53      	lsrs	r3, r2, #9
  405c12:	2b04      	cmp	r3, #4
  405c14:	d847      	bhi.n	405ca6 <_free_r+0x13a>
  405c16:	0993      	lsrs	r3, r2, #6
  405c18:	f103 0438 	add.w	r4, r3, #56	; 0x38
  405c1c:	0060      	lsls	r0, r4, #1
  405c1e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  405c22:	493a      	ldr	r1, [pc, #232]	; (405d0c <_free_r+0x1a0>)
  405c24:	6883      	ldr	r3, [r0, #8]
  405c26:	4283      	cmp	r3, r0
  405c28:	d043      	beq.n	405cb2 <_free_r+0x146>
  405c2a:	6859      	ldr	r1, [r3, #4]
  405c2c:	f021 0103 	bic.w	r1, r1, #3
  405c30:	4291      	cmp	r1, r2
  405c32:	d902      	bls.n	405c3a <_free_r+0xce>
  405c34:	689b      	ldr	r3, [r3, #8]
  405c36:	4298      	cmp	r0, r3
  405c38:	d1f7      	bne.n	405c2a <_free_r+0xbe>
  405c3a:	68da      	ldr	r2, [r3, #12]
  405c3c:	60ea      	str	r2, [r5, #12]
  405c3e:	60ab      	str	r3, [r5, #8]
  405c40:	4640      	mov	r0, r8
  405c42:	6095      	str	r5, [r2, #8]
  405c44:	60dd      	str	r5, [r3, #12]
  405c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c4a:	f000 bde1 	b.w	406810 <__malloc_unlock>
  405c4e:	07ff      	lsls	r7, r7, #31
  405c50:	4402      	add	r2, r0
  405c52:	d407      	bmi.n	405c64 <_free_r+0xf8>
  405c54:	f854 3c08 	ldr.w	r3, [r4, #-8]
  405c58:	1aed      	subs	r5, r5, r3
  405c5a:	441a      	add	r2, r3
  405c5c:	68a8      	ldr	r0, [r5, #8]
  405c5e:	68eb      	ldr	r3, [r5, #12]
  405c60:	60c3      	str	r3, [r0, #12]
  405c62:	6098      	str	r0, [r3, #8]
  405c64:	4b2b      	ldr	r3, [pc, #172]	; (405d14 <_free_r+0x1a8>)
  405c66:	681b      	ldr	r3, [r3, #0]
  405c68:	f042 0001 	orr.w	r0, r2, #1
  405c6c:	429a      	cmp	r2, r3
  405c6e:	6068      	str	r0, [r5, #4]
  405c70:	608d      	str	r5, [r1, #8]
  405c72:	d3c7      	bcc.n	405c04 <_free_r+0x98>
  405c74:	4b28      	ldr	r3, [pc, #160]	; (405d18 <_free_r+0x1ac>)
  405c76:	4640      	mov	r0, r8
  405c78:	6819      	ldr	r1, [r3, #0]
  405c7a:	f7ff ff29 	bl	405ad0 <_malloc_trim_r>
  405c7e:	e7c1      	b.n	405c04 <_free_r+0x98>
  405c80:	1819      	adds	r1, r3, r0
  405c82:	6849      	ldr	r1, [r1, #4]
  405c84:	07c9      	lsls	r1, r1, #31
  405c86:	d409      	bmi.n	405c9c <_free_r+0x130>
  405c88:	68d9      	ldr	r1, [r3, #12]
  405c8a:	689b      	ldr	r3, [r3, #8]
  405c8c:	4402      	add	r2, r0
  405c8e:	f042 0001 	orr.w	r0, r2, #1
  405c92:	60d9      	str	r1, [r3, #12]
  405c94:	608b      	str	r3, [r1, #8]
  405c96:	6068      	str	r0, [r5, #4]
  405c98:	50aa      	str	r2, [r5, r2]
  405c9a:	e7b3      	b.n	405c04 <_free_r+0x98>
  405c9c:	f042 0301 	orr.w	r3, r2, #1
  405ca0:	606b      	str	r3, [r5, #4]
  405ca2:	50aa      	str	r2, [r5, r2]
  405ca4:	e7ae      	b.n	405c04 <_free_r+0x98>
  405ca6:	2b14      	cmp	r3, #20
  405ca8:	d814      	bhi.n	405cd4 <_free_r+0x168>
  405caa:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  405cae:	0060      	lsls	r0, r4, #1
  405cb0:	e7b5      	b.n	405c1e <_free_r+0xb2>
  405cb2:	684a      	ldr	r2, [r1, #4]
  405cb4:	10a4      	asrs	r4, r4, #2
  405cb6:	2001      	movs	r0, #1
  405cb8:	40a0      	lsls	r0, r4
  405cba:	4302      	orrs	r2, r0
  405cbc:	604a      	str	r2, [r1, #4]
  405cbe:	461a      	mov	r2, r3
  405cc0:	e7bc      	b.n	405c3c <_free_r+0xd0>
  405cc2:	f042 0301 	orr.w	r3, r2, #1
  405cc6:	614d      	str	r5, [r1, #20]
  405cc8:	610d      	str	r5, [r1, #16]
  405cca:	60ec      	str	r4, [r5, #12]
  405ccc:	60ac      	str	r4, [r5, #8]
  405cce:	606b      	str	r3, [r5, #4]
  405cd0:	50aa      	str	r2, [r5, r2]
  405cd2:	e797      	b.n	405c04 <_free_r+0x98>
  405cd4:	2b54      	cmp	r3, #84	; 0x54
  405cd6:	d804      	bhi.n	405ce2 <_free_r+0x176>
  405cd8:	0b13      	lsrs	r3, r2, #12
  405cda:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  405cde:	0060      	lsls	r0, r4, #1
  405ce0:	e79d      	b.n	405c1e <_free_r+0xb2>
  405ce2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405ce6:	d804      	bhi.n	405cf2 <_free_r+0x186>
  405ce8:	0bd3      	lsrs	r3, r2, #15
  405cea:	f103 0477 	add.w	r4, r3, #119	; 0x77
  405cee:	0060      	lsls	r0, r4, #1
  405cf0:	e795      	b.n	405c1e <_free_r+0xb2>
  405cf2:	f240 5054 	movw	r0, #1364	; 0x554
  405cf6:	4283      	cmp	r3, r0
  405cf8:	d804      	bhi.n	405d04 <_free_r+0x198>
  405cfa:	0c93      	lsrs	r3, r2, #18
  405cfc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  405d00:	0060      	lsls	r0, r4, #1
  405d02:	e78c      	b.n	405c1e <_free_r+0xb2>
  405d04:	20fc      	movs	r0, #252	; 0xfc
  405d06:	247e      	movs	r4, #126	; 0x7e
  405d08:	e789      	b.n	405c1e <_free_r+0xb2>
  405d0a:	bf00      	nop
  405d0c:	20000480 	.word	0x20000480
  405d10:	20000488 	.word	0x20000488
  405d14:	20000888 	.word	0x20000888
  405d18:	2001bc24 	.word	0x2001bc24

00405d1c <__sfvwrite_r>:
  405d1c:	6893      	ldr	r3, [r2, #8]
  405d1e:	2b00      	cmp	r3, #0
  405d20:	d07a      	beq.n	405e18 <__sfvwrite_r+0xfc>
  405d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d26:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  405d2a:	f01e 0f08 	tst.w	lr, #8
  405d2e:	b083      	sub	sp, #12
  405d30:	460c      	mov	r4, r1
  405d32:	4681      	mov	r9, r0
  405d34:	4616      	mov	r6, r2
  405d36:	d026      	beq.n	405d86 <__sfvwrite_r+0x6a>
  405d38:	690b      	ldr	r3, [r1, #16]
  405d3a:	b323      	cbz	r3, 405d86 <__sfvwrite_r+0x6a>
  405d3c:	f00e 0802 	and.w	r8, lr, #2
  405d40:	fa1f f088 	uxth.w	r0, r8
  405d44:	6835      	ldr	r5, [r6, #0]
  405d46:	b370      	cbz	r0, 405da6 <__sfvwrite_r+0x8a>
  405d48:	f04f 0a00 	mov.w	sl, #0
  405d4c:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 406030 <__sfvwrite_r+0x314>
  405d50:	46d0      	mov	r8, sl
  405d52:	45d8      	cmp	r8, fp
  405d54:	4643      	mov	r3, r8
  405d56:	4652      	mov	r2, sl
  405d58:	bf28      	it	cs
  405d5a:	465b      	movcs	r3, fp
  405d5c:	4648      	mov	r0, r9
  405d5e:	f1b8 0f00 	cmp.w	r8, #0
  405d62:	d053      	beq.n	405e0c <__sfvwrite_r+0xf0>
  405d64:	69e1      	ldr	r1, [r4, #28]
  405d66:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405d68:	47b8      	blx	r7
  405d6a:	2800      	cmp	r0, #0
  405d6c:	dd73      	ble.n	405e56 <__sfvwrite_r+0x13a>
  405d6e:	68b3      	ldr	r3, [r6, #8]
  405d70:	1a1b      	subs	r3, r3, r0
  405d72:	4482      	add	sl, r0
  405d74:	ebc0 0808 	rsb	r8, r0, r8
  405d78:	60b3      	str	r3, [r6, #8]
  405d7a:	2b00      	cmp	r3, #0
  405d7c:	d1e9      	bne.n	405d52 <__sfvwrite_r+0x36>
  405d7e:	2000      	movs	r0, #0
  405d80:	b003      	add	sp, #12
  405d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d86:	4648      	mov	r0, r9
  405d88:	4621      	mov	r1, r4
  405d8a:	f7ff fc67 	bl	40565c <__swsetup_r>
  405d8e:	2800      	cmp	r0, #0
  405d90:	f040 8145 	bne.w	40601e <__sfvwrite_r+0x302>
  405d94:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  405d98:	6835      	ldr	r5, [r6, #0]
  405d9a:	f00e 0802 	and.w	r8, lr, #2
  405d9e:	fa1f f088 	uxth.w	r0, r8
  405da2:	2800      	cmp	r0, #0
  405da4:	d1d0      	bne.n	405d48 <__sfvwrite_r+0x2c>
  405da6:	f01e 0b01 	ands.w	fp, lr, #1
  405daa:	d15d      	bne.n	405e68 <__sfvwrite_r+0x14c>
  405dac:	46d8      	mov	r8, fp
  405dae:	f1b8 0f00 	cmp.w	r8, #0
  405db2:	d025      	beq.n	405e00 <__sfvwrite_r+0xe4>
  405db4:	f41e 7f00 	tst.w	lr, #512	; 0x200
  405db8:	68a7      	ldr	r7, [r4, #8]
  405dba:	d02f      	beq.n	405e1c <__sfvwrite_r+0x100>
  405dbc:	45b8      	cmp	r8, r7
  405dbe:	46ba      	mov	sl, r7
  405dc0:	f0c0 80a9 	bcc.w	405f16 <__sfvwrite_r+0x1fa>
  405dc4:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  405dc8:	f040 80b6 	bne.w	405f38 <__sfvwrite_r+0x21c>
  405dcc:	6820      	ldr	r0, [r4, #0]
  405dce:	4652      	mov	r2, sl
  405dd0:	4659      	mov	r1, fp
  405dd2:	f000 fcb7 	bl	406744 <memmove>
  405dd6:	68a0      	ldr	r0, [r4, #8]
  405dd8:	6822      	ldr	r2, [r4, #0]
  405dda:	1bc0      	subs	r0, r0, r7
  405ddc:	eb02 030a 	add.w	r3, r2, sl
  405de0:	60a0      	str	r0, [r4, #8]
  405de2:	6023      	str	r3, [r4, #0]
  405de4:	4640      	mov	r0, r8
  405de6:	68b3      	ldr	r3, [r6, #8]
  405de8:	1a1b      	subs	r3, r3, r0
  405dea:	4483      	add	fp, r0
  405dec:	ebc0 0808 	rsb	r8, r0, r8
  405df0:	60b3      	str	r3, [r6, #8]
  405df2:	2b00      	cmp	r3, #0
  405df4:	d0c3      	beq.n	405d7e <__sfvwrite_r+0x62>
  405df6:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  405dfa:	f1b8 0f00 	cmp.w	r8, #0
  405dfe:	d1d9      	bne.n	405db4 <__sfvwrite_r+0x98>
  405e00:	f8d5 b000 	ldr.w	fp, [r5]
  405e04:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405e08:	3508      	adds	r5, #8
  405e0a:	e7d0      	b.n	405dae <__sfvwrite_r+0x92>
  405e0c:	f8d5 a000 	ldr.w	sl, [r5]
  405e10:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405e14:	3508      	adds	r5, #8
  405e16:	e79c      	b.n	405d52 <__sfvwrite_r+0x36>
  405e18:	2000      	movs	r0, #0
  405e1a:	4770      	bx	lr
  405e1c:	6820      	ldr	r0, [r4, #0]
  405e1e:	6923      	ldr	r3, [r4, #16]
  405e20:	4298      	cmp	r0, r3
  405e22:	d803      	bhi.n	405e2c <__sfvwrite_r+0x110>
  405e24:	6962      	ldr	r2, [r4, #20]
  405e26:	4590      	cmp	r8, r2
  405e28:	f080 80b9 	bcs.w	405f9e <__sfvwrite_r+0x282>
  405e2c:	4547      	cmp	r7, r8
  405e2e:	bf28      	it	cs
  405e30:	4647      	movcs	r7, r8
  405e32:	463a      	mov	r2, r7
  405e34:	4659      	mov	r1, fp
  405e36:	f000 fc85 	bl	406744 <memmove>
  405e3a:	68a3      	ldr	r3, [r4, #8]
  405e3c:	6822      	ldr	r2, [r4, #0]
  405e3e:	1bdb      	subs	r3, r3, r7
  405e40:	443a      	add	r2, r7
  405e42:	60a3      	str	r3, [r4, #8]
  405e44:	6022      	str	r2, [r4, #0]
  405e46:	2b00      	cmp	r3, #0
  405e48:	d14a      	bne.n	405ee0 <__sfvwrite_r+0x1c4>
  405e4a:	4648      	mov	r0, r9
  405e4c:	4621      	mov	r1, r4
  405e4e:	f7ff fd21 	bl	405894 <_fflush_r>
  405e52:	2800      	cmp	r0, #0
  405e54:	d044      	beq.n	405ee0 <__sfvwrite_r+0x1c4>
  405e56:	89a3      	ldrh	r3, [r4, #12]
  405e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405e5c:	f04f 30ff 	mov.w	r0, #4294967295
  405e60:	81a3      	strh	r3, [r4, #12]
  405e62:	b003      	add	sp, #12
  405e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e68:	4680      	mov	r8, r0
  405e6a:	9000      	str	r0, [sp, #0]
  405e6c:	4683      	mov	fp, r0
  405e6e:	4682      	mov	sl, r0
  405e70:	f1ba 0f00 	cmp.w	sl, #0
  405e74:	d02c      	beq.n	405ed0 <__sfvwrite_r+0x1b4>
  405e76:	9b00      	ldr	r3, [sp, #0]
  405e78:	2b00      	cmp	r3, #0
  405e7a:	d050      	beq.n	405f1e <__sfvwrite_r+0x202>
  405e7c:	6820      	ldr	r0, [r4, #0]
  405e7e:	6921      	ldr	r1, [r4, #16]
  405e80:	f8d4 e008 	ldr.w	lr, [r4, #8]
  405e84:	6962      	ldr	r2, [r4, #20]
  405e86:	45d0      	cmp	r8, sl
  405e88:	4643      	mov	r3, r8
  405e8a:	bf28      	it	cs
  405e8c:	4653      	movcs	r3, sl
  405e8e:	4288      	cmp	r0, r1
  405e90:	461f      	mov	r7, r3
  405e92:	d904      	bls.n	405e9e <__sfvwrite_r+0x182>
  405e94:	eb0e 0c02 	add.w	ip, lr, r2
  405e98:	4563      	cmp	r3, ip
  405e9a:	f300 8092 	bgt.w	405fc2 <__sfvwrite_r+0x2a6>
  405e9e:	4293      	cmp	r3, r2
  405ea0:	db20      	blt.n	405ee4 <__sfvwrite_r+0x1c8>
  405ea2:	4613      	mov	r3, r2
  405ea4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405ea6:	69e1      	ldr	r1, [r4, #28]
  405ea8:	4648      	mov	r0, r9
  405eaa:	465a      	mov	r2, fp
  405eac:	47b8      	blx	r7
  405eae:	1e07      	subs	r7, r0, #0
  405eb0:	ddd1      	ble.n	405e56 <__sfvwrite_r+0x13a>
  405eb2:	ebb8 0807 	subs.w	r8, r8, r7
  405eb6:	d025      	beq.n	405f04 <__sfvwrite_r+0x1e8>
  405eb8:	68b3      	ldr	r3, [r6, #8]
  405eba:	1bdb      	subs	r3, r3, r7
  405ebc:	44bb      	add	fp, r7
  405ebe:	ebc7 0a0a 	rsb	sl, r7, sl
  405ec2:	60b3      	str	r3, [r6, #8]
  405ec4:	2b00      	cmp	r3, #0
  405ec6:	f43f af5a 	beq.w	405d7e <__sfvwrite_r+0x62>
  405eca:	f1ba 0f00 	cmp.w	sl, #0
  405ece:	d1d2      	bne.n	405e76 <__sfvwrite_r+0x15a>
  405ed0:	2300      	movs	r3, #0
  405ed2:	f8d5 b000 	ldr.w	fp, [r5]
  405ed6:	f8d5 a004 	ldr.w	sl, [r5, #4]
  405eda:	9300      	str	r3, [sp, #0]
  405edc:	3508      	adds	r5, #8
  405ede:	e7c7      	b.n	405e70 <__sfvwrite_r+0x154>
  405ee0:	4638      	mov	r0, r7
  405ee2:	e780      	b.n	405de6 <__sfvwrite_r+0xca>
  405ee4:	461a      	mov	r2, r3
  405ee6:	4659      	mov	r1, fp
  405ee8:	9301      	str	r3, [sp, #4]
  405eea:	f000 fc2b 	bl	406744 <memmove>
  405eee:	68a2      	ldr	r2, [r4, #8]
  405ef0:	6821      	ldr	r1, [r4, #0]
  405ef2:	9b01      	ldr	r3, [sp, #4]
  405ef4:	ebb8 0807 	subs.w	r8, r8, r7
  405ef8:	eba2 0203 	sub.w	r2, r2, r3
  405efc:	440b      	add	r3, r1
  405efe:	60a2      	str	r2, [r4, #8]
  405f00:	6023      	str	r3, [r4, #0]
  405f02:	d1d9      	bne.n	405eb8 <__sfvwrite_r+0x19c>
  405f04:	4648      	mov	r0, r9
  405f06:	4621      	mov	r1, r4
  405f08:	f7ff fcc4 	bl	405894 <_fflush_r>
  405f0c:	2800      	cmp	r0, #0
  405f0e:	d1a2      	bne.n	405e56 <__sfvwrite_r+0x13a>
  405f10:	f8cd 8000 	str.w	r8, [sp]
  405f14:	e7d0      	b.n	405eb8 <__sfvwrite_r+0x19c>
  405f16:	6820      	ldr	r0, [r4, #0]
  405f18:	4647      	mov	r7, r8
  405f1a:	46c2      	mov	sl, r8
  405f1c:	e757      	b.n	405dce <__sfvwrite_r+0xb2>
  405f1e:	4658      	mov	r0, fp
  405f20:	210a      	movs	r1, #10
  405f22:	4652      	mov	r2, sl
  405f24:	f000 fbc4 	bl	4066b0 <memchr>
  405f28:	2800      	cmp	r0, #0
  405f2a:	d073      	beq.n	406014 <__sfvwrite_r+0x2f8>
  405f2c:	3001      	adds	r0, #1
  405f2e:	2301      	movs	r3, #1
  405f30:	ebcb 0800 	rsb	r8, fp, r0
  405f34:	9300      	str	r3, [sp, #0]
  405f36:	e7a1      	b.n	405e7c <__sfvwrite_r+0x160>
  405f38:	6967      	ldr	r7, [r4, #20]
  405f3a:	6921      	ldr	r1, [r4, #16]
  405f3c:	6823      	ldr	r3, [r4, #0]
  405f3e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  405f42:	1a5b      	subs	r3, r3, r1
  405f44:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  405f48:	1c58      	adds	r0, r3, #1
  405f4a:	107f      	asrs	r7, r7, #1
  405f4c:	4440      	add	r0, r8
  405f4e:	4287      	cmp	r7, r0
  405f50:	463a      	mov	r2, r7
  405f52:	bf3c      	itt	cc
  405f54:	4607      	movcc	r7, r0
  405f56:	463a      	movcc	r2, r7
  405f58:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  405f5c:	9300      	str	r3, [sp, #0]
  405f5e:	d046      	beq.n	405fee <__sfvwrite_r+0x2d2>
  405f60:	4611      	mov	r1, r2
  405f62:	4648      	mov	r0, r9
  405f64:	f000 f912 	bl	40618c <_malloc_r>
  405f68:	9b00      	ldr	r3, [sp, #0]
  405f6a:	4682      	mov	sl, r0
  405f6c:	2800      	cmp	r0, #0
  405f6e:	d059      	beq.n	406024 <__sfvwrite_r+0x308>
  405f70:	461a      	mov	r2, r3
  405f72:	6921      	ldr	r1, [r4, #16]
  405f74:	9300      	str	r3, [sp, #0]
  405f76:	f7fe faed 	bl	404554 <memcpy>
  405f7a:	89a2      	ldrh	r2, [r4, #12]
  405f7c:	9b00      	ldr	r3, [sp, #0]
  405f7e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405f82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405f86:	81a2      	strh	r2, [r4, #12]
  405f88:	eb0a 0003 	add.w	r0, sl, r3
  405f8c:	1afb      	subs	r3, r7, r3
  405f8e:	f8c4 a010 	str.w	sl, [r4, #16]
  405f92:	6167      	str	r7, [r4, #20]
  405f94:	6020      	str	r0, [r4, #0]
  405f96:	60a3      	str	r3, [r4, #8]
  405f98:	4647      	mov	r7, r8
  405f9a:	46c2      	mov	sl, r8
  405f9c:	e717      	b.n	405dce <__sfvwrite_r+0xb2>
  405f9e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  405fa2:	4543      	cmp	r3, r8
  405fa4:	bf28      	it	cs
  405fa6:	4643      	movcs	r3, r8
  405fa8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405faa:	fb93 f3f2 	sdiv	r3, r3, r2
  405fae:	4648      	mov	r0, r9
  405fb0:	fb03 f302 	mul.w	r3, r3, r2
  405fb4:	69e1      	ldr	r1, [r4, #28]
  405fb6:	465a      	mov	r2, fp
  405fb8:	47b8      	blx	r7
  405fba:	2800      	cmp	r0, #0
  405fbc:	f73f af13 	bgt.w	405de6 <__sfvwrite_r+0xca>
  405fc0:	e749      	b.n	405e56 <__sfvwrite_r+0x13a>
  405fc2:	4662      	mov	r2, ip
  405fc4:	4659      	mov	r1, fp
  405fc6:	f8cd c004 	str.w	ip, [sp, #4]
  405fca:	f000 fbbb 	bl	406744 <memmove>
  405fce:	6823      	ldr	r3, [r4, #0]
  405fd0:	f8dd c004 	ldr.w	ip, [sp, #4]
  405fd4:	4463      	add	r3, ip
  405fd6:	6023      	str	r3, [r4, #0]
  405fd8:	4648      	mov	r0, r9
  405fda:	4621      	mov	r1, r4
  405fdc:	f7ff fc5a 	bl	405894 <_fflush_r>
  405fe0:	f8dd c004 	ldr.w	ip, [sp, #4]
  405fe4:	2800      	cmp	r0, #0
  405fe6:	f47f af36 	bne.w	405e56 <__sfvwrite_r+0x13a>
  405fea:	4667      	mov	r7, ip
  405fec:	e761      	b.n	405eb2 <__sfvwrite_r+0x196>
  405fee:	4648      	mov	r0, r9
  405ff0:	f000 fc10 	bl	406814 <_realloc_r>
  405ff4:	9b00      	ldr	r3, [sp, #0]
  405ff6:	4682      	mov	sl, r0
  405ff8:	2800      	cmp	r0, #0
  405ffa:	d1c5      	bne.n	405f88 <__sfvwrite_r+0x26c>
  405ffc:	4648      	mov	r0, r9
  405ffe:	6921      	ldr	r1, [r4, #16]
  406000:	f7ff fdb4 	bl	405b6c <_free_r>
  406004:	89a3      	ldrh	r3, [r4, #12]
  406006:	220c      	movs	r2, #12
  406008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40600c:	b29b      	uxth	r3, r3
  40600e:	f8c9 2000 	str.w	r2, [r9]
  406012:	e721      	b.n	405e58 <__sfvwrite_r+0x13c>
  406014:	2301      	movs	r3, #1
  406016:	f10a 0801 	add.w	r8, sl, #1
  40601a:	9300      	str	r3, [sp, #0]
  40601c:	e72e      	b.n	405e7c <__sfvwrite_r+0x160>
  40601e:	f04f 30ff 	mov.w	r0, #4294967295
  406022:	e6ad      	b.n	405d80 <__sfvwrite_r+0x64>
  406024:	230c      	movs	r3, #12
  406026:	f8c9 3000 	str.w	r3, [r9]
  40602a:	89a3      	ldrh	r3, [r4, #12]
  40602c:	e714      	b.n	405e58 <__sfvwrite_r+0x13c>
  40602e:	bf00      	nop
  406030:	7ffffc00 	.word	0x7ffffc00

00406034 <_fwalk_reent>:
  406034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406038:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40603c:	d01f      	beq.n	40607e <_fwalk_reent+0x4a>
  40603e:	4688      	mov	r8, r1
  406040:	4606      	mov	r6, r0
  406042:	f04f 0900 	mov.w	r9, #0
  406046:	687d      	ldr	r5, [r7, #4]
  406048:	68bc      	ldr	r4, [r7, #8]
  40604a:	3d01      	subs	r5, #1
  40604c:	d411      	bmi.n	406072 <_fwalk_reent+0x3e>
  40604e:	89a3      	ldrh	r3, [r4, #12]
  406050:	2b01      	cmp	r3, #1
  406052:	f105 35ff 	add.w	r5, r5, #4294967295
  406056:	d908      	bls.n	40606a <_fwalk_reent+0x36>
  406058:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40605c:	3301      	adds	r3, #1
  40605e:	4621      	mov	r1, r4
  406060:	4630      	mov	r0, r6
  406062:	d002      	beq.n	40606a <_fwalk_reent+0x36>
  406064:	47c0      	blx	r8
  406066:	ea49 0900 	orr.w	r9, r9, r0
  40606a:	1c6b      	adds	r3, r5, #1
  40606c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406070:	d1ed      	bne.n	40604e <_fwalk_reent+0x1a>
  406072:	683f      	ldr	r7, [r7, #0]
  406074:	2f00      	cmp	r7, #0
  406076:	d1e6      	bne.n	406046 <_fwalk_reent+0x12>
  406078:	4648      	mov	r0, r9
  40607a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40607e:	46b9      	mov	r9, r7
  406080:	4648      	mov	r0, r9
  406082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406086:	bf00      	nop

00406088 <__locale_charset>:
  406088:	4800      	ldr	r0, [pc, #0]	; (40608c <__locale_charset+0x4>)
  40608a:	4770      	bx	lr
  40608c:	2000045c 	.word	0x2000045c

00406090 <__locale_mb_cur_max>:
  406090:	4b01      	ldr	r3, [pc, #4]	; (406098 <__locale_mb_cur_max+0x8>)
  406092:	6818      	ldr	r0, [r3, #0]
  406094:	4770      	bx	lr
  406096:	bf00      	nop
  406098:	2000047c 	.word	0x2000047c

0040609c <__smakebuf_r>:
  40609c:	898b      	ldrh	r3, [r1, #12]
  40609e:	b29a      	uxth	r2, r3
  4060a0:	f012 0f02 	tst.w	r2, #2
  4060a4:	d13c      	bne.n	406120 <__smakebuf_r+0x84>
  4060a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4060a8:	460c      	mov	r4, r1
  4060aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4060ae:	2900      	cmp	r1, #0
  4060b0:	b091      	sub	sp, #68	; 0x44
  4060b2:	4605      	mov	r5, r0
  4060b4:	db19      	blt.n	4060ea <__smakebuf_r+0x4e>
  4060b6:	aa01      	add	r2, sp, #4
  4060b8:	f000 ff3c 	bl	406f34 <_fstat_r>
  4060bc:	2800      	cmp	r0, #0
  4060be:	db12      	blt.n	4060e6 <__smakebuf_r+0x4a>
  4060c0:	9b02      	ldr	r3, [sp, #8]
  4060c2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4060c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  4060ca:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  4060ce:	fab7 f787 	clz	r7, r7
  4060d2:	ea4f 1757 	mov.w	r7, r7, lsr #5
  4060d6:	d02a      	beq.n	40612e <__smakebuf_r+0x92>
  4060d8:	89a3      	ldrh	r3, [r4, #12]
  4060da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4060de:	81a3      	strh	r3, [r4, #12]
  4060e0:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4060e4:	e00b      	b.n	4060fe <__smakebuf_r+0x62>
  4060e6:	89a3      	ldrh	r3, [r4, #12]
  4060e8:	b29a      	uxth	r2, r3
  4060ea:	f012 0f80 	tst.w	r2, #128	; 0x80
  4060ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4060f2:	81a3      	strh	r3, [r4, #12]
  4060f4:	bf0c      	ite	eq
  4060f6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4060fa:	2640      	movne	r6, #64	; 0x40
  4060fc:	2700      	movs	r7, #0
  4060fe:	4628      	mov	r0, r5
  406100:	4631      	mov	r1, r6
  406102:	f000 f843 	bl	40618c <_malloc_r>
  406106:	89a3      	ldrh	r3, [r4, #12]
  406108:	b340      	cbz	r0, 40615c <__smakebuf_r+0xc0>
  40610a:	4a1a      	ldr	r2, [pc, #104]	; (406174 <__smakebuf_r+0xd8>)
  40610c:	63ea      	str	r2, [r5, #60]	; 0x3c
  40610e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406112:	81a3      	strh	r3, [r4, #12]
  406114:	6020      	str	r0, [r4, #0]
  406116:	6120      	str	r0, [r4, #16]
  406118:	6166      	str	r6, [r4, #20]
  40611a:	b99f      	cbnz	r7, 406144 <__smakebuf_r+0xa8>
  40611c:	b011      	add	sp, #68	; 0x44
  40611e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406120:	f101 0343 	add.w	r3, r1, #67	; 0x43
  406124:	2201      	movs	r2, #1
  406126:	600b      	str	r3, [r1, #0]
  406128:	610b      	str	r3, [r1, #16]
  40612a:	614a      	str	r2, [r1, #20]
  40612c:	4770      	bx	lr
  40612e:	4b12      	ldr	r3, [pc, #72]	; (406178 <__smakebuf_r+0xdc>)
  406130:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  406132:	429a      	cmp	r2, r3
  406134:	d1d0      	bne.n	4060d8 <__smakebuf_r+0x3c>
  406136:	89a3      	ldrh	r3, [r4, #12]
  406138:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40613c:	4333      	orrs	r3, r6
  40613e:	81a3      	strh	r3, [r4, #12]
  406140:	64e6      	str	r6, [r4, #76]	; 0x4c
  406142:	e7dc      	b.n	4060fe <__smakebuf_r+0x62>
  406144:	4628      	mov	r0, r5
  406146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40614a:	f000 ff07 	bl	406f5c <_isatty_r>
  40614e:	2800      	cmp	r0, #0
  406150:	d0e4      	beq.n	40611c <__smakebuf_r+0x80>
  406152:	89a3      	ldrh	r3, [r4, #12]
  406154:	f043 0301 	orr.w	r3, r3, #1
  406158:	81a3      	strh	r3, [r4, #12]
  40615a:	e7df      	b.n	40611c <__smakebuf_r+0x80>
  40615c:	059a      	lsls	r2, r3, #22
  40615e:	d4dd      	bmi.n	40611c <__smakebuf_r+0x80>
  406160:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406164:	f043 0302 	orr.w	r3, r3, #2
  406168:	2101      	movs	r1, #1
  40616a:	81a3      	strh	r3, [r4, #12]
  40616c:	6022      	str	r2, [r4, #0]
  40616e:	6122      	str	r2, [r4, #16]
  406170:	6161      	str	r1, [r4, #20]
  406172:	e7d3      	b.n	40611c <__smakebuf_r+0x80>
  406174:	004058c1 	.word	0x004058c1
  406178:	00406c81 	.word	0x00406c81

0040617c <malloc>:
  40617c:	4b02      	ldr	r3, [pc, #8]	; (406188 <malloc+0xc>)
  40617e:	4601      	mov	r1, r0
  406180:	6818      	ldr	r0, [r3, #0]
  406182:	f000 b803 	b.w	40618c <_malloc_r>
  406186:	bf00      	nop
  406188:	20000458 	.word	0x20000458

0040618c <_malloc_r>:
  40618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406190:	f101 050b 	add.w	r5, r1, #11
  406194:	2d16      	cmp	r5, #22
  406196:	b083      	sub	sp, #12
  406198:	4606      	mov	r6, r0
  40619a:	d927      	bls.n	4061ec <_malloc_r+0x60>
  40619c:	f035 0507 	bics.w	r5, r5, #7
  4061a0:	f100 80b6 	bmi.w	406310 <_malloc_r+0x184>
  4061a4:	42a9      	cmp	r1, r5
  4061a6:	f200 80b3 	bhi.w	406310 <_malloc_r+0x184>
  4061aa:	f000 fb2f 	bl	40680c <__malloc_lock>
  4061ae:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4061b2:	d222      	bcs.n	4061fa <_malloc_r+0x6e>
  4061b4:	4fc2      	ldr	r7, [pc, #776]	; (4064c0 <_malloc_r+0x334>)
  4061b6:	08e8      	lsrs	r0, r5, #3
  4061b8:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  4061bc:	68dc      	ldr	r4, [r3, #12]
  4061be:	429c      	cmp	r4, r3
  4061c0:	f000 81c8 	beq.w	406554 <_malloc_r+0x3c8>
  4061c4:	6863      	ldr	r3, [r4, #4]
  4061c6:	68e1      	ldr	r1, [r4, #12]
  4061c8:	68a5      	ldr	r5, [r4, #8]
  4061ca:	f023 0303 	bic.w	r3, r3, #3
  4061ce:	4423      	add	r3, r4
  4061d0:	4630      	mov	r0, r6
  4061d2:	685a      	ldr	r2, [r3, #4]
  4061d4:	60e9      	str	r1, [r5, #12]
  4061d6:	f042 0201 	orr.w	r2, r2, #1
  4061da:	608d      	str	r5, [r1, #8]
  4061dc:	605a      	str	r2, [r3, #4]
  4061de:	f000 fb17 	bl	406810 <__malloc_unlock>
  4061e2:	3408      	adds	r4, #8
  4061e4:	4620      	mov	r0, r4
  4061e6:	b003      	add	sp, #12
  4061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061ec:	2910      	cmp	r1, #16
  4061ee:	f200 808f 	bhi.w	406310 <_malloc_r+0x184>
  4061f2:	f000 fb0b 	bl	40680c <__malloc_lock>
  4061f6:	2510      	movs	r5, #16
  4061f8:	e7dc      	b.n	4061b4 <_malloc_r+0x28>
  4061fa:	0a68      	lsrs	r0, r5, #9
  4061fc:	f000 808f 	beq.w	40631e <_malloc_r+0x192>
  406200:	2804      	cmp	r0, #4
  406202:	f200 8154 	bhi.w	4064ae <_malloc_r+0x322>
  406206:	09a8      	lsrs	r0, r5, #6
  406208:	3038      	adds	r0, #56	; 0x38
  40620a:	0041      	lsls	r1, r0, #1
  40620c:	4fac      	ldr	r7, [pc, #688]	; (4064c0 <_malloc_r+0x334>)
  40620e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  406212:	68cc      	ldr	r4, [r1, #12]
  406214:	42a1      	cmp	r1, r4
  406216:	d106      	bne.n	406226 <_malloc_r+0x9a>
  406218:	e00c      	b.n	406234 <_malloc_r+0xa8>
  40621a:	2a00      	cmp	r2, #0
  40621c:	f280 8082 	bge.w	406324 <_malloc_r+0x198>
  406220:	68e4      	ldr	r4, [r4, #12]
  406222:	42a1      	cmp	r1, r4
  406224:	d006      	beq.n	406234 <_malloc_r+0xa8>
  406226:	6863      	ldr	r3, [r4, #4]
  406228:	f023 0303 	bic.w	r3, r3, #3
  40622c:	1b5a      	subs	r2, r3, r5
  40622e:	2a0f      	cmp	r2, #15
  406230:	ddf3      	ble.n	40621a <_malloc_r+0x8e>
  406232:	3801      	subs	r0, #1
  406234:	3001      	adds	r0, #1
  406236:	49a2      	ldr	r1, [pc, #648]	; (4064c0 <_malloc_r+0x334>)
  406238:	693c      	ldr	r4, [r7, #16]
  40623a:	f101 0e08 	add.w	lr, r1, #8
  40623e:	4574      	cmp	r4, lr
  406240:	f000 817d 	beq.w	40653e <_malloc_r+0x3b2>
  406244:	6863      	ldr	r3, [r4, #4]
  406246:	f023 0303 	bic.w	r3, r3, #3
  40624a:	1b5a      	subs	r2, r3, r5
  40624c:	2a0f      	cmp	r2, #15
  40624e:	f300 8163 	bgt.w	406518 <_malloc_r+0x38c>
  406252:	2a00      	cmp	r2, #0
  406254:	f8c1 e014 	str.w	lr, [r1, #20]
  406258:	f8c1 e010 	str.w	lr, [r1, #16]
  40625c:	da73      	bge.n	406346 <_malloc_r+0x1ba>
  40625e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406262:	f080 8139 	bcs.w	4064d8 <_malloc_r+0x34c>
  406266:	08db      	lsrs	r3, r3, #3
  406268:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  40626c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  406270:	684a      	ldr	r2, [r1, #4]
  406272:	f8d8 9008 	ldr.w	r9, [r8, #8]
  406276:	f8c4 9008 	str.w	r9, [r4, #8]
  40627a:	2301      	movs	r3, #1
  40627c:	fa03 f30c 	lsl.w	r3, r3, ip
  406280:	4313      	orrs	r3, r2
  406282:	f8c4 800c 	str.w	r8, [r4, #12]
  406286:	604b      	str	r3, [r1, #4]
  406288:	f8c8 4008 	str.w	r4, [r8, #8]
  40628c:	f8c9 400c 	str.w	r4, [r9, #12]
  406290:	1082      	asrs	r2, r0, #2
  406292:	2401      	movs	r4, #1
  406294:	4094      	lsls	r4, r2
  406296:	429c      	cmp	r4, r3
  406298:	d862      	bhi.n	406360 <_malloc_r+0x1d4>
  40629a:	4223      	tst	r3, r4
  40629c:	d106      	bne.n	4062ac <_malloc_r+0x120>
  40629e:	f020 0003 	bic.w	r0, r0, #3
  4062a2:	0064      	lsls	r4, r4, #1
  4062a4:	4223      	tst	r3, r4
  4062a6:	f100 0004 	add.w	r0, r0, #4
  4062aa:	d0fa      	beq.n	4062a2 <_malloc_r+0x116>
  4062ac:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  4062b0:	46c4      	mov	ip, r8
  4062b2:	4681      	mov	r9, r0
  4062b4:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4062b8:	459c      	cmp	ip, r3
  4062ba:	d107      	bne.n	4062cc <_malloc_r+0x140>
  4062bc:	e141      	b.n	406542 <_malloc_r+0x3b6>
  4062be:	2900      	cmp	r1, #0
  4062c0:	f280 8151 	bge.w	406566 <_malloc_r+0x3da>
  4062c4:	68db      	ldr	r3, [r3, #12]
  4062c6:	459c      	cmp	ip, r3
  4062c8:	f000 813b 	beq.w	406542 <_malloc_r+0x3b6>
  4062cc:	685a      	ldr	r2, [r3, #4]
  4062ce:	f022 0203 	bic.w	r2, r2, #3
  4062d2:	1b51      	subs	r1, r2, r5
  4062d4:	290f      	cmp	r1, #15
  4062d6:	ddf2      	ble.n	4062be <_malloc_r+0x132>
  4062d8:	461c      	mov	r4, r3
  4062da:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4062de:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4062e2:	195a      	adds	r2, r3, r5
  4062e4:	f045 0901 	orr.w	r9, r5, #1
  4062e8:	f041 0501 	orr.w	r5, r1, #1
  4062ec:	f8c3 9004 	str.w	r9, [r3, #4]
  4062f0:	4630      	mov	r0, r6
  4062f2:	f8c8 c00c 	str.w	ip, [r8, #12]
  4062f6:	f8cc 8008 	str.w	r8, [ip, #8]
  4062fa:	617a      	str	r2, [r7, #20]
  4062fc:	613a      	str	r2, [r7, #16]
  4062fe:	f8c2 e00c 	str.w	lr, [r2, #12]
  406302:	f8c2 e008 	str.w	lr, [r2, #8]
  406306:	6055      	str	r5, [r2, #4]
  406308:	5051      	str	r1, [r2, r1]
  40630a:	f000 fa81 	bl	406810 <__malloc_unlock>
  40630e:	e769      	b.n	4061e4 <_malloc_r+0x58>
  406310:	2400      	movs	r4, #0
  406312:	230c      	movs	r3, #12
  406314:	4620      	mov	r0, r4
  406316:	6033      	str	r3, [r6, #0]
  406318:	b003      	add	sp, #12
  40631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40631e:	217e      	movs	r1, #126	; 0x7e
  406320:	203f      	movs	r0, #63	; 0x3f
  406322:	e773      	b.n	40620c <_malloc_r+0x80>
  406324:	4423      	add	r3, r4
  406326:	68e1      	ldr	r1, [r4, #12]
  406328:	685a      	ldr	r2, [r3, #4]
  40632a:	68a5      	ldr	r5, [r4, #8]
  40632c:	f042 0201 	orr.w	r2, r2, #1
  406330:	60e9      	str	r1, [r5, #12]
  406332:	4630      	mov	r0, r6
  406334:	608d      	str	r5, [r1, #8]
  406336:	605a      	str	r2, [r3, #4]
  406338:	f000 fa6a 	bl	406810 <__malloc_unlock>
  40633c:	3408      	adds	r4, #8
  40633e:	4620      	mov	r0, r4
  406340:	b003      	add	sp, #12
  406342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406346:	4423      	add	r3, r4
  406348:	4630      	mov	r0, r6
  40634a:	685a      	ldr	r2, [r3, #4]
  40634c:	f042 0201 	orr.w	r2, r2, #1
  406350:	605a      	str	r2, [r3, #4]
  406352:	f000 fa5d 	bl	406810 <__malloc_unlock>
  406356:	3408      	adds	r4, #8
  406358:	4620      	mov	r0, r4
  40635a:	b003      	add	sp, #12
  40635c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406360:	68bc      	ldr	r4, [r7, #8]
  406362:	6863      	ldr	r3, [r4, #4]
  406364:	f023 0803 	bic.w	r8, r3, #3
  406368:	4545      	cmp	r5, r8
  40636a:	d804      	bhi.n	406376 <_malloc_r+0x1ea>
  40636c:	ebc5 0308 	rsb	r3, r5, r8
  406370:	2b0f      	cmp	r3, #15
  406372:	f300 808c 	bgt.w	40648e <_malloc_r+0x302>
  406376:	4b53      	ldr	r3, [pc, #332]	; (4064c4 <_malloc_r+0x338>)
  406378:	f8df a158 	ldr.w	sl, [pc, #344]	; 4064d4 <_malloc_r+0x348>
  40637c:	681a      	ldr	r2, [r3, #0]
  40637e:	f8da 3000 	ldr.w	r3, [sl]
  406382:	3301      	adds	r3, #1
  406384:	442a      	add	r2, r5
  406386:	eb04 0b08 	add.w	fp, r4, r8
  40638a:	f000 8150 	beq.w	40662e <_malloc_r+0x4a2>
  40638e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  406392:	320f      	adds	r2, #15
  406394:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  406398:	f022 020f 	bic.w	r2, r2, #15
  40639c:	4611      	mov	r1, r2
  40639e:	4630      	mov	r0, r6
  4063a0:	9201      	str	r2, [sp, #4]
  4063a2:	f000 fc2d 	bl	406c00 <_sbrk_r>
  4063a6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4063aa:	4681      	mov	r9, r0
  4063ac:	9a01      	ldr	r2, [sp, #4]
  4063ae:	f000 8147 	beq.w	406640 <_malloc_r+0x4b4>
  4063b2:	4583      	cmp	fp, r0
  4063b4:	f200 80ee 	bhi.w	406594 <_malloc_r+0x408>
  4063b8:	4b43      	ldr	r3, [pc, #268]	; (4064c8 <_malloc_r+0x33c>)
  4063ba:	6819      	ldr	r1, [r3, #0]
  4063bc:	45cb      	cmp	fp, r9
  4063be:	4411      	add	r1, r2
  4063c0:	6019      	str	r1, [r3, #0]
  4063c2:	f000 8142 	beq.w	40664a <_malloc_r+0x4be>
  4063c6:	f8da 0000 	ldr.w	r0, [sl]
  4063ca:	f8df e108 	ldr.w	lr, [pc, #264]	; 4064d4 <_malloc_r+0x348>
  4063ce:	3001      	adds	r0, #1
  4063d0:	bf1b      	ittet	ne
  4063d2:	ebcb 0b09 	rsbne	fp, fp, r9
  4063d6:	4459      	addne	r1, fp
  4063d8:	f8ce 9000 	streq.w	r9, [lr]
  4063dc:	6019      	strne	r1, [r3, #0]
  4063de:	f019 0107 	ands.w	r1, r9, #7
  4063e2:	f000 8107 	beq.w	4065f4 <_malloc_r+0x468>
  4063e6:	f1c1 0008 	rsb	r0, r1, #8
  4063ea:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4063ee:	4481      	add	r9, r0
  4063f0:	3108      	adds	r1, #8
  4063f2:	444a      	add	r2, r9
  4063f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4063f8:	ebc2 0a01 	rsb	sl, r2, r1
  4063fc:	4651      	mov	r1, sl
  4063fe:	4630      	mov	r0, r6
  406400:	9301      	str	r3, [sp, #4]
  406402:	f000 fbfd 	bl	406c00 <_sbrk_r>
  406406:	1c43      	adds	r3, r0, #1
  406408:	9b01      	ldr	r3, [sp, #4]
  40640a:	f000 812c 	beq.w	406666 <_malloc_r+0x4da>
  40640e:	ebc9 0200 	rsb	r2, r9, r0
  406412:	4452      	add	r2, sl
  406414:	f042 0201 	orr.w	r2, r2, #1
  406418:	6819      	ldr	r1, [r3, #0]
  40641a:	f8c7 9008 	str.w	r9, [r7, #8]
  40641e:	4451      	add	r1, sl
  406420:	42bc      	cmp	r4, r7
  406422:	f8c9 2004 	str.w	r2, [r9, #4]
  406426:	6019      	str	r1, [r3, #0]
  406428:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4064c8 <_malloc_r+0x33c>
  40642c:	d016      	beq.n	40645c <_malloc_r+0x2d0>
  40642e:	f1b8 0f0f 	cmp.w	r8, #15
  406432:	f240 80ee 	bls.w	406612 <_malloc_r+0x486>
  406436:	6862      	ldr	r2, [r4, #4]
  406438:	f1a8 030c 	sub.w	r3, r8, #12
  40643c:	f023 0307 	bic.w	r3, r3, #7
  406440:	18e0      	adds	r0, r4, r3
  406442:	f002 0201 	and.w	r2, r2, #1
  406446:	f04f 0e05 	mov.w	lr, #5
  40644a:	431a      	orrs	r2, r3
  40644c:	2b0f      	cmp	r3, #15
  40644e:	6062      	str	r2, [r4, #4]
  406450:	f8c0 e004 	str.w	lr, [r0, #4]
  406454:	f8c0 e008 	str.w	lr, [r0, #8]
  406458:	f200 8109 	bhi.w	40666e <_malloc_r+0x4e2>
  40645c:	4b1b      	ldr	r3, [pc, #108]	; (4064cc <_malloc_r+0x340>)
  40645e:	68bc      	ldr	r4, [r7, #8]
  406460:	681a      	ldr	r2, [r3, #0]
  406462:	4291      	cmp	r1, r2
  406464:	bf88      	it	hi
  406466:	6019      	strhi	r1, [r3, #0]
  406468:	4b19      	ldr	r3, [pc, #100]	; (4064d0 <_malloc_r+0x344>)
  40646a:	681a      	ldr	r2, [r3, #0]
  40646c:	4291      	cmp	r1, r2
  40646e:	6862      	ldr	r2, [r4, #4]
  406470:	bf88      	it	hi
  406472:	6019      	strhi	r1, [r3, #0]
  406474:	f022 0203 	bic.w	r2, r2, #3
  406478:	4295      	cmp	r5, r2
  40647a:	eba2 0305 	sub.w	r3, r2, r5
  40647e:	d801      	bhi.n	406484 <_malloc_r+0x2f8>
  406480:	2b0f      	cmp	r3, #15
  406482:	dc04      	bgt.n	40648e <_malloc_r+0x302>
  406484:	4630      	mov	r0, r6
  406486:	f000 f9c3 	bl	406810 <__malloc_unlock>
  40648a:	2400      	movs	r4, #0
  40648c:	e6aa      	b.n	4061e4 <_malloc_r+0x58>
  40648e:	1962      	adds	r2, r4, r5
  406490:	f043 0301 	orr.w	r3, r3, #1
  406494:	f045 0501 	orr.w	r5, r5, #1
  406498:	6065      	str	r5, [r4, #4]
  40649a:	4630      	mov	r0, r6
  40649c:	60ba      	str	r2, [r7, #8]
  40649e:	6053      	str	r3, [r2, #4]
  4064a0:	f000 f9b6 	bl	406810 <__malloc_unlock>
  4064a4:	3408      	adds	r4, #8
  4064a6:	4620      	mov	r0, r4
  4064a8:	b003      	add	sp, #12
  4064aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064ae:	2814      	cmp	r0, #20
  4064b0:	d968      	bls.n	406584 <_malloc_r+0x3f8>
  4064b2:	2854      	cmp	r0, #84	; 0x54
  4064b4:	f200 8097 	bhi.w	4065e6 <_malloc_r+0x45a>
  4064b8:	0b28      	lsrs	r0, r5, #12
  4064ba:	306e      	adds	r0, #110	; 0x6e
  4064bc:	0041      	lsls	r1, r0, #1
  4064be:	e6a5      	b.n	40620c <_malloc_r+0x80>
  4064c0:	20000480 	.word	0x20000480
  4064c4:	2001bc24 	.word	0x2001bc24
  4064c8:	2001bc28 	.word	0x2001bc28
  4064cc:	2001bc20 	.word	0x2001bc20
  4064d0:	2001bc1c 	.word	0x2001bc1c
  4064d4:	2000088c 	.word	0x2000088c
  4064d8:	0a5a      	lsrs	r2, r3, #9
  4064da:	2a04      	cmp	r2, #4
  4064dc:	d955      	bls.n	40658a <_malloc_r+0x3fe>
  4064de:	2a14      	cmp	r2, #20
  4064e0:	f200 80a7 	bhi.w	406632 <_malloc_r+0x4a6>
  4064e4:	325b      	adds	r2, #91	; 0x5b
  4064e6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4064ea:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  4064ee:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4066ac <_malloc_r+0x520>
  4064f2:	f8dc 1008 	ldr.w	r1, [ip, #8]
  4064f6:	4561      	cmp	r1, ip
  4064f8:	d07f      	beq.n	4065fa <_malloc_r+0x46e>
  4064fa:	684a      	ldr	r2, [r1, #4]
  4064fc:	f022 0203 	bic.w	r2, r2, #3
  406500:	4293      	cmp	r3, r2
  406502:	d202      	bcs.n	40650a <_malloc_r+0x37e>
  406504:	6889      	ldr	r1, [r1, #8]
  406506:	458c      	cmp	ip, r1
  406508:	d1f7      	bne.n	4064fa <_malloc_r+0x36e>
  40650a:	68ca      	ldr	r2, [r1, #12]
  40650c:	687b      	ldr	r3, [r7, #4]
  40650e:	60e2      	str	r2, [r4, #12]
  406510:	60a1      	str	r1, [r4, #8]
  406512:	6094      	str	r4, [r2, #8]
  406514:	60cc      	str	r4, [r1, #12]
  406516:	e6bb      	b.n	406290 <_malloc_r+0x104>
  406518:	1963      	adds	r3, r4, r5
  40651a:	f042 0701 	orr.w	r7, r2, #1
  40651e:	f045 0501 	orr.w	r5, r5, #1
  406522:	6065      	str	r5, [r4, #4]
  406524:	4630      	mov	r0, r6
  406526:	614b      	str	r3, [r1, #20]
  406528:	610b      	str	r3, [r1, #16]
  40652a:	f8c3 e00c 	str.w	lr, [r3, #12]
  40652e:	f8c3 e008 	str.w	lr, [r3, #8]
  406532:	605f      	str	r7, [r3, #4]
  406534:	509a      	str	r2, [r3, r2]
  406536:	3408      	adds	r4, #8
  406538:	f000 f96a 	bl	406810 <__malloc_unlock>
  40653c:	e652      	b.n	4061e4 <_malloc_r+0x58>
  40653e:	684b      	ldr	r3, [r1, #4]
  406540:	e6a6      	b.n	406290 <_malloc_r+0x104>
  406542:	f109 0901 	add.w	r9, r9, #1
  406546:	f019 0f03 	tst.w	r9, #3
  40654a:	f10c 0c08 	add.w	ip, ip, #8
  40654e:	f47f aeb1 	bne.w	4062b4 <_malloc_r+0x128>
  406552:	e02c      	b.n	4065ae <_malloc_r+0x422>
  406554:	f104 0308 	add.w	r3, r4, #8
  406558:	6964      	ldr	r4, [r4, #20]
  40655a:	42a3      	cmp	r3, r4
  40655c:	bf08      	it	eq
  40655e:	3002      	addeq	r0, #2
  406560:	f43f ae69 	beq.w	406236 <_malloc_r+0xaa>
  406564:	e62e      	b.n	4061c4 <_malloc_r+0x38>
  406566:	441a      	add	r2, r3
  406568:	461c      	mov	r4, r3
  40656a:	6851      	ldr	r1, [r2, #4]
  40656c:	68db      	ldr	r3, [r3, #12]
  40656e:	f854 5f08 	ldr.w	r5, [r4, #8]!
  406572:	f041 0101 	orr.w	r1, r1, #1
  406576:	6051      	str	r1, [r2, #4]
  406578:	4630      	mov	r0, r6
  40657a:	60eb      	str	r3, [r5, #12]
  40657c:	609d      	str	r5, [r3, #8]
  40657e:	f000 f947 	bl	406810 <__malloc_unlock>
  406582:	e62f      	b.n	4061e4 <_malloc_r+0x58>
  406584:	305b      	adds	r0, #91	; 0x5b
  406586:	0041      	lsls	r1, r0, #1
  406588:	e640      	b.n	40620c <_malloc_r+0x80>
  40658a:	099a      	lsrs	r2, r3, #6
  40658c:	3238      	adds	r2, #56	; 0x38
  40658e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  406592:	e7aa      	b.n	4064ea <_malloc_r+0x35e>
  406594:	42bc      	cmp	r4, r7
  406596:	4b45      	ldr	r3, [pc, #276]	; (4066ac <_malloc_r+0x520>)
  406598:	f43f af0e 	beq.w	4063b8 <_malloc_r+0x22c>
  40659c:	689c      	ldr	r4, [r3, #8]
  40659e:	6862      	ldr	r2, [r4, #4]
  4065a0:	f022 0203 	bic.w	r2, r2, #3
  4065a4:	e768      	b.n	406478 <_malloc_r+0x2ec>
  4065a6:	f8d8 8000 	ldr.w	r8, [r8]
  4065aa:	4598      	cmp	r8, r3
  4065ac:	d17c      	bne.n	4066a8 <_malloc_r+0x51c>
  4065ae:	f010 0f03 	tst.w	r0, #3
  4065b2:	f1a8 0308 	sub.w	r3, r8, #8
  4065b6:	f100 30ff 	add.w	r0, r0, #4294967295
  4065ba:	d1f4      	bne.n	4065a6 <_malloc_r+0x41a>
  4065bc:	687b      	ldr	r3, [r7, #4]
  4065be:	ea23 0304 	bic.w	r3, r3, r4
  4065c2:	607b      	str	r3, [r7, #4]
  4065c4:	0064      	lsls	r4, r4, #1
  4065c6:	429c      	cmp	r4, r3
  4065c8:	f63f aeca 	bhi.w	406360 <_malloc_r+0x1d4>
  4065cc:	2c00      	cmp	r4, #0
  4065ce:	f43f aec7 	beq.w	406360 <_malloc_r+0x1d4>
  4065d2:	4223      	tst	r3, r4
  4065d4:	4648      	mov	r0, r9
  4065d6:	f47f ae69 	bne.w	4062ac <_malloc_r+0x120>
  4065da:	0064      	lsls	r4, r4, #1
  4065dc:	4223      	tst	r3, r4
  4065de:	f100 0004 	add.w	r0, r0, #4
  4065e2:	d0fa      	beq.n	4065da <_malloc_r+0x44e>
  4065e4:	e662      	b.n	4062ac <_malloc_r+0x120>
  4065e6:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  4065ea:	d818      	bhi.n	40661e <_malloc_r+0x492>
  4065ec:	0be8      	lsrs	r0, r5, #15
  4065ee:	3077      	adds	r0, #119	; 0x77
  4065f0:	0041      	lsls	r1, r0, #1
  4065f2:	e60b      	b.n	40620c <_malloc_r+0x80>
  4065f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4065f8:	e6fb      	b.n	4063f2 <_malloc_r+0x266>
  4065fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4065fe:	1092      	asrs	r2, r2, #2
  406600:	f04f 0c01 	mov.w	ip, #1
  406604:	fa0c f202 	lsl.w	r2, ip, r2
  406608:	4313      	orrs	r3, r2
  40660a:	f8c8 3004 	str.w	r3, [r8, #4]
  40660e:	460a      	mov	r2, r1
  406610:	e77d      	b.n	40650e <_malloc_r+0x382>
  406612:	2301      	movs	r3, #1
  406614:	f8c9 3004 	str.w	r3, [r9, #4]
  406618:	464c      	mov	r4, r9
  40661a:	2200      	movs	r2, #0
  40661c:	e72c      	b.n	406478 <_malloc_r+0x2ec>
  40661e:	f240 5354 	movw	r3, #1364	; 0x554
  406622:	4298      	cmp	r0, r3
  406624:	d81c      	bhi.n	406660 <_malloc_r+0x4d4>
  406626:	0ca8      	lsrs	r0, r5, #18
  406628:	307c      	adds	r0, #124	; 0x7c
  40662a:	0041      	lsls	r1, r0, #1
  40662c:	e5ee      	b.n	40620c <_malloc_r+0x80>
  40662e:	3210      	adds	r2, #16
  406630:	e6b4      	b.n	40639c <_malloc_r+0x210>
  406632:	2a54      	cmp	r2, #84	; 0x54
  406634:	d823      	bhi.n	40667e <_malloc_r+0x4f2>
  406636:	0b1a      	lsrs	r2, r3, #12
  406638:	326e      	adds	r2, #110	; 0x6e
  40663a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40663e:	e754      	b.n	4064ea <_malloc_r+0x35e>
  406640:	68bc      	ldr	r4, [r7, #8]
  406642:	6862      	ldr	r2, [r4, #4]
  406644:	f022 0203 	bic.w	r2, r2, #3
  406648:	e716      	b.n	406478 <_malloc_r+0x2ec>
  40664a:	f3cb 000b 	ubfx	r0, fp, #0, #12
  40664e:	2800      	cmp	r0, #0
  406650:	f47f aeb9 	bne.w	4063c6 <_malloc_r+0x23a>
  406654:	4442      	add	r2, r8
  406656:	68bb      	ldr	r3, [r7, #8]
  406658:	f042 0201 	orr.w	r2, r2, #1
  40665c:	605a      	str	r2, [r3, #4]
  40665e:	e6fd      	b.n	40645c <_malloc_r+0x2d0>
  406660:	21fc      	movs	r1, #252	; 0xfc
  406662:	207e      	movs	r0, #126	; 0x7e
  406664:	e5d2      	b.n	40620c <_malloc_r+0x80>
  406666:	2201      	movs	r2, #1
  406668:	f04f 0a00 	mov.w	sl, #0
  40666c:	e6d4      	b.n	406418 <_malloc_r+0x28c>
  40666e:	f104 0108 	add.w	r1, r4, #8
  406672:	4630      	mov	r0, r6
  406674:	f7ff fa7a 	bl	405b6c <_free_r>
  406678:	f8da 1000 	ldr.w	r1, [sl]
  40667c:	e6ee      	b.n	40645c <_malloc_r+0x2d0>
  40667e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406682:	d804      	bhi.n	40668e <_malloc_r+0x502>
  406684:	0bda      	lsrs	r2, r3, #15
  406686:	3277      	adds	r2, #119	; 0x77
  406688:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40668c:	e72d      	b.n	4064ea <_malloc_r+0x35e>
  40668e:	f240 5154 	movw	r1, #1364	; 0x554
  406692:	428a      	cmp	r2, r1
  406694:	d804      	bhi.n	4066a0 <_malloc_r+0x514>
  406696:	0c9a      	lsrs	r2, r3, #18
  406698:	327c      	adds	r2, #124	; 0x7c
  40669a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40669e:	e724      	b.n	4064ea <_malloc_r+0x35e>
  4066a0:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  4066a4:	227e      	movs	r2, #126	; 0x7e
  4066a6:	e720      	b.n	4064ea <_malloc_r+0x35e>
  4066a8:	687b      	ldr	r3, [r7, #4]
  4066aa:	e78b      	b.n	4065c4 <_malloc_r+0x438>
  4066ac:	20000480 	.word	0x20000480

004066b0 <memchr>:
  4066b0:	0783      	lsls	r3, r0, #30
  4066b2:	b470      	push	{r4, r5, r6}
  4066b4:	b2c9      	uxtb	r1, r1
  4066b6:	d040      	beq.n	40673a <memchr+0x8a>
  4066b8:	1e54      	subs	r4, r2, #1
  4066ba:	2a00      	cmp	r2, #0
  4066bc:	d03f      	beq.n	40673e <memchr+0x8e>
  4066be:	7803      	ldrb	r3, [r0, #0]
  4066c0:	428b      	cmp	r3, r1
  4066c2:	bf18      	it	ne
  4066c4:	1c43      	addne	r3, r0, #1
  4066c6:	d106      	bne.n	4066d6 <memchr+0x26>
  4066c8:	e01d      	b.n	406706 <memchr+0x56>
  4066ca:	b1f4      	cbz	r4, 40670a <memchr+0x5a>
  4066cc:	7802      	ldrb	r2, [r0, #0]
  4066ce:	428a      	cmp	r2, r1
  4066d0:	f104 34ff 	add.w	r4, r4, #4294967295
  4066d4:	d017      	beq.n	406706 <memchr+0x56>
  4066d6:	f013 0f03 	tst.w	r3, #3
  4066da:	4618      	mov	r0, r3
  4066dc:	f103 0301 	add.w	r3, r3, #1
  4066e0:	d1f3      	bne.n	4066ca <memchr+0x1a>
  4066e2:	2c03      	cmp	r4, #3
  4066e4:	d814      	bhi.n	406710 <memchr+0x60>
  4066e6:	b184      	cbz	r4, 40670a <memchr+0x5a>
  4066e8:	7803      	ldrb	r3, [r0, #0]
  4066ea:	428b      	cmp	r3, r1
  4066ec:	d00b      	beq.n	406706 <memchr+0x56>
  4066ee:	1905      	adds	r5, r0, r4
  4066f0:	1c43      	adds	r3, r0, #1
  4066f2:	e002      	b.n	4066fa <memchr+0x4a>
  4066f4:	7802      	ldrb	r2, [r0, #0]
  4066f6:	428a      	cmp	r2, r1
  4066f8:	d005      	beq.n	406706 <memchr+0x56>
  4066fa:	42ab      	cmp	r3, r5
  4066fc:	4618      	mov	r0, r3
  4066fe:	f103 0301 	add.w	r3, r3, #1
  406702:	d1f7      	bne.n	4066f4 <memchr+0x44>
  406704:	2000      	movs	r0, #0
  406706:	bc70      	pop	{r4, r5, r6}
  406708:	4770      	bx	lr
  40670a:	4620      	mov	r0, r4
  40670c:	bc70      	pop	{r4, r5, r6}
  40670e:	4770      	bx	lr
  406710:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  406714:	4602      	mov	r2, r0
  406716:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40671a:	4610      	mov	r0, r2
  40671c:	3204      	adds	r2, #4
  40671e:	6803      	ldr	r3, [r0, #0]
  406720:	4073      	eors	r3, r6
  406722:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  406726:	ea25 0303 	bic.w	r3, r5, r3
  40672a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40672e:	d1da      	bne.n	4066e6 <memchr+0x36>
  406730:	3c04      	subs	r4, #4
  406732:	2c03      	cmp	r4, #3
  406734:	4610      	mov	r0, r2
  406736:	d8f0      	bhi.n	40671a <memchr+0x6a>
  406738:	e7d5      	b.n	4066e6 <memchr+0x36>
  40673a:	4614      	mov	r4, r2
  40673c:	e7d1      	b.n	4066e2 <memchr+0x32>
  40673e:	4610      	mov	r0, r2
  406740:	e7e1      	b.n	406706 <memchr+0x56>
  406742:	bf00      	nop

00406744 <memmove>:
  406744:	4288      	cmp	r0, r1
  406746:	b5f0      	push	{r4, r5, r6, r7, lr}
  406748:	d90d      	bls.n	406766 <memmove+0x22>
  40674a:	188b      	adds	r3, r1, r2
  40674c:	4298      	cmp	r0, r3
  40674e:	d20a      	bcs.n	406766 <memmove+0x22>
  406750:	1881      	adds	r1, r0, r2
  406752:	2a00      	cmp	r2, #0
  406754:	d054      	beq.n	406800 <memmove+0xbc>
  406756:	1a9a      	subs	r2, r3, r2
  406758:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40675c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  406760:	4293      	cmp	r3, r2
  406762:	d1f9      	bne.n	406758 <memmove+0x14>
  406764:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406766:	2a0f      	cmp	r2, #15
  406768:	d948      	bls.n	4067fc <memmove+0xb8>
  40676a:	ea40 0301 	orr.w	r3, r0, r1
  40676e:	079b      	lsls	r3, r3, #30
  406770:	d147      	bne.n	406802 <memmove+0xbe>
  406772:	f100 0410 	add.w	r4, r0, #16
  406776:	f101 0310 	add.w	r3, r1, #16
  40677a:	4615      	mov	r5, r2
  40677c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406780:	f844 6c10 	str.w	r6, [r4, #-16]
  406784:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406788:	f844 6c0c 	str.w	r6, [r4, #-12]
  40678c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406790:	f844 6c08 	str.w	r6, [r4, #-8]
  406794:	3d10      	subs	r5, #16
  406796:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40679a:	f844 6c04 	str.w	r6, [r4, #-4]
  40679e:	2d0f      	cmp	r5, #15
  4067a0:	f103 0310 	add.w	r3, r3, #16
  4067a4:	f104 0410 	add.w	r4, r4, #16
  4067a8:	d8e8      	bhi.n	40677c <memmove+0x38>
  4067aa:	f1a2 0310 	sub.w	r3, r2, #16
  4067ae:	f023 030f 	bic.w	r3, r3, #15
  4067b2:	f002 0e0f 	and.w	lr, r2, #15
  4067b6:	3310      	adds	r3, #16
  4067b8:	f1be 0f03 	cmp.w	lr, #3
  4067bc:	4419      	add	r1, r3
  4067be:	4403      	add	r3, r0
  4067c0:	d921      	bls.n	406806 <memmove+0xc2>
  4067c2:	1f1e      	subs	r6, r3, #4
  4067c4:	460d      	mov	r5, r1
  4067c6:	4674      	mov	r4, lr
  4067c8:	3c04      	subs	r4, #4
  4067ca:	f855 7b04 	ldr.w	r7, [r5], #4
  4067ce:	f846 7f04 	str.w	r7, [r6, #4]!
  4067d2:	2c03      	cmp	r4, #3
  4067d4:	d8f8      	bhi.n	4067c8 <memmove+0x84>
  4067d6:	f1ae 0404 	sub.w	r4, lr, #4
  4067da:	f024 0403 	bic.w	r4, r4, #3
  4067de:	3404      	adds	r4, #4
  4067e0:	4423      	add	r3, r4
  4067e2:	4421      	add	r1, r4
  4067e4:	f002 0203 	and.w	r2, r2, #3
  4067e8:	b152      	cbz	r2, 406800 <memmove+0xbc>
  4067ea:	3b01      	subs	r3, #1
  4067ec:	440a      	add	r2, r1
  4067ee:	f811 4b01 	ldrb.w	r4, [r1], #1
  4067f2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4067f6:	4291      	cmp	r1, r2
  4067f8:	d1f9      	bne.n	4067ee <memmove+0xaa>
  4067fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4067fc:	4603      	mov	r3, r0
  4067fe:	e7f3      	b.n	4067e8 <memmove+0xa4>
  406800:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406802:	4603      	mov	r3, r0
  406804:	e7f1      	b.n	4067ea <memmove+0xa6>
  406806:	4672      	mov	r2, lr
  406808:	e7ee      	b.n	4067e8 <memmove+0xa4>
  40680a:	bf00      	nop

0040680c <__malloc_lock>:
  40680c:	4770      	bx	lr
  40680e:	bf00      	nop

00406810 <__malloc_unlock>:
  406810:	4770      	bx	lr
  406812:	bf00      	nop

00406814 <_realloc_r>:
  406814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406818:	4617      	mov	r7, r2
  40681a:	b083      	sub	sp, #12
  40681c:	460e      	mov	r6, r1
  40681e:	2900      	cmp	r1, #0
  406820:	f000 80e7 	beq.w	4069f2 <_realloc_r+0x1de>
  406824:	4681      	mov	r9, r0
  406826:	f107 050b 	add.w	r5, r7, #11
  40682a:	f7ff ffef 	bl	40680c <__malloc_lock>
  40682e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406832:	2d16      	cmp	r5, #22
  406834:	f023 0403 	bic.w	r4, r3, #3
  406838:	f1a6 0808 	sub.w	r8, r6, #8
  40683c:	d84c      	bhi.n	4068d8 <_realloc_r+0xc4>
  40683e:	2210      	movs	r2, #16
  406840:	4615      	mov	r5, r2
  406842:	42af      	cmp	r7, r5
  406844:	d84d      	bhi.n	4068e2 <_realloc_r+0xce>
  406846:	4294      	cmp	r4, r2
  406848:	f280 8084 	bge.w	406954 <_realloc_r+0x140>
  40684c:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 406bfc <_realloc_r+0x3e8>
  406850:	f8db 0008 	ldr.w	r0, [fp, #8]
  406854:	eb08 0104 	add.w	r1, r8, r4
  406858:	4288      	cmp	r0, r1
  40685a:	f000 80d6 	beq.w	406a0a <_realloc_r+0x1f6>
  40685e:	6848      	ldr	r0, [r1, #4]
  406860:	f020 0e01 	bic.w	lr, r0, #1
  406864:	448e      	add	lr, r1
  406866:	f8de e004 	ldr.w	lr, [lr, #4]
  40686a:	f01e 0f01 	tst.w	lr, #1
  40686e:	d13f      	bne.n	4068f0 <_realloc_r+0xdc>
  406870:	f020 0003 	bic.w	r0, r0, #3
  406874:	4420      	add	r0, r4
  406876:	4290      	cmp	r0, r2
  406878:	f280 80c1 	bge.w	4069fe <_realloc_r+0x1ea>
  40687c:	07db      	lsls	r3, r3, #31
  40687e:	f100 808f 	bmi.w	4069a0 <_realloc_r+0x18c>
  406882:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406886:	ebc3 0a08 	rsb	sl, r3, r8
  40688a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40688e:	f023 0303 	bic.w	r3, r3, #3
  406892:	eb00 0e03 	add.w	lr, r0, r3
  406896:	4596      	cmp	lr, r2
  406898:	db34      	blt.n	406904 <_realloc_r+0xf0>
  40689a:	68cb      	ldr	r3, [r1, #12]
  40689c:	688a      	ldr	r2, [r1, #8]
  40689e:	4657      	mov	r7, sl
  4068a0:	60d3      	str	r3, [r2, #12]
  4068a2:	609a      	str	r2, [r3, #8]
  4068a4:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4068a8:	f8da 300c 	ldr.w	r3, [sl, #12]
  4068ac:	60cb      	str	r3, [r1, #12]
  4068ae:	1f22      	subs	r2, r4, #4
  4068b0:	2a24      	cmp	r2, #36	; 0x24
  4068b2:	6099      	str	r1, [r3, #8]
  4068b4:	f200 8136 	bhi.w	406b24 <_realloc_r+0x310>
  4068b8:	2a13      	cmp	r2, #19
  4068ba:	f240 80fd 	bls.w	406ab8 <_realloc_r+0x2a4>
  4068be:	6833      	ldr	r3, [r6, #0]
  4068c0:	f8ca 3008 	str.w	r3, [sl, #8]
  4068c4:	6873      	ldr	r3, [r6, #4]
  4068c6:	f8ca 300c 	str.w	r3, [sl, #12]
  4068ca:	2a1b      	cmp	r2, #27
  4068cc:	f200 8140 	bhi.w	406b50 <_realloc_r+0x33c>
  4068d0:	3608      	adds	r6, #8
  4068d2:	f10a 0310 	add.w	r3, sl, #16
  4068d6:	e0f0      	b.n	406aba <_realloc_r+0x2a6>
  4068d8:	f025 0507 	bic.w	r5, r5, #7
  4068dc:	2d00      	cmp	r5, #0
  4068de:	462a      	mov	r2, r5
  4068e0:	daaf      	bge.n	406842 <_realloc_r+0x2e>
  4068e2:	230c      	movs	r3, #12
  4068e4:	2000      	movs	r0, #0
  4068e6:	f8c9 3000 	str.w	r3, [r9]
  4068ea:	b003      	add	sp, #12
  4068ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4068f0:	07d9      	lsls	r1, r3, #31
  4068f2:	d455      	bmi.n	4069a0 <_realloc_r+0x18c>
  4068f4:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4068f8:	ebc3 0a08 	rsb	sl, r3, r8
  4068fc:	f8da 3004 	ldr.w	r3, [sl, #4]
  406900:	f023 0303 	bic.w	r3, r3, #3
  406904:	4423      	add	r3, r4
  406906:	4293      	cmp	r3, r2
  406908:	db4a      	blt.n	4069a0 <_realloc_r+0x18c>
  40690a:	4657      	mov	r7, sl
  40690c:	f8da 100c 	ldr.w	r1, [sl, #12]
  406910:	f857 0f08 	ldr.w	r0, [r7, #8]!
  406914:	1f22      	subs	r2, r4, #4
  406916:	2a24      	cmp	r2, #36	; 0x24
  406918:	60c1      	str	r1, [r0, #12]
  40691a:	6088      	str	r0, [r1, #8]
  40691c:	f200 810e 	bhi.w	406b3c <_realloc_r+0x328>
  406920:	2a13      	cmp	r2, #19
  406922:	f240 8109 	bls.w	406b38 <_realloc_r+0x324>
  406926:	6831      	ldr	r1, [r6, #0]
  406928:	f8ca 1008 	str.w	r1, [sl, #8]
  40692c:	6871      	ldr	r1, [r6, #4]
  40692e:	f8ca 100c 	str.w	r1, [sl, #12]
  406932:	2a1b      	cmp	r2, #27
  406934:	f200 8121 	bhi.w	406b7a <_realloc_r+0x366>
  406938:	3608      	adds	r6, #8
  40693a:	f10a 0210 	add.w	r2, sl, #16
  40693e:	6831      	ldr	r1, [r6, #0]
  406940:	6011      	str	r1, [r2, #0]
  406942:	6871      	ldr	r1, [r6, #4]
  406944:	6051      	str	r1, [r2, #4]
  406946:	68b1      	ldr	r1, [r6, #8]
  406948:	6091      	str	r1, [r2, #8]
  40694a:	461c      	mov	r4, r3
  40694c:	f8da 3004 	ldr.w	r3, [sl, #4]
  406950:	463e      	mov	r6, r7
  406952:	46d0      	mov	r8, sl
  406954:	1b62      	subs	r2, r4, r5
  406956:	2a0f      	cmp	r2, #15
  406958:	f003 0301 	and.w	r3, r3, #1
  40695c:	d80e      	bhi.n	40697c <_realloc_r+0x168>
  40695e:	4323      	orrs	r3, r4
  406960:	4444      	add	r4, r8
  406962:	f8c8 3004 	str.w	r3, [r8, #4]
  406966:	6863      	ldr	r3, [r4, #4]
  406968:	f043 0301 	orr.w	r3, r3, #1
  40696c:	6063      	str	r3, [r4, #4]
  40696e:	4648      	mov	r0, r9
  406970:	f7ff ff4e 	bl	406810 <__malloc_unlock>
  406974:	4630      	mov	r0, r6
  406976:	b003      	add	sp, #12
  406978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40697c:	eb08 0105 	add.w	r1, r8, r5
  406980:	431d      	orrs	r5, r3
  406982:	f042 0301 	orr.w	r3, r2, #1
  406986:	440a      	add	r2, r1
  406988:	f8c8 5004 	str.w	r5, [r8, #4]
  40698c:	604b      	str	r3, [r1, #4]
  40698e:	6853      	ldr	r3, [r2, #4]
  406990:	f043 0301 	orr.w	r3, r3, #1
  406994:	3108      	adds	r1, #8
  406996:	6053      	str	r3, [r2, #4]
  406998:	4648      	mov	r0, r9
  40699a:	f7ff f8e7 	bl	405b6c <_free_r>
  40699e:	e7e6      	b.n	40696e <_realloc_r+0x15a>
  4069a0:	4639      	mov	r1, r7
  4069a2:	4648      	mov	r0, r9
  4069a4:	f7ff fbf2 	bl	40618c <_malloc_r>
  4069a8:	4607      	mov	r7, r0
  4069aa:	b1d8      	cbz	r0, 4069e4 <_realloc_r+0x1d0>
  4069ac:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4069b0:	f023 0201 	bic.w	r2, r3, #1
  4069b4:	4442      	add	r2, r8
  4069b6:	f1a0 0108 	sub.w	r1, r0, #8
  4069ba:	4291      	cmp	r1, r2
  4069bc:	f000 80ac 	beq.w	406b18 <_realloc_r+0x304>
  4069c0:	1f22      	subs	r2, r4, #4
  4069c2:	2a24      	cmp	r2, #36	; 0x24
  4069c4:	f200 8099 	bhi.w	406afa <_realloc_r+0x2e6>
  4069c8:	2a13      	cmp	r2, #19
  4069ca:	d86a      	bhi.n	406aa2 <_realloc_r+0x28e>
  4069cc:	4603      	mov	r3, r0
  4069ce:	4632      	mov	r2, r6
  4069d0:	6811      	ldr	r1, [r2, #0]
  4069d2:	6019      	str	r1, [r3, #0]
  4069d4:	6851      	ldr	r1, [r2, #4]
  4069d6:	6059      	str	r1, [r3, #4]
  4069d8:	6892      	ldr	r2, [r2, #8]
  4069da:	609a      	str	r2, [r3, #8]
  4069dc:	4631      	mov	r1, r6
  4069de:	4648      	mov	r0, r9
  4069e0:	f7ff f8c4 	bl	405b6c <_free_r>
  4069e4:	4648      	mov	r0, r9
  4069e6:	f7ff ff13 	bl	406810 <__malloc_unlock>
  4069ea:	4638      	mov	r0, r7
  4069ec:	b003      	add	sp, #12
  4069ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4069f2:	4611      	mov	r1, r2
  4069f4:	b003      	add	sp, #12
  4069f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4069fa:	f7ff bbc7 	b.w	40618c <_malloc_r>
  4069fe:	68ca      	ldr	r2, [r1, #12]
  406a00:	6889      	ldr	r1, [r1, #8]
  406a02:	4604      	mov	r4, r0
  406a04:	60ca      	str	r2, [r1, #12]
  406a06:	6091      	str	r1, [r2, #8]
  406a08:	e7a4      	b.n	406954 <_realloc_r+0x140>
  406a0a:	6841      	ldr	r1, [r0, #4]
  406a0c:	f021 0103 	bic.w	r1, r1, #3
  406a10:	4421      	add	r1, r4
  406a12:	f105 0010 	add.w	r0, r5, #16
  406a16:	4281      	cmp	r1, r0
  406a18:	da5b      	bge.n	406ad2 <_realloc_r+0x2be>
  406a1a:	07db      	lsls	r3, r3, #31
  406a1c:	d4c0      	bmi.n	4069a0 <_realloc_r+0x18c>
  406a1e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406a22:	ebc3 0a08 	rsb	sl, r3, r8
  406a26:	f8da 3004 	ldr.w	r3, [sl, #4]
  406a2a:	f023 0303 	bic.w	r3, r3, #3
  406a2e:	eb01 0c03 	add.w	ip, r1, r3
  406a32:	4560      	cmp	r0, ip
  406a34:	f73f af66 	bgt.w	406904 <_realloc_r+0xf0>
  406a38:	4657      	mov	r7, sl
  406a3a:	f8da 300c 	ldr.w	r3, [sl, #12]
  406a3e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  406a42:	1f22      	subs	r2, r4, #4
  406a44:	2a24      	cmp	r2, #36	; 0x24
  406a46:	60cb      	str	r3, [r1, #12]
  406a48:	6099      	str	r1, [r3, #8]
  406a4a:	f200 80b8 	bhi.w	406bbe <_realloc_r+0x3aa>
  406a4e:	2a13      	cmp	r2, #19
  406a50:	f240 80a9 	bls.w	406ba6 <_realloc_r+0x392>
  406a54:	6833      	ldr	r3, [r6, #0]
  406a56:	f8ca 3008 	str.w	r3, [sl, #8]
  406a5a:	6873      	ldr	r3, [r6, #4]
  406a5c:	f8ca 300c 	str.w	r3, [sl, #12]
  406a60:	2a1b      	cmp	r2, #27
  406a62:	f200 80b5 	bhi.w	406bd0 <_realloc_r+0x3bc>
  406a66:	3608      	adds	r6, #8
  406a68:	f10a 0310 	add.w	r3, sl, #16
  406a6c:	6832      	ldr	r2, [r6, #0]
  406a6e:	601a      	str	r2, [r3, #0]
  406a70:	6872      	ldr	r2, [r6, #4]
  406a72:	605a      	str	r2, [r3, #4]
  406a74:	68b2      	ldr	r2, [r6, #8]
  406a76:	609a      	str	r2, [r3, #8]
  406a78:	eb0a 0205 	add.w	r2, sl, r5
  406a7c:	ebc5 030c 	rsb	r3, r5, ip
  406a80:	f043 0301 	orr.w	r3, r3, #1
  406a84:	f8cb 2008 	str.w	r2, [fp, #8]
  406a88:	6053      	str	r3, [r2, #4]
  406a8a:	f8da 3004 	ldr.w	r3, [sl, #4]
  406a8e:	f003 0301 	and.w	r3, r3, #1
  406a92:	431d      	orrs	r5, r3
  406a94:	4648      	mov	r0, r9
  406a96:	f8ca 5004 	str.w	r5, [sl, #4]
  406a9a:	f7ff feb9 	bl	406810 <__malloc_unlock>
  406a9e:	4638      	mov	r0, r7
  406aa0:	e769      	b.n	406976 <_realloc_r+0x162>
  406aa2:	6833      	ldr	r3, [r6, #0]
  406aa4:	6003      	str	r3, [r0, #0]
  406aa6:	6873      	ldr	r3, [r6, #4]
  406aa8:	6043      	str	r3, [r0, #4]
  406aaa:	2a1b      	cmp	r2, #27
  406aac:	d829      	bhi.n	406b02 <_realloc_r+0x2ee>
  406aae:	f100 0308 	add.w	r3, r0, #8
  406ab2:	f106 0208 	add.w	r2, r6, #8
  406ab6:	e78b      	b.n	4069d0 <_realloc_r+0x1bc>
  406ab8:	463b      	mov	r3, r7
  406aba:	6832      	ldr	r2, [r6, #0]
  406abc:	601a      	str	r2, [r3, #0]
  406abe:	6872      	ldr	r2, [r6, #4]
  406ac0:	605a      	str	r2, [r3, #4]
  406ac2:	68b2      	ldr	r2, [r6, #8]
  406ac4:	609a      	str	r2, [r3, #8]
  406ac6:	463e      	mov	r6, r7
  406ac8:	4674      	mov	r4, lr
  406aca:	f8da 3004 	ldr.w	r3, [sl, #4]
  406ace:	46d0      	mov	r8, sl
  406ad0:	e740      	b.n	406954 <_realloc_r+0x140>
  406ad2:	eb08 0205 	add.w	r2, r8, r5
  406ad6:	1b4b      	subs	r3, r1, r5
  406ad8:	f043 0301 	orr.w	r3, r3, #1
  406adc:	f8cb 2008 	str.w	r2, [fp, #8]
  406ae0:	6053      	str	r3, [r2, #4]
  406ae2:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406ae6:	f003 0301 	and.w	r3, r3, #1
  406aea:	431d      	orrs	r5, r3
  406aec:	4648      	mov	r0, r9
  406aee:	f846 5c04 	str.w	r5, [r6, #-4]
  406af2:	f7ff fe8d 	bl	406810 <__malloc_unlock>
  406af6:	4630      	mov	r0, r6
  406af8:	e73d      	b.n	406976 <_realloc_r+0x162>
  406afa:	4631      	mov	r1, r6
  406afc:	f7ff fe22 	bl	406744 <memmove>
  406b00:	e76c      	b.n	4069dc <_realloc_r+0x1c8>
  406b02:	68b3      	ldr	r3, [r6, #8]
  406b04:	6083      	str	r3, [r0, #8]
  406b06:	68f3      	ldr	r3, [r6, #12]
  406b08:	60c3      	str	r3, [r0, #12]
  406b0a:	2a24      	cmp	r2, #36	; 0x24
  406b0c:	d02c      	beq.n	406b68 <_realloc_r+0x354>
  406b0e:	f100 0310 	add.w	r3, r0, #16
  406b12:	f106 0210 	add.w	r2, r6, #16
  406b16:	e75b      	b.n	4069d0 <_realloc_r+0x1bc>
  406b18:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406b1c:	f022 0203 	bic.w	r2, r2, #3
  406b20:	4414      	add	r4, r2
  406b22:	e717      	b.n	406954 <_realloc_r+0x140>
  406b24:	4631      	mov	r1, r6
  406b26:	4638      	mov	r0, r7
  406b28:	4674      	mov	r4, lr
  406b2a:	463e      	mov	r6, r7
  406b2c:	f7ff fe0a 	bl	406744 <memmove>
  406b30:	46d0      	mov	r8, sl
  406b32:	f8da 3004 	ldr.w	r3, [sl, #4]
  406b36:	e70d      	b.n	406954 <_realloc_r+0x140>
  406b38:	463a      	mov	r2, r7
  406b3a:	e700      	b.n	40693e <_realloc_r+0x12a>
  406b3c:	4631      	mov	r1, r6
  406b3e:	4638      	mov	r0, r7
  406b40:	461c      	mov	r4, r3
  406b42:	463e      	mov	r6, r7
  406b44:	f7ff fdfe 	bl	406744 <memmove>
  406b48:	46d0      	mov	r8, sl
  406b4a:	f8da 3004 	ldr.w	r3, [sl, #4]
  406b4e:	e701      	b.n	406954 <_realloc_r+0x140>
  406b50:	68b3      	ldr	r3, [r6, #8]
  406b52:	f8ca 3010 	str.w	r3, [sl, #16]
  406b56:	68f3      	ldr	r3, [r6, #12]
  406b58:	f8ca 3014 	str.w	r3, [sl, #20]
  406b5c:	2a24      	cmp	r2, #36	; 0x24
  406b5e:	d018      	beq.n	406b92 <_realloc_r+0x37e>
  406b60:	3610      	adds	r6, #16
  406b62:	f10a 0318 	add.w	r3, sl, #24
  406b66:	e7a8      	b.n	406aba <_realloc_r+0x2a6>
  406b68:	6933      	ldr	r3, [r6, #16]
  406b6a:	6103      	str	r3, [r0, #16]
  406b6c:	6973      	ldr	r3, [r6, #20]
  406b6e:	6143      	str	r3, [r0, #20]
  406b70:	f106 0218 	add.w	r2, r6, #24
  406b74:	f100 0318 	add.w	r3, r0, #24
  406b78:	e72a      	b.n	4069d0 <_realloc_r+0x1bc>
  406b7a:	68b1      	ldr	r1, [r6, #8]
  406b7c:	f8ca 1010 	str.w	r1, [sl, #16]
  406b80:	68f1      	ldr	r1, [r6, #12]
  406b82:	f8ca 1014 	str.w	r1, [sl, #20]
  406b86:	2a24      	cmp	r2, #36	; 0x24
  406b88:	d00f      	beq.n	406baa <_realloc_r+0x396>
  406b8a:	3610      	adds	r6, #16
  406b8c:	f10a 0218 	add.w	r2, sl, #24
  406b90:	e6d5      	b.n	40693e <_realloc_r+0x12a>
  406b92:	6933      	ldr	r3, [r6, #16]
  406b94:	f8ca 3018 	str.w	r3, [sl, #24]
  406b98:	6973      	ldr	r3, [r6, #20]
  406b9a:	f8ca 301c 	str.w	r3, [sl, #28]
  406b9e:	3618      	adds	r6, #24
  406ba0:	f10a 0320 	add.w	r3, sl, #32
  406ba4:	e789      	b.n	406aba <_realloc_r+0x2a6>
  406ba6:	463b      	mov	r3, r7
  406ba8:	e760      	b.n	406a6c <_realloc_r+0x258>
  406baa:	6932      	ldr	r2, [r6, #16]
  406bac:	f8ca 2018 	str.w	r2, [sl, #24]
  406bb0:	6972      	ldr	r2, [r6, #20]
  406bb2:	f8ca 201c 	str.w	r2, [sl, #28]
  406bb6:	3618      	adds	r6, #24
  406bb8:	f10a 0220 	add.w	r2, sl, #32
  406bbc:	e6bf      	b.n	40693e <_realloc_r+0x12a>
  406bbe:	4631      	mov	r1, r6
  406bc0:	4638      	mov	r0, r7
  406bc2:	f8cd c004 	str.w	ip, [sp, #4]
  406bc6:	f7ff fdbd 	bl	406744 <memmove>
  406bca:	f8dd c004 	ldr.w	ip, [sp, #4]
  406bce:	e753      	b.n	406a78 <_realloc_r+0x264>
  406bd0:	68b3      	ldr	r3, [r6, #8]
  406bd2:	f8ca 3010 	str.w	r3, [sl, #16]
  406bd6:	68f3      	ldr	r3, [r6, #12]
  406bd8:	f8ca 3014 	str.w	r3, [sl, #20]
  406bdc:	2a24      	cmp	r2, #36	; 0x24
  406bde:	d003      	beq.n	406be8 <_realloc_r+0x3d4>
  406be0:	3610      	adds	r6, #16
  406be2:	f10a 0318 	add.w	r3, sl, #24
  406be6:	e741      	b.n	406a6c <_realloc_r+0x258>
  406be8:	6933      	ldr	r3, [r6, #16]
  406bea:	f8ca 3018 	str.w	r3, [sl, #24]
  406bee:	6973      	ldr	r3, [r6, #20]
  406bf0:	f8ca 301c 	str.w	r3, [sl, #28]
  406bf4:	3618      	adds	r6, #24
  406bf6:	f10a 0320 	add.w	r3, sl, #32
  406bfa:	e737      	b.n	406a6c <_realloc_r+0x258>
  406bfc:	20000480 	.word	0x20000480

00406c00 <_sbrk_r>:
  406c00:	b538      	push	{r3, r4, r5, lr}
  406c02:	4c07      	ldr	r4, [pc, #28]	; (406c20 <_sbrk_r+0x20>)
  406c04:	2300      	movs	r3, #0
  406c06:	4605      	mov	r5, r0
  406c08:	4608      	mov	r0, r1
  406c0a:	6023      	str	r3, [r4, #0]
  406c0c:	f7fa f896 	bl	400d3c <_sbrk>
  406c10:	1c43      	adds	r3, r0, #1
  406c12:	d000      	beq.n	406c16 <_sbrk_r+0x16>
  406c14:	bd38      	pop	{r3, r4, r5, pc}
  406c16:	6823      	ldr	r3, [r4, #0]
  406c18:	2b00      	cmp	r3, #0
  406c1a:	d0fb      	beq.n	406c14 <_sbrk_r+0x14>
  406c1c:	602b      	str	r3, [r5, #0]
  406c1e:	bd38      	pop	{r3, r4, r5, pc}
  406c20:	2001cf34 	.word	0x2001cf34

00406c24 <__sread>:
  406c24:	b510      	push	{r4, lr}
  406c26:	460c      	mov	r4, r1
  406c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c2c:	f000 f9bc 	bl	406fa8 <_read_r>
  406c30:	2800      	cmp	r0, #0
  406c32:	db03      	blt.n	406c3c <__sread+0x18>
  406c34:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406c36:	4403      	add	r3, r0
  406c38:	6523      	str	r3, [r4, #80]	; 0x50
  406c3a:	bd10      	pop	{r4, pc}
  406c3c:	89a3      	ldrh	r3, [r4, #12]
  406c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406c42:	81a3      	strh	r3, [r4, #12]
  406c44:	bd10      	pop	{r4, pc}
  406c46:	bf00      	nop

00406c48 <__swrite>:
  406c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c4c:	4616      	mov	r6, r2
  406c4e:	898a      	ldrh	r2, [r1, #12]
  406c50:	461d      	mov	r5, r3
  406c52:	05d3      	lsls	r3, r2, #23
  406c54:	460c      	mov	r4, r1
  406c56:	4607      	mov	r7, r0
  406c58:	d506      	bpl.n	406c68 <__swrite+0x20>
  406c5a:	2200      	movs	r2, #0
  406c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c60:	2302      	movs	r3, #2
  406c62:	f000 f98d 	bl	406f80 <_lseek_r>
  406c66:	89a2      	ldrh	r2, [r4, #12]
  406c68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406c6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406c70:	81a2      	strh	r2, [r4, #12]
  406c72:	4638      	mov	r0, r7
  406c74:	4632      	mov	r2, r6
  406c76:	462b      	mov	r3, r5
  406c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406c7c:	f000 b8a0 	b.w	406dc0 <_write_r>

00406c80 <__sseek>:
  406c80:	b510      	push	{r4, lr}
  406c82:	460c      	mov	r4, r1
  406c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c88:	f000 f97a 	bl	406f80 <_lseek_r>
  406c8c:	89a3      	ldrh	r3, [r4, #12]
  406c8e:	1c42      	adds	r2, r0, #1
  406c90:	bf0e      	itee	eq
  406c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406c9a:	6520      	strne	r0, [r4, #80]	; 0x50
  406c9c:	81a3      	strh	r3, [r4, #12]
  406c9e:	bd10      	pop	{r4, pc}

00406ca0 <__sclose>:
  406ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406ca4:	f000 b8f2 	b.w	406e8c <_close_r>

00406ca8 <__swbuf_r>:
  406ca8:	b570      	push	{r4, r5, r6, lr}
  406caa:	460d      	mov	r5, r1
  406cac:	4614      	mov	r4, r2
  406cae:	4606      	mov	r6, r0
  406cb0:	b110      	cbz	r0, 406cb8 <__swbuf_r+0x10>
  406cb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406cb4:	2b00      	cmp	r3, #0
  406cb6:	d048      	beq.n	406d4a <__swbuf_r+0xa2>
  406cb8:	89a2      	ldrh	r2, [r4, #12]
  406cba:	69a3      	ldr	r3, [r4, #24]
  406cbc:	60a3      	str	r3, [r4, #8]
  406cbe:	b291      	uxth	r1, r2
  406cc0:	0708      	lsls	r0, r1, #28
  406cc2:	d538      	bpl.n	406d36 <__swbuf_r+0x8e>
  406cc4:	6923      	ldr	r3, [r4, #16]
  406cc6:	2b00      	cmp	r3, #0
  406cc8:	d035      	beq.n	406d36 <__swbuf_r+0x8e>
  406cca:	0489      	lsls	r1, r1, #18
  406ccc:	b2ed      	uxtb	r5, r5
  406cce:	d515      	bpl.n	406cfc <__swbuf_r+0x54>
  406cd0:	6822      	ldr	r2, [r4, #0]
  406cd2:	6961      	ldr	r1, [r4, #20]
  406cd4:	1ad3      	subs	r3, r2, r3
  406cd6:	428b      	cmp	r3, r1
  406cd8:	da1c      	bge.n	406d14 <__swbuf_r+0x6c>
  406cda:	3301      	adds	r3, #1
  406cdc:	68a1      	ldr	r1, [r4, #8]
  406cde:	1c50      	adds	r0, r2, #1
  406ce0:	3901      	subs	r1, #1
  406ce2:	60a1      	str	r1, [r4, #8]
  406ce4:	6020      	str	r0, [r4, #0]
  406ce6:	7015      	strb	r5, [r2, #0]
  406ce8:	6962      	ldr	r2, [r4, #20]
  406cea:	429a      	cmp	r2, r3
  406cec:	d01a      	beq.n	406d24 <__swbuf_r+0x7c>
  406cee:	89a3      	ldrh	r3, [r4, #12]
  406cf0:	07db      	lsls	r3, r3, #31
  406cf2:	d501      	bpl.n	406cf8 <__swbuf_r+0x50>
  406cf4:	2d0a      	cmp	r5, #10
  406cf6:	d015      	beq.n	406d24 <__swbuf_r+0x7c>
  406cf8:	4628      	mov	r0, r5
  406cfa:	bd70      	pop	{r4, r5, r6, pc}
  406cfc:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406cfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406d02:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406d06:	81a2      	strh	r2, [r4, #12]
  406d08:	6822      	ldr	r2, [r4, #0]
  406d0a:	6661      	str	r1, [r4, #100]	; 0x64
  406d0c:	6961      	ldr	r1, [r4, #20]
  406d0e:	1ad3      	subs	r3, r2, r3
  406d10:	428b      	cmp	r3, r1
  406d12:	dbe2      	blt.n	406cda <__swbuf_r+0x32>
  406d14:	4630      	mov	r0, r6
  406d16:	4621      	mov	r1, r4
  406d18:	f7fe fdbc 	bl	405894 <_fflush_r>
  406d1c:	b940      	cbnz	r0, 406d30 <__swbuf_r+0x88>
  406d1e:	6822      	ldr	r2, [r4, #0]
  406d20:	2301      	movs	r3, #1
  406d22:	e7db      	b.n	406cdc <__swbuf_r+0x34>
  406d24:	4630      	mov	r0, r6
  406d26:	4621      	mov	r1, r4
  406d28:	f7fe fdb4 	bl	405894 <_fflush_r>
  406d2c:	2800      	cmp	r0, #0
  406d2e:	d0e3      	beq.n	406cf8 <__swbuf_r+0x50>
  406d30:	f04f 30ff 	mov.w	r0, #4294967295
  406d34:	bd70      	pop	{r4, r5, r6, pc}
  406d36:	4630      	mov	r0, r6
  406d38:	4621      	mov	r1, r4
  406d3a:	f7fe fc8f 	bl	40565c <__swsetup_r>
  406d3e:	2800      	cmp	r0, #0
  406d40:	d1f6      	bne.n	406d30 <__swbuf_r+0x88>
  406d42:	89a2      	ldrh	r2, [r4, #12]
  406d44:	6923      	ldr	r3, [r4, #16]
  406d46:	b291      	uxth	r1, r2
  406d48:	e7bf      	b.n	406cca <__swbuf_r+0x22>
  406d4a:	f7fe fe37 	bl	4059bc <__sinit>
  406d4e:	e7b3      	b.n	406cb8 <__swbuf_r+0x10>

00406d50 <_wcrtomb_r>:
  406d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d54:	4605      	mov	r5, r0
  406d56:	b086      	sub	sp, #24
  406d58:	461e      	mov	r6, r3
  406d5a:	460c      	mov	r4, r1
  406d5c:	b1a1      	cbz	r1, 406d88 <_wcrtomb_r+0x38>
  406d5e:	4b10      	ldr	r3, [pc, #64]	; (406da0 <_wcrtomb_r+0x50>)
  406d60:	4617      	mov	r7, r2
  406d62:	f8d3 8000 	ldr.w	r8, [r3]
  406d66:	f7ff f98f 	bl	406088 <__locale_charset>
  406d6a:	9600      	str	r6, [sp, #0]
  406d6c:	4603      	mov	r3, r0
  406d6e:	4621      	mov	r1, r4
  406d70:	463a      	mov	r2, r7
  406d72:	4628      	mov	r0, r5
  406d74:	47c0      	blx	r8
  406d76:	1c43      	adds	r3, r0, #1
  406d78:	d103      	bne.n	406d82 <_wcrtomb_r+0x32>
  406d7a:	2200      	movs	r2, #0
  406d7c:	238a      	movs	r3, #138	; 0x8a
  406d7e:	6032      	str	r2, [r6, #0]
  406d80:	602b      	str	r3, [r5, #0]
  406d82:	b006      	add	sp, #24
  406d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d88:	4b05      	ldr	r3, [pc, #20]	; (406da0 <_wcrtomb_r+0x50>)
  406d8a:	681f      	ldr	r7, [r3, #0]
  406d8c:	f7ff f97c 	bl	406088 <__locale_charset>
  406d90:	9600      	str	r6, [sp, #0]
  406d92:	4603      	mov	r3, r0
  406d94:	4622      	mov	r2, r4
  406d96:	4628      	mov	r0, r5
  406d98:	a903      	add	r1, sp, #12
  406d9a:	47b8      	blx	r7
  406d9c:	e7eb      	b.n	406d76 <_wcrtomb_r+0x26>
  406d9e:	bf00      	nop
  406da0:	20000890 	.word	0x20000890

00406da4 <__ascii_wctomb>:
  406da4:	b121      	cbz	r1, 406db0 <__ascii_wctomb+0xc>
  406da6:	2aff      	cmp	r2, #255	; 0xff
  406da8:	d804      	bhi.n	406db4 <__ascii_wctomb+0x10>
  406daa:	700a      	strb	r2, [r1, #0]
  406dac:	2001      	movs	r0, #1
  406dae:	4770      	bx	lr
  406db0:	4608      	mov	r0, r1
  406db2:	4770      	bx	lr
  406db4:	238a      	movs	r3, #138	; 0x8a
  406db6:	6003      	str	r3, [r0, #0]
  406db8:	f04f 30ff 	mov.w	r0, #4294967295
  406dbc:	4770      	bx	lr
  406dbe:	bf00      	nop

00406dc0 <_write_r>:
  406dc0:	b570      	push	{r4, r5, r6, lr}
  406dc2:	4c08      	ldr	r4, [pc, #32]	; (406de4 <_write_r+0x24>)
  406dc4:	4606      	mov	r6, r0
  406dc6:	2500      	movs	r5, #0
  406dc8:	4608      	mov	r0, r1
  406dca:	4611      	mov	r1, r2
  406dcc:	461a      	mov	r2, r3
  406dce:	6025      	str	r5, [r4, #0]
  406dd0:	f7f9 fa3a 	bl	400248 <_write>
  406dd4:	1c43      	adds	r3, r0, #1
  406dd6:	d000      	beq.n	406dda <_write_r+0x1a>
  406dd8:	bd70      	pop	{r4, r5, r6, pc}
  406dda:	6823      	ldr	r3, [r4, #0]
  406ddc:	2b00      	cmp	r3, #0
  406dde:	d0fb      	beq.n	406dd8 <_write_r+0x18>
  406de0:	6033      	str	r3, [r6, #0]
  406de2:	bd70      	pop	{r4, r5, r6, pc}
  406de4:	2001cf34 	.word	0x2001cf34

00406de8 <__register_exitproc>:
  406de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406dec:	4c25      	ldr	r4, [pc, #148]	; (406e84 <__register_exitproc+0x9c>)
  406dee:	6825      	ldr	r5, [r4, #0]
  406df0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  406df4:	4606      	mov	r6, r0
  406df6:	4688      	mov	r8, r1
  406df8:	4692      	mov	sl, r2
  406dfa:	4699      	mov	r9, r3
  406dfc:	b3cc      	cbz	r4, 406e72 <__register_exitproc+0x8a>
  406dfe:	6860      	ldr	r0, [r4, #4]
  406e00:	281f      	cmp	r0, #31
  406e02:	dc18      	bgt.n	406e36 <__register_exitproc+0x4e>
  406e04:	1c43      	adds	r3, r0, #1
  406e06:	b17e      	cbz	r6, 406e28 <__register_exitproc+0x40>
  406e08:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  406e0c:	2101      	movs	r1, #1
  406e0e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  406e12:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  406e16:	fa01 f200 	lsl.w	r2, r1, r0
  406e1a:	4317      	orrs	r7, r2
  406e1c:	2e02      	cmp	r6, #2
  406e1e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406e22:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  406e26:	d01e      	beq.n	406e66 <__register_exitproc+0x7e>
  406e28:	3002      	adds	r0, #2
  406e2a:	6063      	str	r3, [r4, #4]
  406e2c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  406e30:	2000      	movs	r0, #0
  406e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e36:	4b14      	ldr	r3, [pc, #80]	; (406e88 <__register_exitproc+0xa0>)
  406e38:	b303      	cbz	r3, 406e7c <__register_exitproc+0x94>
  406e3a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406e3e:	f7ff f99d 	bl	40617c <malloc>
  406e42:	4604      	mov	r4, r0
  406e44:	b1d0      	cbz	r0, 406e7c <__register_exitproc+0x94>
  406e46:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  406e4a:	2700      	movs	r7, #0
  406e4c:	e880 0088 	stmia.w	r0, {r3, r7}
  406e50:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406e54:	4638      	mov	r0, r7
  406e56:	2301      	movs	r3, #1
  406e58:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406e5c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  406e60:	2e00      	cmp	r6, #0
  406e62:	d0e1      	beq.n	406e28 <__register_exitproc+0x40>
  406e64:	e7d0      	b.n	406e08 <__register_exitproc+0x20>
  406e66:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  406e6a:	430a      	orrs	r2, r1
  406e6c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  406e70:	e7da      	b.n	406e28 <__register_exitproc+0x40>
  406e72:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  406e76:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406e7a:	e7c0      	b.n	406dfe <__register_exitproc+0x16>
  406e7c:	f04f 30ff 	mov.w	r0, #4294967295
  406e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e84:	00407cc0 	.word	0x00407cc0
  406e88:	0040617d 	.word	0x0040617d

00406e8c <_close_r>:
  406e8c:	b538      	push	{r3, r4, r5, lr}
  406e8e:	4c07      	ldr	r4, [pc, #28]	; (406eac <_close_r+0x20>)
  406e90:	2300      	movs	r3, #0
  406e92:	4605      	mov	r5, r0
  406e94:	4608      	mov	r0, r1
  406e96:	6023      	str	r3, [r4, #0]
  406e98:	f7f9 ff6a 	bl	400d70 <_close>
  406e9c:	1c43      	adds	r3, r0, #1
  406e9e:	d000      	beq.n	406ea2 <_close_r+0x16>
  406ea0:	bd38      	pop	{r3, r4, r5, pc}
  406ea2:	6823      	ldr	r3, [r4, #0]
  406ea4:	2b00      	cmp	r3, #0
  406ea6:	d0fb      	beq.n	406ea0 <_close_r+0x14>
  406ea8:	602b      	str	r3, [r5, #0]
  406eaa:	bd38      	pop	{r3, r4, r5, pc}
  406eac:	2001cf34 	.word	0x2001cf34

00406eb0 <_fclose_r>:
  406eb0:	2900      	cmp	r1, #0
  406eb2:	d03d      	beq.n	406f30 <_fclose_r+0x80>
  406eb4:	b570      	push	{r4, r5, r6, lr}
  406eb6:	4605      	mov	r5, r0
  406eb8:	460c      	mov	r4, r1
  406eba:	b108      	cbz	r0, 406ec0 <_fclose_r+0x10>
  406ebc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406ebe:	b37b      	cbz	r3, 406f20 <_fclose_r+0x70>
  406ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406ec4:	b90b      	cbnz	r3, 406eca <_fclose_r+0x1a>
  406ec6:	2000      	movs	r0, #0
  406ec8:	bd70      	pop	{r4, r5, r6, pc}
  406eca:	4628      	mov	r0, r5
  406ecc:	4621      	mov	r1, r4
  406ece:	f7fe fc37 	bl	405740 <__sflush_r>
  406ed2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406ed4:	4606      	mov	r6, r0
  406ed6:	b133      	cbz	r3, 406ee6 <_fclose_r+0x36>
  406ed8:	4628      	mov	r0, r5
  406eda:	69e1      	ldr	r1, [r4, #28]
  406edc:	4798      	blx	r3
  406ede:	2800      	cmp	r0, #0
  406ee0:	bfb8      	it	lt
  406ee2:	f04f 36ff 	movlt.w	r6, #4294967295
  406ee6:	89a3      	ldrh	r3, [r4, #12]
  406ee8:	061b      	lsls	r3, r3, #24
  406eea:	d41c      	bmi.n	406f26 <_fclose_r+0x76>
  406eec:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406eee:	b141      	cbz	r1, 406f02 <_fclose_r+0x52>
  406ef0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406ef4:	4299      	cmp	r1, r3
  406ef6:	d002      	beq.n	406efe <_fclose_r+0x4e>
  406ef8:	4628      	mov	r0, r5
  406efa:	f7fe fe37 	bl	405b6c <_free_r>
  406efe:	2300      	movs	r3, #0
  406f00:	6323      	str	r3, [r4, #48]	; 0x30
  406f02:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406f04:	b121      	cbz	r1, 406f10 <_fclose_r+0x60>
  406f06:	4628      	mov	r0, r5
  406f08:	f7fe fe30 	bl	405b6c <_free_r>
  406f0c:	2300      	movs	r3, #0
  406f0e:	6463      	str	r3, [r4, #68]	; 0x44
  406f10:	f7fe fd5a 	bl	4059c8 <__sfp_lock_acquire>
  406f14:	2300      	movs	r3, #0
  406f16:	81a3      	strh	r3, [r4, #12]
  406f18:	f7fe fd58 	bl	4059cc <__sfp_lock_release>
  406f1c:	4630      	mov	r0, r6
  406f1e:	bd70      	pop	{r4, r5, r6, pc}
  406f20:	f7fe fd4c 	bl	4059bc <__sinit>
  406f24:	e7cc      	b.n	406ec0 <_fclose_r+0x10>
  406f26:	4628      	mov	r0, r5
  406f28:	6921      	ldr	r1, [r4, #16]
  406f2a:	f7fe fe1f 	bl	405b6c <_free_r>
  406f2e:	e7dd      	b.n	406eec <_fclose_r+0x3c>
  406f30:	2000      	movs	r0, #0
  406f32:	4770      	bx	lr

00406f34 <_fstat_r>:
  406f34:	b538      	push	{r3, r4, r5, lr}
  406f36:	4c08      	ldr	r4, [pc, #32]	; (406f58 <_fstat_r+0x24>)
  406f38:	2300      	movs	r3, #0
  406f3a:	4605      	mov	r5, r0
  406f3c:	4608      	mov	r0, r1
  406f3e:	4611      	mov	r1, r2
  406f40:	6023      	str	r3, [r4, #0]
  406f42:	f7f9 ff19 	bl	400d78 <_fstat>
  406f46:	1c43      	adds	r3, r0, #1
  406f48:	d000      	beq.n	406f4c <_fstat_r+0x18>
  406f4a:	bd38      	pop	{r3, r4, r5, pc}
  406f4c:	6823      	ldr	r3, [r4, #0]
  406f4e:	2b00      	cmp	r3, #0
  406f50:	d0fb      	beq.n	406f4a <_fstat_r+0x16>
  406f52:	602b      	str	r3, [r5, #0]
  406f54:	bd38      	pop	{r3, r4, r5, pc}
  406f56:	bf00      	nop
  406f58:	2001cf34 	.word	0x2001cf34

00406f5c <_isatty_r>:
  406f5c:	b538      	push	{r3, r4, r5, lr}
  406f5e:	4c07      	ldr	r4, [pc, #28]	; (406f7c <_isatty_r+0x20>)
  406f60:	2300      	movs	r3, #0
  406f62:	4605      	mov	r5, r0
  406f64:	4608      	mov	r0, r1
  406f66:	6023      	str	r3, [r4, #0]
  406f68:	f7f9 ff0c 	bl	400d84 <_isatty>
  406f6c:	1c43      	adds	r3, r0, #1
  406f6e:	d000      	beq.n	406f72 <_isatty_r+0x16>
  406f70:	bd38      	pop	{r3, r4, r5, pc}
  406f72:	6823      	ldr	r3, [r4, #0]
  406f74:	2b00      	cmp	r3, #0
  406f76:	d0fb      	beq.n	406f70 <_isatty_r+0x14>
  406f78:	602b      	str	r3, [r5, #0]
  406f7a:	bd38      	pop	{r3, r4, r5, pc}
  406f7c:	2001cf34 	.word	0x2001cf34

00406f80 <_lseek_r>:
  406f80:	b570      	push	{r4, r5, r6, lr}
  406f82:	4c08      	ldr	r4, [pc, #32]	; (406fa4 <_lseek_r+0x24>)
  406f84:	4606      	mov	r6, r0
  406f86:	2500      	movs	r5, #0
  406f88:	4608      	mov	r0, r1
  406f8a:	4611      	mov	r1, r2
  406f8c:	461a      	mov	r2, r3
  406f8e:	6025      	str	r5, [r4, #0]
  406f90:	f7f9 fefa 	bl	400d88 <_lseek>
  406f94:	1c43      	adds	r3, r0, #1
  406f96:	d000      	beq.n	406f9a <_lseek_r+0x1a>
  406f98:	bd70      	pop	{r4, r5, r6, pc}
  406f9a:	6823      	ldr	r3, [r4, #0]
  406f9c:	2b00      	cmp	r3, #0
  406f9e:	d0fb      	beq.n	406f98 <_lseek_r+0x18>
  406fa0:	6033      	str	r3, [r6, #0]
  406fa2:	bd70      	pop	{r4, r5, r6, pc}
  406fa4:	2001cf34 	.word	0x2001cf34

00406fa8 <_read_r>:
  406fa8:	b570      	push	{r4, r5, r6, lr}
  406faa:	4c08      	ldr	r4, [pc, #32]	; (406fcc <_read_r+0x24>)
  406fac:	4606      	mov	r6, r0
  406fae:	2500      	movs	r5, #0
  406fb0:	4608      	mov	r0, r1
  406fb2:	4611      	mov	r1, r2
  406fb4:	461a      	mov	r2, r3
  406fb6:	6025      	str	r5, [r4, #0]
  406fb8:	f7f9 f928 	bl	40020c <_read>
  406fbc:	1c43      	adds	r3, r0, #1
  406fbe:	d000      	beq.n	406fc2 <_read_r+0x1a>
  406fc0:	bd70      	pop	{r4, r5, r6, pc}
  406fc2:	6823      	ldr	r3, [r4, #0]
  406fc4:	2b00      	cmp	r3, #0
  406fc6:	d0fb      	beq.n	406fc0 <_read_r+0x18>
  406fc8:	6033      	str	r3, [r6, #0]
  406fca:	bd70      	pop	{r4, r5, r6, pc}
  406fcc:	2001cf34 	.word	0x2001cf34

00406fd0 <__aeabi_uldivmod>:
  406fd0:	b953      	cbnz	r3, 406fe8 <__aeabi_uldivmod+0x18>
  406fd2:	b94a      	cbnz	r2, 406fe8 <__aeabi_uldivmod+0x18>
  406fd4:	2900      	cmp	r1, #0
  406fd6:	bf08      	it	eq
  406fd8:	2800      	cmpeq	r0, #0
  406fda:	bf1c      	itt	ne
  406fdc:	f04f 31ff 	movne.w	r1, #4294967295
  406fe0:	f04f 30ff 	movne.w	r0, #4294967295
  406fe4:	f000 b83c 	b.w	407060 <__aeabi_idiv0>
  406fe8:	b082      	sub	sp, #8
  406fea:	46ec      	mov	ip, sp
  406fec:	e92d 5000 	stmdb	sp!, {ip, lr}
  406ff0:	f000 f81e 	bl	407030 <__gnu_uldivmod_helper>
  406ff4:	f8dd e004 	ldr.w	lr, [sp, #4]
  406ff8:	b002      	add	sp, #8
  406ffa:	bc0c      	pop	{r2, r3}
  406ffc:	4770      	bx	lr
  406ffe:	bf00      	nop

00407000 <__gnu_ldivmod_helper>:
  407000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407004:	9c06      	ldr	r4, [sp, #24]
  407006:	4615      	mov	r5, r2
  407008:	4606      	mov	r6, r0
  40700a:	460f      	mov	r7, r1
  40700c:	4698      	mov	r8, r3
  40700e:	f000 f829 	bl	407064 <__divdi3>
  407012:	fb05 f301 	mul.w	r3, r5, r1
  407016:	fb00 3808 	mla	r8, r0, r8, r3
  40701a:	fba5 2300 	umull	r2, r3, r5, r0
  40701e:	1ab2      	subs	r2, r6, r2
  407020:	4443      	add	r3, r8
  407022:	eb67 0303 	sbc.w	r3, r7, r3
  407026:	e9c4 2300 	strd	r2, r3, [r4]
  40702a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40702e:	bf00      	nop

00407030 <__gnu_uldivmod_helper>:
  407030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407034:	9c06      	ldr	r4, [sp, #24]
  407036:	4690      	mov	r8, r2
  407038:	4606      	mov	r6, r0
  40703a:	460f      	mov	r7, r1
  40703c:	461d      	mov	r5, r3
  40703e:	f000 f95f 	bl	407300 <__udivdi3>
  407042:	fb00 f505 	mul.w	r5, r0, r5
  407046:	fba0 2308 	umull	r2, r3, r0, r8
  40704a:	fb08 5501 	mla	r5, r8, r1, r5
  40704e:	1ab2      	subs	r2, r6, r2
  407050:	442b      	add	r3, r5
  407052:	eb67 0303 	sbc.w	r3, r7, r3
  407056:	e9c4 2300 	strd	r2, r3, [r4]
  40705a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40705e:	bf00      	nop

00407060 <__aeabi_idiv0>:
  407060:	4770      	bx	lr
  407062:	bf00      	nop

00407064 <__divdi3>:
  407064:	2900      	cmp	r1, #0
  407066:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40706a:	f2c0 80a6 	blt.w	4071ba <__divdi3+0x156>
  40706e:	2600      	movs	r6, #0
  407070:	2b00      	cmp	r3, #0
  407072:	f2c0 809c 	blt.w	4071ae <__divdi3+0x14a>
  407076:	4688      	mov	r8, r1
  407078:	4694      	mov	ip, r2
  40707a:	469e      	mov	lr, r3
  40707c:	4615      	mov	r5, r2
  40707e:	4604      	mov	r4, r0
  407080:	460f      	mov	r7, r1
  407082:	2b00      	cmp	r3, #0
  407084:	d13d      	bne.n	407102 <__divdi3+0x9e>
  407086:	428a      	cmp	r2, r1
  407088:	d959      	bls.n	40713e <__divdi3+0xda>
  40708a:	fab2 f382 	clz	r3, r2
  40708e:	b13b      	cbz	r3, 4070a0 <__divdi3+0x3c>
  407090:	f1c3 0220 	rsb	r2, r3, #32
  407094:	409f      	lsls	r7, r3
  407096:	fa20 f202 	lsr.w	r2, r0, r2
  40709a:	409d      	lsls	r5, r3
  40709c:	4317      	orrs	r7, r2
  40709e:	409c      	lsls	r4, r3
  4070a0:	0c29      	lsrs	r1, r5, #16
  4070a2:	0c22      	lsrs	r2, r4, #16
  4070a4:	fbb7 fef1 	udiv	lr, r7, r1
  4070a8:	b2a8      	uxth	r0, r5
  4070aa:	fb01 771e 	mls	r7, r1, lr, r7
  4070ae:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  4070b2:	fb00 f30e 	mul.w	r3, r0, lr
  4070b6:	42bb      	cmp	r3, r7
  4070b8:	d90a      	bls.n	4070d0 <__divdi3+0x6c>
  4070ba:	197f      	adds	r7, r7, r5
  4070bc:	f10e 32ff 	add.w	r2, lr, #4294967295
  4070c0:	f080 8105 	bcs.w	4072ce <__divdi3+0x26a>
  4070c4:	42bb      	cmp	r3, r7
  4070c6:	f240 8102 	bls.w	4072ce <__divdi3+0x26a>
  4070ca:	f1ae 0e02 	sub.w	lr, lr, #2
  4070ce:	442f      	add	r7, r5
  4070d0:	1aff      	subs	r7, r7, r3
  4070d2:	b2a4      	uxth	r4, r4
  4070d4:	fbb7 f3f1 	udiv	r3, r7, r1
  4070d8:	fb01 7713 	mls	r7, r1, r3, r7
  4070dc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4070e0:	fb00 f003 	mul.w	r0, r0, r3
  4070e4:	42b8      	cmp	r0, r7
  4070e6:	d908      	bls.n	4070fa <__divdi3+0x96>
  4070e8:	197f      	adds	r7, r7, r5
  4070ea:	f103 32ff 	add.w	r2, r3, #4294967295
  4070ee:	f080 80f0 	bcs.w	4072d2 <__divdi3+0x26e>
  4070f2:	42b8      	cmp	r0, r7
  4070f4:	f240 80ed 	bls.w	4072d2 <__divdi3+0x26e>
  4070f8:	3b02      	subs	r3, #2
  4070fa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  4070fe:	2200      	movs	r2, #0
  407100:	e003      	b.n	40710a <__divdi3+0xa6>
  407102:	428b      	cmp	r3, r1
  407104:	d90f      	bls.n	407126 <__divdi3+0xc2>
  407106:	2200      	movs	r2, #0
  407108:	4613      	mov	r3, r2
  40710a:	1c34      	adds	r4, r6, #0
  40710c:	bf18      	it	ne
  40710e:	2401      	movne	r4, #1
  407110:	4260      	negs	r0, r4
  407112:	f04f 0500 	mov.w	r5, #0
  407116:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40711a:	4058      	eors	r0, r3
  40711c:	4051      	eors	r1, r2
  40711e:	1900      	adds	r0, r0, r4
  407120:	4169      	adcs	r1, r5
  407122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407126:	fab3 f283 	clz	r2, r3
  40712a:	2a00      	cmp	r2, #0
  40712c:	f040 8086 	bne.w	40723c <__divdi3+0x1d8>
  407130:	428b      	cmp	r3, r1
  407132:	d302      	bcc.n	40713a <__divdi3+0xd6>
  407134:	4584      	cmp	ip, r0
  407136:	f200 80db 	bhi.w	4072f0 <__divdi3+0x28c>
  40713a:	2301      	movs	r3, #1
  40713c:	e7e5      	b.n	40710a <__divdi3+0xa6>
  40713e:	b912      	cbnz	r2, 407146 <__divdi3+0xe2>
  407140:	2301      	movs	r3, #1
  407142:	fbb3 f5f2 	udiv	r5, r3, r2
  407146:	fab5 f085 	clz	r0, r5
  40714a:	2800      	cmp	r0, #0
  40714c:	d13b      	bne.n	4071c6 <__divdi3+0x162>
  40714e:	1b78      	subs	r0, r7, r5
  407150:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  407154:	fa1f fc85 	uxth.w	ip, r5
  407158:	2201      	movs	r2, #1
  40715a:	fbb0 f8fe 	udiv	r8, r0, lr
  40715e:	0c21      	lsrs	r1, r4, #16
  407160:	fb0e 0718 	mls	r7, lr, r8, r0
  407164:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  407168:	fb0c f308 	mul.w	r3, ip, r8
  40716c:	42bb      	cmp	r3, r7
  40716e:	d907      	bls.n	407180 <__divdi3+0x11c>
  407170:	197f      	adds	r7, r7, r5
  407172:	f108 31ff 	add.w	r1, r8, #4294967295
  407176:	d202      	bcs.n	40717e <__divdi3+0x11a>
  407178:	42bb      	cmp	r3, r7
  40717a:	f200 80bd 	bhi.w	4072f8 <__divdi3+0x294>
  40717e:	4688      	mov	r8, r1
  407180:	1aff      	subs	r7, r7, r3
  407182:	b2a4      	uxth	r4, r4
  407184:	fbb7 f3fe 	udiv	r3, r7, lr
  407188:	fb0e 7713 	mls	r7, lr, r3, r7
  40718c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  407190:	fb0c fc03 	mul.w	ip, ip, r3
  407194:	45bc      	cmp	ip, r7
  407196:	d907      	bls.n	4071a8 <__divdi3+0x144>
  407198:	197f      	adds	r7, r7, r5
  40719a:	f103 31ff 	add.w	r1, r3, #4294967295
  40719e:	d202      	bcs.n	4071a6 <__divdi3+0x142>
  4071a0:	45bc      	cmp	ip, r7
  4071a2:	f200 80a7 	bhi.w	4072f4 <__divdi3+0x290>
  4071a6:	460b      	mov	r3, r1
  4071a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4071ac:	e7ad      	b.n	40710a <__divdi3+0xa6>
  4071ae:	4252      	negs	r2, r2
  4071b0:	ea6f 0606 	mvn.w	r6, r6
  4071b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4071b8:	e75d      	b.n	407076 <__divdi3+0x12>
  4071ba:	4240      	negs	r0, r0
  4071bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4071c0:	f04f 36ff 	mov.w	r6, #4294967295
  4071c4:	e754      	b.n	407070 <__divdi3+0xc>
  4071c6:	f1c0 0220 	rsb	r2, r0, #32
  4071ca:	fa24 f102 	lsr.w	r1, r4, r2
  4071ce:	fa07 f300 	lsl.w	r3, r7, r0
  4071d2:	4085      	lsls	r5, r0
  4071d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4071d8:	40d7      	lsrs	r7, r2
  4071da:	4319      	orrs	r1, r3
  4071dc:	fbb7 f2fe 	udiv	r2, r7, lr
  4071e0:	0c0b      	lsrs	r3, r1, #16
  4071e2:	fb0e 7712 	mls	r7, lr, r2, r7
  4071e6:	fa1f fc85 	uxth.w	ip, r5
  4071ea:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  4071ee:	fb0c f702 	mul.w	r7, ip, r2
  4071f2:	429f      	cmp	r7, r3
  4071f4:	fa04 f400 	lsl.w	r4, r4, r0
  4071f8:	d907      	bls.n	40720a <__divdi3+0x1a6>
  4071fa:	195b      	adds	r3, r3, r5
  4071fc:	f102 30ff 	add.w	r0, r2, #4294967295
  407200:	d274      	bcs.n	4072ec <__divdi3+0x288>
  407202:	429f      	cmp	r7, r3
  407204:	d972      	bls.n	4072ec <__divdi3+0x288>
  407206:	3a02      	subs	r2, #2
  407208:	442b      	add	r3, r5
  40720a:	1bdf      	subs	r7, r3, r7
  40720c:	b289      	uxth	r1, r1
  40720e:	fbb7 f8fe 	udiv	r8, r7, lr
  407212:	fb0e 7318 	mls	r3, lr, r8, r7
  407216:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40721a:	fb0c f708 	mul.w	r7, ip, r8
  40721e:	429f      	cmp	r7, r3
  407220:	d908      	bls.n	407234 <__divdi3+0x1d0>
  407222:	195b      	adds	r3, r3, r5
  407224:	f108 31ff 	add.w	r1, r8, #4294967295
  407228:	d25c      	bcs.n	4072e4 <__divdi3+0x280>
  40722a:	429f      	cmp	r7, r3
  40722c:	d95a      	bls.n	4072e4 <__divdi3+0x280>
  40722e:	f1a8 0802 	sub.w	r8, r8, #2
  407232:	442b      	add	r3, r5
  407234:	1bd8      	subs	r0, r3, r7
  407236:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40723a:	e78e      	b.n	40715a <__divdi3+0xf6>
  40723c:	f1c2 0320 	rsb	r3, r2, #32
  407240:	fa2c f103 	lsr.w	r1, ip, r3
  407244:	fa0e fe02 	lsl.w	lr, lr, r2
  407248:	fa20 f703 	lsr.w	r7, r0, r3
  40724c:	ea41 0e0e 	orr.w	lr, r1, lr
  407250:	fa08 f002 	lsl.w	r0, r8, r2
  407254:	fa28 f103 	lsr.w	r1, r8, r3
  407258:	ea4f 451e 	mov.w	r5, lr, lsr #16
  40725c:	4338      	orrs	r0, r7
  40725e:	fbb1 f8f5 	udiv	r8, r1, r5
  407262:	0c03      	lsrs	r3, r0, #16
  407264:	fb05 1118 	mls	r1, r5, r8, r1
  407268:	fa1f f78e 	uxth.w	r7, lr
  40726c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  407270:	fb07 f308 	mul.w	r3, r7, r8
  407274:	428b      	cmp	r3, r1
  407276:	fa0c fc02 	lsl.w	ip, ip, r2
  40727a:	d909      	bls.n	407290 <__divdi3+0x22c>
  40727c:	eb11 010e 	adds.w	r1, r1, lr
  407280:	f108 39ff 	add.w	r9, r8, #4294967295
  407284:	d230      	bcs.n	4072e8 <__divdi3+0x284>
  407286:	428b      	cmp	r3, r1
  407288:	d92e      	bls.n	4072e8 <__divdi3+0x284>
  40728a:	f1a8 0802 	sub.w	r8, r8, #2
  40728e:	4471      	add	r1, lr
  407290:	1ac9      	subs	r1, r1, r3
  407292:	b280      	uxth	r0, r0
  407294:	fbb1 f3f5 	udiv	r3, r1, r5
  407298:	fb05 1113 	mls	r1, r5, r3, r1
  40729c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4072a0:	fb07 f703 	mul.w	r7, r7, r3
  4072a4:	428f      	cmp	r7, r1
  4072a6:	d908      	bls.n	4072ba <__divdi3+0x256>
  4072a8:	eb11 010e 	adds.w	r1, r1, lr
  4072ac:	f103 30ff 	add.w	r0, r3, #4294967295
  4072b0:	d216      	bcs.n	4072e0 <__divdi3+0x27c>
  4072b2:	428f      	cmp	r7, r1
  4072b4:	d914      	bls.n	4072e0 <__divdi3+0x27c>
  4072b6:	3b02      	subs	r3, #2
  4072b8:	4471      	add	r1, lr
  4072ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4072be:	1bc9      	subs	r1, r1, r7
  4072c0:	fba3 890c 	umull	r8, r9, r3, ip
  4072c4:	4549      	cmp	r1, r9
  4072c6:	d309      	bcc.n	4072dc <__divdi3+0x278>
  4072c8:	d005      	beq.n	4072d6 <__divdi3+0x272>
  4072ca:	2200      	movs	r2, #0
  4072cc:	e71d      	b.n	40710a <__divdi3+0xa6>
  4072ce:	4696      	mov	lr, r2
  4072d0:	e6fe      	b.n	4070d0 <__divdi3+0x6c>
  4072d2:	4613      	mov	r3, r2
  4072d4:	e711      	b.n	4070fa <__divdi3+0x96>
  4072d6:	4094      	lsls	r4, r2
  4072d8:	4544      	cmp	r4, r8
  4072da:	d2f6      	bcs.n	4072ca <__divdi3+0x266>
  4072dc:	3b01      	subs	r3, #1
  4072de:	e7f4      	b.n	4072ca <__divdi3+0x266>
  4072e0:	4603      	mov	r3, r0
  4072e2:	e7ea      	b.n	4072ba <__divdi3+0x256>
  4072e4:	4688      	mov	r8, r1
  4072e6:	e7a5      	b.n	407234 <__divdi3+0x1d0>
  4072e8:	46c8      	mov	r8, r9
  4072ea:	e7d1      	b.n	407290 <__divdi3+0x22c>
  4072ec:	4602      	mov	r2, r0
  4072ee:	e78c      	b.n	40720a <__divdi3+0x1a6>
  4072f0:	4613      	mov	r3, r2
  4072f2:	e70a      	b.n	40710a <__divdi3+0xa6>
  4072f4:	3b02      	subs	r3, #2
  4072f6:	e757      	b.n	4071a8 <__divdi3+0x144>
  4072f8:	f1a8 0802 	sub.w	r8, r8, #2
  4072fc:	442f      	add	r7, r5
  4072fe:	e73f      	b.n	407180 <__divdi3+0x11c>

00407300 <__udivdi3>:
  407300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407304:	2b00      	cmp	r3, #0
  407306:	d144      	bne.n	407392 <__udivdi3+0x92>
  407308:	428a      	cmp	r2, r1
  40730a:	4615      	mov	r5, r2
  40730c:	4604      	mov	r4, r0
  40730e:	d94f      	bls.n	4073b0 <__udivdi3+0xb0>
  407310:	fab2 f782 	clz	r7, r2
  407314:	460e      	mov	r6, r1
  407316:	b14f      	cbz	r7, 40732c <__udivdi3+0x2c>
  407318:	f1c7 0320 	rsb	r3, r7, #32
  40731c:	40b9      	lsls	r1, r7
  40731e:	fa20 f603 	lsr.w	r6, r0, r3
  407322:	fa02 f507 	lsl.w	r5, r2, r7
  407326:	430e      	orrs	r6, r1
  407328:	fa00 f407 	lsl.w	r4, r0, r7
  40732c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  407330:	0c23      	lsrs	r3, r4, #16
  407332:	fbb6 f0fe 	udiv	r0, r6, lr
  407336:	b2af      	uxth	r7, r5
  407338:	fb0e 6110 	mls	r1, lr, r0, r6
  40733c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407340:	fb07 f100 	mul.w	r1, r7, r0
  407344:	4299      	cmp	r1, r3
  407346:	d909      	bls.n	40735c <__udivdi3+0x5c>
  407348:	195b      	adds	r3, r3, r5
  40734a:	f100 32ff 	add.w	r2, r0, #4294967295
  40734e:	f080 80ec 	bcs.w	40752a <__udivdi3+0x22a>
  407352:	4299      	cmp	r1, r3
  407354:	f240 80e9 	bls.w	40752a <__udivdi3+0x22a>
  407358:	3802      	subs	r0, #2
  40735a:	442b      	add	r3, r5
  40735c:	1a5a      	subs	r2, r3, r1
  40735e:	b2a4      	uxth	r4, r4
  407360:	fbb2 f3fe 	udiv	r3, r2, lr
  407364:	fb0e 2213 	mls	r2, lr, r3, r2
  407368:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40736c:	fb07 f703 	mul.w	r7, r7, r3
  407370:	4297      	cmp	r7, r2
  407372:	d908      	bls.n	407386 <__udivdi3+0x86>
  407374:	1952      	adds	r2, r2, r5
  407376:	f103 31ff 	add.w	r1, r3, #4294967295
  40737a:	f080 80d8 	bcs.w	40752e <__udivdi3+0x22e>
  40737e:	4297      	cmp	r7, r2
  407380:	f240 80d5 	bls.w	40752e <__udivdi3+0x22e>
  407384:	3b02      	subs	r3, #2
  407386:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40738a:	2600      	movs	r6, #0
  40738c:	4631      	mov	r1, r6
  40738e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407392:	428b      	cmp	r3, r1
  407394:	d847      	bhi.n	407426 <__udivdi3+0x126>
  407396:	fab3 f683 	clz	r6, r3
  40739a:	2e00      	cmp	r6, #0
  40739c:	d148      	bne.n	407430 <__udivdi3+0x130>
  40739e:	428b      	cmp	r3, r1
  4073a0:	d302      	bcc.n	4073a8 <__udivdi3+0xa8>
  4073a2:	4282      	cmp	r2, r0
  4073a4:	f200 80cd 	bhi.w	407542 <__udivdi3+0x242>
  4073a8:	2001      	movs	r0, #1
  4073aa:	4631      	mov	r1, r6
  4073ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073b0:	b912      	cbnz	r2, 4073b8 <__udivdi3+0xb8>
  4073b2:	2501      	movs	r5, #1
  4073b4:	fbb5 f5f2 	udiv	r5, r5, r2
  4073b8:	fab5 f885 	clz	r8, r5
  4073bc:	f1b8 0f00 	cmp.w	r8, #0
  4073c0:	d177      	bne.n	4074b2 <__udivdi3+0x1b2>
  4073c2:	1b4a      	subs	r2, r1, r5
  4073c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4073c8:	b2af      	uxth	r7, r5
  4073ca:	2601      	movs	r6, #1
  4073cc:	fbb2 f0fe 	udiv	r0, r2, lr
  4073d0:	0c23      	lsrs	r3, r4, #16
  4073d2:	fb0e 2110 	mls	r1, lr, r0, r2
  4073d6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  4073da:	fb07 f300 	mul.w	r3, r7, r0
  4073de:	428b      	cmp	r3, r1
  4073e0:	d907      	bls.n	4073f2 <__udivdi3+0xf2>
  4073e2:	1949      	adds	r1, r1, r5
  4073e4:	f100 32ff 	add.w	r2, r0, #4294967295
  4073e8:	d202      	bcs.n	4073f0 <__udivdi3+0xf0>
  4073ea:	428b      	cmp	r3, r1
  4073ec:	f200 80ba 	bhi.w	407564 <__udivdi3+0x264>
  4073f0:	4610      	mov	r0, r2
  4073f2:	1ac9      	subs	r1, r1, r3
  4073f4:	b2a4      	uxth	r4, r4
  4073f6:	fbb1 f3fe 	udiv	r3, r1, lr
  4073fa:	fb0e 1113 	mls	r1, lr, r3, r1
  4073fe:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  407402:	fb07 f703 	mul.w	r7, r7, r3
  407406:	42a7      	cmp	r7, r4
  407408:	d908      	bls.n	40741c <__udivdi3+0x11c>
  40740a:	1964      	adds	r4, r4, r5
  40740c:	f103 32ff 	add.w	r2, r3, #4294967295
  407410:	f080 808f 	bcs.w	407532 <__udivdi3+0x232>
  407414:	42a7      	cmp	r7, r4
  407416:	f240 808c 	bls.w	407532 <__udivdi3+0x232>
  40741a:	3b02      	subs	r3, #2
  40741c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407420:	4631      	mov	r1, r6
  407422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407426:	2600      	movs	r6, #0
  407428:	4630      	mov	r0, r6
  40742a:	4631      	mov	r1, r6
  40742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407430:	f1c6 0420 	rsb	r4, r6, #32
  407434:	fa22 f504 	lsr.w	r5, r2, r4
  407438:	40b3      	lsls	r3, r6
  40743a:	432b      	orrs	r3, r5
  40743c:	fa20 fc04 	lsr.w	ip, r0, r4
  407440:	fa01 f706 	lsl.w	r7, r1, r6
  407444:	fa21 f504 	lsr.w	r5, r1, r4
  407448:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40744c:	ea4c 0707 	orr.w	r7, ip, r7
  407450:	fbb5 f8fe 	udiv	r8, r5, lr
  407454:	0c39      	lsrs	r1, r7, #16
  407456:	fb0e 5518 	mls	r5, lr, r8, r5
  40745a:	fa1f fc83 	uxth.w	ip, r3
  40745e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  407462:	fb0c f108 	mul.w	r1, ip, r8
  407466:	42a9      	cmp	r1, r5
  407468:	fa02 f206 	lsl.w	r2, r2, r6
  40746c:	d904      	bls.n	407478 <__udivdi3+0x178>
  40746e:	18ed      	adds	r5, r5, r3
  407470:	f108 34ff 	add.w	r4, r8, #4294967295
  407474:	d367      	bcc.n	407546 <__udivdi3+0x246>
  407476:	46a0      	mov	r8, r4
  407478:	1a6d      	subs	r5, r5, r1
  40747a:	b2bf      	uxth	r7, r7
  40747c:	fbb5 f4fe 	udiv	r4, r5, lr
  407480:	fb0e 5514 	mls	r5, lr, r4, r5
  407484:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  407488:	fb0c fc04 	mul.w	ip, ip, r4
  40748c:	458c      	cmp	ip, r1
  40748e:	d904      	bls.n	40749a <__udivdi3+0x19a>
  407490:	18c9      	adds	r1, r1, r3
  407492:	f104 35ff 	add.w	r5, r4, #4294967295
  407496:	d35c      	bcc.n	407552 <__udivdi3+0x252>
  407498:	462c      	mov	r4, r5
  40749a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40749e:	ebcc 0101 	rsb	r1, ip, r1
  4074a2:	fba4 2302 	umull	r2, r3, r4, r2
  4074a6:	4299      	cmp	r1, r3
  4074a8:	d348      	bcc.n	40753c <__udivdi3+0x23c>
  4074aa:	d044      	beq.n	407536 <__udivdi3+0x236>
  4074ac:	4620      	mov	r0, r4
  4074ae:	2600      	movs	r6, #0
  4074b0:	e76c      	b.n	40738c <__udivdi3+0x8c>
  4074b2:	f1c8 0420 	rsb	r4, r8, #32
  4074b6:	fa01 f308 	lsl.w	r3, r1, r8
  4074ba:	fa05 f508 	lsl.w	r5, r5, r8
  4074be:	fa20 f704 	lsr.w	r7, r0, r4
  4074c2:	40e1      	lsrs	r1, r4
  4074c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4074c8:	431f      	orrs	r7, r3
  4074ca:	fbb1 f6fe 	udiv	r6, r1, lr
  4074ce:	0c3a      	lsrs	r2, r7, #16
  4074d0:	fb0e 1116 	mls	r1, lr, r6, r1
  4074d4:	fa1f fc85 	uxth.w	ip, r5
  4074d8:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  4074dc:	fb0c f206 	mul.w	r2, ip, r6
  4074e0:	429a      	cmp	r2, r3
  4074e2:	fa00 f408 	lsl.w	r4, r0, r8
  4074e6:	d907      	bls.n	4074f8 <__udivdi3+0x1f8>
  4074e8:	195b      	adds	r3, r3, r5
  4074ea:	f106 31ff 	add.w	r1, r6, #4294967295
  4074ee:	d237      	bcs.n	407560 <__udivdi3+0x260>
  4074f0:	429a      	cmp	r2, r3
  4074f2:	d935      	bls.n	407560 <__udivdi3+0x260>
  4074f4:	3e02      	subs	r6, #2
  4074f6:	442b      	add	r3, r5
  4074f8:	1a9b      	subs	r3, r3, r2
  4074fa:	b2bf      	uxth	r7, r7
  4074fc:	fbb3 f0fe 	udiv	r0, r3, lr
  407500:	fb0e 3310 	mls	r3, lr, r0, r3
  407504:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  407508:	fb0c f100 	mul.w	r1, ip, r0
  40750c:	4299      	cmp	r1, r3
  40750e:	d907      	bls.n	407520 <__udivdi3+0x220>
  407510:	195b      	adds	r3, r3, r5
  407512:	f100 32ff 	add.w	r2, r0, #4294967295
  407516:	d221      	bcs.n	40755c <__udivdi3+0x25c>
  407518:	4299      	cmp	r1, r3
  40751a:	d91f      	bls.n	40755c <__udivdi3+0x25c>
  40751c:	3802      	subs	r0, #2
  40751e:	442b      	add	r3, r5
  407520:	1a5a      	subs	r2, r3, r1
  407522:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  407526:	4667      	mov	r7, ip
  407528:	e750      	b.n	4073cc <__udivdi3+0xcc>
  40752a:	4610      	mov	r0, r2
  40752c:	e716      	b.n	40735c <__udivdi3+0x5c>
  40752e:	460b      	mov	r3, r1
  407530:	e729      	b.n	407386 <__udivdi3+0x86>
  407532:	4613      	mov	r3, r2
  407534:	e772      	b.n	40741c <__udivdi3+0x11c>
  407536:	40b0      	lsls	r0, r6
  407538:	4290      	cmp	r0, r2
  40753a:	d2b7      	bcs.n	4074ac <__udivdi3+0x1ac>
  40753c:	1e60      	subs	r0, r4, #1
  40753e:	2600      	movs	r6, #0
  407540:	e724      	b.n	40738c <__udivdi3+0x8c>
  407542:	4630      	mov	r0, r6
  407544:	e722      	b.n	40738c <__udivdi3+0x8c>
  407546:	42a9      	cmp	r1, r5
  407548:	d995      	bls.n	407476 <__udivdi3+0x176>
  40754a:	f1a8 0802 	sub.w	r8, r8, #2
  40754e:	441d      	add	r5, r3
  407550:	e792      	b.n	407478 <__udivdi3+0x178>
  407552:	458c      	cmp	ip, r1
  407554:	d9a0      	bls.n	407498 <__udivdi3+0x198>
  407556:	3c02      	subs	r4, #2
  407558:	4419      	add	r1, r3
  40755a:	e79e      	b.n	40749a <__udivdi3+0x19a>
  40755c:	4610      	mov	r0, r2
  40755e:	e7df      	b.n	407520 <__udivdi3+0x220>
  407560:	460e      	mov	r6, r1
  407562:	e7c9      	b.n	4074f8 <__udivdi3+0x1f8>
  407564:	3802      	subs	r0, #2
  407566:	4429      	add	r1, r5
  407568:	e743      	b.n	4073f2 <__udivdi3+0xf2>
  40756a:	bf00      	nop
  40756c:	732f2e2e 	.word	0x732f2e2e
  407570:	412f6372 	.word	0x412f6372
  407574:	742f4653 	.word	0x742f4653
  407578:	64726968 	.word	0x64726968
  40757c:	74726170 	.word	0x74726170
  407580:	72662f79 	.word	0x72662f79
  407584:	74726565 	.word	0x74726565
  407588:	662f736f 	.word	0x662f736f
  40758c:	72656572 	.word	0x72656572
  407590:	2d736f74 	.word	0x2d736f74
  407594:	2e332e37 	.word	0x2e332e37
  407598:	6f732f30 	.word	0x6f732f30
  40759c:	65637275 	.word	0x65637275
  4075a0:	6575712f 	.word	0x6575712f
  4075a4:	632e6575 	.word	0x632e6575
  4075a8:	00000000 	.word	0x00000000

004075ac <ucExpectedStackBytes.6044>:
  4075ac:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
  4075bc:	a5a5a5a5 09097325 25096325 75250975     ....%s..%c.%u.%u
  4075cc:	0d752509 0000000a 09097325 30090930     .%u.....%s..0..0
  4075dc:	0a0d2525 00000000 09097325 09097525     %%......%s..%u..
  4075ec:	25257525 00000a0d 09097325 09097525     %u%%....%s..%u..
  4075fc:	2525313c 00000a0d 732f2e2e 412f6372     <1%%....../src/A
  40760c:	742f4653 64726968 74726170 72662f79     SF/thirdparty/fr
  40761c:	74726565 662f736f 72656572 2d736f74     eertos/freertos-
  40762c:	2e332e37 6f732f30 65637275 7361742f     7.3.0/source/tas
  40763c:	632e736b 00000000 454c4449 00000000     ks.c....IDLE....
  40764c:	20726d54 00637653 732f2e2e 412f6372     Tmr Svc.../src/A
  40765c:	742f4653 64726968 74726170 72662f79     SF/thirdparty/fr
  40766c:	74726565 662f736f 72656572 2d736f74     eertos/freertos-
  40767c:	2e332e37 6f732f30 65637275 6d69742f     7.3.0/source/tim
  40768c:	2e737265 00000063 2d2d2d2d 2d2d2d2d     ers.c...--------
  40769c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  4076ac:	2d2d2d2d 2d2d2d2d 64252d2d 2d2d2d2d     ----------%d----
  4076bc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 0a0d2d2d     --------------..
  4076cc:	00000000 28643625 0d296425 0000000a     ....%6d(%d).....
  4076dc:	6c696146 74206465 7263206f 65746165     Failed to create
  4076ec:	6d655320 6f687061 203a6572 72617473      Semaphore: star
  4076fc:	65735474 726f736e 636f7250 69737365     tTsensorProcessi
  40770c:	0d20676e 0000000a 29642528 29732528     ng .....(%d)(%s)
  40771c:	00000020 65636552 20657669 20746567      ...Receive get 
  40772c:	706d6574 74617265 20657275 6d6d6f63     temperature comm
  40773c:	2e646e61 00000a0d 65746e65 6f632072     and.....enter co
  40774c:	6769666e 646f6d20 000a0d65 65746e65     nfig mode...ente
  40775c:	65742072 63207473 616d6d6f 6d20646e     r test command m
  40776c:	0d65646f 0000000a 66726570 206d726f     ode.....perform 
  40777c:	666e6f63 6d206769 0d65646f 0000000a     config mode.....
  40778c:	66726570 206d726f 74736574 6d6f6320     perform test com
  40779c:	646e616d 646f6d20 000a0d65 70747468     mand mode...http
  4077ac:	2f2f3a73 752d3373 65772d73 312d7473     s://s3-us-west-1
  4077bc:	616d612e 616e6f7a 632e7377 6d2f6d6f     .amazonaws.com/m
  4077cc:	73692e6f 6c69616d 6d326d2f 61746f5f     o.ismail/m2m_ota
  4077dc:	3061335f 6e69622e 00000000 69726553     _3a0.bin....Seri
  4077ec:	49206c61 6425284e 25203a29 000a0d73     al IN(%d): %s...
  4077fc:	61766e49 2064696c 64616568 72207265     Invalid header r
  40780c:	69656365 20646576 25783028 0d2e2978     eceived (0x%x)..
  40781c:	0000000a 61766e49 2064696c 2c435243     ....Invalid CRC,
  40782c:	63655220 65766965 52432064 78302843      Received CRC(0x
  40783c:	2c297825 6c614320 616c7563 20646574     %x), Calculated 
  40784c:	28435243 78257830 0a0d2e29 00000000     CRC(0x%x).......
  40785c:	462d6957 6f4d2069 656c7564 61655220     Wi-Fi Module Rea
  40786c:	0d217964 0000000a 65636552 20657669     dy!.....Receive 
  40787c:	20746567 70616e73 746f6873 6d6f6320     get snapshot com
  40788c:	646e616d 000a0d2e 20746567 69666977     mand....get wifi
  40789c:	73657220 726f6620 616d6920 0a0d6567      res for image..
  4078ac:	00000000 69666957 646f6d20 20656c75     ....Wifi module 
  4078bc:	6e6e6f63 20746365 4a206f74 65732044     connect to JD se
  4078cc:	72657672 000a0d2e 6e6e6f43 20746365     rver....Connect 
  4078dc:	52206f74 746f6d65 65532065 72657672     to Remote Server
  4078ec:	2e4b4f20 00000a0d 6e6e6f43 69746365      OK.....Connecti
  4078fc:	62206e6f 68746165 74726165 000a0d2e     on beatheart....
  40790c:	61647055 44206574 20617461 0d2e4b4f     Update Data OK..
  40791c:	0000000a 65736552 6f742074 63614620     ....Reset to Fac
  40792c:	79726f74 2077654e 0d2e4b4f 0000000a     toryNew OK......
  40793c:	44495555 53455220 4b4f2050 000a0d2e     UUID RESP OK....
  40794c:	44495555 53455220 72452050 2e726f72     UUID RESP Error.
  40795c:	00000a0d 72617453 6e732074 65666669     ....Start sniffe
  40796c:	6f6d2072 2e2e6564 000a0d2e 20746f47     r mode......Got 
  40797c:	69666977 69737320 25203a64 70202c73     wifi ssid: %s, p
  40798c:	203a6b73 0a0d7325 00000000 72617453     sk: %s......Star
  40799c:	69772074 63206966 656e6e6f 73207463     t wifi connect s
  4079ac:	28646973 2c297325 6b737020 29732528     sid(%s), psk(%s)
  4079bc:	000a0d2e 74726f43 41207375 75205050     ....Cortus APP u
  4079cc:	74616470 4b4f2065 000a0d2e 6f727245     pdate OK....Erro
  4079dc:	4f203a72 20554154 61766e69 2064696c     r: OTAU invalid 
  4079ec:	2e6c7275 00000a0d 6f727245 4f203a72     url.....Error: O
  4079fc:	20554154 6e776f64 64616f6c 69616620     TAU download fai
  407a0c:	2e64656c 00000a0d 6f727245 53203a72     led.....Error: S
  407a1c:	63746977 544f2068 69205541 6567616d     witch OTAU image
  407a2c:	69616620 2e64656c 00000a0d 69466957      failed.....WiFi
  407a3c:	72696620 7261776d 70752065 65746164      firmware update
  407a4c:	2e4b4f20 00000a0d 20746553 20707061      OK.....Set app 
  407a5c:	7561746f 6c727520 2e4b4f20 00000a0d     otau url OK.....
  407a6c:	20746553 69666977 72696620 7261776d     Set wifi firmwar
  407a7c:	746f2065 75207561 4f206c72 0a0d2e4b     e otau url OK...
  407a8c:	00000000 462d6957 6f632069 63656e6e     ....Wi-Fi connec
  407a9c:	6f742074 6f6c4320 4f206475 000a0d4b     t to Cloud OK...
  407aac:	462d6957 65722069 6e727574 74656720     Wi-Fi return get
  407abc:	72617520 66632074 4b4f2067 00000a0d      uart cfg OK....
  407acc:	20504455 6b636170 6a207465 636e6f73     UDP packet jsonc
  407adc:	72746e6f 70206c6f 656b6361 0a0d2e74     ontrol packet...
  407aec:	00000000 20504455 6b636170 75207465     ....UDP packet u
  407afc:	6f6e6b6e 70206e77 656b6361 0a0d2e74     nknown packet...
  407b0c:	00000000 6f727245 6f203a72 6f207475     ....Error: out o
  407b1c:	656d2066 79726f6d 000a0d2e 63205041     f memory....AP c
  407b2c:	46206e61 646e756f 000a0d2e 6e205041     an Found....AP n
  407b3c:	4620746f 646e756f 000a0d2e 6f727245     ot Found....Erro
  407b4c:	55203a72 20545241 656d6974 2e74756f     r: UART timeout.
  407b5c:	00000a0d 75736e55 726f7070 20646574     ....Unsupported 
  407b6c:	6d6d6f63 28646e61 2e296425 00000a0d     command(%d).....
  407b7c:	33323130 37363534 62613938 66656463     0123456789abcdef
  407b8c:	00000000 6e6f4378 54676966 72656d69     ....xConfigTimer
  407b9c:	00000000 6e6f4378 54676966 72656d69     ....xConfigTimer
  407bac:	65726320 20657461 6c696166 0d2e6465      create failed..
  407bbc:	0000000a 64654c78 656d6954 00000072     ....xLedTimer...
  407bcc:	64654c78 65646f4d 656d6954 72632072     xLedModeTimer cr
  407bdc:	65746165 69616620 2e64656c 00000a0d     eate failed.....
  407bec:	69726553 51206c61 65756575 206e4920     Serial Queue In 
  407bfc:	61657263 66206574 656c6961 000a0d64     create failed...
  407c0c:	69726553 51206c61 65756575 74754f20     Serial Queue Out
  407c1c:	65726320 20657461 6c696166 0a0d6465      create failed..
  407c2c:	00000000 69666977 006e695f 69726553     ....wifi_in.Seri
  407c3c:	4f206c61 25285455 0a0d2964 00000000     al OUT(%d)......
  407c4c:	74412d2d 206c656d 20353547 20546f49     --Atmel G55 IoT 
  407c5c:	0a0d2d2d 53202d2d 35474d41 50585f35     --..-- SAMG55_XP
  407c6c:	4e49414c 505f4445 2d204f52 2d0a0d2d     LAINED_PRO --..-
  407c7c:	6f43202d 6c69706d 203a6465 2074634f     - Compiled: Oct 
  407c8c:	32203331 20363130 313a3131 31343a38     13 2016 11:18:41
  407c9c:	0d2d2d20 00000000 69666977 7361745f      --.....wifi_tas
  407cac:	0000006b 736e6573 745f726f 006b7361     k...sensor_task.
  407cbc:	00000043                                C...

00407cc0 <_global_impure_ptr>:
  407cc0:	20000030                                0.. 

00407cc4 <zeroes.6869>:
  407cc4:	30303030 30303030 30303030 30303030     0000000000000000
  407cd4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  407ce4:	00000000 6c756e28 0000296c              ....(null)..

00407cf0 <blanks.6868>:
  407cf0:	20202020 20202020 20202020 20202020                     

00407d00 <_init>:
  407d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407d02:	bf00      	nop
  407d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407d06:	bc08      	pop	{r3}
  407d08:	469e      	mov	lr, r3
  407d0a:	4770      	bx	lr

00407d0c <__init_array_start>:
  407d0c:	00405721 	.word	0x00405721

00407d10 <__frame_dummy_init_array_entry>:
  407d10:	0040016d                                m.@.

00407d14 <_fini>:
  407d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407d16:	bf00      	nop
  407d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407d1a:	bc08      	pop	{r3}
  407d1c:	469e      	mov	lr, r3
  407d1e:	4770      	bx	lr

00407d20 <__fini_array_start>:
  407d20:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....

20000010 <SystemCoreClock>:
20000010:	1200 007a                                   ..z.

20000014 <uxCriticalNesting>:
20000014:	aaaa aaaa                                   ....

20000018 <xFreeBytesRemaining>:
20000018:	8000 0001                                   ....

2000001c <xNextTaskUnblockTime>:
2000001c:	ffff ffff                                   ....

20000020 <button_mode.9232>:
20000020:	0201                                             .

20000021 <led_blinking_mode>:
20000021:	0002 8800                                        ...

20000024 <resp_out_data.9105>:
20000024:	b388 2001                                   ... 

20000028 <resp_out_data.9113>:
20000028:	b398 2001 0000 0000                         ... ....

20000030 <impure_data>:
20000030:	0000 0000 031c 2000 0384 2000 03ec 2000     ....... ... ... 
	...
20000064:	7cbc 0040 0000 0000 0000 0000 0000 0000     .|@.............
	...
200000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000458 <_impure_ptr>:
20000458:	0030 2000                                   0.. 

2000045c <lc_ctype_charset>:
2000045c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2000047c <__mb_cur_max>:
2000047c:	0001 0000                                   ....

20000480 <__malloc_av_>:
	...
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 

20000888 <__malloc_trim_threshold>:
20000888:	0000 0002                                   ....

2000088c <__malloc_sbrk_base>:
2000088c:	ffff ffff                                   ....

20000890 <__wctomb>:
20000890:	6da5 0040                                   .m@.
